CREATE OR REPLACE PACKAGE BODY CSF_OWN.PK_APUR_COFINS IS

--------------------------------------------------------------------------------
--| Corpo do pacote de procedimentos de Geração da Apuração de COFINS - BLOCO M
--------------------------------------------------------------------------------

-----------------------------------------------------------------------------
--| Função para retornar o row da Tabela de Periodo de Consolidação da Contribuição do Cofins
-----------------------------------------------------------------------------
procedure pkb_ret_perconscontrcofins ( en_empresa_id            in per_cons_contr_pis.empresa_id%type
                                     , ed_dt_ini                in per_cons_contr_pis.dt_ini%type
                                     , ed_dt_fin                in per_cons_contr_pis.dt_fin%type
                                     , st_per_cons_contr_cofins in out per_cons_contr_cofins%rowtype 
                                  )
is
begin
   if st_per_cons_contr_cofins.id is not null then
     return;
   else
      --
      select *
        into st_per_cons_contr_cofins
        from per_cons_contr_cofins
      where empresa_id = en_empresa_id
        and dt_ini    >= ed_dt_ini
        and dt_fin    <= ed_dt_fin;
      --     
   end if;     
   --
exception
  when no_data_found then
     null;
  when others then
     gv_resumo_log := 'Erro na procedure pkb_ret_perconscontrcofins : '||sqlerrm;
     raise_application_error (-20101, gv_resumo_log);
   -- 
end pkb_ret_perconscontrcofins; 
--
-----------------------------------------------------------------------------
--| Função para retornar o id da tabela REGISTR_EFD_PC
-----------------------------------------------------------------------------
function fkg_ret_registrefdpc_id (ev_registrefdpc_cd registr_efd_pc.cd%type)
return registr_efd_pc.id%type 
is
  vn_registrefdpc_id registr_efd_pc.id%type;
begin
   select id
     into vn_registrefdpc_id
     from registr_efd_pc
   where cd = ev_registrefdpc_cd;   
   --
   return vn_registrefdpc_id;
   --
exception
  when others then
      gv_resumo_log := 'Erro na função fkg_ret_registrefdpc_id : '||sqlerrm;
      raise_application_error (-20101, gv_resumo_log);
end fkg_ret_registrefdpc_id; 
--
-----------------------------------------------------------------------------
--| Procedimento para vetorizar a memória de calculo
-----------------------------------------------------------------------------
procedure pkb_monta_vet_mem_calc_cofins (et_mem_calc_apur_cofins in mem_calc_apur_cofins%rowtype)
is
  idx number := ga_mem_calc_apur_cofins.Count + 1;
begin
   -- Insere no array -- 
   ga_mem_calc_apur_cofins.Extend;
   ga_mem_calc_apur_cofins(idx) := tp_mem_calc_apur_cofins( et_mem_calc_apur_cofins.id
                                                          , et_mem_calc_apur_cofins.perconscontrcofins_id
                                                          , et_mem_calc_apur_cofins.registrefdpc_id
                                                          , et_mem_calc_apur_cofins.referencia_id
                                                          , et_mem_calc_apur_cofins.ref_item_id
                                                          , et_mem_calc_apur_cofins.tipo_operacao
                                                          , et_mem_calc_apur_cofins.ident_doc
                                                          , et_mem_calc_apur_cofins.dm_ind_emit
                                                          , et_mem_calc_apur_cofins.vl_base_calc
                                                          , et_mem_calc_apur_cofins.aliq_perc
                                                          , et_mem_calc_apur_cofins.aliq_prod
                                                          , et_mem_calc_apur_cofins.vl_imp_trib
                                                          , et_mem_calc_apur_cofins.reg_controlador
                                                          );
   --   
exception
   when others then
      gv_resumo_log := 'Erro na procedure pkb_monta_vetor_mem_calc_cofins : '||sqlerrm;
      raise_application_error (-20101, gv_resumo_log);
end pkb_monta_vet_mem_calc_cofins;
--
-----------------------------------------------------------------------------
--| Procedimento para gravar a memória de calculo
-----------------------------------------------------------------------------
procedure pkb_grava_vet_mem_calc_cofins
is
begin
   -- Caso o vetor não esteja populado, sai da procedure.
   if ga_mem_calc_apur_cofins.Count = 0 then
      return;
   end if;
   -- Descarreta o vetor na tabela
   for i in ga_mem_calc_apur_cofins.First .. ga_mem_calc_apur_cofins.Last
   loop
      begin
         insert into mem_calc_apur_cofins (id,
                                           perconscontrcofins_id,
                                           registrefdpc_id,
                                           referencia_id,
                                           ref_item_id,
                                           tipo_operacao,
                                           ident_doc,
                                           dm_ind_emit,
                                           vl_base_calc,
                                           aliq_perc,
                                           aliq_prod,
                                           vl_imp_trib,
                                           reg_controlador) 
                                   values (memcalcapurcofins_seq.NextVal,
                                           gt_row_per_cons_contr_cofins.id,
                                           ga_mem_calc_apur_cofins(i).registrefdpc_id,
                                           ga_mem_calc_apur_cofins(i).referencia_id,
                                           ga_mem_calc_apur_cofins(i).ref_item_id,
                                           ga_mem_calc_apur_cofins(i).tipo_operacao,
                                           ga_mem_calc_apur_cofins(i).ident_doc,
                                           ga_mem_calc_apur_cofins(i).dm_ind_emit,
                                           nvl(ga_mem_calc_apur_cofins(i).vl_base_calc,0),
                                           nvl(ga_mem_calc_apur_cofins(i).aliq_perc,0),
                                           nvl(ga_mem_calc_apur_cofins(i).aliq_prod,0),
                                           nvl(ga_mem_calc_apur_cofins(i).vl_imp_trib,0),
                                           ga_mem_calc_apur_cofins(i).reg_controlador
                                           );
      exception
         when dup_val_on_index then
            --
            update mem_calc_apur_cofins set
               tipo_operacao     = ga_mem_calc_apur_cofins(i).tipo_operacao,
               ident_doc         = ga_mem_calc_apur_cofins(i).ident_doc,
               dm_ind_emit       = ga_mem_calc_apur_cofins(i).dm_ind_emit,
               vl_base_calc      = ga_mem_calc_apur_cofins(i).vl_base_calc,
               aliq_perc         = ga_mem_calc_apur_cofins(i).aliq_perc,
               aliq_prod         = ga_mem_calc_apur_cofins(i).aliq_prod,
               vl_imp_trib       = ga_mem_calc_apur_cofins(i).vl_imp_trib,
               reg_controlador   = ga_mem_calc_apur_cofins(i).reg_controlador
            where perconscontrcofins_id = ga_mem_calc_apur_cofins(i).perconscontrcofins_id
              and registrefdpc_id       = ga_mem_calc_apur_cofins(i).registrefdpc_id
              and referencia_id         = ga_mem_calc_apur_cofins(i).referencia_id
              and ref_item_id           = ga_mem_calc_apur_cofins(i).ref_item_id;
         --
      end;
      --
   end loop;
   --   
   commit;
   --
exception
   when others then
      gv_resumo_log := 'Erro na procedure pkb_grava_vet_mem_calc_cofins : '||sqlerrm;
      raise_application_error (-20101, gv_resumo_log);
end pkb_grava_vet_mem_calc_cofins;
--
-----------------------------------------------------------------------------
--| Procedimento para excluir a memória de calculo no desprocessamento
-----------------------------------------------------------------------------
procedure pkb_exclui_mem_calc_cofins ( en_perconscontrcofins_id per_cons_contr_cofins.id%type
                                     , ev_reg_controlador       mem_calc_apur_cofins.reg_controlador%type)
is
begin
   --
   -- Exclui os dados da tabela
   delete MEM_CALC_APUR_COFINS t
     where t.perconscontrcofins_id = en_perconscontrcofins_id
       and t.reg_controlador       = ev_reg_controlador;
   --   
   commit;
   --
exception
   when others then
      gv_resumo_log := 'Erro na procedure pkb_exclui_mem_calc_cofins : '||sqlerrm;
      raise_application_error (-20101, gv_resumo_log);
end pkb_exclui_mem_calc_cofins;
--
-----------------------------------------------------------------------------
--| Procedimento recupera os dados dos processos dos Bloco F800 - Bloco M500 
-----------------------------------------------------------------------------
PROCEDURE PKB_MONTA_DADOS_M500_F800 IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico.id%type;
   --
   --| Recuperar a empresa e suas filiais
   cursor c_empresa is
      select em.id empresa_id
           , em.dm_dt_escr_dfepoe
        from empresa em
       start with em.id = gt_row_per_apur_cred_cofins.empresa_id
     connect by prior em.id = em.ar_empresa_id;
   --
   --| CRÉDITOS DECORRENTES DE EVENTOS DE INCORPORAÇÃO, FUSÃO E CISÃO
   cursor c_f800( en_empresa_id in empresa.id%type ) is
      select cd.id creddecoreventopc_id
           , cd.dt_evento
           , gn_tipoimp_id tipoimp_id
           , 1 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , cd.tipocredpc_id
           , nvl(cd.vl_cred_cofins,0) vl_cred_cofins
        from cred_decor_evento_pc cd
       where cd.empresa_id = en_empresa_id
         and cd.dt_evento  between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and cd.dm_st_proc = 1 -- validado
       order by cd.id
           , gn_tipoimp_id;
   --
BEGIN
   --
   vn_fase := 1;
   --| Créditos decorrentes de eventos de incorporação, fusão e cisão
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 2;
      --
      for r_reg in c_f800( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         vn_fase := 3;
         --
         begin
            insert into apur_cred_cofins( id
                                        , dm_situacao
                                        , tipocredpc_id
                                        , dm_ind_cred_ori
                                        , vl_bc_cofins
                                        , aliq_cofins
                                        , quant_bc_cofins
                                        , vl_aliq_cofins_quant
                                        , vl_cred
                                        , vl_ajus_acres
                                        , vl_ajus_reduc
                                        , vl_cred_difer
                                        , vl_cred_disp
                                        , dm_ind_desc_cred
                                        , vl_cred_desc
                                        , vl_sld_cred
                                        , perapurcredcofins_id )
                                  values( apurcredcofins_seq.nextval
                                        , 0 -- dm_situacao - 0-Aberto
                                        , r_reg.tipocredpc_id
                                        , 1 -- dm_ind_cred_ori - Evento de incorporação, cisão ou fusão
                                        , 0 -- vl_bc_cofins
                                        , 0 -- aliq_cofins
                                        , 0 -- quant_bc_cofins
                                        , 0 -- vl_aliq_cofins_quant
                                        , nvl(r_reg.vl_cred_cofins,0) -- vl_cred
                                        , 0 -- vl_ajus_acres
                                        , 0 -- vl_ajus_reduc
                                        , 0 -- vl_cred_difer
                                        , nvl(r_reg.vl_cred_cofins,0) -- vl_cred_disp
                                        , 0 -- dm_ind_desc_cred - 0-Utilização do valor total para desconto da contribuição apurada no período, no Registro M200, 1-Utilização de valor parcial para desconto da contribuição apurada no período, no Registro M200
                                        , nvl(r_reg.vl_cred_cofins,0) -- vl_cred_desc
                                        , 0 -- vl_sld_cred
                                        , gt_row_per_apur_cred_cofins.id );
         exception
            when others then
               --
               gv_resumo_log := 'Problemas ao incluir apuração do Bloco F800 (id='||r_reg.creddecoreventopc_id||' fase = '||vn_fase||'). Erro = '||sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
               raise_application_error (-20101, gv_resumo_log);
               --
         end;
         --
      end loop;
      --
      vn_fase := 4;
      --
      commit;
      --
   end loop; -- cursor c_empresa
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_monta_dados_m500_f800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_MONTA_DADOS_M500_F800;
--------------------------------------------------------------------------
--| Procedimento para gravar os valores nas tabelas de banco - Bloco M500
--------------------------------------------------------------------------
PROCEDURE PKB_GRAVA_DADOS_M500 IS
   --
   vn_fase   number := 0;
   vn_ind    number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --| Gravar os dados de apuração do cofins - apur_cred_cofins
   vn_ind := nvl(vt_tab_reg_m500.first,0);
   --
   vn_fase := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_ind,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      begin
         insert into apur_cred_cofins( id
                                     , dm_situacao
                                     , tipocredpc_id
                                     , dm_ind_cred_ori
                                     , vl_bc_cofins
                                     , aliq_cofins
                                     , quant_bc_cofins
                                     , vl_aliq_cofins_quant
                                     , vl_cred
                                     , vl_ajus_acres
                                     , vl_ajus_reduc
                                     , vl_cred_difer
                                     , vl_cred_disp
                                     , dm_ind_desc_cred
                                     , vl_cred_desc
                                     , vl_sld_cred
                                     , perapurcredcofins_id )
                               values( vt_tab_reg_m500(vn_ind).apurcredcofins_id
                                     , vt_tab_reg_m500(vn_ind).dm_situacao
                                     , vt_tab_reg_m500(vn_ind).tipocredpc_id
                                     , vt_tab_reg_m500(vn_ind).dm_ind_cred_ori
                                     , vt_tab_reg_m500(vn_ind).vl_bc_cofins
                                     , vt_tab_reg_m500(vn_ind).aliq_cofins
                                     , vt_tab_reg_m500(vn_ind).quant_bc_cofins
                                     , vt_tab_reg_m500(vn_ind).vl_aliq_cofins_quant
                                     , (vt_tab_reg_m500(vn_ind).vl_bc_cofins * vt_tab_reg_m500(vn_ind).aliq_cofins / 100) +
                                       (vt_tab_reg_m500(vn_ind).quant_bc_cofins * vt_tab_reg_m500(vn_ind).vl_aliq_cofins_quant)
                                     , vt_tab_reg_m500(vn_ind).vl_ajus_acres
                                     , vt_tab_reg_m500(vn_ind).vl_ajus_reduc
                                     , vt_tab_reg_m500(vn_ind).vl_cred_dif
                                     , vt_tab_reg_m500(vn_ind).vl_cred_disp
                                     , vt_tab_reg_m500(vn_ind).dm_ind_desc_cred
                                     , vt_tab_reg_m500(vn_ind).vl_cred_desc
                                     , vt_tab_reg_m500(vn_ind).vl_sld_cred
                                     , gt_row_per_apur_cred_cofins.id );
      exception
         when dup_val_on_index then
            --
            vn_fase := 5;
            --
            begin
               update apur_cred_cofins ac
                  set ac.dm_situacao          = vt_tab_reg_m500(vn_ind).dm_situacao
                    , ac.tipocredpc_id        = vt_tab_reg_m500(vn_ind).tipocredpc_id
                    , ac.dm_ind_cred_ori      = vt_tab_reg_m500(vn_ind).dm_ind_cred_ori
                    , ac.vl_bc_cofins         = vt_tab_reg_m500(vn_ind).vl_bc_cofins
                    , ac.aliq_cofins          = vt_tab_reg_m500(vn_ind).aliq_cofins
                    , ac.quant_bc_cofins      = vt_tab_reg_m500(vn_ind).quant_bc_cofins
                    , ac.vl_aliq_cofins_quant = vt_tab_reg_m500(vn_ind).vl_aliq_cofins_quant
                    , ac.vl_cred              = (vt_tab_reg_m500(vn_ind).vl_bc_cofins * vt_tab_reg_m500(vn_ind).aliq_cofins / 100) +
                                                (vt_tab_reg_m500(vn_ind).quant_bc_cofins * vt_tab_reg_m500(vn_ind).vl_aliq_cofins_quant)
                    , ac.vl_ajus_acres        = vt_tab_reg_m500(vn_ind).vl_ajus_acres
                    , ac.vl_ajus_reduc        = vt_tab_reg_m500(vn_ind).vl_ajus_reduc
                    , ac.vl_cred_difer        = vt_tab_reg_m500(vn_ind).vl_cred_dif
                    , ac.vl_cred_disp         = vt_tab_reg_m500(vn_ind).vl_cred_disp
                    , ac.dm_ind_desc_cred     = vt_tab_reg_m500(vn_ind).dm_ind_desc_cred
                    , ac.vl_cred_desc         = vt_tab_reg_m500(vn_ind).vl_cred_desc
                    , ac.vl_sld_cred          = vt_tab_reg_m500(vn_ind).vl_sld_cred
                    , ac.perapurcredcofins_id = gt_row_per_apur_cred_cofins.id
                where ac.id = vt_tab_reg_m500(vn_ind).apurcredcofins_id;
            exception
               when others then
                  --
                  gv_resumo_log := 'Problemas ao alterar apuração (id='||vt_tab_reg_m500(vn_ind).apurcredcofins_id||' fase = '||vn_fase||'). Erro = '||sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico.id%type;
                  begin
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
                  exception
                     when others then
                        null;
                  end;
                  --
                  raise_application_error (-20101, gv_resumo_log);
                  --
            end;
            --
         when others then
            --
            gv_resumo_log := 'Problemas ao incluir apuração (id='||vt_tab_reg_m500(vn_ind).apurcredcofins_id||' fase = '||vn_fase||'). Erro = '||sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_sistema
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
            raise_application_error (-20101, gv_resumo_log);
            --
      end;
      --
      vn_fase := 6;
      --
      if vn_ind = vt_tab_reg_m500.last then
         exit;
      else
         vn_ind := vt_tab_reg_m500.next(vn_ind);
      end if;
      --
   end loop;
   --
   vn_fase := 7;
   --| Gravar os dados de detalhe de apuração do cofins - det_apur_cred_cofins
   vn_ind := nvl(vt_tab_reg_m505.first,0);
   --
   vn_fase := 8;
   --
   loop
      --
      vn_fase := 9;
      --
      if nvl(vn_ind,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 10;
      -- Ajuste de valores para que o PVA não acuse "Avisos/Advertências", por centavos
      if (nvl(vt_tab_reg_m505(vn_ind).vl_bc_cofins_cum,0) - (nvl(vt_tab_reg_m505(vn_ind).vl_bc_cofins_tot,0) * nvl(gn_recbru_cum,0))) <= 0.5 then
          vt_tab_reg_m505(vn_ind).vl_bc_cofins_cum := (nvl(vt_tab_reg_m505(vn_ind).vl_bc_cofins_tot,0) * nvl(gn_recbru_cum,0));
      end if;
      --
      vn_fase := 11;
      -- Ajuste de valores para que o PVA não acuse "Avisos/Advertências", por centavos
      if nvl(vt_tab_reg_m505(vn_ind).vl_bc_cofins_nc,0) <> (nvl(vt_tab_reg_m505(vn_ind).vl_bc_cofins_tot,0) - nvl(vt_tab_reg_m505(vn_ind).vl_bc_cofins_cum,0)) then
         vt_tab_reg_m505(vn_ind).vl_bc_cofins_nc := (nvl(vt_tab_reg_m505(vn_ind).vl_bc_cofins_tot,0) - nvl(vt_tab_reg_m505(vn_ind).vl_bc_cofins_cum,0));
      end if;
      --
      vn_fase := 12;
      --
      begin
         insert into det_apur_cred_cofins( id
                                         , apurcredcofins_id
                                         , basecalccredpc_id
                                         , codst_id
                                         , vl_bc_cofins_tot
                                         , vl_bc_cofins_cum
                                         , vl_bc_cofins_nc
                                         , vl_bc_cofins
                                         , quant_bc_cofins_tot
                                         , quant_bc_cofins
                                         , desc_cred )
                                   values( vt_tab_reg_m505(vn_ind).detapurcredcofins_id
                                         , vt_tab_reg_m505(vn_ind).apurcredcofins_id
                                         , vt_tab_reg_m505(vn_ind).basecalccredpc_id
                                         , vt_tab_reg_m505(vn_ind).codst_id
                                         , vt_tab_reg_m505(vn_ind).vl_bc_cofins_tot
                                         , vt_tab_reg_m505(vn_ind).vl_bc_cofins_cum
                                         , vt_tab_reg_m505(vn_ind).vl_bc_cofins_nc
                                         , vt_tab_reg_m505(vn_ind).vl_bc_cofins
                                         , vt_tab_reg_m505(vn_ind).quant_bc_cofins_tot
                                         , vt_tab_reg_m505(vn_ind).quant_bc_cofins
                                         , vt_tab_reg_m505(vn_ind).desc_cred );
      exception
         when others then
            --
            gv_resumo_log := 'Problemas ao incluir detalhes de apuração (det_apur_cred_cofins id='||
                             vt_tab_reg_m505(vn_ind).detapurcredcofins_id||' fase = '||vn_fase||'). Erro = '||sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_sistema
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
            raise_application_error (-20101, gv_resumo_log);
            --
      end;
      --
      vn_fase := 13;
      --
      if vn_ind = vt_tab_reg_m505.last then
         exit;
      else
         vn_ind := vt_tab_reg_m505.next(vn_ind);
      end if;
      --
   end loop;
   --
   vn_fase := 12;
   --
   commit;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_grava_dados_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_GRAVA_DADOS_M500;
-----------------------------------------------------------------
--| Procedimento para armazenar os dados em vetores - Bloco M500
-----------------------------------------------------------------
PROCEDURE PKB_MONTA_VETOR_M500( EN_CH_CC_TPCR_OR_TP_ALIQ IN NUMBER
                              , EN_TIPOCREDPC_ID         IN NUMBER
                              , EN_DM_IND_CRED_ORI       IN NUMBER
                              , EN_TIPO                  IN NUMBER
                              , EN_ALIQ_COFINS           IN NUMBER
                              , EN_VL_ALIQ_COFINS_QUANT  IN NUMBER
                              , EN_VL_BC_COFINS          IN NUMBER
                              , EN_QUANT_BC_COFINS       IN NUMBER
                              , EN_BASECALCCREDPC_ID     IN NUMBER
                              , EN_CODST_ID              IN NUMBER
                              , EN_VL_BC_COFINS_TOT      IN NUMBER
                              , EN_VL_BC_COFINS_CUM      IN NUMBER
                              , EN_VL_BC_COFINS_NC       IN NUMBER
                              , EN_QUANT_BC_COFINS_TOT   IN NUMBER ) IS
   --
   vn_fase               number := 0;
   vb_achou              boolean := false;
   vn_apurcredcofins_id  apur_cred_cofins.id%type;
   vn_ch_cc_apur_bs_cdst varchar2(20); -- number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --| Montar bloco M500 - Alterado o indexador para tipo caracter com tamanho de 20
   begin
      vb_achou := vt_tab_reg_m500.exists(en_ch_cc_tpcr_or_tp_aliq);
   exception
      when others then
         vb_achou := false;
   end;
   --
   vn_fase := 2;
   --
   if not vb_achou then
      --
      vn_fase := 3;
      --
      begin
         select apurcredcofins_seq.nextval
           into vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).apurcredcofins_id
           from dual;
      exception
         when others then
            vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).apurcredcofins_id := null;
      end;
      --
      vn_fase := 4;
      --
      if nvl(vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).apurcredcofins_id,0) > 0 then
         --
         vn_fase := 5;
         --
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).tipocredpc_id        := en_tipocredpc_id;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).dm_ind_cred_ori      := en_dm_ind_cred_ori;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).tipo                 := en_tipo;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).dm_situacao          := 0; -- Aberto
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).vl_bc_cofins         := en_vl_bc_cofins;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).aliq_cofins          := en_aliq_cofins;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).quant_bc_cofins      := en_quant_bc_cofins;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).vl_aliq_cofins_quant := en_vl_aliq_cofins_quant;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).vl_ajus_acres        := 0;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).vl_ajus_reduc        := 0;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).vl_cred_dif          := 0;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).vl_cred_disp         := 0;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).dm_ind_desc_cred     := 0;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).vl_cred_desc         := 0;
         vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).vl_sld_cred          := 0;
         --
      end if;
      --
   else
      --
      vn_fase := 6;
      --
      vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).vl_bc_cofins    := vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).vl_bc_cofins    + en_vl_bc_cofins;
      vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).quant_bc_cofins := vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).quant_bc_cofins + en_quant_bc_cofins;
      --
   end if;
   --
   vn_fase := 7;
   --
   vn_apurcredcofins_id := nvl(vt_tab_reg_m500(en_ch_cc_tpcr_or_tp_aliq).apurcredcofins_id,0);
   --
   vn_fase := 8;
   --| Montar bloco M505
   vn_ch_cc_apur_bs_cdst := nvl(vn_apurcredcofins_id,0)||nvl(en_basecalccredpc_id,0)||nvl(en_codst_id,0);
   --
   vn_fase := 9;
   --
   begin
      vb_achou := vt_tab_reg_m505.exists(vn_ch_cc_apur_bs_cdst);
   exception
      when others then
         vb_achou := false;
   end;
   --
   vn_fase := 10;
   --
   if not vb_achou then
      --
      vn_fase := 11;
      --
      begin
         select detapurcredcofins_seq.nextval
           into vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).detapurcredcofins_id
           from dual;
      exception
         when others then
            vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).detapurcredcofins_id := null;
      end;
      --
      vn_fase := 12;
      --
      if nvl(vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).detapurcredcofins_id,0) > 0 then
         --
         vn_fase := 13;
         --
         vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).apurcredcofins_id    := vn_apurcredcofins_id;
         vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).basecalccredpc_id    := en_basecalccredpc_id;
         vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).codst_id             := en_codst_id;
         vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins_tot     := en_vl_bc_cofins_tot;
         vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins_cum     := en_vl_bc_cofins_cum;
         vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins_nc      := en_vl_bc_cofins_nc;
         vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins         := en_vl_bc_cofins;
         vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).quant_bc_cofins_tot  := en_quant_bc_cofins_tot;
         vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).quant_bc_cofins      := en_quant_bc_cofins;
         --
         if pk_csf_efd_pc.fkg_base_calc_cred_pc_cd(en_id => en_basecalccredpc_id) = '13' then
            vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).desc_cred := pk_csf_efd_pc.fkg_descr_basecalccredpc(en_basecalccredpc_id => en_basecalccredpc_id);
         else
            vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).desc_cred := null;
         end if;
         --
      end if;
      --
   else
      --
      vn_fase := 14;
      --
      vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins_tot    := vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins_tot    + en_vl_bc_cofins_tot;
      vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins_cum    := vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins_cum    + en_vl_bc_cofins_cum;
      vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins_nc     := vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins_nc     + en_vl_bc_cofins_nc;
      vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins        := vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).vl_bc_cofins        + en_vl_bc_cofins;
      vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).quant_bc_cofins_tot := vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).quant_bc_cofins_tot + en_quant_bc_cofins_tot;
      vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).quant_bc_cofins     := vt_tab_reg_m505(vn_ch_cc_apur_bs_cdst).quant_bc_cofins     + en_quant_bc_cofins;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_monta_vetor_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_MONTA_VETOR_M500;
-----------------------------------------------------------------------------
--| Função para retornar o valor do campo 7 - VL_BC_COFINS para o Bloco M505
-----------------------------------------------------------------------------
FUNCTION FKG_RECUP_VL_BC_COFINS( EN_SEQ_LANCTO      IN NUMBER
                               , EV_COD_ST          IN COD_ST.COD_ST%TYPE
                               , EN_VL_BC_COFINS_NC IN NUMBER )
         RETURN NUMBER
IS
   --
   vn_fase         number := 0;
   vn_vl_bc_cofins number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_seq_lancto,0) = 1 then -- primeiro lançamento
      --
      vn_fase := 2;
      --
      if ev_cod_st in ('50','51','52','60','61','62') then
         --
         vn_fase := 3;
         vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0); -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc)
         --
      else
         --
         vn_fase := 4;
         --
         if gn_dm_ind_apro_cred = 1 then -- apropriação direta
            --
            vn_fase := 5;
            vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0); -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc)
            --
         else -- gn_dm_ind_apro_cred = 2 -- rateio proporcional
            --
            vn_fase := 6;
            --
            if ev_cod_st in ('53','63') then
               --
               vn_fase := 7;
               vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0) * gn_recbru_nc_trntr_tri; -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc) * rateio
               --
            elsif ev_cod_st in ('54','64') then
                  --
                  vn_fase := 8;
                  vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0) * gn_recbru_nc_trexp_tri; -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc) * rateio
                  --
            elsif ev_cod_st in ('55','65') then
                  --
                  vn_fase := 9;
                  vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0) * gn_recbru_nc_ntrexp_ntr; -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc) * rateio
                  --
            elsif ev_cod_st in ('56','66') then
                  --
                  vn_fase := 10;
                  vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0) * gn_recbru_nc_trntrexp_tri; -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc) * rateio
                  --
            else
               --
               vn_fase := 11;
               vn_vl_bc_cofins := 0;
               --
            end if;
            --
         end if;
         --
      end if;
      --
   elsif nvl(en_seq_lancto,0) = 2 then -- segundo lançamento
         --
         vn_fase := 12;
         --
         if ev_cod_st in ('50','51','52','60','61','62') then
            --
            vn_fase := 13;
            vn_vl_bc_cofins := 0;
            --
         else
            --
            vn_fase := 14;
            --
            if gn_dm_ind_apro_cred = 1 then -- apropriação direta
               --
               vn_fase := 15;
               vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0); -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc)
               --
            else -- gn_dm_ind_apro_cred = 2 -- rateio proporcional
               --
               vn_fase := 16;
               --
               if ev_cod_st in ('53','63') then
                  --
                  vn_fase := 17;
                  vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0) * gn_recbru_nc_trntr_ntr; -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc) * rateio
                  --
               elsif ev_cod_st in ('54','64') then
                     --
                     vn_fase := 18;
                     vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0) * gn_recbru_nc_trexp_exp; -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc) * rateio
                     --
               elsif ev_cod_st in ('55','65') then
                     --
                     vn_fase := 19;
                     vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0) * gn_recbru_nc_ntrexp_exp; -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc) * rateio
                     --
               elsif ev_cod_st in ('56','66') then
                     --
                     vn_fase := 20;
                     vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0) * gn_recbru_nc_trntrexp_ntr; -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc) * rateio
                     --
               else
                  --
                  vn_fase := 21;
                  vn_vl_bc_cofins := 0;
                  --
               end if;
               --
            end if;
            --
         end if;
         --
   elsif nvl(en_seq_lancto,0) = 3 then -- terceiro lançamento
         --
         vn_fase := 22;
         --
         if ev_cod_st in ('50','51','52','60','61','62','53','63','54','64','55','65') then
            --
            vn_fase := 23;
            vn_vl_bc_cofins := 0;
            --
         else
            --
            vn_fase := 24;
            --
            if gn_dm_ind_apro_cred = 1 then -- apropriação direta
               --
               vn_fase := 25;
               vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0); -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc)
               --
            else -- gn_dm_ind_apro_cred = 2 -- rateio proporcional
               --
               vn_fase := 26;
               --
               if ev_cod_st in ('56','66') then
                  --
                  vn_fase := 27;
                  vn_vl_bc_cofins := nvl(en_vl_bc_cofins_nc,0) * gn_recbru_nc_trntrexp_exp; -- campo 7 (vl_bc_cofins) = campo 6 (vl_bc_cofins_nc) * rateio
                  --
               else
                  --
                  vn_fase := 28;
                  vn_vl_bc_cofins := 0;
                  --
               end if;
               --
            end if;
            --
         end if;
         --
   end if;
   --
   vn_fase := 29;
   --
   return(nvl(vn_vl_bc_cofins,0));
   --
EXCEPTION
   WHEN OTHERS THEN
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.fkg_recup_vl_bc_cofins (fase = '||vn_fase||' en_seq_lancto = '||en_seq_lancto||' ev_cod_st = '||ev_cod_st||
                       ' en_vl_bc_cofins_nc = '||en_vl_bc_cofins_nc||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END FKG_RECUP_VL_BC_COFINS;
--------------------------------------------------------------
--| Procedimento recupera os dados dos processos - Bloco M500
--------------------------------------------------------------
PROCEDURE PKB_MONTA_DADOS_M500 IS
   --
   vn_fase                  number := 0;
   vn_ncm_id                ncm.id%type := 0;
   vv_cod_ncm               ncm.cod_ncm%type := null;
   vv_cod_st                cod_st.cod_st%type := null;
   vn_cd_cfop               cfop.cd%type := 0;
   vn_tipocredpc_id         tipo_cred_pc.id%type := 0;
   vn_loggenerico_id        log_generico.id%type;
   vn_seq_lancto            number := 0;
   vn_vl_bc_cofins          number := 0;
   vv_cfop_energia          varchar2(1) := 'N';
   vt_mem_calc_apur_cofins  mem_calc_apur_cofins%rowtype;
   vn_registrefdpc_id       number := null;
   --
   vn_cd_tipocredpc      tipo_cred_pc.cd%type;
   --
   --| Recuperar a empresa e suas filiais
   cursor c_empresa is
      select em.id empresa_id
           , em.dm_dt_escr_dfepoe
        from empresa em
       start with em.id = gt_row_per_apur_cred_cofins.empresa_id
     connect by prior em.id = em.ar_empresa_id;
   --
   -- Serão considerados processos com código de situação tributária (ST):
   -- Crédito Vinculado à Receita Tributada (Grupo 100): CST 50, 53, 54, 56, 60, 63, 64 e 66.
   -- Crédito Vinculado à Receita Não Tributada (Grupo 200): CST 51, 53, 55, 56, 61, 63, 65 e 66.
   -- Crédito Vinculado à Receita de Exportação (Grupo 300): CST 52, 54, 55, 56, 62, 64, 65 e 66.
   --
   -- '50' - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita Tributada no Mercado Interno
   -- '51' - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita Não Tributada no Mercado Interno
   -- '52' - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita de Exportação
   -- '53' - Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno
   -- '54' - Operação com Direito a Crédito - Vinculada a Receitas Tributadas no Mercado Interno e de Exportação
   -- '55' - Operação com Direito a Crédito - Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação
   -- '56' - Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação
   -- '60' - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Tributada no Mercado Interno
   -- '61' - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Não-Tributada no Mercado Interno
   -- '62' - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita de Exportação
   -- '63' - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno
   -- '64' - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas no Mercado Interno e de Exportação
   -- '65' - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação
   -- '66' - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação
   -- '99' - Outras operações
   -- Para os códigos '99', será gerado inconsistência, o usuário deverá acertar a base para que o processo prossiga.
   --
   --| NOTA FISCAL DE SERVIÇO
   cursor c_a100( en_empresa_id        in empresa.id%type
                , en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
      select nf.id notafiscal_id
           , nf.nro_nf
           , nf.serie
           , nf.dt_emiss
           , it.id itemnf_id
           , it.cod_item
           , ii.id impitemnf_id
           , ti.id tipoimp_id
           , it.cod_ncm
           , it.cfop_id
           , ic.dm_ind_orig_cred
           , 0 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , ii.aliq_apli aliq_cofins
           , nvl(ii.vl_aliq_prod,0) vl_aliq_cofins_quant
           , ic.basecalccredpc_id
           , ii.codst_id
           , decode(nvl(ii.vl_base_calc,0), 0, decode(nvl(ii.qtde_base_calc_prod,0), 0, 1, 2), 1) tipo -- 1-alíq.perc, 2-alíq.qtde
           , nvl(ii.vl_base_calc,0) vl_bc_cofins_tot
           , decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(ii.vl_base_calc,0), 0) * gn_recbru_cum
                                         , 0) vl_bc_cofins_cum
           , (nvl(ii.vl_base_calc,0) - decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(ii.vl_base_calc,0), 0) * gn_recbru_cum
                                                                   , 0)) vl_bc_cofins_nc
           , case when pk_csf.fkg_cod_st_cod(ii.codst_id) in ('50','51','52','60','61','62') then
                       1
                  when pk_csf.fkg_cod_st_cod(ii.codst_id) in ('53','63','54','64','55','65') then
                       2
                  when pk_csf.fkg_cod_st_cod(ii.codst_id) in ('56','66') then
                       3
                  else 0
             end seq_lancto
           , nvl(ii.qtde_base_calc_prod,0) quant_bc_cofins_tot
           , nvl(ii.qtde_base_calc_prod,0) quant_bc_cofins
           , nvl(ii.vl_imp_trib,0) vl_imp
           , case nf.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , it.nro_item                                      nro_item
           , nvl(ii.vl_base_calc,0)                           vl_base_calc
           , nvl(ii.qtde_base_calc_prod,0)                    qtde_base_calc_prod
           , nvl(ii.vl_aliq_prod,0)                           vl_aliq_prod
           , nvl(vl_imp_trib,0)                               vl_imp_trib
           , nf.dm_ind_emit                                   dm_ind_emit
           , nf.pessoa_id		   
        from nota_fiscal       nf
           , mod_fiscal        mf
           , item_nota_fiscal  it
           , imp_itemnf        ii
           , tipo_imposto      ti
           , itemnf_compl_serv ic
       where nf.empresa_id      = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and nf.dt_emiss between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and nf.dt_emiss between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin))
         and mf.id              = nf.modfiscal_id
         and mf.cod_mod         = '99' -- somente serviços
         and it.notafiscal_id   = nf.id
         and ii.itemnf_id       = it.id
         and ii.dm_tipo         = 0 -- IMPOSTO
         and ti.id              = ii.tipoimp_id
         and ti.cd              = '5' -- cofins
         and ic.itemnf_id       = it.id
       order by nf.id
           , it.id
           , ii.id
           , ti.id
           , ii.aliq_apli
           , nvl(ii.vl_aliq_prod,0)
           , ic.basecalccredpc_id
           , ii.codst_id;
   --
   --| NOTA FISCAL (CÓDIGO 01), NOTA FISCAL AVULSA (CÓDIGO 1B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04) E NFE (CÓDIGO 55)
   cursor c_c100( en_empresa_id        in empresa.id%type
                , en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
      select nf.id notafiscal_id
           , nf.nro_nf
           , nf.serie
           , mf.cod_mod
           , nf.dt_emiss
           , it.id itemnf_id
           , it.cod_item
           , ii.id impitemnf_id
           , ti.id tipoimp_id
           , it.cod_ncm
           , it.cfop_id
           , 0 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , ii.aliq_apli aliq_cofins
           , nvl(ii.vl_aliq_prod,0) vl_aliq_cofins_quant
           , og.basecalccredpc_id
           , ii.codst_id
           , decode(nvl(ii.vl_base_calc,0), 0, decode(nvl(ii.qtde_base_calc_prod,0), 0, 1, 2), 1) tipo -- 1-alíq.perc, 2-alíq.qtde
           , nvl(ii.vl_base_calc,0) vl_bc_cofins_tot
           , decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(ii.vl_base_calc,0), 0) * gn_recbru_cum
                                         , 0) vl_bc_cofins_cum
           , (nvl(ii.vl_base_calc,0) - decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(ii.vl_base_calc,0), 0) * gn_recbru_cum
                                                                   , 0)) vl_bc_cofins_nc
           , case when pk_csf.fkg_cod_st_cod(ii.codst_id) in ('50','51','52','60','61','62') then
                       1
                  when pk_csf.fkg_cod_st_cod(ii.codst_id) in ('53','63','54','64','55','65') then
                       2
                  when pk_csf.fkg_cod_st_cod(ii.codst_id) in ('56','66') then
                       3
                  else 0
             end seq_lancto
           , nvl(ii.qtde_base_calc_prod,0) quant_bc_cofins_tot
           , nvl(ii.qtde_base_calc_prod,0) quant_bc_cofins
           , nvl(ii.vl_imp_trib,0) vl_imp
           -- colunas usadas na memoria de calculo --
           , case nf.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , it.nro_item                                      nro_item
           , nvl(ii.vl_base_calc,0)                           vl_base_calc
           , nvl(ii.qtde_base_calc_prod,0)                    qtde_base_calc_prod
           , nvl(ii.vl_aliq_prod,0)                           vl_aliq_prod
           , nvl(vl_imp_trib,0)                               vl_imp_trib
           , nf.dm_ind_emit                                   dm_ind_emit
           , nf.pessoa_id           
        from nota_fiscal      nf
           , mod_fiscal       mf
           , item_nota_fiscal it
           , imp_itemnf       ii
           , tipo_imposto     ti
           , oper_ger_cred_pc og
       where nf.empresa_id      = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and nf.dt_emiss between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and nf.dt_emiss between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin))
         and mf.id              = nf.modfiscal_id
         and mf.cod_mod        in ('01', '1B', '04', '55', '65') -- NF, NF de Produtor, NF Avulsa, NF Eletrônica
         and it.notafiscal_id   = nf.id
         and ii.itemnf_id       = it.id
         and ii.dm_tipo         = 0 -- IMPOSTO
         and ti.id              = ii.tipoimp_id
         and ti.cd              = '5' -- cofins
         and og.cfop_id         = it.cfop_id
         and og.empresa_id      = gt_row_per_apur_cred_cofins.empresa_id -- considerar a empresa matriz
       order by nf.id
           , it.id
           , ii.id
           , ti.id
           , ii.aliq_apli
           , nvl(ii.vl_aliq_prod,0)
           , og.basecalccredpc_id
           , ii.codst_id;
   --
   --| NOTA FISCAL NFE (CÓDIGO 55) - ENERGIA ELÉTRICA
   cursor c_c100_ee( en_empresa_id        in empresa.id%type
                   , en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
      select nf.id notafiscal_id
           , nf.nro_nf
           , nf.serie
           , mf.cod_mod
           , nf.dt_emiss
           , it.id itemnf_id
           , it.cod_item
           , ii.id impitemnf_id
           , ti.id tipoimp_id
           , it.cod_ncm
           , it.cfop_id
           , 0 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , ii.aliq_apli aliq_cofins
           , nvl(ii.vl_aliq_prod,0) vl_aliq_cofins_quant
           , og.basecalccredpc_id
           , ii.codst_id
           , decode(nvl(ii.vl_base_calc,0), 0, decode(nvl(ii.qtde_base_calc_prod,0), 0, 1, 2), 1) tipo -- 1-alíq.perc, 2-alíq.qtde
           , nvl(ii.vl_base_calc,0) vl_bc_cofins_tot
           , decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(ii.vl_base_calc,0), 0) * gn_recbru_cum
                                         , 0) vl_bc_cofins_cum
           , (nvl(ii.vl_base_calc,0) - decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(ii.vl_base_calc,0), 0) * gn_recbru_cum
                                                                   , 0)) vl_bc_cofins_nc
           , case when pk_csf.fkg_cod_st_cod(ii.codst_id) in ('50','51','52','60','61','62') then
                       1
                  when pk_csf.fkg_cod_st_cod(ii.codst_id) in ('53','63','54','64','55','65') then
                       2
                  when pk_csf.fkg_cod_st_cod(ii.codst_id) in ('56','66') then
                       3
                  else 0
             end seq_lancto
           , nvl(ii.qtde_base_calc_prod,0) quant_bc_cofins_tot
           , nvl(ii.qtde_base_calc_prod,0) quant_bc_cofins
           , nvl(ii.vl_imp_trib,0) vl_imp
           -- colunas utilizadas na memória de calculo --
           , case nf.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , it.nro_item                                      nro_item
           , nvl(ii.vl_base_calc,0)                           vl_base_calc
           , nvl(ii.qtde_base_calc_prod,0)                    qtde_base_calc_prod
           , nvl(ii.vl_aliq_prod,0)                           vl_aliq_prod
           , nvl(vl_imp_trib,0)                               vl_imp_trib
           , nf.dm_ind_emit                                   dm_ind_emit
           , nf.pessoa_id		   
        from nota_fiscal      nf
           , mod_fiscal       mf
           , item_nota_fiscal it
           , imp_itemnf       ii
           , tipo_imposto     ti
           , oper_ger_cred_pc og
           , cfop             cf
           , tipo_operacao    tp
       where nf.empresa_id      = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and nf.dt_emiss between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and nf.dt_emiss between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin))
         and mf.id              = nf.modfiscal_id
         and mf.cod_mod        in ('55') -- NF Eletrônica
         and it.notafiscal_id   = nf.id
         and ii.itemnf_id       = it.id
         and ii.dm_tipo         = 0 -- IMPOSTO
         and ti.id              = ii.tipoimp_id
         and ti.cd              = '5' -- cofins
         and og.cfop_id         = it.cfop_id
         and og.empresa_id      = gt_row_per_apur_cred_cofins.empresa_id -- considerar a empresa matriz
         and cf.id              = it.cfop_id
         and tp.id              = cf.tipooperacao_id
         and tp.cd              = 4 -- NFe de 4-Energia Elétrica
       order by nf.id
           , it.id
           , ii.id
           , ti.id
           , ii.aliq_apli
           , nvl(ii.vl_aliq_prod,0)
           , og.basecalccredpc_id
           , ii.codst_id;
   --
   --| NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA (CÓDIGO 06), NOTA FISCAL/CONTA DE FORNECIMENTO D'ÁGUA CANALIZADA (CÓDIGO 29) E
   --| NOTA FISCAL CONSUMO FORNECIMENTO DE GÁS (CÓDIGO 28) - DOCUMENTOS DE ENTRADA/AQUISIÇÃO COM CRÉDITO
   cursor c_c500( en_empresa_id        in empresa.id%type
                , en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
      select nf.id notafiscal_id
           , nf.nro_nf
           , nf.serie
           , nf.dt_emiss
           , nc.id nfcomplopercofins_id
           , gn_tipoimp_id tipoimp_id
           , nn.cfop_id
           , 0 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , nc.aliq_cofins aliq_cofins
           , 0 vl_aliq_cofins_quant
           , nc.basecalccredpc_id
           , nc.codst_id
           , decode(nvl(nc.vl_bc_cofins,0), 0, 1, 1) tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(nc.vl_bc_cofins,0) vl_bc_cofins_tot
           , decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(nc.vl_bc_cofins,0), 0) * gn_recbru_cum
                                         , 0) vl_bc_cofins_cum
           , (nvl(nc.vl_bc_cofins,0) - decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(nc.vl_bc_cofins,0), 0) * gn_recbru_cum
                                                                , 0)) vl_bc_cofins_nc
           , case when pk_csf.fkg_cod_st_cod(nc.codst_id) in ('50','51','52','60','61','62') then
                       1
                  when pk_csf.fkg_cod_st_cod(nc.codst_id) in ('53','63','54','64','55','65') then
                       2
                  when pk_csf.fkg_cod_st_cod(nc.codst_id) in ('56','66') then
                       3
                  else 0
             end seq_lancto
           , 0 quant_bc_cofins_tot
           , 0 quant_bc_cofins
           , nvl(nc.vl_cofins,0) vl_imp
           -- colunas utilizadas na memória de calculo --
           , case nf.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , 0                                                nro_item
           , nvl(nc.vl_bc_cofins,0)                           vl_base_calc
           , 0                                                qtde_base_calc_prod
           , 0                                                vl_aliq_prod
           , nvl(nc.vl_cofins,0)                              vl_imp_trib
           , nf.dm_ind_emit                                   dm_ind_emit
           , nf.pessoa_id		   
        from nota_fiscal       nf
           , mod_fiscal        mf
           , nf_compl_oper_cofins nc
           , (select distinct na.notafiscal_id
                   , na.cfop_id
                from nfregist_analit na) nn
       where nf.empresa_id    = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and nf.dt_emiss between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and nf.dt_emiss between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin))
         and mf.id            = nf.modfiscal_id
         and mf.cod_mod      in ('06', '28', '29')
         and nc.notafiscal_id = nf.id
         and nvl(nc.vl_bc_cofins,0) > 0
         and nn.notafiscal_id = nf.id
       order by nf.id
           , nc.id
           , gn_tipoimp_id
           , nc.aliq_cofins
           , nc.basecalccredpc_id
           , nc.codst_id;
   --
   --| NOTA FISCAL DE SERVIÇO DE TRANSPORTE
   cursor c_d100( en_empresa_id        in empresa.id%type
                , en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
      select distinct ct.id conhectransp_id
           , ct.nro_ct
           , ct.serie
           , ct.subserie
           , ct.dt_hr_emissao
           , cc.id ctcompdoccofins_id
           , gn_tipoimp_id tipoimp_id
           , cr.cfop_id
           , 0 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , cc.aliq_cofins aliq_cofins
           , 0 vl_aliq_cofins_quant
           , cc.basecalccredpc_id
           , cc.codst_id
           , decode(nvl(cc.vl_bc_cofins,0), 0, 1, 1) tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(cc.vl_bc_cofins,0) vl_bc_cofins_tot
           , decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(cc.vl_bc_cofins,0), 0) * gn_recbru_cum
                                         , 0) vl_bc_cofins_cum
           , (nvl(cc.vl_bc_cofins,0) - decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(cc.vl_bc_cofins,0), 0) * gn_recbru_cum
                                                                , 0)) vl_bc_cofins_nc
           , case when pk_csf.fkg_cod_st_cod(cc.codst_id) in ('50','51','52','60','61','62') then
                       1
                  when pk_csf.fkg_cod_st_cod(cc.codst_id) in ('53','63','54','64','55','65') then
                       2
                  when pk_csf.fkg_cod_st_cod(cc.codst_id) in ('56','66') then
                       3
                  else 0
             end seq_lancto
           , 0 quant_bc_cofins_tot
           , 0 quant_bc_cofins
           , nvl(cc.vl_cofins,0) vl_imp
           -- colunas utilizadas na memória de calculo --
           , case ct.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , 0                                                nro_item
           , nvl(cc.vl_bc_cofins,0)                           vl_base_calc
           , 0                                                qtde_base_calc_prod
           , nvl(cc.aliq_cofins,0)                            vl_aliq_prod
           , nvl(cc.vl_cofins,0)                              vl_imp_trib
           , ct.dm_ind_emit                                   dm_ind_emit 
           , ct.pessoa_id		   
        from conhec_transp   ct
           , mod_fiscal      mf
           , ct_comp_doc_cofins cc
           , ct_reg_anal     cr
       where ct.empresa_id      = en_empresa_id
         and ct.dm_st_proc      = 4 -- autorizado
         and ct.dm_arm_cte_terc = 0 -- 0-Não, 1-Sim
         and ct.dm_ind_oper = 0 -- 0-Entrada, 1-Saída
         and ((ct.dm_ind_emit = 1 and nvl(ct.dt_sai_ent,ct.dt_hr_emissao) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (ct.dm_ind_emit = 0 and en_dm_dt_escr_dfepoe = 0 and ct.dt_hr_emissao between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (ct.dm_ind_emit = 0 and en_dm_dt_escr_dfepoe = 1 and nvl(ct.dt_sai_ent,ct.dt_hr_emissao) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin))
         and mf.id              = ct.modfiscal_id
         --and mf.cod_mod        in ('07', '08', '8B', '09', '10', '11', '26', '27', '57')
         and mf.cod_mod        in ('07', '08', '8B', '09', '10', '11', '26', '27', '57', '63', '67')
         and cc.conhectransp_id = ct.id
         and cr.conhectransp_id = ct.id
       order by ct.id
           , cc.id
           , gn_tipoimp_id
           , cc.aliq_cofins
           , cc.basecalccredpc_id
           , cc.codst_id;
   --
   --| NOTA FISCAL DE SERVIÇO DE COMUNICAÇÃO (CÓDIGO 21) E NOTA FISCAL DE SERVIÇO DE TELECOMUNICAÇÃO (CÓDIGO 22)
   cursor c_d500( en_empresa_id        in empresa.id%type
                , en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
      select nf.id notafiscal_id
           , nf.nro_nf
           , nf.serie
           , nf.dt_emiss
           , nc.id nfcomplopercofins_id
           , gn_tipoimp_id tipoimp_id
           , nn.cfop_id
           , 0 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , nc.aliq_cofins aliq_cofins
           , 0 vl_aliq_cofins_quant
           , nc.basecalccredpc_id
           , nc.codst_id
           , decode(nvl(nc.vl_bc_cofins,0), 0, 1, 1) tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(nc.vl_bc_cofins,0) vl_bc_cofins_tot
           , decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(nc.vl_bc_cofins,0), 0) * gn_recbru_cum
                                         , 0) vl_bc_cofins_cum
           , (nvl(nc.vl_bc_cofins,0) - decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(nc.vl_bc_cofins,0), 0) * gn_recbru_cum
                                                                , 0)) vl_bc_cofins_nc
           , case when pk_csf.fkg_cod_st_cod(nc.codst_id) in ('50','51','52','60','61','62') then
                       1
                  when pk_csf.fkg_cod_st_cod(nc.codst_id) in ('53','63','54','64','55','65') then
                       2
                  when pk_csf.fkg_cod_st_cod(nc.codst_id) in ('56','66') then
                       3
                  else 0
             end seq_lancto
           , 0 quant_bc_cofins_tot
           , 0 quant_bc_cofins
           , nvl(nc.vl_cofins,0) vl_imp
           -- colunas utilizadas na memória de calculo --
           , case nf.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , 0                                                nro_item
           , nvl(nc.vl_bc_cofins,0)                           vl_base_calc
           , 0                                                qtde_base_calc_prod
           , nvl(nc.aliq_cofins,0)                            vl_aliq_prod
           , nvl(nc.vl_cofins,0)                              vl_imp_trib
           , nf.dm_ind_emit                                   dm_ind_emit
           , nf.pessoa_id           
        from nota_fiscal       nf
           , mod_fiscal        mf
           , nf_compl_oper_cofins nc
           , (select distinct na.notafiscal_id
                   , na.cfop_id
                from nfregist_analit na) nn
       where nf.empresa_id      = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and nf.dm_ind_oper     = 0 -- 0-entrada, 1-saída
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and en_dm_dt_escr_dfepoe = 0 and nf.dt_emiss between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and en_dm_dt_escr_dfepoe = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin))
         and mf.id            = nf.modfiscal_id
         and mf.cod_mod      in ('21', '22')
         and nc.notafiscal_id = nf.id
         and nn.notafiscal_id = nf.id
       order by nf.id
           , nc.id
           , gn_tipoimp_id
           , nc.aliq_cofins
           , nc.basecalccredpc_id
           , nc.codst_id;
   --
   --| DEMAIS DOCUMENTOS E OPERAÇÕES GERADORAS DE CONTRIBUIÇÃO E CRÉDITOS
   cursor c_f100( en_empresa_id in empresa.id%type ) is
      select dd.id demdocopergercc_id
           , dd.dt_oper
           , gn_tipoimp_id tipoimp_id
           , it.cod_item
           , it.ncm_id
           , dd.dm_ind_orig_cred
           , 0 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , dd.aliq_cofins aliq_cofins
           , 0 vl_aliq_cofins_quant
           , dd.basecalccredpc_id
           , dd.codst_id_cofins codst_id
           , decode(nvl(dd.vl_bc_cofins,0), 0, 1, 1) tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(dd.vl_bc_cofins,0) vl_bc_cofins_tot
           , decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(dd.vl_bc_cofins,0), 0) * gn_recbru_cum
                                         , 0) vl_bc_cofins_cum
           , (nvl(dd.vl_bc_cofins,0) - decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(dd.vl_bc_cofins,0), 0) * gn_recbru_cum
                                                                , 0)) vl_bc_cofins_nc
           , case when pk_csf.fkg_cod_st_cod(dd.codst_id_cofins) in ('50','51','52','60','61','62') then
                       1
                  when pk_csf.fkg_cod_st_cod(dd.codst_id_cofins) in ('53','63','54','64','55','65') then
                       2
                  when pk_csf.fkg_cod_st_cod(dd.codst_id_cofins) in ('56','66') then
                       3
                  else 0
             end seq_lancto
           , 0 quant_bc_cofins_tot
           , 0 quant_bc_cofins
           , nvl(dd.vl_cofins,0) vl_imp
           -- colunas utilizadas na memória de calculo --
           , 'C'                 tipo_operacao
           , 0                   nro_item
           , 0                   dm_ind_emit
           , 0                   qtde_base_calc_prod
           , dd.vl_bc_cofins     vl_bc_cofins
           , dd.pessoa_id		   
        from dem_doc_oper_ger_cc dd
           , item                it
       where dd.empresa_id    = en_empresa_id
         and dd.dt_oper between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and dd.dm_st_proc    = 1 -- validado
         and it.id(+)         = dd.item_id -- O item é necessário devido ao NCM para identificar a embalagem, caso não tenha não será considerado embalagem
       order by dd.id
           , gn_tipoimp_id
           , dd.aliq_cofins
           , dd.basecalccredpc_id
           , dd.codst_id_cofins;
   --
   --| BENS INCORPORADOS AO ATIVO IMOBILIZADO - DEPRECIAÇÃO/AMORTIZAÇÃO
   cursor c_f120( en_empresa_id in empresa.id%type ) is
      select ba.id bemativimobopercredpc_id
           , ba.mes_ref
           , ba.ano_ref
           , ba.dm_ind_orig_cred
           , gn_tipoimp_id tipoimp_id
           , 0 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , ba.aliq_cofins aliq_cofins
           , 0 vl_aliq_cofins_quant
           , ba.basecalccredpc_id
           , ba.codst_id_cofins codst_id
           , decode(nvl(ba.vl_bc_cofins,0), 0, 1, 1) tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(ba.vl_bc_cofins,0) vl_bc_cofins_tot
           , decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(ba.vl_bc_cofins,0), 0) * gn_recbru_cum
                                         , 0) vl_bc_cofins_cum
           , (nvl(ba.vl_bc_cofins,0) - decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(ba.vl_bc_cofins,0), 0) * gn_recbru_cum
                                                                , 0)) vl_bc_cofins_nc
           , case when pk_csf.fkg_cod_st_cod(ba.codst_id_cofins) in ('50','51','52','60','61','62') then
                       1
                  when pk_csf.fkg_cod_st_cod(ba.codst_id_cofins) in ('53','63','54','64','55','65') then
                       2
                  when pk_csf.fkg_cod_st_cod(ba.codst_id_cofins) in ('56','66') then
                       3
                  else 0
             end seq_lancto
           , 0 quant_bc_cofins_tot
           , 0 quant_bc_cofins
           , nvl(ba.vl_cofins,0) vl_imp
           -- colunas utilizadas na memória de calculo --
           , case ba.dm_tipo_oper when 0 then 'D' else 'C' end tipo_operacao
           , 0                                                 nro_item
           , 0                                                 dm_ind_emit
           , 0                                                 qtde_base_calc_prod
           , nvl(ba.vl_cofins,0)                               vl_imp_trib
        from bem_ativ_imob_oper_cred_pc ba
       where ba.empresa_id   = en_empresa_id
         and to_date((lpad(ba.mes_ref,2,'0')||ba.ano_ref),'mmyyyy') between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and ba.dm_st_proc   = 1 -- validado
         and ba.dm_tipo_oper = 0 -- Depreciação/Amortização
       order by ba.id
           , gn_tipoimp_id
           , ba.aliq_cofins
           , ba.basecalccredpc_id
           , ba.codst_id_cofins;
   --
   --| BENS INCORPORADOS AO ATIVO IMOBILIZADO - AQUISIÇÃO/CONTRIBUIÇÃO
   cursor c_f130( en_empresa_id in empresa.id%type ) is
      select ba.id bemativimobopercredpc_id
           , ba.mes_ref
           , ba.ano_ref
           , ba.dm_ind_orig_cred
           , gn_tipoimp_id tipoimp_id
           , 0 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , ba.aliq_cofins aliq_cofins
           , 0 vl_aliq_cofins_quant
           , ba.basecalccredpc_id
           , ba.codst_id_cofins codst_id
           , decode(nvl(ba.vl_bc_cofins,0), 0, 1, 1) tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(ba.vl_bc_cofins,0) vl_bc_cofins_tot
           , decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(ba.vl_bc_cofins,0), 0) * gn_recbru_cum
                                         , 0) vl_bc_cofins_cum
           , (nvl(ba.vl_bc_cofins,0) - decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(ba.vl_bc_cofins,0), 0) * gn_recbru_cum
                                                                , 0)) vl_bc_cofins_nc
           , case when pk_csf.fkg_cod_st_cod(ba.codst_id_cofins) in ('50','51','52','60','61','62') then
                       1
                  when pk_csf.fkg_cod_st_cod(ba.codst_id_cofins) in ('53','63','54','64','55','65') then
                       2
                  when pk_csf.fkg_cod_st_cod(ba.codst_id_cofins) in ('56','66') then
                       3
                  else 0
             end seq_lancto
           , 0 quant_bc_cofins_tot
           , 0 quant_bc_cofins
           , nvl(ba.vl_cofins,0) vl_imp
           -- colunas utilizadas na memória de calculo --
           , case ba.dm_tipo_oper when 0 then 'D' else 'C' end tipo_operacao
           , 0                                                 nro_item
           , nvl(ba.vl_bc_cofins,0)                            vl_base_calc
           , 0                                                 qtde_base_calc_prod
           , 0                                                 vl_aliq_prod
           , nvl(ba.vl_cofins,0)                               vl_imp_trib
           , 0                                                 dm_ind_emit
        from bem_ativ_imob_oper_cred_pc ba
       where ba.empresa_id   = en_empresa_id
         and to_date((lpad(ba.mes_ref,2,'0')||ba.ano_ref),'mmyyyy') between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and ba.dm_st_proc   = 1 -- validado
         and ba.dm_tipo_oper = 1 -- Aquisição/Contribuição
       order by ba.id
           , gn_tipoimp_id
           , ba.aliq_cofins
           , ba.basecalccredpc_id
           , ba.codst_id_cofins;
   --
   --| CRÉDITO PRESUMIDO SOBRE ESTOQUE DE ABERTURA
   cursor c_f150( en_empresa_id in empresa.id%type ) is
      select cp.id credpresestabertpc_id
           , cp.mes_ref
           , cp.ano_ref
           , gn_tipoimp_id tipoimp_id
           , 0 dm_ind_cred_ori -- 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
           , cp.aliq_cofins aliq_cofins
           , 0 vl_aliq_cofins_quant
           , cp.basecalccredpc_id
           , cp.codst_id_cofins codst_id
           , decode(nvl(cp.vl_bc_men_est,0), 0, 1, 1) tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(cp.vl_bc_men_est,0) vl_bc_cofins_tot
           , decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(cp.vl_bc_men_est,0), 0) * gn_recbru_cum
                                         , 0) vl_bc_cofins_cum
           , (nvl(cp.vl_bc_men_est,0) - decode(gn_dm_cod_inc_trib, 3, decode(gn_dm_ind_apro_cred, 2, nvl(cp.vl_bc_men_est,0), 0) * gn_recbru_cum
                                                                    , 0)) vl_bc_cofins_nc
           , case when pk_csf.fkg_cod_st_cod(cp.codst_id_cofins) in ('50','51','52','60','61','62') then
                       1
                  when pk_csf.fkg_cod_st_cod(cp.codst_id_cofins) in ('53','63','54','64','55','65') then
                       2
                  when pk_csf.fkg_cod_st_cod(cp.codst_id_cofins) in ('56','66') then
                       3
                  else 0
             end seq_lancto
           , 0 quant_bc_cofins_tot
           , 0 quant_bc_cofins
           , nvl(cp.vl_cofins,0) vl_imp
           -- colunas utilizadas na memória de calculo --
           , 'C'                                              tipo_operacao
           , 0                                                nro_item
           , nvl(cp.vl_bc_men_est,0)                          vl_base_calc
           , 0                                                qtde_base_calc_prod
           , 0                                                vl_aliq_prod
           , nvl(cp.vl_cofins,0)                              vl_imp_trib
           , 0                                                dm_ind_emit
        from cred_pres_est_abert_pc cp
       where cp.empresa_id = en_empresa_id
         and to_date((lpad(cp.mes_ref,2,'0')||cp.ano_ref),'mmyyyy') between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and cp.dm_st_proc = 1 -- validado
       order by cp.id
           , gn_tipoimp_id
           , cp.aliq_cofins
           , cp.basecalccredpc_id
           , cp.codst_id_cofins;
   --
BEGIN
   --
   vn_fase := 1;
   --
   vt_tab_reg_m500.delete;
   vt_tab_reg_m505.delete;
   --
   vn_fase := 2;
   --| Nota fiscal de serviço
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 3;
      --
      for r_reg in c_a100( en_empresa_id        => r_empresa.empresa_id
                         , en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe )
      loop
         --
         vn_fase := 4;
         -- verifica se a CFOP faz parte da escrituração: 0-não, 1-sim
         if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, r_reg.codst_id, null) = 1 then
            --
            vn_fase   := 4.1;
            vv_cod_st := pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
            vn_fase   := 4.2;
            --
            if vv_cod_st in ('50', '51', '52', '53', '54', '55', '56', '60', '61', '62', '63', '64', '65', '66') then
               --
               vn_fase       := 4.3;
               vn_seq_lancto := 0;
               --
               loop -- devido aos lançamentos
                  --
                  vn_fase       := 4.4;
                  vn_seq_lancto := nvl(vn_seq_lancto,0) + 1;
                  --
                  vn_fase    := 4.5;
                  vn_ncm_id  := pk_csf.fkg_ncm_id( ev_cod_ncm => r_reg.cod_ncm );
                  vn_fase    := 4.6;
                  vn_cd_cfop := pk_csf.fkg_cfop_cd( en_cfop_id => r_reg.cfop_id );
                  vn_fase    := 4.7;
                  --
                  vn_tipocredpc_id := pk_csf_efd_pc.fkg_relac_tipo_cred_pc_id( en_empresa_id        => r_empresa.empresa_id      -- identificador da empresa
                                                                             , en_tipoimp_id        => r_reg.tipoimp_id          -- identificador do tipo de imposto (cofins)
                                                                             , en_codst_id          => r_reg.codst_id            -- identificador do código ST
                                                                             , en_ncm_id            => vn_ncm_id                 -- identificador do código ncm
                                                                             , en_cfop_id           => r_reg.cfop_id             -- identificador do código cfop
                                                                             , en_ind_orig_cred     => r_reg.dm_ind_orig_cred    -- indicador de crédito 0-oper.mercado interno, 1-oper.importação
                                                                             , en_vl_aliq           => nvl(r_reg.aliq_cofins,0)  -- valor de alíquota dos impostos: identificar básica ou diferenciada
                                                                             , en_qt_bc_imp         => r_reg.quant_bc_cofins     -- valor da base de cálculo - por unidade de produto
                                                                             , en_vl_bc_imp         => r_reg.vl_bc_cofins_tot    -- valor da base de cálculo - por valor
                                                                             , en_seq_lancto        => vn_seq_lancto             -- sequência de lançamento
                                                                             , en_basecalccredpc_id => 0                         -- identificador da base de cálculo de crédito para Bloco F150
                                                                             , en_pessoa_id         => r_reg.pessoa_id );        -- identificador da pessoa do documento fiscal																			 
                  --
                  vn_fase := 4.8;
                  --
                  if nvl(vn_tipocredpc_id,0) = 0 then
                     vn_fase := 4.9;
                     gv_resumo_log := 'O identificador do tipo de crédito não foi encontrado. Nota Fiscal (serviço) nro/série-data-item = '||r_reg.nro_nf||'/'||
                                      r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'-'||r_reg.cod_item||'. Parâmetros => Imposto: COFINS, Código ST: '||
                                      vv_cod_st||', Código NCM: '||r_reg.cod_ncm||'Código CFOP: '||vn_cd_cfop||' Indicador de Crédito: '||r_reg.dm_ind_orig_cred||
                                      ' Alíquota: '||ltrim(rtrim(to_char(r_reg.aliq_cofins,'99G999D00')))||' Base de cálculo (qtde): '||
                                      ltrim(rtrim(to_char(r_reg.quant_bc_cofins,'999G999G999G990D0000')))||' Base de cálculo (valor): '||
                                      ltrim(rtrim(to_char(r_reg.vl_bc_cofins_tot,'9G999G999G999G990D00')))||' Valor do imposto: '||
                                      ltrim(rtrim(to_char(r_reg.vl_imp,'9G999G999G999G990D00')))||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 4.10;
                  --
                  if nvl(r_reg.basecalccredpc_id,0) = 0 then
                     vn_fase := 4.11;
                     gv_resumo_log := 'O identificador da base de cálculo de crédito não foi informado. Nota Fiscal (serviço) nro/série-data-item = '||
                                      r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'-'||r_reg.cod_item||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 4.12;
                  --
                  if nvl(r_reg.codst_id,0) = 0 then
                     vn_fase := 4.13;
                     gv_resumo_log := 'O identificador do código da situação tributária não foi informado. Nota Fiscal (serviço) nro/série-data-item = '||
                                      r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'-'||r_reg.cod_item||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 4.14;
                  --
                  if nvl(vn_tipocredpc_id,0) <> 0 and
                     nvl(r_reg.basecalccredpc_id,0) <> 0 and
                     nvl(r_reg.codst_id,0) <> 0 then
                     --
                     vn_fase := 4.15;
                     -- A função irá retornar o valor do campo VL_BC_COFINS
                     vn_vl_bc_cofins := fkg_recup_vl_bc_cofins( en_seq_lancto      => vn_seq_lancto
                                                              , ev_cod_st          => vv_cod_st
                                                              , en_vl_bc_cofins_nc => nvl(r_reg.vl_bc_cofins_nc,0) );
                     --
                     vn_fase := 4.16;
                     --
		                 vn_cd_tipocredpc:= null;
                     vn_cd_tipocredpc:= pk_csf_efd_pc.fkg_cd_tipo_cred_pc(vn_tipocredpc_id);
                     --
                     if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                       ---
                       vn_fase := 4.17;
                       ---
                       pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                         replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                         0/*replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')*/
                                           , en_tipocredpc_id         => vn_tipocredpc_id
                                           , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                           , en_tipo                  => r_reg.tipo
                                           , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                           , en_vl_aliq_cofins_quant  => 0 --nvl(r_reg.vl_aliq_cofins_quant,0)
                                           , en_vl_bc_cofins          => 0 --nvl(vn_vl_bc_cofins,0)
                                           , en_quant_bc_cofins       => 0 --nvl(r_reg.quant_bc_cofins,0)
                                           , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                           , en_codst_id              => r_reg.codst_id
                                           , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                           , en_vl_bc_cofins_cum      => 0 --nvl(r_reg.vl_bc_cofins_cum,0)
                                           , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                           , en_quant_bc_cofins_tot   => 0 ); --nvl(r_reg.quant_bc_cofins_tot,0) );
                       ---                                         
                     else
                       ---    
                       vn_fase := 4.18;
                       ---                                          
                       pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                         replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                         replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')
                                           , en_tipocredpc_id         => vn_tipocredpc_id
                                           , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                           , en_tipo                  => r_reg.tipo
                                           , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                           , en_vl_aliq_cofins_quant  => nvl(r_reg.vl_aliq_cofins_quant,0)
                                           , en_vl_bc_cofins          => nvl(vn_vl_bc_cofins,0)
                                           , en_quant_bc_cofins       => nvl(r_reg.quant_bc_cofins,0)
                                           , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                           , en_codst_id              => r_reg.codst_id
                                           , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                           , en_vl_bc_cofins_cum      => nvl(r_reg.vl_bc_cofins_cum,0)
                                           , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                           , en_quant_bc_cofins_tot   => nvl(r_reg.quant_bc_cofins_tot,0) );
                       ---                                          
                     end if;
                     --
                     -- Monta a memória de calculo --------------------------------
                     vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('A100');
                     vt_mem_calc_apur_cofins                       := null;
                     vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
                     vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
                     vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
                     vt_mem_calc_apur_cofins.ref_item_id           := r_reg.itemnf_id;
                     vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
                     vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
                     vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
                     vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
                     vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
                     ---
                     if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                        vt_mem_calc_apur_cofins.aliq_prod             := 0;/*r_reg.vl_aliq_cofins_quant;*/
                     else
                        vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
                     end if;
                     ---
                     vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
                     vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
                     pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
         --
                  end if;
                  --
                  vn_fase := 4.19;
                  --
                  if nvl(vn_seq_lancto,0) = nvl(r_reg.seq_lancto,0) then
                     exit;
                  end if;
                  --
               end loop;
               --
            end if; -- não se enquadra nos código ST
            --
         end if; -- CFOP e CST indica que o documento gera escrituração
         --
         -- Monta a memória de calculo --------------------------------
/*         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('A100');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
         vt_mem_calc_apur_cofins.ref_item_id           := r_reg.itemnf_id;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
         vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
         vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
         vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);*/
         --
      end loop; -- c_a100
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 5;
   --| Nota fiscal (código 01), nota fiscal avulsa (código 1b), nota fiscal de produtor (código 04) e nfe (código 55)
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 6;
      --
      for r_reg in c_c100( en_empresa_id        => r_empresa.empresa_id
                         , en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe )
      loop
         --
         vn_fase := 7;
         -- verifica se a CFOP faz parte da escrituração: 0-não, 1-sim
         if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, r_reg.codst_id, null) = 1 then
            --
            vn_fase    := 7.1;
            vv_cod_st  := pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
            vn_fase    := 7.2;
            vn_cd_cfop := pk_csf.fkg_cfop_cd( en_cfop_id => r_reg.cfop_id );
            vn_fase    := 7.3;
            --
            -- Verificar se a nota fiscal possui item com CFOP vinculado ao tipo de operação de Energia Elétrica
            if r_reg.cod_mod = '55' then
               --
               begin
                  select 'S'
                    into vv_cfop_energia
                    from cfop          cf
                       , tipo_operacao tp
                   where cf.id = r_reg.cfop_id
                     and tp.id = cf.tipooperacao_id
                     and tp.cd = 4; -- Energia Elétrica
               exception
                  when others then
                     vv_cfop_energia := 'N';
               end;
               --
            else
               --
               vv_cfop_energia := 'N'; -- S-Item com CFOP de Energia Elétrica (não gerar M100), N-Item sem CFOP de Energia Elétrica (gerar M100)
               --
            end if;
            --
            vn_fase := 7.4;
            --
            if vv_cfop_energia = 'N' then -- S-Item com CFOP de Energia Elétrica (não gerar M100), N-Item sem CFOP de Energia Elétrica (gerar M100)
               --
               if vv_cod_st in ('50', '51', '52', '53', '54', '55', '56', '60', '61', '62', '63', '64', '65', '66') then
                  --
                  vn_fase       := 7.5;
                  vn_seq_lancto := 0;
                  --
                  loop -- devido aos lançamentos
                     --
                     vn_fase       := 7.6;
                     vn_seq_lancto := nvl(vn_seq_lancto,0) + 1;
                     --
                     vn_fase    := 7.7;
                     vn_ncm_id  := pk_csf.fkg_ncm_id( ev_cod_ncm => r_reg.cod_ncm );
                     vn_fase    := 7.8;
                     --
                     vn_tipocredpc_id := pk_csf_efd_pc.fkg_relac_tipo_cred_pc_id( en_empresa_id        => r_empresa.empresa_id   -- identificador da empresa
                                                                                , en_tipoimp_id        => r_reg.tipoimp_id       -- identificador do tipo de imposto (cofins)
                                                                                , en_codst_id          => r_reg.codst_id         -- identificador do código ST
                                                                                , en_ncm_id            => vn_ncm_id              -- identificador do código
                                                                                , en_cfop_id           => r_reg.cfop_id          -- identificador do código cfop
                                                                                , en_ind_orig_cred     => 0                      -- indicador de crédito 0-oper.mercado interno, 1-oper.importação
                                                                                , en_vl_aliq           => r_reg.aliq_cofins      -- valor de alíquota dos impostos: identificar básica ou diferenciada
                                                                                , en_qt_bc_imp         => r_reg.quant_bc_cofins  -- valor da base de cálculo - por unidade de produto
                                                                                , en_vl_bc_imp         => r_reg.vl_bc_cofins_tot -- valor da base de cálculo - por valor
                                                                                , en_seq_lancto        => vn_seq_lancto          -- sequência de lançamento
                                                                                , en_basecalccredpc_id => 0                      -- identificador da base de cálculo de crédito para Bloco F150
                                                                                , en_pessoa_id         => r_reg.pessoa_id );     -- identificador da pessoa do documento fiscal																				
                     --
                     vn_fase := 7.9;
                     --
                     if nvl(vn_tipocredpc_id,0) = 0 then
                        vn_fase := 7.10;
                        gv_resumo_log := 'O identificador do tipo de crédito não foi encontrado. Nota Fiscal (Modelo fiscal 01, 1B, 04 e 55) nro/série-data-item = '||
                                         r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'-'||r_reg.cod_item||
                                         '. Parâmetros => Imposto: COFINS, Código ST: '||vv_cod_st||', Código NCM: '||r_reg.cod_ncm||', Código CFOP: '||vn_cd_cfop||
                                         ', Indicador de Crédito: 0, Alíquota: '||ltrim(rtrim(to_char(r_reg.aliq_cofins,'99G999D00')))||', Base de cálculo (qtde): '||
                                         ltrim(rtrim(to_char(r_reg.quant_bc_cofins,'999G999G999G990D0000')))||', Base de cálculo (valor): '||
                                         ltrim(rtrim(to_char(r_reg.vl_bc_cofins_tot,'9G999G999G999G990D00')))||', Valor do imposto: '||
                                         ltrim(rtrim(to_char(r_reg.vl_imp,'9G999G999G999G990D00')))||'.';
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                         , ev_mensagem       => gv_mensagem_log
                                                         , ev_resumo         => gv_resumo_log
                                                         , en_tipo_log       => erro_de_validacao
                                                         , en_referencia_id  => gn_referencia_id
                                                         , ev_obj_referencia => gv_obj_referencia );
                     end if;
                     --
                     vn_fase := 7.11;
                     --
                     if nvl(r_reg.basecalccredpc_id,0) = 0 then
                        vn_fase := 7.12;
                        gv_resumo_log := 'O identificador da base de cálculo de crédito não foi informado. Nota Fiscal (Modelo fiscal 01, 1B, 04 e 55) nro/série-'||
                                         'data-item = '||r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'-'||r_reg.cod_item||'.';
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                         , ev_mensagem       => gv_mensagem_log
                                                         , ev_resumo         => gv_resumo_log
                                                         , en_tipo_log       => erro_de_validacao
                                                         , en_referencia_id  => gn_referencia_id
                                                         , ev_obj_referencia => gv_obj_referencia );
                     end if;
                     --
                     vn_fase := 7.13;
                     --
                     if nvl(r_reg.codst_id,0) = 0 then
                        vn_fase := 7.14;
                        gv_resumo_log := 'O identificador do código da situação tributária não foi informado. Nota Fiscal (Modelo fiscal 01, 1B, 04 e 55) nro/série-'||
                                         'data-item = '||r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'-'||r_reg.cod_item||'.';
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                         , ev_mensagem       => gv_mensagem_log
                                                         , ev_resumo         => gv_resumo_log
                                                         , en_tipo_log       => erro_de_validacao
                                                         , en_referencia_id  => gn_referencia_id
                                                         , ev_obj_referencia => gv_obj_referencia );
                     end if;
                     --
                     vn_fase := 7.15;
                     --
                     if nvl(vn_tipocredpc_id,0) <> 0 and
                        nvl(r_reg.basecalccredpc_id,0) <> 0 and
                        nvl(r_reg.codst_id,0) <> 0 then
                        --
                        vn_fase := 7.16;
                        -- A função irá retornar o valor do campo VL_BC_COFINS
                        vn_vl_bc_cofins := fkg_recup_vl_bc_cofins( en_seq_lancto      => vn_seq_lancto
                                                                 , ev_cod_st          => vv_cod_st
                                                                 , en_vl_bc_cofins_nc => nvl(r_reg.vl_bc_cofins_nc,0) );
                        --
                        vn_fase := 7.17;
                        --
                        vn_cd_tipocredpc:= null;
                        vn_cd_tipocredpc:= pk_csf_efd_pc.fkg_cd_tipo_cred_pc(vn_tipocredpc_id);
                        --
                        if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                          --
                          vn_fase := 7.18;
                          --
                          pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                            replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                            0/*replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')*/
                                              , en_tipocredpc_id         => vn_tipocredpc_id
                                              , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                              , en_tipo                  => r_reg.tipo
                                              , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                              , en_vl_aliq_cofins_quant  => 0 --nvl(r_reg.vl_aliq_cofins_quant,0)
                                              , en_vl_bc_cofins          => 0 --nvl(vn_vl_bc_cofins,0)
                                              , en_quant_bc_cofins       => 0 --nvl(r_reg.quant_bc_cofins,0)
                                              , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                              , en_codst_id              => r_reg.codst_id
                                              , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                              , en_vl_bc_cofins_cum      => 0 --nvl(r_reg.vl_bc_cofins_cum,0)
                                              , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                              , en_quant_bc_cofins_tot   => 0 ); --nvl(r_reg.quant_bc_cofins_tot,0) );
                          --
                        else
                          --
                          vn_fase := 7.19;
                          --                          
                          pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                            replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                            replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')
                                              , en_tipocredpc_id         => vn_tipocredpc_id
                                              , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                              , en_tipo                  => r_reg.tipo
                                              , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                              , en_vl_aliq_cofins_quant  => nvl(r_reg.vl_aliq_cofins_quant,0)
                                              , en_vl_bc_cofins          => nvl(vn_vl_bc_cofins,0)
                                              , en_quant_bc_cofins       => nvl(r_reg.quant_bc_cofins,0)
                                              , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                              , en_codst_id              => r_reg.codst_id
                                              , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                              , en_vl_bc_cofins_cum      => nvl(r_reg.vl_bc_cofins_cum,0)
                                              , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                              , en_quant_bc_cofins_tot   => nvl(r_reg.quant_bc_cofins_tot,0) );
                          --                         
                        end if;                                                                
                        --
                        -- Monta a memória de calculo --------------------------------
                        vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('C100');
                        vt_mem_calc_apur_cofins                       := null;
                        vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
                        vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
                        vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
                        vt_mem_calc_apur_cofins.ref_item_id           := r_reg.itemnf_id;
                        vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
                        vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
                        vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
                        vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
                        vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
                        ---
                        if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then  
                           vt_mem_calc_apur_cofins.aliq_prod             := 0;/*r_reg.vl_aliq_cofins_quant;*/
                        else
                           vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
                        end if;
                        ---
                        vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
                        vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
                        pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
                        --
                     end if;
                     --
                     vn_fase := 7.20;
                     --
                     if nvl(vn_seq_lancto,0) = nvl(r_reg.seq_lancto,0) then
                        exit;
                     end if;
                     --
                  end loop;
                  --
               end if; -- não se enquadra nos código ST
               --
            end if; -- cod_mod = '55' and vn_cd_cfop = 1252 -- Compra de energia elétrica por estabelecimento industrial
            --
         end if; -- CFOP e CST indica que o documento gera escrituração
         --
/*         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('C100');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
         vt_mem_calc_apur_cofins.ref_item_id           := r_reg.itemnf_id;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
         vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
         vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
         vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);*/
         --
      end loop; -- c_c100
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 8;
   --| Nota fiscal NFe de energia elétrica (código 55), com CFOP de Energia Elétrica
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 9;
      --
      for r_reg in c_c100_ee( en_empresa_id        => r_empresa.empresa_id
                            , en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe )
      loop
         --
         vn_fase := 10;
         -- verifica se a CFOP faz parte da escrituração: 0-não, 1-sim
         if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, r_reg.codst_id, null) = 1 then
            --
            vn_fase    := 10.1;
            vv_cod_st  := pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
            vn_fase    := 10.2;
            vn_cd_cfop := pk_csf.fkg_cfop_cd( en_cfop_id => r_reg.cfop_id );
            vn_fase    := 10.3;
            --
            if vv_cod_st in ('50', '51', '52', '53', '54', '55', '56', '60', '61', '62', '63', '64', '65', '66') then
               --
               vn_fase       := 10.4;
               vn_seq_lancto := 0;
               --
               loop -- devido aos lançamentos
                  --
                  vn_fase       := 10.5;
                  vn_seq_lancto := nvl(vn_seq_lancto,0) + 1;
                  --
                  vn_fase    := 10.6;
                  vn_ncm_id  := pk_csf.fkg_ncm_id( ev_cod_ncm => r_reg.cod_ncm );
                  vn_fase    := 10.7;
                  --
                  vn_tipocredpc_id := pk_csf_efd_pc.fkg_relac_tipo_cred_pc_id( en_empresa_id        => r_empresa.empresa_id   -- identificador da empresa
                                                                             , en_tipoimp_id        => r_reg.tipoimp_id       -- identificador do tipo de imposto (cofins)
                                                                             , en_codst_id          => r_reg.codst_id         -- identificador do código ST
                                                                             , en_ncm_id            => vn_ncm_id              -- identificador do código
                                                                             , en_cfop_id           => r_reg.cfop_id          -- identificador do código cfop
                                                                             , en_ind_orig_cred     => 0                      -- indicador de crédito 0-oper.mercado interno, 1-oper.importação
                                                                             , en_vl_aliq           => r_reg.aliq_cofins      -- valor de alíquota dos impostos: identificar básica ou diferenciada
                                                                             , en_qt_bc_imp         => r_reg.quant_bc_cofins  -- valor da base de cálculo - por unidade de produto
                                                                             , en_vl_bc_imp         => r_reg.vl_bc_cofins_tot -- valor da base de cálculo - por valor
                                                                             , en_seq_lancto        => vn_seq_lancto          -- sequência de lançamento
                                                                             , en_basecalccredpc_id => 0                      -- identificador da base de cálculo de crédito para Bloco F150
                                                                             , en_pessoa_id         => r_reg.pessoa_id );     -- identificador da pessoa do documento fiscal																			 
                  --
                  vn_fase := 10.8;
                  --
                  if nvl(vn_tipocredpc_id,0) = 0 then
                     vn_fase := 10.9;
                     gv_resumo_log := 'O identificador do tipo de crédito não foi encontrado. Nota Fiscal (Modelo fiscal 55 com CFOP de Energia Elétrica) '||
                                      'nro/série-data-item = '||r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'-'||r_reg.cod_item||
                                      '. Parâmetros => Imposto: COFINS, Código ST: '||vv_cod_st||', Código NCM: '||r_reg.cod_ncm||', Código CFOP: '||vn_cd_cfop||
                                      ', Indicador de Crédito: 0, Alíquota: '||ltrim(rtrim(to_char(r_reg.aliq_cofins,'99G999D00')))||', Base de cálculo (qtde): '||
                                      ltrim(rtrim(to_char(r_reg.quant_bc_cofins,'999G999G999G990D0000')))||', Base de cálculo (valor): '||
                                      ltrim(rtrim(to_char(r_reg.vl_bc_cofins_tot,'9G999G999G999G990D00')))||', Valor do imposto: '||
                                      ltrim(rtrim(to_char(r_reg.vl_imp,'9G999G999G999G990D00')))||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 10.10;
                  --
                  if nvl(r_reg.basecalccredpc_id,0) = 0 then
                     vn_fase := 10.11;
                     gv_resumo_log := 'O identificador da base de cálculo de crédito não foi informado. Nota Fiscal (Modelo fiscal 55 com CFOP de Energia '||
                                      'Elétrica) nro/série-data-item = '||r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'-'||
                                      r_reg.cod_item||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 10.12;
                  --
                  if nvl(r_reg.codst_id,0) = 0 then
                     vn_fase := 10.13;
                     gv_resumo_log := 'O identificador do código da situação tributária não foi informado. Nota Fiscal (Modelo fiscal 55 com CFOP de Energia '||
                                      'Elétrica) nro/série-data-item = '||r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'-'||
                                      r_reg.cod_item||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 10.14;
                  --
                  if nvl(vn_tipocredpc_id,0) <> 0 and
                     nvl(r_reg.basecalccredpc_id,0) <> 0 and
                     nvl(r_reg.codst_id,0) <> 0 then
                     --
                     vn_fase := 10.15;
                     -- A função irá retornar o valor do campo VL_BC_COFINS
                     vn_vl_bc_cofins := fkg_recup_vl_bc_cofins( en_seq_lancto      => vn_seq_lancto
                                                              , ev_cod_st          => vv_cod_st
                                                              , en_vl_bc_cofins_nc => nvl(r_reg.vl_bc_cofins_nc,0) );
                     --
                     vn_fase := 10.16;
                     --
                     vn_cd_tipocredpc:= null;
                     vn_cd_tipocredpc:= pk_csf_efd_pc.fkg_cd_tipo_cred_pc(vn_tipocredpc_id);
                     --
                     if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                       --
                       vn_fase := 10.17;
                       --
                       pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                         replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                         0/*replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')*/
                                           , en_tipocredpc_id         => vn_tipocredpc_id
                                           , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                           , en_tipo                  => r_reg.tipo
                                           , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                           , en_vl_aliq_cofins_quant  => 0 --nvl(r_reg.vl_aliq_cofins_quant,0)
                                           , en_vl_bc_cofins          => 0 --nvl(vn_vl_bc_cofins,0)
                                           , en_quant_bc_cofins       => 0 --nvl(r_reg.quant_bc_cofins,0)
                                           , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                           , en_codst_id              => r_reg.codst_id
                                           , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                           , en_vl_bc_cofins_cum      => 0 --nvl(r_reg.vl_bc_cofins_cum,0)
                                           , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                           , en_quant_bc_cofins_tot   => 0 ); --nvl(r_reg.quant_bc_cofins_tot,0) );
                       --
                     else                                           
                       -- 
                       vn_fase := 10.18;
                       --                                           
                       pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                         replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                         replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')
                                           , en_tipocredpc_id         => vn_tipocredpc_id
                                           , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                           , en_tipo                  => r_reg.tipo
                                           , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                           , en_vl_aliq_cofins_quant  => nvl(r_reg.vl_aliq_cofins_quant,0)
                                           , en_vl_bc_cofins          => nvl(vn_vl_bc_cofins,0)
                                           , en_quant_bc_cofins       => nvl(r_reg.quant_bc_cofins,0)
                                           , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                           , en_codst_id              => r_reg.codst_id
                                           , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                           , en_vl_bc_cofins_cum      => nvl(r_reg.vl_bc_cofins_cum,0)
                                           , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                           , en_quant_bc_cofins_tot   => nvl(r_reg.quant_bc_cofins_tot,0) ); 
                       --                                          
                     end if;                                                                                
                     --
                     -- Monta a memória de calculo --------------------------------
                     vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('C100');
                     vt_mem_calc_apur_cofins                       := null;
                     vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
                     vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
                     vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
                     vt_mem_calc_apur_cofins.ref_item_id           := r_reg.itemnf_id;
                     vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
                     vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
                     vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
                     vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
                     vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
                     ---
                     if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then                     
                        vt_mem_calc_apur_cofins.aliq_prod             := 0;/*r_reg.vl_aliq_cofins_quant;*/
                     else
                        vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
                     end if;
                     ---                     
                     vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
                     vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
                     pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
                     --
                  end if;
                  --
                  vn_fase := 10.19;
                  --
                  if nvl(vn_seq_lancto,0) = nvl(r_reg.seq_lancto,0) then
                     exit;
                  end if;
                  --
               end loop;
               --
            end if; -- não se enquadra nos código ST
            --
         end if; -- CFOP e CST indica que o documento gera escrituração
         --
/*         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('C100');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
         vt_mem_calc_apur_cofins.ref_item_id           := r_reg.itemnf_id;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
         vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
         vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
         vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);*/
         --
      end loop; -- c_c100_ee
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 11;
   --| Nota fiscal/conta de energia elétrica (código 06), nota fiscal/conta de fornecimento d'água canalizada (código 29) e
   --| Nota fiscal consumo fornecimento de gás (código 28) - documentos de entrada/aquisição com crédito
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 12;
      --
      for r_reg in c_c500( en_empresa_id        => r_empresa.empresa_id
                         , en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe )
      loop
         --
         vn_fase := 13;
         -- verifica se a CFOP faz parte da escrituração: 0-não, 1-sim
         if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, r_reg.codst_id, null) = 1 then
            --
            vn_fase   := 13.1;
            vv_cod_st := pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
            vn_fase   := 13.2;
            --
            if vv_cod_st in ('50', '51', '52', '53', '54', '55', '56', '60', '61', '62', '63', '64', '65', '66') then
               --
               vn_fase       := 13.3;
               vn_seq_lancto := 0;
               --
               loop -- devido aos lançamentos
                  --
                  vn_fase       := 13.4;
                  vn_seq_lancto := nvl(vn_seq_lancto,0) + 1;
                  --
                  vn_fase    := 13.5;
                  vn_cd_cfop := pk_csf.fkg_cfop_cd( en_cfop_id => r_reg.cfop_id );
                  vn_fase    := 13.6;
                  --
                  vn_tipocredpc_id := pk_csf_efd_pc.fkg_relac_tipo_cred_pc_id( en_empresa_id        => r_empresa.empresa_id   -- identificador da empresa
                                                                             , en_tipoimp_id        => gn_tipoimp_id          -- identificador do tipo de imposto (cofins)
                                                                             , en_codst_id          => r_reg.codst_id         -- identificador do código ST
                                                                             , en_ncm_id            => 0                      -- identificador do código ncm
                                                                             , en_cfop_id           => r_reg.cfop_id          -- identificador do código cfop
                                                                             , en_ind_orig_cred     => 0                      -- indicador de crédito 0-oper.mercado interno, 1-oper.importação
                                                                             , en_vl_aliq           => r_reg.aliq_cofins      -- valor de alíquota dos impostos: identificar básica ou diferenciada
                                                                             , en_qt_bc_imp         => 0                      -- valor da base de cálculo - por unidade de produto
                                                                             , en_vl_bc_imp         => r_reg.vl_bc_cofins_tot -- valor da base de cálculo - por valor
                                                                             , en_seq_lancto        => vn_seq_lancto          -- sequência de lançamento
                                                                             , en_basecalccredpc_id => 0                      -- identificador da base de cálculo de crédito para Bloco F150
                                                                             , en_pessoa_id         => r_reg.pessoa_id );     -- identificador da pessoa do documento fiscal																			 
                  --
                  vn_fase := 13.7;
                  --
                  if nvl(vn_tipocredpc_id,0) = 0 then
                     vn_fase := 13.8;
                     gv_resumo_log := 'O identificador do tipo de crédito não foi encontrado. Nota Fiscal (Modelo fiscal 06, 28 e 29) nro/série-data = '||r_reg.nro_nf||
                                      '/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'. Parâmetros => Imposto: COFINS, Código ST: '||vv_cod_st||
                                      ', Código CFOP: '||vn_cd_cfop||', Indicador de Crédito: 0, Alíquota: '||ltrim(rtrim(to_char(r_reg.aliq_cofins,'99G999D00')))||
                                      ', Base de cálculo (qtde): 0, Base de cálculo (valor): '||ltrim(rtrim(to_char(r_reg.vl_bc_cofins_tot,'9G999G999G999G990D00')))||
                                      ', Valor do imposto: '||ltrim(rtrim(to_char(r_reg.vl_imp,'9G999G999G999G990D00')))||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 13.9;
                  --
                  if nvl(r_reg.basecalccredpc_id,0) = 0 then
                     vn_fase := 13.10;
                     gv_resumo_log := 'O identificador da base de cálculo de crédito não foi informado. Nota Fiscal (Modelo fiscal 06, 28 e 29) nro/série-data = '||
                                      r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  elsif pk_csf_efd_pc.fkg_base_calc_cred_pc_cd( en_id => nvl(r_reg.basecalccredpc_id,0)) not in ('01','02','04','13') then
                        vn_fase := 13.11;
                        gv_resumo_log := 'O código da base de cálculo de crédito está incorreto. Nota Fiscal (Modelo fiscal 06, 28 e 29) nro/série-data = '||
                                         r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'. Deveria ser: 01 ou 02 ou 04 ou 13.';
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                         , ev_mensagem       => gv_mensagem_log
                                                         , ev_resumo         => gv_resumo_log
                                                         , en_tipo_log       => erro_de_validacao
                                                         , en_referencia_id  => gn_referencia_id
                                                         , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 13.12;
                  --
                  if nvl(r_reg.codst_id,0) = 0 then
                     vn_fase := 13.13;
                     gv_resumo_log := 'O identificador do código da situação tributária não foi informado. Nota Fiscal (Modelo fiscal 06, 28 e 29) nro/série-data = '||
                                      r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 13.14;
                  --
                  if nvl(vn_tipocredpc_id,0) <> 0 and
                     nvl(r_reg.basecalccredpc_id,0) <> 0 and
                     pk_csf_efd_pc.fkg_base_calc_cred_pc_cd( en_id => nvl(r_reg.basecalccredpc_id,0)) in ('01','02','04','13') and
                     nvl(r_reg.codst_id,0) <> 0 then
                     --
                     vn_fase := 13.15;
                     -- A função irá retornar o valor do campo VL_BC_COFINS
                     vn_vl_bc_cofins := fkg_recup_vl_bc_cofins( en_seq_lancto      => vn_seq_lancto
                                                              , ev_cod_st          => vv_cod_st
                                                              , en_vl_bc_cofins_nc => nvl(r_reg.vl_bc_cofins_nc,0) );
                     --
                     vn_fase := 13.16;
                     --
                     vn_cd_tipocredpc:= null;
                     vn_cd_tipocredpc:= pk_csf_efd_pc.fkg_cd_tipo_cred_pc(vn_tipocredpc_id);
                     --
                     if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                       --
                       vn_fase := 13.17;
                       --
                       pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                         replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                         0/*replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')*/
                                           , en_tipocredpc_id         => vn_tipocredpc_id
                                           , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                           , en_tipo                  => r_reg.tipo
                                           , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                           , en_vl_aliq_cofins_quant  => 0 --nvl(r_reg.vl_aliq_cofins_quant,0)
                                           , en_vl_bc_cofins          => 0 --nvl(vn_vl_bc_cofins,0)
                                           , en_quant_bc_cofins       => 0 --nvl(r_reg.quant_bc_cofins,0)
                                           , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                           , en_codst_id              => r_reg.codst_id
                                           , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                           , en_vl_bc_cofins_cum      => 0 --nvl(r_reg.vl_bc_cofins_cum,0)
                                           , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                           , en_quant_bc_cofins_tot   => 0 ); --nvl(r_reg.quant_bc_cofins_tot,0) );
                       --                                         
                     else                                                             
                       --
                       vn_fase := 13.18;
                       --
                       pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                         replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                         replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')
                                           , en_tipocredpc_id         => vn_tipocredpc_id
                                           , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                           , en_tipo                  => r_reg.tipo
                                           , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                           , en_vl_aliq_cofins_quant  => nvl(r_reg.vl_aliq_cofins_quant,0)
                                           , en_vl_bc_cofins          => nvl(vn_vl_bc_cofins,0)
                                           , en_quant_bc_cofins       => nvl(r_reg.quant_bc_cofins,0)
                                           , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                           , en_codst_id              => r_reg.codst_id
                                           , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                           , en_vl_bc_cofins_cum      => nvl(r_reg.vl_bc_cofins_cum,0)
                                           , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                           , en_quant_bc_cofins_tot   => nvl(r_reg.quant_bc_cofins_tot,0) );
                       --                                           
                     end if;                                                           
                     --
                     -- Monta a memória de calculo --------------------------------
                     vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('C500');
                     vt_mem_calc_apur_cofins                       := null;
                     vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
                     vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
                     vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
                     vt_mem_calc_apur_cofins.ref_item_id           := null;
                     vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
                     vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
                     vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
                     vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
                     vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
                     --
                     if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                        vt_mem_calc_apur_cofins.aliq_prod             := 0;/*r_reg.vl_aliq_cofins_quant;*/
                     else
                        vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
                     end if;
                     --
                     vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
                     vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
                     pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
                     --
                  end if;
                  --
                  vn_fase := 13.19;
                  --
                  if nvl(vn_seq_lancto,0) = nvl(r_reg.seq_lancto,0) then
                     exit;
                  end if;
                  --
               end loop;
               --
            end if; -- não se enquadra nos código ST
            --
         end if; -- CFOP e CST indica que o documento gera escrituração
         --
/*         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('C500');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
         vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
         vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
         vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);*/
         --
      end loop; -- c_c500
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 14;
   --| Nota fiscal de serviço de transporte
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 15;
      --
      for r_reg in c_d100( en_empresa_id        => r_empresa.empresa_id
                         , en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe )
      loop
         --
         vn_fase := 16;
         -- verifica se a CFOP faz parte da escrituração: 0-não, 1-sim
         if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, r_reg.codst_id, null) = 1 then
            --
            vn_fase   := 16.1;
            vv_cod_st := pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
            vn_fase   := 16.2;
            --
            if vv_cod_st in ('50', '51', '52', '53', '54', '55', '56', '60', '61', '62', '63', '64', '65', '66') then
               --
               vn_fase       := 16.3;
               vn_seq_lancto := 0;
               --
               loop -- devido aos lançamentos
                  --
                  vn_fase       := 16.4;
                  vn_seq_lancto := nvl(vn_seq_lancto,0) + 1;
                  --
                  vn_fase    := 16.5;
                  vn_cd_cfop := pk_csf.fkg_cfop_cd( en_cfop_id => r_reg.cfop_id );
                  vn_fase    := 16.6;
                  --
                  vn_tipocredpc_id := pk_csf_efd_pc.fkg_relac_tipo_cred_pc_id( en_empresa_id        => r_empresa.empresa_id   -- identificador da empresa
                                                                             , en_tipoimp_id        => gn_tipoimp_id          -- identificador do tipo de imposto (cofins)
                                                                             , en_codst_id          => r_reg.codst_id         -- identificador do código ST
                                                                             , en_ncm_id            => 0                      -- identificador do código ncm
                                                                             , en_cfop_id           => r_reg.cfop_id          -- identificador do código cfop
                                                                             , en_ind_orig_cred     => 0                      -- indicador de crédito 0-oper.mercado interno, 1-oper.importação
                                                                             , en_vl_aliq           => r_reg.aliq_cofins      -- valor de alíquota dos impostos: identificar básica ou diferenciada
                                                                             , en_qt_bc_imp         => 0                      -- valor da base de cálculo - por unidade de produto
                                                                             , en_vl_bc_imp         => r_reg.vl_bc_cofins_tot -- valor da base de cálculo - por valor
                                                                             , en_seq_lancto        => vn_seq_lancto          -- sequência de lançamento
                                                                             , en_basecalccredpc_id => 0                      -- identificador da base de cálculo de crédito para Bloco F150
                                                                             , en_pessoa_id         => r_reg.pessoa_id );     -- identificador da pessoa do documento fiscal																			 
                  --
                  vn_fase := 16.7;
                  --
                  if nvl(vn_tipocredpc_id,0) = 0 then
                     vn_fase := 16.8;
                     gv_resumo_log := 'O identificador do tipo de crédito não foi encontrado. Conhecimento de transporte nro/série/subsérie-data = '||r_reg.nro_ct||
                                      '/'||r_reg.serie||'/'||r_reg.subserie||'-'||to_char(r_reg.dt_hr_emissao,'dd/mm/yyyy')||'. Parâmetros => Imposto: COFINS, Código '||
                                      'ST: '||vv_cod_st||', Código CFOP: '||vn_cd_cfop||', Indicador de Crédito: 0, Alíquota: '||
                                      ltrim(rtrim(to_char(r_reg.aliq_cofins,'99G999D00')))||', Base de cálculo (qtde): 0, Base de cálculo (valor): '||
                                      ltrim(rtrim(to_char(r_reg.vl_bc_cofins_tot,'9G999G999G999G990D00')))||', Valor do imposto: '||
                                      ltrim(rtrim(to_char(r_reg.vl_imp,'9G999G999G999G990D00')))||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 16.9;
                  --
                  if nvl(r_reg.basecalccredpc_id,0) = 0 then
                     vn_fase := 16.10;
                     gv_resumo_log := 'O identificador da base de cálculo de crédito não foi informado. Conhecimento de transporte nro/série/subsérie-data = '||
                                      r_reg.nro_ct||'/'||r_reg.serie||'/'||r_reg.subserie||'-'||to_char(r_reg.dt_hr_emissao,'dd/mm/yyyy')||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 16.11;
                  --
                  if nvl(r_reg.codst_id,0) = 0 then
                     vn_fase := 16.12;
                     gv_resumo_log := 'O identificador do código da situação tributária não foi informado. Conhecimento de transporte nro/série/subsérie-data = '||
                                      r_reg.nro_ct||'/'||r_reg.serie||'/'||r_reg.subserie||'-'||to_char(r_reg.dt_hr_emissao,'dd/mm/yyyy')||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 16.13;
                  --
                  if nvl(vn_tipocredpc_id,0) <> 0 and
                     nvl(r_reg.basecalccredpc_id,0) <> 0 and
                     nvl(r_reg.codst_id,0) <> 0 then
                     --
                     vn_fase := 16.14;
                     -- A função irá retornar o valor do campo VL_BC_COFINS
                     vn_vl_bc_cofins := fkg_recup_vl_bc_cofins( en_seq_lancto      => vn_seq_lancto
                                                              , ev_cod_st          => vv_cod_st
                                                              , en_vl_bc_cofins_nc => nvl(r_reg.vl_bc_cofins_nc,0) );
                     --
                     vn_fase := 16.15;
                     --
                     vn_cd_tipocredpc:= null;
                     vn_cd_tipocredpc:= pk_csf_efd_pc.fkg_cd_tipo_cred_pc(vn_tipocredpc_id);
                     --
                     if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                       --
                       vn_fase := 16.16;
                       --
                       pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                         replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                         0/*replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')*/
                                           , en_tipocredpc_id         => vn_tipocredpc_id
                                           , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                           , en_tipo                  => r_reg.tipo
                                           , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                           , en_vl_aliq_cofins_quant  => 0 --nvl(r_reg.vl_aliq_cofins_quant,0)
                                           , en_vl_bc_cofins          => 0 --nvl(vn_vl_bc_cofins,0)
                                           , en_quant_bc_cofins       => 0 --nvl(r_reg.quant_bc_cofins,0)
                                           , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                           , en_codst_id              => r_reg.codst_id
                                           , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                           , en_vl_bc_cofins_cum      => 0 --nvl(r_reg.vl_bc_cofins_cum,0)
                                           , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                           , en_quant_bc_cofins_tot   => 0 ); --nvl(r_reg.quant_bc_cofins_tot,0) );
                       --                                         
                     else
                       --  
                       vn_fase := 16.17;
                       --                                         
                       pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                         replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                         replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')
                                           , en_tipocredpc_id         => vn_tipocredpc_id
                                           , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                           , en_tipo                  => r_reg.tipo
                                           , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                           , en_vl_aliq_cofins_quant  => nvl(r_reg.vl_aliq_cofins_quant,0)
                                           , en_vl_bc_cofins          => nvl(vn_vl_bc_cofins,0)
                                           , en_quant_bc_cofins       => nvl(r_reg.quant_bc_cofins,0)
                                           , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                           , en_codst_id              => r_reg.codst_id
                                           , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                           , en_vl_bc_cofins_cum      => nvl(r_reg.vl_bc_cofins_cum,0)
                                           , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                           , en_quant_bc_cofins_tot   => nvl(r_reg.quant_bc_cofins_tot,0) ); 
                       --                                         
                     end if;                                                                                 
                     --
                     -- Monta a memória de calculo --------------------------------
                     vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('D100');
                     vt_mem_calc_apur_cofins                       := null;
                     vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
                     vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
                     vt_mem_calc_apur_cofins.referencia_id         := r_reg.conhectransp_id;
                     vt_mem_calc_apur_cofins.ref_item_id           := null;
                     vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
                     vt_mem_calc_apur_cofins.ident_doc             := 'Conhecimento de Transporte/Serie: '||r_reg.nro_ct||'/'||r_reg.serie;
                     vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
                     vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
                     vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
                     ---
                     if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                        vt_mem_calc_apur_cofins.aliq_prod             := 0;/*r_reg.vl_aliq_cofins_quant;*/
                     else
                        vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
                     end if;
                     ---                     
                     vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
                     vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
                     pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
                     --
                  end if;
                  --
                  vn_fase := 16.18;
                  --
                  if nvl(vn_seq_lancto,0) = nvl(r_reg.seq_lancto,0) then
                     exit;
                  end if;
                  --
               end loop;
               --
            end if; -- não se enquadra nos código ST
            --
         end if; -- CFOP e CST indica que o documento gera escrituração
         --
/*         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('D100');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.conhectransp_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Conhecimento de Transporte/Serie: '||r_reg.nro_ct||'/'||r_reg.serie;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
         vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
         vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
         vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);*/
         --
      end loop; -- c_d100
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 17;
   --| Nota fiscal de serviço de comunicação (código 21) e nota fiscal de serviço de telecomunicação (código 22)
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 18;
      --
      for r_reg in c_d500( en_empresa_id        => r_empresa.empresa_id
                         , en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe )
      loop
         --
         vn_fase := 19;
         -- verifica se a CFOP faz parte da escrituração: 0-não, 1-sim
         if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, r_reg.codst_id, null) = 1 then
            --
            vn_fase   := 19.1;
            vv_cod_st := pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
            vn_fase   := 19.2;
            --
            if vv_cod_st in ('50', '51', '52', '53', '54', '55', '56', '60', '61', '62', '63', '64', '65', '66') then
               --
               vn_fase       := 19.3;
               vn_seq_lancto := 0;
               --
               loop -- devido aos lançamentos
                  --
                  vn_fase       := 19.4;
                  vn_seq_lancto := nvl(vn_seq_lancto,0) + 1;
                  --
                  vn_fase    := 19.5;
                  vn_cd_cfop := pk_csf.fkg_cfop_cd( en_cfop_id => r_reg.cfop_id );
                  vn_fase    := 19.6;
                  --
                  vn_tipocredpc_id := pk_csf_efd_pc.fkg_relac_tipo_cred_pc_id( en_empresa_id        => r_empresa.empresa_id   -- identificador da empresa
                                                                             , en_tipoimp_id        => gn_tipoimp_id          -- identificador do tipo de imposto (cofins)
                                                                             , en_codst_id          => r_reg.codst_id         -- identificador do código ST
                                                                             , en_ncm_id            => 0                      -- identificador do código ncm
                                                                             , en_cfop_id           => r_reg.cfop_id          -- identificador do código cfop
                                                                             , en_ind_orig_cred     => 0                      -- indicador de crédito 0-oper.mercado interno, 1-oper.importação
                                                                             , en_vl_aliq           => r_reg.aliq_cofins      -- valor de alíquota dos impostos: identificar básica ou diferenciada
                                                                             , en_qt_bc_imp         => 0                      -- valor da base de cálculo - por unidade de produto
                                                                             , en_vl_bc_imp         => r_reg.vl_bc_cofins_tot -- valor da base de cálculo - por valor
                                                                             , en_seq_lancto        => vn_seq_lancto          -- sequência de lançamento
                                                                             , en_basecalccredpc_id => 0                      -- identificador da base de cálculo de crédito para Bloco F150
                                                                             , en_pessoa_id         => r_reg.pessoa_id );     -- identificador da pessoa do documento fiscal																			 
                  --
                  vn_fase := 19.7;
                  --
                  if nvl(vn_tipocredpc_id,0) = 0 then
                     vn_fase := 19.8;
                     gv_resumo_log := 'O identificador do tipo de crédito não foi encontrado. Nota Fiscal (Modelo fiscal 21 e 22) nro/série-data = '||r_reg.nro_nf||
                                      '/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'. Parâmetros => Imposto: COFINS, Código ST: '||vv_cod_st||', Código'||
                                      ' CFOP: '||vn_cd_cfop||', Indicador de Crédito: 0, Alíquota: '||ltrim(rtrim(to_char(r_reg.aliq_cofins,'99G999D00')))||' Base de '||
                                      'cálculo (qtde): 0, Base de cálculo (valor): '||ltrim(rtrim(to_char(r_reg.vl_bc_cofins_tot,'9G999G999G999G990D00')))||
                                      ' Valor do imposto: '||ltrim(rtrim(to_char(r_reg.vl_imp,'9G999G999G999G990D00')))||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 19.9;
                  --
                  if nvl(r_reg.basecalccredpc_id,0) = 0 then
                     vn_fase := 19.10;
                     gv_resumo_log := 'O identificador da base de cálculo de crédito não foi informado. Nota Fiscal (Modelo fiscal 21 e 22) nro/série-data = '||
                                      r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  elsif pk_csf_efd_pc.fkg_base_calc_cred_pc_cd( en_id => nvl(r_reg.basecalccredpc_id,0)) not in ('03','13') then
                        vn_fase := 19.11;
                        gv_resumo_log := 'O código da base de cálculo de crédito está incorreto. Nota Fiscal (Modelo fiscal 21 e 22) nro/série-data = '||
                                         r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'. Deveria ser: 03 ou 13.';
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                         , ev_mensagem       => gv_mensagem_log
                                                         , ev_resumo         => gv_resumo_log
                                                         , en_tipo_log       => erro_de_validacao
                                                         , en_referencia_id  => gn_referencia_id
                                                         , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 19.12;
                  --
                  if nvl(r_reg.codst_id,0) = 0 then
                     vn_fase := 19.13;
                     gv_resumo_log := 'O identificador do código da situação tributária não foi informado. Nota Fiscal (Modelo fiscal 21 e 22) nro/série-data = '||
                                      r_reg.nro_nf||'/'||r_reg.serie||'-'||to_char(r_reg.dt_emiss,'dd/mm/yyyy')||'.';
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_validacao
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 19.14;
                  --
                  if nvl(vn_tipocredpc_id,0) <> 0 and
                     nvl(r_reg.basecalccredpc_id,0) <> 0 and
                     pk_csf_efd_pc.fkg_base_calc_cred_pc_cd( en_id => nvl(r_reg.basecalccredpc_id,0)) in ('03','13') and
                     nvl(r_reg.codst_id,0) <> 0 then
                     --
                     vn_fase := 19.15;
                     -- A função irá retornar o valor do campo VL_BC_COFINS
                     vn_vl_bc_cofins := fkg_recup_vl_bc_cofins( en_seq_lancto      => vn_seq_lancto
                                                              , ev_cod_st          => vv_cod_st
                                                              , en_vl_bc_cofins_nc => nvl(r_reg.vl_bc_cofins_nc,0) );
                     --
                     vn_fase := 19.16;
                     --
                     vn_cd_tipocredpc:= null;
                     vn_cd_tipocredpc:= pk_csf_efd_pc.fkg_cd_tipo_cred_pc(vn_tipocredpc_id);
                     -- 
                     if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                       --
                       vn_fase := 19.17;
                       --
                       pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                         replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                         0/*replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')*/
                                           , en_tipocredpc_id         => vn_tipocredpc_id
                                           , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                           , en_tipo                  => r_reg.tipo
                                           , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                           , en_vl_aliq_cofins_quant  => 0 --nvl(r_reg.vl_aliq_cofins_quant,0)
                                           , en_vl_bc_cofins          => 0 --nvl(vn_vl_bc_cofins,0)
                                           , en_quant_bc_cofins       => 0 --nvl(r_reg.quant_bc_cofins,0)
                                           , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                           , en_codst_id              => r_reg.codst_id
                                           , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                           , en_vl_bc_cofins_cum      => 0 --nvl(r_reg.vl_bc_cofins_cum,0)
                                           , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                           , en_quant_bc_cofins_tot   => 0 ); --nvl(r_reg.quant_bc_cofins_tot,0) );
                       --
                     else  
                       --
                       vn_fase := 19.18;
                       --                                                                                       
                       pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                         replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                         replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')
                                           , en_tipocredpc_id         => vn_tipocredpc_id
                                           , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                           , en_tipo                  => r_reg.tipo
                                           , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                           , en_vl_aliq_cofins_quant  => nvl(r_reg.vl_aliq_cofins_quant,0)
                                           , en_vl_bc_cofins          => nvl(vn_vl_bc_cofins,0)
                                           , en_quant_bc_cofins       => nvl(r_reg.quant_bc_cofins,0)
                                           , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                           , en_codst_id              => r_reg.codst_id
                                           , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                           , en_vl_bc_cofins_cum      => nvl(r_reg.vl_bc_cofins_cum,0)
                                           , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                           , en_quant_bc_cofins_tot   => nvl(r_reg.quant_bc_cofins_tot,0) );
                       --                                         
                     end if;                                                            
                     --
                     -- Monta a memória de calculo --------------------------------
                     vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('D500');
                     vt_mem_calc_apur_cofins                       := null;
                     vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
                     vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
                     vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
                     vt_mem_calc_apur_cofins.ref_item_id           := null;
                     vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
                     vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
                     vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
                     vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
                     vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
                     ---
                     if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then  
                        vt_mem_calc_apur_cofins.aliq_prod             := 0;/*r_reg.vl_aliq_cofins_quant;*/
                     else
                        vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
                     end if;
                     ---
                     vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
                     vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
                     pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
                     --
                  end if;
                  --
                  vn_fase := 19.19;
                  --
                  if nvl(vn_seq_lancto,0) = nvl(r_reg.seq_lancto,0) then
                     exit;
                  end if;
                  --
               end loop;
               --
            end if; -- não se enquadra nos código ST
            --
         end if; -- CFOP e CST indica que o documento gera escrituração
         --
/*         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('D500');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
         vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
         vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
         vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);*/
         --
      end loop; -- c_d500
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 20;
   --| Demais documentos e operações geradoras de contribuição e créditos
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 21;
      --
      for r_reg in c_f100( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         vn_fase   := 22;
         vv_cod_st := pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
         vn_fase   := 22.1;
         --
         if vv_cod_st in ('50', '51', '52', '53', '54', '55', '56', '60', '61', '62', '63', '64', '65', '66') then
            --
            vn_fase       := 22.2;
            vn_seq_lancto := 0;
            --
            loop -- devido aos lançamentos
               --
               vn_fase       := 22.3;
               vn_seq_lancto := nvl(vn_seq_lancto,0) + 1;
               --
               vn_fase    := 22.4;
               vv_cod_ncm := pk_csf.fkg_cod_ncm_id( en_ncm_id => r_reg.ncm_id );
               vn_fase    := 22.5;
               --
               vn_tipocredpc_id := pk_csf_efd_pc.fkg_relac_tipo_cred_pc_id( en_empresa_id        => r_empresa.empresa_id      -- identificador da empresa
                                                                          , en_tipoimp_id        => gn_tipoimp_id             -- identificador do tipo de imposto (cofins)
                                                                          , en_codst_id          => r_reg.codst_id            -- identificador do código ST
                                                                          , en_ncm_id            => r_reg.ncm_id              -- identificador do código ncm
                                                                          , en_cfop_id           => 0                         -- identificador do código cfop
                                                                          , en_ind_orig_cred     => r_reg.dm_ind_orig_cred    -- indicador de crédito 0-oper.mercado interno, 1-oper.importação
                                                                          , en_vl_aliq           => r_reg.aliq_cofins         -- valor de alíquota dos impostos: identificar básica ou diferenciada
                                                                          , en_qt_bc_imp         => 0                         -- valor da base de cálculo - por unidade de produto
                                                                          , en_vl_bc_imp         => r_reg.vl_bc_cofins_tot    -- valor da base de cálculo - por valor
                                                                          , en_seq_lancto        => vn_seq_lancto          -- sequência de lançamento
                                                                          , en_basecalccredpc_id => 0                      -- identificador da base de cálculo de crédito para Bloco F150
                                                                          , en_pessoa_id         => r_reg.pessoa_id );     -- identificador da pessoa do documento fiscal																		  
               --
               vn_fase := 22.6;
               --
               if nvl(vn_tipocredpc_id,0) = 0 then
                  vn_fase := 22.7;
                  gv_resumo_log := 'O identificador do tipo de crédito não foi encontrado. Demais documentos e operações em = '||to_char(r_reg.dt_oper,'dd/mm/yyyy')||
                                   '. Parâmetros => Imposto: COFINS, Código ST: '||vv_cod_st||', Código NCM: '||vv_cod_ncm||', Indicador de Crédito: '||
                                   r_reg.dm_ind_orig_cred||', Alíquota: '||ltrim(rtrim(to_char(r_reg.aliq_cofins,'99G999D00')))||', Base de cálculo (qtde): 0'||
                                   ', Base de cálculo (valor): '||ltrim(rtrim(to_char(r_reg.vl_bc_cofins_tot,'9G999G999G999G990D00')))||', Valor do imposto: '||
                                   ltrim(rtrim(to_char(r_reg.vl_imp,'9G999G999G999G990D00')))||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 22.8;
               --
               if nvl(r_reg.basecalccredpc_id,0) = 0 then
                  vn_fase := 22.9;
                  gv_resumo_log := 'O identificador da base de cálculo de crédito não foi informado. Demais documentos e operações em = '||
                                   to_char(r_reg.dt_oper,'dd/mm/yyyy')||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 22.10;
               --
               if nvl(r_reg.codst_id,0) = 0 then
                  vn_fase := 22.11;
                  gv_resumo_log := 'O identificador do código da situação tributária não foi informado. Demais documentos e operações em = '||
                                   to_char(r_reg.dt_oper,'dd/mm/yyyy')||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 22.12;
               --
               if nvl(vn_tipocredpc_id,0) <> 0 and
                  nvl(r_reg.basecalccredpc_id,0) <> 0 and
                  nvl(r_reg.codst_id,0) <> 0 then
                  --
                  vn_fase := 22.13;
                  -- A função irá retornar o valor do campo VL_BC_COFINS
                  vn_vl_bc_cofins := fkg_recup_vl_bc_cofins( en_seq_lancto      => vn_seq_lancto
                                                           , ev_cod_st          => vv_cod_st
                                                           , en_vl_bc_cofins_nc => nvl(r_reg.vl_bc_cofins_nc,0) );
                  --
                  vn_fase := 22.14;
                  --
                  vn_cd_tipocredpc:= null;
                  vn_cd_tipocredpc:= pk_csf_efd_pc.fkg_cd_tipo_cred_pc(vn_tipocredpc_id);
                  --
                  if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                    --
                    vn_fase := 22.15;
                    --
                    pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                      replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                      0/*replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')*/
                                        , en_tipocredpc_id         => vn_tipocredpc_id
                                        , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                        , en_tipo                  => r_reg.tipo
                                        , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                        , en_vl_aliq_cofins_quant  => 0 --nvl(r_reg.vl_aliq_cofins_quant,0)
                                        , en_vl_bc_cofins          => 0 --nvl(vn_vl_bc_cofins,0)
                                        , en_quant_bc_cofins       => 0 --nvl(r_reg.quant_bc_cofins,0)
                                        , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                        , en_codst_id              => r_reg.codst_id
                                        , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                        , en_vl_bc_cofins_cum      => 0 --nvl(r_reg.vl_bc_cofins_cum,0)
                                        , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                        , en_quant_bc_cofins_tot   => 0 ); --nvl(r_reg.quant_bc_cofins_tot,0) );
                    --                                      
                  else
                    --
                    vn_fase := 22.16;
                    --                                       
                    pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                      replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                      replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')
                                        , en_tipocredpc_id         => vn_tipocredpc_id
                                        , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                        , en_tipo                  => r_reg.tipo
                                        , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                        , en_vl_aliq_cofins_quant  => nvl(r_reg.vl_aliq_cofins_quant,0)
                                        , en_vl_bc_cofins          => nvl(vn_vl_bc_cofins,0)
                                        , en_quant_bc_cofins       => nvl(r_reg.quant_bc_cofins,0)
                                        , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                        , en_codst_id              => r_reg.codst_id
                                        , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                        , en_vl_bc_cofins_cum      => nvl(r_reg.vl_bc_cofins_cum,0)
                                        , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                        , en_quant_bc_cofins_tot   => nvl(r_reg.quant_bc_cofins_tot,0) ); 
                    --                                        
                  end if;                                                                           
                  --
                  -- Monta a memória de calculo --------------------------------
                  vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F100');
                  vt_mem_calc_apur_cofins                       := null;
                  vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
                  vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
                  vt_mem_calc_apur_cofins.referencia_id         := r_reg.demdocopergercc_id;
                  vt_mem_calc_apur_cofins.ref_item_id           := null;
                  vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
                  vt_mem_calc_apur_cofins.ident_doc             := 'Demais Documentos ID: '||r_reg.demdocopergercc_id;
                  vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
                  vt_mem_calc_apur_cofins.vl_base_calc          := r_reg.vl_bc_cofins;
                  vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
                  ---
                  if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then 
                     vt_mem_calc_apur_cofins.aliq_prod             := 0;/*r_reg.vl_aliq_cofins_quant;*/
                  else
                     vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
                  end if;
                  ---                  
                  vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp;
                  vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
                  pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
                  --
               end if;
               --
               vn_fase := 22.17;
               --
               if nvl(vn_seq_lancto,0) = nvl(r_reg.seq_lancto,0) then
                  exit;
               end if;
               --
            end loop;
            --
         end if; -- não se enquadra nos código ST
         --
/*         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F100');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.demdocopergercc_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Demais Documentos ID: '||r_reg.demdocopergercc_id;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := r_reg.vl_bc_cofins;
         vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
         vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
         vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp;
         vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);*/
         --
      end loop; -- c_f100
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 23;
   --| Bens incorporados ao ativo imobilizado - Depreciação/Amortização
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 24;
      --
      for r_reg in c_f120( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         vn_fase   := 25;
         vv_cod_st := pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
         vn_fase   := 25.1;
         --
         if vv_cod_st in ('50', '51', '52', '53', '54', '55', '56', '60', '61', '62', '63', '64', '65', '66') then
            --
            vn_fase       := 25.2;
            vn_seq_lancto := 0;
            --
            loop -- devido aos lançamentos
               --
               vn_fase       := 25.3;
               vn_seq_lancto := nvl(vn_seq_lancto,0) + 1;
               --
               vn_fase := 25.4;
               --
               vn_tipocredpc_id := pk_csf_efd_pc.fkg_relac_tipo_cred_pc_id( en_empresa_id        => r_empresa.empresa_id      -- identificador da empresa
                                                                          , en_tipoimp_id        => gn_tipoimp_id             -- identificador do tipo de imposto (cofins)
                                                                          , en_codst_id          => r_reg.codst_id            -- identificador do código ST
                                                                          , en_ncm_id            => 0                         -- identificador do código ncm
                                                                          , en_cfop_id           => 0                         -- identificador do código cfop
                                                                          , en_ind_orig_cred     => r_reg.dm_ind_orig_cred    -- indicador de crédito 0-oper.mercado interno, 1-oper.importação
                                                                          , en_vl_aliq           => r_reg.aliq_cofins         -- valor de alíquota dos impostos: identificar básica ou diferenciada
                                                                          , en_qt_bc_imp         => 0                         -- valor da base de cálculo - por unidade de produto
                                                                          , en_vl_bc_imp         => r_reg.vl_bc_cofins_tot    -- valor da base de cálculo - por valor
                                                                          , en_seq_lancto        => vn_seq_lancto             -- sequência de lançamento
                                                                          , en_basecalccredpc_id => 0                         -- identificador da base de cálculo de crédito para Bloco F150
                                                                          , en_pessoa_id         => 0 );                      -- identificador da pessoa do documento fiscal																		  
               --
               vn_fase := 25.5;
               --
               if nvl(vn_tipocredpc_id,0) = 0 then
                  vn_fase := 25.6;
                  gv_resumo_log := 'O identificador do tipo de crédito não foi encontrado. Bens incorporados ao ativo imobilizado - depreciação/amortização em = '||
                                   lpad(r_reg.mes_ref,2,'0')||'/'||r_reg.ano_ref||'. Parâmetros => Imposto: COFINS, Código ST: '||vv_cod_st||', Indicador de Crédito: '||
                                   r_reg.dm_ind_orig_cred||', Alíquota: '||ltrim(rtrim(to_char(r_reg.aliq_cofins,'99G999D00')))||', Base de cálculo (qtde): 0, '||
                                   'Base de cálculo (valor): '||ltrim(rtrim(to_char(r_reg.vl_bc_cofins_tot,'9G999G999G999G990D00')))||', Valor do imposto: '||
                                   ltrim(rtrim(to_char(r_reg.vl_imp,'9G999G999G999G990D00')))||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 25.7;
               --
               if nvl(r_reg.basecalccredpc_id,0) = 0 then
                  vn_fase := 25.8;
                  gv_resumo_log := 'O identificador da base de cálculo de crédito não foi informado. Bens incorporados ao ativo imobilizado - depreciação/'||
                                   'amortização em = '||lpad(r_reg.mes_ref,2,'0')||'/'||r_reg.ano_ref||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 25.9;
               --
               if nvl(r_reg.codst_id,0) = 0 then
                  vn_fase := 25.10;
                  gv_resumo_log := 'O identificador do código da situação tributária não foi informado. Bens incorporados ao ativo imobilizado - depreciação/'||
                                   'amortização em = '||lpad(r_reg.mes_ref,2,'0')||'/'||r_reg.ano_ref||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 25.11;
               --
               if nvl(vn_tipocredpc_id,0) <> 0 and
                  nvl(r_reg.basecalccredpc_id,0) <> 0 and
                  nvl(r_reg.codst_id,0) <> 0 then
                  --
                  vn_fase := 25.12;
                  -- A função irá retornar o valor do campo VL_BC_COFINS
                  vn_vl_bc_cofins := fkg_recup_vl_bc_cofins( en_seq_lancto      => vn_seq_lancto
                                                           , ev_cod_st          => vv_cod_st
                                                           , en_vl_bc_cofins_nc => nvl(r_reg.vl_bc_cofins_nc,0) );
                  --
                  vn_fase := 25.13;
                  vn_cd_tipocredpc:= null;
                  vn_cd_tipocredpc:= pk_csf_efd_pc.fkg_cd_tipo_cred_pc(vn_tipocredpc_id);
                  --
                  if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                    --
                    vn_fase := 25.14;
                    --
                    pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                      replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                      0/*replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')*/
                                        , en_tipocredpc_id         => vn_tipocredpc_id
                                        , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                        , en_tipo                  => r_reg.tipo
                                        , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                        , en_vl_aliq_cofins_quant  => 0 --nvl(r_reg.vl_aliq_cofins_quant,0)
                                        , en_vl_bc_cofins          => 0 --nvl(vn_vl_bc_cofins,0)
                                        , en_quant_bc_cofins       => 0 --nvl(r_reg.quant_bc_cofins,0)
                                        , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                        , en_codst_id              => r_reg.codst_id
                                        , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                        , en_vl_bc_cofins_cum      => 0 --nvl(r_reg.vl_bc_cofins_cum,0)
                                        , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                        , en_quant_bc_cofins_tot   => 0 ); --nvl(r_reg.quant_bc_cofins_tot,0) );
                    --                                      
                  else
                    --
                    vn_fase := 25.16;
                    --                    
                    pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                      replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                      replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')
                                        , en_tipocredpc_id         => vn_tipocredpc_id
                                        , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                        , en_tipo                  => r_reg.tipo
                                        , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                        , en_vl_aliq_cofins_quant  => nvl(r_reg.vl_aliq_cofins_quant,0)
                                        , en_vl_bc_cofins          => nvl(vn_vl_bc_cofins,0)
                                        , en_quant_bc_cofins       => nvl(r_reg.quant_bc_cofins,0)
                                        , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                        , en_codst_id              => r_reg.codst_id
                                        , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                        , en_vl_bc_cofins_cum      => nvl(r_reg.vl_bc_cofins_cum,0)
                                        , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                        , en_quant_bc_cofins_tot   => nvl(r_reg.quant_bc_cofins_tot,0) );
                    --                                      
                  end if;
                  --
                  -- Monta a memória de calculo --------------------------------
                  vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F120');
                  vt_mem_calc_apur_cofins                       := null;
                  vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
                  vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
                  vt_mem_calc_apur_cofins.referencia_id         := r_reg.bemativimobopercredpc_id;
                  vt_mem_calc_apur_cofins.ref_item_id           := null;
                  vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
                  vt_mem_calc_apur_cofins.ident_doc             := 'Bem Ativo Imobilizado ID: '||r_reg.bemativimobopercredpc_id;
                  vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
                  vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_bc_cofins_tot else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
                  vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
                  ---
                  if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                     vt_mem_calc_apur_cofins.aliq_prod             := 0;/*r_reg.vl_aliq_cofins_quant;*/
                  else
                     vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
                  end if;
                  ---                  
                  vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
                  vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
                  pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
                  --
               end if;
               --
               vn_fase := 25.17;
               --
               if nvl(vn_seq_lancto,0) = nvl(r_reg.seq_lancto,0) then
                  exit;
               end if;
               --
            end loop;
            --
         end if; -- não se enquadra nos código ST
         --
/*         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F120');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.bemativimobopercredpc_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Bem Ativo Imobilizado ID: '||r_reg.bemativimobopercredpc_id;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_bc_cofins_tot else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
         vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
         vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
         vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);*/
         --
      end loop; -- c_f120
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 26;
   --| Bens incorporados ao ativo imobilizado - Aquisição/Contribuição
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 27;
      --
      for r_reg in c_f130( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         vn_fase   := 28;
         vv_cod_st := pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
         vn_fase   := 28.1;
         --
         if vv_cod_st in ('50', '51', '52', '53', '54', '55', '56', '60', '61', '62', '63', '64', '65', '66') then
            --
            vn_fase       := 28.2;
            vn_seq_lancto := 0;
            --
            loop -- devido aos lançamentos
               --
               vn_fase       := 28.3;
               vn_seq_lancto := nvl(vn_seq_lancto,0) + 1;
               --
               vn_fase := 28.4;
               --
               vn_tipocredpc_id := pk_csf_efd_pc.fkg_relac_tipo_cred_pc_id( en_empresa_id        => r_empresa.empresa_id   -- identificador da empresa
                                                                          , en_tipoimp_id        => gn_tipoimp_id          -- identificador do tipo de imposto (cofins)
                                                                          , en_codst_id          => r_reg.codst_id         -- identificador do código ST
                                                                          , en_ncm_id            => 0                      -- identificador do código ncm
                                                                          , en_cfop_id           => 0                      -- identificador do código cfop
                                                                          , en_ind_orig_cred     => r_reg.dm_ind_orig_cred -- indicador de crédito 0-oper.mercado interno, 1-oper.importação
                                                                          , en_vl_aliq           => r_reg.aliq_cofins      -- valor de alíquota dos impostos: identificar básica ou diferenciada
                                                                          , en_qt_bc_imp         => 0                      -- valor da base de cálculo - por unidade de produto
                                                                          , en_vl_bc_imp         => r_reg.vl_bc_cofins_tot -- valor da base de cálculo - por valor
                                                                          , en_seq_lancto        => vn_seq_lancto          -- sequência de lançamento
                                                                          , en_basecalccredpc_id => 0                      -- identificador da base de cálculo de crédito para Bloco F150
                                                                          , en_pessoa_id         => 0 );                   -- identificador da pessoa do documento fiscal																		  
               --
               vn_fase := 28.5;
               --
               if nvl(vn_tipocredpc_id,0) = 0 then
                  vn_fase := 28.6;
                  gv_resumo_log := 'O identificador do tipo de crédito não foi encontrado. Bens incorporados ao ativo imobilizado - Aquisição/Contribuição em = '||
                                   lpad(r_reg.mes_ref,2,'0')||'/'||r_reg.ano_ref||'. Parâmetros => Imposto: COFINS, Código ST: '||vv_cod_st||
                                   ', Indicador de Crédito: '||r_reg.dm_ind_orig_cred||', Alíquota: '||ltrim(rtrim(to_char(r_reg.aliq_cofins,'99G999D00')))||
                                   ', Base de cálculo (qtde): 0, Base de cálculo (valor): '||ltrim(rtrim(to_char(r_reg.vl_bc_cofins_tot,'9G999G999G999G990D00')))||
                                   ' Valor do imposto: '||ltrim(rtrim(to_char(r_reg.vl_imp,'9G999G999G999G990D00')))||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 28.7;
               --
               if nvl(r_reg.basecalccredpc_id,0) = 0 then
                  vn_fase := 28.8;
                  gv_resumo_log := 'O identificador da base de cálculo de crédito não foi informado. Bens incorporados ao ativo imobilizado - Aquisição/'||
                                   'Contribuição em = '||lpad(r_reg.mes_ref,2,'0')||'/'||r_reg.ano_ref||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 28.9;
               --
               if nvl(r_reg.codst_id,0) = 0 then
                  vn_fase := 28.10;
                  gv_resumo_log := 'O identificador do código da situação tributária não foi informado. Bens incorporados ao ativo imobilizado - Aquisição/'||
                                   'Contribuição em = '||lpad(r_reg.mes_ref,2,'0')||'/'||r_reg.ano_ref||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 28.11;
               --
               if nvl(vn_tipocredpc_id,0) <> 0 and
                  nvl(r_reg.basecalccredpc_id,0) <> 0 and
                  nvl(r_reg.codst_id,0) <> 0 then
                  --
                  vn_fase := 28.12;
                  -- A função irá retornar o valor do campo VL_BC_COFINS
                  vn_vl_bc_cofins := fkg_recup_vl_bc_cofins( en_seq_lancto      => vn_seq_lancto
                                                           , ev_cod_st          => vv_cod_st
                                                           , en_vl_bc_cofins_nc => nvl(r_reg.vl_bc_cofins_nc,0) );
                  --
                  vn_fase := 28.13;
                  --
                  vn_cd_tipocredpc:= null;
                  vn_cd_tipocredpc:= pk_csf_efd_pc.fkg_cd_tipo_cred_pc(vn_tipocredpc_id);
                  --
                  if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                    --
                    vn_fase := 28.14;
                    --
                    pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                      replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                      0/*replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')*/
                                        , en_tipocredpc_id         => vn_tipocredpc_id
                                        , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                        , en_tipo                  => r_reg.tipo
                                        , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                        , en_vl_aliq_cofins_quant  => 0 --nvl(r_reg.vl_aliq_cofins_quant,0)
                                        , en_vl_bc_cofins          => 0 --nvl(vn_vl_bc_cofins,0)
                                        , en_quant_bc_cofins       => 0 --nvl(r_reg.quant_bc_cofins,0)
                                        , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                        , en_codst_id              => r_reg.codst_id
                                        , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                        , en_vl_bc_cofins_cum      => 0 --nvl(r_reg.vl_bc_cofins_cum,0)
                                        , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                        , en_quant_bc_cofins_tot   => 0 ); -- nvl(r_reg.quant_bc_cofins_tot,0) );
                    --                                      
                  else
                    --
                    vn_fase := 28.15;
                    --                                        
                    pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                      replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                      replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')
                                        , en_tipocredpc_id         => vn_tipocredpc_id
                                        , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                        , en_tipo                  => r_reg.tipo
                                        , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                        , en_vl_aliq_cofins_quant  => nvl(r_reg.vl_aliq_cofins_quant,0)
                                        , en_vl_bc_cofins          => nvl(vn_vl_bc_cofins,0)
                                        , en_quant_bc_cofins       => nvl(r_reg.quant_bc_cofins,0)
                                        , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                        , en_codst_id              => r_reg.codst_id
                                        , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                        , en_vl_bc_cofins_cum      => nvl(r_reg.vl_bc_cofins_cum,0)
                                        , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                        , en_quant_bc_cofins_tot   => nvl(r_reg.quant_bc_cofins_tot,0) );   
                    --                                         
                  end if;                                                                         
                  --
                  -- Monta a memória de calculo --------------------------------
                  vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F130');
                  vt_mem_calc_apur_cofins                       := null;
                  vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
                  vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
                  vt_mem_calc_apur_cofins.referencia_id         := r_reg.bemativimobopercredpc_id;
                  vt_mem_calc_apur_cofins.ref_item_id           := null;
                  vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
                  vt_mem_calc_apur_cofins.ident_doc             := 'Bem Ativo Imobilizado ID: '||r_reg.bemativimobopercredpc_id;
                  vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
                  vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
                  vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
                  ---
                  if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then  
                     vt_mem_calc_apur_cofins.aliq_prod             := 0;/*r_reg.vl_aliq_cofins_quant;*/
                  else
                     vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
                  end if;
                  ---
                  vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
                  vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
                  pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
                  --
               end if;
               --
               vn_fase := 28.16;
               --
               if nvl(vn_seq_lancto,0) = nvl(r_reg.seq_lancto,0) then
                  exit;
               end if;
               --
            end loop;
            --
         end if; -- não se enquadra nos código ST
         --
/*         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F130');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.bemativimobopercredpc_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Bem Ativo Imobilizado ID: '||r_reg.bemativimobopercredpc_id;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
         vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
         vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
         vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);*/
         --
      end loop; -- c_f130
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 29;
   --| Crédito presumido sobre estoque de abertura
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 30;
      --
      for r_reg in c_f150( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         vn_fase   := 31;
         vv_cod_st := pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
         vn_fase   := 31.1;
         --
         if vv_cod_st in ('50', '51', '52', '53', '54', '55', '56', '60', '61', '62', '63', '64', '65', '66') then
            --
            vn_fase       := 31.2;
            vn_seq_lancto := 0;
            --
            loop -- devido aos lançamentos
               --
               vn_fase       := 31.3;
               vn_seq_lancto := nvl(vn_seq_lancto,0) + 1;
               --
               vn_fase := 31.4;
               --
               vn_tipocredpc_id := pk_csf_efd_pc.fkg_relac_tipo_cred_pc_id( en_empresa_id        => r_empresa.empresa_id              -- identificador da empresa
                                                                          , en_tipoimp_id        => gn_tipoimp_id                     -- identificador do tipo de imposto (cofins)
                                                                          , en_codst_id          => r_reg.codst_id                    -- identificador do código ST
                                                                          , en_ncm_id            => 0                                 -- identificador do código ncm
                                                                          , en_cfop_id           => 0                                 -- identificador do código cfop
                                                                          , en_ind_orig_cred     => 0                                 -- indicador de crédito 0-oper.mercado interno, 1-oper.importação
                                                                          , en_vl_aliq           => r_reg.aliq_cofins                 -- valor de alíquota dos impostos: identificar básica ou diferenciada
                                                                          , en_qt_bc_imp         => 0                                 -- valor da base de cálculo - por unidade de produto
                                                                          , en_vl_bc_imp         => r_reg.vl_bc_cofins_tot            -- valor da base de cálculo - por valor
                                                                          , en_seq_lancto        => vn_seq_lancto                     -- sequência de lançamento
                                                                          , en_basecalccredpc_id => nvl(r_reg.basecalccredpc_id,0)    -- identificador da base de cálculo de crédito para Bloco F150
                                                                          , en_pessoa_id         => 0 );                              -- identificador da pessoa do documento fiscal																		  
               --
               vn_fase := 31.5;
               --
               if nvl(vn_tipocredpc_id,0) = 0 then
                  vn_fase := 31.6;
                  gv_resumo_log := 'O identificador do tipo de crédito não foi encontrado. Crédito presumido sobre estoque de abertura em = '||
                                   lpad(r_reg.mes_ref,2,'0')||'/'||r_reg.ano_ref||'. Parâmetros => Imposto: COFINS, Código ST: '||vv_cod_st||' Indicador de Crédito:'||
                                   ' 0, Alíquota: '||ltrim(rtrim(to_char(r_reg.aliq_cofins,'99G999D00')))||' Base de cálculo (qtde): 0, Base de cálculo (valor): '||
                                   ltrim(rtrim(to_char(r_reg.vl_bc_cofins_tot,'9G999G999G999G990D00')))||', Valor do imposto: '||
                                   ltrim(rtrim(to_char(r_reg.vl_imp,'9G999G999G999G990D00')))||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 31.7;
               --
               if nvl(r_reg.basecalccredpc_id,0) = 0 then
                  vn_fase := 31.8;
                  gv_resumo_log := 'O identificador da base de cálculo de crédito não foi informado. Crédito presumido sobre estoque de abertura em = '||
                                   lpad(r_reg.mes_ref,2,'0')||'/'||r_reg.ano_ref||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 31.9;
               --
               if nvl(r_reg.codst_id,0) = 0 then
                  vn_fase := 31.10;
                  gv_resumo_log := 'O identificador do código da situação tributária não foi informado. Crédito presumido sobre estoque de abertura em = '||
                                   lpad(r_reg.mes_ref,2,'0')||'/'||r_reg.ano_ref||'.';
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_validacao
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
               end if;
               --
               vn_fase := 31.11;
               --
               if nvl(vn_tipocredpc_id,0) <> 0 and
                  nvl(r_reg.basecalccredpc_id,0) <> 0 and
                  nvl(r_reg.codst_id,0) <> 0 then
                  --
                  vn_fase := 31.12;
                  -- A função irá retornar o valor do campo VL_BC_COFINS
                  vn_vl_bc_cofins := fkg_recup_vl_bc_cofins( en_seq_lancto      => vn_seq_lancto
                                                           , ev_cod_st          => vv_cod_st
                                                           , en_vl_bc_cofins_nc => nvl(r_reg.vl_bc_cofins_nc,0) );
                  --
                  vn_fase := 31.13;
                  --
                  vn_cd_tipocredpc:= null;
                  vn_cd_tipocredpc:= pk_csf_efd_pc.fkg_cd_tipo_cred_pc(vn_tipocredpc_id);
                  --
                  if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                    --
                    vn_fase := 31.14;
                    --
                    pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                      replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                      0/*replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')*/
                                        , en_tipocredpc_id         => vn_tipocredpc_id
                                        , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                        , en_tipo                  => r_reg.tipo
                                        , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                        , en_vl_aliq_cofins_quant  => 0 --nvl(r_reg.vl_aliq_cofins_quant,0)
                                        , en_vl_bc_cofins          => 0 --nvl(vn_vl_bc_cofins,0)
                                        , en_quant_bc_cofins       => 0 --nvl(r_reg.quant_bc_cofins,0)
                                        , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                        , en_codst_id              => r_reg.codst_id
                                        , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                        , en_vl_bc_cofins_cum      => 0 --nvl(r_reg.vl_bc_cofins_cum,0)
                                        , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                        , en_quant_bc_cofins_tot   => 0 ); --nvl(r_reg.quant_bc_cofins_tot,0) );
                    --                                      
                  else
                    --
                    vn_fase := 31.15;
                    --                    
                    pkb_monta_vetor_m500( en_ch_cc_tpcr_or_tp_aliq => vn_tipocredpc_id||r_reg.dm_ind_cred_ori||r_reg.tipo||
                                                                      replace(replace(nvl(r_reg.aliq_cofins,0),',',''),'.','')||
                                                                      replace(replace(nvl(r_reg.vl_aliq_cofins_quant,0),',',''),'.','')
                                        , en_tipocredpc_id         => vn_tipocredpc_id
                                        , en_dm_ind_cred_ori       => r_reg.dm_ind_cred_ori
                                        , en_tipo                  => r_reg.tipo
                                        , en_aliq_cofins           => nvl(r_reg.aliq_cofins,0)
                                        , en_vl_aliq_cofins_quant  => nvl(r_reg.vl_aliq_cofins_quant,0)
                                        , en_vl_bc_cofins          => nvl(vn_vl_bc_cofins,0)
                                        , en_quant_bc_cofins       => nvl(r_reg.quant_bc_cofins,0)
                                        , en_basecalccredpc_id     => r_reg.basecalccredpc_id
                                        , en_codst_id              => r_reg.codst_id
                                        , en_vl_bc_cofins_tot      => nvl(r_reg.vl_bc_cofins_tot,0)
                                        , en_vl_bc_cofins_cum      => nvl(r_reg.vl_bc_cofins_cum,0)
                                        , en_vl_bc_cofins_nc       => nvl(r_reg.vl_bc_cofins_nc,0)
                                        , en_quant_bc_cofins_tot   => nvl(r_reg.quant_bc_cofins_tot,0) ); 
                    --                                          
                  end if;                                                                        
                  --
                  -- Monta a memória de calculo --------------------------------
                  vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F150');
                  vt_mem_calc_apur_cofins                       := null;
                  vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
                  vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
                  vt_mem_calc_apur_cofins.referencia_id         := r_reg.credpresestabertpc_id;
                  vt_mem_calc_apur_cofins.ref_item_id           := null;
                  vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
                  vt_mem_calc_apur_cofins.ident_doc             := 'Crédito Presumido Estoque ID: '||r_reg.credpresestabertpc_id;
                  vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
                  vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
                  vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
                  ---
                  if gn_dm_ind_apro_cred = 1 and vn_cd_tipocredpc ='201' then
                     vt_mem_calc_apur_cofins.aliq_prod             := 0;/*r_reg.vl_aliq_cofins_quant;*/
                  else
                     vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
                  end if;
                  ---                  
                  vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
                  vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
                  pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
                  --
               end if;
               --
               vn_fase := 31.16;
               --
               if nvl(vn_seq_lancto,0) = nvl(r_reg.seq_lancto,0) then
                  exit;
               end if;
               --
            end loop;
            --
         end if; -- não se enquadra nos código ST
         --
/*         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F150');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.credpresestabertpc_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Crédito Presumido Estoque ID: '||r_reg.credpresestabertpc_id;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := r_reg.aliq_cofins;
         vt_mem_calc_apur_cofins.aliq_prod             := r_reg.vl_aliq_cofins_quant;
         vt_mem_calc_apur_cofins.vl_imp_trib           := r_reg.vl_imp_trib;
         vt_mem_calc_apur_cofins.reg_controlador       := 'M500';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);*/
         --
      end loop; -- c_f150
      --
   end loop; -- cursor c_empresa
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_monta_dados_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_MONTA_DADOS_M500;
----------------------------------------------------------------------
--| Procedimento recupera o identificador do tipo de imposto - COFINS
----------------------------------------------------------------------
PROCEDURE PKB_RECUPERA_TPIMP IS
   --
   cursor c_imp is
      select ti.id
        from tipo_imposto ti
       where ti.cd = 5;
   --
BEGIN
   --
   gn_tipoimp_id := 0;
   --
   open c_imp;
   fetch c_imp into gn_tipoimp_id;
   close c_imp;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_recupera_tpimp. Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_RECUPERA_TPIMP;
----------------------------------------------------------
--| Procedimento recupera os dados da abertura de empresa
----------------------------------------------------------
PROCEDURE PKB_DADOS_ABERT_EMPR( EN_EMPRESA_ID IN NUMBER
                              , ED_DT_INICIAL IN DATE
                              , ED_DT_FINAL   IN DATE ) IS
   --
   vn_fase                    number := 0;
   vn_rec_bru_ncum_trib_mi    number := 0;
   vn_rec_bru_ncum_nt_mi      number := 0;
   vn_rec_bru_ncum_exp        number := 0;
   vn_rec_bru_cum             number := 0;
   vn_rec_bru_total           number := 0;
   vn_soma_recbru_nc_trntr    number := 0;
   vn_soma_recbru_nc_trexp    number := 0;
   vn_soma_recbru_nc_ntrexp   number := 0;
   vn_soma_recbru_nc_trntrexp number := 0;
   --
   cursor c_abert_empr is
      select ae.id
           , ap.dm_cod_inc_trib
           , ap.dm_ind_apro_cred
           , ap.dm_ind_reg_cum
           , ar.rec_bru_ncum_trib_mi
           , ar.rec_bru_ncum_nt_mi
           , ar.rec_bru_ncum_exp
           , ar.rec_bru_cum
           , ar.rec_bru_total
           , ae.dm_ind_nat_pj
           , ae.dm_ind_ativ
        from abertura_efd_pc         ae
           , abertura_efd_pc_receita ar
           , abertura_efd_pc_regime  ap
       where ae.empresa_id       = en_empresa_id
         and ae.dt_ini     between ed_dt_inicial and ed_dt_final
         and ae.dt_fin     between ed_dt_inicial and ed_dt_final
         and ae.dm_situacao not in (1,3,4,5,7) -- 1-erro de validação, 3-gerado arquivo, 4-Erro na geração do arquivo, 5-Erro de cálculo, 7-Em geração
         and ar.aberturaefdpc_id = ae.id
         and ap.aberturaefdpc_id = ae.id;
   --
BEGIN
   --
   vn_fase := 1;
   --| Comentários:
   -- 1) ABERTURA_EFD_PC_REGIME.DM_COD_INC_TRIB - Código indicador da incidência tributária no período, utilizado na rotina PKB_MONTA_DADOS_M500:
   -- 1-Escrituração de operações com incidência exclusivamente no regime não-cumulativo
   -- 2-Escrituração de operações com incidência exclusivamente no regime cumulativo
   -- 3-Escrituração de operações com incidência nos regimes nãocumulativo e cumulativo
   --
   -- 2) ABERTURA_EFD_PC_REGIME.DM_IND_APRO_CRED - Código indicador de método de apropriação de créditos comuns, no caso de incidência no regime
   --    não-cumulativo (COD_INC_TRIB = 1 ou 3), utilizado na rotina PKB_MONTA_DADOS_M500:
   -- 1-Método de Apropriação Direta
   -- 2-Método de Rateio Proporcional (Receita Bruta)
   --
   -- 3) ABERTURA_EFD_PC_RECEITA.REC_BRU_NCUM_TRIB_MI - Receita Bruta Não-Cumulativa - Tributada no Mercado Interno,
   --    utilizada nesta rotina para calcular outros valores.
   --
   -- 4) ABERTURA_EFD_PC_RECEITA.REC_BRU_NCUM_NT_MI - Receita Bruta Não-Cumulativa - Não Tributada no Mercado Interno (Vendas com suspensão,
   --    alíquota zero, isenção e sem incidência das contribuições), utilizada nesta rotina para calcular outros valores.
   --
   -- 5) ABERTURA_EFD_PC_RECEITA.REC_BRU_NCUM_EXP - Receita Bruta Não-Cumulativa - Exportação, utilizada nesta rotina para calcular outros valores.
   --
   -- 6) ABERTURA_EFD_PC.DM_IND_NAT_PJ - Indicador da natureza da pessoa jurídica
   -- 00-Sociedade empresária em geral
   -- 01-Sociedade cooperativa
   -- 02-Entidade sujeita ao PIS/PASEP exclusivamente com base na Folha de Salários
   --
   gn_aberturaefdpc_id       := 0;
   gn_dm_cod_inc_trib        := 0;
   gn_dm_ind_apro_cred       := 0;
   gn_dm_ind_reg_cum         := 0;
   gn_recbru_nc_trntr_tri    := 0;
   gn_recbru_nc_trntr_ntr    := 0;
   gn_recbru_nc_trexp_tri    := 0;
   gn_recbru_nc_trexp_exp    := 0;
   gn_recbru_nc_ntrexp_ntr   := 0;
   gn_recbru_nc_ntrexp_exp   := 0;
   gn_recbru_nc_trntrexp_tri := 0;
   gn_recbru_nc_trntrexp_ntr := 0;
   gn_recbru_nc_trntrexp_exp := 0;
   gn_recbru_cum             := 0;
   gv_dm_ind_nat_pj          := 0;
   gn_dm_ind_ativ            := 0;
   --
   vn_fase := 2;
   --
   open c_abert_empr;
   fetch c_abert_empr into gn_aberturaefdpc_id
                         , gn_dm_cod_inc_trib
                         , gn_dm_ind_apro_cred
                         , gn_dm_ind_reg_cum
                         , vn_rec_bru_ncum_trib_mi
                         , vn_rec_bru_ncum_nt_mi
                         , vn_rec_bru_ncum_exp
                         , vn_rec_bru_cum
                         , vn_rec_bru_total
                         , gv_dm_ind_nat_pj
                         , gn_dm_ind_ativ;
   close c_abert_empr;
   --
   vn_fase := 3;
   --
   if nvl(gn_aberturaefdpc_id,0) <> 0 then
      --
      --| As variáveis abaixo estarão sendo utilizadas na rotina PKB_MONTA_DADOS_M500.
      --
      vn_fase := 4;
      -- Somar os valores das receitas não-cumulativas tributadas no mercado interno com os valores
      -- das receitas não-cumulativas não-tributadas do mercado interno.
      vn_soma_recbru_nc_trntr := (nvl(vn_rec_bru_ncum_trib_mi,0) + nvl(vn_rec_bru_ncum_nt_mi,0));
      if vn_soma_recbru_nc_trntr = 0 then
         vn_soma_recbru_nc_trntr := 1; -- considerar 1(um) devido ao cálculo/divisão logo abaixo.
      end if;
      --
      vn_fase := 5;
      -- Rateio da receita bruta não-cumulativa tributada do mercado interno pela soma das receitas
      -- não-cumulativa tributada e não-cumulativa não-tributada do mercado interno, calculada acima.
      gn_recbru_nc_trntr_tri := (nvl(vn_rec_bru_ncum_trib_mi,0) / nvl(vn_soma_recbru_nc_trntr,1));
      --
      vn_fase := 6;
      -- Rateio da receita bruta não-cumulativa não-tributada do mercado interno pela soma das receitas
      -- não-cumulativa tributada e não-cumulativa não-tributada do mercado interno, calculada acima.
      gn_recbru_nc_trntr_ntr := (nvl(vn_rec_bru_ncum_nt_mi,0) / nvl(vn_soma_recbru_nc_trntr,1));
      --
      vn_fase := 7;
      -- Somar os valores das receitas não-cumulativas tributadas no mercado interno com os valores
      -- das receitas não-cumulativas do mercado externo.
      vn_soma_recbru_nc_trexp := (nvl(vn_rec_bru_ncum_trib_mi,0) + nvl(vn_rec_bru_ncum_exp,0));
      if vn_soma_recbru_nc_trexp = 0 then
         vn_soma_recbru_nc_trexp := 1; -- considerar 1(um) devido ao cálculo/divisão logo abaixo.
      end if;
      --
      vn_fase := 8;
      -- Rateio da receita bruta não-cumulativa tributada do mercado interno pela soma das receitas
      -- não-cumulativa tributada do mercado externo, calculada acima.
      gn_recbru_nc_trexp_tri := (nvl(vn_rec_bru_ncum_trib_mi,0) / nvl(vn_soma_recbru_nc_trexp,1));
      --
      vn_fase := 9;
      -- Rateio da receita bruta não-cumulativa do mercado externo pela soma das receitas
      -- não-cumulativa tributada do mercado externo, calculada acima.
      gn_recbru_nc_trexp_exp := (nvl(vn_rec_bru_ncum_exp,0) / nvl(vn_soma_recbru_nc_trexp,1));
      --
      vn_fase := 10;
      -- Somar os valores das receitas não-cumulativas não-tributadas no mercado interno com os valores
      -- das receitas não-cumulativas do mercado externo.
      vn_soma_recbru_nc_ntrexp := (nvl(vn_rec_bru_ncum_nt_mi,0) + nvl(vn_rec_bru_ncum_exp,0));
      if vn_soma_recbru_nc_ntrexp = 0 then
         vn_soma_recbru_nc_ntrexp := 1; -- considerar 1(um) devido ao cálculo/divisão logo abaixo.
      end if;
      --
      vn_fase := 11;
      -- Rateio da receita bruta não-cumulativa não-tributada do mercado interno pela soma das receitas
      -- não-cumulativa e não-tributada do mercado externo, calculada acima.
      gn_recbru_nc_ntrexp_ntr := (nvl(vn_rec_bru_ncum_nt_mi,0) / nvl(vn_soma_recbru_nc_ntrexp,1));
      --
      vn_fase := 12;
      -- Rateio da receita bruta não-cumulativa do mercado interno pela soma das receitas
      -- não-cumulativa e não-tributada do mercado externo, calculada acima.
      gn_recbru_nc_ntrexp_exp := (nvl(vn_rec_bru_ncum_exp,0) / nvl(vn_soma_recbru_nc_ntrexp,1));
      --
      vn_fase := 13;
      -- Somar os valores das receitas não-cumulativas tributadas no mercado interno com os valores
      -- das receitas não-cumulativas e não-tributada do mercado interno, e mais os valores das receitas
      -- não-cumulativas do mercado externo.
      vn_soma_recbru_nc_trntrexp := (nvl(vn_rec_bru_ncum_trib_mi,0) + nvl(vn_rec_bru_ncum_nt_mi,0) + nvl(vn_rec_bru_ncum_exp,0));
      if vn_soma_recbru_nc_trntrexp = 0 then
         vn_soma_recbru_nc_trntrexp := 1; -- considerar 1(um) devido ao cálculo/divisão logo abaixo.
      end if;
      --
      vn_fase := 14;
      -- Rateio da receita bruta não-cumulativa tributada do mercado interno pela soma das receitas
      -- não-cumulativa tributada e não-tributada do mercado externo, calculada acima.
      gn_recbru_nc_trntrexp_tri := (nvl(vn_rec_bru_ncum_trib_mi,0) / nvl(vn_soma_recbru_nc_trntrexp,1));
      --
      vn_fase := 15;
      -- Rateio da receita bruta não-cumulativa não-tributada do mercado interno pela soma das receitas
      -- não-cumulativa tributada e não-tributada do mercado externo, calculada acima.
      gn_recbru_nc_trntrexp_ntr := (nvl(vn_rec_bru_ncum_nt_mi,0) / nvl(vn_soma_recbru_nc_trntrexp,1));
      --
      vn_fase := 16;
      --
      if nvl(vn_soma_recbru_nc_trntrexp,0) = 0 then
         vn_soma_recbru_nc_trntrexp := 1;
      end if;
      -- Rateio da receita bruta não-cumulativa do mercado externo pela soma das receitas
      -- não-cumulativa tributada e não-tributada do mercado externo, calculada acima.
      gn_recbru_nc_trntrexp_exp := (nvl(vn_rec_bru_ncum_exp,0) / nvl(vn_soma_recbru_nc_trntrexp,1));
      --
      vn_fase := 17;
      -- Rateio receita bruta cumulativa específico para a pessoa jurídica sujeita ao regime cumulativo e
      -- não-cumulativo da contribuição (COD_INC_TRIB = 3 do Registro 0110).
      if nvl(vn_rec_bru_total,0) = 0 then
         vn_rec_bru_total := 1; -- considerar 1(um) devido ao cálculo/divisão logo abaixo.
      end if;
      gn_recbru_cum := (nvl(vn_rec_bru_cum,0) / nvl(vn_rec_bru_total,1));
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_dados_abert_empr (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DADOS_ABERT_EMPR;
--------------------------------------------------------------------------------------------
--| Procedimento recupera os dados do período da apuração de imposto de COFINS - Bloco M500
--------------------------------------------------------------------------------------------
PROCEDURE PKB_DADOS_PER_APUR_COFINS_M500( EN_PERAPURCREDCOFINS_ID IN PER_APUR_CRED_COFINS.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vv_nome_empresa    varchar2(1000) := null;
   ve_invalido        exception;
   vn_loggenerico_id  log_generico.id%type;
   --
   cursor c_per_apur_cred_cofins is
      select *
        from per_apur_cred_cofins pa
       where pa.id  = en_perapurcredcofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   gt_row_per_apur_cred_cofins := null;
   --
   vn_fase := 2;
   --
   open c_per_apur_cred_cofins;
   fetch c_per_apur_cred_cofins into gt_row_per_apur_cred_cofins;
   close c_per_apur_cred_cofins;
   --
   vn_fase := 3;
   --
   -- Busca o período de Consolidação da Contribuição do Cofins 
   pkb_ret_perconscontrcofins ( gt_row_per_apur_cred_cofins.empresa_id            
                              , gt_row_per_apur_cred_cofins.dt_ini                
                              , gt_row_per_apur_cred_cofins.dt_fin                
                              , gt_row_per_cons_contr_cofins); 
   --
   if nvl(gt_row_per_cons_contr_cofins.id,0) = 0 then
      --
      gv_resumo_log := 'Não foi encontrado um período de consolidação (COFINS) com a situação PROCESSADA';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_resumo_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => gn_referencia_id
                                       , ev_obj_referencia  => gv_obj_referencia );      
      --
   end if;
   --                              
   vn_fase := 4;
   -- Alterar os valores de datas inicial e final para considerar a hora.
   gt_row_per_apur_cred_cofins.dt_ini := trunc(gt_row_per_apur_cred_cofins.dt_ini);
   gt_row_per_apur_cred_cofins.dt_fin := to_date((trunc(gt_row_per_apur_cred_cofins.dt_fin)||' '||'23:59:59'),'dd/mm/rrrr hh24:mi:ss');
   --
   vn_fase := 5;
   --| Cabeçalho para as mensagens de log de erro e inconsistências
   gv_mensagem_log := 'Período de Apuração de Crédito do Imposto COFINS';
   --
   vn_fase := 6;
   --
   if nvl(gt_row_per_apur_cred_cofins.id,0) > 0 then
      --
      vn_fase := 7;
      --
      vv_nome_empresa := pk_csf.fkg_nome_empresa( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id );
      --
      vn_fase := 8;
      --| Cabeçalho para as mensagens de log de erro e inconsistências
      gv_mensagem_log := gv_mensagem_log||' de '||to_char(gt_row_per_apur_cred_cofins.dt_ini,'dd/mm/rrrr')||' até '||
                         to_char(gt_row_per_apur_cred_cofins.dt_fin,'dd/mm/rrrr')||' - Empresa: '||vv_nome_empresa;
   else
      --
      vn_fase := 9;
      --
      raise ve_invalido;
   end if;
   --
EXCEPTION
   when ve_invalido then
      --
      gv_resumo_log := 'Período de Apuração não encontrado. Verifique o identificador informado (id = '||en_perapurcredcofins_id||').';
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_dados_per_apur_cofins_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DADOS_PER_APUR_COFINS_M500;
---------------------------------------------------------------------
--| Procedimento para excluir os registros de inconsistências - logs
---------------------------------------------------------------------
PROCEDURE PKB_EXCLUIR_LOG( EN_REFERENCIA_ID  IN LOG_GENERICO.REFERENCIA_ID%TYPE
                         , EV_OBJ_REFERENCIA IN LOG_GENERICO.OBJ_REFERENCIA%TYPE ) IS
BEGIN
   --
   delete from log_generico lg
    where lg.referencia_id  = en_referencia_id
      and lg.obj_referencia = ev_obj_referencia;
   --
   commit;
   --
EXCEPTION
   when others then
      raise_application_error (-20101, 'Problemas ao excluir log/inconsistência (referencia_id = '||
                                       en_referencia_id||' objeto = '||ev_obj_referencia||').');
      --
END PKB_EXCLUIR_LOG;
--------------------------------------------------------------------------
--| Procedimento por período para apuração do imposto COFINS - Bloco M500
--| Serão gerados os blocos M500 e M505
--------------------------------------------------------------------------
PROCEDURE PKB_GERAR_PER_APUR_COFINS_M500( EN_PERAPURCREDCOFINS_ID IN PER_APUR_CRED_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perapurcredcofins_id
                  , ev_obj_referencia => 'PER_APUR_CRED_COFINS' );
   --
   vn_fase := 2;
   --
   gv_mensagem_log   := 'Geração por período das apurações de crédito do imposto COFINS';
   gv_obj_referencia := 'PER_APUR_CRED_COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perapurcredcofins_id||').';
   gn_referencia_id  := en_perapurcredcofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perapurcredcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período de apuração deve ser informado para que a geração seja efetuada.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      --
      if pk_csf_efd_pc.fkg_qtde_apur_cofins( en_perapurcredcofins_id => en_perapurcredcofins_id ) <> 0 then -- não devem existir apurações geradas
         --
         vn_fase := 6;
         gv_resumo_log := 'O período de apuração informado possui apurações geradas, portanto, a geração não será realizada. Favor excluir as apurações.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 7;
         --
         pkb_dados_per_apur_cofins_m500( en_perapurcredcofins_id => en_perapurcredcofins_id );
         gv_mensagem_log := 'Geração do '||gv_mensagem_log;
         --
         vn_fase := 8;
         --
         pkb_dados_abert_empr( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                             , ed_dt_inicial => gt_row_per_apur_cred_cofins.dt_ini
                             , ed_dt_final   => gt_row_per_apur_cred_cofins.dt_fin );
         --
         vn_fase := 9;
         --
         if nvl(gn_aberturaefdpc_id,0) <> 0 then
            --
            vn_fase := 10;
            --
            if ((nvl(gn_dm_cod_inc_trib,0) in (1,3)) or -- 1-Escrituração de operações com incidência exclusivamente no regime não-cumulativo ou 3-Escrituração de operações com incidência nos regimes nãocumulativo e cumulativo
                (nvl(gn_dm_cod_inc_trib,0) = 2 and gn_dm_ind_reg_cum = 9)) then -- 2-Escrituração de operações com incidência exclusivamente no regime cumulativo, 9-Regime de Competência - Escrituração detalhada, com base nos registros dos Blocos A, C, D e F
               --
               vn_fase := 11;
               --
               pkb_recupera_tpimp;
               --
               vn_fase := 12;
               --
               pkb_monta_dados_m500;
               --
               vn_fase := 13;
               --
               pkb_grava_dados_m500;
               --
               vn_fase := 14;
               --
               pkb_monta_dados_m500_f800;
               --
            else -- gn_dm_ind_reg_cum in (1,2) = Regime de Caixa Escrituração consolidada (Registro F500) ou Regime de Competência - Escrituração consolidada (Registro F550)
               --
               vn_fase := 15;
               gv_resumo_log := 'Para o período de apuração informado foi encontrado período de Geração de EFD-PIS/COFINS, porém o "Indicador do critério de '||
                                'escrituação e apuração no regime cumulativo", indica '||pk_csf.fkg_dominio('ABERTURA_EFD_PC_REGIME.DM_IND_REG_CUM',gn_dm_ind_reg_cum)||
                                ', portanto, a apuração não será realizada. Verificar a Geração de EFD-PIS/COFINS.';
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_inform_geral
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
               --
            end if;
            --
         else
            --
            vn_fase := 16;
            gv_resumo_log := 'Para o período de apuração informado não foi encontrado o mesmo período de Geração de EFD-PIS/COFINS, ou o período de '||
                             'geração está com situação: "Erro de validação", "Gerado arquivo", "Erro na geração do arquivo", "Erro de cálculo", '||
                             '"Em geração", portanto, a apuração não será realizada. Favor atualizar a Geração de EFD-PIS/COFINS.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 17;
   --
   commit;
   --
   vn_fase := 18;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perapurcredcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_gerar_per_apur_cofins_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perapurcredcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_GERAR_PER_APUR_COFINS_M500;
---------------------------------------------------------------------------------------
--| Procedimento para excluir por período a apuração do crédito do COFINS - Bloco M500
---------------------------------------------------------------------------------------
PROCEDURE PKB_EXCL_PER_APUR_COFINS_M500( EN_PERAPURCREDCOFINS_ID IN PER_APUR_CRED_COFINS.ID%TYPE ) IS
   --
   vn_fase       number := 0;
   vn_empresa_id per_apur_cred_cofins.empresa_id%type;
   vd_dt_ini     per_apur_cred_cofins.dt_ini%type;
   vd_dt_fin     per_apur_cred_cofins.dt_fin%type;
   vv_mensagem   varchar2(1000) := null;
   ve_erro       exception;
   --
   cursor c_apur( en_perapurcredcofins_id in number ) is
      select ac.id apurcredcofins_id
        from apur_cred_cofins ac
       where ac.perapurcredcofins_id = en_perapurcredcofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perapurcredcofins_id
                  , ev_obj_referencia => 'PER_APUR_CRED_COFINS' );
   --
   vn_fase := 2;
   --
   begin
      select pa.empresa_id
           , pa.dt_ini
           , pa.dt_fin
        into vn_empresa_id
           , vd_dt_ini
           , vd_dt_fin
        from per_apur_cred_cofins pa
       where pa.id = en_perapurcredcofins_id;
   exception
      when others then
         vv_mensagem := 'Período de Apuração não encontrado. Verifique o identificador informado (id = '||en_perapurcredcofins_id||').';
         raise ve_erro;
   end;
   --
   vn_fase := 3;
   --
   if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                            , ed_data       => vd_dt_ini ) or  -- true
      pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                            , ed_data       => vd_dt_fin ) then -- true
      --
      vn_fase := 4;
      --
      vv_mensagem := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
      raise ve_erro;
      --
   else
      --
      vn_fase := 5;
      -- Verificar se existem relacionamentos gerados pelo Bloco M600, entre os Blocos M500 e 1500
      for r_apur in c_apur( en_perapurcredcofins_id => en_perapurcredcofins_id )
      loop
         --
         exit when c_apur%notfound or (c_apur%notfound) is null;
         --
         vn_fase := 6;
         --
         if pk_csf_efd_pc.fkb_existe_relac_apur_cof( en_apurcredcofins_id => r_apur.apurcredcofins_id ) or -- true
            pk_csf_efd_pc.fkb_existe_rel_apur_contr_cof( en_apurcredcofins_id => r_apur.apurcredcofins_id ) then -- true
            --
            vn_fase := 7;
            --
            vv_mensagem := 'Existe(m) relacionamento(s) entre os Blocos M500 e 1500 gerados pelo Bloco M600. Desprocesse o Bloco M600 - Consolidação da Apuração.';
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 8;
      --
      if vv_mensagem is not null then
         --
         vn_fase := 9;
         raise ve_erro;
         --
      end if;
      --
      vn_fase := 10;
      --
      begin
         delete from det_ajust_apur_cred_cofins da
          where exists (select aa.id
                          from ajust_apur_cred_cofins aa
                             , apur_cred_cofins       ac
                         where ac.perapurcredcofins_id   = en_perapurcredcofins_id
                           and aa.apurcredcofins_id      = ac.id
                           and da.ajustapurcredcofins_id = aa.id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir detalhes dos ajustes das apurações de crédito. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 11;
      --
      begin
         delete from ajust_apur_cred_cofins aa
          where exists (select ac.id
                          from apur_cred_cofins ac
                         where ac.perapurcredcofins_id = en_perapurcredcofins_id
                           and ac.id                   = aa.apurcredcofins_id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir ajustes das apurações de crédito. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 12;
      --
      begin
         delete from det_apur_cred_cofins da
          where exists (select ac.id
                          from apur_cred_cofins ac
                         where ac.perapurcredcofins_id = en_perapurcredcofins_id
                           and ac.id                   = da.apurcredcofins_id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir detalhes das apurações de crédito. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 13;
      --
      begin
         delete from apur_cred_cofins ac
          where ac.perapurcredcofins_id = en_perapurcredcofins_id;
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir apurações de crédito. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 14;
      --
      begin
         delete from per_apur_cred_cofins pa
          where pa.id = en_perapurcredcofins_id;
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir período de apurações de crédito. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 15;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when ve_erro then
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Excluir os registros gerados por período de apuração'
                                          , ev_resumo          => vv_mensagem
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perapurcredcofins_id
                                          , ev_obj_referencia  => 'PER_APUR_CRED_COFINS' );
      exception
         when others then
            null;
      end;
      --
      rollback;
      --
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_excl_per_apur_cofins_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Excluir os registros gerados por período de apuração'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perapurcredcofins_id
                                          , ev_obj_referencia  => 'PER_APUR_CRED_COFINS' );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_EXCL_PER_APUR_COFINS_M500;
---------------------------------------------------------------------------------
--| Procedimento recupera os dados da apuração de imposto de COFINS - Bloco M500
---------------------------------------------------------------------------------
PROCEDURE PKB_DADOS_APUR_COFINS_M500( EN_APURCREDCOFINS_ID IN APUR_CRED_COFINS.ID%TYPE ) IS
   --
   vn_fase             number := 0;
   vv_cd_tipocredpc    tipo_cred_pc.id%type;
   vv_descr_tipocredpc tipo_cred_pc.descr%type;
   ve_invalido         exception;
   --
   cursor c_apur_cred_cofins is
      select *
        from apur_cred_cofins ac
       where ac.id = en_apurcredcofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   gt_row_apur_cred_cofins := null;
   --
   vn_fase := 2;
   --
   open c_apur_cred_cofins;
   fetch c_apur_cred_cofins into gt_row_apur_cred_cofins;
   close c_apur_cred_cofins;
   --
   vn_fase := 3;
   --| Cabeçalho para as mensagens de log de erro e inconsistências
   gv_mensagem_log := ' - Apuração de Crédito';
   --
   vn_fase := 4;
   --
   if nvl(gt_row_apur_cred_cofins.id,0) > 0 then
      --
      vn_fase := 5;
      --
      vv_cd_tipocredpc    := pk_csf_efd_pc.fkg_cd_tipo_cred_pc ( en_tipocredpc_id => gt_row_apur_cred_cofins.tipocredpc_id );
      vv_descr_tipocredpc := pk_csf_efd_pc.fkg_descr_tipo_cred_pc ( en_tipocredpc_id => gt_row_apur_cred_cofins.tipocredpc_id );
      --
      vn_fase := 6;
      --| Cabeçalho para as mensagens de log de erro e inconsistências
      gv_mensagem_log := gv_mensagem_log||' - Tipo de crédito: '||vv_cd_tipocredpc||' - '||vv_descr_tipocredpc;
   else
      --
      vn_fase := 7;
      --
      raise ve_invalido;
   end if;
   --
EXCEPTION
   when ve_invalido then
      --
      gv_resumo_log := 'Apuração não encontrada. Verifique o identificador informado (id = '||en_apurcredcofins_id||').';
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_dados_apur_cofins_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DADOS_APUR_COFINS_M500;
---------------------------------------------------------------------
--| Procedimento calcular apuração do crédito do COFINS - Bloco M500
--| Serão calculados alguns campos dos blocos M500, M505 e M510
---------------------------------------------------------------------
PROCEDURE PKB_CALCULAR_APUR_COFINS_M500( EN_APURCREDCOFINS_ID IN APUR_CRED_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
   cursor c_per_apur_cred_cofins( en_perapurcredcofins_id in per_apur_cred_cofins.id%type ) is
      select *
        from per_apur_cred_cofins pa
       where pa.id  = en_perapurcredcofins_id;
   --
   cursor c_vl_aj( en_ind_aj in number ) is
      select nvl(sum(nvl(aa.vl_aj,0)),0) vl_aj
        from ajust_apur_cred_cofins aa
       where aa.apurcredcofins_id = gt_row_apur_cred_cofins.id
         and aa.dm_ind_aj         = en_ind_aj; -- 0-ajuste de redução, 1-ajuste de acréscimo
   --
   cursor c_vl_cred_dif is
      select nvl(sum(nvl(ia.vl_cred_dif,0)),0) vl_cred_dif
        from per_cons_contr_cofins pc
           , cons_contr_cofins     cc
           , det_cons_contr_cofins dc
           , inf_adic_dif_cofins   ia
       where pc.empresa_id            = gt_row_per_apur_cred_cofins.empresa_id
         and pc.dt_ini          between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and pc.dt_fin          between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and cc.perconscontrcofins_id = pc.id
         and dc.conscontrcofins_id    = cc.id
         and ia.detconscontrcofins_id = dc.id
         and ia.tipocredpc_id         = gt_row_apur_cred_cofins.tipocredpc_id;
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_apurcredcofins_id
                  , ev_obj_referencia => 'APUR_CRED_COFINS' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'APUR_CRED_COFINS';
   gv_mensagem_log   := 'Cálculo da apuração do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador da apuração = '||en_apurcredcofins_id||').';
   gn_referencia_id  := en_apurcredcofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_apurcredcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador da apuração deve ser informado para que o cálculo seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      -- Recupera os dados da apuração do imposto cofins utilizado como referência
      pkb_dados_apur_cofins_m500( en_apurcredcofins_id => en_apurcredcofins_id );
      gv_mensagem_log := 'Cálculo da '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      if gt_row_apur_cred_cofins.dm_situacao <> 0 then -- não estiver em aberto
         --
         vn_fase := 7;
         gv_resumo_log := 'A apuração informada não está com situação em aberto, portanto, o cálculo não será realizado.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      elsif pk_csf_efd_pc.fkg_qtde_det_apur_cofins( en_apurcredcofins_id => gt_row_apur_cred_cofins.id ) = 0 then -- devem existir detalhes de apuração gerados
            --
            vn_fase := 8;
            gv_resumo_log := 'A apuração informada não possui detalhes gerados, portanto, o cálculo não será realizado.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
      else
         --
         vn_fase := 9;
         --
         if nvl(gt_row_per_apur_cred_cofins.id,0) = 0 then
            --
            vn_fase := 10;
            gt_row_per_apur_cred_cofins := null;
            open c_per_apur_cred_cofins( en_perapurcredcofins_id => gt_row_apur_cred_cofins.perapurcredcofins_id );
            fetch c_per_apur_cred_cofins into gt_row_per_apur_cred_cofins;
            close c_per_apur_cred_cofins;
            --
         end if;
         --
         vn_fase := 11;
         --
         if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                                                  , ed_data       => gt_row_per_apur_cred_cofins.dt_ini ) or  -- true
            pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                                                  , ed_data       => gt_row_per_apur_cred_cofins.dt_fin ) then -- true
            --
            vn_fase := 12;
            --
            gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         else
            --
            vn_fase := 13;
            --
            open c_vl_aj( en_ind_aj => 1);-- 0-ajuste de redução, 1-ajuste de acréscimo
            fetch c_vl_aj into gt_row_apur_cred_cofins.vl_ajus_acres;
            close c_vl_aj;
            --
            vn_fase := 14;
            --
            open c_vl_aj( en_ind_aj => 0);-- 0-ajuste de redução, 1-ajuste de acréscimo
            fetch c_vl_aj into gt_row_apur_cred_cofins.vl_ajus_reduc;
            close c_vl_aj;
            --
            vn_fase := 15;
            --
            open c_vl_cred_dif;
            fetch c_vl_cred_dif into gt_row_apur_cred_cofins.vl_cred_difer;
            close c_vl_cred_dif;
            --
            vn_fase := 16;
            --
            gt_row_apur_cred_cofins.vl_cred_disp := (nvl(gt_row_apur_cred_cofins.vl_cred,0) + nvl(gt_row_apur_cred_cofins.vl_ajus_acres,0) -
                                                     nvl(gt_row_apur_cred_cofins.vl_ajus_reduc,0) - nvl(gt_row_apur_cred_cofins.vl_cred_difer,0));
            --
	    vn_fase := 17;
	    -- Valor do Crédito disponível, descontado da contribuição apurada no próprio período.
	    if gt_row_apur_cred_cofins.dm_ind_desc_cred = 0 then
	       --
	       gt_row_apur_cred_cofins.vl_cred_desc := gt_row_apur_cred_cofins.vl_cred_disp; -- informar o valor total do VL_CRED_DISP
	       --
	    end if;
            --
            vn_fase := 18;
            --
            gt_row_apur_cred_cofins.vl_sld_cred := (nvl(gt_row_apur_cred_cofins.vl_cred_disp,0) - nvl(gt_row_apur_cred_cofins.vl_cred_desc,0));
            --
            vn_fase := 19;
            --| Atualizar a descrição de crédito nos detalhes de apuração
            begin
               update det_apur_cred_cofins da
                  set da.desc_cred = ltrim(rtrim(pk_csf.fkg_converte(da.desc_cred)))
                where da.apurcredcofins_id = gt_row_apur_cred_cofins.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao atualizar descrição de crédito nos detalhes de apuração. Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_sistema
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
            end;
            --
            vn_fase := 20;
            --| Atualizar número de documento e descrição de ajustes
            begin
               update ajust_apur_cred_cofins aa
                  set aa.num_doc  = ltrim(rtrim(pk_csf.fkg_converte(aa.num_doc)))
                    , aa.descr_aj = ltrim(rtrim(pk_csf.fkg_converte(aa.descr_aj)))
                where aa.apurcredcofins_id = gt_row_apur_cred_cofins.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao atualizar nro de documento e descrição de ajuste. Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_sistema
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
            end;
            --
            vn_fase := 21;
            --| Atualizar descrição de detalhe de ajustes e informações complementares
            begin
               update det_ajust_apur_cred_cofins da
                  set da.descr_aj   = ltrim(rtrim(pk_csf.fkg_converte(da.descr_aj)))
                    , da.info_compl = ltrim(rtrim(pk_csf.fkg_converte(da.info_compl)))
                where da.ajustapurcredcofins_id in (select aa.id
                                                      from ajust_apur_cred_cofins aa
                                                     where aa.apurcredcofins_id = gt_row_apur_cred_cofins.id);
            exception
               when others then
                  gv_resumo_log := 'Problemas ao atualizar descrição de detalhe de ajuste e informações complementares. Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_sistema
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
            end;
            --
            vn_fase := 22;
            --| Atualizar situação e valores da apuração
            begin
               update apur_cred_cofins ac
                  set ac.dm_situacao   = 1 -- Calculada
                    , ac.vl_ajus_acres = gt_row_apur_cred_cofins.vl_ajus_acres
                    , ac.vl_ajus_reduc = gt_row_apur_cred_cofins.vl_ajus_reduc
                    , ac.vl_cred_difer = gt_row_apur_cred_cofins.vl_cred_difer
                    , ac.vl_cred_disp  = gt_row_apur_cred_cofins.vl_cred_disp
                    , ac.vl_cred_desc  = gt_row_apur_cred_cofins.vl_cred_desc
                    , ac.vl_sld_cred   = gt_row_apur_cred_cofins.vl_sld_cred
                where ac.id = gt_row_apur_cred_cofins.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao atualizar situação e valores da apuração. Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_sistema
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
            end;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 23;
   --
   commit;
   --
   vn_fase := 24;
   --
   gv_resumo_log := 'Término do processo (identificador da apuração = '||en_apurcredcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      begin
         update apur_cred_cofins ac
            set ac.dm_situacao = 2 -- Erro no Cálculo
          where ac.id = en_apurcredcofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao atualizar a situação da apuração para 2(Erro no cálculo). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                             , ev_mensagem       => gv_mensagem_log
                                             , ev_resumo         => gv_resumo_log
                                             , en_tipo_log       => erro_de_sistema
                                             , en_referencia_id  => en_apurcredcofins_id
                                             , ev_obj_referencia => gv_obj_referencia );
      end;
      --
      commit;
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_calcular_apur_cofins_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_apurcredcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_CALCULAR_APUR_COFINS_M500;
----------------------------------------------------------------------------------------
--| Procedimento para calcular por período a apuração do crédito do COFINS - Bloco M500
--| Serão calculados alguns campos dos blocos M500, M505 e M510
----------------------------------------------------------------------------------------
PROCEDURE PKB_CALC_PER_APUR_COFINS_M500( EN_PERAPURCREDCOFINS_ID IN PER_APUR_CRED_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
   cursor c_per_apur_cred_cofins( en_perapurcredcofins_id in per_apur_cred_cofins.id%type ) is
      select *
        from per_apur_cred_cofins pa
       where pa.id  = en_perapurcredcofins_id;
   --
   cursor c_apur is
      select ac.id apurcredcofins_id
        from apur_cred_cofins ac
       where ac.perapurcredcofins_id = en_perapurcredcofins_id
         and ac.dm_ind_cred_ori      = 0; -- Indicador de Credito Oriundo de: 0-Operações próprias; 1-Evento de incorporação, cisão ou fusão
   --
   cursor c_apur_f800 is
      select ac.id apurcredcofins_id
        from apur_cred_cofins ac
       where ac.perapurcredcofins_id = en_perapurcredcofins_id
         and ac.dm_ind_cred_ori      = 1; -- Indicador de Credito Oriundo de: 0-Operações próprias; 1-Evento de incorporação, cisão ou fusão
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perapurcredcofins_id
                  , ev_obj_referencia => 'PER_APUR_CRED_COFINS' );
   --
   vn_fase := 2;
   --
   gv_mensagem_log   := 'Cálculo por período das apurações de crédito do imposto COFINS';
   gv_obj_referencia := 'PER_APUR_CRED_COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perapurcredcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perapurcredcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perapurcredcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período de apuração deve ser informado para que o cálculo seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      --
      if pk_csf_efd_pc.fkg_qtde_apur_cofins( en_perapurcredcofins_id => en_perapurcredcofins_id ) = 0 then -- devem existir apurações geradas
         --
         vn_fase := 6;
         gv_resumo_log := 'O período de apuração informado não possui apurações geradas, portanto, o cálculo não será realizado.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => en_perapurcredcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 7;
         --
         gt_row_per_apur_cred_cofins := null;
         open c_per_apur_cred_cofins( en_perapurcredcofins_id => en_perapurcredcofins_id );
         fetch c_per_apur_cred_cofins into gt_row_per_apur_cred_cofins;
         close c_per_apur_cred_cofins;
         --
         vn_fase := 8;
         --
         if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                                                  , ed_data       => gt_row_per_apur_cred_cofins.dt_ini ) or  -- true
            pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                                                  , ed_data       => gt_row_per_apur_cred_cofins.dt_fin ) then -- true
            --
            vn_fase := 9;
            --
            gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gt_row_per_apur_cred_cofins.id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         else
            --
            vn_fase := 10;
            --
            for r_reg in c_apur
            loop
               --
               vn_fase := 11;
               --
               pkb_calcular_apur_cofins_m500( en_apurcredcofins_id => r_reg.apurcredcofins_id );
               --
            end loop;
            --
            vn_fase := 12;
            --
            for r_reg_f800 in c_apur_f800
            loop
               --
               vn_fase := 13;
               --
               begin
                  update apur_cred_cofins ac
                     set ac.dm_situacao = 1 -- Situação: 0-Aberto; 1-Calculada; 2-Erro no cálculo; 3-Processada; 4-Erro de validação
                   where ac.id = r_reg_f800.apurcredcofins_id;
               exception
                  when others then
                     raise_application_error (-20101, 'Problemas ao atualizar a situação da apuração originada do Bloco F800. Erro = '||sqlerrm);
               end;
               --
            end loop;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   --
   commit;
   --
   vn_fase := 15;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perapurcredcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perapurcredcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_calc_per_apur_cofins_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Calcular por período a apuração do crédito do COFINS'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perapurcredcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_CALC_PER_APUR_COFINS_M500;
---------------------------------------------------------------------------
--| Procedimento para validar a apuração do crédito do COFINS - Bloco M500
--| Serão validados alguns campos dos blocos M500, M505 e M510
---------------------------------------------------------------------------
PROCEDURE PKB_VALIDAR_APUR_COFINS_M500( EN_APURCREDCOFINS_ID IN APUR_CRED_COFINS.ID%TYPE ) IS
   --
   vn_fase                 number := 0;
   vn_loggenerico_id       log_generico.id%type := null;
   vn_vl_bc_cofins_m505    number := 0;
   vn_quant_bc_cofins_m505 number := 0;
   vn_vl_acres             number := 0;
   vn_vl_reduc             number := 0;
   vn_valor_qt             number := 0;
   vn_valor_vl             number := 0;
   vn_valor                number := 0;
   vn_vl_cred_dif          number := 0;
   vn_det_valor_aj         number := 0;
   --
   cursor c_per_apur_cred_cofins( en_perapurcredcofins_id in per_apur_cred_cofins.id%type ) is
      select *
        from per_apur_cred_cofins pa
       where pa.id  = en_perapurcredcofins_id;
   --
   cursor c_vl_bc_cofins is
      select nvl(sum(nvl(da.vl_bc_cofins,0)),0)
        from det_apur_cred_cofins da
       where da.apurcredcofins_id = gt_row_apur_cred_cofins.id;
   --
   cursor c_qt_bc_cofins is
      select nvl(sum(nvl(da.quant_bc_cofins,0)),0)
        from det_apur_cred_cofins da
       where da.apurcredcofins_id = gt_row_apur_cred_cofins.id;
   --
   cursor c_vl_aj( en_ind_aj in number ) is
      select nvl(sum(nvl(aa.vl_aj,0)),0) vl_aj
        from ajust_apur_cred_cofins aa
       where aa.apurcredcofins_id = gt_row_apur_cred_cofins.id
         and aa.dm_ind_aj         = en_ind_aj; -- 0-ajuste de redução, 1-ajuste de acréscimo
   --
   cursor c_vl_cred_dif is
      select nvl(sum(nvl(ia.vl_cred_dif,0)),0) vl_cred_dif
        from per_cons_contr_cofins pc
           , cons_contr_cofins     cc
           , det_cons_contr_cofins dc
           , inf_adic_dif_cofins   ia
       where pc.empresa_id            = gt_row_per_apur_cred_cofins.empresa_id
         and pc.dt_ini          between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and pc.dt_fin          between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and cc.perconscontrcofins_id = pc.id
         and dc.conscontrcofins_id    = cc.id
         and ia.detconscontrcofins_id = dc.id
         and ia.tipocredpc_id         = gt_row_apur_cred_cofins.tipocredpc_id;
   --
   cursor c_detalhe is
      select da.id
           , da.basecalccredpc_id
           , da.vl_bc_cofins_tot
           , da.vl_bc_cofins_cum
           , da.vl_bc_cofins_nc
           , da.vl_bc_cofins
           , da.quant_bc_cofins_tot
           , da.quant_bc_cofins
           , da.desc_cred
        from det_apur_cred_cofins da
       where da.apurcredcofins_id = gt_row_apur_cred_cofins.id;
   --
   cursor c_ajuste is
      select aa.id
           , aa.dm_ind_aj
           , aa.vl_aj
           , aa.dt_ref
        from ajust_apur_cred_cofins aa
       where aa.apurcredcofins_id = gt_row_apur_cred_cofins.id;
   --
   cursor c_det_aju( en_ajustapurcredcofins_id in ajust_apur_cred_cofins.id%type ) is
      select nvl(sum(nvl(da.det_valor_aj,0)),0) det_valor_aj
        from det_ajust_apur_cred_cofins da
       where da.ajustapurcredcofins_id = en_ajustapurcredcofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_apurcredcofins_id
                  , ev_obj_referencia => 'APUR_CRED_COFINS' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'APUR_CRED_COFINS';
   gv_mensagem_log   := 'Validação da apuração do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador da apuração = '||en_apurcredcofins_id||').';
   gn_referencia_id  := en_apurcredcofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_apurcredcofins_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador da apuração deve ser informado para que a validação seja efetuada.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      --| Recupera os dados da apuração do imposto cofins utilizado como referência
      pkb_dados_apur_cofins_m500( en_apurcredcofins_id => en_apurcredcofins_id );
      gv_mensagem_log := 'Validação da '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      if gt_row_apur_cred_cofins.dm_situacao <> 1 then -- não estiver calculada
         vn_fase := 7;
         gv_resumo_log := 'A apuração informada não está com situação calculada, portanto, a validação não será realizada.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      else
         --
         vn_fase := 8;
         --
         if nvl(gt_row_per_apur_cred_cofins.id,0) = 0 then
            --
            vn_fase := 9;
            gt_row_per_apur_cred_cofins := null;
            open c_per_apur_cred_cofins( en_perapurcredcofins_id => gt_row_apur_cred_cofins.perapurcredcofins_id );
            fetch c_per_apur_cred_cofins into gt_row_per_apur_cred_cofins;
            close c_per_apur_cred_cofins;
            --
         end if;
         --
         vn_fase := 10;
         --
         if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                                                  , ed_data       => gt_row_per_apur_cred_cofins.dt_ini ) or  -- true
            pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                                                  , ed_data       => gt_row_per_apur_cred_cofins.dt_fin ) then -- true
            --
            vn_fase := 11;
            --
            gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         else
            --
            vn_fase := 12;
            --
            open c_vl_bc_cofins;
            fetch c_vl_bc_cofins into vn_vl_bc_cofins_m505;
            close c_vl_bc_cofins;
            --
            vn_fase := 13;
            --
            if nvl(gt_row_apur_cred_cofins.vl_bc_cofins,0) <> nvl(vn_vl_bc_cofins_m505,0) then
               gv_resumo_log := 'Valor da base de cálculo ('||to_char(gt_row_apur_cred_cofins.vl_bc_cofins,'999G999G999G999G990D00')||
                                ') difere da soma dos detalhes de apuração('||to_char(vn_vl_bc_cofins_m505,'999G999G999G999G990D00')||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 14;
            --
            if nvl(gt_row_apur_cred_cofins.vl_bc_cofins,0) <> 0 and
               nvl(gt_row_apur_cred_cofins.vl_aliq_cofins_quant,0) <> 0 then
               gv_resumo_log := 'Valor de base de cálculo informado, portanto a alíquota por unidade de medida não pode ser informada.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 15;
            --
            open c_qt_bc_cofins;
            fetch c_qt_bc_cofins into vn_quant_bc_cofins_m505;
            close c_qt_bc_cofins;
            --
            vn_fase := 16;
            --
            if nvl(gt_row_apur_cred_cofins.quant_bc_cofins,0) <> nvl(vn_quant_bc_cofins_m505,0) then
               gv_resumo_log := 'Quantidade da base de cálculo ('||ltrim(to_char(gt_row_apur_cred_cofins.quant_bc_cofins,'999G999G999G999G990D000'))||
                                ') difere da soma dos detalhes de apuração('||ltrim(to_char(vn_quant_bc_cofins_m505,'999G999G999G999G990D000'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 17;
            --
            vn_valor_qt := round( (nvl(gt_row_apur_cred_cofins.quant_bc_cofins,0) * nvl(gt_row_apur_cred_cofins.vl_aliq_cofins_quant,0)), 2);
            vn_valor_vl := round( ((nvl(gt_row_apur_cred_cofins.vl_bc_cofins,0) * nvl(gt_row_apur_cred_cofins.aliq_cofins,0)) / 100), 2);
            --
            vn_fase := 18;
            --
            if nvl(gt_row_apur_cred_cofins.quant_bc_cofins,0) <> 0 and -- processo por alíquota em quantidade
               nvl(gt_row_apur_cred_cofins.vl_cred,0) <> nvl(vn_valor_qt,0) then
               gv_resumo_log := 'Processo por alíquota em quantidade - O valor de crédito difere da quantidade e percentual '||
                                'informados (valor de crédito = quantidade da base * valor de alíquota) => ('||
                                ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred,0),'999G999G999G999G990D00'))||' <> '||
                                ltrim(to_char(nvl(gt_row_apur_cred_cofins.quant_bc_cofins,0),'999G999G999G999G990D000'))||' * '||
                                ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_aliq_cofins_quant,0),'999G999G999G999G990D0000'))||')).';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            elsif nvl(gt_row_apur_cred_cofins.vl_bc_cofins,0) <> 0 and -- processo por alíquota em valor
                  nvl(gt_row_apur_cred_cofins.vl_cred,0) <> nvl(vn_valor_vl,0) then
                  gv_resumo_log := 'Processo por alíquota em valor - O valor de crédito difere da base e percentual '||
                                   'informados (valor de crédito = valor da base * valor de alíquota / 100) => ('||
                                   ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred,0),'999G999G999G999G990D00'))||' <> '||
                                   ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_bc_cofins,0),'999G999G999G999G990D00'))||' * '||
                                   ltrim(to_char(nvl(gt_row_apur_cred_cofins.aliq_cofins,0),'999G999G999G999G990D0000'))||' / 100)).';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
            elsif pk_csf_efd_pc.fkg_cd_tipo_cred_pc(en_tipocredpc_id => gt_row_apur_cred_cofins.tipocredpc_id) = 109 and -- crédito imobiliário
                  nvl(gt_row_apur_cred_cofins.vl_cred,0) <> 0 then
                  gv_resumo_log := 'Processo por crédito imobiliário - O valor de crédito deve ser zero (0).';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 19;
            --
            open c_vl_aj( en_ind_aj => 1); -- 0-ajuste de redução, 1-ajuste de acréscimo
            fetch c_vl_aj into vn_vl_acres;
            close c_vl_aj;
            --
            vn_fase := 20;
            --
            if nvl(gt_row_apur_cred_cofins.vl_ajus_acres,0) <> nvl(vn_vl_acres,0) then
               gv_resumo_log := 'O valor total de ajuste de redução ('||ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_ajus_acres,0),'999G999G999G999G990D00'))||
                                ') difere do valor informado como ajuste de redução ('||ltrim(to_char(nvl(vn_vl_acres,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 21;
            --
            open c_vl_aj( en_ind_aj => 0); -- 0-ajuste de redução, 1-ajuste de acréscimo
            fetch c_vl_aj into vn_vl_reduc;
            close c_vl_aj;
            --
            vn_fase := 22;
            --
            if nvl(gt_row_apur_cred_cofins.vl_ajus_reduc,0) <> nvl(vn_vl_reduc,0) then
               gv_resumo_log := 'O valor total de ajuste de redução ('||ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_ajus_reduc,0),'999G999G999G999G990D00'))||
                                ') difere do valor informado como ajuste de redução ('||ltrim(to_char(nvl(vn_vl_reduc,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 23;
            --
            open c_vl_cred_dif;
            fetch c_vl_cred_dif into vn_vl_cred_dif;
            close c_vl_cred_dif;
            --
            vn_fase := 24;
            --
            vn_valor := (nvl(gt_row_apur_cred_cofins.vl_cred,0) + nvl(gt_row_apur_cred_cofins.vl_ajus_acres,0) - nvl(gt_row_apur_cred_cofins.vl_ajus_reduc,0));
            --
            vn_fase := 25;
            --
            if nvl(gt_row_apur_cred_cofins.vl_cred_difer,0) <> nvl(vn_vl_cred_dif,0) then
               gv_resumo_log := 'O valor do crédito diferenciado ('||ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred_difer,0),'999G999G999G999G990D00'))||
                                ') difere do valor informado como diferenciado ('||ltrim(to_char(nvl(vn_vl_cred_dif,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            elsif nvl(gt_row_apur_cred_cofins.vl_cred_difer,0) > nvl(vn_valor,0) then
                  gv_resumo_log := 'O valor do crédito diferenciado ('||ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred_difer,0),'999G999G999G999G990D00'))||
                                   ') não pode ser maior que a soma do valor do crédito e valor de ajuste de acréscimo menos o valor de ajuste de '||
                                   'redução (vl_cred + vl_ajust_acres - vl_ajust_reduc) -> ('||
                                   ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred,0),'999G999G999G999G990D00'))||' + '||
                                   ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_ajus_acres,0),'999G999G999G999G990D00'))||' - '||
                                   ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_ajus_reduc,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 26;
            --
            vn_valor := (nvl(gt_row_apur_cred_cofins.vl_cred,0) + nvl(gt_row_apur_cred_cofins.vl_ajus_acres,0) -
                         nvl(gt_row_apur_cred_cofins.vl_ajus_reduc,0) - nvl(gt_row_apur_cred_cofins.vl_cred_difer,0));
            --
            vn_fase := 27;
            --
            if nvl(gt_row_apur_cred_cofins.vl_cred_disp,0) <> nvl(vn_valor,0) then
               gv_resumo_log := 'O valor do crédito disponível ('||ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred_disp,0),'999G999G999G999G990D00'))||
                                ') difere da soma do valor de crédito e valor de ajuste de acréscimo menos o valor de ajuste de redução e valor '||
                                'de crédito diferenciado (vl_cred + vl_ajus_acres - vl_ajus_reduc - vl_cred_dif) -> ('||
                                ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred,0),'999G999G999G999G990D00'))||' + '||
                                ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_ajus_acres,0),'999G999G999G999G990D00'))||' - '||
                                ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_ajus_reduc,0),'999G999G999G999G990D00'))||' - '||
                                ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred_difer,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 28;
            --
            if gt_row_apur_cred_cofins.dm_ind_desc_cred = 0 and
               nvl(gt_row_apur_cred_cofins.vl_cred_desc,0) <> nvl(gt_row_apur_cred_cofins.vl_cred_disp,0) then
               gv_resumo_log := 'O valor do crédito descontado ('||ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred_desc,0),'999G999G999G999G990D00'))||
                                ') difere do valor de crédito disponível ('||
                                ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred_disp,0),'999G999G999G999G990D00'))||
                                ' - devido ao indicador de utilização de crédito ser 0-Utilização do valor total.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            elsif gt_row_apur_cred_cofins.dm_ind_desc_cred = 1 and
                  nvl(gt_row_apur_cred_cofins.vl_cred_desc,0) > nvl(gt_row_apur_cred_cofins.vl_cred_disp,0) then
                  gv_resumo_log := 'O valor do crédito descontado ('||ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred_desc,0),'999G999G999G999G990D00'))||
                                   ') não pode ser maior do que o valor de crédito disponível ('||
                                   ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred_disp,0),'999G999G999G999G990D00'))||
                                   ' - devido ao indicador de utilização de crédito ser 1-Utilização parcial do valor.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 29;
            --
            if nvl(gt_row_apur_cred_cofins.vl_sld_cred,0) <> (nvl(gt_row_apur_cred_cofins.vl_cred_disp,0) - nvl(gt_row_apur_cred_cofins.vl_cred_desc,0)) then
               gv_resumo_log := 'O valor do saldo de crédito ('||ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_sld_cred,0),'999G999G999G999G990D00'))||
                                ') difere da subtração do valor de crédito disponível e valor de crédito descontado (vl_cred_disp - vl_cred_desc) -> ('||
                                ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred_disp,0),'999G999G999G999G990D00'))||' - '||
                                ltrim(to_char(nvl(gt_row_apur_cred_cofins.vl_cred_desc,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 30;
            --
            for r_reg in c_detalhe
            loop
               if nvl(r_reg.vl_bc_cofins_tot,0) < 0 then
                  gv_resumo_log := 'No detalhe de apuração, o valor total da base de crédito ('||
                                   ltrim(to_char(nvl(r_reg.vl_bc_cofins_tot,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 31;
               --
               if nvl(r_reg.vl_bc_cofins_cum,0) < 0 then
                  gv_resumo_log := 'No detalhe de apuração, o valor da base de crédito cumulativo ('||
                                   ltrim(to_char(nvl(r_reg.vl_bc_cofins_cum,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 32;
               --
               if nvl(r_reg.vl_bc_cofins_nc,0) < 0 then
                  gv_resumo_log := 'No detalhe de apuração, o valor da base de crédito não-cumulativo ('||
                                   ltrim(to_char(nvl(r_reg.vl_bc_cofins_nc,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               elsif nvl(r_reg.vl_bc_cofins_nc,0) <> (nvl(r_reg.vl_bc_cofins_tot,0) - nvl(r_reg.vl_bc_cofins_cum,0)) then
                     gv_resumo_log := 'No detalhe de apuração, o valor da base de crédito não-cumulativo ('||
                                      ltrim(to_char(nvl(r_reg.vl_bc_cofins_nc,0),'999G999G999G999G990D00'))||') difere da subtração do valor da '||
                                      'base total e valor da base cumulativa (vl_bc_cofins_tot - vl_bc_cofins_cum) -> ('||
                                      ltrim(to_char(nvl(r_reg.vl_bc_cofins_tot,0),'999G999G999G999G990D00'))||' - '||
                                      ltrim(to_char(nvl(r_reg.vl_bc_cofins_cum,0),'999G999G999G999G990D00'))||').';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 33;
               --
               if nvl(r_reg.vl_bc_cofins,0) < 0 then
                  gv_resumo_log := 'No detalhe de apuração, o valor da base de crédito ('||
                                   ltrim(to_char(nvl(r_reg.vl_bc_cofins,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 34;
               --
               if nvl(r_reg.quant_bc_cofins_tot,0) < 0 then
                  gv_resumo_log := 'No detalhe de apuração, o valor total da base de crédito em quantidade ('||
                                   ltrim(to_char(nvl(r_reg.quant_bc_cofins_tot,0),'999G999G999G999G990D000'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 35;
               --
               if nvl(r_reg.quant_bc_cofins,0) < 0 then
                  gv_resumo_log := 'No detalhe de apuração, o valor da base de crédito em quantidade ('||
                                   ltrim(to_char(nvl(r_reg.quant_bc_cofins,0),'999G999G999G999G990D000'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 36;
               --
               if pk_csf_efd_pc.fkg_base_calc_cred_pc_cd(en_id => r_reg.basecalccredpc_id) = 13 and
                  r_reg.desc_cred is null then
                  gv_resumo_log := 'Quando o código da base de cálculo de crédito for 13-Outras Operações com Direito a Crédito, a descrição do '||
                                   'crédito deve ser informada.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
            end loop; -- c_detalhe
            --
            vn_fase := 37;
            --
            for r_reg in c_ajuste
            loop
               --
               vn_fase := 38;
               --
               if r_reg.dm_ind_aj not in (0,1) then
                  gv_resumo_log := 'No ajuste de apuração, o indicador do tipo de ajuste deve ser: 0-Ajuste de redução ou 1-Ajuste de acréscimo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 39;
               --
               if nvl(r_reg.vl_aj,0) < 0 then
                  gv_resumo_log := 'No ajuste de apuração, o valor do ajuste ('||
                                   ltrim(to_char(nvl(r_reg.vl_aj,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 40;
               --
               if r_reg.dt_ref is not null and
                  r_reg.dt_ref not between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin then
                  gv_resumo_log := 'No ajuste de apuração, a data de referência ('||to_char(r_reg.dt_ref,'ddmmrrrr')||
                                   ') deve estar dentro do período de apuração (de: '||to_char(gt_row_per_apur_cred_cofins.dt_ini,'ddmmrrrr')||
                                   ' até: '||to_char(gt_row_per_apur_cred_cofins.dt_fin,'ddmmrrrr')||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 41;
               --
               open c_det_aju( en_ajustapurcredcofins_id => r_reg.id );
               fetch c_det_aju into vn_det_valor_aj;
               close c_det_aju;
               --
               vn_fase := 42;
               --
               if nvl(r_reg.vl_aj,0) <> nvl(vn_det_valor_aj,0) then
                  gv_resumo_log := 'O valor do ajuste ('||ltrim(to_char(nvl(r_reg.vl_aj,0),'999G999G999G999G990D00'))||') não pode ser diferente da soma '||
                                   'dos valores do detalhamento dos ajustes ('||ltrim(to_char(nvl(vn_det_valor_aj,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
            end loop;
            --
            vn_fase := 43;
            --
            if gv_resumo_log is null then
               --
               vn_fase := 44;
               --| Atualizar a descrição de crédito nos detalhes de apuração
               begin
                  update det_apur_cred_cofins da
                     set da.desc_cred = ltrim(rtrim(pk_csf.fkg_converte(da.desc_cred)))
                   where da.apurcredcofins_id = gt_row_apur_cred_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar a descrição de crédito dos detalhes de apuração. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_sistema
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
               end;
               --
               vn_fase := 45;
               --| Atualizar número de documento e descrição de ajustes
               begin
                  update ajust_apur_cred_cofins aa
                     set aa.num_doc  = ltrim(rtrim(pk_csf.fkg_converte(aa.num_doc)))
                       , aa.descr_aj = ltrim(rtrim(pk_csf.fkg_converte(aa.descr_aj)))
                   where aa.apurcredcofins_id = gt_row_apur_cred_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar número de documento e descrição de ajustes (apuração). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_sistema
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
               end;
               --
               vn_fase := 46;
               --| Atualizar descrição de detalhe de ajustes e informações complementares
               begin
                  update det_ajust_apur_cred_cofins da
                     set da.descr_aj   = ltrim(rtrim(pk_csf.fkg_converte(da.descr_aj)))
                       , da.info_compl = ltrim(rtrim(pk_csf.fkg_converte(da.info_compl)))
                   where da.ajustapurcredcofins_id in (select aa.id
                                                         from ajust_apur_cred_cofins aa
                                                        where aa.apurcredcofins_id = gt_row_apur_cred_cofins.id);
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar descrição de detalhe de ajustes e informações complementares (apuração). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_sistema
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
               end;
               --
            end if;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 47;
   --
   if gv_resumo_log is null then
      --
      vn_fase := 48;
      --| Atualizar a situação da apuração
      begin
         update apur_cred_cofins ac
            set ac.dm_situacao = 3 -- Processada
          where ac.id = gt_row_apur_cred_cofins.id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao atualizar situação da apuração para 3(Processada). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                             , ev_mensagem       => gv_mensagem_log
                                             , ev_resumo         => gv_resumo_log
                                             , en_tipo_log       => erro_de_sistema
                                             , en_referencia_id  => gn_referencia_id
                                             , ev_obj_referencia => gv_obj_referencia );
      end;
      --
   else
      --
      vn_fase := 49;
      --| Atualizar a situação da apuração
      begin
         update apur_cred_cofins ac
            set ac.dm_situacao = 4 -- Erro de validação
          where ac.id = gt_row_apur_cred_cofins.id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao atualizar situação da apuração para 4(Erro de validação). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                             , ev_mensagem       => gv_mensagem_log
                                             , ev_resumo         => gv_resumo_log
                                             , en_tipo_log       => erro_de_sistema
                                             , en_referencia_id  => gn_referencia_id
                                             , ev_obj_referencia => gv_obj_referencia );
      end;
      --
   end if;
   --
   vn_fase := 50;
   --
   commit;
   --
   vn_fase := 51;
   --
   gv_resumo_log := 'Término do processo (identificador da apuração = '||en_apurcredcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      begin
         update apur_cred_cofins ac
            set ac.dm_situacao = 4 -- Erro de validação
          where ac.id = en_apurcredcofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas (geral) ao atualizar situação da apuração para 4(Erro de validação). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                             , ev_mensagem       => gv_mensagem_log
                                             , ev_resumo         => gv_resumo_log
                                             , en_tipo_log       => erro_de_sistema
                                             , en_referencia_id  => en_apurcredcofins_id
                                             , ev_obj_referencia => gv_obj_referencia );
      end;
      --
      commit;
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_validar_apur_cofins_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_apurcredcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_VALIDAR_APUR_COFINS_M500;
---------------------------------------------------------------------------------------
--| Procedimento para validar por período a apuração do crédito do COFINS - Bloco M500
--| Serão validados alguns campos dos blocos M500, M505 e M510
---------------------------------------------------------------------------------------
PROCEDURE PKB_VAL_PER_APUR_COFINS_M500( EN_PERAPURCREDCOFINS_ID IN PER_APUR_CRED_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
   cursor c_per_apur_cred_cofins( en_perapurcredcofins_id in per_apur_cred_cofins.id%type ) is
      select *
        from per_apur_cred_cofins pa
       where pa.id  = en_perapurcredcofins_id;
   --
   cursor c_apur is
      select ac.id apurcredcofins_id
        from apur_cred_cofins ac
       where ac.perapurcredcofins_id = en_perapurcredcofins_id
         and ac.dm_ind_cred_ori      = 0; -- Indicador de Credito Oriundo de: 0-Operações próprias; 1-Evento de incorporação, cisão ou fusão
   --
   cursor c_apur_f800 is
      select ac.id apurcredcofins_id
        from apur_cred_cofins ac
       where ac.perapurcredcofins_id = en_perapurcredcofins_id
         and ac.dm_ind_cred_ori      = 1; -- Indicador de Credito Oriundo de: 0-Operações próprias; 1-Evento de incorporação, cisão ou fusão
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perapurcredcofins_id
                  , ev_obj_referencia => 'PER_APUR_CRED_COFINS' );
   --
   vn_fase := 2;
   --
   gv_mensagem_log   := 'Validação por período das apurações de crédito do imposto COFINS';
   gv_obj_referencia := 'PER_APUR_CRED_COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perapurcredcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perapurcredcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perapurcredcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período de apuração deve ser informado para que a validação seja efetuada.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      --
      if pk_csf_efd_pc.fkg_qtde_apur_cofins( en_perapurcredcofins_id => en_perapurcredcofins_id ) = 0 then -- devem existir apurações geradas
         --
         vn_fase := 6;
         gv_resumo_log := 'O período de apuração informado não possui apurações geradas, portanto, a validação não será realizada.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => en_perapurcredcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 7;
         --
         gt_row_per_apur_cred_cofins := null;
         open c_per_apur_cred_cofins( en_perapurcredcofins_id => en_perapurcredcofins_id );
         fetch c_per_apur_cred_cofins into gt_row_per_apur_cred_cofins;
         close c_per_apur_cred_cofins;
         --
         vn_fase := 8;
         --
         if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                                                  , ed_data       => gt_row_per_apur_cred_cofins.dt_ini ) or  -- true
            pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                                                  , ed_data       => gt_row_per_apur_cred_cofins.dt_fin ) then -- true
            --
            vn_fase := 9;
            --
            gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gt_row_per_apur_cred_cofins.id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         else
            --
            vn_fase := 10;
            --
            for r_reg in c_apur
            loop
               --
               vn_fase := 11;
               --
               pkb_validar_apur_cofins_m500( en_apurcredcofins_id => r_reg.apurcredcofins_id );
               --
            end loop;
            --
            vn_fase := 12;
            --
            for r_reg_f800 in c_apur_f800
            loop
               --
               vn_fase := 13;
               --
               begin
                  update apur_cred_cofins ac
                     set ac.dm_situacao = 3 -- Situação: 0-Aberto; 1-Calculada; 2-Erro no cálculo; 3-Processada; 4-Erro de validação
                   where ac.id = r_reg_f800.apurcredcofins_id;
               exception
                  when others then
                     raise_application_error (-20101, 'Problemas ao atualizar a apuração para processada, originada pelos dados do Bloco F800. Erro = '||sqlerrm);
               end;
               --
            end loop;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   --
   commit;
   --
   vn_fase := 15;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perapurcredcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perapurcredcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_val_per_apur_cofins_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Validar por período a apuração do crédito do COFINS'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perapurcredcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_VAL_PER_APUR_COFINS_M500;
--------------------------------------------------------------------------------
--| Procedimento para desprocessar a apuração do crédito do COFINS - Bloco M500
--------------------------------------------------------------------------------
PROCEDURE PKB_DESPR_APUR_COFINS_M500 ( EN_APURCREDCOFINS_ID IN APUR_CRED_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   vn_empresa_id     per_apur_cred_cofins.empresa_id%type;
   vd_dt_ini         per_apur_cred_cofins.dt_ini%type;
   vd_dt_fin         per_apur_cred_cofins.dt_fin%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_apurcredcofins_id
                  , ev_obj_referencia => 'APUR_CRED_COFINS' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'APUR_CRED_COFINS';
   gv_mensagem_log   := 'Desprocesso da apuração do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador da apuração = '||en_apurcredcofins_id||').';
   gn_referencia_id  := en_apurcredcofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_apurcredcofins_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador da apuração deve ser informado para que o desprocessamento seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      -- Recupera os dados da apuração do imposto cofins utilizado como referência
      pkb_dados_apur_cofins_m500( en_apurcredcofins_id => en_apurcredcofins_id );
      gv_mensagem_log := 'Desprocessar a '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      begin
         select pa.empresa_id
              , pa.dt_ini
              , pa.dt_fin
           into vn_empresa_id
              , vd_dt_ini
              , vd_dt_fin
           from per_apur_cred_cofins pa
          where pa.id = gt_row_apur_cred_cofins.perapurcredcofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao recuperar situação e data do período de apuração da cofins (id = '||gt_row_apur_cred_cofins.perapurcredcofins_id||
                             '). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
      vn_fase := 7;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                               , ed_data       => vd_dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                               , ed_data       => vd_dt_fin ) then -- true
         --
         vn_fase := 8;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 9;
         -- Verificar se existem relacionamentos gerados pelo Bloco M600, entre os Blocos M500 e 1500
         if pk_csf_efd_pc.fkb_existe_relac_apur_cof( en_apurcredcofins_id => gt_row_apur_cred_cofins.id ) or -- true
            pk_csf_efd_pc.fkb_existe_rel_apur_contr_cof( en_apurcredcofins_id => gt_row_apur_cred_cofins.id ) then -- true
            --
            vn_fase := 10;
            --
            gv_resumo_log := 'Existe(m) relacionamento(s) entre os Blocos M500 e 1500 gerados pelo Bloco M600. Desprocesse o Bloco M600 - Consolidação da '||
                             'Apuração.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         else
            --
            vn_fase := 11;
            -- Se o DM_SITUACAO = 0 "Em aberto", manter situação = 0 "Em Aberto"
            if gt_row_apur_cred_cofins.dm_situacao in (0) then
               -- Se o DM_SITUACAO = 0 "Em aberto", manter situação = 0 "Em Aberto"
               vn_fase := 12;
               --
               begin
                  delete from det_apur_cred_cofins da
                   where da.apurcredcofins_id = gt_row_apur_cred_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao excluir detalhes da apuração. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
               vn_fase := 13;
               --
               begin
                  update apur_cred_cofins ac
                     set ac.dm_situacao   = 0 -- Aberto
                       , ac.vl_ajus_acres = 0
                       , ac.vl_ajus_reduc = 0
                       , ac.vl_cred_difer = 0
                       , ac.vl_cred_disp  = 0
                       , ac.vl_sld_cred   = 0
                   where ac.id = gt_row_apur_cred_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao zerar valores e manter a situação da apuração 0(Aberto). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
            elsif gt_row_apur_cred_cofins.dm_situacao in (1, 2) then
                  -- Se o DM_SITUACAO = 1 "Calculado" ou 2 "Erro no Cálculo", defaz para 0 "Aberto"
                  vn_fase := 14;
                  --
                  begin
                     update apur_cred_cofins ac
                        set ac.dm_situacao   = 0 -- Aberto
                          , ac.vl_ajus_acres = 0
                          , ac.vl_ajus_reduc = 0
                          , ac.vl_cred_difer = 0
                          , ac.vl_cred_disp  = 0
                          , ac.vl_sld_cred   = 0
                      where ac.id = gt_row_apur_cred_cofins.id;
                  exception
                     when others then
                        gv_resumo_log := 'Problemas ao zerar valores e situação da apuração para 0(Aberto). Erro = '||sqlerrm;
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                         , ev_mensagem        => gv_mensagem_log
                                                         , ev_resumo          => gv_resumo_log
                                                         , en_tipo_log        => erro_de_sistema
                                                         , en_referencia_id   => gn_referencia_id
                                                         , ev_obj_referencia  => gv_obj_referencia );
                  end;
                  --
            elsif gt_row_apur_cred_cofins.dm_situacao in (3, 4) then
                  -- Se o DM_SITUACAO = 3 "Processado" ou 4 "Erro de Validação", defaz para 1 "Calculado"
                  vn_fase := 15;
                  --
                  begin
                     update apur_cred_cofins ac
                        set ac.dm_situacao = 1 -- Calculado
                      where ac.id = gt_row_apur_cred_cofins.id;
                  exception
                     when others then
                        gv_resumo_log := 'Problemas ao atualizar situação da apuração para 1(Calculado). Erro = '||sqlerrm;
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                         , ev_mensagem        => gv_mensagem_log
                                                         , ev_resumo          => gv_resumo_log
                                                         , en_tipo_log        => erro_de_sistema
                                                         , en_referencia_id   => gn_referencia_id
                                                         , ev_obj_referencia  => gv_obj_referencia );
                  end;
                  --
            end if;
            --
         end if; -- existe relacionamento com Bloco 1500 e Bloco M500, gerados pelo Bloco M600
         --
      end if;
      --
   end if;
   --
   vn_fase := 16;
   --
   commit;
   --
   vn_fase := 17;
   --
   gv_resumo_log := 'Término do processo (identificador da apuração = '||en_apurcredcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_despr_apur_cofins_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_apurcredcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DESPR_APUR_COFINS_M500;
--------------------------------------------------------------------------------------------
--| Procedimento para desprocessar por período a apuração do crédito do COFINS - Bloco M500
--------------------------------------------------------------------------------------------
PROCEDURE PKB_DESPR_PER_APUR_COFINS_M500( EN_PERAPURCREDCOFINS_ID IN PER_APUR_CRED_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   vv_mensagem       varchar2(4000);
   --
   cursor c_per_apur_cred_cofins( en_perapurcredcofins_id in per_apur_cred_cofins.id%type ) is
      select *
        from per_apur_cred_cofins pa
       where pa.id  = en_perapurcredcofins_id;
   --
   cursor c_apur is
      select ac.id apurcredcofins_id
        from apur_cred_cofins ac
       where ac.perapurcredcofins_id = en_perapurcredcofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perapurcredcofins_id
                  , ev_obj_referencia => 'PER_APUR_CRED_COFINS' );
   --
   vn_fase := 2;
   --
   gv_mensagem_log   := 'Desprocesso por período das apurações de crédito do imposto COFINS';
   gv_obj_referencia := 'PER_APUR_CRED_COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perapurcredcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perapurcredcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perapurcredcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período de apuração deve ser informado para que o desprocessamento seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      --
      gt_row_per_apur_cred_cofins := null;
      open c_per_apur_cred_cofins( en_perapurcredcofins_id => en_perapurcredcofins_id );
      fetch c_per_apur_cred_cofins into gt_row_per_apur_cred_cofins;
      close c_per_apur_cred_cofins;
      --
      vn_fase := 6;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                                               , ed_data       => gt_row_per_apur_cred_cofins.dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_apur_cred_cofins.empresa_id
                                               , ed_data       => gt_row_per_apur_cred_cofins.dt_fin ) then -- true
         --
         vn_fase := 7;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gt_row_per_apur_cred_cofins.id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 8;
         --
         for r_reg in c_apur
         loop
            --
            exit when c_apur%notfound or (c_apur%notfound) is null;
            --
            vn_fase := 9;
            -- Verificar se existem relacionamentos gerados pelo Bloco M600, entre os Blocos M500 e 1500
            if pk_csf_efd_pc.fkb_existe_relac_apur_cof( en_apurcredcofins_id => r_reg.apurcredcofins_id ) or -- true
               pk_csf_efd_pc.fkb_existe_rel_apur_contr_cof( en_apurcredcofins_id => r_reg.apurcredcofins_id ) then -- true
               --
               vn_fase := 10;
               --
               vv_mensagem := 'Existe(m) relacionamento(s) entre os Blocos M500 e 1500 gerados pelo Bloco M600. Desprocesse o Bloco M600 - Consolidação da Apuração.';
               exit;
               --
            end if;
            --
            vn_fase := 11;
            --
            pkb_despr_apur_cofins_m500( en_apurcredcofins_id => r_reg.apurcredcofins_id );
            --
         end loop;
         --
         vn_fase := 12;
         --
         -- Busca o período de Consolidação da Contribuição do Cofins 
         pkb_ret_perconscontrcofins ( gt_row_per_apur_cred_cofins.empresa_id            
                                    , gt_row_per_apur_cred_cofins.dt_ini                
                                    , gt_row_per_apur_cred_cofins.dt_fin                
                                    , gt_row_per_cons_contr_cofins); 
         --
         if nvl(gt_row_per_cons_contr_cofins.id,0) = 0 then
            --
            gv_resumo_log := 'Não foi encontrado um período de consolidação (COFINS) com a situação PROCESSADA';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_resumo_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );      
            --
         end if;
         --
         vn_fase := 13;
         --
         -- Exclui a memória de Calculo do M100 --
         pkb_exclui_mem_calc_cofins ( en_perconscontrcofins_id => gt_row_per_apur_cred_cofins.id
                                    , ev_reg_controlador       => 'M500');
         --                        
         vn_fase := 14;
         --
         if vv_mensagem is not null then
            --
            vn_fase := 15;
            --
            gv_resumo_log := vv_mensagem;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gt_row_per_apur_cred_cofins.id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 16;
   --
   commit;
   --
   vn_fase := 17;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perapurcredcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perapurcredcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_despr_per_apur_cofins_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Desprocessar por período a apuração do crédito do COFINS'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perapurcredcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DESPR_PER_APUR_COFINS_M500;
--------------------------------------------------------------------------
--| Procedimento para gravar os valores nas tabelas de banco - Bloco M600
--------------------------------------------------------------------------
PROCEDURE PKB_GRAVA_DADOS_M600 IS
   --
   vn_fase    number := 0;
   vn_ind     number := 0;
   vn_ind_bi  number := 0;
   vn_ind_tri number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --| Gravar os dados de consolidação do cofins - cons_contr_cofins
   vn_ind := nvl(vt_tab_reg_m600.first,0);
   --
   vn_fase := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_ind,0) = 0 then -- índice = conscontrcofins_id
         exit;
      end if;
      --
      vn_fase := 4;
      --
      begin
         insert into cons_contr_cofins( id
                                      , dm_situacao
                                      , vl_tot_cont_nc_per
                                      , vl_tot_cred_desc
                                      , vl_tot_cred_desc_ant
                                      , vl_tot_cont_nc_dev
                                      , vl_ret_nc
                                      , vl_out_ded_nc
                                      , vl_cont_nc_rec
                                      , vl_tot_cont_cum_per
                                      , vl_ret_cum
                                      , vl_out_ded_cum
                                      , vl_cont_cum_rec
                                      , vl_tot_cont_rec
                                      , perconscontrcofins_id )
                                values( vt_tab_reg_m600(vn_ind).conscontrcofins_id
                                      , vt_tab_reg_m600(vn_ind).dm_situacao
                                      , vt_tab_reg_m600(vn_ind).vl_tot_cont_nc_per
                                      , vt_tab_reg_m600(vn_ind).vl_tot_cred_desc
                                      , vt_tab_reg_m600(vn_ind).vl_tot_cred_desc_ant
                                      , vt_tab_reg_m600(vn_ind).vl_tot_cont_nc_dev
                                      , vt_tab_reg_m600(vn_ind).vl_ret_nc
                                      , vt_tab_reg_m600(vn_ind).vl_out_ded_nc
                                      , vt_tab_reg_m600(vn_ind).vl_cont_nc_rec
                                      , vt_tab_reg_m600(vn_ind).vl_tot_cont_cum_per
                                      , vt_tab_reg_m600(vn_ind).vl_ret_cum
                                      , vt_tab_reg_m600(vn_ind).vl_out_ded_cum
                                      , vt_tab_reg_m600(vn_ind).vl_cont_cum_rec
                                      , vt_tab_reg_m600(vn_ind).vl_tot_cont_rec
                                      , gt_row_per_cons_contr_cofins.id );
      exception
         when dup_val_on_index then
            --
            vn_fase := 5;
            --
            begin
               update cons_contr_cofins cc
                  set cc.dm_situacao          = vt_tab_reg_m600(vn_ind).dm_situacao
                    , cc.vl_tot_cont_nc_per   = vt_tab_reg_m600(vn_ind).vl_tot_cont_nc_per
                    , cc.vl_tot_cred_desc     = vt_tab_reg_m600(vn_ind).vl_tot_cred_desc
                    , cc.vl_tot_cred_desc_ant = vt_tab_reg_m600(vn_ind).vl_tot_cred_desc_ant
                    , cc.vl_tot_cont_nc_dev   = vt_tab_reg_m600(vn_ind).vl_tot_cont_nc_dev
                    , cc.vl_ret_nc            = vt_tab_reg_m600(vn_ind).vl_ret_nc
                    , cc.vl_out_ded_nc        = vt_tab_reg_m600(vn_ind).vl_out_ded_nc
                    , cc.vl_cont_nc_rec       = vt_tab_reg_m600(vn_ind).vl_cont_nc_rec
                    , cc.vl_tot_cont_cum_per  = vt_tab_reg_m600(vn_ind).vl_tot_cont_cum_per
                    , cc.vl_ret_cum           = vt_tab_reg_m600(vn_ind).vl_ret_cum
                    , cc.vl_out_ded_cum       = vt_tab_reg_m600(vn_ind).vl_out_ded_cum
                    , cc.vl_cont_cum_rec      = vt_tab_reg_m600(vn_ind).vl_cont_cum_rec
                    , cc.vl_tot_cont_rec      = vt_tab_reg_m600(vn_ind).vl_tot_cont_rec
                    , cc.perconscontrcofins_id   = gt_row_per_cons_contr_cofins.id
                where cc.id = vt_tab_reg_m600(vn_ind).conscontrcofins_id;
            exception
               when others then
                  --
                  gv_resumo_log := 'Problemas ao alterar consolidação (id='||vt_tab_reg_m600(vn_ind).conscontrcofins_id||' fase = '||vn_fase||'). Erro = '||sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico.id%type;
                  begin
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
                  exception
                     when others then
                        null;
                  end;
                  --
                  raise_application_error (-20101, gv_resumo_log);
                  --
            end;
         when others then
            --
            gv_resumo_log := 'Problemas ao incluir consolidação (id='||vt_tab_reg_m600(vn_ind).conscontrcofins_id||' fase = '||vn_fase||'). Erro = '||sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_sistema
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
            raise_application_error (-20101, gv_resumo_log);
            --
      end;
      --
      vn_fase := 6;
      --
      if vn_ind = vt_tab_reg_m600.last then
         exit;
      else
         vn_ind := vt_tab_reg_m600.next(vn_ind);
      end if;
      --
   end loop; -- final do processo de consolidação
   --
   vn_fase := 7;
   --| Gravar os dados de detalhe de consolidação do cofins - det_cons_contr_cofins
   vn_ind := nvl(vt_bi_tab_reg_m610.first,0);
   --
   vn_fase := 8;
   --
   loop
      --
      vn_fase := 9;
      --
      if nvl(vn_ind,0) = 0 then -- índice = conscontrcofins_id
         exit;
      end if;
      --
      vn_ind_bi := nvl(vt_bi_tab_reg_m610(vn_ind).first,0); -- índice = detconscontrcofins_id
      --
      vn_fase := 10;
      --
      loop
         --
         vn_fase := 11;
         --
         if nvl(vn_ind_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 12;
         --
         begin
            insert into det_cons_contr_cofins( id
                                             , conscontrcofins_id
                                             , contrsocapurpc_id
                                             , vl_rec_brt
                                             , vl_bc_cont
                                             , aliq_cofins
                                             , quant_bc_cofins
                                             , vl_aliq_cofins_quant
                                             , vl_cont_apur
                                             , vl_ajust_acrec
                                             , vl_ajust_reduc
                                             , vl_cont_difer
                                             , vl_cont_difer_ant
                                             , vl_cont_per )
                                       values( vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).detconscontrcofins_id
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).conscontrcofins_id
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).contrsocapurpc_id
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).vl_rec_brt
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).vl_bc_cont
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).aliq_cofins
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).quant_bc_cofins
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).aliq_cofins_quant
                                             , (((nvl(vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).vl_bc_cont_ajus,0) * nvl(vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).aliq_cofins,0)) / 100) +
                                                (nvl(vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).quant_bc_cofins,0) * nvl(vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).aliq_cofins_quant,0)))
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).vl_ajust_acrec
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).vl_ajust_reduc
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).vl_cont_difer
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).vl_cont_difer_ant
                                             , vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).vl_cont_per );
         exception
            when others then
               --
               gv_resumo_log := 'Problemas ao incluir detalhes de consolidação (id='||vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).detconscontrcofins_id||
                                ' fase = '||vn_fase||'). Erro = '||sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
               raise_application_error (-20101, gv_resumo_log);
               --
         end;
         --
         vn_fase := 13;
         --
         if vn_ind_bi = vt_bi_tab_reg_m610(vn_ind).last then
            exit;
         else
            vn_ind_bi := vt_bi_tab_reg_m610(vn_ind).next(vn_ind_bi);
         end if;
         --
      end loop; -- final do processo dos detalhes da consolidação
      --
      vn_fase := 14;
      --
      if vn_ind = vt_bi_tab_reg_m610.last then
         exit;
      else
         vn_ind := vt_bi_tab_reg_m610.next(vn_ind);
      end if;
      --
   end loop; -- final do processo de consolidação
   --
   vn_fase := 15;
   --| Gravar os dados de ajuste dos detalhes da consolidação do cofins - ajust_contr_cofins_apur
   vn_ind := nvl(vt_tri_tab_reg_m620.first,0);
   --
   vn_fase := 16;
   --
   loop
      --
      vn_fase := 17;
      --
      if nvl(vn_ind,0) = 0 then -- índice = conscontrcofins_id
         exit;
      end if;
      --
      vn_ind_bi := nvl(vt_tri_tab_reg_m620(vn_ind).first,0); -- índice = detconscontrcofins_id
      --
      vn_fase := 18;
      --
      loop
         --
         vn_fase := 19;
         --
         if nvl(vn_ind_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 20;
         --
         vn_ind_tri := nvl(vt_tri_tab_reg_m620(vn_ind)(vn_ind_bi).first,0);
         --
         vn_fase := 21;
         --
         loop
            --
            vn_fase := 22;
            --
            if nvl(vn_ind_tri,0) = 0 then -- índice = dm_ind_aj
               exit;
            end if;
            --
            vn_fase := 23;
            --
            begin
               insert into ajust_contr_cofins_apur( id
                                                  , detconscontrcofins_id
                                                  , dm_ind_aj
                                                  , vl_aj
                                                  , ajustcontrpc_id
                                                  , num_doc
                                                  , descr_aj
                                                  , dt_ref )
                                            values( vt_tri_tab_reg_m620(vn_ind)(vn_ind_bi)(vn_ind_tri).ajustcontrcofinsapur_id
                                                  , vn_ind_bi -- detconscontrcofins_id
                                                  , (vn_ind_tri - 1) -- ajuste de redução ou acréscimo - para compor como índice não podemos utilizar como zero
                                                  , vt_tri_tab_reg_m620(vn_ind)(vn_ind_bi)(vn_ind_tri).vl_ajuste
                                                  , pk_csf_efd_pc.fkg_id_cd_ajustcontrpc('06') -- Estorno
                                                  , null
                                                  , 'Referente ao estorno do(s) CFOP(s) '||vt_tri_tab_reg_m620(vn_ind)(vn_ind_bi)(vn_ind_tri).cd_cfop
                                                  , gt_row_per_cons_contr_cofins.dt_fin );
            exception
               when others then
                  --
                  gv_resumo_log := 'Problemas ao incluir ajuste/detalhes de consolidação (id='||vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).detconscontrcofins_id||
                                   ' fase = '||vn_fase||'). Erro = '||sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico.id%type;
                  begin
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
                  exception
                     when others then
                        null;
                  end;
                  --
                  raise_application_error (-20101, gv_resumo_log);
                  --
            end;
            --
            vn_fase := 24;
            --
            begin
               insert into det_ajust_contr_cofins_apur( id
                                                      , ajustcontrcofinsapur_id
                                                      , det_valor_aj
                                                      , codst_id
                                                      , det_bc_cred
                                                      , det_aliq
                                                      , dt_oper_aj
                                                      , descr_aj
                                                      , planoconta_id
                                                      , info_compl )
                                                values( detajustcontrcofinsapur_seq.nextval
                                                      , vt_tri_tab_reg_m620(vn_ind)(vn_ind_bi)(vn_ind_tri).ajustcontrcofinsapur_id
                                                      , vt_tri_tab_reg_m620(vn_ind)(vn_ind_bi)(vn_ind_tri).vl_ajuste -- det_valor_aj
                                                      , null -- codst_id
                                                      , null -- det_bc_cred
                                                      , null -- det_aliq
                                                      , gt_row_per_cons_contr_cofins.dt_fin -- dt_oper_aj
                                                      , 'Referente ao estorno do(s) CFOP(s) '||vt_tri_tab_reg_m620(vn_ind)(vn_ind_bi)(vn_ind_tri).cd_cfop -- descr_aj
                                                      , null -- planoconta_id
                                                      , null ); -- info_compl
            exception
               when others then
                  --
                  gv_resumo_log := 'Problemas ao incluir detalhe do ajuste/detalhes de consolidação (detconscontrcofins_id = '||
                                   vt_bi_tab_reg_m610(vn_ind)(vn_ind_bi).detconscontrcofins_id||', ajustcontrcofinsapur_id = '||
                                   vt_tri_tab_reg_m620(vn_ind)(vn_ind_bi)(vn_ind_tri).ajustcontrcofinsapur_id||' fase = '||vn_fase||'). Erro = '||sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico.id%type;
                  begin
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
                  exception
                     when others then
                        null;
                  end;
                  --
                  raise_application_error (-20101, gv_resumo_log);
                  --
            end;
            --
            vn_fase := 25;
            --
            if vn_ind_tri = vt_tri_tab_reg_m620(vn_ind)(vn_ind_bi).last then
               exit;
            else
               vn_ind_tri := vt_tri_tab_reg_m620(vn_ind)(vn_ind_bi).next(vn_ind_tri);
            end if;
            --
         end loop; -- final do processo dos ajustes dos detalhes da consolidação
         --
         vn_fase := 26;
         --
         if vn_ind_bi = vt_tri_tab_reg_m620(vn_ind).last then
            exit;
         else
            vn_ind_bi := vt_tri_tab_reg_m620(vn_ind).next(vn_ind_bi);
         end if;
         --
      end loop; -- final do processo dos detalhes da consolidação
      --
      vn_fase := 27;
      --
      if vn_ind = vt_tri_tab_reg_m620.last then
         exit;
      else
         vn_ind := vt_tri_tab_reg_m620.next(vn_ind);
      end if;
      --
   end loop; -- final do processo de consolidação
   --
   vn_fase := 28;
   --
   commit;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_grava_dados_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_GRAVA_DADOS_M600;
-----------------------------------------------------------------
--| Procedimento para armazenar os dados em vetores - Bloco M600
-----------------------------------------------------------------
procedure pkb_monta_vetor_m600(en_ch_conc_cs_cr_aliq in number,
                               en_contrsocapurpc_id  in number,
                               en_aliq_cofins        in number,
                               en_aliq_cofins_quant  in number,
                               en_vl_rec_brt         in number,
                               en_vl_bc_cont         in number,
                               en_quant_bc_cofins    in number,
                               en_vl_cont_apur       in number) is
   --
   vn_fase                    number := 0;
   vb_achou                   boolean := false;
   vn_conscontrcofins_id      number;
   vn_ch_conc_cs_cr_aliq      number;
   vn_ch_conc_cs_cr_aliq_m600 number := 1;
   --
BEGIN
   --
   vn_fase := 1;
   
   --
   --| Montar bloco M600
   begin
      vb_achou := vt_tab_reg_m600.exists(vn_ch_conc_cs_cr_aliq_m600);
   exception
      when others then
         vb_achou := false;
   end;
   --
   vn_fase := 2;
   --
   if not vb_achou then
      --
      vn_fase := 3;
      --
      begin
         select conscontrcofins_seq.nextval
           into vn_conscontrcofins_id
           from dual;
      exception
         when others then
            vn_conscontrcofins_id := null;
      end;
      --
      vn_fase := 4;
      --
      if nvl(vn_conscontrcofins_id,0) > 0 then
         --
         vn_fase := 5;
         --
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).conscontrcofins_id   := vn_conscontrcofins_id;
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).dm_situacao          := 0; -- 0-aberto
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_tot_cont_nc_per   := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_tot_cred_desc     := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_tot_cred_desc_ant := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_tot_cont_nc_dev   := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_ret_nc            := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_out_ded_nc        := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_cont_nc_rec       := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_tot_cont_cum_per  := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_ret_cum           := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_out_ded_cum       := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_cont_cum_rec      := 0; -- processo de cálculo
         vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).vl_tot_cont_rec      := 0; -- processo de cálculo
         --
      end if;
      --
   end if;
   --
   vn_fase := 6;
   --
   if vn_ch_conc_cs_cr_aliq_m600 is not null then -- gerar os detalhes da consolidação
      --
      vn_fase := 7;
      --
      vn_conscontrcofins_id := vt_tab_reg_m600(vn_ch_conc_cs_cr_aliq_m600).conscontrcofins_id;
      vn_ch_conc_cs_cr_aliq := en_contrsocapurpc_id||replace(replace(nvl(en_aliq_cofins,0),',',''),'.','')||
                               replace(replace(nvl(en_aliq_cofins_quant,0),',',''),'.','');
      --
      vn_fase := 8;
      --| Montar bloco M610
      begin
         vb_achou := vt_bi_tab_reg_m610(vn_conscontrcofins_id).exists(vn_ch_conc_cs_cr_aliq);
      exception
         when others then
            vb_achou := false;
      end;
      --
      vn_fase := 8;
      --
      if not vb_achou then
         --
         vn_fase := 9;
         --
         begin
            select detconscontrcofins_seq.nextval
              into vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).detconscontrcofins_id
              from dual;
         exception
            when others then
               vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).detconscontrcofins_id := null;
         end;
         --
         vn_fase := 10;
         --
         if nvl(vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).detconscontrcofins_id,0) > 0 then
            --
            vn_fase := 11;
            --
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).conscontrcofins_id       := vn_conscontrcofins_id;
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).contrsocapurpc_id        := en_contrsocapurpc_id;
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).aliq_cofins              := en_aliq_cofins;
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).aliq_cofins_quant        := en_aliq_cofins_quant;
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_rec_brt               := en_vl_rec_brt;
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_bc_cont               := en_vl_bc_cont;
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).quant_bc_cofins          := en_quant_bc_cofins;
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_cont_apur             := en_vl_cont_apur;
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_ajust_acrec           := 0; -- processo de cálculo
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_ajust_reduc           := 0; -- processo de cálculo
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_cont_difer            := 0; -- processo de cálculo
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_cont_difer_ant        := 0; -- processo de cálculo
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_cont_per              := 0; -- processo de cálculo
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_ajus_acres_bc_cofins  := 0; -- processo de cálculo
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_ajus_reduc_bc_cofins  := 0; -- processo de cálculo
            vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_bc_cont_ajus          := 0; -- processo de cálculo
            --
         end if;
      else
         --
         vn_fase := 12;
         --
         vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_rec_brt      := vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_rec_brt   + en_vl_rec_brt;
         vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_bc_cont      := vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_bc_cont   + en_vl_bc_cont;
         vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).quant_bc_cofins := vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).quant_bc_cofins + en_quant_bc_cofins;
         vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_cont_apur    := vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).vl_cont_apur + en_vl_cont_apur;
         --
      end if;
      --
   end if; -- gerar somente o cabeçalho da consolidação, não gerar os detalhes
   --
exception
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_monta_vetor_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
end pkb_monta_vetor_m600;
-----------------------------------------------------------------
--| Procedimento para armazenar os dados em vetores - Bloco M620
-----------------------------------------------------------------
PROCEDURE PKB_MONTA_VETOR_M620( EN_CH_CONC_CS_CR_ALIQ IN NUMBER
                              , EN_CONTRSOCAPURPC_ID  IN NUMBER
                              , EN_DM_IND_AJ          IN NUMBER
                              , EN_ALIQ_cofins           IN NUMBER
                              , EN_ALIQ_cofins_QUANT     IN NUMBER
                              , EN_VL_AJUSTE          IN NUMBER
                              , EN_CD_CFOP            IN NUMBER ) IS
   --
   vn_fase               number := 0;
   vb_achou              boolean := false;
   vn_conscontrcofins_id    number;
   vn_ch_conc_cs_cr_aliq number;
   vn_detconscontrcofins_id number;
   --
BEGIN
   --
   vn_fase := 1;
   --| Recuperar bloco m600
   begin
      vb_achou := vt_tab_reg_m600.exists(en_ch_conc_cs_cr_aliq);
   exception
      when others then
         vb_achou := false;
   end;
   --
   vn_fase := 2;
   --
   if not vb_achou then
      --
      vn_fase := 3;
      --
      pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => en_ch_conc_cs_cr_aliq
                          , en_contrsocapurpc_id  => en_contrsocapurpc_id
                          , en_aliq_cofins        => en_aliq_cofins
                          , en_aliq_cofins_quant  => en_aliq_cofins_quant
                          , en_vl_rec_brt         => 0
                          , en_vl_bc_cont         => 0
                          , en_quant_bc_cofins    => 0
                          , en_vl_cont_apur       => 0 );
      --
      vn_fase := 4;
      --| Recuperar bloco M600
      begin
         vb_achou := vt_tab_reg_m600.exists(en_ch_conc_cs_cr_aliq);
      exception
         when others then
            vb_achou := false;
      end;
      --
   end if;
   --
   vn_fase := 5;
   --
   if vb_achou then
      --
      vn_fase := 5;
      --
      vn_conscontrcofins_id    := vt_tab_reg_m600(en_ch_conc_cs_cr_aliq).conscontrcofins_id;
      vn_ch_conc_cs_cr_aliq := en_contrsocapurpc_id||replace(replace(nvl(en_aliq_cofins,0),',',''),'.','')||replace(replace(nvl(en_aliq_cofins_quant,0),',',''),'.','');
      --
      vn_fase := 7;
      --| Recuperar bloco m610
      begin
         vb_achou := vt_bi_tab_reg_m610(vn_conscontrcofins_id).exists(vn_ch_conc_cs_cr_aliq);
      exception
         when others then
            vb_achou := false;
      end;
      --
      vn_fase := 8;
      --
      if vb_achou then
         --
         vn_fase := 9;
         --
         vn_detconscontrcofins_id := vt_bi_tab_reg_m610(vn_conscontrcofins_id)(vn_ch_conc_cs_cr_aliq).detconscontrcofins_id;
         --
         vn_fase := 10;
         --| Montar bloco m620
         begin
            vb_achou := vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id).exists(en_dm_ind_aj);
         exception
            when others then
               vb_achou := false;
         end;
         --
         vn_fase := 11;
         --
         if not vb_achou then
            --
            vn_fase := 12;
            --
            begin
               select ajustcontrcofinsapur_seq.nextval
                 into vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id)(en_dm_ind_aj).ajustcontrcofinsapur_id
                 from dual;
            exception
               when others then
                  vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id)(en_dm_ind_aj).ajustcontrcofinsapur_id := null;
            end;
            --
            vn_fase := 13;
            --
            if nvl(vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id)(en_dm_ind_aj).ajustcontrcofinsapur_id,0) <> 0 then
               --
               vn_fase := 14;
               --
               vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id)(en_dm_ind_aj).dm_ind_aj := en_dm_ind_aj;
               vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id)(en_dm_ind_aj).vl_ajuste := nvl(en_vl_ajuste,0);
               vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id)(en_dm_ind_aj).cd_cfop   := en_cd_cfop;
               --
            end if;
            --
         else
            --
            vn_fase := 15;
            --
            vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id)(en_dm_ind_aj).vl_ajuste := nvl(vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id)(en_dm_ind_aj).vl_ajuste,0) + nvl(en_vl_ajuste,0);
            vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id)(en_dm_ind_aj).cd_cfop   := vt_tri_tab_reg_m620(vn_conscontrcofins_id)(vn_detconscontrcofins_id)(en_dm_ind_aj).cd_cfop||', '||en_cd_cfop;
            --
         end if; -- Montar bloco m620
         --
      end if; -- Recuperar bloco m610
      --
   end if; -- Recuperar bloco m600
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_monta_vetor_m620 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_MONTA_VETOR_M620;
---------------------------------------------------------------------------------------------------------
--| Procedimento recupera os dados dos processos - Bloco M600 - Blocos F - Demais Documentos e Operações
---------------------------------------------------------------------------------------------------------
PROCEDURE PKB_MONTA_DADOS_M600_F IS
   --
   vn_fase                  number := 0;
   vn_contrsocapurpc_id     contr_soc_apur_pc.id%type;
   vv_cd_contrsocapurpc     contr_soc_apur_pc.cd%type;
   vn_vl_rec_brt            number := 0;
   vn_vl_bc_cont            number := 0;
   vn_vl_cont_apur          number := 0;
   vn_quant_bc_cofins       number := 0;
   vv_cabec_log             varchar2(1000) := null;
   vn_ch_conc_cs_cr_aliq    number := 0;
   vn_cfop_id               number := 0;
   vn_dm_ind_aj             number := 0;
   vn_vl_aj                 number := 0;
   vt_mem_calc_apur_cofins  mem_calc_apur_cofins%rowtype;
   vn_registrefdpc_id       number := null;
   --
   --| Recuperar a empresa e suas filiais
   cursor c_empresa is
      select em.id empresa_id
           , em.dm_dt_escr_dfepoe
        from empresa em
       start with em.id = gt_row_per_cons_contr_cofins.empresa_id
     connect by prior em.id = em.ar_empresa_id;
   --
   --| DEMAIS DOCUMENTOS E OPERAÇÕES GERADORAS DE CONTRIBUIÇÃO E CRÉDITOS -- para consolidação
   cursor c_f100( en_empresa_id in empresa.id%type ) is
      select dd.id demdocopergercc_id
           , dd.codst_id_cofins codst_id
           , dd.dm_ind_orig_cred
           , dd.dm_ind_oper
           , dd.dt_oper
           , nvl(dd.aliq_cofins,0) aliq_cofins
           , nvl(dd.vl_oper,0) vl_rec_brt
           , nvl(dd.vl_bc_cofins,0) vl_bc_cont
           , 0 quant_bc_cofins
           , 0 aliq_cofins_quant
           , cst.cod_st
           -- colunas utilizadas na memória de calculo --
           , case dd.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , 0                                                nro_item
           , decode(nvl(dd.vl_bc_cofins,0), 0, 1, 1)          tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(dd.vl_bc_cofins,0)                           vl_base_calc
           , 0                                                qtde_base_calc_prod
           , 0                                                vl_aliq_cofins_quant
           , nvl(dd.vl_cofins,0)                              vl_imp_trib
           , 0                                                dm_ind_emit
        from dem_doc_oper_ger_cc dd
           , cod_st              cst
       where dd.empresa_id    = en_empresa_id
         and dd.dt_oper between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and dd.dm_st_proc    = 1 -- validado
         and dd.dm_ind_oper  in (1,2)
         and cst.id           = dd.codst_id_cofins
       order by dd.id
           , dd.codst_id_cofins
           , dd.dm_ind_orig_cred
           , nvl(dd.aliq_cofins,0);
   --
   -- VL_TOT_REC do registro F200 - Atividade Imobiliária
   cursor c_f200( en_empresa_id in empresa.id%type ) is
      select oa.id operativimobvend_id
           , oa.codst_id_cofins codst_id
           , oa.dm_ind_oper
           , oa.dt_oper
           , nvl(oa.aliq_cofins,0) aliq_cofins
           , nvl(oa.vl_tot_rec,0) vl_rec_brt
           , nvl(oa.vl_bc_cofins,0) vl_bc_cont
           , 0 quant_bc_cofins
           , 0 aliq_cofins_quant
           , cs.cod_st
           -- colunas utilizadas na memória de calculo --
           , case oa.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , 0                                                nro_item
           , decode(nvl(oa.vl_bc_cofins,0), 0, 1, 1)          tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(oa.vl_bc_pis,0)                              vl_base_calc
           , 0                                                qtde_base_calc_prod
           , 0                                                vl_aliq_cofins_quant
           , nvl(oa.vl_cofins,0)                              vl_imp_trib
           , 0                                                dm_ind_emit
        from oper_ativ_imob_vend oa
           , cod_st              cs
       where oa.empresa_id    = en_empresa_id
         and oa.dt_oper between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and oa.dm_st_proc    = 1 -- validado
         and cs.id            = oa.codst_id_cofins
       order by oa.id
           , oa.codst_id_cofins
           , nvl(oa.aliq_cofins,0);
   --
   -- VL_REC_CAIXA do registro F500 - Consolidação das Operações da Pessoa Jurídica Submetida ao Regime de Tributação com Base no Lucro Presumido  Incidência do PIS/Pasep e da Cofins pelo Regime de Caixa
   cursor c_f500( en_empresa_id in empresa.id%type ) is
      select co.id consoperinspcrc_id
           , co.codst_id_cofins codst_id
           , co.dt_ref
           , nvl(co.aliq_cofins,0) aliq_cofins
           , nvl(co.vl_rec_caixa,0) vl_rec_brt
           , nvl(co.vl_bc_cofins,0) vl_bc_cont
           , 0 quant_bc_cofins
           , 0 aliq_cofins_quant
           , cs.cod_st
           -- colunas utilizadas na memória de calculo --
           , 'C'                                              tipo_operacao
           , 0                                                nro_item
           , decode(nvl(co.vl_bc_cofins,0), 0, 1, 1)          tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(co.vl_bc_cofins,0)                           vl_base_calc
           , 0                                                qtde_base_calc_prod
           , 0                                                vl_aliq_cofins_quant
           , nvl(co.vl_cofins,0)                              vl_imp_trib
           , 0                                                dm_ind_emit
        from cons_oper_ins_pc_rc co
           , cod_st              cs
       where co.empresa_id   = en_empresa_id
         and co.dt_ref between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and co.dm_st_proc   = 1 -- validado
         and cs.id           = co.codst_id_cofins;
   --
   -- VL_BC_COFINS do registro F550 - CONSOL.DAS OPER.DA PJ SUBMETIDA AO REGIME DE TRIB.BASE LUCRO PRESUMIDO  INCIDÊNCIA DO PIS/PASEP E DA COFINS REG.COMPETÊNCIA
   cursor c_f550( en_empresa_id in empresa.id%type ) is
      select co.id consoperinspcrcomp_id
           , co.codst_id_cofins codst_id
           , co.dt_ref
           , nvl(co.aliq_cofins,0) aliq_cofins
           , nvl(co.vl_rec_comp,0) vl_rec_brt
           , nvl(co.vl_bc_cofins,0) vl_bc_cont
           , 0 quant_bc_cofins
           , 0 aliq_cofins_quant
           , cs.cod_st
           -- colunas utilizadas na memória de calculo --
           , 'C'                                              tipo_operacao
           , 0                                                nro_item
           , decode(nvl(co.vl_bc_cofins,0), 0, 1, 1)          tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(co.vl_bc_cofins,0)                           vl_base_calc
           , 0                                                qtde_base_calc_prod
           , 0                                                vl_aliq_cofins_quant
           , nvl(co.vl_cofins,0)                              vl_imp_trib
           , 0                                                dm_ind_emit
        from cons_oper_ins_pc_rcomp co
           , cod_st                 cs
       where co.empresa_id   = en_empresa_id
         and co.dt_ref between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and co.dm_st_proc   = 1 -- validado
         and cs.id           = co.codst_id_cofins
       order by co.id
           , co.codst_id_cofins
           , nvl(co.aliq_cofins,0);
   --
BEGIN
   --
   vn_fase := 1;
   --| Demais documentos e operações geradoras de contribuição e créditos - Bloco F100
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 2;
      --
      if ((nvl(gn_dm_cod_inc_trib,0) in (1,3)) or -- 1-Escrituração de operações com incidência exclusivamente no regime não-cumulativo ou 3-Escrituração de operações com incidência nos regimes nãocumulativo e cumulativo
          (nvl(gn_dm_cod_inc_trib,0) = 2 and gn_dm_ind_reg_cum = 9)) then -- 2-Escrituração de operações com incidência exclusivamente no regime cumulativo, 9-Regime de Competência - Escrituração detalhada, com base nos registros dos Blocos A, C, D e F
         --
         vn_fase := 3;
         -- processo para consolidação - Bloco F100
         for r_reg in c_f100( en_empresa_id => r_empresa.empresa_id )
         loop
            --
            exit when c_f100%notfound or (c_f100%notfound is null);
            --
            vn_fase := 3.1;
            --
            vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => gn_tipoimp_id                 -- identificador do tipo de imposto
                                                                         , en_ind_orig_cred   => nvl(r_reg.dm_ind_orig_cred,0) -- indicador de crédito 0-Oper.Mercado Interno, 1-Oper.Importação
                                                                         , en_codst_id        => r_reg.codst_id                -- identificador do código ST
                                                                         , en_vl_aliq         => r_reg.aliq_cofins             -- valor de alíquota em percentual
                                                                         , en_vl_aliq_quant   => 0                             -- valor da alíquota por unidade de produto
                                                                         , en_dm_cod_inc_trib => gn_dm_cod_inc_trib );         -- indicador da incidência tributária
            --
            vn_fase := 3.2;
            --
            if nvl(vn_contrsocapurpc_id,0) <> 0 then
               --
               vn_fase := 3.3;
               --
               vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
               --
               vn_fase := 3.4;
               --
               if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') and
                  (r_reg.cod_st in ('01', '02', '03', '04', '05') and nvl(r_reg.aliq_cofins,0) <> 0) or
                  (r_reg.cod_st in ('49')) then
                  vn_vl_rec_brt := r_reg.vl_rec_brt;
               else
                  vn_vl_rec_brt := 0;
               end if;
               --
               vn_fase := 3.5;
               -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
               -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
               if vv_cd_contrsocapurpc in ('03', '53') then
                  vn_vl_bc_cont := 0;
               elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao cofins/Pasep exclusivamente com base na Folha de Salários
                     vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') then
                     vn_vl_bc_cont := r_reg.vl_bc_cont;
               else
                  vn_vl_bc_cont := 0;
               end if;
               --
               vn_fase := 3.6;
               --
               if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31') then
                  vn_quant_bc_cofins := null;
               elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                     vn_quant_bc_cofins := r_reg.quant_bc_cofins;
               else
                  vn_quant_bc_cofins := null;
               end if;
               --
               vn_fase := 3.7;
               --
               if nvl(vn_vl_bc_cont,0) <> 0 then
                  vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
               elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                     vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
               else
                  vn_vl_cont_apur := 0;
               end if;
               --
               vn_fase := 3.8;
               --
               if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
                  vn_ch_conc_cs_cr_aliq := 1;
               elsif vv_cd_contrsocapurpc in ('51') then
                     vn_ch_conc_cs_cr_aliq := 1;
               else
                  vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
               end if;
               --
               vn_fase := 3.9;
               --
               pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                   , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                   , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                   , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                   , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                   , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                   , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                   , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
               --
            else
               --
               vn_fase := 3.10;
               --
               vv_cabec_log := '. Demais documentos - Bloco F100 -> Indicador de operação: '||pk_csf.fkg_dominio( ev_dominio => 'DEM_DOC_OPER_GER_CC.DM_IND_OPER'
                                                                                                                , ev_vl      => r_reg.dm_ind_oper )||
                               ' Data da operação: '||to_date(r_reg.dt_oper,'dd/mm/rrrr')||' Código de ST = '||pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
               --
               gv_resumo_log := 'Demais documentos e operações geradoras de contribuição e créditos - Bloco F100. Código de contribuição social não encontrado. '||
                                'Parâmetros: Tipo de imposto = COFINS, Indicador de crédito = '||r_reg.dm_ind_orig_cred||', Código de ST = '||
                                pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id )||', Alíquota em % = '||to_char(r_reg.aliq_cofins,'999G990D0000')||
                                ', Alíquota em qtde = 0,000, Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_validacao
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
            end if;
            --
            -- Monta a memória de calculo --------------------------------
            vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F100');
            vt_mem_calc_apur_cofins                       := null;
            vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
            vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
            vt_mem_calc_apur_cofins.referencia_id         := r_reg.demdocopergercc_id;
            vt_mem_calc_apur_cofins.ref_item_id           := null;
            vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
            vt_mem_calc_apur_cofins.ident_doc             := 'Demais Documentos ID (F100): '||r_reg.demdocopergercc_id; --69023
            vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
            vt_mem_calc_apur_cofins.vl_base_calc          := r_reg.vl_bc_cont;  -- 1-alíq.perc, 2-alíq.qtde
            vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
            vt_mem_calc_apur_cofins.aliq_prod             := 0;
            vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
            vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
            pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
            --
         end loop; -- cursor c_f100
         --
      end if;
      --
      vn_fase := 4;
      -- processo para consolidação - Bloco F200 - independe do indicador de regime de competência
      for r_reg in c_f200( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_f200%notfound or (c_f200%notfound is null);
         --
         vn_fase := 4.1;
         --
         vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => gn_tipoimp_id      -- identificador do tipo de imposto
                                                                      , en_ind_orig_cred   => 0                  -- indicador de crédito 0-Oper.Mercado Interno, 1-Oper.Importação
                                                                      , en_codst_id        => r_reg.codst_id     -- identificador do código ST
                                                                      , en_vl_aliq         => r_reg.aliq_cofins  -- valor de alíquota em percentual
                                                                      , en_vl_aliq_quant   => 0                  -- valor da alíquota por unidade de produto
                                                                      , en_dm_cod_inc_trib => gn_dm_cod_inc_trib -- indicador da incidência tributária
                                                                      , ev_bloco           => 'F200' );          -- bloco a ser processado
         --
         vn_fase := 4.2;
         --
         if nvl(vn_contrsocapurpc_id,0) <> 0 then
            --
            vn_fase := 4.3;
            --
            vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
            --
            vn_fase := 4.4;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32', '04', '54') and
               (r_reg.cod_st in ('01', '02', '03', '04', '05') and nvl(r_reg.aliq_cofins,0) <> 0) or
               (r_reg.cod_st in ('49')) then
               vn_vl_rec_brt := r_reg.vl_rec_brt;
            else
               vn_vl_rec_brt := 0;
            end if;
            --
            vn_fase := 4.5;
            -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
            -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
            if vv_cd_contrsocapurpc in ('03', '53') then
               vn_vl_bc_cont := 0;
            elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao PIS/Pasep exclusivamente com base na Folha de Salários
                  vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32', '04', '54') then
                  vn_vl_bc_cont := r_reg.vl_bc_cont;
            else
               vn_vl_bc_cont := 0;
            end if;
            --
            vn_fase := 4.6;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '04', '54') then
               vn_quant_bc_cofins := null;
            elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                  vn_quant_bc_cofins := r_reg.quant_bc_cofins;
            else
               vn_quant_bc_cofins := null;
            end if;
            --
            vn_fase := 4.7;
            --
            if nvl(vn_vl_bc_cont,0) <> 0 then
               vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
            elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                  vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
            else
               vn_vl_cont_apur := 0;
            end if;
            --
            vn_fase := 4.8;
            --
            if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
               vn_ch_conc_cs_cr_aliq := 1;
            elsif vv_cd_contrsocapurpc in ('51', '54') then
                  vn_ch_conc_cs_cr_aliq := 1;
            else
               vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
            end if;
            --
            vn_fase := 4.9;
            --
            pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
            --
         else
            --
            vn_fase := 4.10;
            --
            vv_cabec_log := '. Demais documentos - Bloco F200 -> Indicador de operação: '||pk_csf.fkg_dominio( ev_dominio => 'OPER_ATIV_IMOB_VEND.DM_IND_OPER'
                                                                                                             , ev_vl      => r_reg.dm_ind_oper )||
                            ' Data da operação: '||to_date(r_reg.dt_oper,'dd/mm/rrrr')||' Código de ST = '||pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
            --
            gv_resumo_log := 'Demais documentos e operações geradoras de contribuição e créditos - Bloco F200. Código de contribuição social não encontrado. '||
                             'Parâmetros: Tipo de imposto = COFINS, Indicador de crédito = 0-Oper.Mercado Interno, Código de ST = '||
                             pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id )||', Alíquota em % = '||to_char(r_reg.aliq_cofins,'999G990D0000')||
                             ', Alíquota em qtde = 0,000, Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_validacao
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
         end if;
         --
         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F200');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.operativimobvend_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Doc. Atividade Imobiliária ID: '||r_reg.operativimobvend_id;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
         vt_mem_calc_apur_cofins.aliq_prod             := nvl(r_reg.vl_aliq_cofins_quant, 0);
         vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
         vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
         --
      end loop; -- cursor c_f200
      --
      vn_fase := 5;
      --
      if gn_dm_cod_inc_trib = 2 and -- Escrituração de operações com incidência exclusivamente no regime cumulativo
         gn_dm_ind_reg_cum = 1 then -- Regime de Caixa Escrituração consolidada (Registro F500)
         --
         vn_fase := 6;
         -- processo para consolidação - Bloco F500
         for r_reg in c_f500( en_empresa_id => r_empresa.empresa_id )
         loop
            --
            exit when c_f500%notfound or (c_f500%notfound is null);
            --
            vn_fase := 6.1;
            --
            vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => gn_tipoimp_id         -- identificador do tipo de imposto
                                                                         , en_ind_orig_cred   => 0                     -- indicador de crédito 0-Oper.Mercado Interno, 1-Oper.Importação
                                                                         , en_codst_id        => r_reg.codst_id        -- identificador do código ST
                                                                         , en_vl_aliq         => r_reg.aliq_cofins     -- valor de alíquota em percentual
                                                                         , en_vl_aliq_quant   => 0                     -- valor da alíquota por unidade de produto
                                                                         , en_dm_cod_inc_trib => gn_dm_cod_inc_trib ); -- indicador da incidência tributária
            --
            vn_fase := 6.2;
            --
            if nvl(vn_contrsocapurpc_id,0) <> 0 then
               --
               vn_fase := 6.3;
               --
               vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
               --
               vn_fase := 6.4;
               --
               if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') and
                  (r_reg.cod_st in ('01', '02', '03', '04', '05') and nvl(r_reg.aliq_cofins,0) <> 0) or
                  (r_reg.cod_st in ('49')) then
                  vn_vl_rec_brt := r_reg.vl_rec_brt;
               else
                  vn_vl_rec_brt := 0;
               end if;
               --
               vn_fase := 6.5;
               -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
               -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
               if vv_cd_contrsocapurpc in ('03', '53') then
                  vn_vl_bc_cont := 0;
               elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao PIS/Pasep exclusivamente com base na Folha de Salários
                     vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') then
                     vn_vl_bc_cont := r_reg.vl_bc_cont;
               else
                  vn_vl_bc_cont := 0;
               end if;
               --
               vn_fase := 6.6;
               --
               if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31') then
                  vn_quant_bc_cofins := null;
               elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                     vn_quant_bc_cofins := r_reg.quant_bc_cofins;
               else
                  vn_quant_bc_cofins := null;
               end if;
               --
               vn_fase := 6.7;
               --
               if nvl(vn_vl_bc_cont,0) <> 0 then
                  vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
               elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                     vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
               else
                  vn_vl_cont_apur := 0;
               end if;
               --
               vn_fase := 6.8;
               --
               if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
                  vn_ch_conc_cs_cr_aliq := 1;
               elsif vv_cd_contrsocapurpc in ('51') then
                     vn_ch_conc_cs_cr_aliq := 1;
               else
                  vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
               end if;
               --
               vn_fase := 6.9;
               --
               pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                   , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                   , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                   , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                   , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                   , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                   , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                   , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
               --
            else
               --
               vn_fase := 6.10;
               --
               vv_cabec_log := '. Demais documentos - Bloco F500 -> Data da operação: '||to_date(r_reg.dt_ref,'dd/mm/rrrr')||' Código de ST = '||
                               pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
               --
               gv_resumo_log := 'Demais documentos e operações geradoras de contribuição e créditos - Bloco F500. Código de contribuição social não encontrado. '||
                                'Parâmetros: Tipo de imposto = COFINS, Indicador de crédito = 0-Oper.Mercado Interno, Código de ST = '||
                                pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id )||', Alíquota em % = '||to_char(r_reg.aliq_cofins,'999G990D0000')||
                                ', Alíquota em qtde = 0,000, Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_validacao
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
            end if;
            --
            -- Monta a memória de calculo --------------------------------
            vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F500');
            vt_mem_calc_apur_cofins                       := null;
            vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
            vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
            vt_mem_calc_apur_cofins.referencia_id         := r_reg.consoperinspcrc_id;
            vt_mem_calc_apur_cofins.ref_item_id           := null;
            vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
            vt_mem_calc_apur_cofins.ident_doc             := 'Doc. Consolidação PJ ID: '||r_reg.consoperinspcrc_id;
            vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
            vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
            vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
            vt_mem_calc_apur_cofins.aliq_prod             := nvl(r_reg.vl_aliq_cofins_quant, 0);
            vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
            vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
            pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
            --
         end loop; -- cursor c_f500
         --
      end if; -- gn_dm_cod_inc_trib = 2-Escrituração de operações com incidência exclusivamente no regime cumulativo, gn_dm_ind_reg_cum = 1-Regime de Caixa Escrituração consolidada (Registro F500)
      --
      vn_fase := 7;
      --
      if gn_dm_cod_inc_trib = 2 and -- Escrituração de operações com incidência exclusivamente no regime cumulativo
         gn_dm_ind_reg_cum = 2 then -- Regime de Competência - Escrituração consolidada (Registro F550)
         --
         vn_fase := 8;
         -- processo para consolidação - Bloco F550
         for r_reg in c_f550( en_empresa_id => r_empresa.empresa_id )
         loop
            --
            exit when c_f550%notfound or (c_f550%notfound is null);
            --
            vn_fase := 8.1;
            --
            vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => gn_tipoimp_id         -- identificador do tipo de imposto
                                                                         , en_ind_orig_cred   => 0                     -- indicador de crédito 0-Oper.Mercado Interno, 1-Oper.Importação
                                                                         , en_codst_id        => r_reg.codst_id        -- identificador do código ST
                                                                         , en_vl_aliq         => r_reg.aliq_cofins     -- valor de alíquota em percentual
                                                                         , en_vl_aliq_quant   => 0                     -- valor da alíquota por unidade de produto
                                                                         , en_dm_cod_inc_trib => gn_dm_cod_inc_trib ); -- indicador da incidência tributária
            --
            vn_fase := 8.2;
            --
            if nvl(vn_contrsocapurpc_id,0) <> 0 then
               --
               vn_fase := 8.3;
               --
               vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
               --
               vn_fase := 8.4;
               --
               if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') and
                  (r_reg.cod_st in ('01', '02', '03', '04', '05') and nvl(r_reg.aliq_cofins,0) <> 0) or
                  (r_reg.cod_st in ('49')) then
                  vn_vl_rec_brt := r_reg.vl_rec_brt;
               else
                  vn_vl_rec_brt := 0;
               end if;
               --
               vn_fase := 8.5;
               -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
               -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
               if vv_cd_contrsocapurpc in ('03', '53') then
                  vn_vl_bc_cont := 0;
               elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao PIS/Pasep exclusivamente com base na Folha de Salários
                     vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') then
                     vn_vl_bc_cont := r_reg.vl_bc_cont;
               else
                  vn_vl_bc_cont := 0;
               end if;
               --
               vn_fase := 8.6;
               --
               if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31') then
                  vn_quant_bc_cofins := null;
               elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                     vn_quant_bc_cofins := r_reg.quant_bc_cofins;
               else
                  vn_quant_bc_cofins := null;
               end if;
               --
               vn_fase := 8.7;
               --
               if nvl(vn_vl_bc_cont,0) <> 0 then
                  vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
               elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                     vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
               else
                  vn_vl_cont_apur := 0;
               end if;
               --
               vn_fase := 8.8;
               --
               if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
                  vn_ch_conc_cs_cr_aliq := 1;
               elsif vv_cd_contrsocapurpc in ('51') then
                     vn_ch_conc_cs_cr_aliq := 1;
               else
                  vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
               end if;
               --
               vn_fase := 8.9;
               --
               pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                   , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                   , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                   , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                   , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                   , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                   , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                   , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
               --
            else
               --
               vn_fase := 8.10;
               --
               vv_cabec_log := '. Demais documentos - Bloco F550 -> Data da operação: '||to_date(r_reg.dt_ref,'dd/mm/rrrr')||' Código de ST = '||
                               pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id );
               --
               gv_resumo_log := 'Demais documentos e operações geradoras de contribuição e créditos - Bloco F550. Código de contribuição social não encontrado. '||
                                'Parâmetros: Tipo de imposto = COFINS, Indicador de crédito = 0-Oper.Mercado Interno, Código de ST = '||
                                pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id )||', Alíquota em % = '||to_char(r_reg.aliq_cofins,'999G990D0000')||
                                ', Alíquota em qtde = 0,000, Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_validacao
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
            end if;
            --
            -- Monta a memória de calculo --------------------------------
            vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('F550');
            vt_mem_calc_apur_cofins                       := null;
            vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
            vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
            vt_mem_calc_apur_cofins.referencia_id         := r_reg.consoperinspcrcomp_id;
            vt_mem_calc_apur_cofins.ref_item_id           := null;
            vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
            vt_mem_calc_apur_cofins.ident_doc             := 'Doc. Consolidação PJ ID: '||r_reg.consoperinspcrcomp_id;
            vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
            vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
            vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
            vt_mem_calc_apur_cofins.aliq_prod             := nvl(r_reg.vl_aliq_cofins_quant, 0);
            vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
            vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
            pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
            --
         end loop; -- cursor c_f550
         --
      end if; -- gn_dm_cod_inc_trib = 2-Escrituração de operações com incidência exclusivamente no regime cumulativo, gn_dm_ind_reg_cum = 2-Regime de Competência - Escrituração consolidada (Registro F550)
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 9;
   --
   if nvl(vt_tab_reg_m600.count,0) = 0 then
      --
      vn_fase := 10;
      -- Não podemos utilizar a rotina devido ao valor do índice/chave estar nulo
      begin
         insert into cons_contr_cofins( id
                                      , dm_situacao
                                      , vl_tot_cont_nc_per
                                      , vl_tot_cred_desc
                                      , vl_tot_cred_desc_ant
                                      , vl_tot_cont_nc_dev
                                      , vl_ret_nc
                                      , vl_out_ded_nc
                                      , vl_cont_nc_rec
                                      , vl_tot_cont_cum_per
                                      , vl_ret_cum
                                      , vl_out_ded_cum
                                      , vl_cont_cum_rec
                                      , vl_tot_cont_rec
                                      , perconscontrcofins_id )
                                values( conscontrcofins_seq.nextval
                                      , 0 -- dm_situacao
                                      , 0 -- vl_tot_cont_nc_per
                                      , 0 -- vl_tot_cred_desc
                                      , 0 -- vl_tot_cred_desc_ant
                                      , 0 -- vl_tot_cont_nc_dev
                                      , 0 -- vl_ret_nc
                                      , 0 -- vl_out_ded_nc
                                      , 0 -- vl_cont_nc_rec
                                      , 0 -- vl_tot_cont_cum_per
                                      , 0 -- vl_ret_cum
                                      , 0 -- vl_out_ded_cum
                                      , 0 -- vl_cont_cum_rec
                                      , 0 -- vl_tot_cont_rec
                                      , gt_row_per_cons_contr_cofins.id );
      exception
         when others then
            --
            gv_resumo_log := 'Problemas ao incluir consolidação com valores zerados (fase = '||vn_fase||'). Erro = '||sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_sistema
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
            raise_application_error (-20101, gv_resumo_log);
            --
      end;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_monta_dados_m600_f (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_MONTA_DADOS_M600_F;
--------------------------------------------------------------------------------------------
--| Procedimento recupera os dados dos processos - Bloco M600 - Documentos Fiscais A, C e D
--------------------------------------------------------------------------------------------
PROCEDURE PKB_MONTA_DADOS_M600_ACD IS
   --
   vn_fase                  number := 0;
   vn_contrsocapurpc_id     contr_soc_apur_pc.id%type;
   vv_cd_contrsocapurpc     contr_soc_apur_pc.cd%type;
   vn_vl_rec_brt            number := 0;
   vn_vl_bc_cont            number := 0;
   vn_vl_cont_apur          number := 0;
   vn_quant_bc_cofins       number := 0;
   vv_cabec_log             varchar2(1000) := null;
   vn_ch_conc_cs_cr_aliq    number := 0;
   vn_cfop_id               number := 0;
   vn_dm_ind_aj             number := 0;
   vn_vl_aj                 number := 0;
   vn_tipoimp_id            tipo_imposto.id%type;
   vt_mem_calc_apur_cofins  mem_calc_apur_cofins%rowtype;
   vn_registrefdpc_id       number := null;
   --
   --| Recuperar a empresa e suas filiais
   cursor c_empresa is
      select em.id empresa_id
           , em.dm_dt_escr_dfepoe
        from empresa em
       start with em.id = gt_row_per_cons_contr_cofins.empresa_id
     connect by prior em.id = em.ar_empresa_id;
   --
   --| NOTA FISCAL DE SERVIÇO - para consolidação
   cursor c_a100( en_empresa_id        in empresa.id%type
                , en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
      select nf.id notafiscal_id
           , nf.nro_nf
           , nf.serie
           , mf.cod_mod
           , nf.dt_emiss
           , nf.dm_ind_oper
           , nf.dm_ind_emit
           , ii.codst_id
           , ic.dm_ind_orig_cred
           , ii.tipoimp_id
           , nvl(ii.aliq_apli,0) aliq_cofins
           , nvl(it.vl_item_bruto,0) vl_rec_brt
           , nvl(ii.vl_base_calc,0) vl_bc_cont
           , 0 quant_bc_cofins
           , 0 aliq_cofins_quant
           , it.cfop_id
           , it.cfop
           , cst.cod_st
           -- colunas utilizadas na memória de calculo --
           , decode(nvl(ii.vl_base_calc,0), 0, decode(nvl(ii.qtde_base_calc_prod,0), 0, 1, 2), 1) tipo -- 1-alíq.perc, 2-alíq.qtde
           , case nf.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , it.nro_item                                      nro_item
           , nvl(ii.vl_base_calc,0)                           vl_base_calc
           , nvl(ii.qtde_base_calc_prod,0)                    qtde_base_calc_prod
           , nvl(ii.vl_aliq_prod,0)                           vl_aliq_cofins_quant
           , nvl(ii.vl_imp_trib,0)                            vl_imp_trib
           , it.id                                            itemnf_id
        from nota_fiscal       nf
           , mod_fiscal        mf
           , item_nota_fiscal  it
           , imp_itemnf        ii
           , tipo_imposto      ti
           , itemnf_compl_serv ic
           , cod_st            cst
       where nf.empresa_id       = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and nf.dt_emiss between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and nf.dt_emiss between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin))
         and mf.id              = nf.modfiscal_id
         and mf.cod_mod         = '99' -- somente serviços
         and it.notafiscal_id   = nf.id
         and ii.itemnf_id       = it.id
         and ii.dm_tipo         = 0 -- IMPOSTO
         and ti.id              = ii.tipoimp_id
         and ti.cd              = '5' -- cofins
         and ic.itemnf_id       = it.id
         and cst.id             = ii.codst_id
         and cst.cod_st        in ('01', '02', '03', '05')
       order by nf.id
           , it.id
           , ii.id
           , ii.codst_id
           , ic.dm_ind_orig_cred
           , nvl(ii.aliq_apli,0);
   --
   --| NOTA FISCAL DE SERVIÇO - para ajuste
   cursor c_a100_aj( en_empresa_id        in empresa.id%type
                   , en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
      select ii.tipoimp_id
           , it.cfop_id
           , it.cfop
           , cst.cod_st
           , cst.id cst_id_cofins
           , ii.aliq_apli aliq_cofins
           , nvl(sum(nvl(ii.vl_base_calc,0)),0) vl_base_calc
        from nota_fiscal       nf
           , mod_fiscal        mf
           , item_nota_fiscal  it
           , imp_itemnf        ii
           , tipo_imposto      ti
           , itemnf_compl_serv ic
      , cod_st            cst
       where nf.empresa_id       = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and nf.dt_emiss between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and nf.dt_emiss between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin))
         and mf.id              = nf.modfiscal_id
         and mf.cod_mod         = '99' -- somente serviços
         and it.notafiscal_id   = nf.id
         and ii.itemnf_id       = it.id
         and ii.dm_tipo         = 0 -- IMPOSTO
         and ti.id              = ii.tipoimp_id
         and ti.cd              = '5' -- cofins
         and ic.itemnf_id       = it.id
    and cst.id             = ii.codst_id
      having nvl(sum(nvl(ii.vl_base_calc,0)),0) > 0
       group by ii.tipoimp_id
           , it.cfop_id
           , it.cfop
           , cst.cod_st
           , cst.id
           , ii.aliq_apli;
   --
   --| NOTA FISCAL (CÓDIGO 01), NOTA FISCAL AVULSA (CÓDIGO 1B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04) E NFE (CÓDIGO 55) - para consolidação
   cursor c_c100( en_empresa_id        in empresa.id%type
                , en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
      select nf.id notafiscal_id
           , nf.nro_nf
           , nf.serie
           , mf.cod_mod
           , nf.dt_emiss
           , nf.dm_ind_oper
           , nf.dm_ind_emit
           , ii.codst_id
           , ii.tipoimp_id
           , nvl(ii.aliq_apli,0) aliq_cofins
           , nvl(it.vl_item_bruto,0) vl_rec_brt
           , nvl(ii.vl_base_calc,0) vl_bc_cont
           , nvl(ii.qtde_base_calc_prod,0) quant_bc_cofins
           , nvl(ii.vl_aliq_prod,0) aliq_cofins_quant
           , it.cfop_id
           , it.cfop
           , cst.cod_st
           -- colunas utilizadas na memória de calculo --
           , decode(nvl(ii.vl_base_calc,0), 0, decode(nvl(ii.qtde_base_calc_prod,0), 0, 1, 2), 1) tipo -- 1-alíq.perc, 2-alíq.qtde
           , case nf.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , it.nro_item                                      nro_item
           , nvl(ii.vl_base_calc,0)                           vl_base_calc
           , nvl(ii.qtde_base_calc_prod,0)                    qtde_base_calc_prod
           , nvl(ii.vl_aliq_prod,0)                           vl_aliq_cofins_quant
           , nvl(ii.vl_imp_trib,0)                            vl_imp_trib
           , it.id                                            itemnf_id
        from nota_fiscal      nf
           , mod_fiscal       mf
           , item_nota_fiscal it
           , imp_itemnf       ii
           , tipo_imposto     ti
           , cod_st           cst
       where nf.empresa_id       = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and nf.dt_emiss between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and nf.dt_emiss between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin))
         and mf.id              = nf.modfiscal_id
         and mf.cod_mod        in ('01', '1B', '04', '55', '65') -- NF, NF de Produtor, NF Avulsa, NF Eletrônica
         and it.notafiscal_id   = nf.id
         and ii.itemnf_id       = it.id
         and ii.dm_tipo         = 0 -- IMPOSTO
         and ti.id              = ii.tipoimp_id
         and ti.cd              = '5' -- cofins
    and cst.id             = ii.codst_id
    and cst.cod_st        in ('01', '02', '03', '05')
       order by nf.id
           , it.id
           , ii.id
           , ii.codst_id
           , nvl(ii.aliq_apli,0)
           , nvl(ii.vl_aliq_prod,0);
   --
   --| NOTA FISCAL (CÓDIGO 01), NOTA FISCAL AVULSA (CÓDIGO 1B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04) E NFE (CÓDIGO 55) - para ajuste
   cursor c_c100_aj( en_empresa_id        in empresa.id%type
                   , en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
      select ii.tipoimp_id
           , it.cfop_id
           , it.cfop
           , cst.cod_st
           , cst.id cst_id_cofins
           , nvl(ii.aliq_apli,0) aliq_cofins
           , nvl(sum(nvl(ii.vl_base_calc,0)),0) vl_base_calc
        from nota_fiscal      nf
           , mod_fiscal       mf
           , item_nota_fiscal it
           , imp_itemnf       ii
           , tipo_imposto     ti
      , cod_st           cst
       where nf.empresa_id       = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and nf.dt_emiss between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and nf.dt_emiss between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin))
         and mf.id              = nf.modfiscal_id
         and mf.cod_mod        in ('01', '1B', '04', '55', '65') -- NF, NF de Produtor, NF Avulsa, NF Eletrônica
         and it.notafiscal_id   = nf.id
         and ii.itemnf_id       = it.id
         and ii.dm_tipo         = 0 -- IMPOSTO
         and ti.id              = ii.tipoimp_id
         and ti.cd              = '5' -- cofins
    and cst.id             = ii.codst_id
      having nvl(sum(nvl(ii.vl_base_calc,0)),0) > 0
       group by ii.tipoimp_id
           , it.cfop_id
           , it.cfop
           , cst.cod_st
           , cst.id
           , nvl(ii.aliq_apli,0);
   --
   -- VL_ITEM dos registros C181 e C491, quando o valor do campo IND_ESCRI do registro C010 seja igual a 1
   -- Não será processado, pois o ind_escri é igual a 2.
   --
   --| EQUIPAMENTO ECF (CÓDIGO 02 e 2D) -- para consolidação
   cursor c_c400( en_empresa_id in empresa.id%type ) is
      select eq.id equipecf_id
           , eq.ecf_mod
           , eq.ecf_fab
           , eq.ecf_cx
           , mf.cod_mod
           , rz.id reducaozecf_id
           , rd.codst_id
           , cst.cod_st
           , nvl(rd.aliq_cofins,0) aliq_cofins
           , nvl(rd.vl_item,0) vl_rec_brt
           , nvl(rd.vl_bc_cofins,0) vl_bc_cont
           , nvl(rd.quant_bc_cofins,0) quant_bc_cofins
           , nvl(rd.vl_aliq_cofins_quant,0) aliq_cofins_quant
           -- colunas utilizadas na memória de calculo --
           , 'C'                                              tipo_operacao
           , 0                                                nro_item
           , decode(nvl(rd.vl_bc_cofins,0), 0, decode(nvl(rd.quant_bc_cofins,0), 0, 1, 2), 1) tipo -- 1-alíq.perc, 2-alíq.qtde
           , nvl(rd.vl_bc_cofins,0)                           vl_base_calc
           , nvl(rd.quant_bc_cofins,0)                        qtde_base_calc_prod
           , nvl(rd.vl_aliq_cofins_quant,0)                   vl_aliq_cofins_quant
           , nvl(rd.vl_cofins,0)                              vl_imp_trib
           , 0                                                dm_ind_emit
        from equip_ecf           eq
           , mod_fiscal          mf
           , reducao_z_ecf       rz
           , res_dia_doc_ecf_cofins rd
           , cod_st              cst
       where eq.empresa_id     = en_empresa_id
         and mf.id             = eq.modfiscal_id
         and mf.cod_mod       in ('02', '2D')  -- Nota Fiscal de Venda a Consumidor e Cupom Fiscal
         and rz.equipecf_id    = eq.id
         and rz.dt_doc   between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and rz.dm_st_proc     = 1 -- Validada
         and nvl(rz.vl_brt,0)  > 0
         and rd.reducaozecf_id = rz.id
    and cst.id            = rd.codst_id
    and cst.cod_st       in ('01', '02', '03', '05')
    and exists (select df.reducaozecf_id
                  from doc_fiscal_emit_ecf    df
                     , it_doc_fiscal_emit_ecf id
                      where df.reducaozecf_id      = rz.id
                        and id.docfiscalemitecf_id = df.id)
       order by eq.id
           , eq.ecf_mod
           , eq.ecf_fab
           , eq.ecf_cx
           , rz.id
           , rd.codst_id
           , nvl(rd.aliq_cofins,0)
           , nvl(rd.vl_aliq_cofins_quant,0);
   --
   --| EQUIPAMENTO ECF (CÓDIGO 02 e 2D) -- para ajuste
   cursor c_c400_aj( en_empresa_id in empresa.id%type ) is
      select gn_tipoimp_id
           , dc.cfop_id
           , dc.cfop
           , cst.cod_st
           , cst.id cst_id_cofins
           , nvl(rd.aliq_cofins,0) aliq_cofins
           , nvl(sum(nvl(rd.vl_bc_cofins,0)),0) vl_base_calc
        from equip_ecf           eq
           , mod_fiscal          mf
           , reducao_z_ecf       rz
           , res_dia_doc_ecf_cofins rd
      , cod_st              cst
      , (select distinct df.reducaozecf_id
                   , id.cfop_id
                   , cf.cd cfop
                from doc_fiscal_emit_ecf    df
                   , it_doc_fiscal_emit_ecf id
                   , cfop                   cf
               where id.docfiscalemitecf_id = df.id
                 and cf.id                  = id.cfop_id) dc
       where eq.empresa_id     = en_empresa_id
         and mf.id             = eq.modfiscal_id
         and mf.cod_mod       in ('02', '2D')  -- Nota Fiscal de Venda a Consumidor e Cupom Fiscal
         and rz.equipecf_id    = eq.id
         and rz.dt_doc   between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and rz.dm_st_proc     = 1 -- Validada
         and nvl(rz.vl_brt,0)  > 0
         and rd.reducaozecf_id = rz.id
    and cst.id            = rd.codst_id
    and dc.reducaozecf_id = rz.id
      having nvl(sum(nvl(rd.vl_bc_cofins,0)),0) > 0
       group by gn_tipoimp_id
           , dc.cfop_id
           , dc.cfop
           , cst.cod_st
           , cst.id
           , nvl(rd.aliq_cofins,0);
   --
   --| Resumo diário das notas fiscais de venda a consumidor (código 02) -- para consolidação
   cursor c_c380( en_empresa_id in empresa.id%type ) is
      select rd.id resdianfvendacons_id
           , rd.serie
           , rd.subserie
           , rd.num_doc_ini
           , rd.num_doc_fin
           , mf.cod_mod
           , ir.codst_id_cofins codst_id
           , cst.cod_st
           , nvl(ir.aliq_cofins,0) aliq_cofins
           , nvl(ir.vl_item_acm,0) vl_rec_brt
           , nvl(ir.vl_bc_cofins,0) vl_bc_cont
           , nvl(ir.quant_bc_cofins,0) quant_bc_cofins
           , nvl(ir.aliq_cofins_quant,0) aliq_cofins_quant
           , ra.cfop_id
           -- colunas utilizadas na memória de calculo --
           , 'C'                                              tipo_operacao
           , 0                                                nro_item
           , decode(nvl(ir.vl_bc_cofins,0), 0, decode(nvl(ir.quant_bc_cofins,0), 0, 1, 2), 1) tipo -- 1-alíq.perc, 2-alíq.qtde
           , nvl(ir.vl_bc_cofins,0)                           vl_base_calc
           , nvl(ir.quant_bc_cofins,0)                        qtde_base_calc_prod
           , nvl(ir.aliq_pis_quant,0)                         vl_aliq_cofins_quant
           , nvl(ir.vl_cofins_acm,0)                          vl_imp_trib
           , 0                                                dm_ind_emit
        from res_dia_nf_venda_cons        rd
           , mod_fiscal                   mf
           , reg_an_res_dia_nf_venda_cons ra
           , it_res_dia_nf_venda_cons     ir
           , cod_st                       cst
       where rd.empresa_id                = en_empresa_id
         and rd.dt_doc              between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and rd.dm_st_proc                = 1 -- Validada
         and mf.id                        = rd.modfiscal_id
         and mf.cod_mod                   = '02' -- Nota Fiscal de Venda a Consumidor
         and ra.resdianfvendacons_id      = rd.id
         and ir.reganresdianfvendacons_id = ra.id
         and cst.id                       = ir.codst_id_cofins
         and cst.cod_st                  in ('01', '02', '03', '05')
       order by rd.id
           , rd.serie
           , rd.subserie
           , rd.num_doc_ini
           , rd.num_doc_fin
           , ir.codst_id_cofins
           , nvl(ir.aliq_cofins,0)
           , nvl(ir.aliq_cofins_quant,0);
   --
   --| Resumo diário das notas fiscais de venda a consumidor (código 02) -- para ajuste
   cursor c_c380_aj( en_empresa_id in empresa.id%type ) is
      select gn_tipoimp_id
           , ra.cfop_id
           , cf.cd cfop
           , cst.cod_st
           , cst.id cst_id_cofins
           , nvl(ir.aliq_cofins,0) aliq_cofins
           , nvl(sum(nvl(ir.vl_bc_cofins,0)),0) vl_base_calc
        from res_dia_nf_venda_cons        rd
           , mod_fiscal                   mf
           , reg_an_res_dia_nf_venda_cons ra
           , it_res_dia_nf_venda_cons     ir
      , cod_st                       cst
      , cfop                         cf
       where rd.empresa_id                = en_empresa_id
         and rd.dt_doc              between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and rd.dm_st_proc                = 1 -- Validada
         and mf.id                        = rd.modfiscal_id
         and mf.cod_mod                   = '02' -- Nota Fiscal de Venda a Consumidor
         and ra.resdianfvendacons_id      = rd.id
         and ir.reganresdianfvendacons_id = ra.id
    and cst.id                       = ir.codst_id_cofins
    and cf.id                        = ra.cfop_id
      having nvl(sum(nvl(ir.vl_bc_cofins,0)),0) > 0
       group by gn_tipoimp_id
           , ra.cfop_id
           , cf.cd
           , cst.cod_st
           , cst.id
           , nvl(ir.aliq_cofins,0);
   --
   --| REGISTRO C860: IDENTIFICAÇÃO DO EQUIPAMENTO SAT-CF-E
   --| REGISTRO C870: RESUMO DIÁRIO DE DOCUMENTOS EMITIDOS POR EQUIPAMENTO SAT-CF-E (CÓDIGO 59)  PIS/PASEP E COFINS
   --| REGISTRO C880: RESUMO DIÁRIO DE DOCUMENTOS EMITIDOS POR EQUIPAMENTO SAT-CF-E (CÓDIGO 59)  PIS/PASEP E COFINS APURADO POR UNIDADE DE MEDIDA DE PRODUTO
   cursor c_c860( en_empresa_id in empresa.id%type ) is
      select cf.id cupomfiscal_id
           , cf.nro_cfe
           , cf.nro_serie_sat
           , mf.cod_mod
           , cf.dt_emissao
           , 0 dm_ind_emit -- emissão própria
           , 1 dm_ind_oper -- saída
           , ii.codst_id
           , ii.tipoimp_id
           , nvl(ii.aliq_apli,0) aliq_cofins
           , nvl(ic.vl_item_liq,0) vl_rec_brt
           , nvl(ii.vl_base_calc,0) vl_bc_cont
           , nvl(ii.qtde_base_calc_prod,0) quant_bc_cofins
           , nvl(ii.vl_aliq_prod,0) aliq_cofins_quant
           , ic.cfop_id
           , co.cd cfop
           , cs.cod_st
           -- colunas utilizadas na memória de calculo --
           , 'D'                                              tipo_operacao
           , ic.nro_item                                      nro_item
           , decode(nvl(ii.vl_base_calc,0), 0, decode(nvl(ii.qtde_base_calc_prod,0), 0, 1, 2), 1) tipo -- 1-alíq.perc, 2-alíq.qtde
           , nvl(ii.vl_base_calc,0)                           vl_base_calc
           , nvl(ii.qtde_base_calc_prod,0)                    qtde_base_calc_prod
           , nvl(ii.vl_aliq_prod,0)                           vl_aliq_cofins_quant
           , nvl(ii.vl_imp_trib,0)                            vl_imp_trib
           , ic.id                                            itemcupomfiscal_id
        from cupom_fiscal      cf
           , mod_fiscal        mf
           , item_cupom_fiscal ic
           , cfop              co
           , imp_itemcf        ii
           , tipo_imposto      ti
           , cod_st            cs
       where cf.empresa_id         = en_empresa_id
         and cf.dm_st_proc         = 4 -- autorizado
         and cf.dt_emissao   between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and mf.id                 = cf.modfiscal_id
         and mf.cod_mod            = '59' -- Cupom Fiscal Eletrônico
         and ic.cupomfiscal_id     = cf.id
         and co.id                 = ic.cfop_id
         and ii.itemcupomfiscal_id = ic.id
         and ti.id                 = ii.tipoimp_id
         and ti.cd                 = '5' -- Cofins
         and cs.id                 = ii.codst_id
         and cs.cod_st            in ('01', '02', '03', '05')
       order by cf.id
           , ic.id
           , ii.id
           , ii.codst_id
           , nvl(ii.aliq_apli,0)
           , nvl(ii.vl_aliq_prod,0);
   --
   --| REGISTRO C860: IDENTIFICAÇÃO DO EQUIPAMENTO SAT-CF-E - Para Ajuste
   --| REGISTRO C870: RESUMO DIÁRIO DE DOCUMENTOS EMITIDOS POR EQUIPAMENTO SAT-CF-E (CÓDIGO 59)  PIS/PASEP E COFINS
   --| REGISTRO C880: RESUMO DIÁRIO DE DOCUMENTOS EMITIDOS POR EQUIPAMENTO SAT-CF-E (CÓDIGO 59)  PIS/PASEP E COFINS APURADO POR UNIDADE DE MEDIDA DE PRODUTO
   cursor c_c860_aj( en_empresa_id in empresa.id%type ) is
      select ii.tipoimp_id
           , ic.cfop_id
           , co.cd cfop
           , cs.cod_st
           , cs.id cst_id_cofins
           , nvl(ii.aliq_apli,0) aliq_cofins
           , nvl(sum(nvl(ii.vl_base_calc,0)),0) vl_base_calc
        from cupom_fiscal      cf
           , mod_fiscal        mf
           , item_cupom_fiscal ic
           , cfop              co
           , imp_itemcf        ii
           , tipo_imposto      ti
      , cod_st            cs
       where cf.empresa_id         = en_empresa_id
         and cf.dm_st_proc         = 4 -- autorizado
         and cf.dt_emissao   between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and mf.id                 = cf.modfiscal_id
         and mf.cod_mod            = '59' -- Cupom Fiscal Eletrônico
         and ic.cupomfiscal_id     = cf.id
         and co.id                 = ic.cfop_id
         and ii.itemcupomfiscal_id = ic.id
         and ti.id                 = ii.tipoimp_id
         and ti.cd                 = '5' -- Cofins
    and cs.id                 = ii.codst_id
    and cs.cod_st             in ('01', '02', '03', '05')
      having nvl(sum(nvl(ii.vl_base_calc,0)),0) > 0
       group by ii.tipoimp_id
           , ic.cfop_id
           , co.cd
           , cs.cod_st
           , cs.id
           , nvl(ii.aliq_apli,0);
   --
   --| Nota Fiscal de Serviço de Comunicação (CÓDIGO 21), Nota Fiscal de Serviço de Telecomunicação (CÓDIGO 22)
   cursor c_d600( en_empresa_id in empresa.id%type ) is
      select nf.id notafiscal_id
           , nf.nro_nf
           , nf.serie
           , mf.cod_mod
           , nf.dt_emiss
           , nf.dm_ind_oper
           , nf.dm_ind_emit
           , ii.codst_id
           , ii.tipoimp_id
           , nvl(ii.aliq_apli,0) aliq_cofins
           , nvl(it.vl_item_bruto,0) vl_rec_brt
           , nvl(ii.vl_base_calc,0) vl_bc_cont
           , nvl(ii.qtde_base_calc_prod,0) quant_bc_cofins
           , nvl(ii.vl_aliq_prod,0) aliq_cofins_quant
           , it.cfop_id
           , it.cfop
           , cst.cod_st
           -- colunas utilizadas na memória de calculo --
           , case nf.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , it.nro_item                                      nro_item
           , decode(nvl(ii.vl_base_calc,0), 0, decode(nvl(ii.qtde_base_calc_prod,0), 0, 1, 2), 1) tipo -- 1-alíq.perc, 2-alíq.qtde
           , nvl(ii.vl_base_calc,0)                           vl_base_calc
           , nvl(ii.qtde_base_calc_prod,0)                    qtde_base_calc_prod
           , nvl(ii.vl_aliq_prod,0)                           vl_aliq_cofins_quant
           , nvl(ii.vl_imp_trib,0)                            vl_imp_trib
           , it.id                                            itemnf_id
        from nota_fiscal      nf
           , mod_fiscal       mf
           , item_nota_fiscal it
           , imp_itemnf       ii
           , tipo_imposto     ti
      , cod_st           cst
       where nf.empresa_id      = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and nf.dm_ind_oper     = 1 -- 0-entrada, 1-saída
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dt_emiss between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin))
         and mf.id              = nf.modfiscal_id
         and mf.cod_mod        in ('21', '22') -- Nota Fiscal de Serviço de Comunicação, Nota Fiscal de Serviço de Telecomunicação
         and it.notafiscal_id   = nf.id
         and ii.itemnf_id       = it.id
         and ii.dm_tipo         = 0 -- IMPOSTO
         and ti.id              = ii.tipoimp_id
         and ti.cd              = '5' -- cofins
    and cst.id             = ii.codst_id
    and cst.cod_st        in ('01', '02', '03', '05')
    and nvl(it.classconsitemcont_id,0) > 0
       order by nf.id
           , it.id
           , ii.id
           , ii.codst_id
           , nvl(ii.aliq_apli,0)
           , nvl(ii.vl_aliq_prod,0);
   --
   --| Nota Fiscal de Serviço de Comunicação (CÓDIGO 21), Nota Fiscal de Serviço de Telecomunicação (CÓDIGO 22) - para ajuste
   cursor c_d600_aj( en_empresa_id in empresa.id%type ) is
      select ii.tipoimp_id
           , it.cfop_id
           , it.cfop
           , cst.cod_st
           , cst.id cst_id_cofins
           , nvl(ii.aliq_apli,0) aliq_cofins
           , nvl(sum(nvl(ii.vl_base_calc,0)),0) vl_base_calc
        from nota_fiscal      nf
           , mod_fiscal       mf
           , item_nota_fiscal it
           , imp_itemnf       ii
           , tipo_imposto     ti
      , cod_st           cst
       where nf.empresa_id      = en_empresa_id
         and nf.dm_st_proc      = 4 -- autorizada
         and nf.dm_arm_nfe_terc = 0 -- 0-não, 1-sim
         and nf.dm_ind_oper     = 1 -- 0-entrada, 1-saída
         and ((nf.dm_ind_emit = 1 and nvl(nf.dt_sai_ent,nf.dt_emiss) between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin)
               or
              (nf.dm_ind_emit = 0 and nf.dt_emiss between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin))
         and mf.id              = nf.modfiscal_id
         and mf.cod_mod        in ('21', '22') -- Nota Fiscal de Serviço de Comunicação, Nota Fiscal de Serviço de Telecomunicação
         and it.notafiscal_id   = nf.id
         and ii.itemnf_id       = it.id
         and ii.dm_tipo         = 0 -- IMPOSTO
         and ti.id              = ii.tipoimp_id
         and ti.cd              = '5' -- cofins
    and cst.id             = ii.codst_id
    and nvl(it.classconsitemcont_id,0) > 0
      having nvl(sum(nvl(ii.vl_base_calc,0)),0) > 0
       group by ii.tipoimp_id
           , it.cfop_id
           , it.cfop
           , cst.cod_st
           , cst.id
           , nvl(ii.aliq_apli,0);
   --
   --| Resumo da Escrituração Diária  Prestação de Serviços de Transporte: Nota Fiscal de Serviço de Transporte (Código 07), Conhecimento de Transporte
   --| Rodoviário de Cargas (Código 08), Conhecimento de Transporte de Cargas Avulso (Código 8B), Conhecimento de Transporte Aquaviário de Cargas (Código 09),
   --| Conhecimento de Transporte Aéreo (Código 10), Conhecimento de Transporte Ferroviário de Cargas (Código 11), Conhecimento de Transporte Multimodal de
   --| Cargas (Código 26), Nota Fiscal de Transporte Ferroviário de Carga (Código 27), Conhecimento de Transporte Eletrônico  CT-E (Código 57), Bilhete de
   --| Passagem Eletrônico - BP-e (Código 63) e Conhecimento de Transporte Eletrônico para Outros Serviços  CT-e OS, modelo 67.
   cursor c_d200( en_empresa_id in empresa.id%type ) is
      select ct.id conhectransp_id
           , ct.nro_ct
           , ct.serie
           , ct.subserie
           , mf.cod_mod
           , ct.dt_hr_emissao dt_emiss
           , cc.codst_id
           , nvl(cc.aliq_cofins,0) aliq_cofins
           , nvl(cc.vl_item,0) vl_rec_brt
           , nvl(cc.vl_bc_cofins,0) vl_bc_cont
           , 0 quant_bc_cofins
           , 0 aliq_cofins_quant
           , ct.cfop_id
           , ct.cfop
           , cs.cod_st
           , cr.dm_orig_merc
           -- colunas utilizadas na memória de calculo --
           , case ct.dm_ind_oper when 0 then 'C' else 'D' end tipo_operacao
           , 0                                                nro_item
           , decode(nvl(cc.vl_bc_cofins,0), 0, 1, 1) tipo -- 1-alíq.perc, 2-alíq.qtde -- não tem base de cálculo por unidade
           , nvl(cc.vl_bc_cofins,0)                           vl_base_calc
           , 0                                                qtde_base_calc_prod
           , 0                                                vl_aliq_cofins_quant
           , nvl(cc.vl_cofins,0)                              vl_imp_trib
           , ct.dm_ind_emit                                   dm_ind_emit
        from conhec_transp      ct
           , mod_fiscal         mf
           , ct_comp_doc_cofins cc
           , cod_st             cs
           , ct_reg_anal        cr
       where ct.empresa_id      = en_empresa_id
         and ct.dm_st_proc      = 4 -- autorizado
         and ct.dm_arm_cte_terc = 0 -- 0-Não, 1-Sim
         and ct.dm_ind_emit     = 0 -- 0-Emissão Própria, 1-Terceiro
         and ct.dm_ind_oper     = 1 -- 0-Entrada, 1-Saída
         and ct.dt_hr_emissao between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and mf.id              = ct.modfiscal_id
         and mf.cod_mod        in ('07', '08', '8B', '09', '10', '11', '26', '27', '57', '63', '67')
         and cc.conhectransp_id = ct.id
    and cs.id              = cc.codst_id
    and cs.cod_st         in ('01', '02', '03', '05')
         and cr.conhectransp_id = ct.id
       order by ct.id
           , cc.id
           , cc.codst_id
           , cc.aliq_cofins;
   --
   --| Resumo da Escrituração Diária  Prestação de Serviços de Transporte: Nota Fiscal de Serviço de Transporte (Código 07), Conhecimento de Transporte
   --| Rodoviário de Cargas (Código 08), Conhecimento de Transporte de Cargas Avulso (Código 8B), Conhecimento de Transporte Aquaviário de Cargas (Código 09),
   --| Conhecimento de Transporte Aéreo (Código 10), Conhecimento de Transporte Ferroviário de Cargas (Código 11), Conhecimento de Transporte Multimodal de
   --| Cargas (Código 26), Nota Fiscal de Transporte Ferroviário de Carga (Código 27), Conhecimento de Transporte Eletrônico  CT-E (Código 57), Bilhete de
   --| Passagem Eletrônico - BP-e (Código 63) e Conhecimento de Transporte Eletrônico para Outros Serviços  CT-e OS, modelo 67. Para ajuste.
   cursor c_d200_aj( en_empresa_id in empresa.id%type ) is
      select ct.cfop_id
           , ct.cfop
           , cs.cod_st
           , cc.codst_id cst_id_cofins
           , nvl(cc.aliq_cofins,0) aliq_cofins
           , nvl(sum(nvl(cc.vl_bc_cofins,0)),0) vl_base_calc
        from conhec_transp      ct
           , mod_fiscal         mf
           , ct_comp_doc_cofins cc
           , cod_st             cs
           , ct_reg_anal        cr
       where ct.empresa_id      = en_empresa_id
         and ct.dm_st_proc      = 4 -- autorizado
         and ct.dm_arm_cte_terc = 0 -- 0-Não, 1-Sim
         and ct.dm_ind_emit     = 0 -- 0-Emissão Própria, 1-Terceiro
         and ct.dm_ind_oper     = 1 -- 0-entrada, 1-saída
         and ct.dt_hr_emissao between gt_row_per_apur_cred_cofins.dt_ini and gt_row_per_apur_cred_cofins.dt_fin
         and mf.id              = ct.modfiscal_id
         and mf.cod_mod        in ('07', '08', '8B', '09', '10', '11', '26', '27', '57', '63', '67')
         and cc.conhectransp_id = ct.id
    and cs.id              = cc.codst_id
         and cr.conhectransp_id = ct.id
      having nvl(sum(nvl(cc.vl_bc_cofins,0)),0) > 0
       group by ct.cfop_id
           , ct.cfop
           , cs.cod_st
           , cc.codst_id
           , nvl(cc.aliq_cofins,0);
   --
   -- VL_ITEM dos registros C601
   -- Não será processado.
   -- VL_DOC dos registros D300
   -- Não será processado.
   -- VL_BRT do registro D350
   -- Não será processado.
   --
BEGIN
   --
   vn_fase := 1;
   --| Nota fiscal de serviço
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 2;
      --
      for r_reg in c_a100( en_empresa_id        => r_empresa.empresa_id
                         , en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe )
      loop
         -- processo para consolidação
         exit when c_a100%notfound or (c_a100%notfound is null);
         --
         vn_fase := 2.1;
         --
         vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => r_reg.tipoimp_id              -- identificador do tipo de imposto
                                                                      , en_ind_orig_cred   => nvl(r_reg.dm_ind_orig_cred,0) -- indicador de crédito 0-Oper.Mercado Interno, 1-Oper.Importação
                                                                      , en_codst_id        => r_reg.codst_id                -- identificador do código ST
                                                                      , en_vl_aliq         => r_reg.aliq_cofins             -- valor de alíquota em percentual
                                                                      , en_vl_aliq_quant   => 0                             -- valor da alíquota por unidade de produto
                                                                      , en_dm_cod_inc_trib => gn_dm_cod_inc_trib );         -- indicador da incidência tributária
         --
         vn_fase := 2.2;
         --
         if nvl(vn_contrsocapurpc_id,0) <> 0 then
            --
            vn_fase := 2.3;
            --
            vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
            --
            vn_fase := 2.4;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') and
               (r_reg.cod_st in ('01', '02', '03', '04', '05') and nvl(r_reg.aliq_cofins,0) <> 0) or
               (r_reg.cod_st in ('49')) then -- no manual esse cst é considerado na descrição, e no mesmo manual, esse cst não está destacado na tabela
               vn_vl_rec_brt := r_reg.vl_rec_brt;
            else
               vn_vl_rec_brt := 0;
            end if;
            --
            vn_fase := 2.5;
            -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
            -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
            if vv_cd_contrsocapurpc in ('03', '53') then
               vn_vl_bc_cont := 0;
            elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao cofins/Pasep exclusivamente com base na Folha de Salários
                  vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') then
                  vn_vl_bc_cont := r_reg.vl_bc_cont;
            else
               vn_vl_bc_cont := 0; -- valor do registro m611, neste caso não teremos valores.
            end if;
            --
            vn_fase := 2.6;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31') then
               vn_quant_bc_cofins := null;
            elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                  vn_quant_bc_cofins := r_reg.quant_bc_cofins;
            else
               vn_quant_bc_cofins := null;
            end if;
            --
            vn_fase := 2.7;
            --
            if nvl(vn_vl_bc_cont,0) <> 0 then
               vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
            elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                  vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
            else
               vn_vl_cont_apur := 0;
            end if;
            --
            vn_fase := 2.8;
            --
            if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
               vn_ch_conc_cs_cr_aliq := 1;
            elsif vv_cd_contrsocapurpc in ('51') then
                  vn_ch_conc_cs_cr_aliq := 1;
            else
               vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
            end if;
            --
            vn_fase := 2.9;
            --
            if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.codst_id ) = 0 then
               -- gerar o valor na consolidação, não gerar como ajuste
               vn_fase := 2.10;
               --
               pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                   , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                   , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                   , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                   , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                   , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                   , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                   , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
               --
            end if;
            --
         else
            --
            vn_fase := 2.11;
            --
            vv_cabec_log := '. NF -> Número: '||r_reg.nro_nf||' Série: '||r_reg.serie||' Modelo fiscal: '||r_reg.cod_mod||
                            ' Data de emissão: '||to_char(r_reg.dt_emiss, 'dd/mm/yyyy')||
                            ' Operação: '||pk_csf.fkg_dominio( ev_dominio => 'NOTA_FISCAL.DM_IND_OPER'
                                                             , ev_vl      => r_reg.dm_ind_oper )||
                            ' Indicador do Emitente: '||pk_csf.fkg_dominio( ev_dominio => 'NOTA_FISCAL.DM_IND_EMIT'
                                                                          , ev_vl      => r_reg.dm_ind_emit );
            --
            gv_resumo_log := 'Notas fiscais de serviço. Código de contribuição social não encontrado.Parâmetros: Tipo de imposto = cofins, Indicador de crédito = '||
                             r_reg.dm_ind_orig_cred||', Código de ST = '||r_reg.cod_st||', Alíquota em % = '||to_char(r_reg.aliq_cofins,'999G990D000')||
                             ', Alíquota em qtde = 0,000, Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_validacao
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
         end if;
         --
         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('A100');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
         vt_mem_calc_apur_cofins.ref_item_id           := r_reg.itemnf_id;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
         vt_mem_calc_apur_cofins.aliq_prod             := nvl(r_reg.vl_aliq_cofins_quant, 0);
         vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
         vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
         --
      end loop; -- cursor c_a100
      --
      vn_fase := 3;
      -- processo para ajuste de redução ou acréscimo
      for r_reg in c_a100_aj( en_empresa_id        => r_empresa.empresa_id
                            , en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe )
      loop
         --
         exit when c_a100_aj%notfound or (c_a100_aj%notfound is null);
         --
         vn_fase := 3.1;
         -- O CFOP das notas fiscais devem NÃO gerar receita, NÃO serem escriturados e SIM para geração dos ajustes
         if pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
            --
            if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
               --
               if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 then -- 0-não, 1-sim
                  --
                  vn_fase := 3.2;
                  --
                  vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_ajuste_cons_contr_id( en_tipoimp_id      => r_reg.tipoimp_id         -- identificador do tipo de imposto (cofins ou cofins)
                                                                                , en_dm_ind_ativ     => gn_dm_ind_ativ           -- indicador de atividade
                                                                                , en_dm_cod_inc_trib => gn_dm_cod_inc_trib       -- indicador da incidência tributária
                                                                                , en_cd_codst        => r_reg.cod_st             -- código ST
                                                                                , en_aliq            => nvl(r_reg.aliq_cofins,0) ); -- valor de alíquota em percentual
                  --
                  vn_fase := 3.3;
                  --
                  if nvl(vn_contrsocapurpc_id,0) <> 0 then
                     --
                     vn_fase := 3.4;
                     --
                     vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
                     --
                     vn_fase := 3.5;
                     --
                     if instr(r_reg.cfop,1,1) in (1,2,3) then -- cfop de entrada
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     elsif instr(r_reg.cfop,1,1) in (5,6,7) then -- cfop de saída
                           vn_dm_ind_aj := 2; -- 1-ajuste de acréscimo - para compor como índice não podemos utilizar como zero
                     else
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     end if;
                     --
                     vn_fase := 3.6;
                     --
                     if nvl(r_reg.vl_base_calc,0) <> 0 then
                        vn_vl_aj := round(((nvl(r_reg.vl_base_calc,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
                     else
                        vn_vl_aj := 0;
                     end if;
                     --
                     vn_fase := 3.7;
                     --
                     if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '51', '71') then
                        vn_ch_conc_cs_cr_aliq := 1;
                     else
                        vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
                     end if;
                     --
                     vn_fase := 3.8;
                     --
                     pkb_monta_vetor_m620( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                         , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                         , en_dm_ind_aj          => vn_dm_ind_aj
                                         , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                         , en_aliq_cofins_quant  => 0
                                         , en_vl_ajuste          => nvl(vn_vl_aj,0)
                                         , en_cd_cfop            => r_reg.cfop );
                     --
                  end if; -- contribuição social de apuração
                  --
               end if; -- pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 -- 0-não, 1-sim
               --
            end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
            --
         end if; -- pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
         --
      end loop; -- cursor c_a100_aj
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 4;
   --| Nota fiscal (código 01), nota fiscal avulsa (código 1b), nota fiscal de produtor (código 04) e nfe (código 55)
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 5;
      -- processo para consolidação
      for r_reg in c_c100( en_empresa_id        => r_empresa.empresa_id
                         , en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe )
      loop
         --
         exit when c_c100%notfound or (c_c100%notfound is null);
         --
         vn_fase := 5.1;
         --
         vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => r_reg.tipoimp_id      -- identificador do tipo de imposto
                                                                      , en_ind_orig_cred   => 0                     -- indicador de crédito 0-Oper.Mercado Interno, 1-Oper.Importação
                                                                      , en_codst_id        => r_reg.codst_id        -- identificador do código ST
                                                                      , en_vl_aliq         => r_reg.aliq_cofins        -- valor de alíquota em percentual
                                                                      , en_vl_aliq_quant   => r_reg.aliq_cofins_quant  -- valor da alíquota por unidade de produto
                                                                      , en_dm_cod_inc_trib => gn_dm_cod_inc_trib ); -- indicador da incidência tributária
         --
         vn_fase := 5.2;
         --
         if nvl(vn_contrsocapurpc_id,0) <> 0 then
            --
            vn_fase := 5.3;
            --
            vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
            --
            vn_fase := 5.4;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') and
               (r_reg.cod_st in ('01', '02', '03', '04', '05') and nvl(r_reg.aliq_cofins,0) <> 0) or
               (r_reg.cod_st in ('49')) then
               vn_vl_rec_brt := r_reg.vl_rec_brt;
            else
               vn_vl_rec_brt := 0;
            end if;
            --
            vn_fase := 5.5;
            -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
            -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
            if vv_cd_contrsocapurpc in ('03', '53') then
               vn_vl_bc_cont := 0;
            elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao cofins/Pasep exclusivamente com base na Folha de Salários
                  vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') then
                  vn_vl_bc_cont := r_reg.vl_bc_cont;
            else
               vn_vl_bc_cont := 0;
            end if;
            --
            vn_fase := 5.6;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31') then
               vn_quant_bc_cofins := null;
            elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                  vn_quant_bc_cofins := r_reg.quant_bc_cofins;
            else
               vn_quant_bc_cofins := null;
            end if;
            --
            vn_fase := 5.7;
            --
            if nvl(vn_vl_bc_cont,0) <> 0 then
               vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
            elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                  vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
            else
               vn_vl_cont_apur := 0;
            end if;
            --
            vn_fase := 5.8;
            --
            if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
               vn_ch_conc_cs_cr_aliq := 1;
            elsif vv_cd_contrsocapurpc in ('51') then
                  vn_ch_conc_cs_cr_aliq := 1;
            else
               vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
            end if;
            --
            vn_fase := 5.9;
            --
            if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.codst_id ) = 0 then
               -- gerar o valor na consolidação, não gerar como ajuste
               vn_fase := 5.10;
               --
               pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                   , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                   , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                   , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                   , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                   , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                   , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                   , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
               --
            end if;
            --
         else
            --
            vn_fase := 5.11;
            --
            vv_cabec_log := '. NF -> Número: '||r_reg.nro_nf||' Série: '||r_reg.serie||' Modelo fiscal: '||r_reg.cod_mod||
                            ' Data de emissão: '||to_char(r_reg.dt_emiss, 'dd/mm/yyyy')||
                            ' Operação: '||pk_csf.fkg_dominio( ev_dominio => 'NOTA_FISCAL.DM_IND_OPER'
                                                             , ev_vl      => r_reg.dm_ind_oper )||
                            ' Indicador do Emitente: '||pk_csf.fkg_dominio( ev_dominio => 'NOTA_FISCAL.DM_IND_EMIT'
                                                                          , ev_vl      => r_reg.dm_ind_emit );
            --
            gv_resumo_log := 'Notas fiscais (código 01), avulsa (código 1b), de produtor (código 04) e nfe (código 55). Código de contribuição social não '||
                             'encontrado. Parâmetros: Tipo de imposto = cofins, Indicador de crédito = 0-Oper.Mercado Interno, Código de ST = '||
                             pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id )||', Alíquota em % = '||to_char(r_reg.aliq_cofins,'999G990D000')||', Alíquota '||
                             'em qtde = '||to_char(r_reg.aliq_cofins_quant,'999G990D000')||', Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_validacao
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
         end if;
         --
         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('C100');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
         vt_mem_calc_apur_cofins.ref_item_id           := r_reg.itemnf_id;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
         vt_mem_calc_apur_cofins.aliq_prod             := nvl(r_reg.vl_aliq_cofins_quant, 0);
         vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
         vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
         --
      end loop; -- cursor c_c100
      --
      vn_fase := 6;
      -- processo para ajuste de redução ou acréscimo
      for r_reg in c_c100_aj( en_empresa_id        => r_empresa.empresa_id
                            , en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe )
      loop
         --
         exit when c_c100_aj%notfound or (c_c100_aj%notfound is null);
         --
         vn_fase := 6.1;
         -- O CFOP das notas fiscais devem NÃO gerar receita, NÃO serem escriturados e SIM para geração dos ajustes
         if pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
            --
            if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
               --
               if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 then -- 0-não, 1-sim
                  --
                  vn_fase := 6.2;
                  --
                  vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_ajuste_cons_contr_id( en_tipoimp_id      => r_reg.tipoimp_id         -- identificador do tipo de imposto (cofins ou cofins)
                                                                                , en_dm_ind_ativ     => gn_dm_ind_ativ           -- indicador de atividade
                                                                                , en_dm_cod_inc_trib => gn_dm_cod_inc_trib       -- indicador da incidência tributária
                                                                                , en_cd_codst        => r_reg.cod_st             -- código ST
                                                                                , en_aliq            => nvl(r_reg.aliq_cofins,0) ); -- valor de alíquota em percentual
                  --
                  vn_fase := 6.3;
                  --
                  if nvl(vn_contrsocapurpc_id,0) <> 0 then
                     --
                     vn_fase := 6.4;
                     --
                     vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
                     --
                     vn_fase := 6.5;
                     --
                     if instr(r_reg.cfop,1,1) in (1,2,3) then -- cfop de entrada
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     elsif instr(r_reg.cfop,1,1) in (5,6,7) then -- cfop de saída
                           vn_dm_ind_aj := 2; -- 1-ajuste de acréscimo - para compor como índice não podemos utilizar como zero
                     else
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     end if;
                     --
                     vn_fase := 6.6;
                     --
                     if nvl(r_reg.vl_base_calc,0) <> 0 then
                        vn_vl_aj := round(((nvl(r_reg.vl_base_calc,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
                     else
                        vn_vl_aj := 0;
                     end if;
                     --
                     vn_fase := 6.7;
                     --
                     if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '51', '71') then
                        vn_ch_conc_cs_cr_aliq := 1;
                     else
                        vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
                     end if;
                     --
                     vn_fase := 6.8;
                     --
                     pkb_monta_vetor_m620( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                         , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                         , en_dm_ind_aj          => vn_dm_ind_aj
                                         , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                         , en_aliq_cofins_quant  => 0
                                         , en_vl_ajuste          => nvl(vn_vl_aj,0)
                                         , en_cd_cfop            => r_reg.cfop );
                     --
                  end if; -- contribuição social de apuração
                  --
               end if; -- pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 -- 0-não, 1-sim
               --
            end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
            --
         end if; -- pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
         --
      end loop; -- cursor c_c100_aj
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 7;
   --| Equipamento ECF (código 02 e 2D)
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 8;
      -- processo para consolidação
      for r_reg in c_c400( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_c400%notfound or (c_c400%notfound is null);
         --
         vn_fase := 8.1;
         --
         vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => gn_tipoimp_id         -- identificador do tipo de imposto
                                                                      , en_ind_orig_cred   => 0                     -- indicador de crédito 0-Oper.Mercado Interno, 1-Oper.Importação
                                                                      , en_codst_id        => r_reg.codst_id        -- identificador do código ST
                                                                      , en_vl_aliq         => r_reg.aliq_cofins        -- valor de alíquota em percentual
                                                                      , en_vl_aliq_quant   => r_reg.aliq_cofins_quant  -- valor da alíquota por unidade de produto
                                                                      , en_dm_cod_inc_trib => gn_dm_cod_inc_trib ); -- indicador da incidência tributária
         --
         vn_fase := 8.2;
         --
         if nvl(vn_contrsocapurpc_id,0) <> 0 then
            --
            vn_fase := 8.3;
            --
            vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
            --
            vn_fase := 8.4;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') and
               (r_reg.cod_st in ('01', '02', '03', '04', '05') and nvl(r_reg.aliq_cofins,0) <> 0) or
               (r_reg.cod_st in ('49')) then
               vn_vl_rec_brt := r_reg.vl_rec_brt;
            else
               vn_vl_rec_brt := 0;
            end if;
            --
            vn_fase := 8.5;
            -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
            -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
            if vv_cd_contrsocapurpc in ('03', '53') then
               vn_vl_bc_cont := 0;
            elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao cofins/Pasep exclusivamente com base na Folha de Salários
                  vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') then
                  vn_vl_bc_cont := r_reg.vl_bc_cont;
            else
               vn_vl_bc_cont := 0;
            end if;
            --
            vn_fase := 8.6;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31') then
               vn_quant_bc_cofins := null;
            elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                  vn_quant_bc_cofins := r_reg.quant_bc_cofins;
            else
               vn_quant_bc_cofins := null;
            end if;
            --
            vn_fase := 8.7;
            --
            if nvl(vn_vl_bc_cont,0) <> 0 then
               vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
            elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                  vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
            else
               vn_vl_cont_apur := 0;
            end if;
            --
            vn_fase := 8.8;
            --
            if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
               vn_ch_conc_cs_cr_aliq := 1;
            elsif vv_cd_contrsocapurpc in ('51') then
                  vn_ch_conc_cs_cr_aliq := 1;
            else
               vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
            end if;
            --
            vn_fase := 8.9;
            --
            begin
          select id.cfop_id
            into vn_cfop_id
                 from doc_fiscal_emit_ecf    df
                    , it_doc_fiscal_emit_ecf id
                where df.reducaozecf_id      = r_reg.reducaozecf_id
                  and id.docfiscalemitecf_id = df.id
                  and rownum                 = 1;
            exception
               when others then
                  vn_cfop_id := 0;
            end;
            --
            vn_fase := 8.10;
            --
            if nvl(vn_cfop_id,0) = 0 or -- não encontrou cfop_id nos itens dos documentos fiscais do cupom
               pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr( en_empresa_id => r_empresa.empresa_id, en_cfop_id => vn_cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.codst_id ) = 0 then -- gerar o valor na consolidação
               --
               vn_fase := 8.11;
               --
               pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                   , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                   , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                   , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                   , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                   , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                   , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                   , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
               --
            end if;
            --
         else
            --
            vn_fase := 8.12;
            --
            vv_cabec_log := '. Equipamento -> Modelo: '||r_reg.ecf_mod||' Número de série de fabricação: '||r_reg.ecf_fab||
                            ' Número do caixa atribuído = '||r_reg.ecf_cx||' Modelo fiscal: '||r_reg.cod_mod;
            --
            gv_resumo_log := 'Equipamento ECF (código 02 e 2D). Código de contribuição social não encontrado. Parâmetros: Tipo de imposto = cofins, Indicador de '||
                             'crédito = 0-Oper.Mercado Interno, Código de ST = '||pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id )||', Alíquota em % = '||
                             to_char(r_reg.aliq_cofins,'999G990D0000')||', Alíquota em qtde = '||to_char(r_reg.aliq_cofins_quant,'999G990D0000')||
                             ', Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_validacao
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
         end if;
         --
         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('C400');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.equipecf_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Equipamento ECF: '||r_reg.equipecf_id;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
         vt_mem_calc_apur_cofins.aliq_prod             := nvl(r_reg.vl_aliq_cofins_quant, 0);
         vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
         vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
         --
      end loop; -- cursor c_c400
      --
      vn_fase := 9;
      -- processo para ajuste de redução ou acréscimo
      for r_reg in c_c400_aj( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_c400_aj%notfound or (c_c400_aj%notfound is null);
         --
         vn_fase := 9.1;
         -- O CFOP das notas fiscais devem NÃO gerar receita, NÃO serem escriturados e SIM para geração dos ajustes
         if pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
            --
            if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
               --
               if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 then -- 0-não, 1-sim
                  --
                  vn_fase := 9.2;
                  --
                  vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_ajuste_cons_contr_id( en_tipoimp_id      => gn_tipoimp_id            -- identificador do tipo de imposto (cofins ou cofins)
                                                                                , en_dm_ind_ativ     => gn_dm_ind_ativ           -- indicador de atividade
                                                                                , en_dm_cod_inc_trib => gn_dm_cod_inc_trib       -- indicador da incidência tributária
                                                                                , en_cd_codst        => r_reg.cod_st             -- código ST
                                                                                , en_aliq            => nvl(r_reg.aliq_cofins,0) ); -- valor de alíquota em percentual
                  --
                  vn_fase := 9.3;
                  --
                  if nvl(vn_contrsocapurpc_id,0) <> 0 then
                     --
                     vn_fase := 9.4;
                     --
                     vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
                     --
                     vn_fase := 9.5;
                     --
                     if instr(r_reg.cfop,1,1) in (1,2,3) then -- cfop de entrada
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     elsif instr(r_reg.cfop,1,1) in (5,6,7) then -- cfop de saída
                           vn_dm_ind_aj := 2; -- 1-ajuste de acréscimo - para compor como índice não podemos utilizar como zero
                     else
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     end if;
                     --
                     vn_fase := 9.6;
                     --
                     if nvl(r_reg.vl_base_calc,0) <> 0 then
                        vn_vl_aj := round(((nvl(r_reg.vl_base_calc,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
                     else
                        vn_vl_aj := 0;
                     end if;
                     --
                     vn_fase := 9.7;
                     --
                     if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '51', '71') then
                        vn_ch_conc_cs_cr_aliq := 1;
                     else
                        vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
                     end if;
                     --
                     vn_fase := 9.8;
                     --
                     pkb_monta_vetor_m620( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                         , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                         , en_dm_ind_aj          => vn_dm_ind_aj
                                         , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                         , en_aliq_cofins_quant  => 0
                                         , en_vl_ajuste          => nvl(vn_vl_aj,0)
                                         , en_cd_cfop            => r_reg.cfop );
                     --
                  end if; -- contribuição social de apuração
                  --
               end if; -- pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 -- 0-não, 1-sim
               --
            end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
            --
         end if; -- pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
         --
      end loop; -- cursor c_c400_aj
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 10;
   --| Resumo diário das notas fiscais de venda a consumidor (código 02)
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 11;
      -- processo para consolidação
      for r_reg in c_c380( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_c380%notfound or (c_c380%notfound is null);
         --
         vn_fase := 11.1;
         --
         vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => gn_tipoimp_id         -- identificador do tipo de imposto
                                                                      , en_ind_orig_cred   => 0                     -- indicador de crédito 0-Oper.Mercado Interno, 1-Oper.Importação
                                                                      , en_codst_id        => r_reg.codst_id        -- identificador do código ST
                                                                      , en_vl_aliq         => r_reg.aliq_cofins        -- valor de alíquota em percentual
                                                                      , en_vl_aliq_quant   => r_reg.aliq_cofins_quant  -- valor da alíquota por unidade de produto
                                                                      , en_dm_cod_inc_trib => gn_dm_cod_inc_trib ); -- indicador da incidência tributária
         --
         vn_fase := 11.2;
         --
         if nvl(vn_contrsocapurpc_id,0) <> 0 then
            --
            vn_fase := 11.3;
            --
            vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
            --
            vn_fase := 11.4;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') and
               (r_reg.cod_st in ('01', '02', '03', '04', '05') and nvl(r_reg.aliq_cofins,0) <> 0) or
               (r_reg.cod_st in ('49')) then
               vn_vl_rec_brt := r_reg.vl_rec_brt;
            else
               vn_vl_rec_brt := 0;
            end if;
            --
            vn_fase := 11.5;
            -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
            -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
            if vv_cd_contrsocapurpc in ('03', '53') then
               vn_vl_bc_cont := 0;
            elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao cofins/Pasep exclusivamente com base na Folha de Salários
                  vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') then
                  vn_vl_bc_cont := r_reg.vl_bc_cont;
            else
               vn_vl_bc_cont := 0;
            end if;
            --
            vn_fase := 11.6;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31') then
               vn_quant_bc_cofins := null;
            elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                  vn_quant_bc_cofins := r_reg.quant_bc_cofins;
            else
               vn_quant_bc_cofins := null;
            end if;
            --
            vn_fase := 11.7;
            --
            if nvl(vn_vl_bc_cont,0) <> 0 then
               vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
            elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                  vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
            else
               vn_vl_cont_apur := 0;
            end if;
            --
            vn_fase := 11.8;
            --
            if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
               vn_ch_conc_cs_cr_aliq := 1;
            elsif vv_cd_contrsocapurpc in ('51') then
                  vn_ch_conc_cs_cr_aliq := 1;
            else
               vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
            end if;
            --
            vn_fase := 11.9;
            --
            if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.codst_id ) = 0 then -- gerar o valor na consolidação
               --
               vn_fase := 11.10;
               --
               pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                   , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                   , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                   , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                   , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                   , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                   , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                   , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
               --
            end if;
            --
         else
            --
            vn_fase := 11.11;
            --
            vv_cabec_log := '. Resumo diário -> Série: '||r_reg.serie||' Subsérie: '||r_reg.subserie||' Número de documento inicial = '||r_reg.num_doc_ini||
                            ' Número de documento final = '||r_reg.num_doc_fin||' Modelo fiscal: '||r_reg.cod_mod;
            --
            gv_resumo_log := 'Resumo diário das notas fiscais de venda a consumidor (código 02). Código de contribuição social não encontrado. Parâmetros: Tipo '||
                             'de imposto = cofins, Indicador de crédito = 0-Oper.Mercado Interno, Código de ST = '||
                             pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id )||', Alíquota em % = '||to_char(r_reg.aliq_cofins,'999G990D0000')||', Alíquota '||
                             'em qtde = '||to_char(r_reg.aliq_cofins_quant,'999G990D0000')||', Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_validacao
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
         end if;
         --
         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('C380');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.resdianfvendacons_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Resumo Diario: '||r_reg.resdianfvendacons_id;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
         vt_mem_calc_apur_cofins.aliq_prod             := nvl(r_reg.vl_aliq_cofins_quant, 0);
         vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
         vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
         --
      end loop; -- cursor c_c380
      --
      vn_fase := 12;
      -- processo para ajuste de redução ou acréscimo
      for r_reg in c_c380_aj( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_c380_aj%notfound or (c_c380_aj%notfound is null);
         --
         vn_fase := 12.1;
         -- O CFOP das notas fiscais devem NÃO gerar receita, NÃO serem escriturados e SIM para geração dos ajustes
         if pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
            --
            if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
               --
               if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 then -- 0-não, 1-sim
                  --
                  vn_fase := 12.2;
                  --
                  vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_ajuste_cons_contr_id( en_tipoimp_id      => gn_tipoimp_id            -- identificador do tipo de imposto (cofins ou cofins)
                                                                                , en_dm_ind_ativ     => gn_dm_ind_ativ           -- indicador de atividade
                                                                                , en_dm_cod_inc_trib => gn_dm_cod_inc_trib       -- indicador da incidência tributária
                                                                                , en_cd_codst        => r_reg.cod_st             -- código ST
                                                                                , en_aliq            => nvl(r_reg.aliq_cofins,0) ); -- valor de alíquota em percentual
                  --
                  vn_fase := 12.3;
                  --
                  if nvl(vn_contrsocapurpc_id,0) <> 0 then
                     --
                     vn_fase := 12.4;
                     --
                     vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
                     --
                     vn_fase := 12.5;
                     --
                     if instr(r_reg.cfop,1,1) in (1,2,3) then -- cfop de entrada
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     elsif instr(r_reg.cfop,1,1) in (5,6,7) then -- cfop de saída
                           vn_dm_ind_aj := 2; -- 1-ajuste de acréscimo - para compor como índice não podemos utilizar como zero
                     else
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     end if;
                     --
                     vn_fase := 12.6;
                     --
                     if nvl(r_reg.vl_base_calc,0) <> 0 then
                        vn_vl_aj := round(((nvl(r_reg.vl_base_calc,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
                     else
                        vn_vl_aj := 0;
                     end if;
                     --
                     vn_fase := 12.7;
                     --
                     if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '51', '71') then
                        vn_ch_conc_cs_cr_aliq := 1;
                     else
                        vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
                     end if;
                     --
                     vn_fase := 12.8;
                     --
                     pkb_monta_vetor_m620( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                         , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                         , en_dm_ind_aj          => vn_dm_ind_aj
                                         , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                         , en_aliq_cofins_quant  => 0
                                         , en_vl_ajuste          => nvl(vn_vl_aj,0)
                                         , en_cd_cfop            => r_reg.cfop );
                     --
                  end if; -- contribuição social de apuração
                  --
               end if; -- pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 -- 0-não, 1-sim
               --
            end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
            --
         end if; -- pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
         --
      end loop; -- cursor c_c380_aj
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 13;
   --| Cupom Fiscal Eletrônico (código 59)
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 14;
      -- processo para consolidação
      for r_reg in c_c860( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_c860%notfound or (c_c860%notfound is null);
         --
         vn_fase := 14.1;
         --
         vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => r_reg.tipoimp_id         -- identificador do tipo de imposto
                                                                      , en_ind_orig_cred   => 0                        -- indicador de crédito 0-Oper.Mercado Interno, 1-Oper.Importação
                                                                      , en_codst_id        => r_reg.codst_id           -- identificador do código ST
                                                                      , en_vl_aliq         => r_reg.aliq_cofins        -- valor de alíquota em percentual
                                                                      , en_vl_aliq_quant   => r_reg.aliq_cofins_quant  -- valor da alíquota por unidade de produto
                                                                      , en_dm_cod_inc_trib => gn_dm_cod_inc_trib );    -- indicador da incidência tributária
         --
         vn_fase := 14.2;
         --
         if nvl(vn_contrsocapurpc_id,0) <> 0 then
            --
            vn_fase := 14.3;
            --
            vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
            --
            vn_fase := 14.4;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') and
               (r_reg.cod_st in ('01', '02', '03', '04', '05') and nvl(r_reg.aliq_cofins,0) <> 0) or
               (r_reg.cod_st in ('49')) then
               vn_vl_rec_brt := r_reg.vl_rec_brt;
            else
               vn_vl_rec_brt := 0;
            end if;
            --
            vn_fase := 14.5;
            -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
            -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
            if vv_cd_contrsocapurpc in ('03', '53') then
               vn_vl_bc_cont := 0;
            elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao Cofins exclusivamente com base na Folha de Salários
                  vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') then
                  vn_vl_bc_cont := r_reg.vl_bc_cont;
            else
               vn_vl_bc_cont := 0;
            end if;
            --
            vn_fase := 14.6;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31') then
               vn_quant_bc_cofins := null;
            elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                  vn_quant_bc_cofins := r_reg.quant_bc_cofins;
            else
               vn_quant_bc_cofins := null;
            end if;
            --
            vn_fase := 14.7;
            --
            if nvl(vn_vl_bc_cont,0) <> 0 then
               vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
            elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                  vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
            else
               vn_vl_cont_apur := 0;
            end if;
            --
            vn_fase := 14.8;
            --
            if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
               vn_ch_conc_cs_cr_aliq := 1;
            elsif vv_cd_contrsocapurpc in ('51') then
                  vn_ch_conc_cs_cr_aliq := 1;
            else
               vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
            end if;
            --
            vn_fase := 14.9;
            --
            if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.codst_id ) = 0 then
               -- gerar o valor na consolidação, não gerar como ajuste
               vn_fase := 14.10;
               --
               pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                   , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                   , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                   , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                   , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                   , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                   , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                   , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
               --
            end if;
            --
         else
            --
            vn_fase := 14.11;
            --
            vv_cabec_log := '. CF -> Número: '||r_reg.nro_cfe||' Série/SAT: '||r_reg.nro_serie_sat||' Modelo fiscal: '||r_reg.cod_mod||
                            ' Data de emissão: '||to_char(r_reg.dt_emissao, 'dd/mm/yyyy')||
                            ' Operação: Saída e Indicador do Emitente: Emissão Própria';
            --
            gv_resumo_log := 'Cupons fiscais (código 59). Código de contribuição social não encontrado. Parâmetros: Tipo de imposto = COFINS, Indicador de '||
                             'crédito = 0-Oper.Mercado Interno, Código de ST = '||pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id )||', Alíquota em % = '||
                             to_char(r_reg.aliq_cofins,'999G990D000')||', Alíquota em qtde = '||to_char(r_reg.aliq_cofins_quant,'999G990D000')||
                             ', Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_validacao
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
         end if;
         --
         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('C860');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.cupomfiscal_id;
         vt_mem_calc_apur_cofins.ref_item_id           := r_reg.itemcupomfiscal_id;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Cupom Fiscal/Serie/Item: '||r_reg.nro_cfe||'/'||r_reg.nro_serie_sat||'/'||r_reg.nro_item;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
         vt_mem_calc_apur_cofins.aliq_prod             := nvl(r_reg.vl_aliq_cofins_quant, 0);
         vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
         vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
         --
      end loop; -- cursor c_c860
      --
      vn_fase := 15;
      -- processo para ajuste de redução ou acréscimo
      for r_reg in c_c860_aj( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_c860_aj%notfound or (c_c860_aj%notfound is null);
         --
         vn_fase := 15.1;
         -- O CFOP dos cupons fiscais devem NÃO gerar receita, NÃO serem escriturados e SIM para geração dos ajustes
         if pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
            --
            if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
               --
               if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 then -- 0-não, 1-sim
                  --
                  vn_fase := 15.2;
                  --
                  vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_ajuste_cons_contr_id( en_tipoimp_id      => r_reg.tipoimp_id            -- identificador do tipo de imposto (pis ou cofins)
                                                                                , en_dm_ind_ativ     => gn_dm_ind_ativ              -- indicador de atividade
                                                                                , en_dm_cod_inc_trib => gn_dm_cod_inc_trib          -- indicador da incidência tributária
                                                                                , en_cd_codst        => r_reg.cod_st                -- código ST
                                                                                , en_aliq            => nvl(r_reg.aliq_cofins,0) ); -- valor de alíquota em percentual
                  --
                  vn_fase := 15.3;
                  --
                  if nvl(vn_contrsocapurpc_id,0) <> 0 then
                     --
                     vn_fase := 15.4;
                     --
                     vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
                     --
                     vn_fase := 15.5;
                     --
                     if instr(r_reg.cfop,1,1) in (1,2,3) then -- cfop de entrada
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     elsif instr(r_reg.cfop,1,1) in (5,6,7) then -- cfop de saída
                           vn_dm_ind_aj := 2; -- 1-ajuste de acréscimo - para compor como índice não podemos utilizar como zero
                     else
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     end if;
                     --
                     vn_fase := 15.6;
                     --
                     if nvl(r_reg.vl_base_calc,0) <> 0 then
                        vn_vl_aj := round(((nvl(r_reg.vl_base_calc,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
                     else
                        vn_vl_aj := 0;
                     end if;
                     --
                     vn_fase := 15.7;
                     --
                     if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '51', '71') then
                        vn_ch_conc_cs_cr_aliq := 1;
                     else
                        vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
                     end if;
                     --
                     vn_fase := 15.8;
                     --
                     pkb_monta_vetor_m620( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                         , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                         , en_dm_ind_aj          => vn_dm_ind_aj
                                         , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                         , en_aliq_cofins_quant  => 0
                                         , en_vl_ajuste          => nvl(vn_vl_aj,0)
                                         , en_cd_cfop            => r_reg.cfop );
                     --
                  end if; -- contribuição social de apuração
                  --
               end if; -- pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 -- 0-não, 1-sim
               --
            end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
            --
         end if; -- pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
         --
      end loop; -- cursor c_c860_aj
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 16;
   --| Nota Fiscal de Serviço de Comunicação (CÓDIGO 21), Nota Fiscal de Serviço de Telecomunicação (CÓDIGO 22)
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 17;
      -- processo para consolidação
      for r_reg in c_d600( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_d600%notfound or (c_d600%notfound is null);
         --
         vn_fase := 17.1;
         --
         vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => r_reg.tipoimp_id      -- identificador do tipo de imposto
                                                                      , en_ind_orig_cred   => 0                     -- indicador de crédito 0-Oper.Mercado Interno, 1-Oper.Importação
                                                                      , en_codst_id        => r_reg.codst_id        -- identificador do código ST
                                                                      , en_vl_aliq         => r_reg.aliq_cofins        -- valor de alíquota em percentual
                                                                      , en_vl_aliq_quant   => r_reg.aliq_cofins_quant  -- valor da alíquota por unidade de produto
                                                                      , en_dm_cod_inc_trib => gn_dm_cod_inc_trib ); -- indicador da incidência tributária
         --
         vn_fase := 17.2;
         --
         if nvl(vn_contrsocapurpc_id,0) <> 0 then
            --
            vn_fase := 17.3;
            --
            vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
            --
            vn_fase := 17.4;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') and
               (r_reg.cod_st in ('01', '02', '03', '04', '05') and nvl(r_reg.aliq_cofins,0) <> 0) or
               (r_reg.cod_st in ('49')) then
               vn_vl_rec_brt := r_reg.vl_rec_brt;
            else
               vn_vl_rec_brt := 0;
            end if;
            --
            vn_fase := 17.5;
            -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
            -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
            if vv_cd_contrsocapurpc in ('03', '53') then
               vn_vl_bc_cont := 0;
            elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao cofins/Pasep exclusivamente com base na Folha de Salários
                  vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') then
                  vn_vl_bc_cont := r_reg.vl_bc_cont;
            else
               vn_vl_bc_cont := 0;
            end if;
            --
            vn_fase := 17.6;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31') then
               vn_quant_bc_cofins := null;
            elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                  vn_quant_bc_cofins := r_reg.quant_bc_cofins;
            else
               vn_quant_bc_cofins := null;
            end if;
            --
            vn_fase := 17.7;
            --
            if nvl(vn_vl_bc_cont,0) <> 0 then
               vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
            elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                  vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
            else
               vn_vl_cont_apur := 0;
            end if;
            --
            vn_fase := 17.8;
            --
            if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
               vn_ch_conc_cs_cr_aliq := 1;
            elsif vv_cd_contrsocapurpc in ('51') then
                  vn_ch_conc_cs_cr_aliq := 1;
            else
               vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
            end if;
            --
            vn_fase := 17.9;
            --
            if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.codst_id ) = 0 then
               -- gerar o valor na consolidação, não gerar como ajuste
               vn_fase := 17.10;
               --
               pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                   , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                   , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                   , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                   , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                   , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                   , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                   , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
               --
            end if;
            --
         else
            --
            vn_fase := 17.11;
            --
            vv_cabec_log := '. NF -> Número: '||r_reg.nro_nf||' Série: '||r_reg.serie||' Modelo fiscal: '||r_reg.cod_mod||
                            ' Data de emissão: '||to_char(r_reg.dt_emiss, 'dd/mm/yyyy')||
                            ' Operação: '||pk_csf.fkg_dominio( ev_dominio => 'NOTA_FISCAL.DM_IND_OPER'
                                                             , ev_vl      => r_reg.dm_ind_oper )||
                            ' Indicador do Emitente: '||pk_csf.fkg_dominio( ev_dominio => 'NOTA_FISCAL.DM_IND_EMIT'
                                                                          , ev_vl      => r_reg.dm_ind_emit );
            --
            gv_resumo_log := 'Nota Fiscal de Serviço de Comunicação (código 21), Nota Fiscal de Serviço de Telecomunicação (código 22). Código de contribuição social não '||
                             'encontrado. Parâmetros: Tipo de imposto = cofins, Indicador de crédito = 0-Oper.Mercado Interno, Código de ST = '||
                             pk_csf.fkg_cod_st_cod( en_id_st => r_reg.codst_id )||', Alíquota em % = '||to_char(r_reg.aliq_cofins,'999G990D000')||', Alíquota '||
                             'em qtde = '||to_char(r_reg.aliq_cofins_quant,'999G990D000')||', Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_validacao
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
         end if;
         --
         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('D600');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.notafiscal_id;
         vt_mem_calc_apur_cofins.ref_item_id           := r_reg.itemnf_id;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Nota Fiscal/Serie/Item: '||r_reg.nro_nf||'/'||r_reg.serie||'/'||r_reg.nro_item;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
         vt_mem_calc_apur_cofins.aliq_prod             := nvl(r_reg.vl_aliq_cofins_quant, 0);
         vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
         vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
         --
      end loop; -- cursor c_d600
      --
      vn_fase := 18;
      -- processo para ajuste de redução ou acréscimo
      for r_reg in c_d600_aj( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_d600_aj%notfound or (c_d600_aj%notfound is null);
         --
         vn_fase := 18.1;
         -- O CFOP das notas fiscais devem NÃO gerar receita, NÃO serem escriturados e SIM para geração dos ajustes
         if pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
            --
            if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
               --
               if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 then -- 0-não, 1-sim
                  --
                  vn_fase := 18.2;
                  --
                  vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_ajuste_cons_contr_id( en_tipoimp_id      => r_reg.tipoimp_id         -- identificador do tipo de imposto (cofins ou cofins)
                                                                                , en_dm_ind_ativ     => gn_dm_ind_ativ           -- indicador de atividade
                                                                                , en_dm_cod_inc_trib => gn_dm_cod_inc_trib       -- indicador da incidência tributária
                                                                                , en_cd_codst        => r_reg.cod_st             -- código ST
                                                                                , en_aliq            => nvl(r_reg.aliq_cofins,0) ); -- valor de alíquota em percentual
                  --
                  vn_fase := 18.3;
                  --
                  if nvl(vn_contrsocapurpc_id,0) <> 0 then
                     --
                     vn_fase := 18.4;
                     --
                     vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
                     --
                     vn_fase := 18.5;
                     --
                     if instr(r_reg.cfop,1,1) in (1,2,3) then -- cfop de entrada
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     elsif instr(r_reg.cfop,1,1) in (5,6,7) then -- cfop de saída
                           vn_dm_ind_aj := 2; -- 1-ajuste de acréscimo - para compor como índice não podemos utilizar como zero
                     else
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     end if;
                     --
                     vn_fase := 18.6;
                     --
                     if nvl(r_reg.vl_base_calc,0) <> 0 then
                        vn_vl_aj := round(((nvl(r_reg.vl_base_calc,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
                     else
                        vn_vl_aj := 0;
                     end if;
                     --
                     vn_fase := 18.7;
                     --
                     if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '51', '71') then
                        vn_ch_conc_cs_cr_aliq := 1;
                     else
                        vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
                     end if;
                     --
                     vn_fase := 18.8;
                     --
                     pkb_monta_vetor_m620( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                         , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                         , en_dm_ind_aj          => vn_dm_ind_aj
                                         , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                         , en_aliq_cofins_quant  => 0
                                         , en_vl_ajuste          => nvl(vn_vl_aj,0)
                                         , en_cd_cfop            => r_reg.cfop );
                     --
                  end if; -- contribuição social de apuração
                  --
               end if; -- pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 -- 0-não, 1-sim
               --
            end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
            --
         end if; -- pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
         --
      end loop; -- cursor c_d600_aj
      --
   end loop; -- cursor c_empresa
   --
   vn_fase := 19;
   --| Resumo da Escrituração Diária  Prestação de Serviços de Transporte: Nota Fiscal de Serviço de Transporte (Código 07), Conhecimento de Transporte
   --| Rodoviário de Cargas (Código 08), Conhecimento de Transporte de Cargas Avulso (Código 8B), Conhecimento de Transporte Aquaviário de Cargas (Código 09),
   --| Conhecimento de Transporte Aéreo (Código 10), Conhecimento de Transporte Ferroviário de Cargas (Código 11), Conhecimento de Transporte Multimodal de
   --| Cargas (Código 26), Nota Fiscal de Transporte Ferroviário de Carga (Código 27), Conhecimento de Transporte Eletrônico  CT-E (Código 57), Bilhete de
   --| Passagem Eletrônico - BP-e (Código 63) e Conhecimento de Transporte Eletrônico para Outros Serviços  CT-e OS, modelo 67.
   --
   vn_tipoimp_id := pk_csf.fkg_tipo_imposto_id ( en_cd => '5');
   --
   for r_empresa in c_empresa
   loop
      --
      vn_fase := 20;
      -- processo para consolidação
      for r_reg in c_d200( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_d200%notfound or (c_d200%notfound is null);
         --
         vn_fase := 20.1;
         --
         vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_relac_cons_contr_id( en_tipoimp_id      => vn_tipoimp_id           -- identificador do tipo de imposto
                                                                      , en_ind_orig_cred   => r_reg.dm_orig_merc      -- indicador de crédito 0-Nacional, exceto as indicadas nos códigos 3 a 5
                                                                                                                      -- 1-Estrangeira - Importação direta, exceto a indicada no código 6
                                                                                                                      -- 2-Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7
                                                                                                                      -- 3-Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%
                                                                                                                      -- 4-Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes
                                                                                                                      -- 5-Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%
                                                                                                                      -- 6-Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX
                                                                                                                      -- 7-Estrangeira - Adquirida no mercado interno, sem similar nacional, constante em lista da CAMEX.
                                                                                                                      -- 8-Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%
                                                                      , en_codst_id        => r_reg.codst_id          -- identificador do código ST
                                                                      , en_vl_aliq         => r_reg.aliq_cofins       -- valor de alíquota em percentual
                                                                      , en_vl_aliq_quant   => r_reg.aliq_cofins_quant -- valor da alíquota por unidade de produto
                                                                      , en_dm_cod_inc_trib => gn_dm_cod_inc_trib );   -- indicador da incidência tributária
         --
         vn_fase := 20.2;
         --
         if nvl(vn_contrsocapurpc_id,0) <> 0 then
            --
            vn_fase := 20.3;
            --
            vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
            --
            vn_fase := 20.4;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') and
               r_reg.cod_st in ('01', '02', '03', '05') and
               nvl(r_reg.aliq_cofins,0) <> 0 then
               vn_vl_rec_brt := r_reg.vl_rec_brt;
            else
               vn_vl_rec_brt := 0;
            end if;
            --
            vn_fase := 20.5;
            -- 03-Contribuição não-cumulativa apurada a alíquota por unidade de medida de produto
            -- 53-Contribuição cumulativa apurada a alíquota por unidade de medida de produto
            if vv_cd_contrsocapurpc in ('03', '53') then
               vn_vl_bc_cont := 0;
            elsif gv_dm_ind_nat_pj in ('00', '02', '03', '05') and -- 00-Sociedade empresária em geral, 02-Entidade sujeita ao PIS/Pasep exclusivamente com base na Folha de Salários
                  vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31', '32') then
                  vn_vl_bc_cont := r_reg.vl_bc_cont;
            else
               vn_vl_bc_cont := 0;
            end if;
            --
            vn_fase := 20.6;
            --
            if vv_cd_contrsocapurpc in ('01', '51', '02', '52', '31') then
               vn_quant_bc_cofins := null;
            elsif vv_cd_contrsocapurpc in ('03', '53', '32') then
                  vn_quant_bc_cofins := r_reg.quant_bc_cofins;
            else
               vn_quant_bc_cofins := null;
            end if;
            --
            vn_fase := 20.7;
            --
            if nvl(vn_vl_bc_cont,0) <> 0 then
               vn_vl_cont_apur := round(((nvl(vn_vl_bc_cont,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
            elsif nvl(r_reg.quant_bc_cofins,0) <> 0 then
                  vn_vl_cont_apur := round((nvl(vn_quant_bc_cofins,0) * nvl(r_reg.aliq_cofins_quant,0)),2);
            else
               vn_vl_cont_apur := 0;
            end if;
            --
            vn_fase := 20.8;
            --
            if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '71') then
               vn_ch_conc_cs_cr_aliq := 1;
            elsif vv_cd_contrsocapurpc in ('51') then
                  vn_ch_conc_cs_cr_aliq := 1;
            else
               vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
            end if;
            --
            vn_fase := 20.9;
            --
            if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr( en_empresa_id      => r_empresa.empresa_id
                                                           , en_cfop_id         => r_reg.cfop_id
                                                           , en_codst_id_pis    => null
                                                           , en_codst_id_cofins => r_reg.codst_id ) = 0 then
               --
               -- gerar o valor na consolidação, não gerar como ajuste
               vn_fase := 20.10;
               --
               pkb_monta_vetor_m600( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                   , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                   , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                   , en_aliq_cofins_quant  => nvl(r_reg.aliq_cofins_quant,0)
                                   , en_vl_rec_brt         => nvl(vn_vl_rec_brt,0)
                                   , en_vl_bc_cont         => nvl(vn_vl_bc_cont,0)
                                   , en_quant_bc_cofins    => nvl(vn_quant_bc_cofins,0)
                                   , en_vl_cont_apur       => nvl(vn_vl_cont_apur,0) );
               --
            end if;
            --
         else
            --
            vn_fase := 20.11;
            --
            vv_cabec_log := '. CT - Prestação de Serviços de Transporte -> Número: '||r_reg.nro_ct||' Série: '||r_reg.serie||' Sub-Série: '||r_reg.subserie||
                            ' Modelo fiscal: '||r_reg.cod_mod||' Data de emissão: '||to_char(r_reg.dt_emiss, 'dd/mm/yyyy')||
                            ' Operação: Saída, Indicador do Emitente: Emissão Própria.';
            --
            gv_resumo_log := 'Resumo da Escrituração Diária  Prestação de Serviços de Transporte. Código de contribuição social não encontrado. Parâmetros: '||
                             'Tipo de imposto = COFINS, Indicador de crédito = '||pk_csf.fkg_dominio( ev_dominio => 'CT_REG_ANAL.DM_ORIG_MERC', ev_vl => r_reg.dm_orig_merc )||
                             ', Código de ST = '||r_reg.cod_st||', Alíquota em % = '||to_char(r_reg.aliq_cofins,'999G990D000')||', Alíquota em qtde = '||
                             to_char(r_reg.aliq_cofins_quant,'999G990D000')||', Indicador da incidência tributária = '||gn_dm_cod_inc_trib||'.';
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log||vv_cabec_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_validacao
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
         end if;
         --
         -- Monta a memória de calculo --------------------------------
         vn_registrefdpc_id                            := fkg_ret_registrefdpc_id('D200');
         vt_mem_calc_apur_cofins                       := null;
         vt_mem_calc_apur_cofins.perconscontrcofins_id := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id       := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.referencia_id         := r_reg.conhectransp_id;
         vt_mem_calc_apur_cofins.ref_item_id           := null;
         vt_mem_calc_apur_cofins.tipo_operacao         := r_reg.tipo_operacao;
         vt_mem_calc_apur_cofins.ident_doc             := 'Conhecimento de Transporte/Serie: '||r_reg.nro_ct||'/'||r_reg.serie;
         vt_mem_calc_apur_cofins.dm_ind_emit           := r_reg.dm_ind_emit;
         vt_mem_calc_apur_cofins.vl_base_calc          := case r_reg.tipo when 1 then r_reg.vl_base_calc else r_reg.qtde_base_calc_prod end;  -- 1-alíq.perc, 2-alíq.qtde
         vt_mem_calc_apur_cofins.aliq_perc             := nvl(r_reg.aliq_cofins, 0);
         vt_mem_calc_apur_cofins.aliq_prod             := nvl(r_reg.vl_aliq_cofins_quant, 0);
         vt_mem_calc_apur_cofins.vl_imp_trib           := nvl(r_reg.vl_imp_trib, 0);
         vt_mem_calc_apur_cofins.reg_controlador       := 'M600';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
         --
      end loop; -- cursor c_d200
      --
      vn_fase := 21;
      -- processo para ajuste de redução ou acréscimo
      for r_reg in c_d200_aj( en_empresa_id => r_empresa.empresa_id )
      loop
         --
         exit when c_d200_aj%notfound or (c_d200_aj%notfound is null);
         --
         vn_fase := 21.1;
         -- O CFOP dos conhecimentos de transporte devem NÃO gerar receita, NÃO serem escriturados e SIM para geração dos ajustes
         if pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
            --
            if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 then -- 0-não, 1-sim
               --
               if pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 then -- 0-não, 1-sim
                  --
                  vn_fase := 21.2;
                  --
                  vn_contrsocapurpc_id := pk_csf_efd_pc.fkg_ajuste_cons_contr_id( en_tipoimp_id      => vn_tipoimp_id               -- identificador do tipo de imposto (pis ou cofins)
                                                                                , en_dm_ind_ativ     => gn_dm_ind_ativ              -- indicador de atividade
                                                                                , en_dm_cod_inc_trib => gn_dm_cod_inc_trib          -- indicador da incidência tributária
                                                                                , en_cd_codst        => r_reg.cod_st                -- código ST
                                                                                , en_aliq            => nvl(r_reg.aliq_cofins,0) ); -- valor de alíquota em percentual
                  --
                  vn_fase := 21.3;
                  --
                  if nvl(vn_contrsocapurpc_id,0) <> 0 then
                     --
                     vn_fase := 21.4;
                     --
                     vv_cd_contrsocapurpc := pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( en_contrsocapurpc_id => vn_contrsocapurpc_id );
                     --
                     vn_fase := 21.5;
                     --
                     if instr(r_reg.cfop,1,1) in (1,2,3) then -- cfop de entrada
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     elsif instr(r_reg.cfop,1,1) in (5,6,7) then -- cfop de saída
                           vn_dm_ind_aj := 2; -- 1-ajuste de acréscimo - para compor como índice não podemos utilizar como zero
                     else
                        vn_dm_ind_aj := 1; -- 0-ajuste de redução - para compor como índice não podemos utilizar como zero
                     end if;
                     --
                     vn_fase := 21.6;
                     --
                     if nvl(r_reg.vl_base_calc,0) <> 0 then
                        vn_vl_aj := round(((nvl(r_reg.vl_base_calc,0) * nvl(r_reg.aliq_cofins,0)) / 100),2);
                     else
                        vn_vl_aj := 0;
                     end if;
                     --
                     vn_fase := 21.7;
                     --
                     if vv_cd_contrsocapurpc in ('01', '02', '03', '04', '32', '51', '71') then
                        vn_ch_conc_cs_cr_aliq := 1;
                     else
                        vn_ch_conc_cs_cr_aliq := vv_cd_contrsocapurpc;
                     end if;
                     --
                     vn_fase := 21.8;
                     --
                     pkb_monta_vetor_m620( en_ch_conc_cs_cr_aliq => vn_ch_conc_cs_cr_aliq
                                         , en_contrsocapurpc_id  => vn_contrsocapurpc_id
                                         , en_dm_ind_aj          => vn_dm_ind_aj
                                         , en_aliq_cofins        => nvl(r_reg.aliq_cofins,0)
                                         , en_aliq_cofins_quant  => 0
                                         , en_vl_ajuste          => nvl(vn_vl_aj,0)
                                         , en_cd_cfop            => r_reg.cfop );
                     --
                  end if; -- contribuição social de apuração
                  --
               end if; -- pk_csf_efd_pc.fkg_dmgeraajusm210_parcfopempr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 1 -- 0-não, 1-sim
               --
            end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
            --
         end if; -- pk_csf_efd_pc.fkg_gera_recisen_cfop_empr ( en_empresa_id => r_empresa.empresa_id, en_cfop_id => r_reg.cfop_id, en_codst_id_pis => null, en_codst_id_cofins => r_reg.cst_id_cofins ) = 0 -- 0-não, 1-sim
         --
      end loop; -- cursor c_d200_aj
      --
   end loop; -- cursor c_empresa
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_monta_dados_m600_acd (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_MONTA_DADOS_M600_ACD;
-------------------------------------------------------------------------------------
--| Procedimento recupera os dados do período da consolidação do COFINS - Bloco M600
-------------------------------------------------------------------------------------
PROCEDURE PKB_DADOS_PER_CONS_COFINS_M600( EN_PERCONSCONTRCOFINS_ID IN PER_CONS_CONTR_COFINS.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vv_nome_empresa    varchar2(1000) := null;
   ve_invalido        exception;
   vn_loggenerico_id  log_generico.id%type;
   --
   cursor c_per_cons_contr_cofins is
      select *
        from per_cons_contr_cofins pc
       where pc.id = en_perconscontrcofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   gt_row_per_cons_contr_cofins := null;
   --
   vn_fase := 2;
   open c_per_cons_contr_cofins;
   fetch c_per_cons_contr_cofins into gt_row_per_cons_contr_cofins;
   close c_per_cons_contr_cofins;
   --
   vn_fase := 3;
   --
   -- Busca o período de Consolidação da Contribuição do Cofins 
   pkb_ret_perconscontrcofins ( gt_row_per_cons_contr_cofins.empresa_id            
                              , gt_row_per_cons_contr_cofins.dt_ini                
                              , gt_row_per_cons_contr_cofins.dt_fin                
                              , gt_row_per_cons_contr_cofins); 
   --
   if nvl(gt_row_per_cons_contr_cofins.id,0) = 0 then
      --
      gv_resumo_log := 'Não foi encontrado um período de consolidação (COFINS) com a situação PROCESSADA';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_resumo_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => gn_referencia_id
                                       , ev_obj_referencia  => gv_obj_referencia );      
      --
   end if;
   --   
   vn_fase := 4;
   -- Alterar os valores de datas inicial e final para considerar a hora.
   gt_row_per_cons_contr_cofins.dt_ini := trunc(gt_row_per_cons_contr_cofins.dt_ini);
   gt_row_per_cons_contr_cofins.dt_fin := to_date((trunc(gt_row_per_cons_contr_cofins.dt_fin)||' '||'23:59:59'),'dd/mm/rrrr hh24:mi:ss');
   --
   vn_fase := 5;
   --| Cabeçalho para as mensagens de log de erro e inconsistências
   gv_mensagem_log := 'Período da Consolidação da Contribuição do Imposto COFINS';
   --
   vn_fase := 6;
   --
   if nvl(gt_row_per_cons_contr_cofins.id,0) > 0 then
      --
      vn_fase := 7;
      --
      vv_nome_empresa := pk_csf.fkg_nome_empresa( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id );
      --
      vn_fase := 8;
      --| Cabeçalho para as mensagens de log de erro e inconsistências
      gv_mensagem_log := gv_mensagem_log||' no período de '||to_char(gt_row_per_cons_contr_cofins.dt_ini,'dd/mm/rrrr')||' até '||
                         to_char(gt_row_per_cons_contr_cofins.dt_fin,'dd/mm/rrrr')||' - Empresa: '||vv_nome_empresa;
   else
      --
      vn_fase := 9;
      --
      raise ve_invalido;
      --
   end if;
   --
EXCEPTION
   when ve_invalido then
      --
      gv_resumo_log := 'Período da consolidação não encontrada. Verifique o identificador informado (id = '||en_perconscontrcofins_id||').';
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_dados_per_cons_cofins_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DADOS_PER_CONS_COFINS_M600;
------------------------------------------------------------------------------
--| Procedimento para gerar por período a consolidação do COFINS - Bloco M600
--| Serão gerados os blocos M600 e M610
------------------------------------------------------------------------------
PROCEDURE PKB_GERAR_PER_CONS_COFINS_M600 ( EN_PERCONSCONTRCOFINS_ID IN PER_CONS_CONTR_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perconscontrcofins_id
                  , ev_obj_referencia => 'PER_CONS_CONTR_COFINS' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'PER_CONS_CONTR_COFINS';
   gv_mensagem_log   := 'Geração por período da consolidação do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perconscontrcofins_id||').';
   gn_referencia_id  := en_perconscontrcofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perconscontrcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período da consolidação deve ser informado para que a geração seja efetuada.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      --
      if pk_csf_efd_pc.fkg_qtde_cons_cofins( en_perconscontrcofins_id => en_perconscontrcofins_id ) <> 0 then -- não devem existir consolidaçôes geradas
         --
         vn_fase := 6;
         gv_resumo_log := 'O período de consolidação informado possui consolidações geradas, portanto, a geração não será realizada. Favor excluir as consolidações.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 7;
         -- Recupera os dados do período da consolidação do imposto cofins utilizado como referência
         pkb_dados_per_cons_cofins_m600( en_perconscontrcofins_id => en_perconscontrcofins_id );
         gv_mensagem_log := 'Geração da '||gv_mensagem_log;
         --
         vn_fase := 8;
         --
         pkb_dados_abert_empr( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id
                             , ed_dt_inicial => gt_row_per_cons_contr_cofins.dt_ini
                             , ed_dt_final   => gt_row_per_cons_contr_cofins.dt_fin );
         --
         vn_fase := 9;
         --
         if nvl(gn_aberturaefdpc_id,0) <> 0 then
            --
            vn_fase := 10;
            --
            pkb_recupera_tpimp;
            --
            vn_fase := 11;
            --
            vt_tab_reg_m600.delete;
            vt_bi_tab_reg_m610.delete;
            vt_tri_tab_reg_m620.delete;
            --
            if ((nvl(gn_dm_cod_inc_trib,0) in (1,3)) or -- 1-Escrituração de operações com incidência exclusivamente no regime não-cumulativo ou 3-Escrituração de operações com incidência nos regimes nãocumulativo e cumulativo
                (nvl(gn_dm_cod_inc_trib,0) = 2 and gn_dm_ind_reg_cum = 9)) then -- 2-Escrituração de operações com incidência exclusivamente no regime cumulativo, 9-Regime de Competência - Escrituração detalhada, com base nos registros dos Blocos A, C, D e F
               -- Recuperar os dados dos documentos fiscais: A, C e D
               vn_fase := 12;
               pkb_monta_dados_m600_acd;
               --
            end if;
            --
            vn_fase := 13;
            -- Independente do indicador de regime de competência, o Bloco F será gerado, cada Bloco com um tipo de indicador, especificado na rotina que segue
            pkb_monta_dados_m600_f;
            --
            vn_fase := 14;
            --
            pkb_grava_dados_m600;
            --
         else
            --
            vn_fase := 15;
            gv_resumo_log := 'Para o período de consolidação informado, não foi encontrado o mesmo período de Geração de EFD-PIS/COFINS, ou o período de '||
                             'geração está com situação: "Erro de validação", "Gerado arquivo", "Erro na geração do arquivo", "Erro de cálculo", '||
                             '"Em geração", portanto, a consolidação não será realizada. Favor atualizar a Geração de EFD-PIS/COFINS.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 16;
   --
   commit;
   --
   vn_fase := 17;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perconscontrcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_gerar_per_cons_cofins_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perconscontrcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_GERAR_PER_CONS_COFINS_M600;
--------------------------------------------------------------------------------
--| Procedimento para excluir por período a consolidação do COFINS - Bloco M600
--------------------------------------------------------------------------------
PROCEDURE PKB_EXCL_PER_CONS_COFINS_M600( EN_PERCONSCONTRCOFINS_ID IN PER_CONS_CONTR_COFINS.ID%TYPE ) IS
   --
   vn_fase       number := 0;
   vv_mensagem   varchar2(1000) := null;
   ve_erro       exception;
   vn_empresa_id per_cons_contr_cofins.empresa_id%type;
   vd_dt_ini     per_cons_contr_cofins.dt_ini%type;
   vd_dt_fin     per_cons_contr_cofins.dt_fin%type;
   --
   cursor c_relac( en_empresa_id in number
                 , ed_dt_ini     in date ) is
      select ra.id relacapurcontrcofins_id
           , ra.contrcredfiscalcofins_id
           , ra.ano
           , ra.mes
           , ra.de_vl_sld_cred_fim
           , ra.de_vl_cred_desc_efd
           , ra.de_vl_sd_cred_disp_efd
           , ra.de_vl_cred_desc_pa_ant
        from relac_apur_contr_cofins ra
       where ra.contrcredfiscalcofins_id in (select cc.id
                                               from contr_cred_fiscal_cofins cc
                                              where cc.empresa_id = en_empresa_id)
         and (ra.ano||lpad(ra.mes,2,'0')) = to_char(ed_dt_ini,'rrrrmm')
       order by (ra.ano||lpad(ra.mes,2,'0')) desc
           , ra.id desc;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perconscontrcofins_id
                  , ev_obj_referencia => 'PER_CONS_CONTR_COFINS' );
   --
   vn_fase := 2;
   --
   begin
      select pc.empresa_id
           , pc.dt_ini
           , pc.dt_fin
        into vn_empresa_id
           , vd_dt_ini
           , vd_dt_fin
        from per_cons_contr_cofins pc
       where pc.id = en_perconscontrcofins_id;
   exception
      when others then
         vv_mensagem := 'Problemas ao recuperar dados do período da consolidação da contribuição da cofins - bloco m600. Erro = '||sqlerrm;
         raise ve_erro;
   end;
   --
   vn_fase := 3;
   --
   if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                            , ed_data       => vd_dt_ini ) or  -- true
      pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                            , ed_data       => vd_dt_fin ) then -- true
      --
      vn_fase := 4;
      --
      vv_mensagem := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
      raise ve_erro;
      --
   elsif pk_csf_efd_pc.fkb_existe_cofinsor_gerado( en_perconscontrcofins_id => en_perconscontrcofins_id ) then -- true
         --
         vn_fase := 5;
         --
         vv_mensagem := 'Existe(m) Obrigação(ões) a Recolher da Apuração de COFINS das consolidações de contribuições de origem: Digitado. Exclua os lançamentos.';
         raise ve_erro;
         --
   else
      --
      vn_fase := 6;
      --
      begin
         delete from contr_vlr_ret_fonte_cofins cv
          where cv.empresa_id  = vn_empresa_id
            and cv.ano         = to_char(vd_dt_ini,'rrrr')
            and cv.mes         = to_char(vd_dt_ini,'mm')
            and cv.per_rec_ret = to_char(vd_dt_ini,'mmrrrr')
            and cv.dm_origem   = 1; -- 0-digitado, 1-gerado no bloco m600
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir valor de retenção apurada e deduzida - Bloco 1700 (pk_apur_cofins.pkb_excl_per_cons_cofins_m600). Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 7;
      --
      begin
         delete from inf_adic_dif_cofins ia
          where exists (select dc.id
                          from det_cons_contr_cofins dc
                             , cons_contr_cofins     cc
                         where cc.perconscontrcofins_id = en_perconscontrcofins_id
                           and dc.conscontrcofins_id    = cc.id
                           and ia.detconscontrcofins_id = dc.id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir informações adicionais das consolidações das contribuições. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 8;
      --
      begin
         delete from soc_coop_comp_bc_calc_cofins sc
          where exists (select dc.id
                          from det_cons_contr_cofins dc
                             , cons_contr_cofins     cc
                         where cc.perconscontrcofins_id = en_perconscontrcofins_id
                           and dc.conscontrcofins_id    = cc.id
                           and sc.detconscontrcofins_id = dc.id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir sociedade cooperativa das consolidações das contribuições. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 9;
      --
      begin
         delete from det_ajust_contr_cofins_apur da
          where exists (select ac.id
                          from ajust_contr_cofins_apur ac
                             , det_cons_contr_cofins   dc
                             , cons_contr_cofins       cc
                         where cc.perconscontrcofins_id   = en_perconscontrcofins_id
                           and dc.conscontrcofins_id      = cc.id
                           and ac.detconscontrcofins_id   = dc.id
                           and da.ajustcontrcofinsapur_id = ac.id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir detalhes de ajustes das consolidações das contribuições. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 10;
      --
      begin
         delete from ajust_contr_cofins_apur ac
          where exists (select dc.id
                          from det_cons_contr_cofins dc
                             , cons_contr_cofins     cc
                         where cc.perconscontrcofins_id = en_perconscontrcofins_id
                           and dc.conscontrcofins_id    = cc.id
                           and ac.detconscontrcofins_id = dc.id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir ajustes das consolidações das contribuições. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 11;
      --
      begin
         delete ajust_bc_cont_cofins abc
          where exists (select cc.id
                          from cons_contr_cofins     cc,
                               det_cons_contr_cofins dc
                         where cc.perconscontrcofins_id = en_perconscontrcofins_id
                           and cc.id                    = dc.conscontrcofins_id
                           and dc.id                    = abc.detconscontrcofins_id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir detalhes das consolidações de contribuições. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 11.1;
      --
      begin
         delete from det_cons_contr_cofins dc
          where exists (select cc.id
                          from cons_contr_cofins cc
                         where cc.perconscontrcofins_id = en_perconscontrcofins_id
                           and cc.id                    = dc.conscontrcofins_id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir detalhes das consolidações de contribuições. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 12;
      --
      begin
         delete from cons_contr_cofins_or cc
          where cc.dm_origem = 1 -- 0-digitado, 1-gerado no bloco m200
            and exists (select cc.id
                          from cons_contr_cofins cc
                         where cc.perconscontrcofins_id = en_perconscontrcofins_id
                           and cc.id                    = cc.conscontrcofins_id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir Obrigações a Recolher da Apuração de COFINS das consolidações de contribuições. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 13;
      -- Excluir/Alterar os relacionamentos entre os Blocos M500 e 1500
      for r_relac in c_relac( en_empresa_id => vn_empresa_id
                            , ed_dt_ini     => vd_dt_ini )
      loop
         --
         vn_fase := 13.1;
         -- Voltar os valores dos campos na tabela contr_cred_fiscal_cofins, e excluir da tabela relac_apur_contr_cofins.
         begin
            update contr_cred_fiscal_cofins cc
               set cc.vl_sld_cred_fim     = r_relac.de_vl_sld_cred_fim
                 , cc.vl_cred_desc_efd    = r_relac.de_vl_cred_desc_efd
                 , cc.vl_sd_cred_disp_efd = r_relac.de_vl_sd_cred_disp_efd
                 , cc.vl_cred_desc_pa_ant = r_relac.de_vl_cred_desc_pa_ant
             where cc.id = r_relac.contrcredfiscalcofins_id;
         exception
            when others then
               vv_mensagem := 'Problemas ao atualizar os valores dos Controle de Créditos Fiscais  Bloco 1500. Erro = '||sqlerrm;
               raise ve_erro;
         end;
         --
         vn_fase := 13.2;
         -- Excluir os registro de relacionamento de valores entre os blocos m500 e 1500.
         begin
            delete from relac_apur_contr_cofins ra
             where ra.id = r_relac.relacapurcontrcofins_id;
         exception
            when others then
               vv_mensagem := 'Problemas ao excluir os registro de relacionamento de valores entre os blocos m500 e 1500. Erro = '||sqlerrm;
               raise ve_erro;
         end;
         --
      end loop;
      --
      vn_fase := 14;
      --
      begin
         delete from r_apurcredcof_contrcredfcof ra
          where ra.contrcredfiscalcofins_id in (select cc.id
                                                  from contr_cred_fiscal_cofins cc
                                                 where cc.empresa_id = vn_empresa_id
                                                   and cc.ano        = to_char(vd_dt_ini,'rrrr')
                                                   and cc.mes        = to_char(vd_dt_ini,'mm')
                                                   and cc.dm_origem  = 1); -- 0-digitado, 1-gerado no bloco m200
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir relacionamento entre blocos m500 e 1500. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 15;
      --
      begin
         delete from relac_apur_contr_cofins ra
          where ra.contrcredfiscalcofins_id in (select cc.id
                                                  from contr_cred_fiscal_cofins cc
                                                 where cc.empresa_id = vn_empresa_id
                                                   and cc.ano        = to_char(vd_dt_ini,'rrrr')
                                                   and cc.mes        = to_char(vd_dt_ini,'mm')
                                                  and cc.dm_origem  = 1); -- 0-digitado, 1-gerado no bloco m200
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir relacionamento de valores entre blocos m500 e 1500. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 16;
      --
      begin
         delete from contr_cred_fiscal_cofins cc
          where cc.empresa_id = vn_empresa_id
            and cc.ano        = to_char(vd_dt_ini,'rrrr')
            and cc.mes        = to_char(vd_dt_ini,'mm')
            and cc.dm_origem  = 1; -- 0-digitado, 1-gerado no bloco m600
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir Controle de Créditos Fiscais  COFINS - Bloco 1500. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 17;
      --
      begin
         update contr_cred_fiscal_cofins cf
            set cf.conscontrcofins_id = null
          where cf.conscontrcofins_id in (select cc.id
                                            from cons_contr_cofins cc
                                           where cc.perconscontrcofins_id = en_perconscontrcofins_id);
      exception
         when others then
            vv_mensagem := 'Problemas ao alterar Controle de Créditos Fiscais  COFINS - Bloco 1500. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 18;
      --
      begin
         delete from cons_contr_cofins cc
          where cc.perconscontrcofins_id = en_perconscontrcofins_id;
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir consolidações de contribuições. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 19;
      --
      -- Deleta memória de calculo --
      begin
         delete mem_calc_apur_cofins m
           where m.perconscontrcofins_id = en_perconscontrcofins_id;
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir Memória de Calculo do COFINS. Erro = '||sqlerrm;
            raise ve_erro;
      end;      
      --
      vn_fase := 19.1;
      --
      begin
         delete from per_cons_contr_cofins pc
          where pc.id = en_perconscontrcofins_id;
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir período de consolidações de contribuições. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 20;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when ve_erro then
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Excluir os registros gerados por período de consolidação'
                                          , ev_resumo          => vv_mensagem
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perconscontrcofins_id
                                          , ev_obj_referencia  => 'PER_CONS_CONTR_COFINS' );
      exception
         when others then
            null;
      end;
      --
      rollback;
      --
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_excl_per_cons_cofins_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Excluir os registros gerados por período de consolidação'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perconscontrcofins_id
                                          , ev_obj_referencia  => 'PER_CONS_CONTR_COFINS' );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_EXCL_PER_CONS_COFINS_M600;
----------------------------------------------------------------------------------------------------
--| (OLD_VELHO) Procedimento calcula os dados do Bloco 1500 e Relacionamentos com Apuração de Crédito de COFINS
----------------------------------------------------------------------------------------------------
PROCEDURE PKB_CALCULA_BLOCO_1500_OLD (EN_SALDO_M600 IN NUMBER) IS
   --
   vn_fase                      number := 0;
   vn_contrcredfiscalcofins_id  number := 0;
   vv_anomes_ant                varchar2(6) := null;
   vn_vl_sld_cred               number := 0;
   vn_de_vl_sld_cred_fim        number := 0;
   vn_de_vl_cred_desc_efd       number := 0;
   vn_de_vl_sd_cred_disp_efd    number := 0;
   vn_de_vl_cred_desc_pa_ant    number := 0;
   vn_vl_cred_desc_pa_ant       number := 0;
   vn_vl_sd_cred_disp_efd       number := 0;
   vn_vl_cred_desc_efd          number := 0;
   vn_vl_sld_cred_fim           number := 0;
   -- Recuperar os tipos de créditos gerados na apuração M500
   /* Passar a não utilizar os valores da apuração, essa recuperação não é obrigatória
   cursor c_tipo_cred is
     select distinct ac.id apurcredcofins_id
          , ac.tipocredpc_id
       from per_apur_cred_cofins pa
          , apur_cred_cofins     ac
      where pa.empresa_id           = gt_row_per_cons_contr_cofins.empresa_id
        and pa.dt_ini               = gt_row_per_cons_contr_cofins.dt_ini
        and pa.dt_fin               = gt_row_per_cons_contr_cofins.dt_fin
        and ac.perapurcredcofins_id = pa.id
        and ac.dm_situacao          = 3 -- Situação: 0-Aberto; 1-Calculada; 2-Erro no cálculo; 3-Processada; 4-Erro de validação
        and ac.dm_ind_cred_ori      = 0 -- Indicador de Credito Oriundo de: 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
      order by ac.tipocredpc_id;
   -- Recuperar os registros 1500 com saldo de crédito - SLD_CRED_FIM
   cursor c_contr( en_tipocredpc_id in number ) is
      select cc.id contrcredfiscalcofins_id
           , (cc.ano||lpad(cc.mes,2,'0')) anomes
           , cc.vl_sld_cred_fim
           , cc.vl_cred_desc_efd
           , cc.vl_sd_cred_disp_efd
           , cc.vl_cred_desc_pa_ant
        from contr_cred_fiscal_cofins cc
           , tipo_cred_pc             tc
       where cc.empresa_id      = gt_row_per_cons_contr_cofins.empresa_id
         and cc.dm_situacao     = 3 -- 0-Aberto, 1-Calculada, 2-Erro no cálculo, 3-Validado, 4-Erro de validação
         and cc.tipocredpc_id   = en_tipocredpc_id
         and cc.dm_orig_cred    = '01' -- 01-crédito decorrente de operações próprias; 02-credito transferido por pessoa jurídica sucedida
         and ((cc.ano = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') -- ano
               and
               cc.mes < to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')) -- mes
              or
              (cc.ano < to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr'))) -- ano
         and cc.vl_sld_cred_fim > 0
         and tc.id              = cc.tipocredpc_id
       order by cc.ano, cc.mes, tc.cd, cc.vl_sld_cred_fim;
   */
   -- Recuperar os registros 1500 com saldo de crédito - SLD_CRED_FIM
   cursor c_contr is
      select cc.id contrcredfiscalcofins_id
           , (cc.ano||lpad(cc.mes,2,'0')) anomes
           , cc.vl_sld_cred_fim
           , cc.vl_cred_desc_efd
           , cc.vl_sd_cred_disp_efd
           , cc.vl_cred_desc_pa_ant
        from contr_cred_fiscal_cofins cc
           , tipo_cred_pc             tc
       where cc.empresa_id      = gt_row_per_cons_contr_cofins.empresa_id
         and cc.dm_situacao     = 3 -- 0-Aberto, 1-Calculada, 2-Erro no cálculo, 3-Validado, 4-Erro de validação
         and cc.dm_orig_cred    = '01' -- 01-crédito decorrente de operações próprias; 02-credito transferido por pessoa jurídica sucedida
         and ((cc.ano = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') -- ano
               and
               cc.mes < to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')) -- mes
              or
              (cc.ano < to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr'))) -- ano
         and cc.vl_sld_cred_fim > 0
         and tc.id              = cc.tipocredpc_id
       order by cc.ano, cc.mes, tc.cd, cc.vl_sld_cred_fim;
   --
BEGIN
   --
   vn_fase := 1;
   vn_vl_sld_cred := en_saldo_m600;
   --
   -- Através dos tipos de créditos gerados na apuração M500, recuperar os saldos de créditos do Bloco 1500
   /* Passar a não utilizar os valores da apuração, essa recuperação não é obrigatória
   for r_tipo_cred in c_tipo_cred
   loop
      --
      exit when c_tipo_cred%notfound or (c_tipo_cred%notfound) is null;
      --
      vn_fase := 2;
      -- Recuperar os registros 1500 com saldo de crédito - SLD_CRED_FIM
      for r_contr in c_contr(en_tipocredpc_id => r_tipo_cred.tipocredpc_id)
      loop
      */
      vn_fase := 2;
      -- Recuperar os registros 1500 com saldo de crédito - SLD_CRED_FIM
      for r_contr in c_contr
      loop
         --
         exit when c_contr%notfound or (c_contr%notfound) is null or nvl(vn_vl_sld_cred,0) = 0;
         --
         vn_fase := 3;
         --
         vn_de_vl_sld_cred_fim     := nvl(r_contr.vl_sld_cred_fim,0);
         vn_de_vl_cred_desc_efd    := nvl(r_contr.vl_cred_desc_efd,0);
         vn_de_vl_sd_cred_disp_efd := nvl(r_contr.vl_sd_cred_disp_efd,0);
         vn_de_vl_cred_desc_pa_ant := nvl(r_contr.vl_cred_desc_pa_ant,0);
         --
         vn_fase := 4;
         --
         if (nvl(r_contr.vl_sld_cred_fim,0) - nvl(vn_vl_sld_cred,0)) <= 0 then
            --
            vn_fase := 5;
            --
            if nvl(r_contr.vl_cred_desc_efd,0) > 0 then
               --
               vn_fase := 5.1;
               --
               if vv_anomes_ant is null or
                  vv_anomes_ant = r_contr.anomes then
                  --
                  vn_fase := 5.2;
                  --
                  vn_vl_cred_desc_pa_ant := (nvl(r_contr.vl_cred_desc_pa_ant,0) + nvl(r_contr.vl_cred_desc_efd,0));
                  --
                  vn_vl_sd_cred_disp_efd := nvl(r_contr.vl_sld_cred_fim,0);
                  vn_vl_cred_desc_efd    := nvl(r_contr.vl_sld_cred_fim,0);
                  --
                  vn_vl_sld_cred_fim  := 0;
                  vn_vl_sld_cred      := (nvl(vn_vl_sld_cred,0) - nvl(r_contr.vl_sld_cred_fim,0));
                  --
               else
                  --
                  vn_fase := 5.3;
                  --
                  vn_vl_cred_desc_pa_ant := nvl(r_contr.vl_cred_desc_efd,0);
                  vn_vl_sd_cred_disp_efd := (nvl(r_contr.vl_sd_cred_disp_efd,0) - nvl(r_contr.vl_cred_desc_efd,0));
                  --
                  vn_vl_cred_desc_efd := nvl(r_contr.vl_sld_cred_fim,0);
                  vn_vl_sld_cred_fim  := 0;
                  vn_vl_sld_cred      := (nvl(vn_vl_sld_cred,0) - nvl(r_contr.vl_sld_cred_fim,0));
                  --
               end if;
               --
            else
               --
               vn_fase := 6;
               --
               vn_vl_cred_desc_pa_ant := nvl(r_contr.vl_cred_desc_pa_ant,0);
               vn_vl_sd_cred_disp_efd := nvl(r_contr.vl_sd_cred_disp_efd,0);
               --
               vn_vl_cred_desc_efd := nvl(r_contr.vl_sld_cred_fim,0);
               vn_vl_sld_cred_fim  := 0;
               vn_vl_sld_cred      := (nvl(vn_vl_sld_cred,0) - nvl(r_contr.vl_sld_cred_fim,0));
               --
            end if;
            --
         else -- if (nvl(r_contr.vl_sld_cred_fim,0) - nvl(vn_vl_sld_cred,0)) > 0
            --
            vn_fase := 7;
            --
            if nvl(r_contr.vl_cred_desc_efd,0) > 0 then
               vn_vl_cred_desc_pa_ant := nvl(r_contr.vl_cred_desc_efd,0);
               vn_vl_sd_cred_disp_efd := (nvl(r_contr.vl_sd_cred_disp_efd,0) - nvl(r_contr.vl_cred_desc_efd,0));
            else
               vn_vl_cred_desc_pa_ant := nvl(r_contr.vl_cred_desc_pa_ant,0);
               vn_vl_sd_cred_disp_efd := nvl(r_contr.vl_sd_cred_disp_efd,0);
            end if;
            --
            vn_fase := 7.1;
            --
            vn_vl_cred_desc_efd := nvl(vn_vl_sld_cred,0);
            vn_vl_sld_cred_fim  := (nvl(r_contr.vl_sld_cred_fim,0) - nvl(vn_vl_sld_cred,0));
            vn_vl_sld_cred      := 0;
            --
         end if;
         --
         vn_fase := 8;
         vv_anomes_ant := r_contr.anomes;
         vn_fase := 9;
         --
         begin
            update contr_cred_fiscal_cofins cc
               set cc.vl_cred_desc_pa_ant = (nvl(cc.vl_cred_desc_pa_ant,0) + vn_vl_cred_desc_pa_ant)
                 , cc.vl_sd_cred_disp_efd = vn_vl_sd_cred_disp_efd
                 , cc.vl_cred_desc_efd    = vn_vl_cred_desc_efd
                 , cc.vl_sld_cred_fim     = vn_vl_sld_cred_fim
             where cc.id = r_contr.contrcredfiscalcofins_id;
         exception
            when others then
               --
               gv_resumo_log := 'Alterar Bloco 1500 - Saldo de Crédito Maior que Zero. Problemas em pk_apur_cofins.pkb_calcula_bloco_1500 (fase = '||vn_fase||
                                '). Erro = '||sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
               raise_application_error (-20101, gv_resumo_log);
               --
         end;
         --
         vn_fase := 10;
         --
         begin
            insert into relac_apur_contr_cofins( id
                                               , apurcredcofins_id
                                               , contrcredfiscalcofins_id
                                               , ano
                                               , mes
                                               , de_vl_sld_cred_fim
                                               , de_vl_cred_desc_efd
                                               , de_vl_sd_cred_disp_efd
                                               , de_vl_cred_desc_pa_ant
                                               , para_vl_sld_cred_fim
                                               , para_vl_cred_desc_efd
                                               , para_vl_sd_cred_disp_efd
                                               , para_vl_cred_desc_pa_ant )
                                         values( relacapurcontrcofins_seq.nextval
                                               , null -- r_tipo_cred.apurcredcofins_id
                                               , r_contr.contrcredfiscalcofins_id
                                               , to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') -- ano
                                               , to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm') -- mes
                                               , vn_de_vl_sld_cred_fim
                                               , vn_de_vl_cred_desc_efd
                                               , vn_de_vl_sd_cred_disp_efd
                                               , vn_de_vl_cred_desc_pa_ant
                                               , vn_vl_sld_cred_fim
                                               , vn_vl_cred_desc_efd
                                               , vn_vl_sd_cred_disp_efd
                                               , vn_vl_cred_desc_pa_ant );
         exception
            when others then
               --
               gv_resumo_log := 'Incluir valores de relacionamento Bloco M500 e Bloco 1500 - Saldo de Crédito Maior que Zero. Problemas em pk_apur_cofins.'||
                                'pkb_calcula_bloco_1500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
               raise_application_error (-20101, gv_resumo_log);
               --
         end;
         --
      end loop;
      /*
      --
   end loop;
   */
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_calcula_bloco_1500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_CALCULA_BLOCO_1500_OLD;
----------------------------------------------------------------------------------------------------
--| Procedimento calcula os dados do Bloco 1500 e Relacionamentos com Apuração de Crédito de COFINS
----------------------------------------------------------------------------------------------------
PROCEDURE PKB_CALCULA_BLOCO_1500 (EN_SALDO_M600      IN NUMBER,
                                  EN_VER_VLR_ZERADO  IN NUMBER,     -- 0-Não / 1-Sim (Verifica valor zerado)
                                  SN_SLD_EFD_1500   OUT NUMBER ) IS 
   --
   vn_fase                      number := 0;
   vn_contrcredfiscalcofins_id  number := 0;
   vv_anomes_ant                varchar2(6) := null;
   vn_vl_sld_cred               number := 0;
   vn_de_vl_sld_cred_fim        number := 0;
   vn_de_vl_cred_desc_efd       number := 0;
   vn_de_vl_sd_cred_disp_efd    number := 0;
   vn_de_vl_cred_desc_pa_ant    number := 0;
   vn_vl_cred_desc_pa_ant       number := 0;
   vn_vl_sd_cred_disp_efd       number := 0;
   vn_vl_cred_desc_efd          number := 0;
   vn_vl_sld_cred_fim           number := 0;
   vn_sld_efd_1500              number := 0; 
   vn_qtde_relac                number := 0; 
   --   
   -- Recuperar os registros 1500 com saldo de crédito - SLD_CRED_FIM
   cursor c_contr is
      select cc.id contrcredfiscalcofins_id
           , (cc.ano||lpad(cc.mes,2,'0')) anomes
           , cc.vl_sld_cred_fim
           , cc.vl_cred_desc_efd
           , cc.vl_sd_cred_disp_efd
           , cc.vl_cred_desc_pa_ant
        from contr_cred_fiscal_cofins cc
           , tipo_cred_pc             tc
       where cc.empresa_id      = gt_row_per_cons_contr_cofins.empresa_id
         and cc.dm_situacao     = 3 -- 0-Aberto, 1-Calculada, 2-Erro no cálculo, 3-Validado, 4-Erro de validação
         and cc.dm_orig_cred    = '01' -- 01-crédito decorrente de operações próprias; 02-credito transferido por pessoa jurídica sucedida
         and ((cc.ano = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') -- ano
               and
               cc.mes < to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')) -- mes
              or
              (cc.ano < to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr'))) -- ano
         and cc.vl_sld_cred_fim > 0
         and tc.id              = cc.tipocredpc_id
       order by cc.ano, cc.mes, tc.cd, cc.vl_sld_cred_fim;
   --
BEGIN
   --
   vn_fase := 1;
   vn_vl_sld_cred := en_saldo_m600;
   --
   vn_fase := 2;
   -- Recuperar os registros 1500 com saldo de crédito - SLD_CRED_FIM
   for r_contr in c_contr
   loop
      --
      if EN_VER_VLR_ZERADO = 1 then  -- 1-Sim verifica valor zerado (Padrão)	  
         --	  
         exit when c_contr%notfound or (c_contr%notfound) is null or nvl(vn_vl_sld_cred,0) = 0;
         --		 
      else
         --
         exit when c_contr%notfound or (c_contr%notfound) is null;		 
         --
      end if;	  
      --
      vn_fase := 3;
      --
      vn_de_vl_sld_cred_fim     := nvl(r_contr.vl_sld_cred_fim,0);
      vn_de_vl_cred_desc_efd    := nvl(r_contr.vl_cred_desc_efd,0);
      vn_de_vl_sd_cred_disp_efd := nvl(r_contr.vl_sd_cred_disp_efd,0);
      vn_de_vl_cred_desc_pa_ant := nvl(r_contr.vl_cred_desc_pa_ant,0);
      --
      vn_fase := 4;
      --
      if (nvl(r_contr.vl_sld_cred_fim,0) - nvl(vn_vl_sld_cred,0)) <= 0 then
         --
         vn_fase := 5;
         --
         if nvl(r_contr.vl_cred_desc_efd,0) > 0 then
            --
            vn_fase := 5.1;
            --
            if vv_anomes_ant is null or
               vv_anomes_ant = r_contr.anomes then
               --
               vn_fase := 5.2;
               --
               vn_vl_cred_desc_pa_ant := (nvl(r_contr.vl_cred_desc_pa_ant,0) + nvl(r_contr.vl_cred_desc_efd,0));
               --
               vn_vl_sd_cred_disp_efd := nvl(r_contr.vl_sld_cred_fim,0);
               vn_vl_cred_desc_efd    := nvl(r_contr.vl_sld_cred_fim,0);
               --
               vn_vl_sld_cred_fim  := 0;
               vn_vl_sld_cred      := (nvl(vn_vl_sld_cred,0) - nvl(r_contr.vl_sld_cred_fim,0));
               --
            else
               --
               vn_fase := 5.3;
               --
               vn_vl_cred_desc_pa_ant := nvl(r_contr.vl_cred_desc_efd,0);
               vn_vl_sd_cred_disp_efd := (nvl(r_contr.vl_sd_cred_disp_efd,0) - nvl(r_contr.vl_cred_desc_efd,0));
               --
               vn_vl_cred_desc_efd := nvl(r_contr.vl_sld_cred_fim,0);
               vn_vl_sld_cred_fim  := 0;
               vn_vl_sld_cred      := (nvl(vn_vl_sld_cred,0) - nvl(r_contr.vl_sld_cred_fim,0));
               --
            end if;
            --
         else
            --
            vn_fase := 6;
            --
            vn_vl_cred_desc_pa_ant := nvl(r_contr.vl_cred_desc_pa_ant,0);
            vn_vl_sd_cred_disp_efd := nvl(r_contr.vl_sd_cred_disp_efd,0);
            --
            vn_vl_cred_desc_efd := nvl(r_contr.vl_sld_cred_fim,0);
            vn_vl_sld_cred_fim  := 0;
            vn_vl_sld_cred      := (nvl(vn_vl_sld_cred,0) - nvl(r_contr.vl_sld_cred_fim,0));
            --
         end if;
         --
      else -- if (nvl(r_contr.vl_sld_cred_fim,0) - nvl(vn_vl_sld_cred,0)) > 0
         --
         vn_fase := 7;
         --
         if nvl(r_contr.vl_cred_desc_efd,0) > 0 then
            vn_vl_cred_desc_pa_ant := nvl(r_contr.vl_cred_desc_efd,0);
            vn_vl_sd_cred_disp_efd := (nvl(r_contr.vl_sd_cred_disp_efd,0) - nvl(r_contr.vl_cred_desc_efd,0));
         else
            vn_vl_cred_desc_pa_ant := nvl(r_contr.vl_cred_desc_pa_ant,0);
            vn_vl_sd_cred_disp_efd := nvl(r_contr.vl_sd_cred_disp_efd,0);
         end if;
         --
         vn_fase := 7.1;
         --
         vn_vl_cred_desc_efd := nvl(vn_vl_sld_cred,0);
         vn_vl_sld_cred_fim  := (nvl(r_contr.vl_sld_cred_fim,0) - nvl(vn_vl_sld_cred,0));
         vn_vl_sld_cred      := 0;
         --
      end if;
      --
      vn_fase := 8;
      vv_anomes_ant := r_contr.anomes;
      vn_fase := 9;
      --	    
      begin
	     --
         update contr_cred_fiscal_cofins cc
            set cc.vl_cred_desc_pa_ant = (nvl(cc.vl_cred_desc_pa_ant,0) + vn_vl_cred_desc_pa_ant)
              , cc.vl_sd_cred_disp_efd = vn_vl_sd_cred_disp_efd
              , cc.vl_cred_desc_efd    = vn_vl_cred_desc_efd
              , cc.vl_sld_cred_fim     = vn_vl_sld_cred_fim		  
          where cc.id = r_contr.contrcredfiscalcofins_id;
         --			 
         vn_fase := 9.1;
         --	
         vn_sld_efd_1500 := nvl(vn_sld_efd_1500,0) + vn_vl_cred_desc_efd;
         -- 				 
      exception
         when others then
            --
            gv_resumo_log := 'Alterar Bloco 1500 - Saldo de Crédito Maior que Zero. Problemas em pk_apur_cofins.pkb_calcula_bloco_1500 (fase = '||vn_fase||
                             '). Erro = '||sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_sistema
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
            raise_application_error (-20101, gv_resumo_log);
            --
      end;
      --
      vn_fase := 10;
      --
      	        begin
         select count(1)
           into vn_qtde_relac
           from	relac_apur_contr_cofins r
          where r.contrcredfiscalcofins_id = r_contr.contrcredfiscalcofins_id
            and r.ano                      = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') -- ano
            and r.mes                      = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm'); -- mes
      exception
         when no_data_found then
            vn_qtde_relac := null;
         when others then
            vn_qtde_relac := null;
      end;	
      --	  
      if nvl( vn_qtde_relac, 0 ) = 0 then			
         --	  
         vn_fase := 11;	  
         --	
         begin
            insert into relac_apur_contr_cofins( id
                                               , apurcredcofins_id
                                               , contrcredfiscalcofins_id
                                               , ano
                                               , mes
                                               , de_vl_sld_cred_fim
                                               , de_vl_cred_desc_efd
                                               , de_vl_sd_cred_disp_efd
                                               , de_vl_cred_desc_pa_ant
                                               , para_vl_sld_cred_fim
                                               , para_vl_cred_desc_efd
                                               , para_vl_sd_cred_disp_efd
                                               , para_vl_cred_desc_pa_ant )
                                         values( relacapurcontrcofins_seq.nextval
                                               , null -- r_tipo_cred.apurcredcofins_id
                                               , r_contr.contrcredfiscalcofins_id
                                               , to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') -- ano
                                               , to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm') -- mes
                                               , vn_de_vl_sld_cred_fim
                                               , vn_de_vl_cred_desc_efd
                                               , vn_de_vl_sd_cred_disp_efd
                                               , vn_de_vl_cred_desc_pa_ant
                                               , vn_vl_sld_cred_fim
                                               , vn_vl_cred_desc_efd
                                               , vn_vl_sd_cred_disp_efd
                                               , vn_vl_cred_desc_pa_ant );
         exception
            when others then
               --
               gv_resumo_log := 'Incluir valores de relacionamento Bloco M500 e Bloco 1500 - Saldo de Crédito Maior que Zero. Problemas em pk_apur_cofins.'||
                                'pkb_calcula_bloco_1500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception   
                  when others then
                     null;
               end;
               --
               raise_application_error (-20101, gv_resumo_log);
               --
         end;
         --
      end if;
      --	  
   end loop;
   --
   vn_fase := 11;
   --
   sn_sld_efd_1500 := vn_sld_efd_1500;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_calcula_bloco_1500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_CALCULA_BLOCO_1500;
---------------------------------------------------------------------------------------------
--| Procedimento gera os dados do Bloco 1500 com o saldos da Apuração de COFINS - Bloco M500
---------------------------------------------------------------------------------------------
PROCEDURE PKB_GERA_BLOCO_1500_M500 IS
   --
   vn_fase                      number := 0;
   vn_contrcredfiscalcofins_id  number := 0;
   -- Recuperar os tipos de créditos gerados na apuração M500
   cursor c_sdo_cred is
     select distinct ac.id apurcredcofins_id
          , ac.tipocredpc_id
          , ac.vl_sld_cred
       from per_apur_cred_cofins pa
          , apur_cred_cofins     ac
      where pa.empresa_id           = gt_row_per_cons_contr_cofins.empresa_id
        and pa.dt_ini               = gt_row_per_cons_contr_cofins.dt_ini
        and pa.dt_fin               = gt_row_per_cons_contr_cofins.dt_fin
        and ac.perapurcredcofins_id = pa.id
        and ac.dm_situacao          = 3 -- Situação: 0-Aberto; 1-Calculada; 2-Erro no cálculo; 3-Processada; 4-Erro de validação
        and ac.dm_ind_cred_ori      = 0 -- Indicador de Credito Oriundo de: 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
        and ac.vl_sld_cred          > 0 -- com saldo para crédito futuro
      order by ac.tipocredpc_id;
   -- Verificar se já existe o registro no Bloco 1500 gerado no Bloco M600
   cursor c_apur_contr( en_tipocredpc_id in contr_cred_fiscal_cofins.tipocredpc_id%type ) is
      select cc.id contrcredfiscalcofins_id
        from contr_cred_fiscal_cofins cc
       where cc.empresa_id    = gt_row_per_cons_contr_cofins.empresa_id -- empresa_id
         and cc.ano           = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') -- ano
         and cc.mes           = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm') -- mes
         and cc.dm_situacao   = 3 -- 0-aberto; 1-calculada; 2-erro no cálculo; 3-processada; 4-erro de validação
         and cc.dm_orig_cred  = '01' -- 01-crédito decorrente de operações próprias; 02-credito transferido por pessoa jurídica sucedida
         and cc.tipocredpc_id = en_tipocredpc_id
         and cc.dm_origem     = 1; -- 0-Digitado, 1-Gerado no Bloco M600
   --
BEGIN
   --
   vn_fase := 1;
   -- Através dos saldos dos tipos de créditos gerados na apuração M500, gerar os créditos do Bloco 1500
   for r_sdo_cred in c_sdo_cred
   loop
      --
      exit when c_sdo_cred%notfound or (c_sdo_cred%notfound) is null;
      --
      vn_fase := 2;
      -- Verificar se já existe o registro no Bloco 1500 gerado no Bloco M600
      vn_contrcredfiscalcofins_id := 0;
      open c_apur_contr( en_tipocredpc_id => r_sdo_cred.tipocredpc_id );
      fetch c_apur_contr into vn_contrcredfiscalcofins_id;
      close c_apur_contr;
      --
      vn_fase := 3;
      --
      if nvl(vn_contrcredfiscalcofins_id,0) = 0 then
         --
         vn_fase := 4;
         --
         begin
            select contrcredfiscalcofins_seq.nextval
              into vn_contrcredfiscalcofins_id
              from dual;
         exception
            when others then
               --
               gv_resumo_log := 'Recuperar sequence para Bloco 1500 com saldo do Bloco M500. Problemas em pk_apur_cofins.pkb_gera_bloco_1500_m500 (fase = '||
                                vn_fase||'). Erro = '||sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
               raise_application_error (-20101, gv_resumo_log);
               --
         end;
         --
         vn_fase := 5;
         --
         begin
            insert into contr_cred_fiscal_cofins( id
                                                , empresa_id
                                                , ano
                                                , mes
                                                , dm_situacao
                                                , dm_orig_cred
                                                , cnpj_suc
                                                , tipocredpc_id
                                                , vl_cred_apu
                                                , vl_cred_ext_apu
                                                , vl_tot_cred_apu
                                                , vl_cred_desc_pa_ant
                                                , vl_cred_per_pa_ant
                                                , vl_cred_dcomp_pa_ant
                                                , vl_sd_cred_disp_efd
                                                , vl_cred_desc_efd
                                                , vl_cred_per_efd
                                                , vl_cred_dcomp_efd
                                                , vl_cred_trans
                                                , vl_cred_out
                                                , vl_sld_cred_fim
                                                , dm_origem
                                                )
                                          values( vn_contrcredfiscalcofins_id -- id
                                                , gt_row_per_cons_contr_cofins.empresa_id -- empresa_id
                                                , to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') -- ano
                                                , to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm') -- mes
                                                , 3 -- dm_situacao -- situação: 0-aberto; 1-calculada; 2-erro no cálculo; 3-processada; 4-erro de validação
                                                , '01' -- dm_orig_cred -- indicador da origem do crédito: 01-crédito decorrente de operações próprias; 02-credito transferido por pessoa jurídica sucedida
                                                , null -- cnpj_suc
                                                , r_sdo_cred.tipocredpc_id -- tipocredpc_id
                                                , nvl(r_sdo_cred.vl_sld_cred,0) -- vl_cred_apu
                                                , 0 -- vl_cred_ext_apu
                                                , nvl(r_sdo_cred.vl_sld_cred,0) -- vl_tot_cred_apu
                                                , 0 -- vl_cred_desc_pa_ant
                                                , 0 -- vl_cred_per_pa_ant
                                                , 0 -- vl_cred_dcomp_pa_ant
                                                , nvl(r_sdo_cred.vl_sld_cred,0) -- vl_sd_cred_disp_efd
                                                , 0 -- vl_cred_desc_efd
                                                , 0 -- vl_cred_per_efd
                                                , 0 -- vl_cred_dcomp_efd
                                                , 0 -- vl_cred_trans
                                                , 0 -- vl_cred_out
                                                , nvl(r_sdo_cred.vl_sld_cred,0) -- vl_sld_cred_fim
                                                , 1 -- dm_origem -- indicador de origem do lançamento: 0-Digitado, 1-Gerado no Bloco M200
                                                );
         exception
            when others then
               --
               gv_resumo_log := 'Inclusão do registro Bloco 1500 com saldo do Bloco M500. Problemas em pk_apur_cofins.pkb_calcula_bloco_1500 (fase = '||
                                vn_fase||'). Erro = '||sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
               raise_application_error (-20101, gv_resumo_log);
               --
         end;
         --
      else
         --
         vn_fase := 6;
         --
         begin
            update contr_cred_fiscal_cofins cc
               set cc.vl_cred_apu         = nvl(cc.vl_cred_apu,0) + nvl(r_sdo_cred.vl_sld_cred,0)
                 , cc.vl_tot_cred_apu     = nvl(cc.vl_tot_cred_apu,0) + nvl(r_sdo_cred.vl_sld_cred,0)
                 , cc.vl_sd_cred_disp_efd = nvl(cc.vl_sd_cred_disp_efd,0) + nvl(r_sdo_cred.vl_sld_cred,0)
                 , cc.vl_sld_cred_fim     = nvl(cc.vl_sld_cred_fim,0) + nvl(r_sdo_cred.vl_sld_cred,0)
             where cc.id = vn_contrcredfiscalcofins_id;
         exception
            when others then
               --
               gv_resumo_log := 'Alteração do registro Bloco 1500 com saldo do Bloco M500. Problemas em pk_apur_cofins.pkb_gera_bloco_1500_m500 (fase = '||
                                vn_fase||'). Erro = '||sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico.id%type;
               begin
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
               raise_application_error (-20101, gv_resumo_log);
               --
         end;
         --
      end if;
      --
      vn_fase := 7;
      --
      begin
         insert into r_apurcredcof_contrcredfcof( apurcredcofins_id
                                                , contrcredfiscalcofins_id )
                                          values( r_sdo_cred.apurcredcofins_id
                                                , vn_contrcredfiscalcofins_id );
      exception
         when others then
            --
            gv_resumo_log := 'Incluir o relacionamento do Bloco M500 com Bloco 1500 devido ao saldo do Bloco M500. Problemas em pk_apur_cofins.'||
                             'pkb_gera_bloco_1500_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_sistema
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
            raise_application_error (-20101, gv_resumo_log);
            --
      end;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_gera_bloco_1500_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_GERA_BLOCO_1500_M500;
------------------------------------------------------------------------------------------------------------
--| Procedimento excluir os relacionamentos dos dados do Bloco 1500 com as Apurações de COFINS - Bloco M500
------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_EXCLUI_BLOCO_1500_M500 IS
   --
   vn_fase number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   -- Excluir os registros gerados pelo bloco M600 para novo cálculo
   begin
      delete from r_apurcredcof_contrcredfcof ra
       where ra.contrcredfiscalcofins_id in ( select cc.id
                                                from contr_cred_fiscal_cofins cc
                                               where cc.empresa_id = gt_row_per_cons_contr_cofins.empresa_id
                                                 and cc.ano        = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
                                                 and cc.mes        = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
                                                 and cc.dm_origem  = 1 ); -- 0-Digitado, 1-Gerado no Bloco M600
   exception
      when others then
         --
         gv_resumo_log := 'Excluir os registros gerados pelo bloco M600 para novo cálculo. Problemas em pk_apur_cofins.pkb_exclui_bloco_1500_m500 (fase = '||
                          vn_fase||'). Erro = '||sqlerrm;
         --
         declare
            vn_loggenerico_id  log_generico.id%type;
         begin
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
         exception
            when others then
               null;
         end;
         --
         raise_application_error (-20101, gv_resumo_log);
         --
   end;
   --
   vn_fase := 2;
   -- Excluir os registros do Bloco 1500
   begin
      delete from contr_cred_fiscal_cofins cc
       where cc.empresa_id = gt_row_per_cons_contr_cofins.empresa_id
         and cc.ano        = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
         and cc.mes        = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
         and cc.dm_origem  = 1; -- 0-Digitado, 1-Gerado no Bloco M600
   exception
      when others then
         --
         gv_resumo_log := 'Excluir os registros do Bloco 1500 para novo cálculo. Problemas em pk_apur_cofins.pkb_exclui_bloco_1500_m500 (fase = '||vn_fase||
                          '). Erro = '||sqlerrm;
         --
         declare
            vn_loggenerico_id  log_generico.id%type;
         begin
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
         exception
            when others then
               null;
         end;
         --
         raise_application_error (-20101, gv_resumo_log);
         --
   end;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_exclui_bloco_1500_m500 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_EXCLUI_BLOCO_1500_M500;
--------------------------------------------------------------------------
--| Procedimento recupera os dados da consolidação do COFINS - Bloco M600
--------------------------------------------------------------------------
PROCEDURE PKB_DADOS_CONS_COFINS_M600( EN_CONSCONTRCOFINS_ID IN CONS_CONTR_COFINS.ID%TYPE ) IS
   --
   vn_fase         number := 0;
   ve_invalido     exception;
   --
   cursor c_cons_contr_cofins is
      select *
        from cons_contr_cofins ac
       where ac.id = en_conscontrcofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   gt_row_cons_contr_cofins := null;
   --
   vn_fase := 2;
   open c_cons_contr_cofins;
   fetch c_cons_contr_cofins into gt_row_cons_contr_cofins;
   close c_cons_contr_cofins;
   --
   vn_fase := 3;
   --| Cabeçalho para as mensagens de log de erro e inconsistências
   gv_mensagem_log := ' - Consolidação da Contribuição do Imposto COFINS';
   --
   vn_fase := 4;
   --
   if nvl(gt_row_cons_contr_cofins.id,0) = 0 then
      --
      vn_fase := 5;
      raise ve_invalido;
      --
   end if;
   --
EXCEPTION
   when ve_invalido then
      --
      gv_resumo_log := 'Consolidação não encontrada. Verifique o identificador informado (id = '||en_conscontrcofins_id||').';
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_dados_cons_cofins_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DADOS_CONS_COFINS_M600;
-----------------------------------------------------------------------------------------------------
--| Procedimento para Compôr os valores Não-Cumulativos e Cumulativos devido a Geração do Bloco 1700
-----------------------------------------------------------------------------------------------------
PROCEDURE PKB_CALCULA_BLOCO_1700( EN_CONSCONTRCOFINS_ID   IN CONS_CONTR_COFINS.ID%TYPE
                                , EN_TOTCONTNCDEV_M600    IN NUMBER
                                , SN_VL_RET_NC           OUT NUMBER
                                , SN_VL_OUT_DED_NC       OUT NUMBER
                                , SN_VL_CONT_NC_REC      OUT NUMBER
                                , SN_VL_TOT_CONT_CUM_PER OUT NUMBER
                                , SN_VL_RET_CUM          OUT NUMBER
                                , SN_VL_OUT_DED_CUM      OUT NUMBER
                                , SN_VL_CONT_CUM_REC     OUT NUMBER ) IS
   --
   vn_fase                        number := 0;
   vn_loggenerico_id              log_generico.id%type;
   vn_vl_ret_nc                   number := 0;
   vn_tot_vl_ret_nc               number := 0;
   vn_vl_out_ded_nc               number := 0;
   vn_tot_vl_out_ded_nc           number := 0;
   vn_vl_cont_nc_rec              number := 0;
   vn_vl_ret_apu_bl_1700_nc       number := 0;
   vn_vl_ret_ded_bl_1700_nc       number := 0;
   vn_vl_ret_apu_bl_1700_cum      number := 0;
   vn_vl_ret_ded_bl_1700_cum      number := 0;
   vv_proc_ded                    varchar2(1) := 'N';
   vn_vl_tot_cont_nc_dev_rat      number := 0;
   vn_vl_tot_cont_cum_per         cons_contr_cofins.vl_tot_cont_cum_per%type;
   vn_vl_ret_cum                  cons_contr_cofins.vl_ret_cum%type;
   vn_tot_vl_ret_cum              cons_contr_cofins.vl_ret_cum%type;
   vn_vl_out_ded_cum              cons_contr_cofins.vl_out_ded_cum%type;
   vn_tot_vl_out_ded_cum          cons_contr_cofins.vl_out_ded_cum%type;
   vn_vl_tot_cont_cum_per_rat     cons_contr_cofins.vl_tot_cont_cum_per%type;
   vn_vl_cont_cum_rec             cons_contr_cofins.vl_cont_cum_rec%type;
   vn_contrvlrretfontecofins_id   contr_vlr_ret_fonte_cofins.id%type;
   --
   vn_registrefdpc_id registr_efd_pc.id%type :=0;
   vt_mem_calc_apur_cofins  mem_calc_apur_cofins%rowtype;
   vc_cod_part              pessoa.cod_part%type;
   vd_dt_ret                imp_ret_rec_pc.dt_ret%type;
   vn_id_mem_f600           contr_ret_fonte_pc.id%type;
   --
   cursor c_contr is
      select cv.id contrvlrretfontecofins_id
        from contr_vlr_ret_fonte_cofins cv
       where cv.empresa_id  = gt_row_per_cons_contr_cofins.empresa_id
         and cv.ano         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
         and cv.mes         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
         and cv.dm_situacao = 3 -- validado
         and cv.per_rec_ret = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mmrrrr')
         and cv.dm_origem   = 1; -- 0-digitado, 1-gerado no bloco m200
   --
   cursor c_vl_ded_cof( en_ind_nat_ded in number ) is -- deduções diversas - bloco f700
      select nvl(sum(nvl(dd.vl_ded_cofins,0)),0)
        from deducao_diversa_pc dd
       where dd.empresa_id in (select em.id empresa_id -- recuperar a matriz e as filiais
                                 from empresa em
                                start with em.id = gt_row_per_cons_contr_cofins.empresa_id
                              connect by prior em.id = em.ar_empresa_id)
         and to_date(('01'||lpad(dd.mes_ref,2,'0')||dd.ano_ref),'ddmmrrrr') between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and dd.dm_ind_nat_ded = en_ind_nat_ded -- 0-dedução de natureza não cumulativa, 1-dedução de natureza cumulativa
         and dd.dm_st_proc     = 1; -- Validada
   --
   -- Controle dos valores retidos apurados na fonte de cofins - F600 - Processo não-cumulativo e Processo cumulativo
   cursor c_vl_ret_apu( en_dm_ind_nat_rec in number ) is -- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
   select cr.dm_ind_nat_ret
        , nvl(sum(nvl(cr.vl_ret_cofins,0)),0) vl_ret_apu
        , sum(vl_bc_ret) vl_bc_ret
     from contr_ret_fonte_pc cr -- dados do Bloco F700
    where cr.empresa_id in (select em.id empresa_id -- recuperar a matriz e as filiais
                              from empresa em
                             start with em.id = gt_row_per_cons_contr_cofins.empresa_id
                           connect by prior em.id = em.ar_empresa_id)
      and cr.dm_st_proc     = 1 -- validada
      and cr.dm_ind_nat_rec = en_dm_ind_nat_rec -- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
      and cr.dm_st_integra in (0,7,10) -- 0-Indefinido, 7-Integração por view de banco de dados, 10-Gerado por Impostos Retidos sobre Receita
      and cr.dt_ret   between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
    group by cr.dm_ind_nat_ret;
   --
   -- Controle de valores retidos da fonte - Bloco F600
   cursor c_vl_imp_cof( en_dm_ind_nat_rec in number
                      , ev_dm_ind_nat_ret in varchar2 ) is
      select ir.dt_ret
           , pe.cod_part
           , nvl(sum(nvl(ir.vl_ret_cofins,0)),0) vl_ret_cofins
           , nvl(sum(nvl(ir.vl_base_calc,0)),0) vl_base_calc
        from contr_ret_fonte_pc         cr
           , contrretfonte_impretrec_pc ci
           , imp_ret_rec_pc             ir
           , pessoa                     pe
       where cr.empresa_id in (select em.id empresa_id -- recuperar a matriz e as filiais
                                 from empresa em
                                start with em.id = gt_row_per_cons_contr_cofins.empresa_id
                              connect by prior em.id = em.ar_empresa_id)
         and cr.dm_st_proc         = 1 -- validada
         and cr.dm_ind_nat_rec     = en_dm_ind_nat_rec -- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
         and cr.dm_ind_nat_ret     = ev_dm_ind_nat_ret
         and cr.dt_ret       between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and ci.contrretfontepc_id = cr.id
         and ir.id                 = ci.impretrecpc_id
         and ir.dm_st_proc         = 1 -- validado
         and ir.empresa_id         = cr.empresa_id
         and ir.dm_ind_nat_rec     = cr.dm_ind_nat_rec
         and ir.dm_ind_nat_ret     = cr.dm_ind_nat_ret
         and pe.id                 = ir.pessoa_id
       group by ir.dt_ret
           , pe.cod_part
      union
      select cr.dt_ret
           , cr.cnpj
           , nvl(sum(nvl(cr.vl_ret_cofins,0)),0) vl_ret_cofins
           , nvl(sum(nvl(cr.vl_bc_ret,0)),0) vl_base_calc
        from contr_ret_fonte_pc cr
       where cr.empresa_id in (select em.id empresa_id -- recuperar a matriz e as filiais
                                 from empresa em
                                start with em.id = gt_row_per_cons_contr_cofins.empresa_id
                              connect by prior em.id = em.ar_empresa_id)
         and cr.dm_st_proc     = 1 -- validada
         and cr.dm_ind_nat_rec = en_dm_ind_nat_rec -- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
         and cr.dm_ind_nat_ret = ev_dm_ind_nat_ret
         and cr.dt_ret   between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and not exists  (select ci.id
                            from contrretfonte_impretrec_pc ci
                           where ci.contrretfontepc_id = cr.id)
       group by cr.dt_ret
           , cr.cnpj
       order by 1 -- dt_ret
           , 2; -- pe.cod_part ou cr.cnpj
   --
   -- Controle dos valores retidos apurados na fonte de cofins - 1700 - Processo não-cumulativo e Processo cumulativo
   cursor c_vl_ret_ded( en_dm_ind_nat_rec in number ) is -- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
   select cv.id contrvlrretfontecofins_id
        , cv.dm_ind_nat_ret
        , cv.vl_ret_ded
     from contr_vlr_ret_fonte_cofins cv -- dados do Bloco 1700
    where cv.empresa_id in (select em.id empresa_id -- recuperar a matriz e as filiais
                              from empresa em
                             start with em.id = gt_row_per_cons_contr_cofins.empresa_id
                           connect by prior em.id = em.ar_empresa_id)
      and cv.dm_situacao = 3 -- validada
      and cv.dm_origem   = 0 -- digitado
      and cv.ano         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
      and cv.mes         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
      and ((en_dm_ind_nat_rec = 0 and-- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
            cv.dm_ind_nat_ret in ('01','02','03','04','05','99'))
            or
           (en_dm_ind_nat_rec = 1 and-- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
            cv.dm_ind_nat_ret in ('51','52','53','54','55','59')))
      and cv.vl_ret_ded > 0
      and cv.vl_sld_ret > 0
    order by cv.ano, cv.mes;
   --
   cursor c_vl_tot_cont_cum_per is -- detalhe da consolidação - bloco m200
      select nvl(sum(nvl(dc.vl_cont_per,0)),0)
        from det_cons_contr_cofins dc
       where dc.conscontrcofins_id = gt_row_cons_contr_cofins.id
         and ((gn_dm_cod_inc_trib = 2 and -- 2-regime cumulativo
               pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc ( dc.contrsocapurpc_id ) in ('31', '32'))
               or
              (gn_dm_cod_inc_trib in (2,3) and -- 2-regime cumulativo e 3-regime cumulativo e não-cumulativo
               pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc ( dc.contrsocapurpc_id ) in ('51', '52', '53', '54', '72')));
   --
BEGIN
   --
   vn_fase := 1;
   --
   begin
      delete from contr_vlr_ret_fonte_cofins cv
       where cv.empresa_id  = gt_row_per_cons_contr_cofins.empresa_id
         and cv.ano         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
         and cv.mes         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
         and cv.per_rec_ret = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mmrrrr')
         and cv.dm_origem   = 1; -- 0-Digitado, 1-Gerado no Bloco M200
   exception
      when others then
         gv_resumo_log := 'Problemas ao excluir controle de valor de retenção apurada e deduzida - Bloco 1700 (pk_apur_cofins.pkb_calcula_bloco_1700). '||
                          'Erro = '||sqlerrm;
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                          , ev_mensagem       => gv_mensagem_log
                                          , ev_resumo         => gv_resumo_log
                                          , en_tipo_log       => erro_de_sistema
                                          , en_referencia_id  => gn_referencia_id
                                          , ev_obj_referencia => gv_obj_referencia );
   end;
   --
   vn_fase := 2;
   --
   vn_vl_ret_nc             := 0;
   vn_tot_vl_ret_nc         := 0;
   vn_vl_out_ded_nc         := 0;
   vn_tot_vl_out_ded_nc     := 0;
   vn_vl_cont_nc_rec        := 0;
   vn_vl_ret_apu_bl_1700_nc := 0;
   vn_vl_ret_ded_bl_1700_nc := 0;
   vv_proc_ded              := 'N';
   --
   if gn_dm_cod_inc_trib = 2 or -- 2-Exclusivamente no regime cumulativo
      nvl(en_totcontncdev_m600,0) = 0 then
      --
      vn_fase := 3;
      --
   else
      --
      vn_fase := 4;
      --
      vn_contrvlrretfontecofins_id := 0;
      open c_contr;
      fetch c_contr into vn_contrvlrretfontecofins_id; -- verifica se já existe lançto de controle de valor de natureza não-cumulativa
      close c_contr;
      --
      vn_fase := 5;
      -- soma deduções diversas - bloco f700 -> deducao_diversa_pc.vl_ded_cofins
      open c_vl_ded_cof( en_ind_nat_ded => 0 ); -- 0-dedução de natureza não-cumulativa, 1-dedução de natureza cumulativa
      fetch c_vl_ded_cof into vn_vl_out_ded_nc;
      close c_vl_ded_cof;

      -- Monta a memória de calculo -------------------------------- 69023
       if nvl(vn_vl_out_ded_nc,0) > 0 then
      --
         vn_registrefdpc_id                          := fkg_ret_registrefdpc_id('F700');
         vt_mem_calc_apur_cofins                     := null;
         vt_mem_calc_apur_cofins.referencia_id       := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.perconscontrcofins_id  := gt_row_per_cons_contr_cofins.id;
         vt_mem_calc_apur_cofins.registrefdpc_id     := vn_registrefdpc_id;
         vt_mem_calc_apur_cofins.tipo_operacao       := 'C';
         vt_mem_calc_apur_cofins.ident_doc           := 'Deduções Diversas';
         vt_mem_calc_apur_cofins.vl_base_calc        := 0;--vn_vl_bc_oper;
         vt_mem_calc_apur_cofins.aliq_perc           := 0;
         vt_mem_calc_apur_cofins.aliq_prod           := 0;
         vt_mem_calc_apur_cofins.vl_imp_trib         := nvl(vn_vl_out_ded_nc, 0);
         vt_mem_calc_apur_cofins.reg_controlador     := 'M600';
         pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
       --
       end if;
      --
      vn_fase := 6;
      vn_vl_tot_cont_nc_dev_rat := nvl(en_totcontncdev_m600,0);
      --
      vn_fase := 7;
      --
      for r_vl_ret_apu in c_vl_ret_apu( en_dm_ind_nat_rec => 0 ) -- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
      loop
         --
         exit when c_vl_ret_apu%notfound or (c_vl_ret_apu%notfound) is null;
         --
         vn_fase := 8;
         --
         vv_proc_ded              := 'S';
         vn_vl_ret_nc             := nvl(r_vl_ret_apu.vl_ret_apu,0);
         vn_vl_ret_apu_bl_1700_nc := nvl(r_vl_ret_apu.vl_ret_apu,0);
         --
         vn_fase := 9;
         --
         if nvl(vn_vl_tot_cont_nc_dev_rat,0) = 0 then -- Valor Total da Contribuição Não Cumulativa Devida
            --
            vn_fase := 9.1;
            --
            vn_vl_ret_nc     := 0;
            vn_vl_out_ded_nc := 0;
            --
         else
            --
            vn_fase := 9.2;
            --
            if nvl(vn_vl_ret_nc,0) > nvl(vn_vl_tot_cont_nc_dev_rat,0) then -- valor de retenção maior que o total
               --
               vn_fase := 9.3;
               --
               vn_vl_ret_nc              := nvl(vn_vl_tot_cont_nc_dev_rat,0); -- valor de retenção fica igual ao total para zerar
               vn_vl_out_ded_nc          := 0; -- não irá precisar desse valor para zerar o total
               vn_vl_tot_cont_nc_dev_rat := 0;
               vn_tot_vl_ret_nc          := nvl(vn_tot_vl_ret_nc,0) + nvl(vn_vl_ret_nc,0);
               --
            elsif nvl(vn_vl_ret_nc,0) = nvl(vn_vl_tot_cont_nc_dev_rat,0) then -- valor de retenção igual total
                  --
                  vn_fase := 9.4;
                  -- vn_vl_ret_nc: valor de retenção está igual ao total para zerar
                  vn_vl_out_ded_nc          := 0; -- não irá precisar desse valor para zerar o total
                  vn_vl_tot_cont_nc_dev_rat := 0;
                  vn_tot_vl_ret_nc          := nvl(vn_tot_vl_ret_nc,0) + nvl(vn_vl_ret_nc,0);
                  --
            else -- nvl(vn_vl_ret_nc,0) < nvl(vn_vl_tot_cont_nc_dev_rat,0) -- valor de retenção menor que total
               --
               vn_fase := 9.5;
               -- vn_vl_ret_nc: valor de retenção será usado e ficará saldo no total
               if (nvl(vn_vl_ret_nc,0) + nvl(vn_vl_out_ded_nc,0)) > nvl(vn_vl_tot_cont_nc_dev_rat,0) then -- valor de (retenção + outras) está maior que o total
                  --
                  vn_fase := 9.6;
                  --
                  vn_vl_out_ded_nc          := nvl(vn_vl_tot_cont_nc_dev_rat,0) - nvl(vn_vl_ret_nc,0); -- valor de outras deve ser a diferença para zerar o total
                  vn_tot_vl_ret_nc          := nvl(vn_tot_vl_ret_nc,0) + nvl(vn_vl_ret_nc,0);
                  vn_tot_vl_out_ded_nc      := nvl(vn_tot_vl_out_ded_nc,0) + nvl(vn_vl_out_ded_nc,0);
                  vn_vl_tot_cont_nc_dev_rat := 0;
                  --
               elsif (nvl(vn_vl_ret_nc,0) + nvl(vn_vl_out_ded_nc,0)) = nvl(vn_vl_tot_cont_nc_dev_rat,0) then -- valor de (retenção + outras) igual ao total
                     --
                     vn_fase := 9.7;
                     -- vn_vl_ret_nc: valor de retenção está igual ao total para zerar
                     -- vn_vl_out_ded_nc: valor de outras está igual ao total para zerar
                     vn_tot_vl_ret_nc          := nvl(vn_tot_vl_ret_nc,0) + nvl(vn_vl_ret_nc,0);
                     vn_tot_vl_out_ded_nc      := nvl(vn_tot_vl_out_ded_nc,0) + nvl(vn_vl_out_ded_nc,0);
                     vn_vl_out_ded_nc          := 0;
                     vn_vl_tot_cont_nc_dev_rat := 0;
                     --
               else -- (nvl(vn_vl_ret_nc,0) + nvl(vn_vl_out_ded_nc,0)) < nvl(vn_vl_tot_cont_nc_dev_rat,0) then -- valor de (retenção + outras) menor que total
                  --
                  vn_fase := 9.8;
                  -- vn_vl_ret_nc: valor de retenção será usado e ficará saldo no total
                  -- vn_vl_out_ded_nc: valor de outras será usado e ficará saldo no total
                  vn_vl_tot_cont_nc_dev_rat := (nvl(vn_vl_tot_cont_nc_dev_rat,0) - (nvl(vn_vl_ret_nc,0) + nvl(vn_vl_out_ded_nc,0)));
                  vn_tot_vl_ret_nc          := nvl(vn_tot_vl_ret_nc,0) + nvl(vn_vl_ret_nc,0);
                  vn_tot_vl_out_ded_nc      := nvl(vn_tot_vl_out_ded_nc,0) + nvl(vn_vl_out_ded_nc,0);
                  vn_vl_out_ded_nc          := 0;
                  --
               end if;
               --
            end if;
            --
         end if;
         --
         vn_fase := 10;
         vn_vl_ret_ded_bl_1700_nc := 0;
         --
         -- Atualizar o valor do bloco 1700 - campo vl_ret_ded
         vc_cod_part := null;
         vd_dt_ret   := null;
         for r_vl_imp_cof in c_vl_imp_cof( en_dm_ind_nat_rec => 0 -- 0-dedução de natureza não-cumulativa, 1-dedução de natureza cumulativa
                                         , ev_dm_ind_nat_ret => r_vl_ret_apu.dm_ind_nat_ret)
         loop
            --
            exit when c_vl_imp_cof%notfound or (c_vl_imp_cof%notfound) is null;
            --
            vn_fase := 10.1;
            --
            vc_cod_part := r_vl_imp_cof.cod_part;
            if nvl(r_vl_imp_cof.vl_ret_cofins,0) > nvl(vn_vl_ret_nc,0) then
               --
               vn_fase := 10.2;
               -- valor do imposto atingiu o valor acumulado de retenção para dedução não-cumulativa
               vn_vl_ret_ded_bl_1700_nc := nvl(vn_vl_ret_ded_bl_1700_nc,0) + nvl(vn_vl_ret_nc,0);
              -- exit; 69023
               --
            elsif nvl(r_vl_imp_cof.vl_ret_cofins,0) = nvl(vn_vl_ret_nc,0) then
                  --
                  vn_fase := 10.3;
                  -- valor do imposto atingiu o valor acumulado de retenção para dedução não-cumulativa
                  vn_vl_ret_ded_bl_1700_nc := nvl(vn_vl_ret_ded_bl_1700_nc,0) + nvl(r_vl_imp_cof.vl_ret_cofins,0);
            --      exit; 69023
                  --
            else -- nvl(r_vl_imp_cof.vl_ret_cofins,0) < nvl(vn_vl_ret_nc,0)
               --
               vn_fase := 10.4;
               -- valor do imposto atingiu o valor acumulado de retenção para dedução não-cumulativa
               vn_vl_ret_nc             := nvl(vn_vl_ret_nc,0) - nvl(r_vl_imp_cof.vl_ret_cofins,0);
               vn_vl_ret_ded_bl_1700_nc := nvl(vn_vl_ret_ded_bl_1700_nc,0) + nvl(r_vl_imp_cof.vl_ret_cofins,0);
               --
            end if;
            --
         -- Monta a memória de calculo -------------------------------- 69023
             if nvl(vn_vl_ret_nc,0) > 0 or nvl(vn_vl_ret_cum,0) > 0 then
             --
             select nvl(max(id), gt_row_per_cons_contr_cofins.id)
               into vn_id_mem_f600
               from contr_ret_fonte_pc
              where empresa_id =  gt_row_per_cons_contr_cofins.empresa_id
                and cnpj       =  r_vl_imp_cof.cod_part
                and dt_ret     =  r_vl_imp_cof.dt_ret;
             --
               vn_registrefdpc_id                             := fkg_ret_registrefdpc_id('F600');
               vt_mem_calc_apur_cofins                        := null;
               vt_mem_calc_apur_cofins.referencia_id          := vn_id_mem_f600;
               vt_mem_calc_apur_cofins.perconscontrcofins_id  := gt_row_per_cons_contr_cofins.id;
			         vt_mem_calc_apur_cofins.registrefdpc_id        := vn_registrefdpc_id;
               vt_mem_calc_apur_cofins.tipo_operacao          := 'C';
               vt_mem_calc_apur_cofins.ident_doc              := 'Retenção referente ao Participante :'||vc_cod_part||'/'||'Data: '||vd_dt_ret;
               vt_mem_calc_apur_cofins.vl_base_calc           := r_vl_imp_cof.vl_base_calc;
               vt_mem_calc_apur_cofins.aliq_perc              := 0;
               vt_mem_calc_apur_cofins.aliq_prod              := 0;
               vt_mem_calc_apur_cofins.vl_imp_trib            := nvl(vn_vl_ret_nc,0) + nvl(vn_vl_ret_cum,0);
               vt_mem_calc_apur_cofins.reg_controlador        := 'M600';
               pkb_monta_vet_mem_calc_cofins(vt_mem_calc_apur_cofins);
             --
             end if;
             --
         end loop;
         --
         vn_fase := 11;
         --
         if nvl(vn_contrvlrretfontecofins_id,0) = 0 then
            --
            vn_fase := 12;
            --
            begin
               select contrvlrretfontecofins_seq.nextval
                 into vn_contrvlrretfontecofins_id
                 from dual;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao recuperar sequence do controle de valor de retenção apurada e deduzida - valores não-cumulativos - Bloco F600 '||
                                   '(pk_apur_cofins.pkb_calcula_bloco_1700). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_sistema
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
            end;
            --
            vn_fase := 13;
            --
            begin
               insert into contr_vlr_ret_fonte_cofins( id
                                                  , empresa_id
                                                  , ano
                                                  , mes
                                                  , dm_situacao
                                                  , dm_ind_nat_ret
                                                  , per_rec_ret
                                                  , vl_ret_apu
                                                  , vl_ret_ded
                                                  , vl_ret_per
                                                  , vl_ret_dcomp
                                                  , vl_sld_ret
                                                  , dm_origem
                                                  )
                                            values( vn_contrvlrretfontecofins_id
                                                  , gt_row_per_cons_contr_cofins.empresa_id
                                                  , to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
                                                  , to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
                                                  , 3 -- dm_situacao: 3-validado
                                                  , r_vl_ret_apu.dm_ind_nat_ret -- dm_ind_nat_ret
                                                  , to_char(gt_row_per_cons_contr_cofins.dt_ini,'mmrrrr') -- per_rec_ret
                                                  , nvl(vn_vl_ret_apu_bl_1700_nc,0) -- vl_ret_apu
                                                  , nvl(vn_vl_ret_ded_bl_1700_nc,0) -- vl_ret_ded
                                                  , 0 -- vl_ret_per
                                                  , 0 -- vl_ret_dcomp
                                                  , (nvl(vn_vl_ret_apu_bl_1700_nc,0) - nvl(vn_vl_ret_ded_bl_1700_nc,0)) -- vl_sld_ret
                                                  , 1 -- 0-digitado, 1-gerado no bloco m200
                                                  );
            exception
               when others then
                  gv_resumo_log := 'Problemas ao incluir controle de valor de retenção apurada e deduzida - valores não-cumulativos - Bloco F600 (pk_apur_cofins.'||
                                   'pkb_calcula_bloco_1700). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_sistema
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
            end;
            --
         else
            --
            vn_fase := 14;
            --
            begin
               update contr_vlr_ret_fonte_cofins cv
                  set cv.vl_ret_apu = (nvl(cv.vl_ret_apu,0) + nvl(vn_vl_ret_apu_bl_1700_cum,0))
                    , cv.vl_ret_ded = (nvl(cv.vl_ret_ded,0) + nvl(vn_vl_ret_ded_bl_1700_cum,0))
                    , cv.vl_sld_ret = (nvl(cv.vl_sld_ret,0) + (nvl(vn_vl_ret_apu_bl_1700_cum,0) - nvl(vn_vl_ret_ded_bl_1700_cum,0)))
                where cv.id = vn_contrvlrretfontecofins_id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao alterar controle de valor de retenção apurada e deduzida - valores não-cumulativos - Bloco F600 '||
                                   '(pk_apur_cofins.pkb_calcula_bloco_1700). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
         end if;
      end loop;
      --
      vn_fase := 15;
      --
      if nvl(vn_vl_tot_cont_nc_dev_rat,0) > 0 then -- Valor Total da Contribuição Não Cumulativa Devida atendida pelos registros do F600
         --
         vn_fase := 16;
         --
         vn_vl_ret_nc             := 0;
         vn_vl_ret_ded_bl_1700_nc := 0;
         vn_vl_ret_ded_bl_1700_nc := nvl(vn_vl_tot_cont_nc_dev_rat,0);
         --
         for r_vl_ret_ded in c_vl_ret_ded( en_dm_ind_nat_rec => 0 ) -- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
         loop
            --
            exit when c_vl_ret_ded%notfound or (c_vl_ret_ded%notfound) is null;
            --
            vn_fase := 17;
            --
            vv_proc_ded := 'S';
            vn_vl_ret_nc := nvl(r_vl_ret_ded.vl_ret_ded,0);
            --
            vn_fase := 18;
            --
            if nvl(vn_vl_tot_cont_nc_dev_rat,0) = 0 then -- Valor Total da Contribuição Não Cumulativa Devida
               --
               vn_fase := 18.1;
               --
               vn_vl_ret_nc     := 0;
               vn_vl_out_ded_nc := 0;
               --
            else
               --
               vn_fase := 18.2;
               --
               if nvl(vn_vl_ret_nc,0) > nvl(vn_vl_tot_cont_nc_dev_rat,0) then -- valor de retenção maior que o total
                  --
                  vn_fase := 18.3;
                  --
                  vn_vl_ret_nc              := nvl(vn_vl_tot_cont_nc_dev_rat,0); -- valor de retenção fica igual ao total para zerar
                  vn_vl_out_ded_nc          := 0; -- não irá precisar desse valor para zerar o total
                  vn_vl_tot_cont_nc_dev_rat := 0;
                  vn_tot_vl_ret_nc          := nvl(vn_tot_vl_ret_nc,0) + nvl(vn_vl_ret_nc,0);
                  --
               elsif nvl(vn_vl_ret_nc,0) = nvl(vn_vl_tot_cont_nc_dev_rat,0) then -- valor de retenção igual total
                     --
                     vn_fase := 18.4;
                     -- vn_vl_ret_nc: valor de retenção está igual ao total para zerar
                     vn_vl_out_ded_nc          := 0; -- não irá precisar desse valor para zerar o total
                     vn_vl_tot_cont_nc_dev_rat := 0;
                     vn_tot_vl_ret_nc          := nvl(vn_tot_vl_ret_nc,0) + nvl(vn_vl_ret_nc,0);
                     --
               else -- nvl(vn_vl_ret_nc,0) < nvl(vn_vl_tot_cont_nc_dev_rat,0) -- valor de retenção menor que total
                  --
                  vn_fase := 18.5;
                  -- vn_vl_ret_nc: valor de retenção será usado e ficará saldo no total
                  if (nvl(vn_vl_ret_nc,0) + nvl(vn_vl_out_ded_nc,0)) > nvl(vn_vl_tot_cont_nc_dev_rat,0) then -- valor de (retenção + outras) está maior que o total
                     --
                     vn_fase := 18.6;
                     --
                     vn_vl_out_ded_nc          := nvl(vn_vl_tot_cont_nc_dev_rat,0) - nvl(vn_vl_ret_nc,0); -- valor de outras deve ser a diferença para zerar o total
                     vn_tot_vl_ret_nc          := nvl(vn_tot_vl_ret_nc,0) + nvl(vn_vl_ret_nc,0);
                     vn_tot_vl_out_ded_nc      := nvl(vn_tot_vl_out_ded_nc,0) + nvl(vn_vl_out_ded_nc,0);
                     vn_vl_tot_cont_nc_dev_rat := 0;
                     --
                  elsif (nvl(vn_vl_ret_nc,0) + nvl(vn_vl_out_ded_nc,0)) = nvl(vn_vl_tot_cont_nc_dev_rat,0) then -- valor de (retenção + outras) igual ao total
                        --
                        vn_fase := 18.7;
                        -- vn_vl_ret_nc: valor de retenção está igual ao total para zerar
                        -- vn_vl_out_ded_nc: valor de outras está igual ao total para zerar
                        vn_tot_vl_ret_nc          := nvl(vn_tot_vl_ret_nc,0) + nvl(vn_vl_ret_nc,0);
                        vn_tot_vl_out_ded_nc      := nvl(vn_tot_vl_out_ded_nc,0) + nvl(vn_vl_out_ded_nc,0);
                        vn_vl_out_ded_nc          := 0;
                        vn_vl_tot_cont_nc_dev_rat := 0;
                        --
                  else -- (nvl(vn_vl_ret_nc,0) + nvl(vn_vl_out_ded_nc,0)) < nvl(vn_vl_tot_cont_nc_dev_rat,0) then -- valor de (retenção + outras) menor que total
                     --
                     vn_fase := 18.8;
                     -- vn_vl_ret_nc: valor de retenção será usado e ficará saldo no total
                     -- vn_vl_out_ded_nc: valor de outras será usado e ficará saldo no total
                     vn_vl_tot_cont_nc_dev_rat := (nvl(vn_vl_tot_cont_nc_dev_rat,0) - (nvl(vn_vl_ret_nc,0) + nvl(vn_vl_out_ded_nc,0)));
                     vn_tot_vl_ret_nc          := nvl(vn_tot_vl_ret_nc,0) + nvl(vn_vl_ret_nc,0);
                     vn_tot_vl_out_ded_nc      := nvl(vn_tot_vl_out_ded_nc,0) + nvl(vn_vl_out_ded_nc,0);
                     vn_vl_out_ded_nc          := 0;
                     --
                  end if;
                  --
               end if;
               --
            end if;
            --
            vn_fase := 19;
            --
            if nvl(vn_contrvlrretfontecofins_id,0) = 0 then
               --
               vn_fase := 20;
               --
               begin
                  select contrvlrretfontecofins_seq.nextval
                    into vn_contrvlrretfontecofins_id
                    from dual;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao recuperar sequence do controle de valor de retenção apurada e deduzida - valores não-cumulativos - Bloco '||
                                      '1700 (pk_apur_cofins.pkb_calcula_bloco_1700). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_sistema
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
               end;
               --
               vn_fase := 21;
               --
               begin
                  insert into contr_vlr_ret_fonte_cofins( id
                                                     , empresa_id
                                                     , ano
                                                     , mes
                                                     , dm_situacao
                                                     , dm_ind_nat_ret
                                                     , per_rec_ret
                                                     , vl_ret_apu
                                                     , vl_ret_ded
                                                     , vl_ret_per
                                                     , vl_ret_dcomp
                                                     , vl_sld_ret
                                                     , dm_origem
                                                     )
                                               values( vn_contrvlrretfontecofins_id
                                                     , gt_row_per_cons_contr_cofins.empresa_id
                                                     , to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
                                                     , to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
                                                     , 3 -- dm_situacao: 3-validado
                                                     , r_vl_ret_ded.dm_ind_nat_ret -- dm_ind_nat_ret
                                                     , to_char(gt_row_per_cons_contr_cofins.dt_ini,'mmrrrr') -- per_rec_ret
                                                     , nvl(vn_vl_ret_ded_bl_1700_nc,0) -- vl_ret_apu
                                                     , nvl(vn_vl_ret_ded_bl_1700_nc,0) -- vl_ret_ded
                                                     , 0 -- vl_ret_per
                                                     , 0 -- vl_ret_dcomp
                                                     , (nvl(vn_vl_ret_ded_bl_1700_nc,0) - nvl(vn_vl_ret_ded_bl_1700_nc,0)) -- vl_sld_ret
                                                     , 1 -- 0-digitado, 1-gerado no bloco m200
                                                     );
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao incluir controle de valor de retenção apurada e deduzida - valores não-cumulativos - Bloco 1700 (pk_apur_cofins.'||
                                      'pkb_calcula_bloco_1700). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_sistema
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
               end;
               --
            else
               --
               vn_fase := 22;
               --
               begin
                  update contr_vlr_ret_fonte_cofins cv
                     set cv.vl_ret_apu = (nvl(cv.vl_ret_apu,0) + nvl(vn_vl_ret_ded_bl_1700_nc,0))
                       , cv.vl_ret_ded = (nvl(cv.vl_ret_ded,0) + nvl(vn_vl_ret_ded_bl_1700_nc,0))
                       , cv.vl_sld_ret = (nvl(cv.vl_sld_ret,0) + (nvl(vn_vl_ret_ded_bl_1700_nc,0) - nvl(vn_vl_ret_ded_bl_1700_nc,0)))
                   where cv.id = vn_contrvlrretfontecofins_id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao alterar controle de valor de retenção apurada e deduzida - valores não-cumulativos - Bloco 1700 '||
                                      '(pk_apur_cofins.pkb_calcula_bloco_1700). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
            end if;
            --
         end loop;
         --
      end if; -- nvl(vn_vl_tot_cont_nc_dev_rat,0) > 0 then -- Valor Total da Contribuição Não Cumulativa Devida atendida pelos registros do F600
      --
      vn_fase := 23;
      --
      if vv_proc_ded = 'S' then -- executou o processo de deduções dos impostos retidos
         vn_vl_ret_nc      := nvl(vn_tot_vl_ret_nc,0);
         vn_vl_out_ded_nc  := nvl(vn_tot_vl_out_ded_nc,0);
         vn_vl_cont_nc_rec := nvl(vn_vl_tot_cont_nc_dev_rat,0);
      else -- não executou o processo de deduções dos impostos retidos
         vn_vl_ret_nc      := 0;
         vn_vl_out_ded_nc  := nvl(vn_vl_out_ded_nc,0); -- valor recuperado do Bloco F700
         vn_vl_cont_nc_rec := nvl(vn_vl_tot_cont_nc_dev_rat,0) - nvl(vn_vl_ret_nc,0) - nvl(vn_vl_out_ded_nc,0);
      end if;
      --
   end if;
   --
   vn_fase := 24;
   --
   if gn_dm_cod_inc_trib = 1 then -- 1-Exclusivamente no regime não-cumulativo
      vn_vl_tot_cont_cum_per := 0;
   else
      open c_vl_tot_cont_cum_per; -- soma detalhe da consolidação - bloco m200 -> det_CONS_CONTR_COFINS.vl_cont_per
      fetch c_vl_tot_cont_cum_per into vn_vl_tot_cont_cum_per;
      close c_vl_tot_cont_cum_per;
   end if;
   --
   vn_fase := 25;
   --
   ------------------------------------------------------------
   -- Compôr os valores Cumulativos para Geração do Bloco 1700
   ------------------------------------------------------------
   --
   vn_vl_ret_cum             := 0;
   vn_tot_vl_ret_cum         := 0;
   vn_vl_out_ded_cum         := 0;
   vn_tot_vl_out_ded_cum     := 0;
   vn_vl_cont_cum_rec        := 0;
   vn_vl_ret_apu_bl_1700_cum := 0;
   vn_vl_ret_ded_bl_1700_cum := 0;
   vv_proc_ded               := 'N';
   --
   if gn_dm_cod_inc_trib = 1 or -- 1-Exclusivamente no regime não-cumulativo
      nvl(vn_vl_tot_cont_cum_per,0) = 0 then
      --
      vn_fase := 26;
      --
   else
      --
      vn_fase := 27;
      --
      vn_contrvlrretfontecofins_id := 0;
      open c_contr;
      fetch c_contr into vn_contrvlrretfontecofins_id; -- verifica se já existe lançto de controle de valor de natureza cumulativa
      close c_contr;
      --
      vn_fase := 28;
      -- soma deduções diversas - bloco f700 -> deducao_diversa_pc.vl_ded_cofins
      open c_vl_ded_cof( en_ind_nat_ded => 1 ); -- 0-dedução de natureza não cumulativa, 1-dedução de natureza cumulativa
      fetch c_vl_ded_cof into vn_vl_out_ded_cum;
      close c_vl_ded_cof;
      --
      vn_fase := 29;
      vn_vl_tot_cont_cum_per_rat := nvl(vn_vl_tot_cont_cum_per,0);
      --
      vn_fase := 30;
      --
      for r_vl_ret_apu in c_vl_ret_apu( en_dm_ind_nat_rec => 1 ) -- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
      loop
         --
         exit when c_vl_ret_apu%notfound or (c_vl_ret_apu%notfound) is null;
         --
         vn_fase := 31;
         --
         vv_proc_ded               := 'S';
         vn_vl_ret_cum             := nvl(r_vl_ret_apu.vl_ret_apu,0);
         vn_vl_ret_apu_bl_1700_cum := nvl(r_vl_ret_apu.vl_ret_apu,0);
         --
         vn_fase := 32;
         --
         if nvl(vn_vl_tot_cont_cum_per_rat,0) = 0 then -- Valor Total da Contribuição Cumulativa no período
            --
            vn_fase := 32.1;
            --
            vn_vl_ret_cum     := 0;
            vn_vl_out_ded_cum := 0;
            --
         else
            --
            vn_fase := 32.2;
            --
            if nvl(vn_vl_ret_cum,0) > nvl(vn_vl_tot_cont_cum_per_rat,0) then -- valor de retenção maior que o total
               --
               vn_fase := 32.3;
               --
               vn_vl_ret_cum              := nvl(vn_vl_tot_cont_cum_per_rat,0); -- valor de retenção fica igual ao total para zerar
               vn_vl_out_ded_cum          := 0; -- não irá precisar desse valor para zerar o total
               vn_vl_tot_cont_cum_per_rat := 0;
               vn_tot_vl_ret_cum          := nvl(vn_tot_vl_ret_cum,0) + nvl(vn_vl_ret_cum,0);
               --
            elsif nvl(vn_vl_ret_cum,0) = nvl(vn_vl_tot_cont_cum_per_rat,0) then -- valor de retenção igual total
                  --
                  vn_fase := 32.4;
                  -- vn_vl_ret_cum: valor de retenção está igual ao total para zerar
                  vn_vl_out_ded_cum          := 0; -- não irá precisar desse valor para zerar o total
                  vn_vl_tot_cont_cum_per_rat := 0;
                  vn_tot_vl_ret_cum          := nvl(vn_tot_vl_ret_cum,0) + nvl(vn_vl_ret_cum,0);
                  --
            else -- nvl(vn_vl_ret_cum,0) < nvl(vn_vl_tot_cont_cum_per,0) -- valor de retenção menor que total
               --
               vn_fase := 32.5;
               -- vn_vl_ret_cum: valor de retenção será usado e ficará saldo no total
               if (nvl(vn_vl_ret_cum,0) + nvl(vn_vl_out_ded_cum,0)) > nvl(vn_vl_tot_cont_cum_per_rat,0) then -- valor de (retenção + outras) está maior que o total
                  --
                  vn_fase := 32.6;
                  --
                  vn_vl_out_ded_cum          := nvl(vn_vl_tot_cont_cum_per_rat,0) - nvl(vn_vl_ret_cum,0); -- valor de outras deve ser a diferença para zerar o total
                  vn_tot_vl_ret_cum          := nvl(vn_tot_vl_ret_cum,0) + nvl(vn_vl_ret_cum,0);
                  vn_tot_vl_out_ded_cum      := nvl(vn_tot_vl_out_ded_cum,0) + nvl(vn_vl_out_ded_cum,0);
                  vn_vl_tot_cont_cum_per_rat := 0;
                  --
               elsif (nvl(vn_vl_ret_cum,0) + nvl(vn_vl_out_ded_cum,0)) = nvl(vn_vl_tot_cont_cum_per_rat,0) then -- valor de (retenção + outras) igual ao total
                     --
                     vn_fase := 32.7;
                     -- vn_vl_ret_cum: valor de retenção está igual ao total para zerar
                     -- vn_vl_out_ded_cum: valor de outras está igual ao total para zerar
                     vn_tot_vl_ret_cum          := nvl(vn_tot_vl_ret_cum,0) + nvl(vn_vl_ret_cum,0);
                     vn_tot_vl_out_ded_cum      := nvl(vn_tot_vl_out_ded_cum,0) + nvl(vn_vl_out_ded_cum,0);
                     vn_vl_out_ded_cum          := 0;
                     vn_vl_tot_cont_cum_per_rat := 0;
                     --
               else -- (nvl(vn_vl_ret_cum,0) + nvl(vn_vl_out_ded_cum,0)) < nvl(vn_vl_tot_cont_cum_per,0) then -- valor de (retenção + outras) menor que total
                  --
                  vn_fase := 32.8;
                  -- vn_vl_ret_cum: valor de retenção será usado e ficará saldo no total
                  -- vn_vl_out_ded_cum: valor de outras será usado e ficará saldo no total
                  vn_vl_tot_cont_cum_per_rat := (nvl(vn_vl_tot_cont_cum_per_rat,0) - (nvl(vn_vl_ret_cum,0) + nvl(vn_vl_out_ded_cum,0)));
                  vn_tot_vl_ret_cum          := nvl(vn_tot_vl_ret_cum,0) + nvl(vn_vl_ret_cum,0);
                  vn_tot_vl_out_ded_cum      := nvl(vn_tot_vl_out_ded_cum,0) + nvl(vn_vl_out_ded_cum,0);
                  vn_vl_out_ded_cum          := 0;
                  --
               end if;
               --
            end if;
            --
         end if;
         --
         vn_fase := 34;
         vn_vl_ret_ded_bl_1700_cum := 0;
         --
         vn_fase := 35;
         -- Atualizar o valor do bloco 1700 - campo vl_ret_ded
         for r_vl_imp_cof in c_vl_imp_cof( en_dm_ind_nat_rec => 1 -- 0-dedução de natureza não-cumulativa, 1-dedução de natureza cumulativa
                                         , ev_dm_ind_nat_ret => r_vl_ret_apu.dm_ind_nat_ret)
         loop
            --
            exit when c_vl_imp_cof%notfound or (c_vl_imp_cof%notfound) is null;
            --
            vn_fase := 36;
            --
            if nvl(r_vl_imp_cof.vl_ret_cofins,0) > nvl(vn_vl_ret_cum,0) then
               --
               vn_fase := 36.1;
               -- valor do imposto atingiu o valor acumulado de retenção para dedução não-cumulativa
               vn_vl_ret_ded_bl_1700_cum := nvl(vn_vl_ret_ded_bl_1700_cum,0) + nvl(vn_vl_ret_cum,0);
               exit;
               --
            elsif nvl(r_vl_imp_cof.vl_ret_cofins,0) = nvl(vn_vl_ret_cum,0) then
                  --
                  vn_fase := 36.2;
                  -- valor do imposto atingiu o valor acumulado de retenção para dedução não-cumulativa
                  vn_vl_ret_ded_bl_1700_cum := nvl(vn_vl_ret_ded_bl_1700_cum,0) + nvl(r_vl_imp_cof.vl_ret_cofins,0);
                  exit;
                  --
            else -- nvl(r_vl_imp_cof.vl_ret_cofins,0) < nvl(vn_vl_ret_cum,0)
               --
               vn_fase := 36.3;
               -- valor do imposto atingiu o valor acumulado de retenção para dedução não-cumulativa
               vn_vl_ret_cum             := nvl(vn_vl_ret_cum,0) - nvl(r_vl_imp_cof.vl_ret_cofins,0);
               vn_vl_ret_ded_bl_1700_cum := nvl(vn_vl_ret_ded_bl_1700_cum,0) + nvl(r_vl_imp_cof.vl_ret_cofins,0);
               --
            end if;
            --
         end loop;
         --
         vn_fase := 37;
         --
         if nvl(vn_contrvlrretfontecofins_id,0) = 0 then
            --
            vn_fase := 38;
            --
            begin
               select contrvlrretfontecofins_seq.nextval
                 into vn_contrvlrretfontecofins_id
                 from dual;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao recuperar sequence do controle de valor de retenção apurada e deduzida - valores cumulativos - Bloco '||
                                   '1700 (pk_apur_cofins.pkb_calcula_bloco_1700). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_sistema
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
            end;
            --
            vn_fase := 39;
            --
            begin
               insert into contr_vlr_ret_fonte_cofins( id
                                                  , empresa_id
                                                  , ano
                                                  , mes
                                                  , dm_situacao
                                                  , dm_ind_nat_ret
                                                  , per_rec_ret
                                                  , vl_ret_apu
                                                  , vl_ret_ded
                                                  , vl_ret_per
                                                  , vl_ret_dcomp
                                                  , vl_sld_ret
                                                  , dm_origem
                                                  )
                                            values( vn_contrvlrretfontecofins_id
                                                  , gt_row_per_cons_contr_cofins.empresa_id
                                                  , to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
                                                  , to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
                                                  , 3 -- dm_situacao: 3-validado
                                                  , r_vl_ret_apu.dm_ind_nat_ret -- dm_ind_nat_ret
                                                  , to_char(gt_row_per_cons_contr_cofins.dt_ini,'mmrrrr') -- per_rec_ret
                                                  , nvl(vn_vl_ret_apu_bl_1700_cum,0) -- vl_ret_apu
                                                  , nvl(vn_vl_ret_ded_bl_1700_cum,0) -- vl_ret_ded
                                                  , 0 -- vl_ret_per
                                                  , 0 -- vl_ret_dcomp
                                                  , (nvl(vn_vl_ret_apu_bl_1700_cum,0) - nvl(vn_vl_ret_ded_bl_1700_cum,0)) -- vl_sld_ret
                                                  , 1 -- 0-digitado, 1-gerado no bloco m200
                                                  );
            exception
               when others then
                  gv_resumo_log := 'Problemas ao incluir controle de valor de retenção apurada e deduzida - valores cumulativos - Bloco 1700 (pk_apur_cofins.'||
                                   'pkb_calcula_bloco_1700). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
         else
            --
            vn_fase := 40;
            --
            begin
               update contr_vlr_ret_fonte_cofins cv
                  set cv.vl_ret_apu = (nvl(cv.vl_ret_apu,0) + nvl(vn_vl_ret_apu_bl_1700_cum,0))
                    , cv.vl_ret_ded = (nvl(cv.vl_ret_ded,0) + nvl(vn_vl_ret_ded_bl_1700_cum,0))
                    , cv.vl_sld_ret = (nvl(cv.vl_sld_ret,0) + (nvl(vn_vl_ret_apu_bl_1700_cum,0) - nvl(vn_vl_ret_ded_bl_1700_cum,0)))
                where cv.id = vn_contrvlrretfontecofins_id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao alterar controle de valor de retenção apurada e deduzida - valores cumulativos - Bloco 1700 '||
                                   '(pk_apur_cofins.pkb_calcula_bloco_1700). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 41;
      --
      if vv_proc_ded = 'S' then -- executou o processo de deduções dos impostos retidos
         vn_vl_ret_cum      := nvl(vn_tot_vl_ret_cum,0);
         vn_vl_out_ded_cum  := nvl(vn_tot_vl_out_ded_cum,0);
         vn_vl_cont_cum_rec := nvl(vn_vl_tot_cont_cum_per_rat,0);
      else -- não executou o processo de deduções dos impostos retidos
         vn_vl_ret_cum      := 0;
         vn_vl_out_ded_cum  := nvl(vn_vl_out_ded_cum,0);
         vn_vl_cont_cum_rec := nvl(vn_vl_tot_cont_cum_per_rat,0) - nvl(vn_vl_ret_cum,0) - nvl(vn_vl_out_ded_cum,0);
      end if;
      --
   end if;
   --
   vn_fase := 42;
   -- Variáveis de retorno:
   sn_vl_ret_nc           := nvl(vn_vl_ret_nc,0);
   sn_vl_out_ded_nc       := nvl(vn_vl_out_ded_nc,0);
   sn_vl_cont_nc_rec      := nvl(vn_vl_cont_nc_rec,0);
   sn_vl_tot_cont_cum_per := nvl(vn_vl_tot_cont_cum_per,0);
   sn_vl_ret_cum          := nvl(vn_vl_ret_cum,0);
   sn_vl_out_ded_cum      := nvl(vn_vl_out_ded_cum,0);
   sn_vl_cont_cum_rec     := nvl(vn_vl_cont_cum_rec,0);
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_calcula_bloco_1700 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_CALCULA_BLOCO_1700;
---------------------------------------------------------------------
--| Procedimento para calcular a consolidação do COFINS - Bloco M600
--| Serão calculados alguns campos dos blocos M600, M610 e M620
---------------------------------------------------------------------
PROCEDURE PKB_CALCULAR_CONS_COFINS_M600( EN_CONSCONTRCOFINS_ID IN CONS_CONTR_COFINS.ID%TYPE ) IS
   --
   vn_fase                      number := 0;
   vn_vl_ajus_acres             det_cons_contr_cofins.vl_ajust_acrec%type;
   vn_vl_ajus_reduc             det_cons_contr_cofins.vl_ajust_reduc%type;
   vn_vl_difer                  det_cons_contr_cofins.vl_cont_difer%type;
   vn_vl_difer_ant              det_cons_contr_cofins.vl_cont_difer_ant%type;
   vn_vl_cont_per               det_cons_contr_cofins.vl_cont_per%type;
   vn_vl_cont_apur              det_cons_contr_cofins.vl_cont_apur%type;
   vn_vl_ajus_acres_bc_cofins   det_cons_contr_cofins.vl_ajus_acres_bc_cofins%type;
   vn_vl_ajus_reduc_bc_cofins   det_cons_contr_cofins.vl_ajus_reduc_bc_cofins%type;
   vn_vl_bc_cont_ajus           det_cons_contr_cofins.vl_bc_cont_ajus%type;
   vn_vl_tot_cont_nc_per        cons_contr_cofins.vl_tot_cont_nc_per%type;
   vn_vl_tot_cred_desc          cons_contr_cofins.vl_tot_cred_desc%type;
   vn_vl_tot_cred_desc_ant      cons_contr_cofins.vl_tot_cred_desc_ant%type;
   vn_vl_totcreddescant_1500    cons_contr_cofins.vl_tot_cred_desc_ant%type;
   vn_vl_tot_cont_nc_dev        cons_contr_cofins.vl_tot_cont_nc_dev%type;
   vn_vl_ret_nc                 cons_contr_cofins.vl_ret_nc%type;
   vn_vl_out_ded_nc             cons_contr_cofins.vl_out_ded_nc%type;
   vn_vl_cont_nc_rec            cons_contr_cofins.vl_cont_nc_rec%type;
   vn_vl_tot_cont_cum_per       cons_contr_cofins.vl_tot_cont_cum_per%type;
   vn_vl_ret_cum                cons_contr_cofins.vl_ret_cum%type;
   vn_vl_out_ded_cum            cons_contr_cofins.vl_out_ded_cum%type;
   vn_vl_cont_cum_rec           cons_contr_cofins.vl_cont_cum_rec%type;
   vn_vl_tot_cont_rec           cons_contr_cofins.vl_tot_cont_rec%type;
   vn_vl_cont_nc_rec_m605       cons_contr_cofins.vl_cont_nc_rec%type;
   vn_vl_cont_cum_rec_m605      cons_contr_cofins.vl_cont_cum_rec%type;
   vn_loggenerico_id            log_generico.id%type;
   vn_valor                     cons_contr_cofins.vl_tot_cred_desc%type;
   vn_dm_ind_desc_cred_gr       apur_cred_cofins.dm_ind_desc_cred%type := 0;
   vn_vl_cred_desc_gr           number := 0;
   vn_vl_sld_cred_gr            number := 0;
   vv_zerar                     varchar2(1) := 'N';
   vv_calculou_1500             varchar2(1) := 'N';  
   vn_dia_pagto                 param_efd_contr.dia_pagto%type := null;
   vn_qtde_mes_subseq           param_efd_contr.qtde_mes_subseq%type := null;
   vn_tiporetimp_id_cof_cum     param_efd_contr.tiporetimp_id_cof_cum%type := null;
   vn_tiporetimprec_id_cof_cum  param_efd_contr.tiporetimpreceita_id_cof_cum%type := null;
   vn_tiporetimp_id_cof_nc      param_efd_contr.tiporetimp_id_cof_nc%type := null;
   vn_tiporetimprec_id_cof_nc   param_efd_contr.tiporetimpreceita_id_cof_nc%type := null;
   vn_dia                       number;
   vn_mes                       number;
   vn_ano                       number;
   vd_dt_vencto                 cons_contr_cofins_or.dt_vencto%type := null;
   --
   cursor c_per_cons_contr_cofins( en_perconscontrcofins_id in per_cons_contr_cofins.id%type ) is
      select *
        from per_cons_contr_cofins pc
       where pc.id  = en_perconscontrcofins_id;
   --
   cursor c_det_cons is -- detalhe da consolidação - bloco m600
      select dc.id detconscontrcofins_id
           , dc.contrsocapurpc_id
           , dc.vl_cont_apur
           , dc.vl_bc_cont
           , dc.vl_bc_cont_ajus
           , dc.aliq_cofins
           , dc.quant_bc_cofins
           , dc.vl_aliq_cofins_quant
        from det_cons_contr_cofins dc
       where dc.conscontrcofins_id = gt_row_cons_contr_cofins.id;
   --
   cursor c_vl_aj( en_detconscontrcofins_id in number
                 , en_ind_aj             in number ) is -- ajuste da consolidação - bloco m600
      select nvl(sum(nvl(ac.vl_aj,0)),0) vl_aj
        from ajust_contr_cofins_apur ac
       where ac.detconscontrcofins_id = en_detconscontrcofins_id
         and ac.dm_ind_aj             = en_ind_aj; -- 0-ajuste de redução, 1-ajuste de acréscimo - bloco m600
   --
   cursor c_vl_difer( en_detconscontrcofins_id in number ) is -- informações adicionais da consolidação - bloco m600
      select nvl(sum(nvl(ia.vl_cont_dif,0)),0)
        from inf_adic_dif_cofins ia
       where ia.detconscontrcofins_id = en_detconscontrcofins_id;
   --
   cursor c_vl_difer_ant( en_contrsocapurpc_id in number ) is -- contribuição diferida em períodos anteriores - bloco m700
      select nvl(sum(nvl(cp.vl_cont_difer_ant,0)),0)
        from contr_cofins_dif_per_ant cp
       where cp.empresa_id        = gt_row_per_cons_contr_cofins.empresa_id
         and cp.dt_ini      between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and cp.dt_fin      between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and cp.contrsocapurpc_id = en_contrsocapurpc_id
         and cp.dm_situacao       = 3; -- Processada
   --
   cursor c_vl_ajus_acres_bc_cofins (en_detconscontrcofins_id in number) is 
   select sum(nvl(decode(abc.dm_ind_aj_bc, 0, 0, abc.vl_aj_bc), 0)) vl_ajus_acres_bc_cofins
        , sum(nvl(decode(abc.dm_ind_aj_bc, 0, abc.vl_aj_bc, 0), 0)) vl_ajus_reduc_bc_cofins
      from AJUST_BC_CONT_COFINS abc
   where abc.detconscontrcofins_id = en_detconscontrcofins_id;   
   --
   cursor c_vl_tot_cont_per is -- detalhe da consolidação - bloco m600
      select nvl(sum(nvl(dc.vl_cont_per,0)),0)
        from det_cons_contr_cofins dc
       where dc.conscontrcofins_id = gt_row_cons_contr_cofins.id
         and ((gn_dm_cod_inc_trib in (1, 3) and -- 1-regime não-cumulativo, 3-regime cumulativo e não-cumulativo
               pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc ( dc.contrsocapurpc_id ) in ('01', '02', '03', '04', '32'))
               or
              (gn_dm_cod_inc_trib = 1 and -- 1-regime não-cumulativo
               pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc ( dc.contrsocapurpc_id ) in ('01', '02', '03', '04', '32', '71')));
   --
   cursor c_vl_tot_cred_ajuste is -- apuração do cofins - bloco m500
      select pa.id
           --, substr(tc.cd,1,1) cd_tipocredpc
           , tc.cd cd_tipocredpc
           , tc.id tipocredpc_id
           , ac.aliq_cofins
           , nvl(ac.vl_cred_disp,0) vl_cred_disp
           , nvl(ac.vl_cred_desc,0) vl_cred_desc
        from tipo_cred_pc         tc
           , apur_cred_cofins     ac
           , per_apur_cred_cofins pa
       where pa.empresa_id           = gt_row_per_cons_contr_cofins.empresa_id
         and pa.dt_ini         between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and pa.dt_fin         between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and ac.perapurcredcofins_id = pa.id
         and ac.dm_situacao          = 3 -- 3-processada
         and ac.dm_ind_cred_ori      = 0 -- Indicador de Credito Oriundo de: 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
         and tc.id                   = ac.tipocredpc_id
       order by 1,2;
   --
   cursor c_vl_tot_cred_total is -- apuração do cofins - bloco m500
      select nvl(sum(nvl(ac.vl_cred_desc,0)),0)
        from per_apur_cred_cofins pa
           , apur_cred_cofins ac
       where pa.empresa_id           = gt_row_per_cons_contr_cofins.empresa_id
         and pa.dt_ini         between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and pa.dt_fin         between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and ac.perapurcredcofins_id = pa.id
         and ac.dm_situacao          = 3; -- 3-processada
   --
   cursor c_vl_cred_desc_efd is -- controle de créditos fiscais - bloco 1500
      select nvl(sum(nvl(cc.vl_cred_desc_efd,0)),0)
        from contr_cred_fiscal_cofins cc
           , relac_apur_contr_cofins  ra
       where cc.empresa_id      = gt_row_per_cons_contr_cofins.empresa_id
         and cc.dm_situacao     = 3 -- 0-Aberto, 1-Calculada, 2-Erro no cálculo, 3-Validado, 4-Erro de validação
         and cc.dm_orig_cred    = '01' -- 01-crédito decorrente de operações próprias; 02-credito transferido por pessoa jurídica sucedida
         and ((cc.ano = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') -- ano
               and
               cc.mes < to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')) -- mes
              or
              (cc.ano < to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr'))) -- ano
         and ra.contrcredfiscalcofins_id = cc.id
         and ra.ano                      = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') -- ano
         and ra.mes                      = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm'); -- mes
   --
   cursor c_param is
      select pe.dia_pagto
           , pe.qtde_mes_subseq
           , pe.tiporetimp_id_cof_cum
           , pe.tiporetimpreceita_id_cof_cum
           , pe.tiporetimp_id_cof_nc
           , pe.tiporetimpreceita_id_cof_nc
        from param_efd_contr pe
       where pe.empresa_id = gt_row_per_cons_contr_cofins.empresa_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_conscontrcofins_id
                  , ev_obj_referencia => 'CONS_CONTR_COFINS' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'CONS_CONTR_COFINS';
   gv_mensagem_log   := 'Cálculo da consolidação do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador da consolidação = '||en_conscontrcofins_id||').';
   gn_referencia_id  := en_conscontrcofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_conscontrcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador da consolidação deve ser informado para que o cálculo seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      -- Recupera os dados da consolidação do imposto cofins utilizado como referência
      pkb_dados_cons_cofins_m600( en_conscontrcofins_id => en_conscontrcofins_id );
      gv_mensagem_log := 'Cálculo da '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      if gt_row_cons_contr_cofins.dm_situacao <> 0 then -- não estiver em aberto
         --
         vn_fase := 7;
         gv_resumo_log := 'A consolidação informada não está com situação em aberto, portanto, o cálculo não será realizado.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 8;
         --
         if nvl(gt_row_per_cons_contr_cofins.id,0) = 0 then
            --
            vn_fase := 9;
            gt_row_per_cons_contr_cofins := null;
            open c_per_cons_contr_cofins( en_perconscontrcofins_id => gt_row_cons_contr_cofins.perconscontrcofins_id );
            fetch c_per_cons_contr_cofins into gt_row_per_cons_contr_cofins;
            close c_per_cons_contr_cofins;
            --
         end if;
         --
         vn_fase := 10;
         -- Recupera os dados da empresa
         pkb_dados_abert_empr( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id
                             , ed_dt_inicial => gt_row_per_cons_contr_cofins.dt_ini
                             , ed_dt_final   => gt_row_per_cons_contr_cofins.dt_fin );
         --
         vn_fase := 11;
         --
         if nvl(gn_aberturaefdpc_id,0) <> 0 then
            --
            vn_fase := 12;
            --
            for r_reg in c_det_cons
            loop
               --
               vn_fase := 13;
               --
               open c_vl_aj( en_detconscontrcofins_id => r_reg.detconscontrcofins_id
                           , en_ind_aj                => 1); -- 0-ajuste de redução, 1-ajuste de acréscimo
               fetch c_vl_aj into vn_vl_ajus_acres;
               close c_vl_aj;
               --
               vn_fase := 14;
               --
               open c_vl_aj( en_detconscontrcofins_id => r_reg.detconscontrcofins_id
                           , en_ind_aj                => 0); -- 0-ajuste de redução, 1-ajuste de acréscimo
               fetch c_vl_aj into vn_vl_ajus_reduc;
               close c_vl_aj;
               --
               vn_fase := 15;
               --
               open c_vl_difer( en_detconscontrcofins_id => r_reg.detconscontrcofins_id );
               fetch c_vl_difer into vn_vl_difer;
               close c_vl_difer;
               --
               vn_fase := 16;
               --
               open c_vl_difer_ant( en_contrsocapurpc_id => r_reg.contrsocapurpc_id );
               fetch c_vl_difer_ant into vn_vl_difer_ant;
               close c_vl_difer_ant;
               --
               open c_vl_ajus_acres_bc_cofins( en_detconscontrcofins_id => r_reg.detconscontrcofins_id );
               fetch c_vl_ajus_acres_bc_cofins into vn_vl_ajus_acres_bc_cofins, vn_vl_ajus_reduc_bc_cofins;
               close c_vl_ajus_acres_bc_cofins;
               --
               vn_fase := 17;
               --
               vn_vl_bc_cont_ajus := (nvl(r_reg.vl_bc_cont,0) + nvl(vn_vl_ajus_acres_bc_cofins,0) - nvl(vn_vl_ajus_reduc_bc_cofins,0));
               --
               vn_fase := 18;
               --
               vn_vl_cont_apur := (nvl(vn_vl_bc_cont_ajus,0) * r_reg.aliq_cofins) /100;
               --               
               -- Caso não conseguiu montar o valor de vl_cont_apur, tenta por Quantidade na Base de Calculo e Aliquota em Reais --
               if nvl(vn_vl_cont_apur,0) = 0 then
                  --
                  vn_fase := 18.1;
                  --
                  vn_vl_cont_apur := nvl(r_reg.quant_bc_cofins,0) * nvl(r_reg.vl_aliq_cofins_quant,0);
                  --
               end if;
               --
               vn_fase := 18.2;
               --
               vn_vl_cont_per := (nvl(vn_vl_cont_apur,0) + nvl(vn_vl_ajus_acres,0) - nvl(vn_vl_ajus_reduc,0) -
                                  nvl(vn_vl_difer,0) + nvl(vn_vl_difer_ant,0));
               --
               vn_fase := 19;
               --
               begin
                  update det_cons_contr_cofins dc
                     set dc.vl_ajust_acrec          = vn_vl_ajus_acres
                       , dc.vl_ajust_reduc          = vn_vl_ajus_reduc
                       , dc.vl_cont_difer           = vn_vl_difer
                       , dc.vl_cont_difer_ant       = vn_vl_difer_ant
                       , dc.vl_cont_per             = nvl(vn_vl_cont_per,0)
                       , dc.vl_ajus_acres_bc_cofins = nvl(vn_vl_ajus_acres_bc_cofins,0)
                       , dc.vl_ajus_reduc_bc_cofins = nvl(vn_vl_ajus_reduc_bc_cofins,0)
                       , dc.vl_cont_apur            = nvl(vn_vl_cont_apur,0)
                       , dc.vl_bc_cont_ajus         = nvl(vn_vl_bc_cont_ajus,0)
                   where dc.id = r_reg.detconscontrcofins_id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar os valores do detalhe da consolidação. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
               vn_fase := 20;
               --| Atualizar número de documento e descrição de ajustes
               begin
                  update ajust_contr_cofins_apur ac
                     set ac.num_doc  = ltrim(rtrim(pk_csf.fkg_converte(ac.num_doc)))
                       , ac.descr_aj = ltrim(rtrim(pk_csf.fkg_converte(ac.descr_aj)))
                   where ac.detconscontrcofins_id = r_reg.detconscontrcofins_id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar número de documento e descrição de ajustes (contribuição). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
            end loop;
            --
            vn_fase := 21;
            --
            if gn_dm_cod_inc_trib = 2 then -- 2-Exclusivamente no regime cumulativo
               vn_vl_tot_cont_nc_per := 0;
            else
               open c_vl_tot_cont_per; -- soma detalhe da consolidação - bloco m600 -> det_cons_contr_cofins.vl_cont_per
               fetch c_vl_tot_cont_per into vn_vl_tot_cont_nc_per;
               close c_vl_tot_cont_per;
            end if;
            --
            vn_fase := 22;
            --
            if gn_dm_cod_inc_trib = 2 then -- 2-Exclusivamente no regime cumulativo
               --
               vn_fase := 22.1;
               --
               vn_vl_tot_cred_desc := 0;
               --
               begin
                  update apur_cred_cofins ac
                     set ac.vl_cred_desc     = 0 -- zerado
                       , ac.dm_ind_desc_cred = 0 -- 0-Utilização do valor total, 1-Utilização de valor parcial => p/descto da contrib. no período, Registro M600
                       , ac.vl_sld_cred      = ac.vl_cred_disp -- (vl_cred_disp - vl_cred_desc)
                   where ac.dm_ind_cred_ori       = 0 -- Indicador de Credito Oriundo de: 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
                     and ac.perapurcredcofins_id in (select pa.id
                                                       from per_apur_cred_cofins pa
                                                      where pa.empresa_id           = gt_row_per_cons_contr_cofins.empresa_id
                                                        and pa.dt_ini         between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
                                                        and pa.dt_fin         between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
                                                        and ac.perapurcredcofins_id = pa.id);
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar Bloco M500 - total de crédito descontado (zero - apuração de cofins). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                      , ev_mensagem       => gv_mensagem_log
                                                      , ev_resumo         => gv_resumo_log
                                                      , en_tipo_log       => erro_de_sistema
                                                      , en_referencia_id  => gn_referencia_id
                                                      , ev_obj_referencia => gv_obj_referencia );
               end;
               --
            elsif nvl(vn_vl_tot_cont_nc_per,0) = 0 then
                  --
                  vn_fase := 23;
                  vn_vl_tot_cred_desc := 0;
                  --
                  begin
                     update apur_cred_cofins ac
                        set ac.vl_cred_desc     = 0 -- zerado
                          , ac.dm_ind_desc_cred = 1 -- 0-Utilização do valor total, 1-Utilização de valor parcial => p/descto da contrib. no período, Registro M600
                          , ac.vl_sld_cred      = ac.vl_cred_disp -- (vl_cred_disp - vl_cred_desc)
                      where ac.dm_ind_cred_ori       = 0 -- Indicador de Credito Oriundo de: 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
                        and ac.perapurcredcofins_id in (select pa.id
                                                          from per_apur_cred_cofins pa
                                                         where pa.empresa_id           = gt_row_per_cons_contr_cofins.empresa_id
                                                           and pa.dt_ini         between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
                                                           and pa.dt_fin         between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
                                                           and ac.perapurcredcofins_id = pa.id);
                  exception
                     when others then
                        gv_resumo_log := 'Problemas ao atualizar Bloco M500 - total contribuição não-cumulativa (zero - apuração de cofins). Erro = '||sqlerrm;
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                         , ev_mensagem       => gv_mensagem_log
                                                         , ev_resumo         => gv_resumo_log
                                                         , en_tipo_log       => erro_de_sistema
                                                         , en_referencia_id  => gn_referencia_id
                                                         , ev_obj_referencia => gv_obj_referencia );
                  end;
                  --
            else
               --
               vn_fase := 24;
               --
               vv_zerar               := 'N';
               vn_dm_ind_desc_cred_gr := 1; -- 1-Utilização de valor parcial para descto da contrib. no período, Registro M600
               vn_vl_cred_desc_gr     := 0;
               vn_vl_sld_cred_gr      := 0;
               vn_valor               := nvl(vn_vl_tot_cont_nc_per,0);
               --
               vn_fase := 25;
               --
               for r_reg in c_vl_tot_cred_ajuste
               loop
                  --
                  vn_fase := 26;
                  --
                  vn_valor := (nvl(vn_valor,0) - nvl(r_reg.vl_cred_disp,0));
                  --
                  vn_fase := 27;
                  --
                  if vv_zerar = 'S' then
                     --
                     vn_fase := 27.1;
                     if nvl(r_reg.vl_cred_disp,0) = 0 then
                        vn_dm_ind_desc_cred_gr := 0; -- 0-Utilização do valor total para descto da contrib. no período, Registro M600
                     else
                        vn_dm_ind_desc_cred_gr := 1; -- 1-Utilização de valor parcial para descto da contrib. no período, Registro M600
                     end if;
                     vn_vl_cred_desc_gr     := 0;
                     vn_vl_sld_cred_gr      := nvl(r_reg.vl_cred_disp,0);
                     --
                  elsif nvl(vn_valor,0) > 0 then
                        --
                        vn_fase := 27.2;
                        vn_dm_ind_desc_cred_gr := 0; -- 0-Utilização do valor total para descto da contrib. no período, Registro M600
                        vn_vl_cred_desc_gr     := r_reg.vl_cred_disp;
                        vn_vl_sld_cred_gr      := 0;
                        --
                  elsif nvl(vn_valor,0) < 0 then
                        --
                        vn_fase := 27.3;
                        vn_dm_ind_desc_cred_gr := 1; -- 1-Utilização de valor parcial para descto da contrib. no período, Registro M600
                        vn_vl_cred_desc_gr     := (nvl(vn_valor,0) + nvl(r_reg.vl_cred_disp,0));
                        vn_vl_sld_cred_gr      := (nvl(r_reg.vl_cred_disp,0) - (nvl(vn_valor,0) + nvl(r_reg.vl_cred_disp,0)));
                        vv_zerar               := 'S';
                        --
                  elsif nvl(vn_valor,0) = 0 then
                        --
                        vn_fase := 27.4;
                        vn_dm_ind_desc_cred_gr := 0; -- 0-Utilização do valor total para descto da contrib. no período, Registro M600
                        vn_vl_cred_desc_gr     := r_reg.vl_cred_disp;
                        vn_vl_sld_cred_gr      := 0;
                        vv_zerar               := 'S';
                        --
                  end if;
                  --
                  vn_fase := 28;
                  --
                  begin
                     update apur_cred_cofins ac
                        set ac.vl_cred_desc     = vn_vl_cred_desc_gr
                          , ac.dm_ind_desc_cred = vn_dm_ind_desc_cred_gr
                          , ac.vl_sld_cred      = vn_vl_sld_cred_gr
                      where ac.perapurcredcofins_id = r_reg.id
                        and ac.tipocredpc_id        = r_reg.tipocredpc_id
                        and ac.aliq_cofins          = r_reg.aliq_cofins
                        and ac.dm_ind_cred_ori      = 0; -- Indicador de Credito Oriundo de: 0-Operações próprias, 1-Evento de incorporação, cisão ou fusão
                  exception
                     when others then
                        gv_resumo_log := 'Problemas ao atualizar Bloco M500 - valor de crédito descontado -  (apuração de cofins). Erro = '||sqlerrm;
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                         , ev_mensagem       => gv_mensagem_log
                                                         , ev_resumo         => gv_resumo_log
                                                         , en_tipo_log       => erro_de_sistema
                                                         , en_referencia_id  => gn_referencia_id
                                                         , ev_obj_referencia => gv_obj_referencia );
                  end;
                  --
               end loop;
               --
               vn_fase := 29;
               --
               open c_vl_tot_cred_total; -- soma apuração do cofins - bloco m500 -> apur_cred_cofins.vl_cred_desc
               fetch c_vl_tot_cred_total into vn_vl_tot_cred_desc;
               close c_vl_tot_cred_total;
               --
            end if;
            --
            vn_fase := 30;
            -- Excluir os registros do Bloco 1500 gerados pelos Blocos M500/M600
            pkb_exclui_bloco_1500_m500;
            --
            vn_fase := 31;
            -- Gerar os registros no Bloco 1500 dos saldos gerados nas apurações do Bloco M500
            pkb_gera_bloco_1500_m500;
            --
            vn_fase := 32;
            --
            if gn_dm_cod_inc_trib = 2 then -- 2-Exclusivamente no regime cumulativo
               vn_vl_tot_cred_desc_ant := 0;
            else
               --
               vn_fase := 32.1;
               --
               if (nvl(vn_vl_tot_cont_nc_per,0) - nvl(vn_vl_tot_cred_desc,0)) < 0 then
                  -- se o valor ficar negativo houve algum erro entre o bloco m500 e m600, e o valor de desconto anterior não será utilizado - bloco 1500
                  vn_fase := 32.2;
                  vn_vl_tot_cred_desc_ant := 0;
                  --
               elsif (nvl(vn_vl_tot_cont_nc_per,0) - nvl(vn_vl_tot_cred_desc,0)) = 0 then
                     -- se o valor zerar entre o bloco m500 e m600, o valor de desconto anterior não será utilizado - bloco 1500
                     vn_fase := 32.3;
                     vn_vl_tot_cred_desc_ant := 0;
                     --
               else -- (nvl(vn_vl_tot_cont_nc_per,0) - nvl(vn_vl_tot_cred_desc,0)) > 0 -- temos um saldo que poderá ser "abatido" pelos valores do Bloco 1500
                  --
                  vn_fase := 32.4;
                  --
                  vn_vl_totcreddescant_1500 := 0; -- Valor utilizado no registro 1500
                  --				  
                  pkb_calcula_bloco_1500( en_saldo_m600     => (nvl(vn_vl_tot_cont_nc_per,0) - nvl(vn_vl_tot_cred_desc,0) - nvl(vn_vl_tot_cred_desc_ant,0))			  
                                        , en_ver_vlr_zerado => 1				  
                                        , sn_sld_efd_1500   => vn_vl_totcreddescant_1500 );
                  --
                  vv_calculou_1500 := 'S';
                  --				  
                  vn_fase := 32.5;
                  --
                  vn_vl_tot_cred_desc_ant := 0;
                  --open c_vl_cred_desc_efd; -- soma crédito do cofins - bloco 1500 -> contr_cred_fiscal_cofins.vl_cred_desc_efd
                  --fetch c_vl_cred_desc_efd into vn_vl_tot_cred_desc_ant;
                  --close c_vl_cred_desc_efd;
                  --
                  vn_fase := 32.6;
                  --
                  --if nvl(vn_vl_tot_cred_desc_ant,0) = nvl(vn_vl_totcreddescant_1500,0) then
                     --
                     --vn_vl_tot_cred_desc_ant := nvl(vn_vl_tot_cred_desc_ant,0);
                     --
                  --else
                     --				  
                     vn_vl_tot_cred_desc_ant := nvl(vn_vl_tot_cred_desc_ant,0) + nvl(vn_vl_totcreddescant_1500,0);
                     --
                  --end if;
                  --				  
               end if;
               --
            end if;
            --
            vn_fase := 33;
            -- soma bl.m600 det_cons_contr_cofins.vl_cont_per - soma bl.m500 apur_cred_cofins.vl_cred_desc - soma bl.1500 contr_cred_fiscal_cofins.vl_cred_desc_efd
            vn_vl_tot_cont_nc_dev := (nvl(vn_vl_tot_cont_nc_per,0) - nvl(vn_vl_tot_cred_desc,0) - nvl(vn_vl_tot_cred_desc_ant,0));
            --
            vn_fase := 34;
            -- Compôr os valores Não-Cumulativos e Cumulativos devido a Geração do Bloco 1700
            pkb_calcula_bloco_1700( en_conscontrcofins_id  => gt_row_cons_contr_cofins.id
                                  , en_totcontncdev_m600   => nvl(vn_vl_tot_cont_nc_dev,0)
                                  , sn_vl_ret_nc           => vn_vl_ret_nc
                                  , sn_vl_out_ded_nc       => vn_vl_out_ded_nc
                                  , sn_vl_cont_nc_rec      => vn_vl_cont_nc_rec
                                  , sn_vl_tot_cont_cum_per => vn_vl_tot_cont_cum_per
                                  , sn_vl_ret_cum          => vn_vl_ret_cum
                                  , sn_vl_out_ded_cum      => vn_vl_out_ded_cum
                                  , sn_vl_cont_cum_rec     => vn_vl_cont_cum_rec );
            --
            vn_fase := 35;
            -- Somar os valores Digitados do bloco M605 - Contribuição para o COFINS a Recolher - Detalhamento por Código de Receita (Visão Débito DCTF)
            begin
               select nvl(sum(decode(cc.dm_num_campo,'08',nvl(cc.vl_rec,0))),0)
                    , nvl(sum(decode(cc.dm_num_campo,'12',nvl(cc.vl_rec,0))),0)
                 into vn_vl_cont_nc_rec_m605
                    , vn_vl_cont_cum_rec_m605
                 from cons_contr_cofins_or cc
                where cc.conscontrcofins_id = gt_row_cons_contr_cofins.id
                  and cc.dm_num_campo      in ('08','12') -- '08'-Valor não-cumulativo, '12'-Valor cumulativo
                  and cc.dm_origem          = 0; -- 0-Digitado, 1-Gerado no Bloco M200
            exception
               when others then
                  gv_resumo_log := 'Problemas ao somar os valores de Pagamentos - Bloco M605 (pk_apur_cofins.pkb_calcular_cons_cofins_m600). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
            vn_fase := 36;
            -- vn_vl_cont_nc_rec => ((soma bl.m600 det_cons_contr_cofins.vl_cont_per - soma bl.m500 apur_cred_cofins.vl_cred_desc -
            -- soma bl.1500 contr_cred_fiscal_cofins.vl_cred_desc_efd) - (soma bl.1700 contr_vlr_ret_fonte_cofins.vl_ret_apu + bl.f600 contr_ret_fonte_pc.vl_ret_cofins) -
            -- soma bl.f700 deducao_diversa_pc.vl_ded_cofins)
            -- vn_vl_cont_cum_rec => (soma bl.m600 det_cons_contr_cofins.vl_cont_per - (soma bl.1700 contr_vlr_ret_fonte_cofins.vl_ret_apu + bl.f600 contr_ret_fonte_pc.vl_ret_cofins) -
            -- soma bl.f700 deducao_diversa_pc.vl_ded_cofins)
            vn_vl_tot_cont_rec := (nvl(vn_vl_cont_nc_rec,0) + nvl(vn_vl_cont_cum_rec,0) + nvl(vn_vl_cont_nc_rec_m605,0) + nvl(vn_vl_cont_cum_rec_m605,0));
            --
            vn_fase := 37;
            --
            begin
               update cons_contr_cofins cc
                  set cc.dm_situacao          = 1 -- Calculado
                    , cc.vl_tot_cont_nc_per   = vn_vl_tot_cont_nc_per
                    , cc.vl_tot_cred_desc     = vn_vl_tot_cred_desc
                    , cc.vl_tot_cred_desc_ant = vn_vl_tot_cred_desc_ant
                    , cc.vl_tot_cont_nc_dev   = vn_vl_tot_cont_nc_dev
                    , cc.vl_ret_nc            = vn_vl_ret_nc
                    , cc.vl_out_ded_nc        = vn_vl_out_ded_nc
                    , cc.vl_cont_nc_rec       = (nvl(vn_vl_cont_nc_rec,0) + nvl(vn_vl_cont_nc_rec_m605,0))
                    , cc.vl_tot_cont_cum_per  = vn_vl_tot_cont_cum_per
                    , cc.vl_ret_cum           = vn_vl_ret_cum
                    , cc.vl_out_ded_cum       = vn_vl_out_ded_cum
                    , cc.vl_cont_cum_rec      = (nvl(vn_vl_cont_cum_rec,0) + nvl(vn_vl_cont_cum_rec_m605,0))
                    , cc.vl_tot_cont_rec      = vn_vl_tot_cont_rec
                where cc.id = gt_row_cons_contr_cofins.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao atualizar valores e situação da consolidação para 1(Calculado). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
            vn_fase := 38;
            --
            -- Gerar o bloco M605 - Contribuição para o COFINS a Recolher - Detalhamento por Código de Receita (Visão Débito DCTF)
            begin
               delete from cons_contr_cofins_or cc
                where cc.conscontrcofins_id = gt_row_cons_contr_cofins.id
                  and cc.dm_origem          = 1; -- 0-Digitado, 1-Gerado no Bloco M600
            exception
               when others then
                  gv_resumo_log := 'Problemas ao excluir Pagamentos - Bloco M605 (pk_apur_cofins.pkb_calcular_cons_cofins_m600). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
            vn_fase := 39;
            --
            if (nvl(vn_vl_cont_nc_rec,0) > 0) or
               (nvl(vn_vl_cont_cum_rec,0) > 0) then
               --
               vn_fase := 40;
               --
               vn_dia_pagto                := null;
               vn_qtde_mes_subseq          := null;
               vn_tiporetimp_id_cof_cum    := null;
               vn_tiporetimprec_id_cof_cum := null;
               vn_tiporetimp_id_cof_nc     := null;
               vn_tiporetimprec_id_cof_nc  := null;
               vd_dt_vencto                := null;
               --
               vn_fase := 41;
               --
               open c_param;
               fetch c_param into vn_dia_pagto
                                , vn_qtde_mes_subseq
                                , vn_tiporetimp_id_cof_cum
                                , vn_tiporetimprec_id_cof_cum
                                , vn_tiporetimp_id_cof_nc
                                , vn_tiporetimprec_id_cof_nc;
               close c_param;
               --
               vn_fase := 42;
               vn_dia := nvl(to_number(to_char(gt_row_per_cons_contr_cofins.dt_ini,'dd')),0);
               vn_mes := nvl(to_number(to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')),0);
               vn_ano := nvl(to_number(to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')),0);
               --
               loop
                  --
                  vn_fase := 43;
                  vn_mes  := vn_mes + nvl(vn_qtde_mes_subseq,0);
                  vn_qtde_mes_subseq := 0; -- usar o valor somente na primeira vez que entrar no loop
                  --
                  if vn_mes > 12 then
                     vn_mes := vn_mes - 12;
                     vn_ano := vn_ano + 1;
                  else
                     exit;
                  end if;
                  --

               end loop;
               --
               vn_fase := 44;
               --
               begin
                  select to_date((lpad(nvl(vn_dia_pagto,vn_dia),2,'0')||lpad(vn_mes,2,'0')||vn_ano),'ddmmrrrr')
                    into vd_dt_vencto
                    from dual;
               exception
                  when others then
                     gv_resumo_log := 'Verifique a data de vencimento ('||lpad(nvl(vn_dia_pagto,vn_dia),2,'0')||'/'||lpad(vn_mes,2,'0')||'/'||vn_ano||
                                      ') para pagamentos - Bloco M605 - de acordo com os parâmetros indicados. Confirme dia/mês/ano. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
               vn_fase := 45;
               --
               if vd_dt_vencto is not null then
                  --
                  vn_fase := 46;
                  --
                  if nvl(vn_vl_cont_nc_rec,0) > 0 and
                     nvl(vn_tiporetimp_id_cof_nc,0) > 0 and
                     nvl(vn_tiporetimprec_id_cof_nc,0) > 0 then
                     --
                     vn_fase := 47;
                     --
                     begin
                        insert into cons_contr_cofins_or( id
                                                        , conscontrcofins_id
                                                        , dt_vencto
                                                        , vl_rec
                                                        , tiporetimp_id
                                                        , tiporetimpreceita_id
                                                        , dm_num_campo
                                                        , dm_origem
                                                        )
                                                  values( conscontrcofinsor_seq.nextval -- id
                                                        , gt_row_cons_contr_cofins.id -- conscontrcofins_id
                                                        , vd_dt_vencto -- dt_vencto
                                                        , nvl(vn_vl_cont_nc_rec,0) -- vl_rec
                                                        , vn_tiporetimp_id_cof_nc -- tiporetimp_id
                                                        , vn_tiporetimprec_id_cof_nc -- tiporetimpreceita_id
                                                        , '08' -- dm_num_campo
                                                        , 1 -- gerado no bloco m600
                                                        );
                     exception
                        when others then
                           gv_resumo_log := 'Problemas ao incluir pagamentos - valor não-cumulativo - Bloco M605 (pk_apur_cofins.pkb_calcular_cons_cofins_m600). '||
                                            'Erro = '||sqlerrm;
                           pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                            , ev_mensagem        => gv_mensagem_log
                                                            , ev_resumo          => gv_resumo_log
                                                            , en_tipo_log        => erro_de_sistema
                                                            , en_referencia_id   => gn_referencia_id
                                                            , ev_obj_referencia  => gv_obj_referencia );
                     end;
                     --
                  end if;
                  --
                  vn_fase := 48;
                  --
                  if nvl(vn_vl_cont_cum_rec,0) > 0 and
                     nvl(vn_tiporetimp_id_cof_cum,0) > 0 and
                     nvl(vn_tiporetimprec_id_cof_cum,0) > 0 then
                     --
                     vn_fase := 49;
                     --
                     begin
                        insert into cons_contr_cofins_or( id
                                                        , conscontrcofins_id
                                                        , dt_vencto
                                                        , vl_rec
                                                        , tiporetimp_id
                                                        , tiporetimpreceita_id
                                                        , dm_num_campo
                                                        , dm_origem
                                                        )
                                                  values( conscontrcofinsor_seq.nextval -- id
                                                        , gt_row_cons_contr_cofins.id -- conscontrcofins_id
                                                        , vd_dt_vencto -- dt_vencto
                                                        , nvl(vn_vl_cont_cum_rec,0) -- vl_rec
                                                        , vn_tiporetimp_id_cof_cum -- tiporetimp_id
                                                        , vn_tiporetimprec_id_cof_cum -- tiporetimpreceita_id
                                                        , '12' -- dm_num_campo
                                                        , 1 -- gerado no bloco m600
                                                        );
                     exception
                        when others then
                           gv_resumo_log := 'Problemas ao incluir pagamentos - valor cumulativo - Bloco M605 (pk_apur_cofins.pkb_calcular_cons_cofins_m600). '||
                                            'Erro = '||sqlerrm;
                           pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                            , ev_mensagem        => gv_mensagem_log
                                                            , ev_resumo          => gv_resumo_log
                                                            , en_tipo_log        => erro_de_sistema
                                                            , en_referencia_id   => gn_referencia_id
                                                            , ev_obj_referencia  => gv_obj_referencia );
                     end;
                     --
                  end if;
                  --
               end if; -- não possui data de vencimento e identificadores de tipo de retenção
               --
            end if; -- não possui valor cumulativo ou não-cumulativo
            --
            vn_fase := 50;
            --| Atualizar descrição de detalhe de ajustes e informações complementares
            begin
               update det_ajust_contr_cofins_apur da
                  set da.descr_aj   = ltrim(rtrim(pk_csf.fkg_converte(da.descr_aj)))
                    , da.info_compl = ltrim(rtrim(pk_csf.fkg_converte(da.info_compl)))
                where da.ajustcontrcofinsapur_id in (select ac.id
                                                       from ajust_contr_cofins_apur ac
                                                          , det_cons_contr_cofins   dc
                                                      where dc.conscontrcofins_id    = gt_row_cons_contr_cofins.id
                                                        and ac.detconscontrcofins_id = dc.id);
            exception
               when others then
                  gv_resumo_log := 'Problemas ao atualizar descrição de detalhe de ajuste e informações complementares. Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                                   , ev_mensagem       => gv_mensagem_log
                                                   , ev_resumo         => gv_resumo_log
                                                   , en_tipo_log       => erro_de_sistema
                                                   , en_referencia_id  => gn_referencia_id
                                                   , ev_obj_referencia => gv_obj_referencia );
            end;
            --
         else
            --
            vn_fase := 51;
            gv_resumo_log := 'Para o período de consolidação informado não foi encontrado o mesmo período de Geração de EFD-PIS/COFINS, ou o período de '||
                             'geração está com situação: "Erro de validação", "Gerado arquivo", "Erro na geração do arquivo", "Erro de cálculo", '||
                             '"Em geração", portanto, a consolidação não será realizada. Favor atualizar a Geração de EFD-PIS/COFINS.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 52;
   --
   if nvl(vv_calculou_1500,'N') = 'N' then
      --   
      vn_vl_totcreddescant_1500 := 0;
      --	
      -- Gera registro de relacionamento para 1100 com saldo e sem movimentação no mes para o M600  
      pkb_calcula_bloco_1500( en_saldo_m600     => 0
                            , en_ver_vlr_zerado => 0				  
                            , sn_sld_efd_1500   => vn_vl_totcreddescant_1500 );
      -- 
   end if;
   --
   if gv_resumo_log is null then
      --
      vn_fase := 53;
      --
      gv_resumo_log := 'Término do processo (identificador da consolidação = '||en_conscontrcofins_id||').';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_mensagem_log
                                       , ev_resumo         => gv_resumo_log
                                       , en_tipo_log       => erro_inform_geral
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
      --
   else
      --
      vn_fase := 54;
      --
      begin
         update cons_contr_cofins cc
            set cc.dm_situacao = 2 -- Erro no Cálculo
          where cc.id = en_conscontrcofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao atualizar situação da consolidação para 2(Erro no cálculo). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => en_conscontrcofins_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
   end if;
   --
   vn_fase := 55;
   --
   commit;
   --
EXCEPTION
   when others then
      --
      begin
         update cons_contr_cofins cc
            set cc.dm_situacao = 2 -- Erro no Cálculo
          where cc.id = en_conscontrcofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao atualizar situação da consolidação para 2(Erro no cálculo). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => en_conscontrcofins_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
      commit;
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_calcular_cons_cofins_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_conscontrcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_CALCULAR_CONS_COFINS_M600;
-------------------------------------------------------------------------------------------------
--| Procedimento para calcular por período a consolidação da contribuição do COFINS - Bloco M600
--| Serão calculados alguns campos dos blocos M600, M610 e M620
-------------------------------------------------------------------------------------------------
PROCEDURE PKB_CALC_PER_CONS_COFINS_M600( EN_PERCONSCONTRCOFINS_ID IN PER_CONS_CONTR_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
   cursor c_per_cons_contr_cofins( en_perconscontrcofins_id in per_cons_contr_cofins.id%type ) is
      select *
        from per_cons_contr_cofins pc
       where pc.id  = en_perconscontrcofins_id;
   --
   cursor c_cons is
      select ac.id conscontrcofins_id
        from cons_contr_cofins ac
       where ac.perconscontrcofins_id = en_perconscontrcofins_id;
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perconscontrcofins_id
                  , ev_obj_referencia => 'PER_CONS_CONTR_COFINS' );
   --
   vn_fase := 2;
   --
   gv_mensagem_log   := 'Cálculo por período das consolidações de contribuição do imposto COFINS';
   gv_obj_referencia := 'PER_CONS_CONTR_COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perconscontrcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perconscontrcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perconscontrcofins_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período de consolidação deve ser informado para que o cálculo seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      --
      if pk_csf_efd_pc.fkg_qtde_cons_cofins( en_perconscontrcofins_id => en_perconscontrcofins_id ) = 0 then -- devem existir consolidações geradas
         vn_fase := 6;
         gv_resumo_log := 'O período de consolidação informado não possui consolidações geradas, portanto, o cálculo não será realizado.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => en_perconscontrcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 7;
         --
         gt_row_per_cons_contr_cofins := null;
         open c_per_cons_contr_cofins( en_perconscontrcofins_id => en_perconscontrcofins_id );
         fetch c_per_cons_contr_cofins into gt_row_per_cons_contr_cofins;
         close c_per_cons_contr_cofins;
         --
         vn_fase := 8;
         --
         if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id
                                                  , ed_data       => gt_row_per_cons_contr_cofins.dt_ini ) or  -- true
            pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id
                                                  , ed_data       => gt_row_per_cons_contr_cofins.dt_fin ) then -- true
            --
            vn_fase := 9;
            --
            gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gt_row_per_cons_contr_cofins.id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         else
            --
            vn_fase := 10;
            --
            for r_reg in c_cons
            loop
               --
               vn_fase := 11;
               --
               pkb_calcular_cons_cofins_m600( en_conscontrcofins_id => r_reg.conscontrcofins_id );
               --
            end loop;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   commit;
   --
   vn_fase := 13;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perconscontrcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perconscontrcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_calc_per_cons_cofins_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Calcular por período a consolidação da contribuição do COFINS'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perconscontrcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_CALC_PER_CONS_COFINS_M600;
---------------------------------------------------------------------------
--| Procedimento para validar a consolidação do COFINS - Bloco M600
--| Serão validados alguns campos dos blocos M600, M610, M611, M620 e M630
---------------------------------------------------------------------------
PROCEDURE PKB_VALIDAR_CONS_COFINS_M600( EN_CONSCONTRCOFINS_ID IN CONS_CONTR_COFINS.ID%TYPE ) IS
   --
   vn_fase                 number := 0;
   vn_loggenerico_id       log_generico.id%type := null;
   vn_valor                number := 0;
   vn_vl_tot_cred_desc     number := 0;
   vn_vl_rec               cons_contr_cofins_or.vl_rec%type;
   vn_conscontrcofinsor_id cons_contr_cofins_or.id%type;
   vn_det_valor_aj         number := 0;
   --
   cursor c_per_cons_contr_cofins( en_perconscontrcofins_id in per_cons_contr_cofins.id%type ) is
      select *
        from per_cons_contr_cofins pc
       where pc.id  = en_perconscontrcofins_id;
   --
   cursor c_det_cons is
      select dc.id detconscontrcofins_id
           , dc.contrsocapurpc_id
           , dc.vl_rec_brt
           , dc.vl_bc_cont
           , dc.vl_bc_cont_ajus
           , dc.aliq_cofins
           , dc.quant_bc_cofins
           , dc.vl_aliq_cofins_quant
           , dc.vl_cont_apur
           , dc.vl_ajust_acrec
           , dc.vl_ajust_reduc
           , dc.vl_cont_difer
           , dc.vl_cont_difer_ant
           , dc.vl_cont_per
        from det_cons_contr_cofins dc
       where dc.conscontrcofins_id = gt_row_cons_contr_cofins.id;
   --
   cursor c_vl_aj( en_detconscontrcofins_id in number
                 , en_ind_aj             in number ) is
      select nvl(sum(nvl(ac.vl_aj,0)),0) vl_aj
        from ajust_contr_cofins_apur ac
       where ac.detconscontrcofins_id = en_detconscontrcofins_id
         and ac.dm_ind_aj             = en_ind_aj; -- 0-ajuste de redução, 1-ajuste de acréscimo
   --
   cursor c_vl_difer( en_detconscontrcofins_id in number ) is
      select nvl(sum(nvl(ia.vl_cont_dif,0)),0)
        from inf_adic_dif_cofins ia
       where ia.detconscontrcofins_id = en_detconscontrcofins_id;
   --
   cursor c_vl_difer_ant( en_contrsocapurpc_id in number ) is
      select nvl(sum(nvl(cp.vl_cont_difer_ant,0)),0)
        from contr_cofins_dif_per_ant cp
       where cp.empresa_id        = gt_row_per_cons_contr_cofins.empresa_id
         and cp.dt_ini      between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and cp.dt_fin      between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and cp.contrsocapurpc_id = en_contrsocapurpc_id
         and cp.dm_situacao       = 3; -- Processada
   --
   cursor c_vl_tot_cont_per is
      select nvl(sum(nvl(dc.vl_cont_per,0)),0)
        from det_cons_contr_cofins dc
       where dc.conscontrcofins_id = gt_row_cons_contr_cofins.id
         and ((gn_dm_cod_inc_trib in (1, 3) and -- 1-regime não-cumulativo, 3-regime cumulativo e não-cumulativo
               pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc ( dc.contrsocapurpc_id ) in ('01', '02', '03', '04', '32'))
               or
              (gn_dm_cod_inc_trib = 1 and -- 1-regime não-cumulativo
               pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc ( dc.contrsocapurpc_id ) in ('01', '02', '03', '04', '32', '71')));
   --
   cursor c_cons_tot_cred is
      select nvl(sum(nvl(cc.vl_tot_cred_desc,0)),0) vl_tot_cred_desc
        from cons_contr_cofins cc
       where cc.perconscontrcofins_id = gt_row_cons_contr_cofins.perconscontrcofins_id;
   --
   cursor c_vl_tot_cred is
      select nvl(sum(nvl(ac.vl_cred_desc,0)),0)
        from per_apur_cred_cofins pa
           , apur_cred_cofins ac
       where pa.empresa_id           = gt_row_per_cons_contr_cofins.empresa_id
         and pa.dt_ini         between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and pa.dt_fin         between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and ac.perapurcredcofins_id = pa.id
         and ac.dm_situacao          = 3; -- 3-processada
   --
   cursor c_vl_cred_desc is
      select nvl(sum(nvl(ra.para_vl_cred_desc_efd,0)),0) --nvl(sum(nvl(cc.vl_cred_desc_efd,0)),0)
        from contr_cred_fiscal_cofins cc
           , relac_apur_contr_cofins  ra		
       where cc.empresa_id               = gt_row_per_cons_contr_cofins.empresa_id
         and to_date(('01'||lpad(cc.mes,2,'0')||cc.ano),'ddmmrrrr') < gt_row_per_cons_contr_cofins.dt_ini
         and cc.dm_situacao              = 3 -- Validado
         and cc.dm_orig_cred             = '01'	
         and ra.contrcredfiscalcofins_id = cc.id
         and ra.ano                      = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr') 
         and ra.mes                      = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm');
   --
   -- Controle de valores retidos da fonte - Bloco F600, mais, Controle dos valores retidos na fonte de cofins - 1700, Processo não-cumulativo
   cursor c_vl_ret_apu_nc is
   select nvl(sum(nvl(sm.vl_ret_apu,0)),0) vl_ret_apu
     from (
      select nvl(sum(nvl(cr.vl_ret_cofins,0)),0) vl_ret_apu
        from contr_ret_fonte_pc cr
       where cr.empresa_id in (select em.id empresa_id -- recuperar a matriz e as filiais
                                 from empresa em
                                start with em.id = gt_row_per_cons_contr_cofins.empresa_id
                              connect by prior em.id = em.ar_empresa_id)
         and cr.dm_st_proc     = 1 -- validada
         and cr.dm_ind_nat_rec = 0 -- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
         and cr.dt_ret between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
      union
      select nvl(sum(nvl(cv.vl_ret_ded,0)),0) vl_ret_ded
        from contr_vlr_ret_fonte_cofins cv -- dados do Bloco 1700
       where cv.empresa_id in (select em.id empresa_id -- recuperar a matriz e as filiais
                                 from empresa em
                                start with em.id = gt_row_per_cons_contr_cofins.empresa_id
                              connect by prior em.id = em.ar_empresa_id)
         and cv.dm_situacao = 3 -- validada
         and cv.dm_origem   = 0 -- digitado
         and cv.ano         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
         and cv.mes         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
         and cv.dm_ind_nat_ret in ('01','02','03','04','05','99') -- Receita de Natureza Não-Cumulativa
          ) sm;
   --
   -- Controle de valores retidos da fonte - Bloco F600, mais, Controle dos valores retidos na fonte de cofins - 1700, Processo cumulativo
   cursor c_vl_ret_apu_cum is
   select nvl(sum(nvl(sm.vl_ret_apu,0)),0) vl_ret_apu
     from (
      select nvl(sum(nvl(cr.vl_ret_cofins,0)),0) vl_ret_apu
        from contr_ret_fonte_pc cr
       where cr.empresa_id in (select em.id empresa_id -- recuperar a matriz e as filiais
                                 from empresa em
                                start with em.id = gt_row_per_cons_contr_cofins.empresa_id
                              connect by prior em.id = em.ar_empresa_id)
         and cr.dm_st_proc     = 1 -- validada
         and cr.dm_ind_nat_rec = 1 -- 0-Receita de Natureza Não-Cumulativa, 1-Receita de Natureza Cumulativa
         and cr.dt_ret between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
      union
      select nvl(sum(nvl(cv.vl_ret_ded,0)),0) vl_ret_ded
        from contr_vlr_ret_fonte_cofins cv -- dados do Bloco 1700
       where cv.empresa_id in (select em.id empresa_id -- recuperar a matriz e as filiais
                                 from empresa em
                                start with em.id = gt_row_per_cons_contr_cofins.empresa_id
                              connect by prior em.id = em.ar_empresa_id)
         and cv.dm_situacao = 3 -- validada
         and cv.dm_origem   = 0 -- digitado
         and cv.ano         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
         and cv.mes         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
         and cv.dm_ind_nat_ret in ('51','52','53','54','55','59') -- Receita de Natureza Cumulativa
          ) sm;
   --
   cursor c_vl_ded_cofins( en_ind_nat_ded in number ) is
      select nvl(sum(nvl(dd.vl_ded_cofins,0)),0)
        from deducao_diversa_pc dd
       where dd.empresa_id in (select em.id empresa_id -- recuperar a matriz e as filiais
                                 from empresa em
                                start with em.id = gt_row_per_cons_contr_cofins.empresa_id
                              connect by prior em.id = em.ar_empresa_id)
         and to_date(('01'||lpad(dd.mes_ref,2,'0')||dd.ano_ref),'ddmmrrrr') between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin
         and dd.dm_ind_nat_ded = en_ind_nat_ded -- 0-dedução de natureza não cumulativa, 1-dedução de natureza cumulativa
         and dd.dm_st_proc     = 1; -- Validada
   --
   cursor c_vl_tot_cont_cum_per is
      select nvl(sum(nvl(dc.vl_cont_per,0)),0)
        from det_cons_contr_cofins dc
       where dc.conscontrcofins_id = gt_row_cons_contr_cofins.id
         and ((gn_dm_cod_inc_trib = 2 and -- 2-regime cumulativo
               pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc ( dc.contrsocapurpc_id ) in ('31', '32'))
               or
              (gn_dm_cod_inc_trib in (2,3) and -- 2-regime cumulativo e 3-regime cumulativo e não-cumulativo
               pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc ( dc.contrsocapurpc_id ) in ('51', '52', '53', '54', '72')));
   --
   cursor c_soc_coop( en_detconscontrcofins_id in number) is
      select sc.id soccoopcompbccalccofins_id
           , sc.dm_ind_tip_coop
           , sc.vl_bc_cont_ant_exc_coop
           , sc.vl_exc_coop_ger
           , sc.vl_exc_esp_coop
           , sc.vl_bc_cont
        from soc_coop_comp_bc_calc_cofins sc
       where sc.detconscontrcofins_id = en_detconscontrcofins_id;
   --
   cursor c_ajuste( en_detconscontrcofins_id in number) is
      select ac.id
           , ac.dm_ind_aj
           , ac.vl_aj
           , ac.dt_ref
        from ajust_contr_cofins_apur ac
       where ac.detconscontrcofins_id = en_detconscontrcofins_id;
   --
   cursor c_det_aju( en_ajustcontrcofinsapur_id in number) is
      select nvl(sum(nvl(da.det_valor_aj,0)),0) det_valor_aj
        from det_ajust_contr_cofins_apur da
       where da.ajustcontrcofinsapur_id = en_ajustcontrcofinsapur_id;
   --
   cursor c_inf_adic( en_detconscontrcofins_id in number) is
      select ia.id
           , ia.vl_vend
           , ia.vl_nao_receb
           , ia.vl_cont_dif
           , ia.vl_cred_dif
        from inf_adic_dif_cofins ia
       where ia.detconscontrcofins_id = en_detconscontrcofins_id;
   --
   cursor c_pagtos_cum is
      select nvl(sum(nvl(cc.vl_rec,0)),0) vl_rec
        from cons_contr_cofins_or cc
       where cc.conscontrcofins_id = gt_row_cons_contr_cofins.id
         and cc.dm_num_campo    = '12';
   --
   cursor c_pagtos_ncum is
      select nvl(sum(nvl(cc.vl_rec,0)),0) vl_rec
        from cons_contr_cofins_or cc
       where cc.conscontrcofins_id = gt_row_cons_contr_cofins.id
         and cc.dm_num_campo    = '08';
   --
   cursor c_pagtos_numcampo is
      select cc.id conscontrcofinsor_id
        from cons_contr_cofins_or cc
       where cc.conscontrcofins_id = gt_row_cons_contr_cofins.id
         and cc.dm_num_campo  not in ('08','12');
   --
   cursor c_pagtos_origem is
      select cc.id conscontrcofinsor_id
        from cons_contr_cofins_or cc
       where cc.conscontrcofins_id = gt_row_cons_contr_cofins.id
         and cc.dm_origem     not in (0,1);
   --
   cursor c_pagtos_tpret is
      select cc.id conscontrcofinsor_id
        from cons_contr_cofins_or cc
           , tipo_ret_imp         tr
           , tipo_imposto         ti
       where cc.conscontrcofins_id = gt_row_cons_contr_cofins.id
         and tr.id                 = cc.tiporetimp_id
         and ti.id                 = tr.tipoimp_id
         and ti.cd                <> 5; -- imposto COFINS
   --
   cursor c_pagtos_tpretrec is
      select cc.id conscontrcofinsor_id
        from cons_contr_cofins_or cc
           , tipo_ret_imp_receita tr
       where cc.conscontrcofins_id = gt_row_cons_contr_cofins.id
         and tr.id                 = cc.tiporetimpreceita_id
         and tr.tiporetimp_id     <> cc.tiporetimp_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_conscontrcofins_id
                  , ev_obj_referencia => 'CONS_CONTR_COFINS' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'CONS_CONTR_COFINS';
   gv_mensagem_log   := 'Validação da consolidação do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador da consolidação = '||en_conscontrcofins_id||').';
   gn_referencia_id  := en_conscontrcofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_conscontrcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador da consolidação deve ser informado para que a validação seja efetuada.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      -- Recupera os dados da consolidação do imposto cofins utilizado como referência
      pkb_dados_cons_cofins_m600( en_conscontrcofins_id => en_conscontrcofins_id );
      gv_mensagem_log := 'Validação da '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      if gt_row_cons_contr_cofins.dm_situacao <> 1 then -- não estiver calculada
         --
         vn_fase := 7;
         gv_resumo_log := 'A consolidação informada não está com situação calculada, portanto, a validação não será realizada.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 8;
         --
         if nvl(gt_row_per_cons_contr_cofins.id,0) = 0 then
            --
            vn_fase := 9;
            gt_row_per_cons_contr_cofins := null;
            open c_per_cons_contr_cofins( en_perconscontrcofins_id => gt_row_cons_contr_cofins.perconscontrcofins_id );
            fetch c_per_cons_contr_cofins into gt_row_per_cons_contr_cofins;
            close c_per_cons_contr_cofins;
            --
         end if;
         --
         vn_fase := 10;
         --
         if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id
                                                  , ed_data       => gt_row_per_cons_contr_cofins.dt_ini ) or  -- true
            pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id
                                                  , ed_data       => gt_row_per_cons_contr_cofins.dt_fin ) then -- true
            --
            vn_fase := 11;
            --
            gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         else
            --
            vn_fase := 12;
            --| Validar os campos do Bloco M610 - Detalhe da consolidação
            for r_reg in c_det_cons
            loop
               --
               vn_fase := 13;
               --
               if nvl(r_reg.vl_rec_brt,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor da receita bruta ('||
                                   ltrim(to_char(nvl(r_reg.vl_rec_brt,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 14;
               --
               if nvl(r_reg.vl_bc_cont,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor da base de cálculo da contribuição ('||
                                   ltrim(to_char(nvl(r_reg.vl_bc_cont,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 15;
               --
               if nvl(r_reg.aliq_cofins,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor da alíquota do COFINS (em percentual) ('||
                                   ltrim(to_char(nvl(r_reg.aliq_cofins,0),'999G999G999G999G990D0000'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 16;
               --
               if nvl(r_reg.quant_bc_cofins,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor da quantidade - base de cálculo cofins ('||
                                   ltrim(to_char(nvl(r_reg.quant_bc_cofins,0),'999G999G999G999G990D000'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 17;
               --
               if nvl(r_reg.vl_aliq_cofins_quant,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor da alíquota do cofins (em reais) ('||
                                   ltrim(to_char(nvl(r_reg.vl_aliq_cofins_quant,0),'999G999G999G999G990D0000'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 18;
               --
               if nvl(r_reg.vl_cont_apur,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor total da contribuição social apurada ('||
                                   ltrim(to_char(nvl(r_reg.vl_cont_apur,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 19;
               --
               if nvl(r_reg.vl_ajust_acrec,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor total dos ajustes de acréscimo ('||
                                   ltrim(to_char(nvl(r_reg.vl_ajust_acrec,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 20;
               --
               if nvl(r_reg.vl_ajust_reduc,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor total dos ajustes de redução ('||
                                   ltrim(to_char(nvl(r_reg.vl_ajust_reduc,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 21;
               --
               if nvl(r_reg.vl_cont_difer,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor da contribuição a diferir no período ('||
                                   ltrim(to_char(nvl(r_reg.vl_cont_difer,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 22;
               --
               if nvl(r_reg.vl_cont_difer_ant,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor da contribuição diferida em períodos anteriores ('||
                                   ltrim(to_char(nvl(r_reg.vl_cont_difer_ant,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 23;
               --
               if nvl(r_reg.vl_cont_per,0) < 0 then
                  gv_resumo_log := 'No detalhe da consolidação, o valor total da contribuição do período ('||
                                   ltrim(to_char(nvl(r_reg.vl_cont_per,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 24;
               --
               if nvl(r_reg.aliq_cofins,0) <> 0 and
                  nvl(r_reg.vl_aliq_cofins_quant,0) <> 0 then
                  gv_resumo_log := 'No detalhe da consolidação, não é possível informar o valor da alíquota do cofins (em percentual) ('||
                                   ltrim(to_char(nvl(r_reg.aliq_cofins,0),'999G999G999G999G990D0000'))||') e o o valor da alíquota do cofins (em reais) ('||
                                   ltrim(to_char(nvl(r_reg.vl_aliq_cofins_quant,0),'999G999G999G999G990D0000'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 25;
               --
               if nvl(r_reg.vl_bc_cont,0) <> 0 and
                  nvl(r_reg.vl_cont_apur,0) <> round(((nvl(r_reg.vl_bc_cont_ajus,0) * nvl(r_reg.aliq_cofins,0)) / 100),2) then
                  gv_resumo_log := 'No detalhe da consolidação, o valor total da contribuição ('||
                                   ltrim(to_char(nvl(r_reg.vl_cont_apur,0),'999G999G999G999G990D00'))||') deve ser igual ao valor da base * alíquota '||                                   'em percentual ((vl_base * aliq) / 100) -> (('||ltrim(to_char(nvl(r_reg.vl_bc_cont_ajus,0),'999G999G999G999G990D00'))||' * '||
                                   ltrim(to_char(nvl(r_reg.aliq_cofins,0),'999G999G999G999G990D0000'))||') / 100).';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               elsif nvl(r_reg.quant_bc_cofins,0) <> 0 and
                     nvl(r_reg.vl_cont_apur,0) <> round((nvl(r_reg.quant_bc_cofins,0) * nvl(r_reg.vl_aliq_cofins_quant,0)),2) then
                     gv_resumo_log := 'No detalhe da consolidação, o valor total da contribuição ('||
                                      ltrim(to_char(nvl(r_reg.vl_cont_apur,0),'999G999G999G999G990D00'))||') deve ser igual ao valor da base * alíquota '||
                                      'em reais (vl_base * aliq) -> (('||ltrim(to_char(nvl(r_reg.quant_bc_cofins,0),'999G999G999G999G990D000'))||' * '||
                                      ltrim(to_char(nvl(r_reg.vl_aliq_cofins_quant,0),'999G999G999G999G990D0000'))||').';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 26;
               --
               open c_vl_aj( en_detconscontrcofins_id => r_reg.detconscontrcofins_id
                           , en_ind_aj             => 1); -- 0-ajuste de redução, 1-ajuste de acréscimo
               fetch c_vl_aj into vn_valor;
               close c_vl_aj;
               --
               vn_fase := 27;
               --
               if nvl(r_reg.vl_ajust_acrec,0) <> nvl(vn_valor,0) then
                  gv_resumo_log := 'No detalhe da consolidação, o valor total dos ajustes de acréscimo ('||
                                   ltrim(to_char(nvl(r_reg.vl_ajust_acrec,0),'999G999G999G999G990D00'))||') não pode ser diferente do '||
                                   'valor recuperado como ajuste ('||ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 28;
               --
               open c_vl_aj( en_detconscontrcofins_id => r_reg.detconscontrcofins_id
                           , en_ind_aj             => 0); -- 0-ajuste de redução, 1-ajuste de acréscimo
               fetch c_vl_aj into vn_valor;
               close c_vl_aj;
               --
               vn_fase := 29;
               --
               if nvl(r_reg.vl_ajust_reduc,0) <> nvl(vn_valor,0) then
                  gv_resumo_log := 'No detalhe da consolidação, o valor total dos ajustes de redução ('||
                                   ltrim(to_char(nvl(r_reg.vl_ajust_reduc,0),'999G999G999G999G990D00'))||') não pode ser diferente do '||
                                   'valor recuperado como ajuste ('||ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 30;
               --
               open c_vl_difer( en_detconscontrcofins_id => r_reg.detconscontrcofins_id );
               fetch c_vl_difer into vn_valor;
               close c_vl_difer;
               --
               vn_fase := 31;
               --
               if nvl(r_reg.vl_cont_difer,0) <> nvl(vn_valor,0) then
                  gv_resumo_log := 'No detalhe da consolidação, o valor da contribuição a diferir no período ('||
                                   ltrim(to_char(nvl(r_reg.vl_cont_difer,0),'999G999G999G999G990D00'))||') não pode ser diferente do '||
                                   'valor informações adicionais de diferimento ('||ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 32;
               --
               open c_vl_difer_ant( en_contrsocapurpc_id => r_reg.contrsocapurpc_id );
               fetch c_vl_difer_ant into vn_valor;
               close c_vl_difer_ant;
               --
               vn_fase := 33;
               --
               if nvl(r_reg.vl_cont_difer_ant,0) <> nvl(vn_valor,0) then
                  gv_resumo_log := 'No detalhe da consolidação, o valor da contribuição diferida em períodos anteriores ('||
                                   ltrim(to_char(nvl(r_reg.vl_cont_difer_ant,0),'999G999G999G999G990D00'))||') não pode ser diferente do valor da '||
                                   'contribuição diferida em períodos anteriores ('||ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 34;
               --
               if nvl(r_reg.vl_cont_per,0) <> (nvl(r_reg.vl_cont_apur,0) + nvl(r_reg.vl_ajust_acrec,0) - nvl(r_reg.vl_ajust_reduc,0) -
                                               nvl(r_reg.vl_cont_difer,0) + nvl(r_reg.vl_cont_difer_ant,0)) then
                  gv_resumo_log := 'No detalhe da consolidação, o valor total da contribuição do período ('||
                                   ltrim(to_char(nvl(r_reg.vl_cont_per,0),'999G999G999G999G990D00'))||') não pode ser diferente dos valores ('||
                                   'vl_cont_apur + vl_ajus_acres - vl_ajus_reduc - vl_cont_difer + vl_cont_difer_ant) -> ('||
                                   ltrim(to_char(nvl(r_reg.vl_cont_apur,0),'999G999G999G999G990D00'))||' + '||
                                   ltrim(to_char(nvl(r_reg.vl_ajust_acrec,0),'999G999G999G999G990D00'))||' - '||
                                   ltrim(to_char(nvl(r_reg.vl_ajust_reduc,0),'999G999G999G999G990D00'))||' - '||
                                   ltrim(to_char(nvl(r_reg.vl_cont_difer,0),'999G999G999G999G990D00'))||' + '||
                                   ltrim(to_char(nvl(r_reg.vl_cont_difer_ant,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 35;
               --| Validar os campos do Bloco M611 - Sociedade Cooperativa
               for r_soc in c_soc_coop( en_detconscontrcofins_id => r_reg.detconscontrcofins_id )
               loop
                  --
                  vn_fase := 36;
                  --
                  if r_soc.dm_ind_tip_coop not in ('01', '02', '03', '04', '05', '06', '99') then
                     gv_resumo_log := 'Na sociedade cooperativa, o indicador do tipo de sociedade deve ser somente: 01, 02, 03, 04, 05, 06, 99.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 37;
                  --
                  if nvl(r_soc.vl_bc_cont_ant_exc_coop,0) < 0 then
                     gv_resumo_log := 'Na sociedade cooperativa, o valor da base de cálculo da contribuição ('||
                                      ltrim(to_char(nvl(r_soc.vl_bc_cont_ant_exc_coop,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 38;
                  --
                  if nvl(r_soc.vl_exc_coop_ger,0) < 0 then
                     gv_resumo_log := 'Na sociedade cooperativa, o valor de exclusão específica das cooperativas em geral ('||
                                      ltrim(to_char(nvl(r_soc.vl_exc_coop_ger,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 39;
                  --
                  if nvl(r_soc.vl_exc_esp_coop,0) < 0 then
                     gv_resumo_log := 'Na sociedade cooperativa, o valor das exclusões da base de cálculo específica ('||
                                      ltrim(to_char(nvl(r_soc.vl_exc_esp_coop,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 40;
                  --
                  if nvl(r_soc.vl_bc_cont,0) < 0 then
                     gv_resumo_log := 'Na sociedade cooperativa, o valor da base de cálculo após as exclusões específicas ('||
                                      ltrim(to_char(nvl(r_soc.vl_bc_cont,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 41;
                  --
                  if pk_csf_efd_pc.fkg_cd_contr_soc_apur_pc( r_reg.contrsocapurpc_id ) not in ('01', '51', '02', '52', '31', '32') and
                     (nvl(r_soc.vl_bc_cont_ant_exc_coop,0) <> 0 or
                      nvl(r_soc.vl_exc_coop_ger,0) <> 0 or
                      nvl(r_soc.vl_exc_esp_coop,0) <> 0 or
                      nvl(r_soc.vl_bc_cont,0) <> 0) then
                     gv_resumo_log := 'Na sociedade cooperativa, se o código da contribuição social não for (01, 51, 02, 52, 31, 32), '||
                                      'os valores devem estar zerados.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 42;
                  --
                  if nvl(r_soc.vl_bc_cont,0) <> (nvl(r_soc.vl_bc_cont_ant_exc_coop,0) - nvl(r_soc.vl_exc_coop_ger,0) - nvl(r_soc.vl_exc_esp_coop,0)) then
                     gv_resumo_log := 'Na sociedade cooperativa, o valor da base de cálculo ('||
                                      ltrim(to_char(nvl(r_soc.vl_bc_cont,0),'999G999G999G999G990D00'))||') deve ser igual ao cálculo: (vl_bc_cont_ant_exc_coop - '||
                                      'vl_exc_coop_ger - vl_exc_esp_coop) -> ('||ltrim(to_char(nvl(r_soc.vl_bc_cont_ant_exc_coop,0),'999G999G999G999G990D00'))||
                                      ' - '||ltrim(to_char(nvl(r_soc.vl_exc_coop_ger,0),'999G999G999G999G990D00'))||' - '||
                                      ltrim(to_char(nvl(r_soc.vl_exc_esp_coop,0),'999G999G999G999G990D00'))||').';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
               end loop;
               --
               vn_fase := 43;
               --| Validar os campos do Bloco M620 - Ajustes da contribuição
               for r_aju in c_ajuste( en_detconscontrcofins_id => r_reg.detconscontrcofins_id )
               loop
                  --
                  vn_fase := 44;
                  --
                  if r_aju.dm_ind_aj not in (0,1) then
                     gv_resumo_log := 'No ajuste de apuração, o indicador do tipo de ajuste deve ser: 0-Ajuste de redução ou 1-Ajuste de acréscimo.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 45;
                  --
                  if nvl(r_aju.vl_aj,0) < 0 then
                     gv_resumo_log := 'No ajuste de apuração, o valor do ajuste ('||
                                      ltrim(to_char(nvl(r_aju.vl_aj,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 46;
                  --
                  if r_aju.dt_ref is not null and
                     r_aju.dt_ref not between gt_row_per_cons_contr_cofins.dt_ini and gt_row_per_cons_contr_cofins.dt_fin then
                     gv_resumo_log := 'No ajuste de apuração, a data de referência ('||to_char(r_aju.dt_ref,'ddmmrrrr')||
                                      ') deve estar dentro do período de apuração (de: '||to_char(gt_row_per_cons_contr_cofins.dt_ini,'ddmmrrrr')||
                                      ' até: '||to_char(gt_row_per_cons_contr_cofins.dt_fin,'ddmmrrrr')||').';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 47;
                  --
                  open c_det_aju( en_ajustcontrcofinsapur_id => r_aju.id);
                  fetch c_det_aju into vn_det_valor_aj;
                  close c_det_aju;
                  --
                  vn_fase := 48;
                  --
                  if nvl(r_aju.vl_aj,0) <> nvl(vn_det_valor_aj,0) then
                     gv_resumo_log := 'O valor do ajuste ('||ltrim(to_char(nvl(r_aju.vl_aj,0),'999G999G999G999G990D00'))||'), não pode ser diferente da soma '||
                                      'dos valores do detalhamento dos ajustes ('||ltrim(to_char(nvl(vn_det_valor_aj,0),'999G999G999G999G990D00'))||').';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
               end loop;
               --
               vn_fase := 49;
               --| Validar os campos do Bloco M630 - Informações adicionais de diferimento
               for r_inf in c_inf_adic( en_detconscontrcofins_id => r_reg.detconscontrcofins_id )
               loop
                  --
                  vn_fase := 50;
                  --
                  if nvl(r_inf.vl_vend,0) < 0 then
                     gv_resumo_log := 'Nas informações adicionais, o valor total das vendas ('||
                                      ltrim(to_char(nvl(r_inf.vl_vend,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 51;
                  --
                  if nvl(r_inf.vl_nao_receb,0) < 0 then
                     gv_resumo_log := 'Nas informações adicionais, o valor total não recebido ('||
                                      ltrim(to_char(nvl(r_inf.vl_nao_receb,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 52;
                  --
                  if nvl(r_inf.vl_cont_dif,0) < 0 then
                     gv_resumo_log := 'Nas informações adicionais, o valor da contribuição diferida ('||
                                      ltrim(to_char(nvl(r_inf.vl_cont_dif,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
                  vn_fase := 53;
                  --
                  if nvl(r_inf.vl_cred_dif,0) < 0 then
                     gv_resumo_log := 'Nas informações adicionais, o valor do crédito diferido ('||
                                      ltrim(to_char(nvl(r_inf.vl_cred_dif,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
                     pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                     , ev_mensagem        => gv_mensagem_log
                                                     , ev_resumo          => gv_resumo_log
                                                     , en_tipo_log        => erro_de_validacao
                                                     , en_referencia_id   => gn_referencia_id
                                                     , ev_obj_referencia  => gv_obj_referencia );
                  end if;
                  --
               end loop;
               --
            end loop;
            --
            vn_fase := 54;
            --| Validar os campos do Bloco M600 - Consolidação
            if nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_per,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor total da contribuição não cumulativa do período ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_per,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 55;
            --
            if nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor do crédito descontado, apurado no próprio período da escrituração ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 56;
            --
            if nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc_ant,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor do crédito descontado, apurado em período de apuração anterior ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc_ant,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 57;
            --
            if nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_dev,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor total da contribuição não cumulativa devida ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_dev,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 58;
            --
            if nvl(gt_row_cons_contr_cofins.vl_ret_nc,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor retido na fonte deduzido no período ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_ret_nc,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 59;
            --
            if nvl(gt_row_cons_contr_cofins.vl_out_ded_nc,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor outras deduções no período ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_out_ded_nc,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 60;
            --
            if nvl(gt_row_cons_contr_cofins.vl_cont_nc_rec,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor da contribuição não cumulativa a recolher/pagar ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_cont_nc_rec,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 61;
            --
            if nvl(gt_row_cons_contr_cofins.vl_tot_cont_cum_per,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor total da contribuição cumulativa do período ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_cum_per,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 62;
            --
            if nvl(gt_row_cons_contr_cofins.vl_ret_cum,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor retido na fonte deduzido no período ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_ret_cum,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 63;
            --
            if nvl(gt_row_cons_contr_cofins.vl_out_ded_cum,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor de outras deduções no período ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_out_ded_cum,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 64;
            --
            if nvl(gt_row_cons_contr_cofins.vl_cont_cum_rec,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor da contribuição cumulativa a recolher/pagar ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_cont_cum_rec,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 65;
            --
            if nvl(gt_row_cons_contr_cofins.vl_tot_cont_rec,0) < 0 then
               gv_resumo_log := 'Na consolidação, o valor total da contribuição a recolher/pagar no período ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_rec,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 66;
            --
            if gn_dm_cod_inc_trib = 2 then -- 2-Exclusivamente no regime cumulativo
               --
               vn_fase := 67;
               --
               if nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_per,0) <> 0 then
                  gv_resumo_log := 'Na consolidação com regime cumulativo, o valor total da contribuição não cumulativa do período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_per,0),'999G999G999G999G990D00'))||') deve estar zerado.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 68;
               --
               if nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc,0) <> 0 then
                  gv_resumo_log := 'Na consolidação com regime cumulativo, o valor do crédito descontado, apurado no próprio período da escrituração ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc,0),'999G999G999G999G990D00'))||') deve estar zerado.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 69;
               --
               if nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc_ant,0) <> 0 then
                  gv_resumo_log := 'Na consolidação com regime cumulativo, o valor do crédito descontado, apurado em período de apuração anterior ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc_ant,0),'999G999G999G999G990D00'))||') deve estar zerado.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 70;
               --
               if nvl(gt_row_cons_contr_cofins.vl_ret_nc,0) <> 0 then
                  gv_resumo_log := 'Na consolidação com regime cumulativo, o valor retido na fonte deduzido no período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_ret_nc,0),'999G999G999G999G990D00'))||') deve estar zerado.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 71;
               --
               if nvl(gt_row_cons_contr_cofins.vl_out_ded_nc,0) <> 0 then
                  gv_resumo_log := 'Na consolidação com regime cumulativo, o valor outras deduções no período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_out_ded_nc,0),'999G999G999G999G990D00'))||') deve estar zerado.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 72;
               --
               if nvl(gt_row_cons_contr_cofins.vl_cont_nc_rec,0) <> 0 then
                  gv_resumo_log := 'Na consolidação com regime cumulativo, o valor da contribuição não cumulativa a recolher/pagar ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_cont_nc_rec,0),'999G999G999G999G990D00'))||') deve estar zerado.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
            end if;
            --
            vn_fase := 73;
            --
            if gn_dm_cod_inc_trib = 1 then -- 1-Exclusivamente no regime não-cumulativo
               --
               vn_fase := 74;
               --
               if nvl(gt_row_cons_contr_cofins.vl_tot_cont_cum_per,0) <> 0 then
                  gv_resumo_log := 'Na consolidação com regime não-cumulativo, o valor total da contribuição cumulativa do período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_cum_per,0),'999G999G999G999G990D00'))||') deve estar zerado.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 75;
               --
               if nvl(gt_row_cons_contr_cofins.vl_ret_cum,0) <> 0 then
                  gv_resumo_log := 'Na consolidação com regime não-cumulativo, o valor retido na fonte deduzido no período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_ret_cum,0),'999G999G999G999G990D00'))||') deve estar zerado.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 76;
               --
               if nvl(gt_row_cons_contr_cofins.vl_out_ded_cum,0) <> 0 then
                  gv_resumo_log := 'Na consolidação com regime não-cumulativo, o valor de outras deduções no período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_out_ded_cum,0),'999G999G999G999G990D00'))||') deve estar zerado.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
            end if;
            --
            vn_fase := 77;
            --
            if gn_dm_cod_inc_trib <> 2 then -- 2-Exclusivamente no regime cumulativo
               --
               vn_fase := 78;
               --
               open c_vl_tot_cont_per;
               fetch c_vl_tot_cont_per into vn_valor;
               close c_vl_tot_cont_per;
               --
               vn_fase := 79;
               --
               if nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_per,0) <> nvl(vn_valor,0) then
                  gv_resumo_log := 'Na consolidação com regime diferente de cumulativo, o valor total da contribuição não cumulativa do período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_per,0),'999G999G999G999G990D00'))||
                                   ') não pode ser diferente da soma do valor de contribuição no período do detalhe da consolidação ('||
                                   ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 80;
               --
               open c_vl_cred_desc;
               fetch c_vl_cred_desc into vn_valor;
               close c_vl_cred_desc;
               --
               vn_fase := 81;
               --
               if nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc_ant,0) > nvl(vn_valor,0) then
                  gv_resumo_log := 'Na consolidação com regime diferente de cumulativo, o valor do crédito descontado, apurado em período de '||
                                   'apuração anterior ('||ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc_ant,0),'999G999G999G999G990D00'))||
                                   ') não pode ser maior do que soma do valor de crédito descontado do EFD ('||
                                   ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 82;
               --
               if (nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc,0) + nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc_ant,0)) > nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_per,0) then
                  gv_resumo_log := 'Na consolidação com regime diferente de cumulativo, a soma do valor do crédito descontado, apurado no próprio período da '||
                                   'escrituração ('||ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc,0),'999G999G999G999G990D00'))||') mais o valor '||
                                   'do crédito descontado, apurado em período de apuração anterior ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc_ant,0),'999G999G999G999G990D00'))||'), não pode ser maior que o '||
                                   'valor total da contribuição não cumulativa do período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_per,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
            end if;
            --
            vn_fase := 83;
            --
            if nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_dev,0) <> (nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_per,0) - nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc,0) - nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc_ant,0)) then
               gv_resumo_log := 'Na consolidação, o valor total da contribuição não cumulativa devida ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_dev,0),'999G999G999G999G990D00'))||') deve ser igual ao cálculo: '||
                                '(vl_tot_cont_nc_per - vl_tot_cred_desc - vl_tot_cred_desc_ant) -> ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_per,0),'999G999G999G999G990D00'))||' - '||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc,0),'999G999G999G999G990D00'))||' - '||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cred_desc_ant,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 84;
            --
            if gn_dm_cod_inc_trib <> 2 then -- 2-Exclusivamente no regime cumulativo
               --
               vn_fase := 85;
               --
               open c_vl_ret_apu_nc;
               fetch c_vl_ret_apu_nc into vn_valor;
               close c_vl_ret_apu_nc;
               --
               vn_fase := 86;
               --
               if nvl(gt_row_cons_contr_cofins.vl_ret_nc,0) > nvl(vn_valor,0) then
                  gv_resumo_log := 'Na consolidação com regime diferente de cumulativo, o valor retido na fonte deduzido no período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_ret_nc,0),'999G999G999G999G990D00'))||') não pode ser maior do que a somatória '||
                                   'dos valores da contribuição retida na fonte (bloco F600), ('||ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 87;
               --
               open c_vl_ded_cofins( en_ind_nat_ded => 0 ); -- 0-dedução de natureza não cumulativa, 1-dedução de natureza cumulativa
               fetch c_vl_ded_cofins into vn_valor;
               close c_vl_ded_cofins;
               --
               vn_fase := 88;
               --
               if nvl(gt_row_cons_contr_cofins.vl_out_ded_nc,0) > nvl(vn_valor,0) then
                  gv_resumo_log := 'Na consolidação com regime diferente de cumulativo, o valor de outras deduções no período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_out_ded_nc,0),'999G999G999G999G990D00'))||') não pode ser maior do que a soma '||
                                   'do valor de deduções diversas ('||ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 89;
               --
               if nvl(gt_row_cons_contr_cofins.vl_cont_nc_rec,0) <> (nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_dev,0) - nvl(gt_row_cons_contr_cofins.vl_ret_nc,0) - nvl(gt_row_cons_contr_cofins.vl_out_ded_nc,0)) then
                  gv_resumo_log := 'Na consolidação com regime diferente de cumulativo, o valor da contribuição não cumulativa a recolher/pagar ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_cont_nc_rec,0),'999G999G999G999G990D00'))||') deve ser igual ao cálculo: '||
                                   '(vl_tot_cont_nc_dev - vl_ret_nc - vl_out_ded_nc) -> ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_nc_dev,0),'999G999G999G999G990D00'))||' - '||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_ret_nc,0),'999G999G999G999G990D00'))||' - '||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_out_ded_nc,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
            end if;
            --
            vn_fase := 90;
            --
            if gn_dm_cod_inc_trib <> 1 then -- 1-Exclusivamente no regime não-cumulativo
               --
               vn_fase := 91;
               --
               open c_vl_tot_cont_cum_per;
               fetch c_vl_tot_cont_cum_per into vn_valor;
               close c_vl_tot_cont_cum_per;
               --
               vn_fase := 92;
               --
               if nvl(gt_row_cons_contr_cofins.vl_tot_cont_cum_per,0) <> nvl(vn_valor,0) then
                  gv_resumo_log := 'Na consolidação com regime diferente de não-cumulativo, o valor total da contribuição cumulativa do período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_cum_per,0),'999G999G999G999G990D00'))||') deve ser igual a soma do '||
                                   'valor de contribuição no período dos detalhes da consolidação ('||ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 93;
               --
               open c_vl_ret_apu_cum;
               fetch c_vl_ret_apu_cum into vn_valor;
               close c_vl_ret_apu_cum;
               --
               vn_fase := 94;
               --
               if nvl(gt_row_cons_contr_cofins.vl_ret_cum,0) > nvl(vn_valor,0) then
                  gv_resumo_log := 'Na consolidação com regime diferente de não-cumulativo, o valor retido na fonte deduzido no período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_ret_cum,0),'999G999G999G999G990D00'))||') não deve ser maior que a somatória '||
                                   'dos valores da contribuição retida na fonte (bloco F600), ('||ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 95;
               --
               open c_vl_ded_cofins( en_ind_nat_ded => 1 ); -- 0-dedução de natureza não cumulativa, 1-dedução de natureza cumulativa
               fetch c_vl_ded_cofins into vn_valor;
               close c_vl_ded_cofins;
               --
               vn_fase := 96;
               --
               if nvl(gt_row_cons_contr_cofins.vl_out_ded_cum,0) > nvl(vn_valor,0) then
                  gv_resumo_log := 'Na consolidação com regime diferente de não-cumulativo, o valor de outras deduções no período ('||
                                   ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_out_ded_cum,0),'999G999G999G999G990D00'))||') não deve ser maior que o valor '||
                                   'das deduções diversas de natureza cumulativa ('||ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
            end if;
            --
            vn_fase := 97;
            --
            if nvl(gt_row_cons_contr_cofins.vl_cont_cum_rec,0) <> (nvl(gt_row_cons_contr_cofins.vl_tot_cont_cum_per,0) - nvl(gt_row_cons_contr_cofins.vl_ret_cum,0) - nvl(gt_row_cons_contr_cofins.vl_out_ded_cum,0)) then
               gv_resumo_log := 'Na consolidação, o valor da contribuição cumulativa a recolher/pagar ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_cont_cum_rec,0),'999G999G999G999G990D00'))||') deve ser igual ao cálculo: '||
                                '(vl_tot_cont_cum_per - vl_ret_cum - vl_out_ded_cum) -> ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_cum_per,0),'999G999G999G999G990D00'))||' - '||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_ret_cum,0),'999G999G999G999G990D00'))||' - '||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_out_ded_cum,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 98;
            --
            if nvl(gt_row_cons_contr_cofins.vl_tot_cont_rec,0) <> (nvl(gt_row_cons_contr_cofins.vl_cont_nc_rec,0) + nvl(gt_row_cons_contr_cofins.vl_cont_cum_rec,0)) then
               gv_resumo_log := 'Na consolidação, o valor total da contribuição a recolher/pagar no período ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_tot_cont_rec,0),'999G999G999G999G990D00'))||') deve ser igual ao cálculo: '||
                                '(vl_cont_nc_rec + vl_cont_cum_rec) -> ('||ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_cont_nc_rec,0),'999G999G999G999G990D00'))||' + '||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_cont_cum_rec,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 99;
            --
            open c_cons_tot_cred;
            fetch c_cons_tot_cred into vn_vl_tot_cred_desc;
            close c_cons_tot_cred;
            --
            vn_fase := 100;
            --
            open c_vl_tot_cred;
            fetch c_vl_tot_cred into vn_valor;
            close c_vl_tot_cred;
            --
            vn_fase := 101;
            --
            if nvl(vn_vl_tot_cred_desc,0) <> nvl(vn_valor,0) then
               gv_resumo_log := 'Na consolidação com regime diferente de cumulativo, a soma dos valores do crédito descontado, apurado no próprio '||
                                'período da escrituração ('||ltrim(to_char(nvl(vn_vl_tot_cred_desc,0),'999G999G999G999G990D00'))||
                                ') não pode ser diferente da soma do valor de crédito da apuração ('||
                                ltrim(to_char(nvl(vn_valor,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 102;
            --
            open c_pagtos_cum;
            fetch c_pagtos_cum into vn_vl_rec;
            close c_pagtos_cum;
            --
            vn_fase := 103;
            --
            if nvl(vn_vl_rec,0) <> nvl(gt_row_cons_contr_cofins.vl_cont_cum_rec,0) then
               gv_resumo_log := 'A soma dos valores informado em "Pagamentos" de destino Cumulativo('||ltrim(to_char(nvl(vn_vl_rec,0),'999G999G999G999G990D00'))||
                                '), não confere com os valores informados para contribuição cumulativa ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_cont_cum_rec,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 104;
            --
            open c_pagtos_ncum;
            fetch c_pagtos_ncum into vn_vl_rec;
            close c_pagtos_ncum;
            --
            vn_fase := 105;
            --
            if nvl(vn_vl_rec,0) <> nvl(gt_row_cons_contr_cofins.vl_cont_nc_rec,0) then
               gv_resumo_log := 'A soma dos valores informado em "Pagamentos" de destino Não-Cumulativo('||ltrim(to_char(nvl(vn_vl_rec,0),'999G999G999G999G990D00'))||
                                '), não confere com os valores informados para contribuição não-cumulativa ('||
                                ltrim(to_char(nvl(gt_row_cons_contr_cofins.vl_cont_nc_rec,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 106;
            --
            vn_conscontrcofinsor_id := 0;
            open c_pagtos_numcampo;
            fetch c_pagtos_numcampo into vn_conscontrcofinsor_id;
            close c_pagtos_numcampo;
            --
            vn_fase := 107;
            --
            if nvl(vn_conscontrcofinsor_id,0) <> 0 then
               gv_resumo_log := 'Existe(m) "Referente ao Campo" informado(s) em "Pagamentos" incorreto. Deve ser "08-Valor Não-Cumulativo" ou "12-Valor Cumulativo".';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 108;
            --
            vn_conscontrcofinsor_id := 0;
            open c_pagtos_origem;
            fetch c_pagtos_origem into vn_conscontrcofinsor_id;
            close c_pagtos_origem;
            --
            vn_fase := 109;
            --
            if nvl(vn_conscontrcofinsor_id,0) <> 0 then
               gv_resumo_log := 'Existe(m) "Origem" informado(s) em "Pagamentos" incorreto. Deve ser "0-Digitado" ou "1-Gerado no Bloco M600".';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 110;
            --
            vn_conscontrcofinsor_id := 0;
            open c_pagtos_tpret;
            fetch c_pagtos_tpret into vn_conscontrcofinsor_id;
            close c_pagtos_tpret;
            --
            vn_fase := 111;
            --
            if nvl(vn_conscontrcofinsor_id,0) <> 0 then
               gv_resumo_log := 'Existe(m) tipo(s) de retenção(ões) informado(s) em "Pagamentos" que não está(ão) relacionado(s) com o tipo de Imposto COFINS.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 112;
            --
            vn_conscontrcofinsor_id := 0;
            open c_pagtos_tpretrec;
            fetch c_pagtos_tpretrec into vn_conscontrcofinsor_id;
            close c_pagtos_tpretrec;
            --
            vn_fase := 113;
            --
            if nvl(vn_conscontrcofinsor_id,0) <> 0 then
               gv_resumo_log := 'Existe(m) tipo(s) de retenção(ões) de receita informado(s) em "Pagamentos" que não está(ão) relacionado(s) com o tipo de retenção.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 114;
            --
            if gv_resumo_log is null then
               --
      	       vn_fase := 115;
               --| Atualizar número do documento e descrição do ajuste - Bloco M620
               begin
                  update ajust_contr_cofins_apur ac
                     set ac.num_doc  = ltrim(rtrim(pk_csf.fkg_converte(ac.num_doc)))
                       , ac.descr_aj = ltrim(rtrim(pk_csf.fkg_converte(ac.descr_aj)))
                   where ac.detconscontrcofins_id in (select dc.id
                                                        from det_cons_contr_cofins dc
                                                       where dc.conscontrcofins_id = en_conscontrcofins_id);
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar número do documento e descrição do ajuste - Bloco M220. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
            end if;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 116;
   --
   if gv_resumo_log is null then
      --
      vn_fase := 117;
      --| Atualizar a situação do Bloco M600
      begin
         update cons_contr_cofins cc
            set cc.dm_situacao = 3 -- Processada
          where cc.id = en_conscontrcofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao atualizar a situação do Bloco M600 para 3(Processada). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
   else
      --
      vn_fase := 118;
      --| Atualizar a situação do Bloco M600
      begin
         update cons_contr_cofins cc
            set cc.dm_situacao = 4 -- Erro de validação
          where cc.id = en_conscontrcofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao atualizar a situação do Bloco M600 para 4(Erro de validação). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
   end if;
   --
   vn_fase := 119;
   --
   commit;
   --
   vn_fase := 120;
   --
   gv_resumo_log := 'Término do processo (identificador da consolidação = '||en_conscontrcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      begin
         update cons_contr_cofins cc
            set cc.dm_situacao = 4 -- Erro de validação
          where cc.id = en_conscontrcofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas (geral) ao atualizar a situação da consolidação para 4(Erro de validação). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => en_conscontrcofins_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
      commit;
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_validar_cons_cofins_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_conscontrcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_VALIDAR_CONS_COFINS_M600;
--------------------------------------------------------------------------------
--| Procedimento para validar por período a consolidação do COFINS - Bloco M600
--| Serão validados alguns campos dos blocos M600, M610 e M620
--------------------------------------------------------------------------------
PROCEDURE PKB_VAL_PER_CONS_COFINS_M600( EN_PERCONSCONTRCOFINS_ID IN PER_CONS_CONTR_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
   cursor c_per_cons_contr_cofins( en_perconscontrcofins_id in per_cons_contr_cofins.id%type ) is
      select *
        from per_cons_contr_cofins pc
       where pc.id = en_perconscontrcofins_id;
   --
   cursor c_cons is
      select cc.id conscontrcofins_id
        from cons_contr_cofins cc
       where cc.perconscontrcofins_id = en_perconscontrcofins_id;
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perconscontrcofins_id
                  , ev_obj_referencia => 'PER_CONS_CONTR_COFINS' );
   --
   vn_fase := 2;
   --
   gv_mensagem_log   := 'Validação por período das consolidações de contribuição do imposto COFINS';
   gv_obj_referencia := 'PER_CONS_CONTR_COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perconscontrcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perconscontrcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perconscontrcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período de consolidação deve ser informado para que a validação seja efetuada.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      --
      if pk_csf_efd_pc.fkg_qtde_cons_cofins( en_perconscontrcofins_id => en_perconscontrcofins_id ) = 0 then -- devem existir consolidações geradas
         --
         vn_fase := 6;
         gv_resumo_log := 'O período de consolidação informado não possui consolidações geradas, portanto, a validação não será realizada.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => en_perconscontrcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 7;
         --
         gt_row_per_cons_contr_cofins := null;
         open c_per_cons_contr_cofins( en_perconscontrcofins_id => en_perconscontrcofins_id );
         fetch c_per_cons_contr_cofins into gt_row_per_cons_contr_cofins;
         close c_per_cons_contr_cofins;
         --
         vn_fase := 8;
         --
         if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id
                                                  , ed_data       => gt_row_per_cons_contr_cofins.dt_ini ) or  -- true
            pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id
                                                  , ed_data       => gt_row_per_cons_contr_cofins.dt_fin ) then -- true
            --
            vn_fase := 9;
            --
            gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gt_row_per_cons_contr_cofins.id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         else
            --
            vn_fase := 10;
            --
            for r_reg in c_cons
            loop
               --
               vn_fase := 11;
               --
               pkb_validar_cons_cofins_m600( en_conscontrcofins_id => r_reg.conscontrcofins_id );
               --
            end loop;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   commit;
   --
   vn_fase := 13;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perconscontrcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perconscontrcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_val_per_cons_cofins_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Validar por período a consolidação da contribuição do COFINS'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perconscontrcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_VAL_PER_CONS_COFINS_M600;
-------------------------------------------------------------------------
--| Procedimento para desprocessar a consolidação do COFINS - Bloco M600
-------------------------------------------------------------------------
PROCEDURE PKB_DESPROC_CONS_COFINS_M600 ( EN_CONSCONTRCOFINS_ID IN CONS_CONTR_COFINS.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico.id%type;
   vn_empresa_id      per_cons_contr_cofins.empresa_id%type;
   vd_dt_ini          per_cons_contr_cofins.dt_ini%type;
   vd_dt_fin          per_cons_contr_cofins.dt_fin%type;
   --
   cursor c_relac( en_empresa_id in number
                 , ed_dt_ini     in date ) is
      select ra.id relacapurcontrcofins_id
           , ra.contrcredfiscalcofins_id
           , ra.ano
           , ra.mes
           , ra.de_vl_sld_cred_fim
           , ra.de_vl_cred_desc_efd
           , ra.de_vl_sd_cred_disp_efd
           , ra.de_vl_cred_desc_pa_ant
        from relac_apur_contr_cofins ra
       where ra.contrcredfiscalcofins_id in (select cc.id
                                               from contr_cred_fiscal_cofins cc
                                              where cc.empresa_id = en_empresa_id)
         and (ra.ano||lpad(ra.mes,2,'0')) = to_char(ed_dt_ini,'rrrrmm')
       order by (ra.ano||lpad(ra.mes,2,'0')) desc
           , ra.id desc;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_conscontrcofins_id
                  , ev_obj_referencia => 'CONS_CONTR_COFINS' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'CONS_CONTR_COFINS';
   gv_mensagem_log   := 'Desprocesso da consolidação do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador da consolidação = '||en_conscontrcofins_id||').';
   gn_referencia_id  := en_conscontrcofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_conscontrcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador da consolidação deve ser informado para que o desprocessamento seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => gn_referencia_id
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      -- Recupera os dados da consolidação do imposto cofins utilizado como referência
      pkb_dados_cons_cofins_m600( en_conscontrcofins_id => en_conscontrcofins_id );
      gv_mensagem_log := 'Desprocessar a '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      begin
         select pc.empresa_id
              , pc.dt_ini
              , pc.dt_fin
           into vn_empresa_id
              , vd_dt_ini
              , vd_dt_fin
           from per_cons_contr_cofins pc
          where pc.id = gt_row_cons_contr_cofins.perconscontrcofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao recuperar dados do período da consolidação da contribuição da cofins - bloco m600 - desprocessar. Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
      vn_fase := 7;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                               , ed_data       => vd_dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                               , ed_data       => vd_dt_fin ) then -- true
         --
         vn_fase := 8;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 9;
         -- Se o DM_SITUACAO = 0 "Em Aberto", manter situação = 0 "Em Aberto"
         if gt_row_cons_contr_cofins.dm_situacao in (0) then
            --
            vn_fase := 10;
            --
            begin
               delete from contr_vlr_ret_fonte_cofins cv
                where cv.empresa_id  = vn_empresa_id
                  and cv.ano         = to_char(vd_dt_ini,'rrrr')
                  and cv.mes         = to_char(vd_dt_ini,'mm')
                  and cv.per_rec_ret = to_char(vd_dt_ini,'mmrrrr')
                  and cv.dm_origem   = 1; -- 0-digitado, 1-gerado no bloco m600
            exception
               when others then
                  gv_resumo_log := 'Problemas ao excluir valor de retenção apurada e deduzida - Bloco 1700 (pk_apur_cofins.'||
                                   'pkb_desproc_cons_cofins_m600) - Situação anterior 0-Em Aberto. Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
            vn_fase := 11;
            --
            begin
               delete from cons_contr_cofins_or cc
                where cc.conscontrcofins_id = gt_row_cons_contr_cofins.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao excluir Pagamentos - Bloco M605 (pk_apur_cofins.pkb_desproc_cons_cofins_m600) - '||
                                   'Situação anterior 0-Em Aberto. Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
            vn_fase := 12;
            --
            begin
               delete from det_cons_contr_cofins dc
                where dc.conscontrcofins_id = gt_row_cons_contr_cofins.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao excluir detalhes da consolidação - Situação anterior 0-Em Aberto. Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
            vn_fase := 13;
            --
            begin
               update cons_contr_cofins cc
                  set cc.dm_situacao          = 0 -- Aberto
                    , cc.vl_tot_cont_nc_per   = 0
                    , cc.vl_tot_cred_desc     = 0
                    , cc.vl_tot_cred_desc_ant = 0
                    , cc.vl_tot_cont_nc_dev   = 0
                    , cc.vl_ret_nc            = 0
                    , cc.vl_out_ded_nc        = 0
                    , cc.vl_cont_nc_rec       = 0
                    , cc.vl_tot_cont_cum_per  = 0
                    , cc.vl_ret_cum           = 0
                    , cc.vl_out_ded_cum       = 0
                    , cc.vl_cont_cum_rec      = 0
                    , cc.vl_tot_cont_rec      = 0
                where cc.id = gt_row_cons_contr_cofins.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao zerar os valores e manter a situação da consolidação 0(Em aberto) - Situação anterior 0-Em Aberto. '||
                                   'Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
         -- Se o DM_SITUACAO = 1 "Calculado" ou 2 "Erro no Cálculo", defaz para 0 "Aberto"
         elsif gt_row_cons_contr_cofins.dm_situacao in (1, 2) then
               --
               vn_fase := 14;
               --
               begin
                  delete from contr_vlr_ret_fonte_cofins cv
                   where cv.empresa_id  = gt_row_per_cons_contr_cofins.empresa_id
                     and cv.ano         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'rrrr')
                     and cv.mes         = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mm')
                     and cv.per_rec_ret = to_char(gt_row_per_cons_contr_cofins.dt_ini,'mmrrrr')
                     and cv.dm_origem   = 1; -- 0-digitado, 1-gerado no bloco m600
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao excluir valor de retenção apurada e deduzida - Bloco 1700 (pk_apur_cofins.'||
                                      'pkb_desproc_cons_cofins_m600) - Situação anterior 1-Calculado ou 2-Erro no Cálculo. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
               vn_fase := 15;
               --
               begin
                  delete from cons_contr_cofins_or cc
                   where cc.conscontrcofins_id = gt_row_cons_contr_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao excluir Pagamentos - Bloco M605 (pk_apur_cofins.pkb_desproc_cons_cofins_m600) - '||
                                      'Situação anterior 1-Calculado ou 2-Erro no Cálculo. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
               vn_fase := 16;
               --
               begin
                  update det_cons_contr_cofins dc
                     set dc.vl_ajust_acrec    = 0
                       , dc.vl_ajust_reduc    = 0
                       , dc.vl_cont_difer     = 0
                       , dc.vl_cont_difer_ant = 0
                       , dc.vl_cont_per       = 0
                   where dc.conscontrcofins_id = gt_row_cons_contr_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar os valores dos detalhes da consolidação - Situação anterior 1-Calculado ou 2-Erro no Cálculo. '||
                                      'Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
               vn_fase := 17;
               -- Excluir/Alterar os relacionamentos entre os Blocos M500 e 1500
               for r_relac in c_relac( en_empresa_id => vn_empresa_id
                                     , ed_dt_ini     => vd_dt_ini )
               loop
                  --
                  vn_fase := 17.1;
                  -- Voltar os valores dos campos na tabela contr_cred_fiscal_cofins, e excluir da tabela relac_apur_contr_cofins.
                  begin
                     update contr_cred_fiscal_cofins cc
                        set cc.vl_sld_cred_fim     = r_relac.de_vl_sld_cred_fim
                          , cc.vl_cred_desc_efd    = r_relac.de_vl_cred_desc_efd
                          , cc.vl_sd_cred_disp_efd = r_relac.de_vl_sd_cred_disp_efd
                          , cc.vl_cred_desc_pa_ant = r_relac.de_vl_cred_desc_pa_ant
                      where cc.id = r_relac.contrcredfiscalcofins_id;
                  exception
                     when others then
                        gv_resumo_log := 'Problemas ao atualizar os valores dos Controle de Créditos Fiscais  Bloco 1500. Erro = '||sqlerrm;
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                         , ev_mensagem        => gv_mensagem_log
                                                         , ev_resumo          => gv_resumo_log
                                                         , en_tipo_log        => erro_de_sistema
                                                         , en_referencia_id   => gn_referencia_id
                                                         , ev_obj_referencia  => gv_obj_referencia );
                  end;
                  --
                  vn_fase := 17.2;
                  -- Excluir os registro de relacionamento de valores entre os blocos m500 e 1500.
                  begin
                     delete from relac_apur_contr_cofins ra
                      where ra.id = r_relac.relacapurcontrcofins_id;
                  exception
                     when others then
                        gv_resumo_log := 'Problemas ao excluir os registro de relacionamento de valores entre os blocos m500 e 1500. Erro = '||sqlerrm;
                        pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                         , ev_mensagem        => gv_mensagem_log
                                                         , ev_resumo          => gv_resumo_log
                                                         , en_tipo_log        => erro_de_sistema
                                                         , en_referencia_id   => gn_referencia_id
                                                         , ev_obj_referencia  => gv_obj_referencia );
                  end;
                  --
               end loop;
               --
               vn_fase := 17.3;
               -- Excluir os registros da tabela r_apurcredcof_contrcredfcof (contr_cred_fiscal_cofins (empresa, ano, mes, dm_origem)), de acordo com a data do registro a ser recalculado.
               begin
                  delete from r_apurcredcof_contrcredfcof ra
                   where ra.contrcredfiscalcofins_id in (select cc.id
                                                           from contr_cred_fiscal_cofins cc
                                                          where cc.empresa_id = vn_empresa_id
                                                            and cc.ano        = to_char(vd_dt_ini,'rrrr')
                                                            and cc.mes        = to_char(vd_dt_ini,'mm')
                                                            and cc.dm_origem  = 1); -- 0-digitado, 1-gerado pelo bloco m600
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao excluir os registro de relacionamento entre os blocos m500 e 1500. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
               vn_fase := 17.4;
               -- Excluir os registros da tabela contr_cred_fiscal_cofins (empresa, ano, mes, dm_origem), de acordo com a data do registro a ser recalculado.
               begin
                  delete from contr_cred_fiscal_cofins cc
                   where cc.empresa_id = vn_empresa_id
                     and cc.ano        = to_char(vd_dt_ini,'rrrr')
                     and cc.mes        = to_char(vd_dt_ini,'mm')
                     and cc.dm_origem  = 1; -- 0-digitado, 1-gerado pelo bloco m600
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao excluir os registros de Controle de Créditos Fiscais  COFINS - Bloco 1500. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
               vn_fase := 17.5;
               -- Alterar/Anular o relacionamento do registro 1500 que seria utilizado na geração do arquivo
               begin
                  update contr_cred_fiscal_cofins cf
                     set cf.conscontrcofins_id = null
                   where cf.conscontrcofins_id = gt_row_cons_contr_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao alterar/anular os registros de Controle de Créditos Fiscais  COFINS - Bloco 1500. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
               vn_fase := 18;
               --
               begin
                  update cons_contr_cofins cc
                     set cc.dm_situacao          = 0 -- Aberto
                       , cc.vl_tot_cont_nc_per   = 0
                       , cc.vl_tot_cred_desc     = 0
                       , cc.vl_tot_cred_desc_ant = 0
                       , cc.vl_tot_cont_nc_dev   = 0
                       , cc.vl_ret_nc            = 0
                       , cc.vl_out_ded_nc        = 0
                       , cc.vl_cont_nc_rec       = 0
                       , cc.vl_tot_cont_cum_per  = 0
                       , cc.vl_ret_cum           = 0
                       , cc.vl_out_ded_cum       = 0
                       , cc.vl_cont_cum_rec      = 0
                       , cc.vl_tot_cont_rec      = 0
                   where cc.id = gt_row_cons_contr_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao zerar os valores e alterar a situação da consolidação para 0(Em aberto) - Situação anterior 1-Calculado '||
                                      'ou 2-Erro no Cálculo. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
         -- Se o DM_SITUACAO = 3 "Processada" ou 4 "Erro de Validação", defaz para 1 "Calculada"
         elsif gt_row_cons_contr_cofins.dm_situacao in (3, 4) then
               --
               vn_fase := 18;
               --
               begin
                  update cons_contr_cofins cc
                     set cc.dm_situacao = 1 -- Calculado
                   where cc.id = gt_row_cons_contr_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar a situação da consolidação para 1(Calculado). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 19;
   --
   commit;
   --
   vn_fase := 20;
   --
   gv_resumo_log := 'Término do processo (identificador da consolidação = '||en_conscontrcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_despr_cons_cofins_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_conscontrcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DESPROC_CONS_COFINS_M600;
-------------------------------------------------------------------------------------
--| Procedimento para desprocessar por período a consolidação do COFINS - Bloco M600
-------------------------------------------------------------------------------------
PROCEDURE PKB_DESPR_PER_CONS_COFINS_M600( EN_PERCONSCONTRCOFINS_ID IN PER_CONS_CONTR_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
   cursor c_per_cons_contr_cofins( en_perconscontrcofins_id in per_cons_contr_cofins.id%type ) is
      select *
        from per_cons_contr_cofins pc
       where pc.id = en_perconscontrcofins_id;
   --
   cursor c_cons is
      select cc.id conscontrcofins_id
        from cons_contr_cofins cc
       where cc.perconscontrcofins_id = en_perconscontrcofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perconscontrcofins_id
                  , ev_obj_referencia => 'PER_CONS_CONTR_COFINS' );
   --
   vn_fase := 2;
   --
   gv_mensagem_log   := 'Desprocesso por período das consolidações da contribuição do imposto COFINS';
   gv_obj_referencia := 'PER_CONS_CONTR_COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perconscontrcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perconscontrcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perconscontrcofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período de consolidação deve ser informado para que o desprocessamento seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => en_perconscontrcofins_id
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      --
      gt_row_per_cons_contr_cofins := null;
      open c_per_cons_contr_cofins( en_perconscontrcofins_id => en_perconscontrcofins_id );
      fetch c_per_cons_contr_cofins into gt_row_per_cons_contr_cofins;
      close c_per_cons_contr_cofins;
      --
      vn_fase := 6;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id
                                               , ed_data       => gt_row_per_cons_contr_cofins.dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_cons_contr_cofins.empresa_id
                                               , ed_data       => gt_row_per_cons_contr_cofins.dt_fin ) then -- true
         --
         vn_fase := 7;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gt_row_per_cons_contr_cofins.id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 8;
         --
         for r_reg in c_cons
         loop
            --
            vn_fase := 9;
            --
            pkb_desproc_cons_cofins_m600( en_conscontrcofins_id => r_reg.conscontrcofins_id );
            --
         end loop;
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   -- Exclui a memória de Calculo do M100 --
   pkb_exclui_mem_calc_cofins ( en_perconscontrcofins_id => gt_row_per_cons_contr_cofins.id
                              , ev_reg_controlador       => 'M600');
   --
   commit;
   --
   vn_fase := 11;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perconscontrcofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perconscontrcofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_despr_per_cons_cofins_m600 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Desprocessar por período a consolidação da contribuição do COFINS'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perconscontrcofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DESPR_PER_CONS_COFINS_M600;
----------------------------------------------------------------------------------------------------------
--| Procedimento recupera os dados da contribuição do COFINS diferido em períodos anteriores - Bloco M700
----------------------------------------------------------------------------------------------------------
PROCEDURE PKB_DADOS_CONTR_COFINS_M700( EN_CONTRCOFINSDIFPERANT_ID IN CONTR_COFINS_DIF_PER_ANT.ID%TYPE ) IS
   --
   vn_fase         number := 0;
   vv_nome_empresa varchar2(1000) := null;
   ve_invalido     exception;
   --
   cursor c_contr_cofins is
      select *
        from contr_cofins_dif_per_ant cp
       where cp.id = en_contrcofinsdifperant_id;
   --
BEGIN
   --
   vn_fase := 1;
   gt_row_contr_cofins_difperant := null;
   --
   vn_fase := 2;
   open c_contr_cofins;
   fetch c_contr_cofins into gt_row_contr_cofins_difperant;
   close c_contr_cofins;
   --
   vn_fase := 3;
   --| Cabeçalho para as mensagens de log de erro e inconsistências
   gv_mensagem_log := 'Contribuição do Imposto COFINS diferido em períodos anteriores';
   --
   vn_fase := 4;
   --
   if nvl(gt_row_contr_cofins_difperant.id,0) > 0 then
      --
      vn_fase := 5;
      --
      vv_nome_empresa := pk_csf.fkg_nome_empresa( en_empresa_id => gt_row_contr_cofins_difperant.empresa_id );
      --
      vn_fase := 6;
      --| Cabeçalho para as mensagens de log de erro e inconsistências
      gv_mensagem_log := gv_mensagem_log||' no período de '||to_char(gt_row_contr_cofins_difperant.dt_ini,'dd/mm/rrrr')||' até '||
                         to_char(gt_row_contr_cofins_difperant.dt_fin,'dd/mm/rrrr')||' - Empresa: '||vv_nome_empresa;
      --
   else
      --
      vn_fase := 7;
      --
      raise ve_invalido;
   end if;
   --
EXCEPTION
   when ve_invalido then
      --
      gv_resumo_log := 'Contribuição não encontrada. Verifique o identificador informado (id = '||en_contrcofinsdifperant_id||').';
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_dados_contr_cofins_m700 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DADOS_CONTR_COFINS_M700;
---------------------------------------------------------------------------------------------------------------------------------
--| Procedimento para validar a contribuição do COFINS diferida em períodos anteriores - valores a pagar no período - Bloco M700
---------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDAR_CONTR_COFINS_M700( EN_CONTRCOFINSDIFPERANT_ID IN CONTR_COFINS_DIF_PER_ANT.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico.id%type := null;
   vd_data            date;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_contrcofinsdifperant_id
                  , ev_obj_referencia => 'CONTR_COFINS_DIF_PER_ANT' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'CONTR_COFINS_DIF_PER_ANT';
   gv_mensagem_log   := 'Validação da contribuição diferida do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador da contribuição = '||en_contrcofinsdifperant_id||').';
   gn_referencia_id  := en_contrcofinsdifperant_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_contrcofinsdifperant_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador da contribuição diferida deve ser informado para que a validação seja efetuada.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      -- Recupera os dados da contribuição do imposto cofins utilizado como referência
      pkb_dados_contr_cofins_m700( en_contrcofinsdifperant_id => en_contrcofinsdifperant_id );
      gv_mensagem_log := 'Validação da '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_contr_cofins_difperant.empresa_id
                                               , ed_data       => gt_row_contr_cofins_difperant.dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_contr_cofins_difperant.empresa_id
                                               , ed_data       => gt_row_contr_cofins_difperant.dt_fin ) then -- true
         --
         vn_fase := 7;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 8;
         --
         if gt_row_contr_cofins_difperant.dm_situacao <> 0 then -- não estiver aberto
            vn_fase := 9;
            gv_resumo_log := 'A contribuição diferida informada não está com situação "aberto", portanto, a validação não será realizada.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
         else
            --
            vn_fase := 10;
            --| Validar os campos do Bloco M700
            if nvl(gt_row_contr_cofins_difperant.vl_cont_apur_difer,0) < 0 then
               gv_resumo_log := 'Na contribuição diferida em períodos anteriores, o valor da contribuição apurada ('||
                                ltrim(to_char(nvl(gt_row_contr_cofins_difperant.vl_cont_apur_difer,0),'999G999G999G999G990D00'))||
                                ') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 11;
            --
            if gt_row_contr_cofins_difperant.dm_nat_cred_desc is not null and
               gt_row_contr_cofins_difperant.dm_nat_cred_desc not in ('01', '02', '03', '04') then
               gv_resumo_log := 'Na contribuição diferida em períodos anteriores, a natureza de crédito, se informada, deve ser '||
                                'somente: 01, 02, 03 ou 04.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 12;
            --
            if nvl(gt_row_contr_cofins_difperant.vl_cred_desc_difer,0) < 0 then
               gv_resumo_log := 'Na contribuição diferida em períodos anteriores, o valor do crédito a descontar ('||
                                ltrim(to_char(nvl(gt_row_contr_cofins_difperant.vl_cred_desc_difer,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 13;
            --
            if nvl(gt_row_contr_cofins_difperant.vl_cont_difer_ant,0) < 0 then
               gv_resumo_log := 'Na contribuição diferida em períodos anteriores, o valor da contribuição a recolher ('||
                                ltrim(to_char(nvl(gt_row_contr_cofins_difperant.vl_cont_difer_ant,0),'999G999G999G999G990D00'))||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 14;
            --
            if nvl(gt_row_contr_cofins_difperant.vl_cont_difer_ant,0) <> (nvl(gt_row_contr_cofins_difperant.vl_cont_apur_difer,0) - nvl(gt_row_contr_cofins_difperant.vl_cred_desc_difer,0)) then
               gv_resumo_log := 'Na contribuição diferida em períodos anteriores, o valor da contribuição a recolher ('||
                                ltrim(to_char(nvl(gt_row_contr_cofins_difperant.vl_cont_difer_ant,0),'999G999G999G999G990D00'))||
                                ') deve ser igual ao cálculo: (vl_cont_apur_difer - vl_cred_desc_difer) -> ('||
                                ltrim(to_char(nvl(gt_row_contr_cofins_difperant.vl_cont_apur_difer,0),'999G999G999G999G990D00'))||' - '||
                                ltrim(to_char(nvl(gt_row_contr_cofins_difperant.vl_cred_desc_difer,0),'999G999G999G999G990D00'))||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 15;
            --
            begin
               vd_data := to_date(lpad(gt_row_contr_cofins_difperant.per_apur,6,'0'),'mmrrrr');
            exception
               when others then
                  gv_resumo_log := 'Na contribuição diferida em períodos anteriores, o período de apuração da contribuição ('||
                                   lpad(gt_row_contr_cofins_difperant.per_apur,6,'0')||') deve ser válido como data, e estar no formato MMAAAA.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
            vn_fase := 16;
            --
            if gt_row_contr_cofins_difperant.dt_receb not between gt_row_contr_cofins_difperant.dt_ini and gt_row_contr_cofins_difperant.dt_fin then
               gv_resumo_log := 'Na contribuição diferida em períodos anteriores, a data de recebimento da receita ('||
                                to_char(gt_row_contr_cofins_difperant.dt_receb,'dd/mm/rrrr')||') deve estar dentro do período da contribuição ('||
                                to_char(gt_row_contr_cofins_difperant.dt_ini,'dd/mm/rrrr')||' - '||
                                to_char(gt_row_contr_cofins_difperant.dt_fin,'dd/mm/rrrr')||').';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 17;
   --
   if gv_resumo_log is null then
      --
      vn_fase := 18;
      --
      begin
         update contr_cofins_dif_per_ant cp
            set cp.dm_situacao = 3 -- Processada
          where cp.id = en_contrcofinsdifperant_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao alterar a situação da abertura para 3(Processada). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                             , ev_mensagem       => gv_mensagem_log
                                             , ev_resumo         => gv_resumo_log
                                             , en_tipo_log       => erro_de_sistema
                                             , en_referencia_id  => gn_referencia_id
                                             , ev_obj_referencia => gv_obj_referencia );
      end;
   else
      --
      vn_fase := 19;
      --
      begin
         update contr_cofins_dif_per_ant cp
            set cp.dm_situacao = 4 -- Erro de validação
          where cp.id = en_contrcofinsdifperant_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao alterar a situação da abertura para 2(Erro de validação). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                             , ev_mensagem       => gv_mensagem_log
                                             , ev_resumo         => gv_resumo_log
                                             , en_tipo_log       => erro_de_sistema
                                             , en_referencia_id  => gn_referencia_id
                                             , ev_obj_referencia => gv_obj_referencia );
      end;
   end if;
   --
   vn_fase := 20;
   --
   commit;
   --
   vn_fase := 21;
   --
   gv_resumo_log := 'Término do processo (identificador da contribuição = '||en_contrcofinsdifperant_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      begin
         update contr_cofins_dif_per_ant cp
            set cp.dm_situacao = 4 -- Erro de validação
          where cp.id = en_contrcofinsdifperant_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao atualizar os valores e situação da consolidação para 4(Erro de validação). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => en_contrcofinsdifperant_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
      commit;
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_validar_contr_cofins_m700 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_contrcofinsdifperant_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_VALIDAR_CONTR_COFINS_M700;
------------------------------------------------------------------------
--| Procedimento para desprocessar a contribuição do COFINS diferida em
--| períodos anteriores - valores a pagar no período - Bloco M700
------------------------------------------------------------------------
PROCEDURE PKB_DESPROC_CONTR_COFINS_M700 ( EN_CONTRCOFINSDIFPERANT_ID IN CONTR_COFINS_DIF_PER_ANT.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_contrcofinsdifperant_id
                  , ev_obj_referencia => 'CONTR_COFINS_DIF_PER_ANT' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'CONTR_COFINS_DIF_PER_ANT';
   gv_mensagem_log   := 'Desprocesso da contribuição do COFINS diferida em períodos anteriores - valores a pagar no período';
   gv_resumo_log     := 'Início do processo (identificador da contribuição = '||en_contrcofinsdifperant_id||').';
   gn_referencia_id  := en_contrcofinsdifperant_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_contrcofinsdifperant_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador da contribuição deve ser informado para que o desprocessamento seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      -- Recupera os dados da contribuição do imposto cofins utilizado como referência
      pkb_dados_contr_cofins_m700( en_contrcofinsdifperant_id => en_contrcofinsdifperant_id );
      gv_mensagem_log := 'Desprocessar a '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_contr_cofins_difperant.empresa_id
                                               , ed_data       => gt_row_contr_cofins_difperant.dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_contr_cofins_difperant.empresa_id
                                               , ed_data       => gt_row_contr_cofins_difperant.dt_fin ) then -- true
         --
         vn_fase := 7;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 8;
         -- Se o DM_SITUACAO = 0 "Em Aberto", manter situação = 0 "Em Aberto"
         if gt_row_contr_cofins_difperant.dm_situacao in (0) then
            --
            vn_fase := 7;
            --
            begin
               update contr_cofins_dif_per_ant cp
                  set cp.dm_situacao        = 0 -- Aberto
                    , cp.vl_cont_apur_difer = 0
                    , cp.vl_cred_desc_difer = 0
                    , cp.vl_cont_difer_ant  = 0
                    , cp.dm_nat_cred_desc   = null
                    , cp.dt_receb           = null
                where cp.id = gt_row_contr_cofins_difperant.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao zerar os valores e manter situação da contribuição 0(Em aberto). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
         -- Se o DM_SITUACAO = 3 "Processada" ou 4 "Erro de Validação", altera para 0 "Aberto"
         elsif gt_row_contr_cofins_difperant.dm_situacao in (3, 4) then
               --
               vn_fase := 9;
               --
               begin
                  update contr_cofins_dif_per_ant cp
                     set cp.dm_situacao = 0 -- Aberto
                   where cp.id = gt_row_contr_cofins_difperant.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar a situação da contribuição para 0(Aberto). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   commit;
   --
   vn_fase := 11;
   --
   gv_resumo_log := 'Término do processo (identificador da contribuição = '||en_contrcofinsdifperant_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_desproc_contr_cofins_m700 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_contrcofinsdifperant_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DESPROC_CONTR_COFINS_M700;
---------------------------------------------------------------------------------------------------------------------------------
--| Procedimento para excluir a contribuição do COFINS diferida em períodos anteriores - valores a pagar no período - Bloco M700
---------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_EXCLUIR_CONTR_COFINS_M700 ( EN_CONTRCOFINSDIFPERANT_ID IN CONTR_COFINS_DIF_PER_ANT.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_contrcofinsdifperant_id
                  , ev_obj_referencia => 'CONTR_COFINS_DIF_PER_ANT' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'CONTR_COFINS_DIF_PER_ANT';
   gv_mensagem_log   := 'Exclusão da Contribuição do COFINS diferida em períodos anteriores - valores a pagar no período';
   gv_resumo_log     := 'Início do processo (identificador da contribuição = '||en_contrcofinsdifperant_id||').';
   gn_referencia_id  := en_contrcofinsdifperant_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_contrcofinsdifperant_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador da contribuição deve ser informado para que o desprocessamento seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      -- Recupera os dados da contribuição do imposto cofins utilizado como referência
      pkb_dados_contr_cofins_m700( en_contrcofinsdifperant_id => en_contrcofinsdifperant_id );
      gv_mensagem_log := 'Exclusão da '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_contr_cofins_difperant.empresa_id
                                               , ed_data       => gt_row_contr_cofins_difperant.dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_contr_cofins_difperant.empresa_id
                                               , ed_data       => gt_row_contr_cofins_difperant.dt_fin ) then -- true
         --
         vn_fase := 7;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 7;
         --
         begin
            delete from contr_cofins_dif_per_ant cp
             where cp.id = gt_row_contr_cofins_difperant.id;
         exception
            when others then
               gv_resumo_log := 'Problemas ao excluir o registro. Erro = '||sqlerrm;
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_sistema
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
         end;
         --
      end if;
      --
   end if;
   --
   vn_fase := 8;
   --
   commit;
   --
   vn_fase := 9;
   --
   gv_resumo_log := 'Término do processo (identificador da contribuição = '||en_contrcofinsdifperant_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_excluir_contr_cofins_m700 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_contrcofinsdifperant_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_EXCLUIR_CONTR_COFINS_M700;
--------------------------------------------------------------------------
--| Procedimento para gravar os valores nas tabelas de banco - Bloco M800
--------------------------------------------------------------------------
PROCEDURE PKB_GRAVA_DADOS_M800 IS
   --
   vn_fase    number := 0;
   vn_ind     number := 0;
   vn_ind_bi  number := 0;
   vn_ind_tri number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --| Gravar os dados de receita isenta - rec_isenta_cofins
   vn_ind := nvl(vt_tab_reg_m800.first,0);
   --
   vn_fase := 2;
   --
   loop
      --
      vn_fase := 3;
      --
      if nvl(vn_ind,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 4;
      --
      begin
         insert into rec_isenta_cofins( id
                                      , dm_situacao
                                      , codst_id
                                      , vl_tot_rec
                                      , planoconta_id
                                      , desc_compl
                                      , perrecisentacofins_id )
                                values( vt_tab_reg_m800(vn_ind).recisentacofins_id
                                      , vt_tab_reg_m800(vn_ind).dm_situacao
                                      , vt_tab_reg_m800(vn_ind).codst_id
                                      , vt_tab_reg_m800(vn_ind).vl_tot_rec
                                      , vt_tab_reg_m800(vn_ind).planoconta_id
                                      , vt_tab_reg_m800(vn_ind).desc_compl
                                      , gt_row_per_rec_isenta_cofins.id );
      exception
         when dup_val_on_index then
            --
            vn_fase := 5;
            --
            begin
               update rec_isenta_cofins ri
                  set ri.dm_situacao           = vt_tab_reg_m800(vn_ind).dm_situacao
                    , ri.codst_id              = vt_tab_reg_m800(vn_ind).codst_id
                    , ri.vl_tot_rec            = vt_tab_reg_m800(vn_ind).vl_tot_rec
                    , ri.planoconta_id         = vt_tab_reg_m800(vn_ind).planoconta_id
                    , ri.desc_compl            = vt_tab_reg_m800(vn_ind).desc_compl
                    , ri.perrecisentacofins_id = gt_row_per_rec_isenta_cofins.id
                where ri.id = vt_tab_reg_m800(vn_ind).recisentacofins_id;
            exception
               when others then
                  --
                  gv_resumo_log := 'Problemas ao alterar consolidação (id='||vt_tab_reg_m800(vn_ind).recisentacofins_id||' fase = '||vn_fase||'). Erro = '||sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico.id%type;
                  begin
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
                  exception
                     when others then
                        null;
                  end;
                  --
                  raise_application_error (-20101, gv_resumo_log);
                  --
            end;
         when others then
            --
            gv_resumo_log := 'Problemas ao incluir receita isenta (id='||vt_tab_reg_m800(vn_ind).recisentacofins_id||' fase = '||vn_fase||'). Erro = '||sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico.id%type;
            begin
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_sistema
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
            exception
               when others then
                  null;
            end;
            --
            raise_application_error (-20101, gv_resumo_log);
            --
      end;
      --
      vn_fase := 6;
      --
      if vn_ind = vt_tab_reg_m800.last then
         exit;
      else
         vn_ind := vt_tab_reg_m800.next(vn_ind);
      end if;
      --
   end loop;
   --
   vn_fase := 7;
   --| Gravar os dados de detalhe da receita isenta - det_rec_isenta_cofins
   vn_ind := nvl(vt_tri_tab_reg_m810.first,0);
   --
   vn_fase := 8;
   --
   loop
      --
      vn_fase := 9;
      --
      if nvl(vn_ind,0) = 0 then
         exit;
      end if;
      --
      vn_fase := 10;
      --
      vn_ind_bi := nvl(vt_tri_tab_reg_m810(vn_ind).first,0);
      --
      vn_fase := 11;
      --
      loop
         --
         vn_fase := 12;
         --
         if nvl(vn_ind_bi,0) = 0 then
            exit;
         end if;
         --
         vn_fase := 13;
         --
         vn_ind_tri := nvl(vt_tri_tab_reg_m810(vn_ind)(vn_ind_bi).first,0);
         --
         vn_fase := 14;
         --
         loop
            --
            vn_fase := 15;
            --
            if nvl(vn_ind_tri,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 16;
            --
            begin
               insert into det_rec_isenta_cofins( id
                                                , recisentacofins_id
                                                , natrecpc_id
                                                , vl_rec
                                                , planoconta_id
                                                , desc_compl )
                                          values( vt_tri_tab_reg_m810(vn_ind)(vn_ind_bi)(vn_ind_tri).detrecisentacofins_id
                                                , vt_tri_tab_reg_m810(vn_ind)(vn_ind_bi)(vn_ind_tri).recisentacofins_id
                                                , vt_tri_tab_reg_m810(vn_ind)(vn_ind_bi)(vn_ind_tri).natrecpc_id
                                                , vt_tri_tab_reg_m810(vn_ind)(vn_ind_bi)(vn_ind_tri).vl_rec
                                                , vt_tri_tab_reg_m810(vn_ind)(vn_ind_bi)(vn_ind_tri).planoconta_id
                                                , vt_tri_tab_reg_m810(vn_ind)(vn_ind_bi)(vn_ind_tri).desc_compl );
            exception
               when others then
                  --
                  gv_resumo_log := 'Problemas ao incluir detalhes da receita isenta (id='||vt_tri_tab_reg_m810(vn_ind)(vn_ind_bi)(vn_ind_tri).detrecisentacofins_id||
                                   ' fase = '||vn_fase||'). Erro = '||sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico.id%type;
                  begin
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
                  exception
                     when others then
                        null;
                  end;
                  --
                  raise_application_error (-20101, gv_resumo_log);
                  --
            end;
            --
            vn_fase := 17;
            --
            if vn_ind_tri = vt_tri_tab_reg_m810(vn_ind)(vn_ind_bi).last then
               exit;
            else
               vn_ind_tri := vt_tri_tab_reg_m810(vn_ind)(vn_ind_bi).next(vn_ind_tri);
            end if;
            --
         end loop;
         --
         vn_fase := 18;
         --
         if vn_ind_bi = vt_tri_tab_reg_m810(vn_ind).last then
            exit;
         else
            vn_ind_bi := vt_tri_tab_reg_m810(vn_ind).next(vn_ind_bi);
         end if;
         --
      end loop;
      --
      vn_fase := 19;
      --
      if vn_ind = vt_tri_tab_reg_m810.last then
         exit;
      else
         vn_ind := vt_tri_tab_reg_m810.next(vn_ind);
      end if;
      --
   end loop;
   --
   vn_fase := 20;
   --
   commit;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_grava_dados_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_GRAVA_DADOS_M800;
-----------------------------------------------------------------
--| Procedimento para armazenar os dados em vetores - Bloco M800
-----------------------------------------------------------------
PROCEDURE PKB_MONTA_VETOR_M800( EN_CH_REC_CSTPLACTA IN NUMBER
                              , EN_CODST_ID         IN NUMBER
                              , EN_PLANOCONTA_ID    IN NUMBER
                              , EN_NATRECPC_ID      IN NUMBER
                              , EN_VL_REC           IN NUMBER
                              , EN_NCM_ID           IN NUMBER ) IS
   --
   vn_fase            number := 0;
   vb_achou           boolean := false;
   vn_recisentacofins_id number := 0;
   --
   vn_planoconta_id   plano_conta.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --| Montar bloco M800
   begin
      vb_achou := vt_tab_reg_m800.exists(en_ch_rec_cstplacta);
   exception
      when others then
         vb_achou := false;
   end;
   --
   vn_fase := 2;
   --
   if not vb_achou then
      --
      vn_fase := 3;
      --
      begin
         select recisentacofins_seq.nextval
           into vn_recisentacofins_id
           from dual;
      exception
         when others then
            vn_recisentacofins_id := null;
      end;
      --
      vn_fase := 4;
      --
      if nvl(vn_recisentacofins_id,0) > 0 then
         --
         vn_fase := 5;
         --
         vt_tab_reg_m800(en_ch_rec_cstplacta).recisentacofins_id := vn_recisentacofins_id;
         vt_tab_reg_m800(en_ch_rec_cstplacta).dm_situacao        := 0; -- 0-aberto
         vt_tab_reg_m800(en_ch_rec_cstplacta).codst_id           := en_codst_id;
         vt_tab_reg_m800(en_ch_rec_cstplacta).vl_tot_rec         := en_vl_rec;
         vt_tab_reg_m800(en_ch_rec_cstplacta).planoconta_id      := en_planoconta_id;
         vt_tab_reg_m800(en_ch_rec_cstplacta).desc_compl         := null; -- processo informado/digitado
         --
      end if;
      --
   else
      --
      vn_fase := 6;
      --
      vt_tab_reg_m800(en_ch_rec_cstplacta).vl_tot_rec := nvl(vt_tab_reg_m800(en_ch_rec_cstplacta).vl_tot_rec,0) + nvl(en_vl_rec,0);
      --
   end if;
   --
   vn_fase := 7;
   --
   vn_recisentacofins_id := vt_tab_reg_m800(en_ch_rec_cstplacta).recisentacofins_id;
   --
   vn_fase := 8;
   --| Montar bloco M810
   begin
      vb_achou := vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta).exists(en_natrecpc_id);
   exception
      when others then
         vb_achou := false;
   end;
   --
   vn_fase := 9;
   --
   if not vb_achou then
      --
      vn_fase := 10;
      --
      begin
         select detrecisentacofins_seq.nextval
           into vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(en_natrecpc_id).detrecisentacofins_id
           from dual;
      exception
         when others then
            vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(en_natrecpc_id).detrecisentacofins_id := null;
      end;
      --
      vn_fase := 11;
      --
      if nvl(vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(en_natrecpc_id).detrecisentacofins_id,0) > 0 then
         --
         vn_fase := 12;
         --
         vn_planoconta_id:= pk_csf.fkg_ncmnatrecpc_plc_id(en_natrecpc_id => en_natrecpc_id ,en_ncm_id => en_ncm_id);
         --
         vn_fase := 12.1;
         --
         vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(en_natrecpc_id).recisentacofins_id := vn_recisentacofins_id;
         vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(en_natrecpc_id).planoconta_id      := nvl(vn_planoconta_id,en_planoconta_id);
         vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(en_natrecpc_id).natrecpc_id        := en_natrecpc_id;
         vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(en_natrecpc_id).vl_rec             := en_vl_rec;
         vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(en_natrecpc_id).desc_compl         := null;
         --
      end if;
   else
      --
      vn_fase := 13;
      --
      vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(en_natrecpc_id).vl_rec := nvl(vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(en_natrecpc_id).vl_rec,0) +
                                                                                                nvl(en_vl_rec,0);
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_monta_vetor_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_MONTA_VETOR_M800;
----------------------------------------------------------------------------------------
--| Procedimento para armazenar os dados em vetores - Bloco M800 para regime cumulativo
----------------------------------------------------------------------------------------
PROCEDURE PKB_MONTA_VETOR_M800_PREGC ( EN_CH_REC_CSTPLACTA IN NUMBER
                              , EN_CODST_ID         IN NUMBER
                              , EN_PLANOCONTA_ID    IN NUMBER
                              , EN_VL_REC           IN NUMBER ) IS
   --
   vn_fase            number := 0;
   vb_achou           boolean := false;
   vn_recisentacofins_id number := 0;
   --
   vn_natrecpc_id     nat_rec_pc.id%type  := 0;
   vn_planoconta_id   plano_conta.id%type := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --| Montar bloco M800
   begin
      vb_achou := vt_tab_reg_m800.exists(en_ch_rec_cstplacta);
   exception
      when others then
         vb_achou := false;
   end;
   --
   vn_fase := 2;
   --
   vn_natrecpc_id:= pk_csf.fkg_ncmnatrecpc_npp_id(en_planoconta_id => en_planoconta_id);
/*   vn_natrecpc_id:= pk_csf.fkg_natrecpc_id(en_planoconta_id => en_planoconta_id
                                          ,en_codst_id      => en_codst_id);*/
   --
   vn_fase := 2.1;
   --
   if nvl(vn_natrecpc_id,0) > 0 then
     --
     if not vb_achou then
        --
        vn_fase := 3;
        --
        begin
           select recisentacofins_seq.nextval
             into vn_recisentacofins_id
             from dual;
        exception
           when others then
              vn_recisentacofins_id := null;
        end;
        --
        vn_fase := 4;
        --
        if nvl(vn_recisentacofins_id,0) > 0 then
           --
           vn_fase := 5;
           --
           vn_planoconta_id:= pk_csf.fkg_natrecpc_plc_id(en_natrecpc_id => vn_natrecpc_id);
           --
           if vn_planoconta_id is null then
              ---
              vn_planoconta_id:= pk_csf.fkg_plcnatpecpc_plc_id(en_natrecpc_id => vn_natrecpc_id);
              --- 
           end if;
           -- 
           vn_fase := 5.1;
           --
           vt_tab_reg_m800(en_ch_rec_cstplacta).recisentacofins_id := vn_recisentacofins_id;
           vt_tab_reg_m800(en_ch_rec_cstplacta).dm_situacao        := 0; -- 0-aberto
           vt_tab_reg_m800(en_ch_rec_cstplacta).codst_id           := en_codst_id;
           vt_tab_reg_m800(en_ch_rec_cstplacta).vl_tot_rec         := en_vl_rec;
           vt_tab_reg_m800(en_ch_rec_cstplacta).planoconta_id      := vn_planoconta_id /*en_planoconta_id*/;
           vt_tab_reg_m800(en_ch_rec_cstplacta).desc_compl         := null; -- processo informado/digitado
           --
        end if;
        --
     else
        --
        vn_fase := 6;
        --
        vt_tab_reg_m800(en_ch_rec_cstplacta).vl_tot_rec := nvl(vt_tab_reg_m800(en_ch_rec_cstplacta).vl_tot_rec,0) + nvl(en_vl_rec,0);
        --
     end if;
     --
     vn_fase := 7;
     --
     vn_recisentacofins_id := vt_tab_reg_m800(en_ch_rec_cstplacta).recisentacofins_id;
     --
     vn_natrecpc_id:= pk_csf.fkg_ncmnatrecpc_npp_id(en_planoconta_id => en_planoconta_id);
     --
     vn_fase := 8;
     --| Montar bloco M810
     begin
        vb_achou := vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta).exists(vn_natrecpc_id);
     exception
        when others then
           vb_achou := false;
     end;
     --
     vn_fase := 9;
     --
/*   if nvl(vn_natrecpc_id,0) > 0 then*/
     ---
     if not vb_achou then
        --
        vn_fase := 10;
        --
        begin
           select detrecisentacofins_seq.nextval
             into vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(vn_natrecpc_id).detrecisentacofins_id
             from dual;
        exception
           when others then
              vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(vn_natrecpc_id).detrecisentacofins_id := null;
        end;
        --
        vn_fase := 11;
        --
        if nvl(vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(vn_natrecpc_id).detrecisentacofins_id,0) > 0 then
           --
           vn_fase := 12;
           --
           if vn_planoconta_id is not null then
             --
             vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(vn_natrecpc_id).recisentacofins_id := vn_recisentacofins_id;
             vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(vn_natrecpc_id).planoconta_id      := en_planoconta_id /*nvl(vn_planoconta_id,en_planoconta_id)*/;
             vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(vn_natrecpc_id).natrecpc_id        := vn_natrecpc_id;
             vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(vn_natrecpc_id).vl_rec             := en_vl_rec;
             vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(vn_natrecpc_id).desc_compl         := null;
             --
           else
             --
             gv_resumo_log := 'Não foi encontrado conta contábil no parâmetro Natureza de Receita conforme Codigo de Situação Tributaria.' ;
             --
             declare
                vn_loggenerico_id  log_generico.id%type;
             begin
                pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => gv_mensagem_log
                                                 , ev_resumo          => gv_resumo_log
                                                 , en_tipo_log        => erro_de_sistema
                                                 , en_referencia_id   => gn_referencia_id
                                                 , ev_obj_referencia  => gv_obj_referencia );
             exception
                when others then
                   null;
              end;
              --
           end if;
           --
        end if;
        --
     else
        --
        vn_fase := 13;
        --
        vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(vn_natrecpc_id).vl_rec := nvl(vt_tri_tab_reg_m810(vn_recisentacofins_id)(en_ch_rec_cstplacta)(vn_natrecpc_id).vl_rec,0) +
                                                                                                  nvl(en_vl_rec,0);
        --
     end if;
     --
   else
       --
       gv_resumo_log := 'Não foi encontrado o mesmo Plano de Conta do F500. Verifique na tela Natureza de Receita conforme Codigo de Situação Tributaria, na aba Conta Contábil.' ;
       --
       declare
          vn_loggenerico_id  log_generico.id%type;
       begin
          pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => gv_mensagem_log
                                           , ev_resumo          => gv_resumo_log
                                           , en_tipo_log        => erro_de_sistema
                                           , en_referencia_id   => gn_referencia_id
                                           , ev_obj_referencia  => gv_obj_referencia );
       exception
          when others then
             null;
        end;
   end if;
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_monta_vetor_m800_pregc (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_MONTA_VETOR_M800_PREGC;
--------------------------------------------------------------
--| Procedimento recupera os dados dos processos - Bloco M800
--------------------------------------------------------------
PROCEDURE PKB_MONTA_DADOS_M800 IS
  --
  vn_fase           number := 0;
  vn_loggenerico_id log_generico.id%type;
  vn_qtde           number := 0;
  vn_planoconta_id  plano_conta.id%type;
  vn_natrecpc_id    nat_rec_pc.id%type;
  vv_cod_ncm        ncm.cod_ncm%type;
  vn_codst_id_pis   cod_st.id%type;
  vv_existe         varchar2(1) := 'N';
  --
  vv_cod_cta plano_conta.cod_cta%type := null;
  --
  --| Recuperar a empresa e suas filiais
  cursor c_empresa is
    select em.id empresa_id,
           em.multorg_id,
           em.dm_dt_escr_dfepoe
      from empresa em
     start with em.id = gt_row_per_rec_isenta_cofins.empresa_id
    connect by prior em.id = em.ar_empresa_id;
  --
  --| NOTA FISCAL DE SERVIÇO
  cursor c_a100(en_empresa_id        in empresa.id%type,
                en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type) is
    select nf.empresa_id,
           nf.id notafiscal_id,
           nf.dm_ind_oper,
           it.id itemnf_id,
           it.cod_cta,
           it.cod_ncm,
           nvl(it.vl_item_bruto, 0) vl_rec,
           it.cfop_id,
           ii.id impitemnf_id,
           ii.codst_id,
           ii.natrecpc_id natrecpc_id_imp,
           ii.vl_aliq_prod,
           ii.aliq_apli aliq_cofins,
           ie.ncm_id,
           ic.natrecpc_id_cofins natrecpc_id_item,
           (nf.nro_nf || '/' || nf.serie || '-' ||
           to_char(nf.dt_emiss, 'dd/mm/yyyy') || '-' || it.cod_item) vv_inform
      from nota_fiscal      nf,
           mod_fiscal       mf,
           item_nota_fiscal it,
           imp_itemnf       ii,
           tipo_imposto     ti,
           item             ie,
           item_compl       ic
     where nf.empresa_id      = en_empresa_id
       and nf.dm_st_proc      = 4 -- Autorizada
       and nf.dm_arm_nfe_terc = 0 -- 0 - Não, 1 - Sim
       and ((nf.dm_ind_emit = 1 and to_date(nvl(nf.dt_sai_ent, nf.dt_emiss), 'dd/mm/rrrr') between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin)
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and to_date(nf.dt_emiss, 'dd/mm/rrrr') between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin)
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and to_date(nf.dt_emiss, 'dd/mm/rrrr') between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin)
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and to_date(nvl(nf.dt_sai_ent, nf.dt_emiss), 'dd/mm/rrrr') between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin))
       and mf.id              = nf.modfiscal_id
       and mf.cod_mod         = '99' -- Somente serviços
       and it.notafiscal_id   = nf.id
       and ii.itemnf_id       = it.id
       and ii.dm_tipo         = 0 -- Imposto
       and ti.id              = ii.tipoimp_id
       and ti.cd              = '5' -- Cofins
       and ie.id(+)           = it.item_id
       and ic.item_id(+)      = it.item_id
     order by nf.empresa_id,
              nf.id,
              it.id,
              ii.id;
  --
  --| NOTA FISCAL (CÓDIGO 01), NOTA FISCAL AVULSA (CÓDIGO 1B), NOTA FISCAL DE PRODUTOR (CÓDIGO 04) E NFE (CÓDIGO 55)
  cursor c_c100(en_empresa_id        in empresa.id%type,
                en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type) is
    select nf.empresa_id,
           nf.id notafiscal_id,
           nf.dm_ind_oper,
           it.id itemnf_id,
           it.cod_cta,
           it.cod_ncm,
           nvl(it.vl_item_bruto, 0) vl_rec,
           it.cfop_id,
           ii.id impitemnf_id,
           ii.codst_id,
           ii.natrecpc_id natrecpc_id_imp,
           ii.vl_aliq_prod,
           ii.aliq_apli aliq_cofins,
           ie.ncm_id,
           ic.natrecpc_id_cofins natrecpc_id_item,
           (nf.nro_nf || '/' || nf.serie || '-' ||
           to_char(nf.dt_emiss, 'dd/mm/yyyy') || '-' || it.cod_item) vv_inform
      from nota_fiscal      nf,
           mod_fiscal       mf,
           item_nota_fiscal it,
           imp_itemnf       ii,
           tipo_imposto     ti,
           item             ie,
           item_compl       ic
     where nf.empresa_id      = en_empresa_id
       and nf.dm_st_proc      = 4 -- Autorizada
       and nf.dm_arm_nfe_terc = 0 -- 0 - Não, 1 - Sim
       and ((nf.dm_ind_emit = 1 and to_date(nvl(nf.dt_sai_ent, nf.dt_emiss), 'dd/mm/rrrr') between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin)
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and to_date(nf.dt_emiss, 'dd/mm/rrrr') between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin)
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and to_date(nf.dt_emiss, 'dd/mm/rrrr') between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin)
             or
            (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and to_date(nvl(nf.dt_sai_ent, nf.dt_emiss), 'dd/mm/rrrr') between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin))
       and mf.id              = nf.modfiscal_id
       and mf.cod_mod         in ('01', '1B', '04', '55', '65') -- NF, NF Avulsa, NF de Produtor, NF Eletrônica, NF Consumidor Eletrônica
       and it.notafiscal_id   = nf.id
       and ii.itemnf_id       = it.id
       and ii.dm_tipo         = 0 -- Imposto
       and ti.id              = ii.tipoimp_id
       and ti.cd              = '5' -- Cofins
       and ie.id(+)           = it.item_id
       and ic.item_id(+)      = it.item_id
     order by nf.empresa_id,
              nf.id,
              it.id,
              ii.id;
  --
  -- VL_ITEM dos registros C181 e C491, quando o valor do campo IND_ESCRI do registro C010 seja igual a 1
  -- Não será processado, pois o ind_escri é igual a 2.
  --
  --| EQUIPAMENTO ECF (CÓDIGO 02 e 2D)
  cursor c_c400(en_empresa_id in empresa.id%type) is
    select eq.id equipecf_id,
           eq.ecf_mod,
           eq.ecf_fab,
           eq.ecf_cx,
           mf.cod_mod,
           rz.id reducaozecf_id,
           rz.dt_doc,
           rz.cro,
           rz.crz,
           rz.num_coo_fin,
           rd.codst_id,
           rd.planoconta_id,
           rd.aliq_cofins aliq_cofins,
           nvl(rd.vl_aliq_cofins_quant, 0) vl_aliq_cofins_quant,
           nvl(rd.vl_item, 0) vl_rec,
           rd.natrecpc_id natrecpc_id_red,
           ie.cod_item,
           ie.ncm_id,
           ic.natrecpc_id_cofins natrecpc_id_item
      from equip_ecf              eq,
           mod_fiscal             mf,
           reducao_z_ecf          rz,
           res_dia_doc_ecf_cofins rd,
           item                   ie,
           item_compl             ic
     where eq.empresa_id     = en_empresa_id
       and mf.id             = eq.modfiscal_id
       and mf.cod_mod        in ('02', '2D') -- Nota Fiscal de Venda a Consumidor e Cupom Fiscal
       and rz.equipecf_id    = eq.id
       and rz.dt_doc between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin
       and rz.dm_st_proc     = 1 -- Validada
       and nvl(rz.vl_brt, 0) > 0
       and rd.reducaozecf_id = rz.id
       and ie.id(+)          = rd.item_id
       and ic.item_id(+)     = rd.item_id
     order by eq.id,
              rz.id,
              rd.codst_id,
              rd.planoconta_id;
  --
  --| Resumo diário das notas fiscais de venda a consumidor (código 02)
  cursor c_c380(en_empresa_id in empresa.id%type) is
    select rd.empresa_id,
           rd.id resdianfvendacons_id,
           rd.serie,
           rd.subserie,
           rd.num_doc_ini,
           rd.num_doc_fin,
           rd.cod_cta,
           mf.cod_mod,
           ra.cfop_id,
           ir.codst_id_cofins codst_id,
           ir.aliq_cofins aliq_cofins,
           nvl(ir.aliq_cofins_quant, 0) aliq_cofins_quant,
           nvl(ir.vl_item_acm, 0) vl_rec,
           ie.ncm_id,
           ie.cod_item,
           ic.natrecpc_id_cofins natrecpc_id_item
      from res_dia_nf_venda_cons        rd,
           mod_fiscal                   mf,
           reg_an_res_dia_nf_venda_cons ra,
           it_res_dia_nf_venda_cons     ir,
           item                         ie,
           item_compl                   ic
     where rd.empresa_id                = en_empresa_id
       and rd.dt_doc between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin
       and rd.dm_st_proc                = 1 -- Validada
       and mf.id                        = rd.modfiscal_id
       and mf.cod_mod                   = '02' -- Nota Fiscal de Venda a Consumidor
       and ra.resdianfvendacons_id      = rd.id
       and ir.reganresdianfvendacons_id = ra.id
       and ie.id(+)                     = ir.item_id
       and ic.item_id(+)                = ir.item_id
     order by rd.empresa_id,
              rd.id,
              ir.codst_id_cofins,
              rd.cod_cta;
  --
  -- VL_ITEM dos registros C601, D201, D601
  -- Não será processado.
  -- VL_DOC dos registros D300
  -- Não será processado.
  -- VL_BRT do registro D350
  -- Não será processado.
  -- VL_BC_COFINS dos registros C601, D201, D300, D350, D601
  -- Não será processado.
  --
  --| DEMAIS DOCUMENTOS E OPERAÇÕES GERADORAS DE CONTRIBUIÇÃO E CRÉDITOS (POR ITEM)
  cursor c_f100(en_empresa_id in empresa.id%type) is
    select dd.id demdocopergercc_id,
           dd.codst_id_cofins codst_id,
           dd.planoconta_id,
           dd.dt_oper,
           dd.aliq_cofins aliq_cofins,
           nvl(dd.vl_oper, 0) vl_rec,
           dd.dm_ind_oper,
           ie.ncm_id,
           ie.cod_item,
           ic.natrecpc_id_cofins natrecpc_id_item
      from dem_doc_oper_ger_cc dd,	  
           item ie,
           item_compl ic
     where dd.empresa_id      = en_empresa_id
       and dd.dt_oper between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin
       and dd.dm_st_proc      = 1 -- Validado
       and dd.dm_ind_oper     in (1, 2)
       and dd.dm_gera_receita = 1 -- 0 - Não gera / 1 - Gera Receita
       and ie.id              = dd.item_id
       and ic.item_id         = dd.item_id
     order by dd.id;
  --
  --| DEMAIS DOCUMENTOS E OPERAÇÕES GERADORAS DE CONTRIBUIÇÃO E CRÉDITOS (POR CONTA CONTABIL)
  cursor c_f100_planoconta(en_empresa_id in empresa.id%type) is
    select dd.id demdocopergercc_id,
           dd.codst_id_cofins codst_id,
           dd.planoconta_id,
           dd.dt_oper,
           dd.aliq_cofins aliq_cofins,
           nvl(dd.vl_oper, 0) vl_rec,
           dd.dm_ind_oper,
           pc.natrecpc_id natrecpc_id_plconta 		   
      from dem_doc_oper_ger_cc    dd,
           plano_conta_nat_rec_pc pc,
           nat_rec_pc             nr,
           cod_st                 cs,
           tipo_imposto           ti 
     where dd.empresa_id      = en_empresa_id
       and dd.dt_oper between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin
       and dd.dm_st_proc      = 1 -- Validado
       and dd.dm_ind_oper     in (1, 2)
       and dd.dm_gera_receita = 1 -- 0 - Não gera / 1 - Gera Receita
       and dd.item_id         is null	   
       and pc.planoconta_id   = dd.planoconta_id
       and nr.id              = pc.natrecpc_id
       and cs.id              = nr.codst_id
       and ti.id              = cs.tipoimp_id
       and ti.cd              = 5 -- COFINS
     order by dd.id;
  --
  --| Apuração do bloco do Processo de Apuração OIFD.
  cursor c_i100(en_empresa_id in empresa.id%type) is
    select distinct co.vl_rec,
                    co.codst_id_pis_cofins,
                    co.aliq_pis,
                    ae.dt_inicial,
                    cr.planoconta_id
      from abertura_efd_pc_oifd    ae,
           abert_efd_pc_oifd_estab aep,
           consol_oper_per_oifd    co,
           compos_recdedexcl_oifd  cr
     where ae.empresa_id  = en_empresa_id
       and ae.dt_inicial >= gt_row_per_rec_isenta_cofins.dt_ini
       and ae.dt_inicial <= gt_row_per_rec_isenta_cofins.dt_fin
       and ae.dt_final   >= gt_row_per_rec_isenta_cofins.dt_ini
       and ae.dt_final   <= gt_row_per_rec_isenta_cofins.dt_fin
       and ae.id          = aep.aberturaefdpcoifd_id
       and aep.id         = co.abertefdpcoifdestab_id
       and co.id          = cr.consoloperperoifd_id;
  --
  -- VL_TOT_REC do registro F200
  -- Não será processo, pois se refere a atividade imobiliária
  --
  --  Incidência do PIS/COFINS pelo regime de caixa - F500
  cursor c_f500(en_empresa_id in empresa.id%type) is
    select c.empresa_id,
           c.dt_ref,
           c.vl_rec_caixa,
           c.codst_id_cofins,
           c.planoconta_id,
           c.aliq_cofins
      from cons_oper_ins_pc_rc c
     where c.dt_ref between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin
       and c.empresa_id = en_empresa_id
       and c.dm_st_proc = 1 -- Validada
     order by c.id,
              c.empresa_id;
  --
  --  Incidência do PIS/COFINS pelo regime de Competência - F550
  cursor c_f550(en_empresa_id in empresa.id%type) is
    select r.empresa_id,
           r.dt_ref,
           r.vl_rec_comp,
           r.codst_id_cofins,
           r.planoconta_id,
           r.aliq_cofins
      from cons_oper_ins_pc_rcomp r
     where r.dt_ref between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin
       and r.empresa_id = en_empresa_id
       and r.dm_st_proc = 1 -- Validada
     order by r.id,
              r.empresa_id;
  --
  -- Cupom Fiscal Sat (59) - C860
  cursor c_c860(en_empresa_id in empresa.id%type) is
    select cf.empresa_id,
           cf.nro_cfe,
           icf.cfop_id,
           iic.codst_id,
           iic.aliq_apli aliq_cofins,
           iic.vl_aliq_prod,
           n.id ncm_id,
           n.cod_ncm,
           icf.item_id,
           nvl(sum(nvl(icf.vl_item_liq, 0) + nvl(icf.vl_rateio_descto, 0)), 0) vl_rec,
           icf.cod_cta
      from cupom_fiscal cf,
           item_cupom_fiscal icf,
           imp_itemcf iic,
           mod_fiscal mf,
           cod_st cst,
           ncm n,
           tipo_imposto ti
     where cf.empresa_id          = en_empresa_id
       and to_date(cf.dt_emissao, 'dd/mm/rrrr') between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin
       and icf.cupomfiscal_id     = cf.id
       and cf.modfiscal_id        = mf.id
       and iic.itemcupomfiscal_id = icf.id
       and iic.codst_id           = cst.id
       and icf.ncm_id             = n.id
       and iic.tipoimp_id         = ti.id
       and mf.cod_mod             = '59' -- SAT
       and ti.cd                  = '5' -- Cofins
	   and cf.dm_st_proc            = 4 -- Autorizado
  group by cf.empresa_id,
           cf.nro_cfe,
           icf.cfop_id,
           cst.cod_st,
           iic.codst_id,
           iic.aliq_apli,
           iic.vl_aliq_prod,
           n.id,
           n.cod_ncm,
           icf.item_id,
           icf.cod_cta;
  --
BEGIN
  --
  vn_fase := 1;
  --
  vt_tab_reg_m800.delete;
  vt_tri_tab_reg_m810.delete;
  --
  if gn_dm_cod_inc_trib in (1, 3) -- Para regime não-cumulativo (1) e regimes não-cumulativo e cumulativo (3)
    or gn_dm_ind_reg_cum = 9 then -- Regime de Competência - Escrituração detalhada, com base nos registros dos Blocos A, C, D e F (9)
    --
    vn_fase := 2;
    --
    --| Nota fiscal de serviço
    for r_empresa in c_empresa loop
      exit when c_empresa%notfound or(c_empresa%notfound) is null;
      --
      vn_fase := 3;
      --
      for r_reg in c_a100(en_empresa_id        => r_empresa.empresa_id,
                          en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe) loop
        exit when c_a100%notfound or(c_a100%notfound) is null;
        --
        vn_fase := 4;
        --
        -- Verifica se a CFOP faz parte da escrituração: 0 - Não, 1 - Sim
        if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id,
                                                       r_reg.cfop_id,
                                                       null,
                                                       r_reg.codst_id) = 1 then
          --
          vn_fase := 4.1;
          --
          if (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('05') and nvl(r_reg.aliq_cofins, 0) = 0) then
            --
            vn_fase := 5;
            --
            if nvl(r_reg.natrecpc_id_imp, 0) = 0 then
              --
              -- Natureza de receita do imposto
              if nvl(r_reg.natrecpc_id_item, 0) = 0 then
                --
                -- Natureza de receita do item/produto
                vn_natrecpc_id := pk_csf_efd_pc.fkg_nat_rec_pc_id(r_empresa.multorg_id,
                                                                  r_reg.codst_id,
                                                                  nvl(r_reg.aliq_cofins, 0),
                                                                  nvl(r_reg.vl_aliq_prod, 0),
                                                                  r_reg.ncm_id,
                                                                  r_reg.cod_ncm);
              else
                --
                vn_natrecpc_id := nvl(r_reg.natrecpc_id_item, 0);
                --
              end if;
              --
            else
              --
              vn_natrecpc_id := nvl(r_reg.natrecpc_id_imp, 0);
              --
            end if;
            --
            vn_fase := 6;
            --
            if nvl(vn_natrecpc_id, 0) = 0 then
              --
              vn_fase := 6.1;
              --
              if nvl(r_reg.ncm_id, 0) = 0 then
                --
                vv_cod_ncm := r_reg.cod_ncm;
                --
              else
                --
                vv_cod_ncm := pk_csf.fkg_cod_ncm_id(en_ncm_id => r_reg.ncm_id);
                --
              end if;
              --
              gv_resumo_log := 'O identificador da natureza de receita conforme código de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') não foi encontrado. Nota fiscal (serviço) nro/série-data = ' || r_reg.vv_inform || ' Código NCM = ' || vv_cod_ncm || '.';
              --
              pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                               ev_mensagem       => gv_mensagem_log,
                                               ev_resumo         => gv_resumo_log,
                                               en_tipo_log       => erro_de_validacao,
                                               en_referencia_id  => gn_referencia_id,
                                               ev_obj_referencia => gv_obj_referencia);
              --
            else
              --
              vn_fase := 7;
              --
              -- Verifica se o CFOP gera receita: 0 - Não Gera / 1 - Gera Receita
              if pk_csf_efd_pc.fkg_gera_recisen_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, null, r_reg.codst_id) = 1 then
                --
                -- CST gera receita: 0 - Não, 1 - Sim
                if pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc(en_natrecpc_id => vn_natrecpc_id) = 1 then
                  --
                  vn_fase := 7.1;
                  --
                  vn_planoconta_id := pk_csf.fkg_natrecpc_plc_id(en_natrecpc_id => vn_natrecpc_id);
                  --
                  if vn_planoconta_id is null then
                    --
                    vn_planoconta_id := pk_csf.fkg_plano_conta_id(ev_cod_cta    => r_reg.cod_cta, -- Código do plano de conta
                                                                  en_empresa_id => r_reg.empresa_id); -- Identificador da empresa
                    --
                  end if;
                  --
                  vn_fase := 7.2;
                  --
                  if vn_planoconta_id is not null then
                    --
                    -- pkb_monta_vetor_m800( en_ch_rec_cstplacta => r_reg.codst_id||trim(replace(replace(r_reg.cod_cta,',',''),'.',''))
                    pkb_monta_vetor_m800(en_ch_rec_cstplacta => r_reg.codst_id || trim(replace(replace(replace(replace(replace(replace(r_reg.cod_cta, ',', ''), '.', ''), ' ', ''), '-', ''), '\', ''), '/', '')),
                                         en_codst_id         => r_reg.codst_id,
                                         en_planoconta_id    => vn_planoconta_id,
                                         en_natrecpc_id      => vn_natrecpc_id,
                                         en_vl_rec           => r_reg.vl_rec,
                                         en_ncm_id           => r_reg.ncm_id);
                  else
                    --
                    if nvl(r_reg.cod_cta, '0') = '0' then
                      --
                      gv_resumo_log := 'Não foi encontrado conta contábil. Nota fiscal (serviço) nro/série-data = ' || r_reg.vv_inform || ' Código NCM = ' || vv_cod_ncm || '.';
                      --
                    else
                      --
                      gv_resumo_log := 'O código de conta contábil ' || r_reg.cod_cta || ' não é válido. Nota fiscal (serviço) nro/série-data = ' || r_reg.vv_inform || ' Código NCM = ' || vv_cod_ncm || '.';
                      --
                    end if;
                    --
                    pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                     ev_mensagem       => gv_mensagem_log,
                                                     ev_resumo         => gv_resumo_log,
                                                     en_tipo_log       => erro_inform_geral,
                                                     en_referencia_id  => gn_referencia_id,
                                                     ev_obj_referencia => gv_obj_referencia);
                    --
                  end if;
                  --
                else
                  --
                  vn_fase := 7.3;
                  --
                  gv_resumo_log := 'O código da natureza de receita (cod = ' || pk_csf_efd_pc.fkg_cod_id_nat_rec_pc(vn_natrecpc_id) || ' conforme código ' || 'de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') está parametrizado para não gerar receita. ' || 'Nota fiscal (serviço) nro/série-data = ' || r_reg.vv_inform || ' Código NCM = ' || vv_cod_ncm || '.';
                  --
                  pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                   ev_mensagem       => gv_mensagem_log,
                                                   ev_resumo         => gv_resumo_log,
                                                   en_tipo_log       => erro_inform_geral,
                                                   en_referencia_id  => gn_referencia_id,
                                                   ev_obj_referencia => gv_obj_referencia);
                  --
                end if; -- pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc( en_natrecpc_id => vn_natrecpc_id ) = 1 -- cst gera receita: 0-não, 1-sim
                --
              end if;
              --
            end if; -- nvl(vn_natrecpc_id,0) = 0
            --
          end if; -- (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('05') and nvl(r_reg.aliq_cofins,0) = 0)
          --
        end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, null, r_reg.codst_id) = 1
      --
      end loop; -- cursor c_a100
    --
    end loop; -- cursor c_empresa
    --
    vn_fase := 8;
    --
    --| Nota fiscal (código 01), nota fiscal avulsa (código 1b), nota fiscal de produtor (código 04) e nfe (código 55)
    for r_empresa in c_empresa loop
      exit when c_empresa%notfound or(c_empresa%notfound) is null;
      --
      vn_fase := 9;
      --
      for r_reg in c_c100(en_empresa_id        => r_empresa.empresa_id,
                          en_dm_dt_escr_dfepoe => r_empresa.dm_dt_escr_dfepoe) loop
        exit when c_c100%notfound or(c_c100%notfound) is null;
        --
        vn_fase := 10;
        --
        -- Verifica se a CFOP faz parte da escrituração: 0 - Não, 1 - Sim
        if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, null, r_reg.codst_id) = 1 then
          --
          vn_fase := 10.1;
          --
          if (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('05') and nvl(r_reg.aliq_cofins, 0) = 0) then
            --
            vn_fase := 11;
            --
            if nvl(r_reg.natrecpc_id_imp, 0) = 0 then
              --
              -- Natureza de receita do imposto
              if nvl(r_reg.natrecpc_id_item, 0) = 0 then
                --
                -- Natureza de receita do item/produto
                vn_natrecpc_id := pk_csf_efd_pc.fkg_nat_rec_pc_id(r_empresa.multorg_id,
                                                                  r_reg.codst_id,
                                                                  nvl(r_reg.aliq_cofins, 0),
                                                                  nvl(r_reg.vl_aliq_prod, 0),
                                                                  r_reg.ncm_id,
                                                                  r_reg.cod_ncm);
              else
                --
                vn_natrecpc_id := nvl(r_reg.natrecpc_id_item, 0);
                --
              end if;
              --
            else
              --
              vn_natrecpc_id := nvl(r_reg.natrecpc_id_imp, 0);
              --
            end if;
            --
            vn_fase := 12;
            --
            if nvl(vn_natrecpc_id, 0) = 0 then
              --
              vn_fase := 12.1;
              --
              if nvl(r_reg.ncm_id, 0) = 0 then
                --
                vv_cod_ncm := r_reg.cod_ncm;
                --
              else
                --
                vv_cod_ncm := pk_csf.fkg_cod_ncm_id(en_ncm_id => r_reg.ncm_id);
                --
              end if;
              --
              gv_resumo_log := 'O identificador da natureza de receita conforme código de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') não foi encontrado. Nota Fiscal (Modelo fiscal 01, 1B, 04 e 55) nro/série-data-item = ' || r_reg.vv_inform || ' Código NCM = ' || vv_cod_ncm || '.';
              --
              pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                               ev_mensagem       => gv_mensagem_log,
                                               ev_resumo         => gv_resumo_log,
                                               en_tipo_log       => erro_de_validacao,
                                               en_referencia_id  => gn_referencia_id,
                                               ev_obj_referencia => gv_obj_referencia);
              --
            else
              --
              vn_fase := 13;
              --
              -- Verifica se o CFOP gera receita: 0 - Não Gera / 1 - Gera Receita
              if pk_csf_efd_pc.fkg_gera_recisen_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, null, r_reg.codst_id) = 1 then
                --
                -- CST gera receita: 0 - Não / 1 - Sim
                if pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc(en_natrecpc_id => vn_natrecpc_id) = 1 then
                  --
                  vn_fase := 13.1;
                  --
                  vn_planoconta_id := pk_csf.fkg_natrecpc_plc_id(en_natrecpc_id => vn_natrecpc_id);
                  --
                  if vn_planoconta_id is null then
                    --
                    vn_planoconta_id := pk_csf.fkg_plano_conta_id(ev_cod_cta    => r_reg.cod_cta, -- Código do plano de conta
                                                                  en_empresa_id => r_reg.empresa_id); -- Identificador da empresa
                    --
                  end if;
                  --
                  vn_fase := 13.2;
                  --
                  if vn_planoconta_id is not null then
                    --
                    -- pkb_monta_vetor_m800( en_ch_rec_cstplacta => r_reg.codst_id||trim(replace(replace(r_reg.cod_cta,',',''),'.',''))
                    pkb_monta_vetor_m800(en_ch_rec_cstplacta => r_reg.codst_id || trim(replace(replace(replace(replace(replace(replace(r_reg.cod_cta, ',', ''), '.', ''), ' ', ''), '-', ''), '\', ''), '/', '')),
                                         en_codst_id         => r_reg.codst_id,
                                         en_planoconta_id    => vn_planoconta_id,
                                         en_natrecpc_id      => vn_natrecpc_id,
                                         en_vl_rec           => nvl(r_reg.vl_rec, 0),
                                         en_ncm_id           => r_reg.ncm_id);
                    --
                  else
                    --
                    if nvl(r_reg.cod_cta, '0') = '0' then
                      --
                      gv_resumo_log := 'Não foi encontrado conta contábil. Nota Fiscal (Modelo fiscal 01, 1B, 04 e 55) nro/série-data-item = ' || r_reg.vv_inform || ' Código NCM = ' || vv_cod_ncm || '.';
                      --
                    else
                      --
                      gv_resumo_log := 'O código de conta contábil ' || r_reg.cod_cta || ' não é válido. Nota Fiscal (Modelo fiscal 01, 1B, 04 e 55) nro/série-data-item = ' || r_reg.vv_inform || ' Código NCM = ' || vv_cod_ncm || '.';
                      --
                    end if;
                    --
                    pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                     ev_mensagem       => gv_mensagem_log,
                                                     ev_resumo         => gv_resumo_log,
                                                     en_tipo_log       => erro_inform_geral,
                                                     en_referencia_id  => gn_referencia_id,
                                                     ev_obj_referencia => gv_obj_referencia);
                    --
                  end if;
                  --
                else
                  --
                  vn_fase := 13.4;
                  --
                  gv_resumo_log := 'O código da natureza de receita (cod = ' || pk_csf_efd_pc.fkg_cod_id_nat_rec_pc(vn_natrecpc_id) || ' conforme código ' || 'de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') está parametrizado para não gerar receita. ' || 'Nota Fiscal (Modelo fiscal 01, 1B, 04 e 55) nro/série-data-item = ' || r_reg.vv_inform || ' Código NCM = ' || vv_cod_ncm || '.';
                  --
                  pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                   ev_mensagem       => gv_mensagem_log,
                                                   ev_resumo         => gv_resumo_log,
                                                   en_tipo_log       => erro_inform_geral,
                                                   en_referencia_id  => gn_referencia_id,
                                                   ev_obj_referencia => gv_obj_referencia);
                  --
                end if; -- pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc( en_natrecpc_id => vn_natrecpc_id ) = 1 -- cst gera receita: 0-não, 1-sim
                --
              end if;
              --
            end if; -- nvl(vn_natrecpc_id,0) = 0
            --
          end if; -- (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('05') and nvl(r_reg.aliq_cofins,0) = 0)
          --
        end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, null, r_reg.codst_id) = 1
      --
      end loop; -- cursor c_c100
    --
    end loop; -- cursor c_empresa
    --
    vn_fase := 14;
    --
    --| Equipamento ECF (código 02 e 2D)
    for r_empresa in c_empresa loop
      exit when c_empresa%notfound or(c_empresa%notfound) is null;
      --
      vn_fase := 15;
      --
      for r_reg in c_c400(en_empresa_id => r_empresa.empresa_id) loop
        exit when c_c400%notfound or(c_c400%notfound) is null;
        --
        vn_fase := 16;
        --
        -- Verifica se a CFOP faz parte da escrituação: 0 - Não / 1 - Sim
        vv_existe := 'N';
        --
        begin
          select 'S'
            into vv_existe
            from doc_fiscal_emit_ecf df,
                 it_doc_fiscal_emit_ecf id
           where df.reducaozecf_id      = r_reg.reducaozecf_id
             and id.docfiscalemitecf_id = df.id
             and pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, id.cfop_id, null, r_reg.codst_id) = 1 -- 0-não, 1-sim
             and rownum = 1;
        exception
          when others then
            vv_existe := 'N';
        end;
        --
        vn_fase := 16.1;
        --
        -- CFOP faz parte da escrituação
        if vv_existe = 'S' then
          --
          vn_fase := 16.2;
          --
          if (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('05') and nvl(r_reg.aliq_cofins, 0) = 0) then
            --
            vn_fase := 17;
            --
            if nvl(r_reg.natrecpc_id_red, 0) = 0 then
              --
              -- Natureza de receita do imposto
              if nvl(r_reg.natrecpc_id_item, 0) = 0 then
                --
                -- Natureza de receita do item/produto
                vn_natrecpc_id := pk_csf_efd_pc.fkg_nat_rec_pc_id(r_empresa.multorg_id,
                                                                  r_reg.codst_id,
                                                                  nvl(r_reg.aliq_cofins, 0),
                                                                  nvl(r_reg.vl_aliq_cofins_quant, 0),
                                                                  r_reg.ncm_id);
              else
                --
                vn_natrecpc_id := nvl(r_reg.natrecpc_id_item, 0);
                --
              end if;
              --
            else
              --
              vn_natrecpc_id := nvl(r_reg.natrecpc_id_red, 0);
              --
            end if;
            --
            vn_fase := 18;
            --
            if nvl(vn_natrecpc_id, 0) = 0 then
              --
              vn_fase := 18.1;
              --
              gv_resumo_log := 'O identificador da natureza de receita conforme código de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') não foi encontrado. Equipamento -> Modelo: ' || r_reg.ecf_mod || ' Número de série de fabricação: ' || r_reg.ecf_fab || ' Número ' || 'do caixa atribuído = ' || r_reg.ecf_cx || ' Modelo fiscal: ' || r_reg.cod_mod || ' Data docto = ' || to_char(r_reg.dt_doc, 'dd/mm/yyyy') || ' Reinício Oper. = ' || r_reg.cro || ' Redução Z = ' || r_reg.crz || ' Nro COO Fin. = ' || r_reg.num_coo_fin || ' Código do item = ' || r_reg.cod_item || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(r_reg.ncm_id) || '.';
              --
              pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                               ev_mensagem       => gv_mensagem_log,
                                               ev_resumo         => gv_resumo_log,
                                               en_tipo_log       => erro_de_validacao,
                                               en_referencia_id  => gn_referencia_id,
                                               ev_obj_referencia => gv_obj_referencia);
              --
            else
              --
              vn_fase := 19;
              --
              -- CST gera receita: 0 - Não / 1 - Sim
              if pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc(en_natrecpc_id => vn_natrecpc_id) = 1 then
                --
                vn_fase := 19.1;
                --
                vn_planoconta_id := pk_csf.fkg_natrecpc_plc_id(en_natrecpc_id => vn_natrecpc_id);
                --
                if vn_planoconta_id is not null then
                  --
                  -- pkb_monta_vetor_m800( en_ch_rec_cstplacta => r_reg.codst_id||trim(replace(replace(pk_csf.fkg_cd_plano_conta(nvl(r_reg.planoconta_id,0)),',',''),'.',''))
                  pkb_monta_vetor_m800(en_ch_rec_cstplacta => r_reg.codst_id || trim(replace(replace(replace(replace(replace(replace(pk_csf.fkg_cd_plano_conta(nvl(r_reg.planoconta_id, 0)), ',', ''), '.', ''), ' ', ''), '-', ''), '\', ''), '/', '')),
                                       en_codst_id         => r_reg.codst_id,
                                       en_planoconta_id    => nvl(vn_planoconta_id, r_reg.planoconta_id),
                                       en_natrecpc_id      => vn_natrecpc_id,
                                       en_vl_rec           => r_reg.vl_rec,
                                       en_ncm_id           => r_reg.ncm_id);
                  --
                else
                  --
                  gv_resumo_log := 'Não há codigo de conta contábil registrado. Equipamento -> Modelo: ' || r_reg.ecf_mod || ' Número de série de fabricação: ' || r_reg.ecf_fab || ' Número ' || 'do caixa atribuído = ' || r_reg.ecf_cx || ' Modelo fiscal: ' || r_reg.cod_mod || ' Data docto = ' || to_char(r_reg.dt_doc, 'dd/mm/yyyy') || ' Reinício Oper. = ' || r_reg.cro || ' Redução Z = ' || r_reg.crz || ' Nro COO Fin. = ' || r_reg.num_coo_fin || ' Código do item = ' || r_reg.cod_item || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(r_reg.ncm_id) || '.';
                  --
                  pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                   ev_mensagem       => gv_mensagem_log,
                                                   ev_resumo         => gv_resumo_log,
                                                   en_tipo_log       => erro_inform_geral,
                                                   en_referencia_id  => gn_referencia_id,
                                                   ev_obj_referencia => gv_obj_referencia);
                  --
                end if;
                --
              else
                --
                vn_fase := 19.2;
                --
                gv_resumo_log := 'O código da natureza de receita (cod = ' || pk_csf_efd_pc.fkg_cod_id_nat_rec_pc(vn_natrecpc_id) || ' conforme código ' || 'de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') está parametrizado para não gerar receita. ' || 'Equipamento -> Modelo: ' || r_reg.ecf_mod || ' Número de série de fabricação: ' || r_reg.ecf_fab || ' Número do caixa ' || 'atribuído = ' || r_reg.ecf_cx || ' Modelo fiscal: ' || r_reg.cod_mod || ' Data docto = ' || to_char(r_reg.dt_doc, 'dd/mm/yyyy') || ' Reinício Oper. = ' || r_reg.cro || ' Redução Z = ' || r_reg.crz || ' Nro COO Fin. = ' || r_reg.num_coo_fin || ' Código do item = ' || r_reg.cod_item || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(r_reg.ncm_id) || '.';
                --
                pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                 ev_mensagem       => gv_mensagem_log,
                                                 ev_resumo         => gv_resumo_log,
                                                 en_tipo_log       => erro_inform_geral,
                                                 en_referencia_id  => gn_referencia_id,
                                                 ev_obj_referencia => gv_obj_referencia);
                --
              end if; -- pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc( en_natrecpc_id => vn_natrecpc_id ) = 1 -- cst gera receita: 0-não, 1-sim
              --
            end if; -- nvl(vn_natrecpc_id,0) = 0
            --
          end if; -- (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('05') and nvl(r_reg.aliq_cofins,0) = 0)
          --
        end if; -- vv_existe = 'S' -- CFOP faz parte da escrituação
      --
      end loop; -- cursor c_c400
    --
    end loop; -- cursor c_empresa
    --
    vn_fase := 20;
    --
    --| Resumo diário das notas fiscais de venda a consumidor (código 02)
    for r_empresa in c_empresa loop
      exit when c_empresa%notfound or(c_empresa%notfound) is null;
      --
      vn_fase := 21;
      --
      for r_reg in c_c380(en_empresa_id => r_empresa.empresa_id) loop
        exit when c_c380%notfound or(c_c380%notfound) is null;
        --
        vn_fase := 22;
        --
        -- Verifica se a CFOP faz parte da receita: 0 - Não, 1 - Sim
        if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, null, r_reg.codst_id) = 1 then
          --
          vn_fase := 22.1;
          --
          if (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('05') and nvl(r_reg.aliq_cofins, 0) = 0) then
            --
            vn_fase := 23;
            --
            if nvl(r_reg.natrecpc_id_item, 0) = 0 then
              --
              -- Natureza de receita do item/produto
              vn_natrecpc_id := pk_csf_efd_pc.fkg_nat_rec_pc_id(r_empresa.multorg_id,
                                                                r_reg.codst_id,
                                                                nvl(r_reg.aliq_cofins, 0),
                                                                nvl(r_reg.aliq_cofins_quant, 0),
                                                                r_reg.ncm_id);
            else
              --
              vn_natrecpc_id := nvl(r_reg.natrecpc_id_item, 0);
              --
            end if;
            --
            vn_fase := 24;
            --
            if nvl(vn_natrecpc_id, 0) = 0 then
              --
              vn_fase := 24.1;
              --
              gv_resumo_log := 'O identificador da natureza de receita conforme código de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') não foi encontrado. Resumo diário -> Série: ' || r_reg.serie || ' Subsérie: ' || r_reg.subserie || ' Número de documento ' || 'inicial = ' || r_reg.num_doc_ini || ' Número de documento final = ' || r_reg.num_doc_fin || ' Modelo fiscal: ' || r_reg.cod_mod || ' Código do item = ' || r_reg.cod_item || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(r_reg.ncm_id) || '.';
              --
              pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                               ev_mensagem       => gv_mensagem_log,
                                               ev_resumo         => gv_resumo_log,
                                               en_tipo_log       => erro_de_validacao,
                                               en_referencia_id  => gn_referencia_id,
                                               ev_obj_referencia => gv_obj_referencia);
              --
            else
              --
              vn_fase := 25;
              --
              -- CST gera receita: 0 - Não / 1 - Sim
              if pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc(en_natrecpc_id => vn_natrecpc_id) = 1 then
                --
                vn_fase := 25.1;
                --
                vn_planoconta_id := pk_csf.fkg_natrecpc_plc_id(en_natrecpc_id => vn_natrecpc_id);
                --
                if vn_planoconta_id is null then
                  --
                  vn_planoconta_id := pk_csf.fkg_plano_conta_id(ev_cod_cta    => r_reg.cod_cta, -- Código do plano de conta
                                                                en_empresa_id => r_reg.empresa_id); -- Identificador da empresa
                  --
                end if;
                --
                vn_fase := 25.2;
                --
                if vn_planoconta_id is not null then
                  --
                  -- pkb_monta_vetor_m800( en_ch_rec_cstplacta => r_reg.codst_id||trim(replace(replace(r_reg.cod_cta,',',''),'.',''))
                  pkb_monta_vetor_m800(en_ch_rec_cstplacta => r_reg.codst_id || trim(replace(replace(replace(replace(replace(replace(r_reg.cod_cta, ',', ''), '.', ''), ' ', ''), '-', ''), '\', ''), '/', '')),
                                       en_codst_id         => r_reg.codst_id,
                                       en_planoconta_id    => vn_planoconta_id,
                                       en_natrecpc_id      => vn_natrecpc_id,
                                       en_vl_rec           => r_reg.vl_rec,
                                       en_ncm_id           => r_reg.ncm_id);
                  --
                else
                  --
                  if nvl(r_reg.cod_cta, '0') = '0' then
                    --
                    gv_resumo_log := 'Não foi encontrado conta contábil. Resumo diário -> Série: ' || r_reg.serie || ' Subsérie: ' || r_reg.subserie || ' Número de documento ' || 'inicial = ' || r_reg.num_doc_ini || ' Número de documento final = ' || r_reg.num_doc_fin || ' Modelo fiscal: ' || r_reg.cod_mod || ' Código do item = ' || r_reg.cod_item || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(r_reg.ncm_id) || '.';
                    --
                  else
                    --
                    gv_resumo_log := 'O código de conta contábil ' || r_reg.cod_cta || ' não é válido. Resumo diário -> Série: ' || r_reg.serie || ' Subsérie: ' || r_reg.subserie || ' Número de documento ' || 'inicial = ' || r_reg.num_doc_ini || ' Número de documento final = ' || r_reg.num_doc_fin || ' Modelo fiscal: ' || r_reg.cod_mod || ' Código do item = ' || r_reg.cod_item || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(r_reg.ncm_id) || '.';
                    --
                  end if;
                  --
                  pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                   ev_mensagem       => gv_mensagem_log,
                                                   ev_resumo         => gv_resumo_log,
                                                   en_tipo_log       => erro_inform_geral,
                                                   en_referencia_id  => gn_referencia_id,
                                                   ev_obj_referencia => gv_obj_referencia);
                  --
                end if;
                --
              else
                --
                vn_fase := 25.3;
                --
                gv_resumo_log := 'O código da natureza de receita (cod = ' || pk_csf_efd_pc.fkg_cod_id_nat_rec_pc(vn_natrecpc_id) || ' conforme código ' || 'de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') está parametrizado para não gerar receita. ' || 'Resumo diário -> Série: ' || r_reg.serie || ' Subsérie: ' || r_reg.subserie || ' Número de documento inicial = ' || r_reg.num_doc_ini || ' Número de documento final = ' || r_reg.num_doc_fin || ' Modelo fiscal: ' || r_reg.cod_mod || ' Código do item = ' || r_reg.cod_item || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(r_reg.ncm_id) || '.';
                --
                pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                 ev_mensagem       => gv_mensagem_log,
                                                 ev_resumo         => gv_resumo_log,
                                                 en_tipo_log       => erro_inform_geral,
                                                 en_referencia_id  => gn_referencia_id,
                                                 ev_obj_referencia => gv_obj_referencia);
                --
              end if; -- pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc( en_natrecpc_id => vn_natrecpc_id ) = 1 -- cst gera receita: 0-não, 1-sim
              --
            end if; -- nvl(vn_natrecpc_id,0) = 0
            --
          end if; -- (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('05') and nvl(r_reg.aliq_cofins,0) = 0)
          --
        end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, null, r_reg.codst_id) = 1
      --
      end loop; -- cursor c_c380
    --
    end loop; -- cursor c_empresa
    --
    vn_fase := 26;
    --
    --| Demais documentos e operações geradoras de contribuição e créditos
    for r_empresa in c_empresa loop
      exit when c_empresa%notfound or(c_empresa%notfound) is null;
      --
      vn_fase := 27;
      --
      -- (POR ITEM)	  
      for r_reg in c_f100(en_empresa_id => r_empresa.empresa_id) loop
        exit when c_f100%notfound or(c_f100%notfound) is null;
        --
        vn_fase := 28;
        --
        if (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('05') and nvl(r_reg.aliq_cofins, 0) = 0) then
          --
          vn_fase := 29;
          --
          if nvl(r_reg.natrecpc_id_item, 0) = 0 then
            --
            -- Natureza de receita do item/produto
            vn_natrecpc_id := pk_csf_efd_pc.fkg_nat_rec_pc_id(r_empresa.multorg_id,
                                                              r_reg.codst_id,
                                                              nvl(r_reg.aliq_cofins, 0), 0,
                                                              r_reg.ncm_id);
          else
            --
            vn_natrecpc_id := nvl(r_reg.natrecpc_id_item, 0);
            --
          end if;
          --
          vn_fase := 30;
          --
          if nvl(vn_natrecpc_id, 0) = 0 then
            --
            vn_fase := 30.1;
            --
            gv_resumo_log := 'O identificador da natureza de receita conforme código de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') não foi encontrado. Demais documentos -> Indicador de operação: ' || pk_csf.fkg_dominio('DEM_DOC_OPER_GER_CC.DM_IND_OPER', r_reg.dm_ind_oper) || ' Data da operação: ' || to_date(r_reg.dt_oper, 'dd/mm/rrrr') || ' Código de ST = ' || pk_csf.fkg_cod_st_cod(en_id_st => r_reg.codst_id) || ' Código do item = ' || r_reg.cod_item || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(r_reg.ncm_id) || '.';
            --
            pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                             ev_mensagem       => gv_mensagem_log,
                                             ev_resumo         => gv_resumo_log,
                                             en_tipo_log       => erro_de_validacao,
                                             en_referencia_id  => gn_referencia_id,
                                             ev_obj_referencia => gv_obj_referencia);
            --
          else
            --
            vn_fase := 31;
            --
            -- CST gera receita: 0 - Não / 1 - Sim
            if pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc(en_natrecpc_id => vn_natrecpc_id) = 1 then
              --
              vn_fase := 31.1;
              --
              vn_planoconta_id := pk_csf.fkg_natrecpc_plc_id(en_natrecpc_id => vn_natrecpc_id);
              --
              if vn_planoconta_id is not null then
                --
                pkb_monta_vetor_m800(en_ch_rec_cstplacta => r_reg.codst_id || trim(replace(replace(replace(replace(replace(replace(pk_csf.fkg_cd_plano_conta(nvl(r_reg.planoconta_id, 0)), ',', ''), '.', ''), ' ', ''), '-', ''), '\', ''), '/', '')),
                                     en_codst_id         => r_reg.codst_id,
                                     en_planoconta_id    => nvl(vn_planoconta_id,
                                                                r_reg.planoconta_id),
                                     en_natrecpc_id      => vn_natrecpc_id,
                                     en_vl_rec           => r_reg.vl_rec,
                                     en_ncm_id           => r_reg.ncm_id);
                --
              else
                --
                gv_resumo_log := 'Não há codigo de conta contábil registrado. Demais documentos -> Indicador de operação: ' || pk_csf.fkg_dominio('DEM_DOC_OPER_GER_CC.DM_IND_OPER', r_reg.dm_ind_oper) || ' Data da operação: ' || to_date(r_reg.dt_oper, 'dd/mm/rrrr') || ' Código de ST = ' || pk_csf.fkg_cod_st_cod(en_id_st => r_reg.codst_id) || ' Código do item = ' || r_reg.cod_item || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(r_reg.ncm_id) || '.';
                --
                pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                 ev_mensagem       => gv_mensagem_log,
                                                 ev_resumo         => gv_resumo_log,
                                                 en_tipo_log       => erro_inform_geral,
                                                 en_referencia_id  => gn_referencia_id,
                                                 ev_obj_referencia => gv_obj_referencia);
                --
              end if;
              --
            else
              --
              vn_fase := 31.2;
              --
              gv_resumo_log := 'O código da natureza de receita (cod = ' || pk_csf_efd_pc.fkg_cod_id_nat_rec_pc(vn_natrecpc_id) || ' conforme código ' || 'de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') está parametrizado para não gerar receita. ' || 'Demais documentos -> Indicador de operação: ' || pk_csf.fkg_dominio('DEM_DOC_OPER_GER_CC.DM_IND_OPER', r_reg.dm_ind_oper) || ' Data da operação: ' || to_date(r_reg.dt_oper, 'dd/mm/rrrr') || ' Código de ST = ' || pk_csf.fkg_cod_st_cod(en_id_st => r_reg.codst_id) || ' Código do item = ' || r_reg.cod_item || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(r_reg.ncm_id) || '.';
              --
              pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                               ev_mensagem       => gv_mensagem_log,
                                               ev_resumo         => gv_resumo_log,
                                               en_tipo_log       => erro_inform_geral,
                                               en_referencia_id  => gn_referencia_id,
                                               ev_obj_referencia => gv_obj_referencia);
              --
            end if; -- pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc( en_natrecpc_id => vn_natrecpc_id ) = 1 -- cst gera receita: 0-não, 1-sim
            --
          end if; -- nvl(vn_natrecpc_id,0) = 0
          ---
        end if; -- (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('05') and nvl(r_reg.aliq_cofins,0) = 0)
      --
      end loop; -- cursor c_f100
      --
      -- (POR CONTA CONTABIL)	  
      for r_reg in c_f100_planoconta(en_empresa_id => r_empresa.empresa_id) loop
        exit when c_f100_planoconta%notfound or(c_f100_planoconta%notfound) is null;
        --
        vn_fase := 28;
        --
        if (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('05') and nvl(r_reg.aliq_cofins, 0) = 0) then
          --
          vn_fase := 29;
          --
          if nvl(r_reg.natrecpc_id_plconta, 0) = 0 then
             --
             gv_resumo_log := 'Não há codigo de conta contábil registrado. Demais documentos -> Indicador de operação: ' || pk_csf.fkg_dominio('DEM_DOC_OPER_GER_CC.DM_IND_OPER', r_reg.dm_ind_oper) || ' Data da operação: ' || to_date(r_reg.dt_oper, 'dd/mm/rrrr') || ' Código de ST = ' || pk_csf.fkg_cod_st_cod(en_id_st => r_reg.codst_id) || '.';
             --
             pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                              ev_mensagem       => gv_mensagem_log,
                                              ev_resumo         => gv_resumo_log,
                                              en_tipo_log       => erro_inform_geral,
                                              en_referencia_id  => gn_referencia_id,
                                              ev_obj_referencia => gv_obj_referencia);
             --
          else
             --
             vn_natrecpc_id := nvl(r_reg.natrecpc_id_plconta, 0);
             --
          end if;
          --
          vn_fase := 30;
          --
          if nvl(vn_natrecpc_id, 0) = 0 then
            --
            vn_fase := 30.1;
            --
            gv_resumo_log := 'O identificador da natureza de receita conforme código de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') não foi encontrado. Demais documentos -> Indicador de operação: ' || pk_csf.fkg_dominio('DEM_DOC_OPER_GER_CC.DM_IND_OPER', r_reg.dm_ind_oper) || ' Data da operação: ' || to_date(r_reg.dt_oper, 'dd/mm/rrrr') || ' Código de ST = ' || pk_csf.fkg_cod_st_cod(en_id_st => r_reg.codst_id) || '.';
            --
            pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                             ev_mensagem       => gv_mensagem_log,
                                             ev_resumo         => gv_resumo_log,
                                             en_tipo_log       => erro_de_validacao,
                                             en_referencia_id  => gn_referencia_id,
                                             ev_obj_referencia => gv_obj_referencia);
            --
          else
            --
            vn_fase := 31;
            --
            -- CST gera receita: 0 - Não / 1 - Sim
            if pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc(en_natrecpc_id => vn_natrecpc_id) = 1 then
              --
              vn_fase := 31.1;
              --
              vn_planoconta_id := pk_csf.fkg_natrecpc_plc_id(en_natrecpc_id => vn_natrecpc_id);
              --
              if vn_planoconta_id is not null then
                --
                pkb_monta_vetor_m800(en_ch_rec_cstplacta => r_reg.codst_id || trim(replace(replace(replace(replace(replace(replace(pk_csf.fkg_cd_plano_conta(nvl(r_reg.planoconta_id, 0)), ',', ''), '.', ''), ' ', ''), '-', ''), '\', ''), '/', '')),
                                     en_codst_id         => r_reg.codst_id,
                                     en_planoconta_id    => nvl(vn_planoconta_id, r_reg.planoconta_id),
                                     en_natrecpc_id      => vn_natrecpc_id,
                                     en_vl_rec           => r_reg.vl_rec,
                                     en_ncm_id           => null);
                --
              else
                --
                gv_resumo_log := 'Não há codigo de conta contábil registrado. Demais documentos -> Indicador de operação: ' || pk_csf.fkg_dominio('DEM_DOC_OPER_GER_CC.DM_IND_OPER', r_reg.dm_ind_oper) || ' Data da operação: ' || to_date(r_reg.dt_oper, 'dd/mm/rrrr') || ' Código de ST = ' || pk_csf.fkg_cod_st_cod(en_id_st => r_reg.codst_id) || '.';
                --
                pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                 ev_mensagem       => gv_mensagem_log,
                                                 ev_resumo         => gv_resumo_log,
                                                 en_tipo_log       => erro_inform_geral,
                                                 en_referencia_id  => gn_referencia_id,
                                                 ev_obj_referencia => gv_obj_referencia);
                --
              end if;
              --
            else
              --
              vn_fase := 31.2;
              --
              gv_resumo_log := 'O código da natureza de receita (cod = ' || pk_csf_efd_pc.fkg_cod_id_nat_rec_pc(vn_natrecpc_id) || ' conforme código ' || 'de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') está parametrizado para não gerar receita. ' || 'Demais documentos -> Indicador de operação: ' || pk_csf.fkg_dominio('DEM_DOC_OPER_GER_CC.DM_IND_OPER', r_reg.dm_ind_oper) || ' Data da operação: ' || to_date(r_reg.dt_oper, 'dd/mm/rrrr') || ' Código de ST = ' || pk_csf.fkg_cod_st_cod(en_id_st => r_reg.codst_id) || '.';
              --
              pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                               ev_mensagem       => gv_mensagem_log,
                                               ev_resumo         => gv_resumo_log,
                                               en_tipo_log       => erro_inform_geral,
                                               en_referencia_id  => gn_referencia_id,
                                               ev_obj_referencia => gv_obj_referencia);
              --
            end if; -- pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc( en_natrecpc_id => vn_natrecpc_id ) = 1 -- cst gera receita: 0-não, 1-sim
            --
          end if; -- nvl(vn_natrecpc_id,0) = 0
          ---
        end if; -- (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod( r_reg.codst_id ) in ('05') and nvl(r_reg.aliq_cofins,0) = 0)
      --
      end loop; -- cursor c_f100_planoconta
      --	  
      vn_fase := 32;
      --
      --| DEMAIS DOCUMENTOS E OPERAÇÕES GERADORAS DE CONTRIBUIÇÃO E CRÉDITOS - Não validados - COFINS
      begin
        select count(*)
          into vn_qtde
          from dem_doc_oper_ger_cc dd,
               cod_st cs
         where dd.empresa_id      = r_empresa.empresa_id
           and dd.dt_oper between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin
           and dd.dm_st_proc      <> 1 -- 1 - Validado
           and dd.dm_ind_oper     in (1, 2)
           and dd.dm_gera_receita = 1 -- 0 - Não Gera / 1 - Gera Receita
           and cs.id              = dd.codst_id_cofins
           and ((cs.cod_st in ('04', '06', '07', '08', '09')) or (cs.cod_st in ('05') and nvl(dd.aliq_cofins, 0) = 0));
      exception
        when others then
          vn_qtde := 0;
      end;
      --
      vn_fase := 33;
      --
      if nvl(vn_qtde, 0) <> 0 then
        --
        pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                         ev_mensagem       => gv_mensagem_log,
                                         ev_resumo         => 'Não foram recuperados alguns dos dados de DEMAIS DOCUMENTOS E OPERAÇÕES GERADORAS DE ' || 'CONTRIBUIÇÃO E CRÉDITOS (Bloco F100) devido a situação não estar como VALIDADO - Imposto COFINS.',
                                         en_tipo_log       => erro_inform_geral,
                                         en_referencia_id  => gn_referencia_id,
                                         ev_obj_referencia => gv_obj_referencia);
        --
      end if;
      --
      vn_fase := 34;
      --
      --| DEMAIS DOCUMENTOS E OPERAÇÕES GERADORAS DE CONTRIBUIÇÃO E CRÉDITOS - Sem item e sem ncm - COFINS
      begin
        select count(*)
          into vn_qtde
          from dem_doc_oper_ger_cc dd,
               cod_st cs
         where dd.empresa_id      = r_empresa.empresa_id
           and dd.dt_oper between gt_row_per_rec_isenta_cofins.dt_ini and gt_row_per_rec_isenta_cofins.dt_fin
           and dd.dm_st_proc      = 1 -- 1 - Validado
           and dd.dm_ind_oper     in (1, 2)
           and dd.item_id         is null
           and dd.dm_gera_receita = 1 -- 0 - Não Gera / 1 - Gera Receita
           and cs.id              = dd.codst_id_cofins
           and ((cs.cod_st in ('04', '06', '07', '08', '09')) or (cs.cod_st in ('05') and nvl(dd.aliq_cofins, 0) = 0));
      exception
        when others then
          vn_qtde := 0;
      end;
      --
      vn_fase := 35;
      --
      if nvl(vn_qtde, 0) <> 0 then
        --
        pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                         ev_mensagem       => gv_mensagem_log,
                                         ev_resumo         => 'Foram recuperados alguns dos dados de DEMAIS DOCUMENTOS E OPERAÇÕES GERADORAS DE ' || 'CONTRIBUIÇÃO E CRÉDITOS (Bloco F100) que não possuem Item/Produto e o NCM não foi ' || 'recuperado - Imposto COFINS.',
                                         en_tipo_log       => erro_inform_geral,
                                         en_referencia_id  => gn_referencia_id,
                                         ev_obj_referencia => gv_obj_referencia);
        --
      end if;
      --
    end loop; -- cursor c_empresa
    --
    vn_fase := 36;
    --
    --| Apur. das Oper. das Inst. Financeiras, Seguradoras, Entidades de Previdência Privada, Operadoras de Planos de Assistência à Saúde e demais Pessoas Jurídicas referidas
    for r_empresa in c_empresa loop
      exit when c_empresa%notfound or(c_empresa%notfound) is null;
      --
      vn_fase := 37;
      --
      for r_reg in c_i100(en_empresa_id => r_empresa.empresa_id) loop
        exit when c_i100%notfound or(c_i100%notfound) is null;
        --
        if (pk_csf.fkg_cod_st_cod(r_reg.codst_id_pis_cofins) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod(r_reg.codst_id_pis_cofins) in ('05') and nvl(r_reg.aliq_pis, 0) = 0) then
          --
          vn_fase := 38;
          --
          vn_codst_id_pis := null;
          --
          vn_codst_id_pis := pk_csf.fkg_Cod_ST_id(ev_cod_st     => pk_csf.fkg_cod_st_cod(r_reg.codst_id_pis_cofins),
                                                  en_tipoimp_id => pk_csf.fkg_Tipo_Imposto_id(en_cd => 4)); -- PIS
          --
          if nvl(null, 0) = 0 then
            --
            -- Natureza de receita do item/produto
            vn_natrecpc_id := pk_csf_efd_pc.fkg_nat_rec_pc_id(r_empresa.multorg_id,
                                                              vn_codst_id_pis,
                                                              nvl(r_reg.aliq_pis, 0),
                                                              0,
                                                              0);
          else
            --
            vn_natrecpc_id := nvl(null, 0);
            --
          end if;
          --
          vn_fase := 39;
          --
          if nvl(vn_natrecpc_id, 0) = 0 then
            --
            vn_fase := 40;
            --
            gv_resumo_log := 'O identificador da natureza de receita conforme código de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id_pis_cofins) || ') não foi encontrado. Demais documentos -> Data da operação: ' || to_date(r_reg.dt_inicial, 'dd/mm/rrrr') || ' Código de ST = ' || pk_csf.fkg_cod_st_cod(en_id_st => r_reg.codst_id_pis_cofins) || ' Código do item = ' || nvl(null, 0) || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(nvl(null, 0)) || '.';
            --
            pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                             ev_mensagem       => gv_mensagem_log,
                                             ev_resumo         => gv_resumo_log,
                                             en_tipo_log       => erro_de_validacao,
                                             en_referencia_id  => gn_referencia_id,
                                             ev_obj_referencia => gv_obj_referencia);
            --
          else
            --
            vn_fase := 41;
            --
            -- CST gera receita: 0 - Não / 1 - Sim
            if pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc(en_natrecpc_id => vn_natrecpc_id) = 1 then
              --
              vn_fase := 41.1;
              --
              if vn_planoconta_id is not null then
                --
                pkb_monta_vetor_m800(en_ch_rec_cstplacta => vn_codst_id_pis || trim(replace(replace(replace(replace(replace(replace(pk_csf.fkg_cd_plano_conta(nvl(r_reg.planoconta_id, 0)), ',', ''), '.', ''), ' ', ''), '-', ''), '\', ''), '/', '')),
                                     en_codst_id         => vn_codst_id_pis,
                                     en_planoconta_id    => r_reg.planoconta_id,
                                     en_natrecpc_id      => vn_natrecpc_id,
                                     en_vl_rec           => r_reg.vl_rec,
                                     en_ncm_id           => null);
                --
              else
                --
                gv_resumo_log := 'Não há codigo de conta contábil registrado. Demais documentos -> Data da operação: ' || to_date(r_reg.dt_inicial, 'dd/mm/rrrr') || ' Código de ST = ' || pk_csf.fkg_cod_st_cod(en_id_st => r_reg.codst_id_pis_cofins) || ' Código do item = ' || nvl(null, 0) || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(nvl(null, 0)) || '.';
                --
                pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                 ev_mensagem       => gv_mensagem_log,
                                                 ev_resumo         => gv_resumo_log,
                                                 en_tipo_log       => erro_inform_geral,
                                                 en_referencia_id  => gn_referencia_id,
                                                 ev_obj_referencia => gv_obj_referencia);
                --
              end if;
              --
            else
              --
              vn_fase := 41.2;
              --
              gv_resumo_log := 'O código da natureza de receita (cod = ' || pk_csf_efd_pc.fkg_cod_id_nat_rec_pc(vn_natrecpc_id) || ' conforme código ' || 'de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(vn_codst_id_pis) || ') está parametrizado para não gerar receita. ' || 'Demais documentos -> Data da operação: ' || to_date(r_reg.dt_inicial, 'dd/mm/rrrr') || ' Código de ST = ' || pk_csf.fkg_cod_st_cod(en_id_st => vn_codst_id_pis) || ' Código do item = ' || nvl(null, 0) || ' Código NCM = ' || pk_csf.fkg_cod_ncm_id(nvl(null, 0)) || '.';
              --
              pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                               ev_mensagem       => gv_mensagem_log,
                                               ev_resumo         => gv_resumo_log,
                                               en_tipo_log       => erro_inform_geral,
                                               en_referencia_id  => gn_referencia_id,
                                               ev_obj_referencia => gv_obj_referencia);
              --
            end if;
            --
          end if;
          --
        end if;
        --
      end loop;
      --
    end loop; -- cursor c_empresa
    --
  end if; -- gn_dm_cod_inc_trib in (1, 3)
  --
  vn_fase := 42;
  --
  -- Regime cumulativo (2) e regimes não-cumulativo e cumulativo (3)*/
  if gn_dm_cod_inc_trib in (2, 3) then
    --
    vn_fase := 43;
    --
    if gn_dm_ind_reg_cum = 1 then
      --
      vn_fase := 44;
      --
      -- Regime de Caixa Escrituração consolidada (Registro F500)
      for r_empresa in c_empresa loop
        exit when c_empresa%notfound or(c_empresa%notfound) is null;
        --
        vn_fase := 45;
        --
        for r_reg in c_f500(en_empresa_id => r_empresa.empresa_id) loop
          exit when c_f500%notfound or(c_f500%notfound) is null;
          --
          vn_fase := 46;
          --
          if nvl(r_reg.planoconta_id, 0) > 0 then
            --
            vn_fase := 46.1;
            --
            if (pk_csf.fkg_cod_st_cod( r_reg.codst_id_cofins ) in ('04', '06', '07', '08', '09')) or
               (pk_csf.fkg_cod_st_cod( r_reg.codst_id_cofins ) in ('05') and nvl(r_reg.aliq_cofins,0) = 0) then
              --
              pkb_monta_vetor_m800_pregc(en_ch_rec_cstplacta => r_reg.codst_id_cofins || r_reg.planoconta_id /*trim(replace(replace(replace(replace(replace(replace(vv_cod_cta,',',''),'.',''),' ', ''),'-',''),'\',''),'/',''))*/,
                                         en_codst_id         => r_reg.codst_id_cofins,
                                         en_planoconta_id    => r_reg.planoconta_id,
                                         en_vl_rec           => r_reg.vl_rec_caixa);
              --
            end if;                      
            --
          else
            --
            vn_fase := 46.2;
            --
            gv_resumo_log := 'O código da plano de conta não está parametrizado no Regime de Caixa Escrituração consolidada (Registro F500)';
            --
            pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                             ev_mensagem       => gv_mensagem_log,
                                             ev_resumo         => gv_resumo_log,
                                             en_tipo_log       => erro_de_sistema,
                                             en_referencia_id  => gn_referencia_id,
                                             ev_obj_referencia => gv_obj_referencia);
            --
          end if;
          --
        end loop;
        --
      end loop;
      --
    end if;
    --
    if gn_dm_ind_reg_cum = 2 then
      --
      vn_fase := 47;
      --
      -- Regime de Competência - Escrituração consolidada (Registro F550)
      for r_empresa in c_empresa loop
        exit when c_empresa%notfound or(c_empresa%notfound) is null;
        --
        vn_fase := 48;
        --
        for r_reg in c_f550(en_empresa_id => r_empresa.empresa_id) loop
          exit when c_f550%notfound or(c_f550%notfound) is null;
          --
          vn_fase := 49;
          --
          if (nvl(r_reg.planoconta_id, 0)) > 0 then
            --
            vn_fase := 49.1;
            --
            if (pk_csf.fkg_cod_st_cod( r_reg.codst_id_cofins ) in ('04', '06', '07', '08', '09')) or
               (pk_csf.fkg_cod_st_cod( r_reg.codst_id_cofins ) in ('05') and nvl(r_reg.aliq_cofins,0) = 0) then
              --
              pkb_monta_vetor_m800_pregc(en_ch_rec_cstplacta => r_reg.codst_id_cofins || r_reg.planoconta_id /*trim(replace(replace(replace(replace(replace(replace(vv_cod_cta,',',''),'.',''),' ', ''),'-',''),'\',''),'/',''))*/,
                                         en_codst_id         => r_reg.codst_id_cofins, --r_reg.codst_id
                                         en_planoconta_id    => r_reg.planoconta_id,
                                         en_vl_rec           => r_reg.vl_rec_comp);
              --
            end if;  
            --
          else
            --
            vn_fase := 49.2;
            --
            gv_resumo_log := 'O código da plano de conta não está parametrizado no Regime de Caixa Escrituração consolidada (Registro F550)';
            --
            pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                             ev_mensagem       => gv_mensagem_log,
                                             ev_resumo         => gv_resumo_log,
                                             en_tipo_log       => erro_de_sistema,
                                             en_referencia_id  => gn_referencia_id,
                                             ev_obj_referencia => gv_obj_referencia);
            --
          end if;
          --
        end loop;
        --
      end loop;
      --
    end if;
    --
  end if;
  --
  vn_fase := 50;
  --
  for r_empresa in c_empresa loop
    exit when c_empresa%notfound or(c_empresa%notfound) is null;
    --
    vn_fase := 51;
    --
    for r_reg in c_c860(en_empresa_id => r_empresa.empresa_id) loop
      exit when c_c860%notfound or(c_c860%notfound) is null;
      --
      -- Verifica se a CFOP faz parte da escrituração: 0 - Não / 1 - Sim
      if pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, r_reg.codst_id, null) = 1 then
        --
        vn_fase := 52;
        --
        if (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('04', '06', '07', '08', '09')) or (pk_csf.fkg_cod_st_cod(r_reg.codst_id) in ('05') and nvl(r_reg.aliq_cofins, 0) = 0) then
          --
          vn_natrecpc_id := pk_csf_efd_pc.fkg_nat_rec_pc_id(r_empresa.multorg_id,
                                                            r_reg.codst_id,
                                                            nvl(r_reg.aliq_cofins, 0),
                                                            nvl(r_reg.vl_aliq_prod, 0),
                                                            r_reg.ncm_id,
                                                            r_reg.cod_ncm);
          --
          if nvl(vn_natrecpc_id, 0) = 0 then
            --
            vn_fase := 52.1;
            --
            if nvl(r_reg.ncm_id, 0) = 0 then
              --
              vv_cod_ncm := r_reg.cod_ncm;
              --
            else
              --
              vv_cod_ncm := pk_csf.fkg_cod_ncm_id(en_ncm_id => r_reg.ncm_id);
              --
            end if;
            --
            gv_resumo_log := 'O identificador da natureza de receita conforme código de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') não foi encontrado. Cupom fiscal (SAT) nro = ' || r_reg.nro_cfe || ' Código NCM = ' || vv_cod_ncm || '.';
            --
            pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                             ev_mensagem       => gv_mensagem_log,
                                             ev_resumo         => gv_resumo_log,
                                             en_tipo_log       => erro_de_validacao,
                                             en_referencia_id  => gn_referencia_id,
                                             ev_obj_referencia => gv_obj_referencia);
            --
          else
            --
            vn_fase := 53;
            --
            -- Verifica se o CFOP gera receita: 0 - Não Gera / 1 - Gera Receita
            if pk_csf_efd_pc.fkg_gera_recisen_cfop_empr(r_empresa.empresa_id, r_reg.cfop_id, r_reg.codst_id, null) = 1 then
              --
              -- CST gera receita: 0 - Não / 1 - Sim
              if pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc(en_natrecpc_id => vn_natrecpc_id) = 1 then
                --
                vn_fase := 53.1;
                --
                vn_planoconta_id := pk_csf.fkg_natrecpc_plc_id(en_natrecpc_id => vn_natrecpc_id);
                --
                if vn_planoconta_id is null then
                  --
                  vn_planoconta_id := pk_csf.fkg_plano_conta_id(ev_cod_cta    => r_reg.cod_cta, -- Código do plano de conta
                                                                en_empresa_id => r_reg.empresa_id); -- Identificador da empresa
                  --
                end if;
                --
                vn_fase := 53.2;
                --
                if vn_planoconta_id is not null then
                  --
                  null;
                  --
                  pkb_monta_vetor_m800(en_ch_rec_cstplacta => r_reg.codst_id || trim(replace(replace(replace(replace(replace(replace(r_reg.cod_cta, ',', ''), '.', ''), ' ', ''), '-', ''), '\', ''), '/', '')),
                                       en_codst_id         => r_reg.codst_id,
                                       en_planoconta_id    => vn_planoconta_id,
                                       en_natrecpc_id      => vn_natrecpc_id,
                                       en_vl_rec           => nvl(r_reg.vl_rec, 0),
                                       en_ncm_id           => r_reg.ncm_id);
                  --
                else
                  --
                  if nvl(r_reg.cod_cta, '0') = '0' then
                    --
                    gv_resumo_log := 'Não foi encontrado conta contábil. Cupom fiscal (Sat) nro = ' || r_reg.nro_cfe || ' Código NCM = ' || vv_cod_ncm || '.';
                    --
                  else
                    --
                    gv_resumo_log := 'O código de conta contábil ' || r_reg.cod_cta || ' não é válido. Cupom fiscal (Sat) nro = ' || r_reg.nro_cfe || ' Código NCM = ' || vv_cod_ncm || '.';
                    --
                  end if;
                  --
                  pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                   ev_mensagem       => gv_mensagem_log,
                                                   ev_resumo         => gv_resumo_log,
                                                   en_tipo_log       => erro_inform_geral,
                                                   en_referencia_id  => gn_referencia_id,
                                                   ev_obj_referencia => gv_obj_referencia);
                  --
                end if;
                --
              else
                --
                vn_fase := 53.3;
                --
                gv_resumo_log := 'O código da natureza de receita (cod = ' || pk_csf_efd_pc.fkg_cod_id_nat_rec_pc(vn_natrecpc_id) || ' conforme código ' || 'de situação tributária (ST = ' || pk_csf.fkg_cod_st_cod(r_reg.codst_id) || ') está parametrizado para não gerar receita. Cupom fiscal (SAT) nro = ' || r_reg.nro_cfe || '  Código NCM = ' || vv_cod_ncm || '.';
                --
                pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                                 ev_mensagem       => gv_mensagem_log,
                                                 ev_resumo         => gv_resumo_log,
                                                 en_tipo_log       => erro_inform_geral,
                                                 en_referencia_id  => gn_referencia_id,
                                                 ev_obj_referencia => gv_obj_referencia);
                --
              end if; -- pk_csf_efd_pc.fkg_dm_gerareceita_natrecpc( en_natrecpc_id => vn_natrecpc_id ) = 1 -- cst gera receita: 0-não, 1-sim
              --
            end if;
            --
          end if; -- nvl(vn_natrecpc_id,0) = 0
          --
        end if; --  pk_csf.fkg_cod_st_cod
        --
      end if; -- pk_csf_efd_pc.fkg_gera_escr_efdpc_cfop_empr
      --
    end loop; -- c_c860
    --
  end loop; -- c_empresa
  --
  --
EXCEPTION
  when others then
    --
    gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_monta_dados_m800 (fase = ' || vn_fase || '). Erro = ' || sqlerrm;
    --
    declare
      vn_loggenerico_id log_generico.id%type;
    begin
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_resumo_log,
                                       en_tipo_log       => erro_de_sistema,
                                       en_referencia_id  => gn_referencia_id,
                                       ev_obj_referencia => gv_obj_referencia);
    exception
      when others then
        null;
    end;
    --
    raise_application_error(-20101, gv_resumo_log);
    --
END PKB_MONTA_DADOS_M800;

--------------------------------------------------------------------------------
--| Procedimento recupera os dados do período das receitas isentas - Bloco M800
--------------------------------------------------------------------------------
PROCEDURE PKB_DADOS_PER_REC_COFINS_M800( EN_PERRECISENTACOFINS_ID IN PER_REC_ISENTA_COFINS.ID%TYPE ) IS
   --
   vn_fase             number := 0;
   vv_nome_empresa     varchar2(1000) := null;
   ve_invalido         exception; 
   --
   cursor c_per_rec_isenta_cofins is
      select *
        from per_rec_isenta_cofins pa
       where pa.id  = en_perrecisentacofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   gt_row_per_rec_isenta_cofins := null;
   --
   vn_fase := 2;
   --
   open c_per_rec_isenta_cofins;
   fetch c_per_rec_isenta_cofins into gt_row_per_rec_isenta_cofins;
   close c_per_rec_isenta_cofins;
   --
   vn_fase := 3;
   -- Alterar os valores de datas inicial e final para considerar a hora.
   gt_row_per_rec_isenta_cofins.dt_ini := trunc(gt_row_per_rec_isenta_cofins.dt_ini);
   gt_row_per_rec_isenta_cofins.dt_fin := to_date((trunc(gt_row_per_rec_isenta_cofins.dt_fin)||' '||'23:59:59'),'dd/mm/rrrr hh24:mi:ss');
   --
   vn_fase := 4;
   --| Cabeçalho para as mensagens de log de erro e inconsistências
   gv_mensagem_log := 'Período de Receita Isenta do Imposto COFINS';
   --
   vn_fase := 5;
   --
   if nvl(gt_row_per_rec_isenta_cofins.id,0) > 0 then
      --
      vn_fase := 6;
      --
      vv_nome_empresa := pk_csf.fkg_nome_empresa( en_empresa_id => gt_row_per_rec_isenta_cofins.empresa_id );
      --
      vn_fase := 7;
      --| Cabeçalho para as mensagens de log de erro e inconsistências
      gv_mensagem_log := gv_mensagem_log||' de '||to_char(gt_row_per_rec_isenta_cofins.dt_ini,'dd/mm/rrrr')||' até '||
                         to_char(gt_row_per_rec_isenta_cofins.dt_fin,'dd/mm/rrrr')||' - Empresa: '||vv_nome_empresa;
   else
      --
      vn_fase := 8;
      --
      raise ve_invalido;
   end if;
   --
EXCEPTION
   when ve_invalido then
      --
      gv_resumo_log := 'Período de Receita não encontrado. Verifique o identificador informado (id = '||en_perrecisentacofins_id||').';
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_dados_per_rec_cofins_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DADOS_PER_REC_COFINS_M800;
----------------------------------------------------------------------------------------------
--| Procedimento para gerar por período as receitas isentas não alcançadas pela incidência da
--| contribuição, sujeitas a alíquota zero ou de vendas com suspensão - COFINS - Bloco M800
--| Serão gerados os blocos M800 e M810
----------------------------------------------------------------------------------------------
PROCEDURE PKB_GERAR_PER_REC_COFINS_M800(EN_PERRECISENTACOFINS_ID IN PER_REC_ISENTA_COFINS.ID%TYPE) IS
  --
  vn_fase           number := 0;
  vn_loggenerico_id log_generico.id%type;
  --
BEGIN
  --
  vn_fase := 1;
  --
  pkb_excluir_log(en_referencia_id  => en_perrecisentacofins_id,
                  ev_obj_referencia => 'PER_REC_ISENTA_COFINS');
  --
  vn_fase := 2;
  --
  gv_obj_referencia := 'PER_REC_ISENTA_COFINS';
  gv_mensagem_log   := 'Geração por período das receitas isentas do imposto COFINS';
  gv_resumo_log     := 'Início do processo (identificador do período = ' || en_perrecisentacofins_id || ').';
  gn_referencia_id  := en_perrecisentacofins_id;
  pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                   ev_mensagem       => gv_mensagem_log,
                                   ev_resumo         => gv_resumo_log,
                                   en_tipo_log       => erro_inform_geral,
                                   en_referencia_id  => gn_referencia_id,
                                   ev_obj_referencia => gv_obj_referencia);
  --
  gv_resumo_log := null;
  --
  vn_fase := 3;
  --
  if nvl(en_perrecisentacofins_id, 0) = 0 then
    --
    vn_fase := 4;
    --
    gv_resumo_log := 'O identificador do período das receitas isentas deve ser informado para que a geração seja efetuada.';
    pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                     ev_mensagem       => gv_mensagem_log,
                                     ev_resumo         => gv_resumo_log,
                                     en_tipo_log       => erro_de_validacao,
                                     en_referencia_id  => null,
                                     ev_obj_referencia => gv_obj_referencia);
  else
    --
    vn_fase := 5;
    --
    if pk_csf_efd_pc.fkg_qtde_per_rec_cofins(en_perrecisentacofins_id => en_perrecisentacofins_id) <> 0 then -- não devem existir receitas geradas
      --
      vn_fase := 6;
      --
      gv_resumo_log := 'O período de receita isenta informado possui receitas geradas, portanto, a geração não será realizada. Favor excluir as receitas.';
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_resumo_log,
                                       en_tipo_log       => erro_de_validacao,
                                       en_referencia_id  => gn_referencia_id,
                                       ev_obj_referencia => gv_obj_referencia);
    else
      --
      vn_fase := 7;
      --
      -- Recupera os dados do período das receitas isentas utilizado como referência
      pkb_dados_per_rec_cofins_m800(en_perrecisentacofins_id => en_perrecisentacofins_id);
      --
      gv_mensagem_log := 'Geração das ' || gv_mensagem_log;
      --
      vn_fase := 8;
      --
      pkb_dados_abert_empr(en_empresa_id => gt_row_per_rec_isenta_cofins.empresa_id,
                           ed_dt_inicial => gt_row_per_rec_isenta_cofins.dt_ini,
                           ed_dt_final   => gt_row_per_rec_isenta_cofins.dt_fin);
      --
      vn_fase := 9;
      --
      if nvl(gn_aberturaefdpc_id, 0) <> 0 then
        --
        vn_fase := 10;
        --
        if gv_resumo_log is null then
          pkb_monta_dados_m800;
        end if;
        --
        vn_fase := 11;
        --
        if gv_resumo_log is not null then
          --
          pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                           ev_mensagem       => gv_mensagem_log,
                                           ev_resumo         => gv_resumo_log,
                                           en_tipo_log       => erro_de_validacao,
                                           en_referencia_id  => gn_referencia_id,
                                           ev_obj_referencia => gv_obj_referencia);
          --
        end if;
        --
        if gv_resumo_log is null then
          pkb_grava_dados_m800;
        end if;
        --
      else
        --
        vn_fase := 12;
        --
        gv_resumo_log := 'Para o período das receitas informado não foi encontrado o mesmo período de Geração de EFD-PIS/COFINS, ou o período de ' ||
                         'geração está com situação: "Erro de validação", "Gerado arquivo", "Erro na geração do arquivo", "Erro de cálculo", ' ||
                         '"Em geração", portanto, a receita não será realizada. Favor atualizar a Geração de EFD-PIS/COFINS.';
        pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                         ev_mensagem       => gv_mensagem_log,
                                         ev_resumo         => gv_resumo_log,
                                         en_tipo_log       => erro_de_validacao,
                                         en_referencia_id  => gn_referencia_id,
                                         ev_obj_referencia => gv_obj_referencia);
        --
      end if;
      --
    end if;
    --
  end if;
  --
  vn_fase := 13;
  --
  commit;
  --
  vn_fase := 14;
  --
  gv_resumo_log := 'Término do processo (identificador do período = ' ||
                   en_perrecisentacofins_id || ').';
  pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                   ev_mensagem       => gv_mensagem_log,
                                   ev_resumo         => gv_resumo_log,
                                   en_tipo_log       => erro_inform_geral,
                                   en_referencia_id  => gn_referencia_id,
                                   ev_obj_referencia => gv_obj_referencia);
  --
EXCEPTION
  when others then
    --
    gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_gerar_per_rec_cofins_m800 (fase = ' ||
                     vn_fase || '). Erro = ' || sqlerrm;
    --
    declare
      vn_loggenerico_id log_generico.id%type;
    begin
      pk_log_generico.pkb_log_generico(sn_loggenerico_id => vn_loggenerico_id,
                                       ev_mensagem       => gv_mensagem_log,
                                       ev_resumo         => gv_resumo_log,
                                       en_tipo_log       => erro_de_sistema,
                                       en_referencia_id  => en_perrecisentacofins_id,
                                       ev_obj_referencia => gv_obj_referencia);
    exception
      when others then
        null;
    end;
    --
    raise_application_error(-20101, gv_resumo_log);
    --
END PKB_GERAR_PER_REC_COFINS_M800;
----------------------------------------------------------------------------------
--| Procedimento para excluir por período a receita isenta do COFINS - Bloco M800
----------------------------------------------------------------------------------
PROCEDURE PKB_EXCL_PER_REC_COFINS_M800( EN_PERRECISENTACOFINS_ID IN PER_REC_ISENTA_COFINS.ID%TYPE ) IS
   --
   vn_fase       number := 0;
   vn_empresa_id per_rec_isenta_cofins.empresa_id%type;
   vd_dt_ini     per_rec_isenta_cofins.dt_ini%type;
   vd_dt_fin     per_rec_isenta_cofins.dt_fin%type;
   vv_mensagem   varchar2(1000) := null;
   ve_erro       exception;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perrecisentacofins_id
                  , ev_obj_referencia => 'PER_REC_ISENTA_COFINS' );
   --
   vn_fase := 2;
   --
   begin
      select pa.empresa_id
           , pa.dt_ini
           , pa.dt_fin
        into vn_empresa_id
           , vd_dt_ini
           , vd_dt_fin
        from per_rec_isenta_cofins pa
       where pa.id = en_perrecisentacofins_id;
   exception
      when others then
         vv_mensagem := 'Período de Receita não encontrado. Verifique o identificador informado (id = '||en_perrecisentacofins_id||').';
         raise ve_erro;
   end;
   --
   vn_fase := 3;
   --
   if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                            , ed_data       => vd_dt_ini ) or  -- true
      pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                            , ed_data       => vd_dt_fin ) then -- true
      --
      vn_fase := 4;
      --
      vv_mensagem := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
      raise ve_erro;
      --
   else
      --
      vn_fase := 5;
      --
      begin
         delete from det_rec_isenta_cofins dr
          where exists (select ri.id
                          from rec_isenta_cofins ri
                         where ri.perrecisentacofins_id = en_perrecisentacofins_id
                           and ri.id                    = dr.recisentacofins_id);
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir detalhes das receitas isentas. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 6;
      --
      begin
         delete from rec_isenta_cofins ri
          where ri.perrecisentacofins_id = en_perrecisentacofins_id;
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir receitas isentas. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 7;
      --
      begin
         delete from per_rec_isenta_cofins pr
          where pr.id = en_perrecisentacofins_id;
      exception
         when others then
            vv_mensagem := 'Problemas ao excluir período de receitas isentas. Erro = '||sqlerrm;
            raise ve_erro;
      end;
      --
      vn_fase := 8;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when ve_erro then
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Excluir os registros gerados por período de receita isenta'
                                          , ev_resumo          => vv_mensagem
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => en_perrecisentacofins_id
                                          , ev_obj_referencia  => 'PER_REC_ISENTA_COFINS' );
      exception
         when others then
            null;
      end;
      --
      rollback;
      --
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_excl_per_rec_cofins_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Excluir os registros gerados por período de receita isenta'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perrecisentacofins_id
                                          , ev_obj_referencia  => 'PER_REC_ISENTA_COFINS' );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_EXCL_PER_REC_COFINS_M800;
---------------------------------------------------------------------
--| Procedimento recupera os dados das receitas isentas - Bloco M800
---------------------------------------------------------------------
PROCEDURE PKB_DADOS_REC_COFINS_M800( EN_RECISENTACOFINS_ID IN REC_ISENTA_COFINS.ID%TYPE ) IS
   --
   vn_fase         number := 0;
   vv_nome_empresa varchar2(1000) := null;
   ve_invalido     exception;
   --
   cursor c_rec_cofins is
      select *
        from rec_isenta_cofins ri
       where ri.id = en_recisentacofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   gt_row_rec_isenta_cofins := null;
   --
   vn_fase := 2;
   open c_rec_cofins;
   fetch c_rec_cofins into gt_row_rec_isenta_cofins;
   close c_rec_cofins;
   --
   vn_fase := 3;
   --| Cabeçalho para as mensagens de log de erro e inconsistências
   gv_mensagem_log := 'Receitas isentas';
   --
   vn_fase := 4;
   --
   if nvl(gt_row_rec_isenta_cofins.id,0) > 0 then
      --
      vn_fase := 5;
      --
      vv_nome_empresa := pk_csf.fkg_nome_empresa( en_empresa_id => gt_row_per_rec_isenta_cofins.empresa_id );
      --
      vn_fase := 6;
      --| Cabeçalho para as mensagens de log de erro e inconsistências
      gv_mensagem_log := gv_mensagem_log||', no período de '||to_char(gt_row_per_rec_isenta_cofins.dt_ini,'dd/mm/rrrr')||' até '||
                         to_char(gt_row_per_rec_isenta_cofins.dt_fin,'dd/mm/rrrr')||' - Empresa: '||vv_nome_empresa;
      --
   else
      --
      vn_fase := 7;
      --
      raise ve_invalido;
   end if;
   --
EXCEPTION
   when ve_invalido then
      --
      gv_resumo_log := 'Receita isenta não encontrada. Verifique o identificador informado (id = '||en_recisentacofins_id||').';
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_dados_rec_cofins_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DADOS_REC_COFINS_M800;
----------------------------------------------------------------
--| Procedimento para calcular as receitas isentas - Bloco M800
--| Serão calculados alguns campos dos blocos M800 e M810
----------------------------------------------------------------
PROCEDURE PKB_CALCULAR_REC_COFINS_M800( EN_RECISENTACOFINS_ID IN REC_ISENTA_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   vn_empresa_id     per_rec_isenta_cofins.empresa_id%type;
   vd_dt_ini         per_rec_isenta_cofins.dt_ini%type;
   vd_dt_fin         per_rec_isenta_cofins.dt_fin%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_recisentacofins_id
                  , ev_obj_referencia => 'REC_ISENTA_COFINS' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'REC_ISENTA_COFINS';
   gv_mensagem_log   := 'Cálculo das receitas isentas do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador da receita = '||en_recisentacofins_id||').';
   gn_referencia_id  := en_recisentacofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_recisentacofins_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador das receitas isentas deve ser informado para que o cálculo seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      -- Recupera os dados das receitas isentas utilizado como referência
      pkb_dados_rec_cofins_m800( en_recisentacofins_id => en_recisentacofins_id );
      gv_mensagem_log := 'Cálculo das '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      begin
         select pa.empresa_id
              , pa.dt_ini
              , pa.dt_fin
           into vn_empresa_id
              , vd_dt_ini
              , vd_dt_fin
           from per_rec_isenta_cofins pa
          where pa.id = gt_row_rec_isenta_cofins.perrecisentacofins_id;
      exception
         when others then
            gv_resumo_log := 'Período de Receita não encontrado. Verifique o identificador informado (id = '||gt_row_rec_isenta_cofins.perrecisentacofins_id||').';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
      vn_fase := 7;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                               , ed_data       => vd_dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                               , ed_data       => vd_dt_fin ) then -- true
         --
         vn_fase := 8;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 9;
         --
         if gt_row_rec_isenta_cofins.dm_situacao <> 0 then -- não estiver em aberto
            vn_fase := 10;
            gv_resumo_log := 'A receita isenta informada não está com situação em aberto, portanto, o cálculo não será realizado.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
         elsif pk_csf_efd_pc.fkg_qtde_det_rec_cofins( en_recisentacofins_id => gt_row_rec_isenta_cofins.id ) = 0 then -- devem existir detalhes de receita gerados
               vn_fase := 11;
               gv_resumo_log := 'A receita isenta informada não possui detalhes gerados, portanto, o cálculo não será realizado.';
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_validacao
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
         else
            --
            vn_fase := 12;
            --| Atualizar a descrição complementar da natureza da receita - detalhes
            begin
               update det_rec_isenta_cofins dr
                  set dr.desc_compl = ltrim(rtrim(pk_csf.fkg_converte(dr.desc_compl)))
                where dr.recisentacofins_id = gt_row_rec_isenta_cofins.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas (cálculo) ao atualizar a descrição dos detalhes da receita isenta. Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if gv_resumo_log is null then
      --
      vn_fase := 14;
      --
      begin
         --| Atualizar a descrição complementar da natureza da receita
         update rec_isenta_cofins ri
            set ri.dm_situacao = 1 -- Calculada
          where ri.id = gt_row_rec_isenta_cofins.id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao alterar a situação da receita isenta para 1(Calculada). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                             , ev_mensagem       => gv_mensagem_log
                                             , ev_resumo         => gv_resumo_log
                                             , en_tipo_log       => erro_de_sistema
                                             , en_referencia_id  => gn_referencia_id
                                             , ev_obj_referencia => gv_obj_referencia );
      end;
      --
   else
      --
      vn_fase := 15;
      --
      begin
         --| Atualizar a descrição complementar da natureza da receita
         update rec_isenta_cofins ri
            set ri.dm_situacao = 2 -- Erro no cálculo
          where ri.id = gt_row_rec_isenta_cofins.id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao alterar a situação da receita isenta para 2(Erro no cálculo). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                             , ev_mensagem       => gv_mensagem_log
                                             , ev_resumo         => gv_resumo_log
                                             , en_tipo_log       => erro_de_sistema
                                             , en_referencia_id  => gn_referencia_id
                                             , ev_obj_referencia => gv_obj_referencia );
      end;
      --
   end if;
   --
   vn_fase := 16;
   --
   commit;
   --
   vn_fase := 17;
   --
   gv_resumo_log := 'Término do processo (identificador da receita = '||en_recisentacofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      begin
         update rec_isenta_cofins ri
            set ri.dm_situacao = 2 -- Erro no Cálculo
          where ri.id = en_recisentacofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao atualizar a situação da receita isenta para 2(Erro no cálculo). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => en_recisentacofins_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
      commit;
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_calcular_rec_cofins_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_recisentacofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_CALCULAR_REC_COFINS_M800;
-----------------------------------------------------------------------------------
--| Procedimento para calcular por período a receita isenta do COFINS - Bloco M800
--| Serão calculados alguns campos dos blocos M800 e M810
-----------------------------------------------------------------------------------
PROCEDURE PKB_CALC_PER_REC_COFINS_M800( EN_PERRECISENTACOFINS_ID IN PER_REC_ISENTA_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
   cursor c_per_rec_isenta_cofins( en_perrecisentacofins_id in per_rec_isenta_cofins.id%type ) is
      select *
        from per_rec_isenta_cofins pr
       where pr.id  = en_perrecisentacofins_id;
   --
   cursor c_rec is
      select ri.id recisentacofins_id
        from rec_isenta_cofins ri
       where ri.perrecisentacofins_id = en_perrecisentacofins_id;
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perrecisentacofins_id
                  , ev_obj_referencia => 'PER_REC_ISENTA_COFINS' );
   --
   vn_fase := 2;
   --
   gv_mensagem_log   := 'Cálculo por período das receitas isentas do imposto COFINS';
   gv_obj_referencia := 'PER_REC_ISENTA_COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perrecisentacofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perrecisentacofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perrecisentacofins_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período de receita deve ser informado para que o cálculo seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      --
      if pk_csf_efd_pc.fkg_qtde_per_rec_cofins( en_perrecisentacofins_id => en_perrecisentacofins_id ) = 0 then -- devem existir receitas geradas
         vn_fase := 6;
         gv_resumo_log := 'O período de receita isenta informado não possui receitas geradas, portanto, o cálculo não será realizado.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => en_perrecisentacofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      else
         --
         vn_fase := 7;
         --
         gt_row_per_rec_isenta_cofins := null;
         open c_per_rec_isenta_cofins( en_perrecisentacofins_id => en_perrecisentacofins_id );
         fetch c_per_rec_isenta_cofins into gt_row_per_rec_isenta_cofins;
         close c_per_rec_isenta_cofins;
         --
         vn_fase := 8;
         --
         if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_rec_isenta_cofins.empresa_id
                                                  , ed_data       => gt_row_per_rec_isenta_cofins.dt_ini ) or  -- true
            pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_rec_isenta_cofins.empresa_id
                                                  , ed_data       => gt_row_per_rec_isenta_cofins.dt_fin ) then -- true
            --
            vn_fase := 9;
            --
            gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gt_row_per_rec_isenta_cofins.id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         else
            --
            vn_fase := 10;
            --
            for r_reg in c_rec
            loop
               --
               vn_fase := 11;
               --
               pkb_calcular_rec_cofins_m800( en_recisentacofins_id => r_reg.recisentacofins_id );
               --
            end loop;
            --
         end if;
         --
      end if;
   end if;
   --
   vn_fase := 12;
   --
   commit;
   --
   vn_fase := 13;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perrecisentacofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perrecisentacofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_calc_per_rec_cofins_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Calcular por período a receita isenta do COFINS'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perrecisentacofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_CALC_PER_REC_COFINS_M800;
---------------------------------------------------------------
--| Procedimento para validar as receitas isentas - Bloco M800
--| Serão validados alguns campos dos blocos M800 e M810
---------------------------------------------------------------
PROCEDURE PKB_VALIDAR_REC_COFINS_M800( EN_RECISENTACOFINS_ID IN REC_ISENTA_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type := null;
   vn_empresa_id     per_rec_isenta_cofins.empresa_id%type;
   vd_dt_ini         per_rec_isenta_cofins.dt_ini%type;
   vd_dt_fin         per_rec_isenta_cofins.dt_fin%type;
   --
   cursor c_detalhe is
      select dr.id
           , dr.vl_rec
           , dr.natrecpc_id
           , dr.planoconta_id
        from det_rec_isenta_cofins dr
       where dr.recisentacofins_id = gt_row_rec_isenta_cofins.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_recisentacofins_id
                  , ev_obj_referencia => 'REC_ISENTA_COFINS' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'REC_ISENTA_COFINS';
   gv_mensagem_log   := 'Validação da receita isenta do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador da receita = '||en_recisentacofins_id||').';
   gn_referencia_id  := en_recisentacofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_recisentacofins_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador da receita isenta deve ser informado para que a validação seja efetuada.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      --| Recupera os dados da apuração do imposto cofins utilizado como referência
      pkb_dados_rec_cofins_m800( en_recisentacofins_id => en_recisentacofins_id );
      gv_mensagem_log := 'Validação das '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      begin
         select pa.empresa_id
              , pa.dt_ini
              , pa.dt_fin
           into vn_empresa_id
              , vd_dt_ini
              , vd_dt_fin
           from per_rec_isenta_cofins pa
          where pa.id = gt_row_rec_isenta_cofins.perrecisentacofins_id;
      exception
         when others then
            gv_resumo_log := 'Período de Apuração não encontrado. Verifique o identificador informado (id = '||gt_row_rec_isenta_cofins.perrecisentacofins_id||').';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
      vn_fase := 7;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                               , ed_data       => vd_dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                               , ed_data       => vd_dt_fin ) then -- true
         --
         vn_fase := 8;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 9;
         --
         if gt_row_rec_isenta_cofins.dm_situacao <> 1 then -- não estiver calculada
            vn_fase := 10;
            gv_resumo_log := 'A receita isenta informada não está com situação calculada, portanto, a validação não será realizada.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
         elsif pk_csf_efd_pc.fkg_qtde_det_rec_cofins( en_recisentacofins_id => gt_row_rec_isenta_cofins.id ) = 0 then -- devem existir detalhes de receita gerados
               vn_fase := 11;
               gv_resumo_log := 'A receita isenta informada não possui detalhes gerados, portanto, a validação não será realizada.';
               pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                , ev_mensagem        => gv_mensagem_log
                                                , ev_resumo          => gv_resumo_log
                                                , en_tipo_log        => erro_de_validacao
                                                , en_referencia_id   => gn_referencia_id
                                                , ev_obj_referencia  => gv_obj_referencia );
         else
            --
            vn_fase := 12;
            --
            pkb_recupera_tpimp;
            --
            vn_fase := 13;
            --
            for r_det in c_detalhe
            loop
               --
               vn_fase := 14;
               --
               if nvl(pk_csf_efd_pc.fkg_conf_id_nat_rec_pc ( r_det.natrecpc_id ),0) = 0 then
                  gv_resumo_log := 'No detalhe da receita isenta, o identificador da natureza da receita (id = '||
                                   nvl(r_det.natrecpc_id,0)||') está inválido.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 15;
               --
               if nvl(r_det.vl_rec,0) < 0 then
                  gv_resumo_log := 'No detalhe da receita isenta, o valor da receita bruta ('||
                                   to_char(r_det.vl_rec,'999G999G999G999G990D00')||') não pode ser negativo.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
               vn_fase := 16;
               --
               if nvl(r_det.planoconta_id,0) <> 0 and
                  pk_csf_efd_pc.fkg_id_plano_conta_id ( en_id => r_det.planoconta_id ) <> nvl(r_det.planoconta_id,0) then
                  gv_resumo_log := 'No detalhe da receita isenta, o identificador do plano de conta (id = '||
                                   nvl(r_det.planoconta_id,0)||') está inválido.';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
               end if;
               --
            end loop;
            --
            vn_fase := 17;
            --
            if nvl(pk_csf.fkg_cod_st_cod( en_id_st => gt_row_rec_isenta_cofins.codst_id ),0) = 0 then
               gv_resumo_log := 'No detalhe da receita isenta, o identificador da situação tributária (id = '||
                                nvl(gt_row_rec_isenta_cofins.codst_id,0)||') está inválido.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            elsif nvl(pk_csf.fkg_cod_st_id ( ev_cod_st      => nvl(pk_csf.fkg_cod_st_cod( en_id_st => gt_row_rec_isenta_cofins.codst_id ),0)
                                           , en_tipoimp_id  => gn_tipoimp_id ),0) = 0 then
                  gv_resumo_log := 'No detalhe da receita isenta, o identificador da situação tributária (id = '||
                                   nvl(gt_row_rec_isenta_cofins.codst_id,0)||') está inválido com relação do tipo de imposto (cofins).';
                  pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                                  , ev_mensagem        => gv_mensagem_log
                                                  , ev_resumo          => gv_resumo_log
                                                  , en_tipo_log        => erro_de_validacao
                                                  , en_referencia_id   => gn_referencia_id
                                                  , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 18;
            --
            if nvl(gt_row_rec_isenta_cofins.vl_tot_rec,0) < 0 then
               gv_resumo_log := 'Na receita isenta, o valor total da receita bruta ('||
                                to_char(gt_row_rec_isenta_cofins.vl_tot_rec,'999G999G999G999G990D00')||') não pode ser negativo.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 19;
            --
            if nvl(gt_row_rec_isenta_cofins.planoconta_id,0) <> 0 and
               pk_csf_efd_pc.fkg_id_plano_conta_id ( en_id => gt_row_rec_isenta_cofins.planoconta_id ) <> nvl(gt_row_rec_isenta_cofins.planoconta_id,0) then
               gv_resumo_log := 'No detalhe da receita isenta, o identificador do plano de conta (id = '||
                                nvl(gt_row_rec_isenta_cofins.planoconta_id,0)||') está inválido.';
               pk_log_generico.pkb_log_generico( sn_loggenerico_id  => vn_loggenerico_id
                                               , ev_mensagem        => gv_mensagem_log
                                               , ev_resumo          => gv_resumo_log
                                               , en_tipo_log        => erro_de_validacao
                                               , en_referencia_id   => gn_referencia_id
                                               , ev_obj_referencia  => gv_obj_referencia );
            end if;
            --
            vn_fase := 20;
            --
            if gv_resumo_log is null then
               --
               vn_fase := 21;
               --| Atualizar a descrição complementar nos detalhes da receita isenta
               begin
                  update det_rec_isenta_cofins dr
                     set dr.desc_compl = ltrim(rtrim(pk_csf.fkg_converte(dr.desc_compl)))
                   where dr.recisentacofins_id = gt_row_rec_isenta_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas (validação) ao atualizar a descrição dos detalhes da receita isenta. Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
            end if;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 22;
   --
   if gv_resumo_log is null then
      --
      vn_fase := 23;
      --| Atualizar a situação da receita isenta
      begin
         update rec_isenta_cofins ri
            set ri.dm_situacao = 3 -- Processada
          where ri.id = en_recisentacofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao alterar a situação da receita isenta para 3(Processada). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                             , ev_mensagem       => gv_mensagem_log
                                             , ev_resumo         => gv_resumo_log
                                             , en_tipo_log       => erro_de_sistema
                                             , en_referencia_id  => gn_referencia_id
                                             , ev_obj_referencia => gv_obj_referencia );
      end;
      --
   else
      --
      vn_fase := 24;
      --| Atualizar a situação da receita isenta
      begin
         update rec_isenta_cofins ri
            set ri.dm_situacao = 4 -- Erro de validação
          where ri.id = en_recisentacofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao alterar a situação da receita isenta para 4(Erro de validação). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                             , ev_mensagem       => gv_mensagem_log
                                             , ev_resumo         => gv_resumo_log
                                             , en_tipo_log       => erro_de_sistema
                                             , en_referencia_id  => gn_referencia_id
                                             , ev_obj_referencia => gv_obj_referencia );
      end;
      --
   end if;
   --
   vn_fase := 25;
   --
   commit;
   --
   vn_fase := 26;
   --
   gv_resumo_log := 'Término do processo (identificador da receita = '||en_recisentacofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      begin
         update rec_isenta_cofins ri
            set ri.dm_situacao = 4 -- Erro de validação
          where ri.id = en_recisentacofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao atualizar a situação da receita isenta para 4(Erro de validação). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => en_recisentacofins_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
      commit;
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_validar_rec_cofins_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_recisentacofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_VALIDAR_REC_COFINS_M800;
----------------------------------------------------------------------------------
--| Procedimento para validar por período a receita isenta do COFINS - Bloco M800
--| Serão validados alguns campos dos blocos M800 e M810
----------------------------------------------------------------------------------
PROCEDURE PKB_VAL_PER_REC_COFINS_M800( EN_PERRECISENTACOFINS_ID IN PER_REC_ISENTA_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
   cursor c_per_rec_isenta_cofins( en_perrecisentacofins_id in per_rec_isenta_cofins.id%type ) is
      select *
        from per_rec_isenta_cofins pr
       where pr.id  = en_perrecisentacofins_id;
   --
   cursor c_rec is
      select ri.id recisentacofins_id
        from rec_isenta_cofins ri
       where ri.perrecisentacofins_id = en_perrecisentacofins_id;
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perrecisentacofins_id
                  , ev_obj_referencia => 'PER_REC_ISENTA_COFINS' );
   --
   vn_fase := 2;
   --
   gv_mensagem_log   := 'Validação por período das receitas isentas do imposto COFINS';
   gv_obj_referencia := 'PER_REC_ISENTA_COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perrecisentacofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perrecisentacofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perrecisentacofins_id,0) = 0 then
      --
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período de receita isenta deve ser informado para que a validação seja efetuada.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
      --
   else
      --
      vn_fase := 5;
      --
      if pk_csf_efd_pc.fkg_qtde_per_rec_cofins( en_perrecisentacofins_id => en_perrecisentacofins_id ) = 0 then -- devem existir receitas geradas
         --
         vn_fase := 6;
         gv_resumo_log := 'O período de receita informado não possui receitas geradas, portanto, a validação não será realizada.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => en_perrecisentacofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 7;
         --
         gt_row_per_rec_isenta_cofins := null;
         open c_per_rec_isenta_cofins( en_perrecisentacofins_id => en_perrecisentacofins_id );
         fetch c_per_rec_isenta_cofins into gt_row_per_rec_isenta_cofins;
         close c_per_rec_isenta_cofins;
         --
         vn_fase := 8;
         --
         if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_rec_isenta_cofins.empresa_id
                                                  , ed_data       => gt_row_per_rec_isenta_cofins.dt_ini ) or  -- true
            pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_rec_isenta_cofins.empresa_id
                                                  , ed_data       => gt_row_per_rec_isenta_cofins.dt_fin ) then -- true
            --
            vn_fase := 9;
            --
            gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_validacao
                                             , en_referencia_id   => gt_row_per_rec_isenta_cofins.id
                                             , ev_obj_referencia  => gv_obj_referencia );
            --
         else
            --
            vn_fase := 10;
            --
            for r_reg in c_rec
            loop
               --
               vn_fase := 11;
               --
               pkb_validar_rec_cofins_m800( en_recisentacofins_id => r_reg.recisentacofins_id );
               --
            end loop;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   commit;
   --
   vn_fase := 13;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perrecisentacofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perrecisentacofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_val_per_rec_cofins_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Validar por período a receita isenta do COFINS'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perrecisentacofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_VAL_PER_REC_COFINS_M800;
--------------------------------------------------------------------
--| Procedimento para desprocessar as receitas isentas - Bloco M800
--------------------------------------------------------------------
PROCEDURE PKB_DESPROC_REC_COFINS_M800( EN_RECISENTACOFINS_ID IN REC_ISENTA_COFINS.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico.id%type;
   vn_empresa_id      per_rec_isenta_cofins.empresa_id%type;
   vd_dt_ini          per_rec_isenta_cofins.dt_ini%type;
   vd_dt_fin          per_rec_isenta_cofins.dt_fin%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_recisentacofins_id
                  , ev_obj_referencia => 'REC_ISENTA_COFINS' );
   --
   vn_fase := 2;
   --
   gv_obj_referencia := 'REC_ISENTA_COFINS';
   gv_mensagem_log   := 'Desprocesso da receita isenta do imposto COFINS';
   gv_resumo_log     := 'Início do processo (identificador da receita = '||en_recisentacofins_id||').';
   gn_referencia_id  := en_recisentacofins_id;
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_recisentacofins_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador da receita isenta deve ser informado para que o desprocessamento seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      -- Recupera os dados da apuração do imposto cofins utilizado como referência
      pkb_dados_rec_cofins_m800( en_recisentacofins_id => en_recisentacofins_id );
      gv_mensagem_log := 'Desprocessar as '||gv_mensagem_log;
      --
      vn_fase := 6;
      --
      begin
         select pr.empresa_id
              , pr.dt_ini
              , pr.dt_fin
           into vn_empresa_id
              , vd_dt_ini
              , vd_dt_fin
           from per_rec_isenta_cofins pr
          where pr.id = gt_row_rec_isenta_cofins.perrecisentacofins_id;
      exception
         when others then
            gv_resumo_log := 'Problemas ao recuperar situação e data do período de receita isenta da cofins (id = '||gt_row_rec_isenta_cofins.perrecisentacofins_id||
                             '). Erro = '||sqlerrm;
            pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                             , ev_mensagem        => gv_mensagem_log
                                             , ev_resumo          => gv_resumo_log
                                             , en_tipo_log        => erro_de_sistema
                                             , en_referencia_id   => gn_referencia_id
                                             , ev_obj_referencia  => gv_obj_referencia );
      end;
      --
      vn_fase := 7;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                               , ed_data       => vd_dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => vn_empresa_id
                                               , ed_data       => vd_dt_fin ) then -- true
         --
         vn_fase := 8;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gn_referencia_id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 9;
         -- Se o DM_SITUACAO = 0 "Em Aberto", manter situação = 0 "Em Aberto"
         if gt_row_rec_isenta_cofins.dm_situacao in (0) then
            --
            vn_fase := 10;
            --
            begin
               delete from det_rec_isenta_cofins dr
                where dr.recisentacofins_id = gt_row_cons_contr_cofins.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao excluir detalhes da receita isenta. Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
            --
            vn_fase := 11;
            --
            begin
               update rec_isenta_cofins ri
                  set ri.dm_situacao = 0 -- Aberto
                where ri.id = gt_row_rec_isenta_cofins.id;
            exception
               when others then
                  gv_resumo_log := 'Problemas ao manter a situação da receita isenta 0(Em aberto). Erro = '||sqlerrm;
                  pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem        => gv_mensagem_log
                                                   , ev_resumo          => gv_resumo_log
                                                   , en_tipo_log        => erro_de_sistema
                                                   , en_referencia_id   => gn_referencia_id
                                                   , ev_obj_referencia  => gv_obj_referencia );
            end;
         -- Se o DM_SITUACAO = 1 "Calculado" ou 2 "Erro no Cálculo", defaz para 0 "Aberto"
         elsif gt_row_rec_isenta_cofins.dm_situacao in (1, 2) then
               --
               vn_fase := 12;
               --
               begin
                  update rec_isenta_cofins ri
                     set ri.dm_situacao = 0 -- Aberto
                   where ri.id = gt_row_rec_isenta_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar a situação da receita isenta para 0(Em aberto). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
         -- Se o DM_SITUACAO = 3 "Processado" ou 4 "Erro de Validação", defaz para 1 "Calculado"
         elsif gt_row_rec_isenta_cofins.dm_situacao in (3, 4) then
               --
               vn_fase := 13;
               --
               begin
                  update rec_isenta_cofins ri
                     set ri.dm_situacao = 1 -- Calculado
                   where ri.id = gt_row_rec_isenta_cofins.id;
               exception
                  when others then
                     gv_resumo_log := 'Problemas ao atualizar a situação da receita isenta para 1(Calculado). Erro = '||sqlerrm;
                     pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                      , ev_mensagem        => gv_mensagem_log
                                                      , ev_resumo          => gv_resumo_log
                                                      , en_tipo_log        => erro_de_sistema
                                                      , en_referencia_id   => gn_referencia_id
                                                      , ev_obj_referencia  => gv_obj_referencia );
               end;
               --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   --
   commit;
   --
   vn_fase := 15;
   --
   gv_resumo_log := 'Término do processo (identificador da receita = '||en_recisentacofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => gn_referencia_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_despr_rec_cofins_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_recisentacofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DESPROC_REC_COFINS_M800;
---------------------------------------------------------------------------------------
--| Procedimento para desprocessar por período a receita isenta do COFINS - Bloco M800
---------------------------------------------------------------------------------------
PROCEDURE PKB_DESPR_PER_REC_COFINS_M800( EN_PERRECISENTACOFINS_ID IN PER_REC_ISENTA_COFINS.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico.id%type;
   --
   cursor c_per_rec_isenta_cofins( en_perrecisentacofins_id in per_rec_isenta_cofins.id%type ) is
      select *
        from per_rec_isenta_cofins pr
       where pr.id  = en_perrecisentacofins_id;
   --
   cursor c_rec is
      select ri.id recisentacofins_id
        from rec_isenta_cofins ri
       where ri.perrecisentacofins_id = en_perrecisentacofins_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_excluir_log( en_referencia_id  => en_perrecisentacofins_id
                  , ev_obj_referencia => 'PER_REC_ISENTA_COFINS' );
   --
   vn_fase := 2;
   --
   gv_mensagem_log   := 'Desprocesso por período das receitas isentas do imposto COFINS';
   gv_obj_referencia := 'PER_REC_ISENTA_COFINS';
   gv_resumo_log     := 'Início do processo (identificador do período = '||en_perrecisentacofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perrecisentacofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
   gv_resumo_log := null;
   --
   vn_fase := 3;
   --
   if nvl(en_perrecisentacofins_id,0) = 0 then
      vn_fase := 4;
      gv_resumo_log := 'O identificador do período de receita isenta deve ser informado para que o desprocessamento seja efetuado.';
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem        => gv_mensagem_log
                                       , ev_resumo          => gv_resumo_log
                                       , en_tipo_log        => erro_de_validacao
                                       , en_referencia_id   => null
                                       , ev_obj_referencia  => gv_obj_referencia );
   else
      --
      vn_fase := 5;
      --
      gt_row_per_rec_isenta_cofins := null;
      open c_per_rec_isenta_cofins( en_perrecisentacofins_id => en_perrecisentacofins_id );
      fetch c_per_rec_isenta_cofins into gt_row_per_rec_isenta_cofins;
      close c_per_rec_isenta_cofins;
      --
      vn_fase := 6;
      --
      if pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_rec_isenta_cofins.empresa_id
                                               , ed_data       => gt_row_per_rec_isenta_cofins.dt_ini ) or  -- true
         pk_csf_efd_pc.fkb_existe_perarq_gerado( en_empresa_id => gt_row_per_rec_isenta_cofins.empresa_id
                                               , ed_data       => gt_row_per_rec_isenta_cofins.dt_fin ) then -- true
         --
         vn_fase := 7;
         --
         gv_resumo_log := 'Existe(m) período(s) de abertura efd pis/cofins com situação: Validado ou Arquivo Gerado. Desprocesse a geração do arquivo.';
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_validacao
                                          , en_referencia_id   => gt_row_per_rec_isenta_cofins.id
                                          , ev_obj_referencia  => gv_obj_referencia );
         --
      else
         --
         vn_fase := 8;
         --
         for r_reg in c_rec
         loop
            --
            vn_fase := 9;
            --
            pkb_desproc_rec_cofins_m800( en_recisentacofins_id => r_reg.recisentacofins_id );
            --
         end loop;
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   commit;
   --
   vn_fase := 11;
   --
   gv_resumo_log := 'Término do processo (identificador do período = '||en_perrecisentacofins_id||').';
   pk_log_generico.pkb_log_generico ( sn_loggenerico_id => vn_loggenerico_id
                                    , ev_mensagem       => gv_mensagem_log
                                    , ev_resumo         => gv_resumo_log
                                    , en_tipo_log       => erro_inform_geral
                                    , en_referencia_id  => en_perrecisentacofins_id
                                    , ev_obj_referencia => gv_obj_referencia );
   --
EXCEPTION
   when others then
      --
      gv_resumo_log := 'Problemas em pk_apur_cofins.pkb_despr_per_rec_cofins_m800 (fase = '||vn_fase||'). Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => 'Desprocessar por período a receita isenta do COFINS'
                                          , ev_resumo          => gv_resumo_log
                                          , en_tipo_log        => erro_de_sistema
                                          , en_referencia_id   => en_perrecisentacofins_id
                                          , ev_obj_referencia  => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_resumo_log);
      --
END PKB_DESPR_PER_REC_COFINS_M800;

----------------

END PK_APUR_COFINS;
/
