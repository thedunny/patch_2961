create or replace package body csf_own.pk_csf_api_calc_fiscal is
-------------------------------------------------------------------------------------------------------
-- Corpo do pacote da API para a Calculadora Fiscal
-------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------
  -- Procedimento de registro de log de erros na validação Calculo Fiscal --
--------------------------------------------------------------------------
procedure pkb_log_generico ( sn_loggenericocalcfiscal_id  out  nocopy log_generico_calcfiscal.id%type
                           , ev_mensagem                  in          log_generico_calcfiscal.mensagem%type
                           , ev_resumo                    in          log_generico_calcfiscal.resumo%type
                           , en_tipo_log                  in          csf_tipo_log.cd_compat%type                 default 1
                           , en_referencia_id             in          log_generico_calcfiscal.referencia_id%type  default null
                           , ev_obj_referencia            in          log_generico_calcfiscal.obj_referencia%type default null
                           , en_empresa_id                in          empresa.id%type                             default null
                           , en_dm_impressa               in          log_generico_calcfiscal.dm_impressa%type    default 0
                           , en_processo_id               in          log_generico_calcfiscal.processo_id%type    default null
                           , en_dm_env_email              in          log_generico_calcfiscal.dm_env_email%type   default 0
                           )
IS
   --
   vn_fase          number := 0;
   vn_csftipolog_id csf_tipo_log.id%type := null;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   pragma           autonomous_transaction;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_tipo_log,0) > 0 and ev_mensagem is not null then
      --
      vn_fase := 2;
      --
      vn_csftipolog_id := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => en_tipo_log );
      --
      vn_fase := 3;
      --
      select loggenericocalcfiscal_seq.nextval
        into sn_loggenericocalcfiscal_id
        from dual;
      --
      vn_fase := 4;
      --
      insert into log_generico_calcfiscal ( id
                                          , processo_id
                                          , dt_hr_log
                                          , mensagem
                                          , referencia_id
                                          , obj_referencia
                                          , resumo
                                          , dm_impressa
                                          , dm_env_email
                                          , csftipolog_id
                                          , empresa_id
                                          )
                                   values
                                          ( sn_loggenericocalcfiscal_id     -- Valor de cada log de validação
                                          , nvl(en_processo_id, sn_loggenericocalcfiscal_id)        -- Valor ID do processo de integração
                                          , sysdate               -- Sempre atribui a data atual do sistema
                                          , ev_mensagem           -- Mensagem do log
                                          , en_referencia_id      -- Id de referência que gerou o log
                                          , ev_obj_referencia     -- Objeto do Banco que gerou o log
                                          , ev_resumo
                                          , en_dm_impressa
                                          , en_dm_env_email
                                          , vn_csftipolog_id
                                          , en_empresa_id
                                          );
      --
      vn_fase := 5;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_log_generico fase('||vn_fase||'):'||sqlerrm;
      --
       declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => vv_mensagem_log
                                          , ev_resumo          => vv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema
                                          );
      exception
         when others then
            null;
      end;
      --
END pkb_log_generico;

----------------------------------------------------------------------
-- Procedimento armazena o valor do "loggenerico_id" do Calculo Fiscal --
----------------------------------------------------------------------
PROCEDURE pkb_gt_log_generico ( en_loggenericocalcfiscal_id in            log_generico_calcfiscal.id%type
                              , est_log_generico_calcfiscal in out nocopy dbms_sql.number_table
                              )
IS
   --
   i pls_integer;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
BEGIN
   --
   if nvl(en_loggenericocalcfiscal_id,0) > 0 then
      --
      i := nvl(est_log_generico_calcfiscal.count,0) + 1;
      --
      est_log_generico_calcfiscal(i) := en_loggenericocalcfiscal_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_gt_log_generico: '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       );
      --
END pkb_gt_log_generico;
----------------------------------------------------------------------------------------------------
-- procedimento que finaliza log_locacao
----------------------------------------------------------------------------------------------------
procedure pkb_finaliza_log_generico is
   --
   --
begin
   --
   gn_processo_id := null;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_finaliza_log_locacao: '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%TYPE;
      begin
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id      => vn_loggenerico_id
                          , ev_mensagem            => gv_cabec_log
                          , ev_resumo              => gv_mensagem_log
                          , en_tipo_log            => ERRO_DE_SISTEMA );
         --
      exception
         when others then
            null;
      end;
      --
   --
end pkb_finaliza_log_generico;
----------------------------------------------------------------------------------------------------
-- Procedimento que seta o objeto na variavel global
----------------------------------------------------------------------------------------------------
procedure pkb_seta_obj_ref ( ev_objeto in varchar2 ) is
   --
   --
begin
   --
   gv_obj_referencia := ev_objeto;
   --
end pkb_seta_obj_ref;
----------------------------------------------------------------------------------------------------
-- Procedimento que seta o tipo de integração que será feito
----------------------------------------------------------------------------------------------------
procedure pkb_seta_tipo_integr ( en_tipo_integr in number ) is
   --
   --
begin
   --
   gn_tipo_integr := en_tipo_integr;
   --
end pkb_seta_tipo_integr;
----------------------------------------------------------------------------------------------------
-- Procedimento que seta o tipo de integração que será feito
----------------------------------------------------------------------------------------------------
procedure pkb_seta_referencia_id ( en_id  in log_generico_dimob.referencia_id%type )
is
   --
   --
begin
   --
   gn_referencia_id := en_id;
   --
end pkb_seta_referencia_id;

-------------------------------------------------------------------------------------------------------

-- Procedimente de recuperar dados da Solicitação de Calculo
procedure pkb_recup_dados_solic_calc ( en_soliccalc_id            in  solic_calc.id%type
                                     , st_row_solic_calc          out nocopy  solic_calc%rowtype
                                     )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
begin
   --
   vn_fase := 1;
   --
   st_row_solic_calc := null;
   --
   if nvl(en_soliccalc_id,0) > 0 then
      --
      begin
         --
         select *
           into st_row_solic_calc
           from solic_calc
          where id = en_soliccalc_id;
         --
      exception
         when others then
            st_row_solic_calc := null;
      end;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_dados_solic_calc: ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => null
                       );
      --
end pkb_recup_dados_solic_calc;

-------------------------------------------------------------------------------------------------------

-- Procedimento de exclui os dados que são gerados, caso já existir
procedure pkb_excluir_dados_calc ( en_soliccalc_id            in  solic_calc.id%type
                                 )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   cursor c_itemsc is
   select * from item_solic_calc
    where soliccalc_id = en_soliccalc_id
    order by 1;
   --
begin
   --
   vn_fase := 1;
   --
   delete from log_generico_calcfiscal
    where referencia_id   = en_soliccalc_id
      and obj_referencia  = 'SOLIC_CALC';
   --
   vn_fase := 2;
   --
   delete from sc_infor_adic
    where soliccalc_id = en_soliccalc_id;
   --
   vn_fase := 3;
   --
   delete from total_solic_calc
    where soliccalc_id = en_soliccalc_id;
   --
   vn_fase := 4;
   --
   for rec in c_itemsc loop
      exit when c_itemsc%notfound or (c_itemsc%notfound) is null;
      --
      vn_fase := 4.1;
      --
      delete from part_icms_solic_calc
       where itemsoliccalc_id = rec.id;
      --
      vn_fase := 4.2;
      --
      delete from imp_itemsc ii
       where itemsoliccalc_id = rec.id;
      --
   end loop;
   --
   vn_fase := 99;
   --
   commit;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_excluir_dados_calc fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => null
                       );
      --
end pkb_excluir_dados_calc;
--
-- ==================================================================================================================== --
-- Procedimento que verifica se a empresa está parametrizada para guardar os impostos originais
procedure pkb_grava_impostos_orig ( en_empresa_id         in empresa.id%type
                                  , en_soliccalc_id       in solic_calc.id%type
                                  , en_notafiscal_id      in nota_fiscal.id%type
                                  , en_nro_item           in item_nota_fiscal.nro_item%type
                                  , en_cod_item           in item_nota_fiscal.cod_item%type
                                  , en_cd_lista_serv      in item_nota_fiscal.cd_lista_serv%type
                                  , est_row_imp_itemnf_ii in out nocopy imp_itemnf%rowtype ) is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vn_impitemnforig_id          imp_itemnf_orig.id%type;
   vn_dm_manter_bc_int          imp_itemnf_orig.dm_manter_bc_int%type := null;
   --
begin
   --
   vn_fase := 1;
   --
   -- Se o valor do dominio for nulo ou zero mas o campo perc_reduc for maior q zero a rotina
   -- irá carregar o dominio com valor "1" para manter a base de cálculo reduzida, a aliquota e o valor do imposto
   if nvl(vn_dm_manter_bc_int,0) = 0 and
      nvl(est_row_imp_itemnf_ii.perc_reduc,0) > 0 then
      --
      vn_fase := 1.1;
      --
      vn_dm_manter_bc_int := 1;
      --
      vn_fase := 1.2;
      --
   end if;
   --
   begin
      --
      vn_fase := 2;
      --
      select impitemnforig_seq.nextval
        into vn_impitemnforig_id
        from dual;
      --
      vn_fase := 3;
      --
      insert into imp_itemnf_orig ( id
                                  , notafiscal_id
                                  , nro_item
                                  , cod_item
                                  , cd_lista_serv
                                  , tipoimp_id
                                  , dm_tipo
                                  , codst_id
                                  , vl_base_calc
                                  , aliq_apli
                                  , vl_imp_trib
                                  , perc_reduc
                                  , perc_adic
                                  , qtde_base_calc_prod
                                  , vl_aliq_prod
                                  , vl_bc_st_ret
                                  , vl_icmsst_ret
                                  , perc_bc_oper_prop
                                  , estado_id
                                  , vl_bc_st_dest
                                  , vl_icmsst_dest
                                  , dm_orig_calc
                                  , tiporetimp_id
                                  , vl_deducao
                                  , vl_base_outro
                                  , vl_imp_outro
                                  , vl_base_isenta
                                  , aliq_aplic_outro
                                  , natrecpc_id
                                  , vl_imp_nao_dest
                                  , vl_icms_deson
                                  , vl_icms_oper
                                  , percent_difer
                                  , vl_icms_difer
                                  , tiporetimpreceita_id
                                  , vl_bc_fcp
                                  , aliq_fcp
                                  , vl_fcp
                                  , perc_red_bc_icms_efet
                                  , bc_icms_efet
                                  , aliq_icms_efet
                                  , vl_icms_efet
                                  , dm_manter_bc_int
                                  )
                           values ( vn_impitemnforig_id
                                  , en_notafiscal_id                           -- notafiscal_id
                                  , en_nro_item                                -- nro_item
                                  , en_cod_item                                -- cod_item
                                  , en_cd_lista_serv                           -- cd_lista_serv 
                                  , est_row_imp_itemnf_ii.tipoimp_id           -- tipoimp_id
                                  , est_row_imp_itemnf_ii.dm_tipo              -- dm_tipo
                                  , est_row_imp_itemnf_ii.codst_id             -- codst_id
                                  , est_row_imp_itemnf_ii.vl_base_calc         -- vl_base_calc
                                  , est_row_imp_itemnf_ii.aliq_apli            -- aliq_apli
                                  , est_row_imp_itemnf_ii.vl_imp_trib          -- vl_imp_trib
                                  , est_row_imp_itemnf_ii.perc_reduc           -- perc_reduc
                                  , est_row_imp_itemnf_ii.perc_adic            -- perc_adic
                                  , est_row_imp_itemnf_ii.qtde_base_calc_prod  -- qtde_base_calc_prod
                                  , est_row_imp_itemnf_ii.vl_aliq_prod         -- vl_aliq_prod
                                  , est_row_imp_itemnf_ii.vl_bc_st_ret         -- vl_bc_st_ret
                                  , est_row_imp_itemnf_ii.vl_icmsst_ret        -- vl_icmsst_ret
                                  , est_row_imp_itemnf_ii.perc_bc_oper_prop    -- perc_bc_oper_prop
                                  , est_row_imp_itemnf_ii.estado_id            -- estado_id
                                  , est_row_imp_itemnf_ii.vl_bc_st_dest        -- vl_bc_st_dest
                                  , est_row_imp_itemnf_ii.vl_icmsst_dest       -- vl_icmsst_dest
                                  , est_row_imp_itemnf_ii.dm_orig_calc         -- dm_orig_calc
                                  , est_row_imp_itemnf_ii.tiporetimp_id        -- tiporetimp_id
                                  , est_row_imp_itemnf_ii.vl_deducao           -- vl_deducao
                                  , est_row_imp_itemnf_ii.vl_base_outro        -- vl_base_outro
                                  , est_row_imp_itemnf_ii.vl_imp_outro         -- vl_imp_outro
                                  , est_row_imp_itemnf_ii.vl_base_isenta       -- vl_base_isenta
                                  , est_row_imp_itemnf_ii.aliq_aplic_outro     -- aliq_aplic_outro
                                  , est_row_imp_itemnf_ii.natrecpc_id          -- natrecpc_id
                                  , est_row_imp_itemnf_ii.vl_imp_nao_dest      -- vl_imp_nao_dest
                                  , est_row_imp_itemnf_ii.vl_icms_deson        -- vl_icms_deson
                                  , est_row_imp_itemnf_ii.vl_icms_oper         -- vl_icms_oper
                                  , est_row_imp_itemnf_ii.percent_difer        -- percent_difer
                                  , est_row_imp_itemnf_ii.vl_icms_difer        -- vl_icms_difer
                                  , est_row_imp_itemnf_ii.tiporetimpreceita_id -- tiporetimpreceita_id
                                  , est_row_imp_itemnf_ii.vl_bc_fcp            -- vl_bc_fcp
                                  , est_row_imp_itemnf_ii.aliq_fcp             -- aliq_fcp
                                  , est_row_imp_itemnf_ii.vl_fcp               -- vl_fcp
                                  , est_row_imp_itemnf_ii.perc_red_bc_icms_efet-- perc_red_bc_icms_efet
                                  , est_row_imp_itemnf_ii.bc_icms_efet         -- bc_icms_efet
                                  , est_row_imp_itemnf_ii.aliq_icms_efet       -- aliq_icms_efet
                                  , est_row_imp_itemnf_ii.vl_icms_efet         -- vl_icms_efet
                                  , vn_dm_manter_bc_int                        -- dm_manter_bc_int
                                  );
      --
      commit;
      --
   exception
      when dup_val_on_index then
         --
         vv_mensagem_log := 'Dados duplicados no insert na tabela IMP_ITEMNF_ORIG referente a Nota Fiscal(id): '|| en_notafiscal_id ||'. (pk_csf_api_calc_fiscal.pkb_grava_impostos_orig fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => informacao
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
   end;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_grava_impostos_orig fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_grava_impostos_orig;
--
-- ==================================================================================================================== --
--
-- Procedimento que faz a integração da tabela de ICMS em Operações Interestaduais de Vendas a Consumidor Final
procedure pkb_integr_paramicmsintercf ( est_log_generico_calcfiscal in out nocopy dbms_sql.number_table
                                      , est_row_paramicmsintercf    in out nocopy PARAM_ICMS_INTER_CF%rowtype
                                      , en_empresa_id               in            empresa.id%type
                                      , ev_sigla_est                in            estado.sigla_estado%type
                                      , en_cd_cfop                  in            cfop.cd%type
                                      , ev_cd_ncm                   in            ncm.cod_ncm%type
                                      , ev_cod_item                 in            item.cod_item%type
                                      , en_loteintws_id             in            lote_int_ws.id%type default 0
                                      )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   vn_fase := 1;
   --
   est_row_paramicmsintercf.id := pk_csf_calc_fiscal.fkg_paramicmsintercf_id ( en_empresa_id => est_row_paramicmsintercf.empresa_id
                                                                             , en_estado_id  => pk_csf.fkg_Estado_id ( ev_sigla_est )
                                                                             , ed_dt_ini     => est_row_paramicmsintercf.dt_ini
                                                                             , ed_dt_fin     => est_row_paramicmsintercf.dt_fin
                                                                             , en_cfop_id    => pk_csf.fkg_cfop_id ( en_cd_cfop )
                                                                             , en_ncm_id     => pk_csf.fkg_Ncm_id ( ev_cd_ncm )
                                                                             , en_item_id    => pk_csf.fkg_Item_id_conf_empr ( en_empresa_id, ev_cod_item )
                                                                             );
   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_paramicmsintercf.id;
   gv_obj_referencia := 'PARAM_ICMS_INTER_CF';
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --
   gv_mensagem_log   := 'Integração da tabela de Parâmetros de ICMS em Operações Interestaduais de Vendas a Consumidor Final, Estado : '|| ev_sigla_est ||
                        ', Data Ini.: '||to_date(est_row_paramicmsintercf.dt_ini,'dd/mm/yyyy')|| ', Data Final: '|| to_date(est_row_paramicmsintercf.dt_fin,'dd/mm/yyyy') ||
                        ', CFOP.: '|| en_cd_cfop ||', NCM.: '||ev_cd_ncm||', Cod. Item: '|| ev_cod_item || en_loteintws_id;

   --
   vn_fase := 3;
   --
   est_row_paramicmsintercf.estado_id := pk_csf.fkg_Estado_id ( ev_sigla_est );
   --
   if nvl(est_row_paramicmsintercf.estado_id,0) <= 0 then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Sigla do Estado de Destino inválida ('|| ev_sigla_est ||
                       '). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if trim(est_row_paramicmsintercf.DT_INI) is null then
      --
      vn_fase := 4.1;
      --
      gv_resumo_log := 'Data Inicial não pode ser nulla. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 5;
   --
   if trim(en_cd_cfop) is not null then
      --
      vn_fase := 5.1;
      --
      est_row_paramicmsintercf.cfop_id := pk_csf.fkg_cfop_id ( en_cd_cfop );
      --
      if nvl(est_row_paramicmsintercf.cfop_id,0) <= 0 then
         --
         vn_fase := 5.2;
         --
         gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                         ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
        -- Armazena o "loggenerico_id" na memória
        pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                            , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                            );
      end if;
      --
   end if;
   --
   vn_fase := 6;
   --
   if trim(ev_cd_ncm) is not null then
      --
      vn_fase := 6.1;
      --
      est_row_paramicmsintercf.ncm_id := pk_csf.fkg_Ncm_id ( ev_cd_ncm );
      --
      if nvl(est_row_paramicmsintercf.ncm_id,0) <= 0 then
         --
         vn_fase := 6.2;
         --
         gv_resumo_log := 'Código da Tabela de "NCM" inválido ('|| ev_cd_ncm
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 7;
   --
   if trim(ev_cod_item) is not null then
      --
      vn_fase := 7.1;
      --
      est_row_paramicmsintercf.item_id := pk_csf.fkg_Item_id_conf_empr ( en_empresa_id, ev_cod_item );
      --
      if nvl(est_row_paramicmsintercf.item_id,0) = 0 then
         --
         vn_fase := 7.2;
         --
         gv_resumo_log := 'Código do Item ('|| ev_cod_item ||') inválido ou não cadastrado no Compliance, favor verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 8;
   --
   if nvl(est_row_paramicmsintercf.PERC_ICMS_UF_DES,0) <= 0 then
      --
      vn_fase := 8.2;
      --
      gv_resumo_log := 'O valor da "Alíquota interna da UF de destino" ('|| est_row_paramicmsintercf.PERC_ICMS_UF_DES ||') inválido, favor verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 9;
   --
   if nvl(est_row_paramicmsintercf.PERC_ICMS_INTER_PART,0) <= 0 then
      --
      vn_fase := 9.2;
      --
      gv_resumo_log := 'O valor da "Percentual provisório de partilha do ICMS Interestadual" ('||
                       est_row_paramicmsintercf.PERC_ICMS_INTER_PART ||') inválido, favor verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 10;
   --
   if nvl(est_row_paramicmsintercf.PERC_COMB_POBR_UF_DEST,0) <= 0 then
      --
      vn_fase := 10.2;
      --
      gv_resumo_log := 'O valor da "Percentual do ICMS relativo ao Fundo de Combate à Pobreza (FCP) na UF de destino" ('||
                       est_row_paramicmsintercf.PERC_COMB_POBR_UF_DEST ||') inválido, favor verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 11;
   --
   if nvl(est_row_paramicmsintercf.PERC_ICMS_INTER,0) <= 0 then
      --
      vn_fase := 11.2;
      --
      gv_resumo_log := 'O valor da "Alíquota interestadual das uf envolvidas" ('||
                       est_row_paramicmsintercf.PERC_ICMS_INTER ||') inválido, favor verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_paramicmsintercf.empresa_id,0) > 0
    and nvl(est_row_paramicmsintercf.estado_id,0) > 0
    and nvl(est_row_paramicmsintercf.PERC_ICMS_UF_DES,0) > 0
    and nvl(est_row_paramicmsintercf.PERC_ICMS_INTER_PART,0) > 0
    and nvl(est_row_paramicmsintercf.PERC_COMB_POBR_UF_DEST,0) > 0
    and nvl(est_row_paramicmsintercf.PERC_ICMS_INTER,0) > 0 then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_paramicmsintercf.id,0) = 0 then
         --
         vn_fase := 99.2;
         --
         select paramicmsintercf_seq.nextval
           into est_row_paramicmsintercf.id
           from dual;
         --
         insert into param_icms_inter_cf ( id
                                         , empresa_id
                                         , estado_id
                                         , dt_ini
                                         , dt_fin
                                         , cfop_id
                                         , ncm_id
                                         , item_id
                                         , perc_icms_uf_des
                                         , perc_icms_inter_part
                                         , perc_comb_pobr_uf_dest
                                         , perc_icms_inter )
                                   values( est_row_paramicmsintercf.id
                                         , est_row_paramicmsintercf.empresa_id
                                         , est_row_paramicmsintercf.estado_id
                                         , est_row_paramicmsintercf.dt_ini
                                         , est_row_paramicmsintercf.dt_fin
                                         , est_row_paramicmsintercf.cfop_id
                                         , est_row_paramicmsintercf.ncm_id
                                         , est_row_paramicmsintercf.item_id
                                         , est_row_paramicmsintercf.perc_icms_uf_des
                                         , est_row_paramicmsintercf.perc_icms_inter_part
                                         , est_row_paramicmsintercf.perc_comb_pobr_uf_dest
                                         , est_row_paramicmsintercf.perc_icms_inter );
         --
      else
         --
         vn_fase := 99.3;
         --
         update param_icms_inter_cf
            set empresa_id               = est_row_paramicmsintercf.empresa_id
              , estado_id                = est_row_paramicmsintercf.estado_id
              , dt_ini                   = est_row_paramicmsintercf.dt_ini
              , dt_fin                   = est_row_paramicmsintercf.dt_fin
              , cfop_id                  = est_row_paramicmsintercf.cfop_id
              , ncm_id                   = est_row_paramicmsintercf.ncm_id
              , item_id                  = est_row_paramicmsintercf.item_id
              , perc_icms_uf_des         = est_row_paramicmsintercf.perc_icms_uf_des
              , perc_icms_inter_part     = est_row_paramicmsintercf.perc_icms_inter_part
              , perc_comb_pobr_uf_dest   = est_row_paramicmsintercf.perc_comb_pobr_uf_dest
              , perc_icms_inter          = est_row_paramicmsintercf.perc_icms_inter
          where id                       = est_row_paramicmsintercf.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_paramicmsintercf fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
   --
end pkb_integr_paramicmsintercf;

----------------------------------------------------------------------------------------------------
-- Procedimento que faz a integração da tabela de Parametros de Calculo de ICMS
procedure pkb_integr_paramcalcicmsempr ( est_log_generico_calcfiscal   in out nocopy dbms_sql.number_table
                                       , est_row_paramcalcicmsempr     in out nocopy param_calc_icms_empr%rowtype
                                       , en_empresa_id                 in            empresa.id%type
                                       , en_cd_cfop                    in            cfop.cd%type
                                       , ev_cfop_dest                  in            cfop.cd%type
                                       , ev_sigla_est_dest             in            estado.sigla_estado%type
                                       , ev_cd_ex_tipi                 in            ex_tipi.cod_ex_tipi%type
                                       , ev_cod_item                   in            item.cod_item%type
                                       , ev_cd_codnat                  in            nat_oper.cod_nat%type
                                       , ev_cod_st                     in            cod_st.cod_st%type
                                       , ev_cod_of                     in            obs_fiscal.cod_of%type
                                       , ev_cd_ncm                     in            ncm.cod_ncm%type
                                       , en_loteintws_id               in            lote_int_ws.id%type default 0
                                       )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   vn_fase := 1;
   --
   est_row_paramcalcicmsempr.id := pk_csf_calc_fiscal.fkg_paramcalcicmsempr_id ( en_empresa_id           => en_empresa_id
                                                                               , ed_dt_ini               => est_row_paramcalcicmsempr.dt_ini
                                                                               , ed_dt_fin               => est_row_paramcalcicmsempr.dt_fin                                             
                                                                               , ev_dm_tipo_param        => est_row_paramcalcicmsempr.dm_tipo_param                                      
                                                                               , en_prioridade           => est_row_paramcalcicmsempr.prioridade                                         
                                                                               , en_cfop_id              => pk_csf.fkg_cfop_id ( en_cd_cfop )                                            
                                                                               , en_estado_id_dest       => pk_csf.fkg_Estado_id ( ev_sigla_est_dest )
                                                                               , en_ncm_id               => pk_csf.fkg_Ncm_id ( ev_cd_ncm )                                              
                                                                               , en_extipi_id            => pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ))    
                                                                               , en_dm_orig_merc         => est_row_paramcalcicmsempr.dm_orig_merc                                       
                                                                               , en_item_id              => pk_csf.fkg_Item_id_conf_empr ( en_empresa_id, ev_cod_item )                  
                                                                               , en_natoper_id           => pk_csf.fkg_codnatpc_id ( ev_cd_codnat )                                      
                                                                               , ev_cpf_cnpj             => est_row_paramcalcicmsempr.cpf_cnpj                                           
                                                                               , en_dm_calc_fisica       => est_row_paramcalcicmsempr.dm_calc_fisica                                     
                                                                               , en_dm_calc_contr_isento => est_row_paramcalcicmsempr.dm_calc_contr_isento
                                                                               , en_dm_calc_cons_final   => est_row_paramcalcicmsempr.dm_calc_cons_final
                                                                               , en_dm_calc_nao_contr    => est_row_paramcalcicmsempr.dm_calc_nao_contr
                                                                               , en_dm_emit_com_suframa  => est_row_paramcalcicmsempr.dm_emit_com_suframa
                                                                               , en_dm_dest_com_suframa  => est_row_paramcalcicmsempr.dm_dest_com_suframa
                                                                               );
   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_paramcalcicmsempr.id;
   gv_obj_referencia := 'PARAM_CALC_ICMS_EMPR';
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --
   gv_mensagem_log   := 'Integração de tabela de Parametros de Calculo de ICMS para Empresa, Data Ini.: '||to_date(est_row_paramcalcicmsempr.dt_ini,'dd/mm/yyyy')||', Data Fin.: '||to_date(est_row_paramcalcicmsempr.dt_fin,'dd/mm/yyyy')||
                        ', Dom. Tipo de Param.: ' || pk_csf.fkg_dominio ( 'PARAM_CALC_ICMS_EMPR.DM_TIPO_PARAM', est_row_paramcalcicmsempr.dm_tipo_param) ||', Prioridade: ' || est_row_paramcalcicmsempr.prioridade ||
                        ', CFOP: '|| en_cd_cfop ||', Estado Dest.: '|| ev_sigla_est_dest || ', NCM: '|| ev_cd_ncm ||', Exceção de Ncm informados na TIPI: '|| ev_cd_ex_tipi ||
                        ', Dom. Orig. Merc.: '|| pk_csf.fkg_dominio ( 'PARAM_CALC_ICMS_EMPR.DM_ORIG_MERC', est_row_paramcalcicmsempr.dm_orig_merc) || ', Item: '|| ev_cod_item
                        ||', Nat. Oper.: '|| ev_cd_codnat || ', Part. do Documento Fiscal: '|| est_row_paramcalcicmsempr.cpf_cnpj ||vv_nro_lote||'.';
   --
   vn_fase := 3;
   --
   if trim(est_row_paramcalcicmsempr.DT_INI) is null then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Data Inicial não pode ser nulla. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if trim(est_row_paramcalcicmsempr.dm_tipo_param) not in ('E','R')then
      --
      vn_fase := 4.1;
      --
      gv_resumo_log := 'Valor do Dominio "Tipo de Parametro" inválido ('|| est_row_paramcalcicmsempr.dm_tipo_param
                       ||') Valores válidos: "E" - Exceção e "R" - Regra. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_paramcalcicmsempr.prioridade,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_resumo_log := 'Valor do Campo "Prioridade do Parâmetro" inválido ('|| est_row_paramcalcicmsempr.prioridade
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 6;
   --
   if trim(en_cd_cfop) is not null then
      --
      est_row_paramcalcicmsempr.cfop_id := pk_csf.fkg_cfop_id ( en_cd_cfop );
      --
      if nvl(est_row_paramcalcicmsempr.cfop_id,0) <= 0 then
         --
         vn_fase := 6.2;
         --
         gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                         ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
        -- Armazena o "loggenerico_id" na memória
        pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                            , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                            );
      end if;
      --
   end if;
   --
   vn_fase := 7;
   --
   est_row_paramcalcicmsempr.estado_id_dest := pk_csf.fkg_Estado_id ( ev_sigla_est_dest );
   --
   if nvl(est_row_paramcalcicmsempr.estado_id_dest,0) <= 0 then
      --
      vn_fase := 7.1;
      --
      gv_resumo_log := 'Sigla do Estado de Destino inválida ('|| ev_sigla_est_dest ||
                       '). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 8;
   --
   if trim(ev_cd_ncm) is not null then
      --
      vn_fase := 8.1;
      --
      est_row_paramcalcicmsempr.ncm_id := pk_csf.fkg_Ncm_id ( ev_cd_ncm );
      --
      if nvl(est_row_paramcalcicmsempr.ncm_id,0) <= 0 then
         --
         vn_fase := 8.2;
         --
         gv_resumo_log := 'Código da Tabela de "NCM" inválido ('|| ev_cd_ncm
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 9;
   --
   if trim(ev_cd_ex_tipi) is not null then
      --
      vn_fase := 9.1;
      --
      est_row_paramcalcicmsempr.extipi_id := pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  est_row_paramcalcicmsempr.ncm_id);
      --
      if nvl(est_row_paramcalcicmsempr.extipi_id,0) <= 0 then
         --
         vn_fase := 9.2;
         --
         gv_resumo_log := 'Código da Tabela de "Exceção de Ncm informados na TIPI" inválido ('|| ev_cd_ex_tipi
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   if nvl(est_row_paramcalcicmsempr.dm_orig_merc,0) not in (0,1,2,3,4,5,6,7,8) then
      --
      vn_fase := 10.1;
      --
      gv_resumo_log := 'Valor de Dominio de "Origem de Mercadoria" ('|| est_row_paramcalcicmsempr.dm_orig_merc ||
                       ') inválido, Valores validos: 0 - Nacional, exceto as indicadas nos códigos 3 a 5, 1 - Estrangeira - Importação direta, exceto a indicada no código 6, '||
                       '2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7, 3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%, '||
                       '4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes, '||
                       '5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%, 6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e '||
                       '7 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 11;
   --
   if trim(ev_cod_item) is not null then
      --
      est_row_paramcalcicmsempr.item_id := pk_csf.fkg_Item_id_conf_empr ( en_empresa_id, ev_cod_item );
      --
      if nvl(est_row_paramcalcicmsempr.item_id,0) = 0 then
         --
         vn_fase := 11.1;
         --
         gv_resumo_log := 'Código do Item ('|| ev_cod_item ||') inválido ou não cadastrado no Compliance, favor verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   if trim(ev_cd_codnat) is not null then
      --
      est_row_paramcalcicmsempr.NATOPER_ID := pk_csf.fkg_natoper_id_cod_nat ( pk_csf.fkg_multorg_id_empresa ( en_empresa_id), ev_cd_codnat);
      --
      if nvl(est_row_paramcalcicmsempr.NATOPER_ID,0) <= 0 then
         --
         vn_fase := 12.1;
         --
         gv_resumo_log := 'Código da Natureza de Operação('|| ev_cd_codnat ||') inválido, favor verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if nvl(est_row_paramcalcicmsempr.dm_calc_fisica,-1) not in (0, 1, 2, 3, 4, 5, 6) then
      --
      vn_fase := 13.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Calcula Pessoa Fisica" ('|| est_row_paramcalcicmsempr.dm_calc_fisica ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_paramcalcicmsempr.DM_CALC_CONS_FINAL,-1) not in (0, 1, 2, 3, 4, 5, 6, 7) then
      --
      vn_fase := 14.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Calcula Consumidor Final" ('|| est_row_paramcalcicmsempr.DM_CALC_CONS_FINAL ||
                        ') inválido, Valores validos: '||
                        '0-Não, '||
                        '1-Sim, '||
                        '2-Indiferente, '||
                        '3-Industria, '||
                        '4-Comercio, '||
                        '5-Atacado, '||
                        '6-Varejo, '||
                        '7-Industria / Consumo Final. '||
                        'Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 15;
   --
   if nvl(est_row_paramcalcicmsempr.DM_CALC_CONTR_ISENTO,-1) not in (0,1,2) then
      --
      vn_fase := 15.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Calcula Contribuinte Isento" ('|| est_row_paramcalcicmsempr.DM_CALC_CONTR_ISENTO ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 16;
   --
   if nvl(est_row_paramcalcicmsempr.DM_CALC_NAO_CONTR,-1) not in (0,1,2) then
      --
      vn_fase := 16.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Calcula Não Contribuinte" ('|| est_row_paramcalcicmsempr.DM_CALC_NAO_CONTR ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(est_row_paramcalcicmsempr.DM_EMIT_COM_SUFRAMA,-1) not in (0,1,2) then
      --
      vn_fase := 17.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Emitente com Suframa" ('|| est_row_paramcalcicmsempr.DM_EMIT_COM_SUFRAMA ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 18;
   --
   if nvl(est_row_paramcalcicmsempr.DM_DEST_COM_SUFRAMA,-1) not in (0,1,2) then
      --
      vn_fase := 18.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Destinatário com Suframa" ('|| est_row_paramcalcicmsempr.DM_DEST_COM_SUFRAMA ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 19;
   --
   if trim(ev_cfop_dest) is not null then
      --
      vn_fase := 19.1;
      --
      est_row_paramcalcicmsempr.cfop_id_dest := pk_csf.fkg_cfop_id ( ev_cfop_dest );
      --
      if nvl(est_row_paramcalcicmsempr.cfop_id_dest,0) <= 0 then
         --
         vn_fase := 19.2;
         --
         gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| ev_cfop_dest ||
                          '). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 20;
   --
   if trim(ev_cod_st) is not null then
      --
      vn_fase := 20.1;
      --
      est_row_paramcalcicmsempr.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => ev_cod_st
                                                                 , en_tipoimp_id  => pk_csf.fkg_Tipo_Imposto_id ( 1 ) --ICMS
                                                                   );
      --
      if nvl(est_row_paramcalcicmsempr.codst_id,0) <= 0 then
         --
         vn_fase := 20.2;
         --
         gv_resumo_log := 'Valor do "Código de Situação Tributaria" Inválido ('|| ev_cod_st ||'), Favor Verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 21;
   --
   if nvl(est_row_paramcalcicmsempr.aliq_dest,0) <= 0 then
      --
      vn_fase := 21.1;
      --
      gv_resumo_log := 'Valor da "Aliquota de destino" Inválido ('|| est_row_paramcalcicmsempr.aliq_dest ||'), Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 22;
   --
   if nvl(est_row_paramcalcicmsempr.PERC_REDUC_BC,0) < 0 then
      --
      vn_fase := 22.1;
      --
      gv_resumo_log := 'Valor da "Percentual de reducao da base de calculo de ICMS" Inválido ('|| est_row_paramcalcicmsempr.PERC_REDUC_BC ||'), Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 23;
   --
   if nvl(est_row_paramcalcicmsempr.PERC_DIFER,0) < 0 then
      --
      vn_fase := 23.1;
      --
      gv_resumo_log := 'Valor da "Percentual de Diferimento de ICMS" Inválido ('|| est_row_paramcalcicmsempr.PERC_DIFER ||'), Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 24;
   --
   if trim(ev_cod_of) is not null then
      --
      vn_fase := 24.1;
      --
      est_row_paramcalcicmsempr.obsfiscal_id := pk_csf_calc_fiscal.fkg_obsfiscal_id ( ev_cod_of => ev_cod_of );
      --
      if nvl(est_row_paramcalcicmsempr.obsfiscal_id,0) <= 0 then
         --
         vn_fase := 24.2;
         --
         gv_resumo_log := 'Código da Observacao Fiscal inválido, Favor Verificar. Código = '||ev_cod_of;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 25;
   --
   if nvl(est_row_paramcalcicmsempr.DM_MOD_BASE_CALC,-1) not in (0,1,2,3) then
      --
      vn_fase := 25.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Modalidade da Base de Calculo de ICMS" ('|| est_row_paramcalcicmsempr.DM_MOD_BASE_CALC ||
                        ') Inválido, Valores Permitidos: 0 - Margem Valor Agregado (%); 1 - Pauta (Valor); 2 -Preço Tabelado Máx. (valor); '||
                        '3 - Valor da operação';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 26;
   --
   if nvl(est_row_paramcalcicmsempr.INDICE,0) <= 0 then
      --
      vn_fase := 26.1;
      --
      gv_resumo_log := 'Valor " Alíquota ou Valor do Imposto" não pode ser menor ou igual a zero.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 27;
   --
   if nvl(est_row_paramcalcicmsempr.DM_AJUSTA_MVA,-1) not in (0,1) then
      --
      vn_fase := 27.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Ajusta MVA" Inválido ('|| est_row_paramcalcicmsempr.DM_AJUSTA_MVA ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 28;
   --          
   if nvl(est_row_paramcalcicmsempr.DM_AJUST_DESC_ZFM_ITEM,-1) not in (0,1) then
      --
      vn_fase := 28.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Ajusta Desconto da Zona Franca de Manaus no Item" Inválido ('|| est_row_paramcalcicmsempr.DM_AJUST_DESC_ZFM_ITEM ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 29;
   --
   if nvl(est_row_paramcalcicmsempr.DM_SOMA_FRETE,-1) not in (0,1) then
      --
      vn_fase := 29.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Frete na Base de Calculo" Inválido ('|| est_row_paramcalcicmsempr.DM_SOMA_FRETE ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 30;
   --
   if nvl(est_row_paramcalcicmsempr.DM_SOMA_SEGURO,-1) not in (0,1) then
      --
      vn_fase := 30.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Seguro na Base de Calculo" Inválido ('|| est_row_paramcalcicmsempr.DM_SOMA_SEGURO ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 31;
   --
   if nvl(est_row_paramcalcicmsempr.DM_SOMA_OUTRA_DESP,-1) not in (0,1) then
      --
      vn_fase := 31.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma Outras Despesas na Base de Calculo" Inválido ('|| est_row_paramcalcicmsempr.DM_SOMA_OUTRA_DESP ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 32;
   --
   if nvl(est_row_paramcalcicmsempr.DM_SOMA_IPI,-1) not in (0,1) then
      --
      vn_fase := 32.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o IPI na Base de Calculo" Inválido ('|| est_row_paramcalcicmsempr.DM_SOMA_IPI ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 33;
   --
    if nvl(est_row_paramcalcicmsempr.DM_SOMA_II,-1) not in (0,1) then
      --
      vn_fase := 33.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Imposto de Importação na Base de Calculo" Inválido ('|| est_row_paramcalcicmsempr.DM_SOMA_II ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_paramcalcicmsempr.prioridade,0)                > 0
    and nvl(est_row_paramcalcicmsempr.empresa_id,0)              > 0
    and trim(est_row_paramcalcicmsempr.dt_ini)                   is not null
    and nvl(est_row_paramcalcicmsempr.DM_CALC_FISICA,-1)         in (0, 1, 2, 3, 4, 5, 6)
    and nvl(est_row_paramcalcicmsempr.DM_CALC_CONS_FINAL,-1)     in (0, 1, 2, 3, 4, 5, 6, 7)
    and nvl(est_row_paramcalcicmsempr.DM_CALC_CONTR_ISENTO,-1)   in (0,1,2)
    and nvl(est_row_paramcalcicmsempr.DM_CALC_NAO_CONTR,-1)      in (0,1,2)
    and nvl(est_row_paramcalcicmsempr.DM_EMIT_COM_SUFRAMA,-1)    in (0,1,2)
    and nvl(est_row_paramcalcicmsempr.DM_DEST_COM_SUFRAMA,-1)    in (0,1,2)
    and nvl(est_row_paramcalcicmsempr.INDICE,0)                  > 0
    and nvl(est_row_paramcalcicmsempr.DM_AJUSTA_MVA,-1)          in (0,1)
    and nvl(est_row_paramcalcicmsempr.DM_AJUST_DESC_ZFM_ITEM,-1) in (0,1)
    and nvl(est_row_paramcalcicmsempr.DM_SOMA_FRETE,-1)          in (0,1)
    and nvl(est_row_paramcalcicmsempr.DM_SOMA_SEGURO,-1)         in (0,1)
    and nvl(est_row_paramcalcicmsempr.DM_SOMA_OUTRA_DESP,-1)     in (0,1)
    and nvl(est_row_paramcalcicmsempr.DM_SOMA_IPI,-1)            in (0,1)
    and nvl(est_row_paramcalcicmsempr.DM_SOMA_II,-1)             in (0,1) then
      --
      if nvl(est_row_paramcalcicmsempr.id,0) = 0 then
         --
         select paramcalcicmsempr_seq.nextval
           into est_row_paramcalcicmsempr.id
           from dual;
         --
         insert into param_calc_icms_empr ( id
                                          , dm_tipo_param
                                          , prioridade
                                          , empresa_id
                                          , cfop_id
                                          , dt_ini
                                          , dt_fin
                                          , estado_id_dest
                                          , ncm_id
                                          , extipi_id
                                          , dm_orig_merc
                                          , item_id
                                          , cpf_cnpj
                                          , natoper_id
                                          , dm_calc_fisica
                                          , dm_calc_cons_final
                                          , dm_calc_contr_isento
                                          , dm_calc_nao_contr
                                          , dm_emit_com_suframa
                                          , dm_dest_com_suframa
                                          , cfop_id_dest
                                          , codst_id
                                          , aliq_dest
                                          , perc_reduc_bc
                                          , perc_difer
                                          , obsfiscal_id
                                          , obs_compl
                                          , dm_mod_base_calc
                                          , indice
                                          , dm_ajusta_mva
                                          , dm_ajust_desc_zfm_item
                                          , dm_soma_frete
                                          , dm_soma_seguro
                                          , dm_soma_outra_desp
                                          , dm_soma_ipi
                                          , dm_soma_ii )
                                    values( est_row_paramcalcicmsempr.id
                                          , est_row_paramcalcicmsempr.dm_tipo_param
                                          , est_row_paramcalcicmsempr.prioridade
                                          , est_row_paramcalcicmsempr.empresa_id
                                          , est_row_paramcalcicmsempr.cfop_id
                                          , est_row_paramcalcicmsempr.dt_ini
                                          , est_row_paramcalcicmsempr.dt_fin
                                          , est_row_paramcalcicmsempr.estado_id_dest
                                          , est_row_paramcalcicmsempr.ncm_id
                                          , est_row_paramcalcicmsempr.extipi_id
                                          , est_row_paramcalcicmsempr.dm_orig_merc
                                          , est_row_paramcalcicmsempr.item_id
                                          , est_row_paramcalcicmsempr.cpf_cnpj
                                          , est_row_paramcalcicmsempr.natoper_id
                                          , est_row_paramcalcicmsempr.dm_calc_fisica
                                          , est_row_paramcalcicmsempr.dm_calc_cons_final
                                          , est_row_paramcalcicmsempr.dm_calc_contr_isento
                                          , est_row_paramcalcicmsempr.dm_calc_nao_contr
                                          , est_row_paramcalcicmsempr.dm_emit_com_suframa
                                          , est_row_paramcalcicmsempr.dm_dest_com_suframa
                                          , est_row_paramcalcicmsempr.cfop_id_dest
                                          , est_row_paramcalcicmsempr.codst_id
                                          , est_row_paramcalcicmsempr.aliq_dest
                                          , est_row_paramcalcicmsempr.perc_reduc_bc
                                          , est_row_paramcalcicmsempr.perc_difer
                                          , est_row_paramcalcicmsempr.obsfiscal_id
                                          , est_row_paramcalcicmsempr.obs_compl
                                          , est_row_paramcalcicmsempr.dm_mod_base_calc
                                          , est_row_paramcalcicmsempr.indice
                                          , est_row_paramcalcicmsempr.dm_ajusta_mva
                                          , est_row_paramcalcicmsempr.dm_ajust_desc_zfm_item
                                          , est_row_paramcalcicmsempr.dm_soma_frete
                                          , est_row_paramcalcicmsempr.dm_soma_seguro
                                          , est_row_paramcalcicmsempr.dm_soma_outra_desp
                                          , est_row_paramcalcicmsempr.dm_soma_ipi
                                          , est_row_paramcalcicmsempr.dm_soma_ii );
         --
      else
        --
        update param_calc_icms_empr
           set dm_tipo_param            = est_row_paramcalcicmsempr.dm_tipo_param
             , prioridade               = est_row_paramcalcicmsempr.prioridade             
             , empresa_id               = est_row_paramcalcicmsempr.empresa_id             
             , cfop_id                  = est_row_paramcalcicmsempr.cfop_id                
             , dt_ini                   = est_row_paramcalcicmsempr.dt_ini                 
             , dt_fin                   = est_row_paramcalcicmsempr.dt_fin                 
             , estado_id_dest           = est_row_paramcalcicmsempr.estado_id_dest         
             , ncm_id                   = est_row_paramcalcicmsempr.ncm_id                 
             , extipi_id                = est_row_paramcalcicmsempr.extipi_id              
             , dm_orig_merc             = est_row_paramcalcicmsempr.dm_orig_merc           
             , item_id                  = est_row_paramcalcicmsempr.item_id                
             , cpf_cnpj                 = est_row_paramcalcicmsempr.cpf_cnpj               
             , natoper_id               = est_row_paramcalcicmsempr.natoper_id             
             , dm_calc_fisica           = est_row_paramcalcicmsempr.dm_calc_fisica         
             , dm_calc_cons_final       = est_row_paramcalcicmsempr.dm_calc_cons_final     
             , dm_calc_contr_isento     = est_row_paramcalcicmsempr.dm_calc_contr_isento   
             , dm_calc_nao_contr        = est_row_paramcalcicmsempr.dm_calc_nao_contr      
             , dm_emit_com_suframa      = est_row_paramcalcicmsempr.dm_emit_com_suframa    
             , dm_dest_com_suframa      = est_row_paramcalcicmsempr.dm_dest_com_suframa    
             , cfop_id_dest             = est_row_paramcalcicmsempr.cfop_id_dest           
             , codst_id                 = est_row_paramcalcicmsempr.codst_id               
             , aliq_dest                = est_row_paramcalcicmsempr.aliq_dest              
             , perc_reduc_bc            = est_row_paramcalcicmsempr.perc_reduc_bc          
             , perc_difer               = est_row_paramcalcicmsempr.perc_difer             
             , obsfiscal_id             = est_row_paramcalcicmsempr.obsfiscal_id           
             , obs_compl                = est_row_paramcalcicmsempr.obs_compl              
             , dm_mod_base_calc         = est_row_paramcalcicmsempr.dm_mod_base_calc       
             , indice                   = est_row_paramcalcicmsempr.indice                 
             , dm_ajusta_mva            = est_row_paramcalcicmsempr.dm_ajusta_mva          
             , dm_ajust_desc_zfm_item   = est_row_paramcalcicmsempr.dm_ajust_desc_zfm_item 
             , dm_soma_frete            = est_row_paramcalcicmsempr.dm_soma_frete          
             , dm_soma_seguro           = est_row_paramcalcicmsempr.dm_soma_seguro         
             , dm_soma_outra_desp       = est_row_paramcalcicmsempr.dm_soma_outra_desp     
             , dm_soma_ipi              = est_row_paramcalcicmsempr.dm_soma_ipi            
             , dm_soma_ii               = est_row_paramcalcicmsempr.dm_soma_ii
         where id                       = est_row_paramcalcicmsempr.id;
        --
      end if;
      --
      commit;
      --
   else
      --
      vv_mensagem_log := 'Layout invalido: ' || est_row_paramcalcicmsempr.empresa_id;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_paramcalcicmsempr fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
   --
end pkb_integr_paramcalcicmsempr;

----------------------------------------------------------------------------------------------------
-- Procedimento que faz a integração da tabela de Parametros de Calculo de ICMS ST
procedure pkb_integr_paramcalcicmsstempr ( est_log_generico_calcfiscal   in out nocopy dbms_sql.number_table
                                         , est_row_paramcalcicmsstempr   in out nocopy param_calc_icmsst_empr%rowtype
                                         , en_empresa_id                 in            empresa.id%type
                                         , en_cd_cfop                    in            cfop.cd%type
                                         , ev_sigla_est_dest             in            estado.sigla_estado%type
                                         , ev_cd_cest                    in            cest.cd%type
                                         , ev_cd_ncm                     in            ncm.cod_ncm%type
                                         , ev_cd_ex_tipi                 in            ex_tipi.cod_ex_tipi%type
                                         , ev_cod_item                   in            item.cod_item%type
                                         , ev_cod_nat                    in            nat_oper.cod_nat%type
                                         , ev_cod_st                     in            cod_st.cod_st%type
                                         , ev_cod_of                     in            obs_fiscal.cod_of%type
                                         , en_loteintws_id               in            lote_int_ws.id%type default 0
                                         )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   vn_fase := 1;
   --
   est_row_paramcalcicmsstempr.id := pk_csf_calc_fiscal.fkg_paramcalcicmsstempr_id ( en_empresa_id        => en_empresa_id
                                                                                   , en_cfop_id           => pk_csf.fkg_cfop_id ( en_cd_cfop )
                                                                                   , en_estado_id_dest    => pk_csf.fkg_Estado_id ( ev_sigla_est_dest )
                                                                                   , ed_dt_ini            => est_row_paramcalcicmsstempr.dt_ini
                                                                                   , ed_dt_fin            => est_row_paramcalcicmsstempr.dt_fin
                                                                                   , en_cest_id           => pk_csf.fkg_id_cest_cd ( ev_cd_cest )
                                                                                   , en_ncm_id            => pk_csf.fkg_Ncm_id ( ev_cd_ncm )
                                                                                   , en_extipi_id         => pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ))
                                                                                   , en_dm_orig_merc      => est_row_paramcalcicmsstempr.dm_orig_merc
                                                                                   , en_item_id           => pk_csf.fkg_Item_id_conf_empr ( en_empresa_id, ev_cod_item )
                                                                                   , ev_cpf_cnpj          => est_row_paramcalcicmsstempr.cpf_cnpj
                                                                                   , en_natoper_id        => pk_csf.fkg_codnatpc_id ( ev_cod_nat )
                                                                                   , en_dm_calc_fisica    => est_row_paramcalcicmsstempr.dm_calc_fisica
                                                                                   );
   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_paramcalcicmsstempr.id;
   gv_obj_referencia := 'PARAM_CALC_ICMSST_EMPR';
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --
   gv_mensagem_log   := 'Integração de tabela de Parametros de Calculo de ICMS ST, Data Ini.: '||to_date(est_row_paramcalcicmsstempr.dt_ini,'dd/mm/yyyy')||', Data Fin.: '||to_date(est_row_paramcalcicmsstempr.dt_fin,'dd/mm/yyyy')||
                        ', Dom. Tipo de Param.: ' || pk_csf.fkg_dominio ( 'PARAM_CALC_ICMSST_EMPR.DM_TIPO_PARAM', est_row_paramcalcicmsstempr.dm_tipo_param) ||', Prioridade: ' || est_row_paramcalcicmsstempr.prioridade ||
                        ', CFOP: '|| en_cd_cfop || ', NCM: ' || ev_cd_ncm || ', Exceção de Ncm informados na TIPI: '|| ev_cd_ex_tipi ||
                        ', Dom. Orig. Merc.: '|| pk_csf.fkg_dominio ( 'PARAM_CALC_ICMSST_EMPR.DM_ORIG_MERC', est_row_paramcalcicmsstempr.dm_orig_merc) || vv_nro_lote||'.';
   --
   vn_fase := 3;
   --
   if trim(est_row_paramcalcicmsstempr.DT_INI) is null then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Data Inicial não pode ser nulla. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   est_row_paramcalcicmsstempr.cfop_id := pk_csf.fkg_cfop_id ( en_cd_cfop );
   --
   if nvl(est_row_paramcalcicmsstempr.cfop_id,0) <= 0 then
      --
      vn_fase := 4.2;
      --
      gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                      ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
   end if;
   --
   vn_fase := 5;
   --
   if trim(est_row_paramcalcicmsstempr.dm_tipo_param) not in ('E','R')then
      --
      vn_fase := 5.1;
      --
      gv_resumo_log := 'Valor do Dominio "Tipo de Parametro" inválido ('|| est_row_paramcalcicmsstempr.dm_tipo_param
                       ||') Valores válidos: "E" - Exceção e "R" - Regra. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 6;
   --
   est_row_paramcalcicmsstempr.estado_id_dest := pk_csf.fkg_Estado_id ( ev_sigla_est_dest );
   --
   if nvl(est_row_paramcalcicmsstempr.estado_id_dest,0) <= 0 then
      --
      vn_fase := 6.1;
      --
      gv_resumo_log := 'Sigla do Estado de Destino inválida ('|| ev_sigla_est_dest ||
                       '). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 7;
   --
   if trim(ev_cd_cest) is not null then
      --
      vn_fase := 7.1;
      --
      est_row_paramcalcicmsstempr.cest_id := pk_csf.fkg_id_cest_cd ( ev_cd_cest );
      --
      if nvl(est_row_paramcalcicmsstempr.cest_id,0) <= 0 then
         --
         vn_fase := 7.2;
         --
         gv_resumo_log := 'Código do "CEST" inválido ('|| ev_cd_cest
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 8;
   --
   if trim(ev_cd_ncm) is not null then
      --
      vn_fase := 8.1;
      --
      est_row_paramcalcicmsstempr.ncm_id := pk_csf.fkg_Ncm_id ( ev_cd_ncm );
      --
      if nvl(est_row_paramcalcicmsstempr.ncm_id,0) <= 0 then
         --
         vn_fase := 8.2;
         --
         gv_resumo_log := 'Código da Tabela de "NCM" inválido ('|| ev_cd_ncm
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 9;
   --
   if trim(ev_cd_ex_tipi) is not null then
      --
      vn_fase := 9.1;
      --
      est_row_paramcalcicmsstempr.extipi_id := pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ));
      --
      if nvl(est_row_paramcalcicmsstempr.extipi_id,0) <= 0 then
         --
         vn_fase := 9.2;
         --
         gv_resumo_log := 'Código da Tabela de "Exceção de Ncm informados na TIPI" inválido ('|| ev_cd_ex_tipi
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   if nvl(est_row_paramcalcicmsstempr.dm_orig_merc,0) not in (0,1,2,3,4,5,6,7,8) then
      --
      vn_fase := 10.1;
      --
      gv_resumo_log := 'Valor de Dominio de "Origem de Mercadoria" ('|| est_row_paramcalcicmsstempr.dm_orig_merc ||
                       ') inválido, Valores validos: 0 - Nacional, exceto as indicadas nos códigos 3 a 5, 1 - Estrangeira - Importação direta, exceto a indicada no código 6, '||
                       '2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7, 3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%, '||
                       '4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes, '||
                       '5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%, 6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e '||
                       '7 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 11;
   --
   if trim(ev_cod_item) is not null then
      --
      est_row_paramcalcicmsstempr.item_id := pk_csf.fkg_Item_id_conf_empr ( en_empresa_id, ev_cod_item );
      --
      if nvl(est_row_paramcalcicmsstempr.item_id,0) = 0 then
         --
         vn_fase := 11.1;
         --
         gv_resumo_log := 'Código do Item ('|| ev_cod_item ||') inválido ou não cadastrado no Compliance, favor verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   if trim(ev_cod_nat) is not null then
      --
      est_row_paramcalcicmsstempr.NATOPER_ID := pk_csf.fkg_natoper_id_cod_nat ( pk_csf.fkg_multorg_id_empresa ( en_empresa_id), ev_cod_nat);
      --
      if nvl(est_row_paramcalcicmsstempr.NATOPER_ID,0) <= 0 then
         --
         vn_fase := 11.1;
         --
         gv_resumo_log := 'Código da Natureza de Operação('|| ev_cod_nat ||') inválido, favor verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if trim(ev_cod_st) is not null then
      --
      vn_fase := 13.1;
      --
      est_row_paramcalcicmsstempr.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => ev_cod_st
                                                                   , en_tipoimp_id  => pk_csf.fkg_Tipo_Imposto_id ( 1 ) --ICMS
                                                                   );
      --
      if nvl(est_row_paramcalcicmsstempr.codst_id,0) <= 0 then
         --
         vn_fase := 13.2;
         --
         gv_resumo_log := 'Valor do "Código de Situação Tributaria" Inválido ('|| ev_cod_st ||'), Favor Verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_paramcalcicmsstempr.aliq_dest,0) <= 0 then
      --
      vn_fase := 14.1;
      --
      gv_resumo_log := 'Valor da "Aliquota de destino" Inválido ('|| est_row_paramcalcicmsstempr.aliq_dest ||'), Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 15;
   --
   if trim(ev_cod_of) is not null then
      --
      est_row_paramcalcicmsstempr.obsfiscal_id := pk_csf_calc_fiscal.fkg_obsfiscal_id ( ev_cod_of => ev_cod_of );
      --
      if nvl(est_row_paramcalcicmsstempr.obsfiscal_id,0) <= 0 then
         --
         vn_fase := 15.1;
         --
         gv_resumo_log := 'Código da Observacao Fiscal inválido, Favor Verificar. Código = '||ev_cod_of;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 16;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_MOD_BASE_CALC_ST,-1) not in (0,1,2,3,4,5,6) then
      --
      vn_fase := 16.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Modalidade da Base de Calculo de ICMS-ST" ('|| est_row_paramcalcicmsstempr.DM_MOD_BASE_CALC_ST ||
                        ') Inválido, Valores Permitidos: 0 - Preco tabelado ou maximo sugerido; 1 - Lista Negativa (valor); 2 -Lista Positiva (valor); '||
                        '3 - Lista Neutra (valor); 4 - Margem Valor Agregado (%); 5 - Pauta (valor); 6 - Valor da Operação (valor)';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(est_row_paramcalcicmsstempr.INDICE,-1) < 0 then
      --
      vn_fase := 17.1;
      --
       gv_resumo_log := 'Valor "Indice" não pode ser menor ou igual a zero.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 18;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_AJUSTA_MVA,-1) not in (0,1) then
      --
      vn_fase := 18.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Ajusta MVA" Inválido ('|| est_row_paramcalcicmsstempr.DM_AJUSTA_MVA ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 19;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_EFEITO,-1) not in (1,2) then
      --
      vn_fase := 19.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Efeito do parametro" Inválido ('|| est_row_paramcalcicmsstempr.DM_EFEITO ||
                       ') Valores permitidos: 1 - Destaca Imposto ou 2-Lista na Observação. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 20;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_CALC_FISICA,-1) not in (0, 1, 2, 3, 4, 5, 6) then
      --
      vn_fase := 20.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Calcula ICMS-ST para Pessoa Fisica" Inválido ('|| est_row_paramcalcicmsstempr.DM_CALC_FISICA ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 21;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_SOMA_FRETE,-1) not in (0,1) then
      --
      vn_fase := 21.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Frete na Base de Calculo" Inválido ('|| est_row_paramcalcicmsstempr.DM_SOMA_FRETE ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 22;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_SOMA_SEGURO,-1) not in (0,1) then
      --
      vn_fase := 22.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Seguro na Base de Calculo" Inválido ('|| est_row_paramcalcicmsstempr.DM_SOMA_SEGURO ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 23;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_SOMA_OUTRA_DESP,-1) not in (0,1) then
      --
      vn_fase := 23.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma Outras Despesas na Base de Calculo" Inválido ('|| est_row_paramcalcicmsstempr.DM_SOMA_OUTRA_DESP ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 24;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_SOMA_IPI,-1) not in (0,1) then
      --
      vn_fase := 24.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o IPI na Base de Calculo" Inválido ('|| est_row_paramcalcicmsstempr.DM_SOMA_IPI ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 25;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_SOMA_II,-1) not in (0,1) then
      --
      vn_fase := 25.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Imposto de Importação na Base de Calculo" Inválido ('|| est_row_paramcalcicmsstempr.DM_SOMA_II ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 24;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_SOMA_ICMSST_OD,-1) not in (0,1) then
      --
      vn_fase := 24.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma ICMS-ST em Outras Despesas, apenas se o Efeito for Lista na Observacao" Inválido ('|| est_row_paramcalcicmsstempr.DM_SOMA_ICMSST_OD ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 25;
   --
   if nvl(est_row_paramcalcicmsstempr.DM_TIPO_CALC_ST,-1) not in (0,1,3,4) then
      --
      vn_fase := 25.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma ICMS-ST em Outras Despesas, apenas se o Efeito for Lista na Observacao" Inválido ('|| est_row_paramcalcicmsstempr.DM_TIPO_CALC_ST ||
                       ') Valores permitidos: 1 - Normal, 2 - Pauta x MVA, 3 - Carga Liquida e 4 - Carga Media. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_paramcalcicmsstempr.PRIORIDADE,0) > 0
    and nvl(est_row_paramcalcicmsstempr.EMPRESA_ID,0) > 0
    and nvl(est_row_paramcalcicmsstempr.CFOP_ID,0) > 0
    and nvl(est_row_paramcalcicmsstempr.ESTADO_ID_DEST,0) > 0
    and nvl(est_row_paramcalcicmsstempr.CODST_ID,0) > 0
    and nvl(est_row_paramcalcicmsstempr.ALIQ_DEST,0) > 0
    and nvl(est_row_paramcalcicmsstempr.INDICE,0) >= 0
    and nvl(est_row_paramcalcicmsstempr.DM_AJUSTA_MVA,-1) in (0,1)
    and nvl(est_row_paramcalcicmsstempr.DM_EFEITO,-1) in (1,2)
    and nvl(est_row_paramcalcicmsstempr.DM_CALC_FISICA,-1) in (0, 1, 2, 3, 4, 5, 6)
    and nvl(est_row_paramcalcicmsstempr.DM_SOMA_FRETE,-1) in (0,1)
    and nvl(est_row_paramcalcicmsstempr.DM_SOMA_SEGURO,-1) in (0,1)
    and nvl(est_row_paramcalcicmsstempr.DM_SOMA_OUTRA_DESP,-1) in (0,1) then
      --
      if nvl(est_row_paramcalcicmsstempr.id,0) = 0 then
         --
         select paramcalcicmsstempr_seq.nextval 
           into est_row_paramcalcicmsstempr.id
           from dual;
         --
         insert into param_calc_icmsst_empr ( id
                                            , dm_tipo_param
                                            , prioridade
                                            , empresa_id
                                            , cfop_id
                                            , estado_id_dest
                                            , dt_ini
                                            , dt_fin
                                            , cest_id
                                            , ncm_id
                                            , extipi_id
                                            , dm_orig_merc
                                            , item_id
                                            , cpf_cnpj
                                            , natoper_id
                                            , codst_id
                                            ,  aliq_dest
                                            , obsfiscal_id
                                            , obs_compl
                                            , dm_mod_base_calc_st
                                            , indice
                                            , perc_reduc_bc
                                            , dm_ajusta_mva
                                            , dm_efeito
                                            , dm_calc_fisica
                                            , dm_soma_frete
                                            , dm_soma_seguro
                                            , dm_soma_outra_desp
                                            , dm_soma_ipi
                                            , dm_soma_ii
                                            , dm_soma_icmsst_od
                                            , dm_tipo_calc_st )
                                      values( est_row_paramcalcicmsstempr.id
                                            , est_row_paramcalcicmsstempr.dm_tipo_param
                                            , est_row_paramcalcicmsstempr.prioridade
                                            , est_row_paramcalcicmsstempr.empresa_id
                                            , est_row_paramcalcicmsstempr.cfop_id
                                            , est_row_paramcalcicmsstempr.estado_id_dest
                                            , est_row_paramcalcicmsstempr.dt_ini
                                            , est_row_paramcalcicmsstempr.dt_fin
                                            , est_row_paramcalcicmsstempr.cest_id
                                            , est_row_paramcalcicmsstempr.ncm_id
                                            , est_row_paramcalcicmsstempr.extipi_id
                                            , est_row_paramcalcicmsstempr.dm_orig_merc
                                            , est_row_paramcalcicmsstempr.item_id
                                            , est_row_paramcalcicmsstempr.cpf_cnpj
                                            , est_row_paramcalcicmsstempr.natoper_id
                                            , est_row_paramcalcicmsstempr.codst_id
                                            , est_row_paramcalcicmsstempr.aliq_dest
                                            , est_row_paramcalcicmsstempr.obsfiscal_id
                                            , est_row_paramcalcicmsstempr.obs_compl
                                            , est_row_paramcalcicmsstempr.dm_mod_base_calc_st
                                            , est_row_paramcalcicmsstempr.indice
                                            , est_row_paramcalcicmsstempr.perc_reduc_bc
                                            , est_row_paramcalcicmsstempr.dm_ajusta_mva
                                            , est_row_paramcalcicmsstempr.dm_efeito
                                            , est_row_paramcalcicmsstempr.dm_calc_fisica
                                            , est_row_paramcalcicmsstempr.dm_soma_frete
                                            , est_row_paramcalcicmsstempr.dm_soma_seguro
                                            , est_row_paramcalcicmsstempr.dm_soma_outra_desp
                                            , est_row_paramcalcicmsstempr.dm_soma_ipi
                                            , est_row_paramcalcicmsstempr.dm_soma_ii
                                            , est_row_paramcalcicmsstempr.dm_soma_icmsst_od
                                            , est_row_paramcalcicmsstempr.dm_tipo_calc_st );
         --
      else
         --
         update param_calc_icmsst_empr
            set dm_tipo_param       = est_row_paramcalcicmsstempr.dm_tipo_param
              , prioridade          = est_row_paramcalcicmsstempr.prioridade          
              , empresa_id          = est_row_paramcalcicmsstempr.empresa_id          
              , cfop_id             = est_row_paramcalcicmsstempr.cfop_id             
              , estado_id_dest      = est_row_paramcalcicmsstempr.estado_id_dest      
              , dt_ini              = est_row_paramcalcicmsstempr.dt_ini              
              , dt_fin              = est_row_paramcalcicmsstempr.dt_fin              
              , cest_id             = est_row_paramcalcicmsstempr.cest_id             
              , ncm_id              = est_row_paramcalcicmsstempr.ncm_id              
              , extipi_id           = est_row_paramcalcicmsstempr.extipi_id           
              , dm_orig_merc        = est_row_paramcalcicmsstempr.dm_orig_merc        
              , item_id             = est_row_paramcalcicmsstempr.item_id             
              , cpf_cnpj            = est_row_paramcalcicmsstempr.cpf_cnpj            
              , natoper_id          = est_row_paramcalcicmsstempr.natoper_id          
              , codst_id            = est_row_paramcalcicmsstempr.codst_id            
              ,  aliq_dest          = est_row_paramcalcicmsstempr.aliq_dest           
              , obsfiscal_id        = est_row_paramcalcicmsstempr.obsfiscal_id        
              , obs_compl           = est_row_paramcalcicmsstempr.obs_compl           
              , dm_mod_base_calc_st = est_row_paramcalcicmsstempr.dm_mod_base_calc_st 
              , indice              = est_row_paramcalcicmsstempr.indice              
              , perc_reduc_bc       = est_row_paramcalcicmsstempr.perc_reduc_bc       
              , dm_ajusta_mva       = est_row_paramcalcicmsstempr.dm_ajusta_mva       
              , dm_efeito           = est_row_paramcalcicmsstempr.dm_efeito           
              , dm_calc_fisica      = est_row_paramcalcicmsstempr.dm_calc_fisica      
              , dm_soma_frete       = est_row_paramcalcicmsstempr.dm_soma_frete       
              , dm_soma_seguro      = est_row_paramcalcicmsstempr.dm_soma_seguro      
              , dm_soma_outra_desp  = est_row_paramcalcicmsstempr.dm_soma_outra_desp  
              , dm_soma_ipi         = est_row_paramcalcicmsstempr.dm_soma_ipi         
              , dm_soma_ii          = est_row_paramcalcicmsstempr.dm_soma_ii          
              , dm_soma_icmsst_od   = est_row_paramcalcicmsstempr.dm_soma_icmsst_od   
              , dm_tipo_calc_st     = est_row_paramcalcicmsstempr.dm_tipo_calc_st
          where id                  = est_row_paramcalcicmsstempr.id;
         --
      end if;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_aliqtipoimpncmempre fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
   --
end pkb_integr_paramcalcicmsstempr;

----------------------------------------------------------------------------------------------------
-- Procedimento que faz a integração da tabela de Aliquota do Imposto por NCM: Tratar IPI, PIS e COFINS nivel Global
procedure pkb_integr_aliqtipoimpncmempre ( est_log_generico_calcfiscal   in out nocopy dbms_sql.number_table
                                         , est_row_aliqtipoimpncmempre   in out nocopy ALIQ_TIPOIMP_NCM_EMPRESA%rowtype
                                         , en_empresa_id                 in            empresa.id%type
                                         , en_cd_tipoimposto             in            tipo_imposto.cd%type
                                         , en_cd_cfop                    in            cfop.cd%type
                                         , ev_cd_ncm                     in            varchar--ncm.cod_ncm%type
                                         , ev_cd_ex_tipi                 in            varchar--ex_tipi.cod_ex_tipi%type
                                         , ev_cod_item                   in            varchar--item.cod_item%type
                                         , ev_cod_nat                    in            varchar--nat_oper.cod_nat%type
                                         , ev_cpf_cnpj                   in            varchar--varchar2
                                         , ev_cod_st                     in            varchar--nat_oper.cod_nat%type
                                         , ev_cod_of                     in            varchar--obs_fiscal.cod_of%type
                                         , ev_cd_cl_enq_ipi              in            varchar--classe_enq_ipi.id%type
                                         , ev_cod_selo_ipi               in            varchar--SELO_CONTR_IPI.COD_SELO_IPI%type
                                         , ev_cd_enqlegalipi             in            varchar--enq_legal_ipi.cd%type
                                         , en_loteintws_id               in            lote_int_ws.id%type default 0
                                         )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   vn_fase := 1;
   --
   est_row_aliqtipoimpncmempre.id := pk_csf_calc_fiscal.fkg_aliqtipoimpncmempresa_id ( en_empresa_id          => en_empresa_id
                                                                                     , ed_dt_ini              => est_row_aliqtipoimpncmempre.dt_ini
                                                                                     , ed_dt_fin              => est_row_aliqtipoimpncmempre.dt_fin        
                                                                                     , ev_dm_tipo_param       => est_row_aliqtipoimpncmempre.dm_tipo_param 
                                                                                     , en_prioridade          => est_row_aliqtipoimpncmempre.prioridade
                                                                                     , en_tipoimposto_id      => pk_csf.fkg_Tipo_Imposto_id ( en_cd_tipoimposto )
                                                                                     , en_cfop_id             => pk_csf.fkg_cfop_id ( en_cd_cfop )
                                                                                     , en_ncm_id              => pk_csf.fkg_Ncm_id ( ev_cd_ncm )
                                                                                     , en_extipi_id           => pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ))
                                                                                     , en_dm_orig_merc        => est_row_aliqtipoimpncmempre.dm_orig_merc
                                                                                     , en_item_id             => pk_csf.fkg_Item_id_conf_empr ( en_empresa_id, ev_cod_item )
                                                                                     , en_natoper_id          => pk_csf.fkg_codnatpc_id ( ev_cod_nat )
                                                                                     , ev_cpf_cnpj            => est_row_aliqtipoimpncmempre.cpf_cnpj
                                                                                     , en_dm_calc_cons_final  => est_row_aliqtipoimpncmempre.dm_calc_cons_final
                                                                                     );

   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_aliqtipoimpncmempre.id;
   gv_obj_referencia := 'ALIQ_TIPOIMP_NCM_EMPRESA';
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --
   gv_mensagem_log   := 'Integração de Parametro de Aliquota do Imposto por NCM, detalhe por ITEM da Empresa, Data Ini.: '||to_date(est_row_aliqtipoimpncmempre.dt_ini,'dd/mm/yyyy')||', Data Fin.: '||to_date(est_row_aliqtipoimpncmempre.dt_fin,'dd/mm/yyyy')||
                        ', Dom. Tipo de Param.: ' || pk_csf.fkg_dominio ( 'ALIQ_TIPOIMP_NCM_EMPRESA.DM_TIPO_PARAM', est_row_aliqtipoimpncmempre.dm_tipo_param) ||', Prioridade: ' || est_row_aliqtipoimpncmempre.prioridade ||
                        ', Cód. do Tipo de Imp.: ' || en_cd_tipoimposto ||', CFOP: '|| en_cd_cfop || ', NCM: ' || ev_cd_ncm || ', Exceção de Ncm informados na TIPI: '|| ev_cd_ex_tipi ||
                        ', Dom. Orig. Merc.: '|| pk_csf.fkg_dominio ( 'ALIQ_TIPOIMP_NCM_EMPRESA.DM_ORIG_MERC', est_row_aliqtipoimpncmempre.dm_orig_merc) || vv_nro_lote||'.';
   --
   vn_fase := 3;
   --
   if trim(est_row_aliqtipoimpncmempre.DT_INI) is null then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Data Inicial não pode ser nulla. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if trim(est_row_aliqtipoimpncmempre.dm_tipo_param) not in ('E','R')then
      --
      vn_fase := 4.1;
      --
      gv_resumo_log := 'Valor do Dominio "Tipo de Parametro" inválido ('|| est_row_aliqtipoimpncmempre.dm_tipo_param
                       ||') Valores válidos: "E" - Exceção e "R" - Regra. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_aliqtipoimpncmempre.prioridade,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_resumo_log := 'Valor do Campo "Prioridade do Parâmetro" inválido ('|| est_row_aliqtipoimpncmempre.prioridade
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 6;
   --
   est_row_aliqtipoimpncmempre.tipoimposto_id := pk_csf.fkg_Tipo_Imposto_id ( en_cd_tipoimposto );
   --
   if nvl(est_row_aliqtipoimpncmempre.tipoimposto_id,0) <= 0 then
      --
      vn_fase := 6.1;
      --
      gv_resumo_log := 'Valor do Campo "Código do Imposto" inválido ('|| en_cd_tipoimposto
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 7;
   --
   if trim(en_cd_cfop) is not null then
      --
      est_row_aliqtipoimpncmempre.cfop_id := pk_csf.fkg_cfop_id ( en_cd_cfop );
      --
      if nvl(est_row_aliqtipoimpncmempre.cfop_id,0) <= 0 then
         --
         vn_fase := 7.2;
         --
         gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                         ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
      end if;
      --
   end if;
   --
   vn_fase := 8;
   --
   if trim(ev_cd_ncm) is not null then
      --
      vn_fase := 8.1;
      --
      est_row_aliqtipoimpncmempre.ncm_id := pk_csf.fkg_Ncm_id ( ev_cd_ncm );
      --
      if nvl(est_row_aliqtipoimpncmempre.ncm_id,0) <= 0 then
         --
         vn_fase := 8.2;
         --
         gv_resumo_log := 'Código da Tabela de "NCM" inválido ('|| ev_cd_ncm
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 9;
   --
   if trim(ev_cd_ex_tipi) is not null then
      --
      vn_fase := 9.1;
      --
      est_row_aliqtipoimpncmempre.extipi_id := pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ));
      --
      if nvl(est_row_aliqtipoimpncmempre.extipi_id,0) <= 0 then
         --
         vn_fase := 9.2;
         --
         gv_resumo_log := 'Código da Tabela de "Exceção de Ncm informados na TIPI" inválido ('|| ev_cd_ex_tipi
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   if nvl(est_row_aliqtipoimpncmempre.dm_orig_merc,0) not in (0,1,2,3,4,5,6,7,8) then
      --
      vn_fase := 10.1;
      --
      gv_resumo_log := 'Valor de Dominio de "Origem de Mercadoria" ('|| est_row_aliqtipoimpncmempre.dm_orig_merc ||
                       ') inválido, Valores validos: 0 - Nacional, exceto as indicadas nos códigos 3 a 5, 1 - Estrangeira - Importação direta, exceto a indicada no código 6, '||
                       '2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7, 3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%, '||
                       '4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes, '||
                       '5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%, 6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e '||
                       '7 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 11;
   --
   if trim(ev_cod_item) is not null then
      --
      est_row_aliqtipoimpncmempre.item_id := pk_csf.fkg_Item_id_conf_empr ( en_empresa_id, ev_cod_item );
      --
      if nvl(est_row_aliqtipoimpncmempre.item_id,0) = 0 then
         --
         vn_fase := 11.1;
         --
         gv_resumo_log := 'Código do Item ('|| ev_cod_item ||') inválido ou não cadastrado no Compliance, favor verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   if trim(ev_cod_nat) is not null then
      --
      est_row_aliqtipoimpncmempre.NATOPER_ID := pk_csf.fkg_natoper_id_cod_nat ( pk_csf.fkg_multorg_id_empresa ( en_empresa_id), ev_cod_nat);
      --
      if nvl(est_row_aliqtipoimpncmempre.NATOPER_ID,0) <= 0 then
         --
         vn_fase := 11.1;
         --
         gv_resumo_log := 'Código da Natureza de Operação('|| ev_cod_nat ||') inválido, favor verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if nvl(est_row_aliqtipoimpncmempre.DM_CALC_CONS_FINAL,-1) not in (0, 1, 2, 3, 4, 5, 6, 7) then
      --
      vn_fase := 13.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Calcula Consumidor Final" ('|| est_row_aliqtipoimpncmempre.DM_CALC_CONS_FINAL ||
                        ') inválido, Valores validos: '||
                        '0-Não, '||
                        '1-Sim, '||
                        '2-Indiferente, '||
                        '3-Industria, '||
                        '4-Comercio, '||
                        '5-Atacado, '||
                        '6-Varejo, '||
                        '7-Industria / Consumo Final. '||
                        'Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 14;
   --
   if trim(ev_cod_st) is not null then
      --
      vn_fase := 14.1;
      --
      est_row_aliqtipoimpncmempre.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => ev_cod_st
                                                                   , en_tipoimp_id  => est_row_aliqtipoimpncmempre.tipoimposto_id
                                                                   );
      --
      if nvl(est_row_aliqtipoimpncmempre.codst_id,0) <= 0 then
         --
         vn_fase := 14.2;
         --
         gv_resumo_log := 'Valor do "Código de Situação Tributaria" Inválido ('|| ev_cod_st ||'), Favor Verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 15;
   --
   if nvl(est_row_aliqtipoimpncmempre.dm_tipo,0) not in (1,2) then
      --
      vn_fase := 15.1;
      --
      gv_resumo_log := 'Valor do "Código de Situação Tributaria" Inválido ('|| est_row_aliqtipoimpncmempre.dm_tipo ||'), Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 16;
   --
   if nvl(est_row_aliqtipoimpncmempre.INDICE,0) <= 0 then
      --
      vn_fase := 16.1;
      --
       gv_resumo_log := 'Valor " Alíquota ou Valor do Imposto" não pode ser menor ou igual a zero.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(est_row_aliqtipoimpncmempre.DM_SOMA_FRETE,-1) not in (0,1) then
      --
      vn_fase := 17.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Frete na Base de Calculo" Inválido ('|| est_row_aliqtipoimpncmempre.DM_SOMA_FRETE ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 18;
   --
   if nvl(est_row_aliqtipoimpncmempre.DM_SOMA_SEGURO,-1) not in (0,1) then
      --
      vn_fase := 18.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Seguro na Base de Calculo" Inválido ('|| est_row_aliqtipoimpncmempre.DM_SOMA_SEGURO ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 19;
   --
   if nvl(est_row_aliqtipoimpncmempre.DM_SOMA_OUTRA_DESP,-1) not in (0,1) then
      --
      vn_fase := 19.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma Outras Despesas na Base de Calculo" Inválido ('|| est_row_aliqtipoimpncmempre.DM_SOMA_OUTRA_DESP ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 20;
   --
   if nvl(est_row_aliqtipoimpncmempre.DM_SOMA_II,-1) not in (0,1) then
      --
      vn_fase := 20.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Imposto de Importação na Base de Calculo" Inválido ('|| est_row_aliqtipoimpncmempre.DM_SOMA_II ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 21;
   --
   if nvl(est_row_aliqtipoimpncmempre.DM_SOMA_ICMSST,-1) not in (0,1) then
      --
      vn_fase := 21.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Imposto de ICMS-ST na Base de Calculo" Inválido ('|| est_row_aliqtipoimpncmempre.DM_SOMA_ICMSST ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 22;
   --
   if trim(ev_cod_of) is not null then
      --
      est_row_aliqtipoimpncmempre.obsfiscal_id := pk_csf_calc_fiscal.fkg_obsfiscal_id ( ev_cod_of => ev_cod_of );
      --
      if nvl(est_row_aliqtipoimpncmempre.obsfiscal_id,0) <= 0 then
         --
         vn_fase := 22.1;
         --
         gv_resumo_log := 'Código da Observacao Fiscal inválido, Favor Verificar. Código = '||ev_cod_of;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 23;
   --
   if trim(ev_cd_cl_enq_ipi) is not null then
      --
      vn_fase := 23.1;
      --
      est_row_aliqtipoimpncmempre.classeenqipi_id := pk_csf.fkg_Classe_Enq_IPI_id ( ev_cd_cl_enq_ipi);
      --
      if nvl(est_row_aliqtipoimpncmempre.classeenqipi_id,0) <= 0 then
         --
         vn_fase := 23.1;
         --
         gv_resumo_log := 'Código da Classe de Enquadramento Legal do IPI inválido, Favor Verificar. Código = '||ev_cd_cl_enq_ipi;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 24;
   --
   if trim(ev_cod_selo_ipi) is not null then
      --
      vn_fase := 24.1;
      --
      est_row_aliqtipoimpncmempre.SELOCONTRIPI_ID := pk_csf.fkg_Selo_Contr_IPI_id ( ev_cod_selo_ipi );
      --
      if nvl(est_row_aliqtipoimpncmempre.SELOCONTRIPI_ID,0) <= 0 then
         --
         vn_fase := 24.2;
         --
         gv_resumo_log := 'Código do Selo de Controle de IPI inválido, Favor Verificar. Código = '||ev_cod_selo_ipi;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 25;
   --
   if trim(ev_cd_enqlegalipi) is not null then
      --
      vn_fase := 25.1;
      --
      est_row_aliqtipoimpncmempre.ENQLEGALIPI_ID := pk_csf.fkg_id_enq_legal_ipi ( ev_cd_enqlegalipi);
      --
      if nvl(est_row_aliqtipoimpncmempre.ENQLEGALIPI_ID,0) <= 0 then
         --
         vn_fase := 25.2;
         --
         gv_resumo_log := 'Código de Enquadramento do IPI inválido, Favor Verificar. Código = '||ev_cd_enqlegalipi;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_aliqtipoimpncmempre.EMPRESA_ID,0)            > 0
    and nvl(est_row_aliqtipoimpncmempre.TIPOIMPOSTO_ID,0)      > 0
    and nvl(est_row_aliqtipoimpncmempre.DM_TIPO,0)             in (1,2)
    and nvl(est_row_aliqtipoimpncmempre.DM_CALC_CONS_FINAL,-1) in (0, 1, 2, 3, 4, 5, 6, 7)
    and nvl(est_row_aliqtipoimpncmempre.INDICE,0)              > 0
    and nvl(est_row_aliqtipoimpncmempre.DM_SOMA_FRETE,-1)      in (0,1)
    and nvl(est_row_aliqtipoimpncmempre.DM_SOMA_SEGURO,-1)     in (0,1)
    and nvl(est_row_aliqtipoimpncmempre.DM_SOMA_OUTRA_DESP,-1) in (0,1)
    and nvl(est_row_aliqtipoimpncmempre.DM_SOMA_II,-1)         in (0,1)
    and nvl(est_row_aliqtipoimpncmempre.DM_SOMA_ICMSST,-1)     in (0,1) then
      --
      if nvl(est_row_aliqtipoimpncmempre.id,0) = 0 then
         --
         select aliqtipoimpncmempresa_seq.nextval
           into est_row_aliqtipoimpncmempre.id
           from dual;
         --
         insert into aliq_tipoimp_ncm_empresa ( id
                                              , dm_tipo_param
                                              , prioridade
                                              , empresa_id
                                              , tipoimposto_id
                                              , cfop_id
                                              , ncm_id
                                              , extipi_id
                                              , dm_orig_merc
                                              , item_id
                                              , dt_ini
                                              , dt_fin
                                              , natoper_id
                                              , cpf_cnpj
                                              , dm_calc_cons_final
                                              , codst_id
                                              , dm_tipo
                                              , indice
                                              , perc_major
                                              , perc_reduc_bc
                                              , dm_soma_frete
                                              , dm_soma_seguro
                                              , dm_soma_outra_desp
                                              , dm_soma_ii
                                              , dm_soma_icmsst
                                              , obsfiscal_id
                                              , obs_compl
                                              , classeenqipi_id
                                              , selocontripi_id
                                              , qtde_selo_contr_ipi
                                              , enqlegalipi_id )
                                        values( est_row_aliqtipoimpncmempre.id
                                              , est_row_aliqtipoimpncmempre.dm_tipo_param
                                              , est_row_aliqtipoimpncmempre.prioridade
                                              , est_row_aliqtipoimpncmempre.empresa_id
                                              , est_row_aliqtipoimpncmempre.tipoimposto_id
                                              , est_row_aliqtipoimpncmempre.cfop_id
                                              , est_row_aliqtipoimpncmempre.ncm_id
                                              , est_row_aliqtipoimpncmempre.extipi_id
                                              , est_row_aliqtipoimpncmempre.dm_orig_merc
                                              , est_row_aliqtipoimpncmempre.item_id
                                              , est_row_aliqtipoimpncmempre.dt_ini
                                              , est_row_aliqtipoimpncmempre.dt_fin
                                              , est_row_aliqtipoimpncmempre.natoper_id
                                              , est_row_aliqtipoimpncmempre.cpf_cnpj
                                              , est_row_aliqtipoimpncmempre.dm_calc_cons_final
                                              , est_row_aliqtipoimpncmempre.codst_id
                                              , est_row_aliqtipoimpncmempre.dm_tipo
                                              , est_row_aliqtipoimpncmempre.indice
                                              , est_row_aliqtipoimpncmempre.perc_major
                                              , est_row_aliqtipoimpncmempre.perc_reduc_bc
                                              , est_row_aliqtipoimpncmempre.dm_soma_frete
                                              , est_row_aliqtipoimpncmempre.dm_soma_seguro
                                              , est_row_aliqtipoimpncmempre.dm_soma_outra_desp
                                              , est_row_aliqtipoimpncmempre.dm_soma_ii
                                              , est_row_aliqtipoimpncmempre.dm_soma_icmsst
                                              , est_row_aliqtipoimpncmempre.obsfiscal_id
                                              , est_row_aliqtipoimpncmempre.obs_compl
                                              , est_row_aliqtipoimpncmempre.classeenqipi_id
                                              , est_row_aliqtipoimpncmempre.selocontripi_id
                                              , est_row_aliqtipoimpncmempre.qtde_selo_contr_ipi
                                              , est_row_aliqtipoimpncmempre.enqlegalipi_id );
         --
      else
         --
         update aliq_tipoimp_ncm_empresa
            set dm_tipo_param       = est_row_aliqtipoimpncmempre.dm_tipo_param
              , prioridade          = est_row_aliqtipoimpncmempre.prioridade            
              , empresa_id          = est_row_aliqtipoimpncmempre.empresa_id            
              , tipoimposto_id      = est_row_aliqtipoimpncmempre.tipoimposto_id        
              , cfop_id             = est_row_aliqtipoimpncmempre.cfop_id               
              , ncm_id              = est_row_aliqtipoimpncmempre.ncm_id                
              , extipi_id           = est_row_aliqtipoimpncmempre.extipi_id             
              , dm_orig_merc        = est_row_aliqtipoimpncmempre.dm_orig_merc          
              , item_id             = est_row_aliqtipoimpncmempre.item_id               
              , dt_ini              = est_row_aliqtipoimpncmempre.dt_ini                
              , dt_fin              = est_row_aliqtipoimpncmempre.dt_fin                
              , natoper_id          = est_row_aliqtipoimpncmempre.natoper_id            
              , cpf_cnpj            = est_row_aliqtipoimpncmempre.cpf_cnpj              
              , dm_calc_cons_final  = est_row_aliqtipoimpncmempre.dm_calc_cons_final    
              , codst_id            = est_row_aliqtipoimpncmempre.codst_id              
              , dm_tipo             = est_row_aliqtipoimpncmempre.dm_tipo               
              , indice              = est_row_aliqtipoimpncmempre.indice                
              , perc_major          = est_row_aliqtipoimpncmempre.perc_major            
              , perc_reduc_bc       = est_row_aliqtipoimpncmempre.perc_reduc_bc         
              , dm_soma_frete       = est_row_aliqtipoimpncmempre.dm_soma_frete         
              , dm_soma_seguro      = est_row_aliqtipoimpncmempre.dm_soma_seguro        
              , dm_soma_outra_desp  = est_row_aliqtipoimpncmempre.dm_soma_outra_desp    
              , dm_soma_ii          = est_row_aliqtipoimpncmempre.dm_soma_ii            
              , dm_soma_icmsst      = est_row_aliqtipoimpncmempre.dm_soma_icmsst        
              , obsfiscal_id        = est_row_aliqtipoimpncmempre.obsfiscal_id          
              , obs_compl           = est_row_aliqtipoimpncmempre.obs_compl             
              , classeenqipi_id     = est_row_aliqtipoimpncmempre.classeenqipi_id       
              , selocontripi_id     = est_row_aliqtipoimpncmempre.selocontripi_id       
              , qtde_selo_contr_ipi = est_row_aliqtipoimpncmempre.qtde_selo_contr_ipi   
              , enqlegalipi_id      = est_row_aliqtipoimpncmempre.enqlegalipi_id
          where id                  = est_row_aliqtipoimpncmempre.id;
         --
      end if;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_aliqtipoimpncmempre fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
   --
end pkb_integr_aliqtipoimpncmempre;

----------------------------------------------------------------------------------------------------
-- Procedimento que faz a integração da tabela de Parametro de Calculo de Retido nivel global
procedure pkb_integr_param_calc_retido ( est_log_generico_calcfiscal   in out nocopy dbms_sql.number_table
                                       , est_row_param_calc_retido     in out nocopy param_calc_retido%rowtype
                                       , en_empresa_id                 in            empresa.id%type
                                       , en_cd_cfop                    in            cfop.cd%type
                                       , en_cd_reg_trib                in            reg_trib.cd%type
                                       , en_cd_forma_trib              in            forma_trib.cd%type
                                       , ev_cd_cnae                    in            cnae.cd%type
                                       , ev_cod_of                     in            obs_fiscal.cod_of%type
                                       , ev_cd_lista_serv              in            tipo_servico.COD_LST%type
                                       , en_cd_tipoimposto             in            tipo_imposto.cd%type
                                       , en_loteintws_id               in            lote_int_ws.id%type default 0
                                       )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   vn_fase := 1;
   --
   est_row_param_calc_retido.id := pk_csf_calc_fiscal.fkg_paramcalcretido_id ( ed_dt_ini         => est_row_param_calc_retido.dt_ini
                                                                          , ed_dt_fin         => est_row_param_calc_retido.dt_fin
                                                                          , ev_dm_tipo_param  => est_row_param_calc_retido.dm_tipo_param
                                                                          , en_prioridade     => est_row_param_calc_retido.prioridade
                                                                          , en_tipoimposto_id => pk_csf.fkg_Tipo_Imposto_id ( en_cd_tipoimposto )
                                                                          , en_cfop_id        => pk_csf.fkg_cfop_id ( en_cd_cfop )
                                                                          , en_regtrib_id     => pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib)
                                                                          , en_formatrib_id   => pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib )
                                                                          , en_cnae_id        => pk_csf.fkg_id_cnae_cd ( ev_cd_cnae )
                                                                          , en_tiposervico_id => pk_csf.fkg_Tipo_Servico_id ( ev_cd_lista_serv)
                                                                          );
   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_param_calc_retido.id;
   gv_obj_referencia := 'PARAM_CALC_RETIDO';
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --
   gv_mensagem_log   := 'Integração de Parametro de Calculo de Retido nivel global, Data Ini.: '||to_date(est_row_param_calc_retido.dt_ini,'dd/mm/yyyy')||', Data Fin.: '||to_date(est_row_param_calc_retido.dt_fin,'dd/mm/yyyy')||
                        ', Dom. Tipo de Param.: ' || pk_csf.fkg_dominio ( 'PARAM_CALC_RETIDO.DM_TIPO_PARAM', est_row_param_calc_retido.dm_tipo_param) ||', Prioridade: ' || est_row_param_calc_retido.prioridade ||
                        ', Cód. do Tipo de Imp.: ' || en_cd_tipoimposto ||', CFOP: '|| en_cd_cfop || ', Regime Trib.: ' || en_cd_reg_trib ||
                        ', Forma de Trib.: '|| en_cd_forma_trib || ', CNAE.: '|| ev_cd_cnae || ', Cód. List. de Seriço.: ' || ev_cd_lista_serv || vv_nro_lote||'.';
   --
   vn_fase := 3;
   --
   if trim(est_row_param_calc_retido.DT_INI) is null then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Data Inicial não pode ser nulla. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if trim(est_row_param_calc_retido.dm_tipo_param) not in ('E','R')then
      --
      vn_fase := 4.1;
      --
      gv_resumo_log := 'Valor do Dominio "Tipo de Parametro" inválido ('|| est_row_param_calc_retido.dm_tipo_param
                       ||') Valores válidos: "E" - Exceção e "R" - Regra. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_param_calc_retido.prioridade,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_resumo_log := 'Valor do Campo "Prioridade do Parâmetro" inválido ('|| est_row_param_calc_retido.prioridade
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 6;
   --
   est_row_param_calc_retido.tipoimposto_id := pk_csf.fkg_Tipo_Imposto_id ( en_cd_tipoimposto );
   --
   if nvl(est_row_param_calc_retido.tipoimposto_id,0) <= 0 then
      --
      vn_fase := 6.1;
      --
      gv_resumo_log := 'Valor do Campo "Código do Imposto" inválido ('|| en_cd_tipoimposto
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 7;
   --
   est_row_param_calc_retido.cfop_id := pk_csf.fkg_cfop_id ( en_cd_cfop );
   --
   if nvl(est_row_param_calc_retido.cfop_id,0) <= 0 then
      --
      vn_fase := 7.2;
      --
      gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                      ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
   end if;
   --
   vn_fase := 8;
   --
   if trim(en_cd_reg_trib) is not null then
      --
      vn_fase := 9.1;
      --
      est_row_param_calc_retido.REGTRIB_ID := pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib);
      --
      if nvl(est_row_param_calc_retido.REGTRIB_ID,0) <= 0 then
         --
         vn_fase := 9.2;
         --
         gv_resumo_log := 'Código do "Regime Tributario" inválido ou não existe no Compliance ('|| en_cd_reg_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   if trim(en_cd_forma_trib) is not null then
      --
      vn_fase := 10.1;
      --
      est_row_param_calc_retido.formatrib_id := pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib );
      --
      if nvl(est_row_param_calc_retido.formatrib_id,0) <= 0 then
         --
         vn_fase := 10.2;
         --
         est_row_param_calc_retido.formatrib_id := null;
         --
         gv_resumo_log := 'Código do "Forma de Tributacao" inválido ou não existe no Compliance ('|| en_cd_forma_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 11;
   --
   if trim(ev_cd_cnae) is not null then
      --
      vn_fase := 11.1;
      --
      est_row_param_calc_retido.cnae_id := pk_csf.fkg_id_cnae_cd ( ev_cd_cnae );
      --
      if nvl(est_row_param_calc_retido.cnae_id,0) <= 0 then
         --
         vn_fase := 11.2;
         --
         gv_resumo_log := 'Código da Tabela Vermelha de "CNAE" inválido ('|| ev_cd_cnae
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if trim (ev_cd_lista_serv) is not null then
      --
      vn_fase := 13.1;
      --
      est_row_param_calc_retido.tiposervico_id := pk_csf.fkg_Tipo_Servico_id ( ev_cd_lista_serv);
      --
      if nvl(est_row_param_calc_retido.tiposervico_id,0) <= 0 then
         --
         vn_fase := 13.2;
         --
         gv_resumo_log := 'Código da "Lista de Serviço" inválido ('|| ev_cd_lista_serv
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_param_calc_retido.DM_CONS_PER_ANT_MES,-1) not in (0,1)then
      --
      vn_fase := 14.1;
      --
      gv_resumo_log := 'Valor do Dominio "Considera periodos anteriores no mesmo mes" inválido ('|| est_row_param_calc_retido.DM_CONS_PER_ANT_MES
                       ||'), Valores válidos: : 0-Nao ou 1-Sim.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 15;
   --
   if nvl(est_row_param_calc_retido.DM_FATO_GERA_RET,1) not in (1,2,3)then
      --
      vn_fase := 15.1;
      --
      gv_resumo_log := 'Valor do Dominio "Fato gerador da retencao" inválido ('|| est_row_param_calc_retido.DM_FATO_GERA_RET
                       ||'), Valores válidos: :  1-Emissao da Nota Fiscal, 2 - Vencimento do Título ou 3 - Entrada da Nota Fiscal.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 16;
   --
   if nvl(est_row_param_calc_retido.aliq,0) <= 0 then
      --
      vn_fase := 16.2;
      --
      gv_resumo_log := 'Código de "Aliquota do ISS" não pode ser menor ou igual a zero. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 17;
   --
   if trim(ev_cod_of) is not null then
      --
      est_row_param_calc_retido.obsfiscal_id := pk_csf_calc_fiscal.fkg_obsfiscal_id ( ev_cod_of => ev_cod_of );
      --
      if nvl(est_row_param_calc_retido.obsfiscal_id,0) <= 0 then
         --
         vn_fase := 17.1;
         --
         gv_resumo_log := 'Código da Observacao Fiscal inválido, Favor Verificar. Código = '||ev_cod_of;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 99;
   --
   if trim(est_row_param_calc_retido.DM_TIPO_PARAM) in ('R','E')
    and nvl(est_row_param_calc_retido.PRIORIDADE,0) > 0
    and nvl(est_row_param_calc_retido.TIPOIMPOSTO_ID,0) > 0
    and nvl(est_row_param_calc_retido.CFOP_ID,0) > 0
    and nvl(est_row_param_calc_retido.ALIQ,0) > 0
    and nvl(est_row_param_calc_retido.DM_CONS_PER_ANT_MES,-1) in (0,1) then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_param_calc_retido.id,0) = 0 then
         --
         vn_fase := 99.2;
         --
         select paramcalcretido_seq.nextval
           into est_row_param_calc_retido.id
           from dual;
         --
         insert into param_calc_retido ( id
                                       , dm_tipo_param
                                       , prioridade
                                       , tipoimposto_id
                                       , dt_ini
                                       , dt_fin
                                       , cfop_id
                                       , regtrib_id
                                       , formatrib_id
                                       , cnae_id
                                       , tiposervico_id
                                       , valor_min
                                       , dm_cons_per_ant_mes
                                       , dm_fato_gera_ret
                                       , aliq
                                       , obsfiscal_id
                                       , obs_compl )
                                 values( est_row_param_calc_retido.id
                                       , est_row_param_calc_retido.dm_tipo_param
                                       , est_row_param_calc_retido.prioridade
                                       , est_row_param_calc_retido.tipoimposto_id
                                       , est_row_param_calc_retido.dt_ini
                                       , est_row_param_calc_retido.dt_fin
                                       , est_row_param_calc_retido.cfop_id
                                       , est_row_param_calc_retido.regtrib_id
                                       , est_row_param_calc_retido.formatrib_id
                                       , est_row_param_calc_retido.cnae_id
                                       , est_row_param_calc_retido.tiposervico_id
                                       , est_row_param_calc_retido.valor_min
                                       , est_row_param_calc_retido.dm_cons_per_ant_mes
                                       , est_row_param_calc_retido.dm_fato_gera_ret
                                       , est_row_param_calc_retido.aliq
                                       , est_row_param_calc_retido.obsfiscal_id
                                       , est_row_param_calc_retido.obs_compl );
         --
      else
         --
         vn_fase := 99.3;
         --
         update param_calc_retido
            set dm_tipo_param       = est_row_param_calc_retido.dm_tipo_param
              , prioridade          = est_row_param_calc_retido.prioridade
              , tipoimposto_id      = est_row_param_calc_retido.tipoimposto_id
              , dt_ini              = est_row_param_calc_retido.dt_ini
              , dt_fin              = est_row_param_calc_retido.dt_fin
              , cfop_id             = est_row_param_calc_retido.cfop_id
              , regtrib_id          = est_row_param_calc_retido.regtrib_id
              , formatrib_id        = est_row_param_calc_retido.formatrib_id
              , cnae_id             = est_row_param_calc_retido.cnae_id            
              , tiposervico_id      = est_row_param_calc_retido.tiposervico_id     
              , valor_min           = est_row_param_calc_retido.valor_min          
              , dm_cons_per_ant_mes = est_row_param_calc_retido.dm_cons_per_ant_mes
              , dm_fato_gera_ret    = est_row_param_calc_retido.dm_fato_gera_ret   
              , aliq                = est_row_param_calc_retido.aliq               
              , obsfiscal_id        = est_row_param_calc_retido.obsfiscal_id       
              , obs_compl           = est_row_param_calc_retido.obs_compl
          where id                  = est_row_param_calc_retido.id;
         --
      end if;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_param_calc_retido fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
   --
end pkb_integr_param_calc_retido;

----------------------------------------------------------------------------------------------------
-- Procedimento que faz a integração da tabela de Calculo de ISS
procedure pkb_integr_param_calc_iss ( est_log_generico_calcfiscal   in out nocopy dbms_sql.number_table 
                                    , est_row_param_calc_iss        in out nocopy param_calc_iss%rowtype
                                    , en_empresa_id                 in            empresa.id%type
                                    , ev_ibge_cidade                in            cidade.ibge_cidade%type
                                    , en_cd_cfop                    in            cfop.cd%type
                                    , en_cd_reg_trib                in            reg_trib.cd%type
                                    , en_cd_forma_trib              in            forma_trib.cd%type
                                    , ev_cd_cnae                    in            cnae.cd%type
                                    , ev_cod_trib_municipio         in            cod_trib_municipio.cod_trib_municipio%type
                                    , ev_cod_lst                    in            tipo_servico.cod_lst%type
                                    , ev_cod_of                     in            obs_fiscal.cod_of%type
                                    , en_loteintws_id               in            lote_int_ws.id%type default 0
                                    )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   vn_fase := 1;
   --   
   est_row_param_calc_iss.id := pk_csf_calc_fiscal.fkg_paramcalciss_id ( ed_dt_ini              => est_row_param_calc_iss.dt_ini
                                                                       , ed_dt_fin              => est_row_param_calc_iss.dt_fin
                                                                       , en_cidade_id           => pk_csf.fkg_Cidade_ibge_id ( ev_ibge_cidade )
                                                                       , en_dm_tipo_calc        => est_row_param_calc_iss.dm_tipo_calc
                                                                       , en_cfop_id             => pk_csf.fkg_cfop_id ( en_cd_cfop )
                                                                       , en_regtrib_id          => pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib)
                                                                       , en_formatrib_id        => pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib )
                                                                       , en_cnae_id             => pk_csf.fkg_id_cnae_cd ( ev_cd_cnae )
                                                                       , en_codtribmunicipio_id => pk_csf.fkg_codtribmunicipio_id ( ev_cod_trib_municipio, pk_csf.fkg_Cidade_ibge_id ( ev_ibge_cidade ))
                                                                       , en_tiposervico_id      => pk_csf.fkg_Tipo_Servico_id ( ev_cod_lst )
                                                                       );
   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_param_calc_iss.id;
   gv_obj_referencia := 'PARAM_CALC_ISS';  
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --                            Tabela de Aliquota do Imposto por NCM: Tratar IPI, PIS e COFINS
   gv_mensagem_log   := 'Integração de Parametros de Partilha de ICMS entre Estados, Data Ini.: '||to_date(est_row_param_calc_iss.dt_ini,'dd/mm/yyyy')||', Data Fin.: '||to_date(est_row_param_calc_iss.dt_fin,'dd/mm/yyyy')||
                        ', Cód. IBGE: '|| ev_ibge_cidade || ', Dom. Tipo de Calc.: ' || pk_csf.fkg_dominio ( 'PARAM_CALC_ISS.DM_TIPO_CALC', est_row_param_calc_iss.dm_tipo_calc) || ', CFOP: '|| en_cd_cfop || ', Regime Trib.: ' || en_cd_reg_trib ||
                        ', Forma de Trib.: '|| en_cd_forma_trib || ', CNAE.: '|| ev_cd_cnae || ', Tipo Serv.: ' || ev_cod_lst || vv_nro_lote||'.';
   --
   vn_fase := 3;
   --
   if trim(est_row_param_calc_iss.dm_tipo_param) not in ('E','R')then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Valor do Dominio "Tipo de Parametro" inválido ('|| est_row_param_calc_iss.dm_tipo_param
                       ||') Valores válidos: "E" - Exceção e "R" - Regra. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_param_calc_iss.prioridade,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_resumo_log := 'Valor do Campo "Prioridade do Parâmetro" inválido ('|| est_row_param_calc_iss.prioridade
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 5;
   --
   if trim(est_row_param_calc_iss.DT_INI) is null then
      --
      vn_fase := 5.1;
      --
      gv_resumo_log := 'Data Inicial não pode ser nulla. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 6;
   --
   est_row_param_calc_iss.cidade_id := pk_csf.fkg_Cidade_ibge_id ( ev_ibge_cidade );
   --
   if nvl(est_row_param_calc_iss.cidade_id,0) <= 0 then
      --
      vn_fase := 6.1;
      --
      gv_resumo_log := 'Código do IBGE inválido ('|| ev_ibge_cidade ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 7;
   --
   if nvl(est_row_param_calc_iss.DM_TIPO_CALC,-1) not in (0,1) then
      --
      vn_fase := 7.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Tipo de calculo do imposto" Inválido ('|| est_row_param_calc_iss.DM_TIPO_CALC ||
                       ') Valores permitidos: : 0-Normal ou 1-Retenção.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 8;
   --
   if trim(en_cd_cfop) is not null then
      --
      est_row_param_calc_iss.cfop_id := pk_csf.fkg_cfop_id ( en_cd_cfop );
      --
      if nvl(est_row_param_calc_iss.cfop_id,0) <= 0 then
         --
         vn_fase := 8.2;
         --
         gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                         ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
      end if;
      --
   end if;
   --
   vn_fase := 9;
   --
   if trim(en_cd_reg_trib) is not null then
      --
      vn_fase := 9.1;
      --
      est_row_param_calc_iss.REGTRIB_ID := pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib);
      --
      if nvl(est_row_param_calc_iss.REGTRIB_ID,0) <= 0 then
         --
         vn_fase := 9.2;
         --
         gv_resumo_log := 'Código do "Regime Tributario" inválido ou não existe no Compliance ('|| en_cd_reg_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   if trim(en_cd_forma_trib) is not null then
      --
      vn_fase := 10.1;
      --
      est_row_param_calc_iss.formatrib_id := pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib );
      --
      if nvl(est_row_param_calc_iss.formatrib_id,0) <= 0 then
         --
         vn_fase := 10.2;
         --
         est_row_param_calc_iss.formatrib_id := null;
         --
         gv_resumo_log := 'Código do "Forma de Tributacao" inválido ou não existe no Compliance ('|| en_cd_forma_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 11;
   --
   if trim(ev_cd_cnae) is not null then
      --
      vn_fase := 11.1;
      --
      est_row_param_calc_iss.cnae_id := pk_csf.fkg_id_cnae_cd ( ev_cd_cnae );
      --
      if nvl(est_row_param_calc_iss.cnae_id,0) <= 0 then
         --
         vn_fase := 11.2;
         --
         gv_resumo_log := 'Código da Tabela Vermelha de "CNAE" inválido ('|| ev_cd_cnae
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   if trim(ev_cod_trib_municipio) is not null then
      --
      vn_fase := 12.1;
      --
      est_row_param_calc_iss.tiposervico_id := pk_csf.fkg_Tipo_Servico_id ( ev_cod_lst );
      --
      if nvl(est_row_param_calc_iss.tiposervico_id,0) <= 0 then
         --
         vn_fase := 12.2;
         --
         gv_resumo_log := 'Código do "Tipo de Serviço" inválido ('|| ev_cod_lst
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if trim(ev_cod_trib_municipio) is not null then
      --
      vn_fase := 13.1;
      --
      est_row_param_calc_iss.codtribmunicipio_id := pk_csf.fkg_codtribmunicipio_id ( ev_codtribmunicipio_cd  => ev_cod_trib_municipio
                                                                                   , en_cidade_id            => est_row_param_calc_iss.cidade_id
                                                                                   );
      --
      if nvl(est_row_param_calc_iss.codtribmunicipio_id,0) <= 0 then
         --
         vn_fase := 13.2;
         --
         gv_resumo_log := 'Código de "Tributação de Municipio" inválido ('|| ev_cod_trib_municipio
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_param_calc_iss.aliq,0) <= 0 then
      --                                                                                        
      vn_fase := 14.2;
      --                                                                                        
      gv_resumo_log := 'Código de "Aliquota do ISS" não pode ser menor ou igual a zero. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;                                                      
      --                                                                                        
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id            
                       , ev_mensagem                  => gv_mensagem_log                        
                       , ev_resumo                    => gv_resumo_log                          
                       , en_tipo_log                  => erro_de_sistema                        
                       , en_referencia_id             => gn_referencia_id                       
                       , ev_obj_referencia            => gv_obj_referencia                      
                       , en_empresa_id                => en_empresa_id                          
                       );                                                                       
      -- Armazena o "loggenerico_id" na memória                                                 
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id         
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal         
                          );                                                                    
      --                                                                                        
   end if;
   --
   vn_fase := 15;
   --
   if nvl(est_row_param_calc_iss.DM_NAT_OPER,1) not in (1,2,3,4,5,6,7,8) then
      --
      vn_fase := 15.2;
      --
      gv_resumo_log := 'Código de "Natureza da Operacao do ISS" ('|| est_row_param_calc_iss.DM_NAT_OPER ||') inválido, Valores Permitidos: '||
                       '1 - Tributação no município, 2 - Tributação fora do município, 3 - Isenção, 4 - Imune, 5 - Exigibilidade suspensa por decisão judicial ou 6 - Exigibilidade suspensa por procedimento administrativo. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;                                                      
      --                                                                                        
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id            
                       , ev_mensagem                  => gv_mensagem_log                        
                       , ev_resumo                    => gv_resumo_log                          
                       , en_tipo_log                  => erro_de_sistema                        
                       , en_referencia_id             => gn_referencia_id                       
                       , ev_obj_referencia            => gv_obj_referencia                      
                       , en_empresa_id                => en_empresa_id                          
                       );                                                                       
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id         
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal         
                          );                                                                    
      --                                                                                        
   end if;
   --
   vn_fase := 16;
   --
   if trim(ev_cod_of) is not null then
      --
      est_row_param_calc_iss.obsfiscal_id := pk_csf_calc_fiscal.fkg_obsfiscal_id ( ev_cod_of => ev_cod_of );
      --
      if nvl(est_row_param_calc_iss.obsfiscal_id,0) <= 0 then
         --
         vn_fase := 16.1;
         --
         gv_resumo_log := 'Código da Observacao Fiscal inválido, Favor Verificar. Código = '||ev_cod_of;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_param_calc_iss.prioridade,0) > 0
    and nvl(est_row_param_calc_iss.cidade_id,0) > 0
    and nvl(est_row_param_calc_iss.aliq,0) > 0
    and trim(est_row_param_calc_iss.dt_ini) is not null
    and trim(est_row_param_calc_iss.DM_TIPO_PARAM) in ('R','E') then
      --
      if nvl(est_row_param_calc_iss.id,0) = 0 then
         --
         select paramcalciss_seq.nextval
           into est_row_param_calc_iss.id
           from dual;
         --
         insert into param_calc_iss ( id
                                    , dm_tipo_param
                                    , prioridade
                                    , dt_ini
                                    , dt_fin
                                    , cidade_id
                                    , dm_tipo_calc
                                    , cfop_id
                                    , regtrib_id
                                    , formatrib_id
                                    , cnae_id
                                    , tiposervico_id
                                    , codtribmunicipio_id
                                    , aliq
                                    , dm_nat_oper
                                    , obsfiscal_id
                                    , obs_compl )
                              values( est_row_param_calc_iss.id
                                    , est_row_param_calc_iss.dm_tipo_param
                                    , est_row_param_calc_iss.prioridade
                                    , est_row_param_calc_iss.dt_ini
                                    , est_row_param_calc_iss.dt_fin
                                    , est_row_param_calc_iss.cidade_id
                                    , est_row_param_calc_iss.dm_tipo_calc
                                    , est_row_param_calc_iss.cfop_id
                                    , est_row_param_calc_iss.regtrib_id
                                    , est_row_param_calc_iss.formatrib_id
                                    , est_row_param_calc_iss.cnae_id
                                    , est_row_param_calc_iss.tiposervico_id
                                    , est_row_param_calc_iss.codtribmunicipio_id
                                    , est_row_param_calc_iss.aliq
                                    , est_row_param_calc_iss.dm_nat_oper
                                    , est_row_param_calc_iss.obsfiscal_id
                                    , est_row_param_calc_iss.obs_compl );
         --
      else
         --
         update param_calc_iss
            set dm_tipo_param       = est_row_param_calc_iss.dm_tipo_param
              , prioridade          = est_row_param_calc_iss.prioridade         
              , dt_ini              = est_row_param_calc_iss.dt_ini             
              , dt_fin              = est_row_param_calc_iss.dt_fin             
              , cidade_id           = est_row_param_calc_iss.cidade_id          
              , dm_tipo_calc        = est_row_param_calc_iss.dm_tipo_calc       
              , cfop_id             = est_row_param_calc_iss.cfop_id            
              , regtrib_id          = est_row_param_calc_iss.regtrib_id         
              , formatrib_id        = est_row_param_calc_iss.formatrib_id       
              , cnae_id             = est_row_param_calc_iss.cnae_id            
              , tiposervico_id      = est_row_param_calc_iss.tiposervico_id     
              , codtribmunicipio_id = est_row_param_calc_iss.codtribmunicipio_id
              , aliq                = est_row_param_calc_iss.aliq               
              , dm_nat_oper         = est_row_param_calc_iss.dm_nat_oper        
              , obsfiscal_id        = est_row_param_calc_iss.obsfiscal_id       
              , obs_compl           = est_row_param_calc_iss.obs_compl
          where id                  = est_row_param_calc_iss.id;
         --
      end if;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_param_calc_iss fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
   --
end pkb_integr_param_calc_iss;

----------------------------------------------------------------------------------------------------
-- Procedimento que faz a integração da tabela de Partilha de ICMS entre Estados
procedure pkb_integr_cfopparticmsestado ( est_log_generico_calcfiscal   in out nocopy dbms_sql.number_table
                                        , est_row_cfop_part_icms_estado in out nocopy cfop_part_icms_estado%rowtype
                                        , en_empresa_id                 in            empresa.id%type
                                        , ev_sigla_est_orig             in            estado.sigla_estado%type
                                        , ev_sigla_est_dest             in            estado.sigla_estado%type
                                        , en_cd_cfop                    in            cfop.cd%type
                                        , ev_cd_ncm                     in            ncm.cod_ncm%type
                                        , en_loteintws_id               in            lote_int_ws.id%type default 0
                                        )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   vn_fase := 1;
   --
   est_row_cfop_part_icms_estado.id := pk_csf_calc_fiscal.fkg_cfopparticmsestado_id ( en_estado_id_orig => pk_csf.fkg_Estado_id ( ev_sigla_est_orig )
                                                                                    , en_estado_id_dest => pk_csf.fkg_Estado_id ( ev_sigla_est_dest )
                                                                                    , ed_dt_ini         => est_row_cfop_part_icms_estado.dt_ini
                                                                                    , ed_dt_fin         => est_row_cfop_part_icms_estado.dt_fin
                                                                                    , en_cfop_id        => pk_csf.fkg_cfop_id ( en_cd_cfop )
                                                                                    , en_ncm_id         => pk_csf.fkg_Ncm_id ( ev_cd_ncm )
                                                                                    );
   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_cfop_part_icms_estado.id;
   gv_obj_referencia := 'CFOP_PART_ICMS_ESTADO';
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --                            Tabela de Aliquota do Imposto por NCM: Tratar IPI, PIS e COFINS
   gv_mensagem_log   := 'Integração de Parametros de Partilha de ICMS entre Estados, Data Ini.: '||to_date(est_row_cfop_part_icms_estado.dt_ini,'dd/mm/yyyy')||', Data Fin.: '||to_date(est_row_cfop_part_icms_estado.dt_fin,'dd/mm/yyyy')||
                        ', Sigla UF de Orig.: '|| ev_sigla_est_orig || ', Sigla UF de Dest.: '|| ev_sigla_est_dest || ', CFOP: '|| en_cd_cfop ||', NCM: '|| ev_cd_ncm || vv_nro_lote||'.';
   --
   vn_fase := 3;
   --
   est_row_cfop_part_icms_estado.estado_id_orig := pk_csf.fkg_Estado_id ( ev_sigla_est_orig );
   --
   if nvl(est_row_cfop_part_icms_estado.estado_id_orig,0) <= 0 then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Sigla do Estado de Origem inválida ('|| ev_sigla_est_orig
                    ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if trim(ev_sigla_est_dest) is not null then
      --
      vn_fase := 4.1;
      --
      est_row_cfop_part_icms_estado.estado_id_dest := pk_csf.fkg_Estado_id ( ev_sigla_est_dest );
      --
      if nvl(est_row_cfop_part_icms_estado.estado_id_dest,0) <= 0 then
         --
         vn_fase := 4.1;
         --
         gv_resumo_log := 'Sigla do Estado de Destino inválida ('|| ev_sigla_est_dest ||
                          '). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 5;
   --
   if trim(est_row_cfop_part_icms_estado.DT_INI) is null then
      --
      vn_fase := 5.1;
         --
         gv_resumo_log := 'Data Inicial não pode ser nulla. Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
      --
   end if;
   --
   vn_fase := 6;
   --
   est_row_cfop_part_icms_estado.cfop_id := pk_csf.fkg_cfop_id ( en_cd_cfop );
   --
   if nvl(est_row_cfop_part_icms_estado.cfop_id,0) <= 0 then
      --
      vn_fase := 6.2;
      --
      gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                      ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
   end if;
   --
   vn_fase := 7;
   --
   if trim(ev_cd_ncm) is not null then
      --
      vn_fase := 7.1;
      --
      est_row_cfop_part_icms_estado.ncm_id := pk_csf.fkg_Ncm_id ( ev_cd_ncm );
      --
      if nvl(est_row_cfop_part_icms_estado.ncm_id,0) <= 0 then
         --
         vn_fase := 7.2;
         --
         gv_resumo_log := 'Código da Tabela de "NCM" inválido ('|| ev_cd_ncm
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 8;
   --
   if nvl(est_row_cfop_part_icms_estado.PERC_ICMS_UF_DES,0) < 0 then
      --
      vn_fase := 8.1;
      --
      gv_resumo_log := 'Valor do Campo "Alíquota interna da UF de destino" ('|| est_row_cfop_part_icms_estado.PERC_ICMS_UF_DES
                    ||') não pode ser menor que zero. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 9;
   --
   if nvl(est_row_cfop_part_icms_estado.PERC_ICMS_INTER_PART,0) < 0 then
      --
      vn_fase := 9.1;
      --
      gv_resumo_log := 'Valor do Campo "Percentual provisório de partilha do ICMS Interestadual" ('|| est_row_cfop_part_icms_estado.PERC_ICMS_INTER_PART
                    ||') não pode ser menor que zero. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 10;
   --
   if nvl(est_row_cfop_part_icms_estado.PERC_COMB_POBR_UF_DEST,0) < 0 then
      --
      vn_fase := 10.1;
      --
      gv_resumo_log := 'Valor do Campo "Percentual do ICMS relativo ao Fundo de Combate à Pobreza (FCP) na UF de destino" ('|| est_row_cfop_part_icms_estado.PERC_COMB_POBR_UF_DEST
                    ||') não pode ser menor que zero. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 11;
   --
   if nvl(est_row_cfop_part_icms_estado.PERC_ICMS_INTER,0) < 0 then
      --
      vn_fase := 11.1;
      --
      gv_resumo_log := 'Valor do Campo "Alíquota interestadual das uf envolvidas" ('|| est_row_cfop_part_icms_estado.PERC_ICMS_INTER
                    ||') não pode ser menor que zero. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_cfop_part_icms_estado.CFOP_ID,0) > 0
    and nvl(est_row_cfop_part_icms_estado.ESTADO_ID_ORIG,0) > 0
    and nvl(est_row_cfop_part_icms_estado.ESTADO_ID_DEST,0) > 0
    and trim(est_row_cfop_part_icms_estado.dt_ini) is not null then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_cfop_part_icms_estado.id,0) = 0 then
         --
         vn_fase := 99.2;
         --
         select cfopparticmsestado_seq.nextval
           into est_row_cfop_part_icms_estado.id
           from dual;
         --
         insert into cfop_part_icms_estado ( id
                                           , estado_id_orig
                                           , estado_id_dest
                                           , dt_ini
                                           , dt_fin
                                           , cfop_id
                                           , ncm_id
                                           , perc_icms_uf_des
                                           , perc_icms_inter_part
                                           , perc_comb_pobr_uf_dest
                                           , perc_icms_inter )
                                     values( est_row_cfop_part_icms_estado.id
                                           , est_row_cfop_part_icms_estado.estado_id_orig
                                           , est_row_cfop_part_icms_estado.estado_id_dest
                                           , est_row_cfop_part_icms_estado.dt_ini
                                           , est_row_cfop_part_icms_estado.dt_fin
                                           , est_row_cfop_part_icms_estado.cfop_id
                                           , est_row_cfop_part_icms_estado.ncm_id
                                           , est_row_cfop_part_icms_estado.perc_icms_uf_des
                                           , est_row_cfop_part_icms_estado.perc_icms_inter_part
                                           , est_row_cfop_part_icms_estado.perc_comb_pobr_uf_dest
                                           , est_row_cfop_part_icms_estado.perc_icms_inter
                                           );
         --
      else
         --
         vn_fase := 99.3;
         --
         update cfop_part_icms_estado
            set estado_id_orig         = est_row_cfop_part_icms_estado.estado_id_orig
              , estado_id_dest         = est_row_cfop_part_icms_estado.estado_id_dest
              , dt_ini                 = est_row_cfop_part_icms_estado.dt_ini
              , dt_fin                 = est_row_cfop_part_icms_estado.dt_fin
              , cfop_id                = est_row_cfop_part_icms_estado.cfop_id
              , ncm_id                 = est_row_cfop_part_icms_estado.ncm_id
              , perc_icms_uf_des       = est_row_cfop_part_icms_estado.perc_icms_uf_des
              , perc_icms_inter_part   = est_row_cfop_part_icms_estado.perc_icms_inter_part   
              , perc_comb_pobr_uf_dest = est_row_cfop_part_icms_estado.perc_comb_pobr_uf_dest
              , perc_icms_inter        = est_row_cfop_part_icms_estado.perc_icms_inter
          where id                     = est_row_cfop_part_icms_estado.id;
         --
      end if;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_cfopparticmsestado fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
   --
end pkb_integr_cfopparticmsestado;

----------------------------------------------------------------------------------------------------
-- Procedimento que faz a integração da tabela de Parametros de Calculo de ICMS
procedure pkb_integr_param_calc_icms ( est_log_generico_calcfiscal   in out nocopy dbms_sql.number_table
                                     , est_row_param_calc_icms       in out nocopy param_calc_icms%rowtype
                                     , en_empresa_id                 in            empresa.id%type
                                     , en_cd_cfop                    in            cfop.cd%type
                                     , en_cd_reg_trib                in            reg_trib.cd%type
                                     , en_cd_forma_trib              in            forma_trib.cd%type
                                     , ev_sigla_est_orig             in            estado.sigla_estado%type
                                     , ev_sigla_est_dest             in            estado.sigla_estado%type
                                     , ev_cd_ncm                     in            ncm.cod_ncm%type
                                     , ev_cd_ex_tipi                 in            ex_tipi.cod_ex_tipi%type
                                     , ev_cod_st                     in            cod_st.cod_st%type
                                     , ev_cod_of                     in            obs_fiscal.cod_of%type
                                     , ev_cd_cnae                    in            cnae.cd%type
                                     , en_loteintws_id               in            lote_int_ws.id%type default 0
                                     )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   vn_fase := 1;
   --
   est_row_param_calc_icms.id := pk_csf_calc_fiscal.fkg_paramcalcicms_id ( ed_dt_ini               => est_row_param_calc_icms.dt_ini
                                                                         , ed_dt_fin               => est_row_param_calc_icms.dt_fin
                                                                         , ev_dm_tipo_param        => est_row_param_calc_icms.dm_tipo_param
                                                                         , en_prioridade           => est_row_param_calc_icms.prioridade
                                                                         , en_cfop_id              => pk_csf.fkg_cfop_id ( en_cd_cfop )
                                                                         , en_regtrib_id           => pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib)
                                                                         , en_formatrib_id         => pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib )
                                                                         , en_estado_id_orig       => pk_csf.fkg_Estado_id ( ev_sigla_est_orig )
                                                                         , en_estado_id_dest       => pk_csf.fkg_Estado_id ( ev_sigla_est_dest )
                                                                         , en_cnae_id              => pk_csf.fkg_id_cnae_cd ( ev_cd_cnae )
                                                                         , en_ncm_id               => pk_csf.fkg_Ncm_id ( ev_cd_ncm )
                                                                         , en_extipi_id            => pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ))
                                                                         , en_dm_orig_merc         => est_row_param_calc_icms.dm_orig_merc
                                                                         , en_dm_calc_fisica       => est_row_param_calc_icms.dm_calc_fisica
                                                                         , en_dm_calc_cons_final   => est_row_param_calc_icms.dm_calc_cons_final
                                                                         , en_dm_calc_contr_isento => est_row_param_calc_icms.dm_calc_contr_isento
                                                                         , en_dm_calc_nao_contr    => est_row_param_calc_icms.dm_calc_nao_contr   
                                                                         , en_dm_emit_com_suframa  => est_row_param_calc_icms.dm_emit_com_suframa
                                                                         , en_dm_dest_com_suframa  => est_row_param_calc_icms.dm_dest_com_suframa );
   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_param_calc_icms.id;
   gv_obj_referencia := 'PARAM_CALC_ICMS';
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --
   -- Tabela de Aliquota do Imposto por NCM: Tratar IPI, PIS e COFINS
   gv_mensagem_log   := 'Integração de Parametros de Calculo de ICMS, Data Ini.: '||to_date(est_row_param_calc_icms.dt_ini,'dd/mm/yyyy')||', Data Fin.: '||to_date(est_row_param_calc_icms.dt_fin,'dd/mm/yyyy')||
                        ', Prioridade: '||est_row_param_calc_icms.prioridade||', CFOP: '|| en_cd_cfop ||', Regime Trib.:  '|| en_cd_reg_trib || ', Forma de Trib.:' || en_cd_forma_trib ||
                        ', Orig.: '|| ev_sigla_est_orig || ', Dest.: '|| ev_sigla_est_dest ||', NCM: '|| ev_cd_ncm || ', Exceção de TIPI: '|| ev_cd_ex_tipi ||
                        'Dom. de Orig. Merc.: '||pk_csf.fkg_dominio ( 'PARAM_CALC_ICMS.DM_ORIG_MERC', est_row_param_calc_icms.dm_orig_merc ) ||
                        'Dom. de Orig. Fisica: '||pk_csf.fkg_dominio ( 'PARAM_CALC_ICMS.DM_ORIG_FISICA', est_row_param_calc_icms.dm_calc_fisica )||
                        'Dom. Calc. Cons. Final: '||pk_csf.fkg_dominio ( 'PARAM_CALC_ICMS.DM_CALC_CONS_FINAL', est_row_param_calc_icms.dm_calc_cons_final )||
                        'Dom. Calc. Contr. Isento: '||pk_csf.fkg_dominio ( 'PARAM_CALC_ICMS.DM_CALC_CONTR_ISENTO', est_row_param_calc_icms.dm_calc_contr_isento )||
                        'Dom. Calc. Não Contr.: '||pk_csf.fkg_dominio ( 'PARAM_CALC_ICMS.DM_CALC_NAO_CONTR', est_row_param_calc_icms.dm_calc_nao_contr )||
                        'Dom. Emit. com Suframa: '||pk_csf.fkg_dominio ( 'PARAM_CALC_ICMS.DM_EMIT_COM_SUFRAMA', est_row_param_calc_icms.dm_emit_com_suframa )||
                        'Dom. Dest. com Suframa: '||pk_csf.fkg_dominio ( 'PARAM_CALC_ICMS.DM_DEST_COM_SUFRAMA', est_row_param_calc_icms.dm_dest_com_suframa )|| vv_nro_lote||'.';
   --
   vn_fase := 3;
   --
   if trim(est_row_param_calc_icms.dm_tipo_param) not in ('E','R')then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Valor do Dominio "Tipo de Parametro" inválido ('|| est_row_param_calc_icms.dm_tipo_param
                       ||') Valores válidos: "E" - Exceção e "R" - Regra. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_param_calc_icms.prioridade,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_resumo_log := 'Valor do Campo "Prioridade do Parâmetro" inválido ('|| est_row_param_calc_icms.prioridade
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 5;
   --
   if trim(en_cd_cfop) is not null then
      --
      vn_fase := 5.1;
      --
      est_row_param_calc_icms.cfop_id := pk_csf.fkg_cfop_id ( en_cd_cfop );
      --
      if nvl(est_row_param_calc_icms.cfop_id,0) <= 0 then
         --
         vn_fase := 5.2;
         --
         gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                         ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
      end if;
      --
   end if;
   --
   vn_fase := 6;
   --
   if trim(en_cd_reg_trib) is not null then
      --
      vn_fase := 6.1;
      --
      est_row_param_calc_icms.REGTRIB_ID := pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib);
      --
      if nvl(est_row_param_calc_icms.REGTRIB_ID,0) <= 0 then
         --
         vn_fase := 6.2;
         --
         gv_resumo_log := 'Código do "Regime Tributario" inválido ou não existe no Compliance ('|| en_cd_reg_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 7;
   --
   if trim(en_cd_forma_trib) is not null then
      --
      vn_fase := 7.1;
      --
      est_row_param_calc_icms.formatrib_id := pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib );
      --
      if nvl(est_row_param_calc_icms.formatrib_id,0) <= 0 then
         --
         vn_fase := 7.2;
         --
         est_row_param_calc_icms.formatrib_id := null;
         --
         gv_resumo_log := 'Código do "Forma de Tributacao" inválido ou não existe no Compliance ('|| en_cd_forma_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 8;
   --
   if trim(est_row_param_calc_icms.dt_ini) is null then
      --
      vn_fase := 8.1;
      --
      gv_resumo_log := 'Data inicial da vigencia do parametro não pode ser nulla. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 9;
   --
   if trim(ev_cd_cnae) is not null then
      --
      vn_fase := 9.1;
      --
      est_row_param_calc_icms.cnae_id := pk_csf.fkg_id_cnae_cd ( ev_cd_cnae );
      --
      if nvl(est_row_param_calc_icms.cnae_id,0) <= 0 then
         --
         vn_fase := 9.2;
         --
         gv_resumo_log := 'Código da Tabela Vermelha de "CNAE" inválido ('|| ev_cd_cnae
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   est_row_param_calc_icms.estado_id_orig := pk_csf.fkg_Estado_id ( ev_sigla_est_orig );
   --
   if nvl(est_row_param_calc_icms.estado_id_orig,0) <= 0 then
      --
      vn_fase := 10.1;
      --
      gv_resumo_log := 'Sigla do Estado de Origem inválida ('|| ev_sigla_est_orig
                    ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 11;
   --
   if trim(ev_sigla_est_dest) is not null then
      --
      vn_fase := 11.1;
      --
      est_row_param_calc_icms.estado_id_dest := pk_csf.fkg_Estado_id ( ev_sigla_est_dest );
      --
      if nvl(est_row_param_calc_icms.estado_id_dest,0) <= 0 then
         --
         vn_fase := 11.1;
         --
         gv_resumo_log := 'Sigla do Estado de Destino inválida ('|| ev_sigla_est_dest ||
                          '). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   if trim(ev_cd_ncm) is not null then
      --
      vn_fase := 12.1;
      --
      est_row_param_calc_icms.ncm_id := pk_csf.fkg_Ncm_id ( ev_cd_ncm );
      --
      if nvl(est_row_param_calc_icms.ncm_id,0) <= 0 then
         --
         vn_fase := 12.2;
         --
         gv_resumo_log := 'Código da Tabela de "NCM" inválido ('|| ev_cd_ncm
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if trim(ev_cd_ex_tipi) is not null then
      --
      vn_fase := 13.1;
      --
      est_row_param_calc_icms.extipi_id := pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ));
      --
      if nvl(est_row_param_calc_icms.extipi_id,0) <= 0 then
         --
         vn_fase := 13.2;
         --
         gv_resumo_log := 'Código da Tabela de "Exceção de Ncm informados na TIPI" inválido ('|| ev_cd_ex_tipi
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_param_calc_icms.dm_orig_merc,0) not in (0,1,2,3,4,5,6,7,8) then
      --
      vn_fase := 14.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Origem de Mercadoria" ('|| est_row_param_calc_icms.dm_orig_merc ||
                        ') inválido, Valores validos: 0 - Nacional, exceto as indicadas nos códigos 3 a 5, 1 - Estrangeira - Importação direta, exceto a indicada no código 6, '||
                        '2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7, 3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%, '||
                        '4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes, '||
                        '5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%, 6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e '||
                        '7 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 15;
   --
   if nvl(est_row_param_calc_icms.dm_calc_fisica,-1) not in (0,1,2) then
      --
      vn_fase := 15.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Calcula Pessoa Fisica" ('|| est_row_param_calc_icms.dm_calc_fisica ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 16;
   --
   if nvl(est_row_param_calc_icms.DM_CALC_CONS_FINAL,-1) not in (0, 1, 2, 3, 4, 5, 6, 7) then
      --
      vn_fase := 16.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Calcula Consumidor Final" ('|| est_row_param_calc_icms.DM_CALC_CONS_FINAL ||
                        ') inválido, Valores validos: ' ||
                        '0-Não, '||
                        '1-Sim, '||
                        '2-Indiferente, '||
                        '3-Industria, '||
                        '4-Comercio, '||
                        '5-Atacado, '||
                        '6-Varejo, '||
                        '7-Industria / Consumo Final. '||
                        'Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(est_row_param_calc_icms.DM_CALC_CONTR_ISENTO,-1) not in (0,1,2) then
      --
      vn_fase := 17.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Calcula Contribuinte Isento" ('|| est_row_param_calc_icms.DM_CALC_CONTR_ISENTO ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 18;
   --
   if nvl(est_row_param_calc_icms.DM_CALC_NAO_CONTR,-1) not in (0,1,2) then
      --
      vn_fase := 18.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Calcula Não Contribuinte" ('|| est_row_param_calc_icms.DM_CALC_NAO_CONTR ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 19;
   --
   if nvl(est_row_param_calc_icms.DM_CALC_NAO_CONTR,-1) not in (0,1,2) then
      --
      vn_fase := 19.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Calcula Não Contribuinte" ('|| est_row_param_calc_icms.DM_CALC_NAO_CONTR ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 19;
   --
   if nvl(est_row_param_calc_icms.DM_EMIT_COM_SUFRAMA,-1) not in (0,1,2) then
      --
      vn_fase := 19.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Emitente com Suframa" ('|| est_row_param_calc_icms.DM_EMIT_COM_SUFRAMA ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 20;
   --
   if nvl(est_row_param_calc_icms.DM_DEST_COM_SUFRAMA,-1) not in (0,1,2) then
      --
      vn_fase := 20.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Destinatário com Suframa" ('|| est_row_param_calc_icms.DM_DEST_COM_SUFRAMA ||
                        ') inválido, Valores validos: 0-Não, 1-Sim ou 2-Indiferente. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 21;
   --
   if trim(en_cd_cfop) is not null then
      --
      vn_fase := 21.1;
      --
      est_row_param_calc_icms.cfop_id_dest := pk_csf.fkg_cfop_id ( en_cd_cfop );
      --
      if nvl(est_row_param_calc_icms.cfop_id_dest,0) <= 0 then
         --
         vn_fase := 21.2;
         --
         gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 22;
   --
   if trim(ev_cod_st) is not null then
      --
      est_row_param_calc_icms.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => ev_cod_st
                                                                 , en_tipoimp_id  => pk_csf.fkg_Tipo_Imposto_id ( 1 ) --ICMS
                                                                 );
      --
      if nvl(est_row_param_calc_icms.codst_id,0) <= 0 then
         --
         vn_fase := 22.1;
         --
         gv_resumo_log := 'Valor do "Código de Situação Tributaria" Inválido ('|| ev_cod_st ||'), Favor Verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 23;
   --
   if nvl(est_row_param_calc_icms.aliq_dest,0) <= 0 then
      --
      vn_fase := 23.1;
      --
      gv_resumo_log := 'Valor da "Aliquota de destino" Inválido ('|| est_row_param_calc_icms.aliq_dest ||'), Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 24;
   --
   if trim(ev_cod_of) is not null then
      --
      est_row_param_calc_icms.obsfiscal_id := pk_csf_calc_fiscal.fkg_obsfiscal_id ( ev_cod_of => ev_cod_of );
      --
      if nvl(est_row_param_calc_icms.obsfiscal_id,0) <= 0 then
         --
         vn_fase := 24.1;
         --
         gv_resumo_log := 'Código da Observacao Fiscal inválido, Favor Verificar. Código = '||ev_cod_of;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 25;
   --
   if nvl(est_row_param_calc_icms.DM_MOD_BASE_CALC,-1) not in (0,1,2,3) then
      --
      vn_fase := 25.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Modalidade da Base de Calculo de ICMS: " ('|| est_row_param_calc_icms.DM_DEST_COM_SUFRAMA ||
                        ') inválido, Valores validos: 0 - Margem Valor Agregado (%); 1 - Pauta (Valor); 2 - Preço Tabelado Máx. (valor); 3 - Valor da operação. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 26;
   --
   if nvl(est_row_param_calc_icms.INDICE,0) <= 0 then
      --
      vn_fase := 26.1;
      --
       gv_resumo_log := 'Valor "definido como indice da Modalidade da Base de Calculo de ICMS" não pode ser menor ou igual a zero.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 27;
   --
   if nvl(est_row_param_calc_icms.DM_AJUSTA_MVA,-1) not in (0,1) then
      --
      vn_fase := 27.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Ajusta MVA" Inválido ('|| est_row_param_calc_icms.DM_AJUSTA_MVA ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 28;
   --
   if nvl(est_row_param_calc_icms.DM_AJUST_DESC_ZFM_ITEM,-1) not in (0,1) then
      --
      vn_fase := 28.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Ajusta Desconto da Zona Franca de Manaus no Item" Inválido ('|| est_row_param_calc_icms.DM_AJUST_DESC_ZFM_ITEM ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 29;
   --
   if nvl(est_row_param_calc_icms.DM_SOMA_FRETE,-1) not in (0,1) then
      --
      vn_fase := 29.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Frete na Base de Calculo" Inválido ('|| est_row_param_calc_icms.DM_SOMA_FRETE ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 30;
   --
   if nvl(est_row_param_calc_icms.DM_SOMA_SEGURO,-1) not in (0,1) then
      --
      vn_fase := 30.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Seguro na Base de Calculo" Inválido ('|| est_row_param_calc_icms.DM_SOMA_SEGURO ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 31;
   --
   if nvl(est_row_param_calc_icms.DM_SOMA_OUTRA_DESP,-1) not in (0,1) then
      --
      vn_fase := 31.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma Outras Despesas na Base de Calculo" Inválido ('|| est_row_param_calc_icms.DM_SOMA_OUTRA_DESP ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 26;
   --
   if nvl(est_row_param_calc_icms.DM_SOMA_IPI,-1) not in (0,1) then
      --
      vn_fase := 26.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o IPI na Base de Calculo" Inválido ('|| est_row_param_calc_icms.DM_SOMA_IPI ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 24;
   --
    if nvl(est_row_param_calc_icms.DM_SOMA_II,-1) not in (0,1) then
      --
      vn_fase := 24.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Imposto de Importação na Base de Calculo" Inválido ('|| est_row_param_calc_icms.DM_SOMA_II ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_param_calc_icms.ESTADO_ID_ORIG,0)            > 0
    and nvl(est_row_param_calc_icms.PRIORIDADE,0)              > 0
    and nvl(est_row_param_calc_icms.DM_CALC_FISICA,-1)         in (0,1,2)
    and nvl(est_row_param_calc_icms.DM_CALC_CONS_FINAL,-1)     in (0, 1, 2, 3, 4, 5, 6, 7)
    and nvl(est_row_param_calc_icms.DM_CALC_CONTR_ISENTO,-1)   in (0,1,2)
    and nvl(est_row_param_calc_icms.DM_CALC_NAO_CONTR,-1)      in (0,1,2)
    and nvl(est_row_param_calc_icms.DM_EMIT_COM_SUFRAMA,-1)    in (0,1,2)
    and nvl(est_row_param_calc_icms.DM_DEST_COM_SUFRAMA,-1)    in (0,1,2)
    and nvl(est_row_param_calc_icms.DM_AJUSTA_MVA,-1)          in (0,1)
    and nvl(est_row_param_calc_icms.DM_AJUST_DESC_ZFM_ITEM,-1) in (0,1)
    and nvl(est_row_param_calc_icms.DM_SOMA_FRETE,-1)          in (0,1)
    and nvl(est_row_param_calc_icms.DM_SOMA_SEGURO,-1)         in (0,1)
    and nvl(est_row_param_calc_icms.DM_SOMA_OUTRA_DESP,-1)     in (0,1)
    and nvl(est_row_param_calc_icms.DM_SOMA_IPI,-1)            in (0,1)
    and nvl(est_row_param_calc_icms.DM_SOMA_II,-1)             in (0,1)  then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_param_calc_icms.id,0) = 0 then
         --
         vn_fase := 99.2;
         --
         select paramcalcicms_seq.nextval
           into est_row_param_calc_icms.id
           from dual;
         --
         insert into param_calc_icms ( id
                                     , dm_tipo_param
                                     , prioridade
                                     , cfop_id
                                     , regtrib_id
                                     , formatrib_id
                                     , dt_ini
                                     , dt_fin
                                     , cnae_id
                                     , estado_id_orig
                                     , estado_id_dest
                                     , ncm_id
                                     , extipi_id
                                     , dm_orig_merc
                                     , dm_calc_fisica
                                     , dm_calc_cons_final
                                     , dm_calc_contr_isento
                                     , dm_calc_nao_contr
                                     , dm_emit_com_suframa
                                     , dm_dest_com_suframa
                                     , cfop_id_dest
                                     , codst_id
                                     , aliq_dest
                                     , perc_reduc_bc
                                     , perc_difer
                                     , obsfiscal_id
                                     , obs_compl
                                     , dm_mod_base_calc
                                     , indice
                                     , dm_ajusta_mva
                                     , dm_ajust_desc_zfm_item
                                     , dm_soma_frete
                                     , dm_soma_seguro
                                     , dm_soma_outra_desp
                                     , dm_soma_ipi
                                     , dm_soma_ii )
                               values( est_row_param_calc_icms.id
                                     , est_row_param_calc_icms.dm_tipo_param
                                     , est_row_param_calc_icms.prioridade
                                     , est_row_param_calc_icms.cfop_id
                                     , est_row_param_calc_icms.regtrib_id
                                     , est_row_param_calc_icms.formatrib_id
                                     , est_row_param_calc_icms.dt_ini
                                     , est_row_param_calc_icms.dt_fin
                                     , est_row_param_calc_icms.cnae_id
                                     , est_row_param_calc_icms.estado_id_orig
                                     , est_row_param_calc_icms.estado_id_dest
                                     , est_row_param_calc_icms.ncm_id
                                     , est_row_param_calc_icms.extipi_id
                                     , est_row_param_calc_icms.dm_orig_merc
                                     , est_row_param_calc_icms.dm_calc_fisica
                                     , est_row_param_calc_icms.dm_calc_cons_final
                                     , est_row_param_calc_icms.dm_calc_contr_isento
                                     , est_row_param_calc_icms.dm_calc_nao_contr
                                     , est_row_param_calc_icms.dm_emit_com_suframa
                                     , est_row_param_calc_icms.dm_dest_com_suframa
                                     , est_row_param_calc_icms.cfop_id_dest
                                     , est_row_param_calc_icms.codst_id
                                     , est_row_param_calc_icms.aliq_dest
                                     , est_row_param_calc_icms.perc_reduc_bc
                                     , est_row_param_calc_icms.perc_difer
                                     , est_row_param_calc_icms.obsfiscal_id
                                     , est_row_param_calc_icms.obs_compl
                                     , est_row_param_calc_icms.dm_mod_base_calc
                                     , est_row_param_calc_icms.indice
                                     , est_row_param_calc_icms.dm_ajusta_mva
                                     , est_row_param_calc_icms.dm_ajust_desc_zfm_item
                                     , est_row_param_calc_icms.dm_soma_frete
                                     , est_row_param_calc_icms.dm_soma_seguro
                                     , est_row_param_calc_icms.dm_soma_outra_desp
                                     , est_row_param_calc_icms.dm_soma_ipi
                                     , est_row_param_calc_icms.dm_soma_ii );
         --
      else
         --
         vn_fase := 99.3;
         --
         update param_calc_icms
            set dm_tipo_param          = est_row_param_calc_icms.dm_tipo_param
              , prioridade             = est_row_param_calc_icms.prioridade            
              , cfop_id                = est_row_param_calc_icms.cfop_id               
              , regtrib_id             = est_row_param_calc_icms.regtrib_id            
              , formatrib_id           = est_row_param_calc_icms.formatrib_id          
              , dt_ini                 = est_row_param_calc_icms.dt_ini                
              , dt_fin                 = est_row_param_calc_icms.dt_fin                
              , cnae_id                = est_row_param_calc_icms.cnae_id               
              , estado_id_orig         = est_row_param_calc_icms.estado_id_orig        
              , estado_id_dest         = est_row_param_calc_icms.estado_id_dest        
              , ncm_id                 = est_row_param_calc_icms.ncm_id                
              , extipi_id              = est_row_param_calc_icms.extipi_id             
              , dm_orig_merc           = est_row_param_calc_icms.dm_orig_merc          
              , dm_calc_fisica         = est_row_param_calc_icms.dm_calc_fisica        
              , dm_calc_cons_final     = est_row_param_calc_icms.dm_calc_cons_final    
              , dm_calc_contr_isento   = est_row_param_calc_icms.dm_calc_contr_isento  
              , dm_calc_nao_contr      = est_row_param_calc_icms.dm_calc_nao_contr     
              , dm_emit_com_suframa    = est_row_param_calc_icms.dm_emit_com_suframa   
              , dm_dest_com_suframa    = est_row_param_calc_icms.dm_dest_com_suframa   
              , cfop_id_dest           = est_row_param_calc_icms.cfop_id_dest          
              , codst_id               = est_row_param_calc_icms.codst_id              
              , aliq_dest              = est_row_param_calc_icms.aliq_dest             
              , perc_reduc_bc          = est_row_param_calc_icms.perc_reduc_bc         
              , perc_difer             = est_row_param_calc_icms.perc_difer            
              , obsfiscal_id           = est_row_param_calc_icms.obsfiscal_id          
              , obs_compl              = est_row_param_calc_icms.obs_compl             
              , dm_mod_base_calc       = est_row_param_calc_icms.dm_mod_base_calc      
              , indice                 = est_row_param_calc_icms.indice                
              , dm_ajusta_mva          = est_row_param_calc_icms.dm_ajusta_mva         
              , dm_ajust_desc_zfm_item = est_row_param_calc_icms.dm_ajust_desc_zfm_item
              , dm_soma_frete          = est_row_param_calc_icms.dm_soma_frete         
              , dm_soma_seguro         = est_row_param_calc_icms.dm_soma_seguro        
              , dm_soma_outra_desp     = est_row_param_calc_icms.dm_soma_outra_desp    
              , dm_soma_ipi            = est_row_param_calc_icms.dm_soma_ipi           
              , dm_soma_ii             = est_row_param_calc_icms.dm_soma_ii
          where id                     = est_row_param_calc_icms.id;
         --
      end if;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_param_calc_icms fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
end pkb_integr_param_calc_icms;

----------------------------------------------------------------------------------------------------
-- Procedimento que faz a integração da tabela de Parametros de Calculo de ICMS ST
procedure pkb_integr_param_calc_icmsst ( est_log_generico_calcfiscal   in out nocopy dbms_sql.number_table
                                       , est_row_param_calc_icmsst     in out nocopy param_calc_icmsst%rowtype
                                       , en_empresa_id                 in            empresa.id%type
                                       , en_cd_cfop                    in            cfop.cd%type
                                       , en_cd_reg_trib                in            reg_trib.cd%type
                                       , en_cd_forma_trib              in            forma_trib.cd%type
                                       , ev_sigla_est_orig             in            estado.sigla_estado%type
                                       , ev_sigla_est_dest             in            estado.sigla_estado%type
                                       , ev_cd_cnae                    in            cnae.cd%type
                                       , ev_cd_cest                    in            cest.cd%type
                                       , ev_cd_ncm                     in            ncm.cod_ncm%type
                                       , ev_cd_ex_tipi                 in            ex_tipi.cod_ex_tipi%type
                                       , ev_cod_st                     in            cod_st.cod_st%type
                                       , ev_cod_of                     in            obs_fiscal.cod_of%type
                                       , en_loteintws_id               in            lote_int_ws.id%type default 0
                                       )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   est_row_param_calc_icmsst.id := pk_csf_calc_fiscal.fkg_paramcalcicmsst_id ( ed_dt_ini           => est_row_param_calc_icmsst.dt_ini
                                                                             , ed_dt_fin           => est_row_param_calc_icmsst.dt_fin
                                                                             , en_cfop_id          => pk_csf.fkg_cfop_id ( en_cd_cfop )
                                                                             , en_regtrib_id       => pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib)
                                                                             , en_formatrib_id     => pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib )
                                                                             , en_estado_id_orig   => pk_csf.fkg_Estado_id ( ev_sigla_est_orig )
                                                                             , en_estado_id_dest   => pk_csf.fkg_Estado_id ( ev_sigla_est_dest )
                                                                             , en_cnae_id          => pk_csf.fkg_id_cnae_cd ( ev_cd_cnae )
                                                                             , en_cest_id          => pk_csf.fkg_id_cest_cd ( ev_cd_cest )
                                                                             , en_ncm_id           => pk_csf.fkg_Ncm_id ( ev_cd_ncm )
                                                                             , en_extipi_id        => pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ))
                                                                             , en_dm_orig_merc     => est_row_param_calc_icmsst.dm_orig_merc
                                                                             , en_dm_calc_fisica   => est_row_param_calc_icmsst.dm_calc_fisica
                                                                             );
   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_param_calc_icmsst.id;
   gv_obj_referencia := 'PARAM_CALC_ICMSST';  --param_calc_icmsst
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --                            Tabela de Aliquota do Imposto por NCM: Tratar IPI, PIS e COFINS
   gv_mensagem_log   := 'Integração de Parametros de Calculo de ICMS ST, Data Ini.: '||to_date(est_row_param_calc_icmsst.dt_ini,'dd/mm/yyyy')||', Data Fin.: '||to_date(est_row_param_calc_icmsst.dt_fin,'dd/mm/yyyy')||
                        ', Prioridade: '||est_row_param_calc_icmsst.prioridade||', CFOP: '|| en_cd_cfop ||', Regime Trib.:  '|| en_cd_reg_trib || ', Forma de Trib.:' || en_cd_forma_trib ||
                        ', Orig.: '|| ev_sigla_est_orig || ', Dest.: '|| ev_sigla_est_dest || ', CNAE: '|| ev_cd_cnae ||', CEST: '|| ev_cd_cest ||', NCM: '|| ev_cd_ncm ||
                        ', Exceção de TIPI: '|| ev_cd_ex_tipi ||vv_nro_lote||'.';
   --
   vn_fase := 3;
   --
   if trim(est_row_param_calc_icmsst.dm_tipo_param) not in ('E','R')then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Valor do Dominio "Tipo de Parametro" inválido ('|| est_row_param_calc_icmsst.dm_tipo_param
                       ||') Valores válidos: "E" - Exceção e "R" - Regra. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_param_calc_icmsst.prioridade,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_resumo_log := 'Valor do Campo "Prioridade do Parâmetro" inválido ('|| est_row_param_calc_icmsst.prioridade
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 5;
   --
   est_row_param_calc_icmsst.cfop_id := pk_csf.fkg_cfop_id ( en_cd_cfop );
   --
   if nvl(est_row_param_calc_icmsst.cfop_id,0) <= 0 then
      --
      vn_fase := 5.2;
      --
      gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                    ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 6;
   --
   if trim(en_cd_reg_trib) is not null then
      --
      vn_fase := 6.1;
      --
      est_row_param_calc_icmsst.REGTRIB_ID := pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib);
      --
      if nvl(est_row_param_calc_icmsst.REGTRIB_ID,0) <= 0 then
         --
         vn_fase := 6.2;
         --
         gv_resumo_log := 'Código do "Regime Tributario" inválido ou não existe no Compliance ('|| en_cd_reg_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 7;
   --
   if trim(en_cd_forma_trib) is not null then
      --
      vn_fase := 7.1;
      --
      est_row_param_calc_icmsst.formatrib_id := pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib );
      --
      if nvl(est_row_param_calc_icmsst.formatrib_id,0) <= 0 then
         --
         vn_fase := 7.2;
         --
         est_row_param_calc_icmsst.formatrib_id := null;
         --
         gv_resumo_log := 'Código do "Forma de Tributacao" inválido ou não existe no Compliance ('|| en_cd_forma_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 9;
   --
   est_row_param_calc_icmsst.estado_id_orig := pk_csf.fkg_Estado_id ( ev_sigla_est_orig );
   --
   if nvl(est_row_param_calc_icmsst.estado_id_orig,0) <= 0 then
      --
      vn_fase := 9.1;
      --
      gv_resumo_log := 'Sigla do Estado de Origem inválido ou não existe no Compliance ('|| ev_sigla_est_orig
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 10;
   --
   est_row_param_calc_icmsst.estado_id_dest := pk_csf.fkg_Estado_id ( ev_sigla_est_dest );
   --
   if nvl(est_row_param_calc_icmsst.estado_id_dest,0) <= 0 then
      --
      vn_fase := 10.1;
      --
      gv_resumo_log := 'Sigla do Estado de Destino inválido ou não existe no Compliance ('|| ev_sigla_est_dest
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 11;
   --
   if trim(est_row_param_calc_icmsst.dt_ini) is null then
      --
      vn_fase := 11.1;
      --
      gv_resumo_log := 'Data inicial da vigencia do parametro não pode ser nulla. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 12;
   --
   if trim(ev_cd_cnae) is not null then
      --
      vn_fase := 12.1;
      --
      est_row_param_calc_icmsst.cnae_id := pk_csf.fkg_id_cnae_cd ( ev_cd_cnae );
      --
      if nvl(est_row_param_calc_icmsst.cnae_id,0) <= 0 then
         --
         vn_fase := 12.2;
         --
         gv_resumo_log := 'Código da Tabela Vermelha de "CNAE" inválido ('|| ev_cd_cnae
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if trim(ev_cd_cest) is not null then
      --
      vn_fase := 13.1;
      --
      est_row_param_calc_icmsst.cest_id := pk_csf.fkg_id_cest_cd ( ev_cd_cest );
      --
      if nvl(est_row_param_calc_icmsst.cest_id,0) <= 0 then
         --
         vn_fase := 12.2;
         --
         gv_resumo_log := 'Código do "CEST" inválido ('|| ev_cd_cest
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if trim(ev_cd_ncm) is not null then
      --
      vn_fase := 13.1;
      --
      est_row_param_calc_icmsst.ncm_id := pk_csf.fkg_Ncm_id ( ev_cd_ncm );
      --
      if nvl(est_row_param_calc_icmsst.ncm_id,0) <= 0 then
         --
         vn_fase := 13.2;
         --
         gv_resumo_log := 'Código da Tabela de "NCM" inválido ('|| ev_cd_ncm
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   --
   if trim(ev_cd_ex_tipi) is not null then
      --
      vn_fase := 14.1;
      --
      est_row_param_calc_icmsst.extipi_id := pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ));
      --
      if nvl(est_row_param_calc_icmsst.extipi_id,0) <= 0 then
         --
         vn_fase := 14.2;
         --
         gv_resumo_log := 'Código da Tabela de "Exceção de Ncm informados na TIPI" inválido ('|| ev_cd_ex_tipi
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 15;
   --
   if nvl(est_row_param_calc_icmsst.dm_orig_merc,0) not in (0,1,2,3,4,5,6,7,8) then
      --
      vn_fase := 15.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Origem de Mercadoria" ('|| est_row_param_calc_icmsst.dm_orig_merc ||
                        ') inválido, Valores validos: 0 - Nacional, exceto as indicadas nos códigos 3 a 5, 1 - Estrangeira - Importação direta, exceto a indicada no código 6, '||
                        '2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7, 3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%, '||
                        '4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes, '||
                        '5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%, 6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e '||
                        '7 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 16;
   --
   est_row_param_calc_icmsst.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => ev_cod_st
                                                              , en_tipoimp_id  => pk_csf.fkg_Tipo_Imposto_id ( 1 ) --ICMS 
                                                              );
   --
   if nvl(est_row_param_calc_icmsst.codst_id,0) <= 0 then
      --
      vn_fase := 16.1;
      --
      gv_resumo_log := 'Valor do "Código de Situação Tributaria" Inválido ('|| ev_cod_st ||'), Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(est_row_param_calc_icmsst.aliq_dest,0) <= 0 then
      --
      vn_fase := 17.1;
      --
      gv_resumo_log := 'Valor da "Aliquota de destino" Inválido ('|| est_row_param_calc_icmsst.aliq_dest ||'), Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 18;
   --
   if trim(ev_cod_of) is not null then
      --
      est_row_param_calc_icmsst.obsfiscal_id := pk_csf_calc_fiscal.fkg_obsfiscal_id ( ev_cod_of => ev_cod_of );
      --
      if nvl(est_row_param_calc_icmsst.obsfiscal_id,0) <= 0 then
         --
         vn_fase := 18.1;
         --
         gv_resumo_log := 'Código da Observacao Fiscal inválido, Favor Verificar. Código = '||ev_cod_of;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 19;
   --
   if nvl(est_row_param_calc_icmsst.DM_AJUSTA_MVA,-1) not in (0,1) then
      --
      vn_fase := 19.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Ajusta MVA" Inválido ('|| est_row_param_calc_icmsst.DM_AJUSTA_MVA ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 20;
   --
   if nvl(est_row_param_calc_icmsst.DM_EFEITO,-1) not in (1,2) then
      --
      vn_fase := 20.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Efeito do parametro" Inválido ('|| est_row_param_calc_icmsst.DM_EFEITO ||
                       ') Valores permitidos: 1 - Destaca Imposto ou 2-Lista na Observação. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 21;
   --
   if nvl(est_row_param_calc_icmsst.DM_CALC_FISICA,-1) not in (0, 1, 2, 3, 4, 5, 6) then
      --
      vn_fase := 21.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Calcula ICMS-ST para Pessoa Fisica" Inválido ('|| est_row_param_calc_icmsst.DM_CALC_FISICA ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 22;
   --
   if nvl(est_row_param_calc_icmsst.DM_SOMA_FRETE,-1) not in (0,1) then
      --
      vn_fase := 22.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Frete na Base de Calculo" Inválido ('|| est_row_param_calc_icmsst.DM_SOMA_FRETE ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 23;
   --
   if nvl(est_row_param_calc_icmsst.DM_SOMA_SEGURO,-1) not in (0,1) then
      --
      vn_fase := 23.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Seguro na Base de Calculo" Inválido ('|| est_row_param_calc_icmsst.DM_SOMA_SEGURO ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 24;
   --
   if nvl(est_row_param_calc_icmsst.DM_SOMA_OUTRA_DESP,-1) not in (0,1) then
      --
      vn_fase := 24.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma Outras Despesas na Base de Calculo" Inválido ('|| est_row_param_calc_icmsst.DM_SOMA_OUTRA_DESP ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 24;
   --
   if nvl(est_row_param_calc_icmsst.DM_SOMA_IPI,-1) not in (0,1) then
      --
      vn_fase := 24.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o IPI na Base de Calculo" Inválido ('|| est_row_param_calc_icmsst.DM_SOMA_IPI ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 24;
   --
    if nvl(est_row_param_calc_icmsst.DM_SOMA_II,-1) not in (0,1) then
      --
      vn_fase := 24.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Imposto de Importação na Base de Calculo" Inválido ('|| est_row_param_calc_icmsst.DM_SOMA_II ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 24;
   --
   if nvl(est_row_param_calc_icmsst.DM_SOMA_ICMSST_OD,-1) not in (0,1) then
      --
      vn_fase := 24.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma ICMS-ST em Outras Despesas, apenas se o Efeito for Lista na Observacao" Inválido ('|| est_row_param_calc_icmsst.DM_SOMA_ICMSST_OD ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 25;
   --
   if nvl(est_row_param_calc_icmsst.DM_TIPO_CALC_ST,-1) not in (0,1,3, 4) then
      --
      vn_fase := 24.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma ICMS-ST em Outras Despesas, apenas se o Efeito for Lista na Observacao" Inválido ('|| est_row_param_calc_icmsst.DM_TIPO_CALC_ST ||
                       ') Valores permitidos: 1 - Normal, 2 - Pauta x MVA, 3 - Carga Liquida e 4 - Carga Media. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_param_calc_icmsst.CODST_ID,0) > 0
    and nvl(est_row_param_calc_icmsst.ALIQ_DEST,0) > 0
    and nvl(est_row_param_calc_icmsst.DM_MOD_BASE_CALC_ST,0) in (0,1,2,3,4,5,6)
    and nvl(est_row_param_calc_icmsst.DM_AJUSTA_MVA,0) in (0,1)
    and nvl(est_row_param_calc_icmsst.DM_EFEITO,0) in (1,2)
    and nvl(est_row_param_calc_icmsst.DM_CALC_FISICA,0) in (0, 1, 2, 3, 4, 5, 6)
    and nvl(est_row_param_calc_icmsst.DM_SOMA_FRETE,0) in (0,1)
    and nvl(est_row_param_calc_icmsst.DM_SOMA_SEGURO,0) in (0,1)
    and nvl(est_row_param_calc_icmsst.DM_SOMA_OUTRA_DESP,0) in (0,1)
    and nvl(est_row_param_calc_icmsst.DM_SOMA_IPI,0) in (0,1)
    and nvl(est_row_param_calc_icmsst.DM_SOMA_II,0) in (0,1)
    and nvl(est_row_param_calc_icmsst.DM_SOMA_ICMSST_OD,0) in (0,1)
    and nvl(est_row_param_calc_icmsst.DM_TIPO_CALC_ST,0) in (1,2,3, 4) then
     --
     if nvl(est_row_param_calc_icmsst.id,0) = 0 then
        --
        select paramcalcicmsst_seq.nextval
          into est_row_param_calc_icmsst.id
          from dual;
        --
        insert into param_calc_icmsst ( id
                                      , dm_tipo_param
                                      , prioridade
                                      , cfop_id
                                      , regtrib_id
                                      , formatrib_id
                                      , estado_id_orig
                                      , estado_id_dest
                                      , dt_ini
                                      , dt_fin
                                      , cnae_id
                                      , cest_id
                                      , ncm_id
                                      , extipi_id
                                      , dm_orig_merc
                                      , codst_id
                                      , aliq_dest
                                      , obsfiscal_id
                                      , obs_compl
                                      , dm_mod_base_calc_st
                                      , indice
                                      , perc_reduc_bc
                                      , dm_ajusta_mva
                                      , dm_efeito
                                      , dm_calc_fisica
                                      , dm_soma_frete
                                      , dm_soma_seguro
                                      , dm_soma_outra_desp
                                      , dm_soma_ipi
                                      , dm_soma_ii
                                      , dm_soma_icmsst_od
                                      , dm_tipo_calc_st )
                                values( est_row_param_calc_icmsst.id
                                      , est_row_param_calc_icmsst.dm_tipo_param
                                      , est_row_param_calc_icmsst.prioridade
                                      , est_row_param_calc_icmsst.cfop_id
                                      , est_row_param_calc_icmsst.regtrib_id
                                      , est_row_param_calc_icmsst.formatrib_id
                                      , est_row_param_calc_icmsst.estado_id_orig
                                      , est_row_param_calc_icmsst.estado_id_dest
                                      , est_row_param_calc_icmsst.dt_ini
                                      , est_row_param_calc_icmsst.dt_fin
                                      , est_row_param_calc_icmsst.cnae_id
                                      , est_row_param_calc_icmsst.cest_id
                                      , est_row_param_calc_icmsst.ncm_id
                                      , est_row_param_calc_icmsst.extipi_id
                                      , est_row_param_calc_icmsst.dm_orig_merc
                                      , est_row_param_calc_icmsst.codst_id
                                      , est_row_param_calc_icmsst.aliq_dest
                                      , est_row_param_calc_icmsst.obsfiscal_id
                                      , est_row_param_calc_icmsst.obs_compl
                                      , est_row_param_calc_icmsst.dm_mod_base_calc_st
                                      , est_row_param_calc_icmsst.indice
                                      , est_row_param_calc_icmsst.perc_reduc_bc
                                      , est_row_param_calc_icmsst.dm_ajusta_mva
                                      , est_row_param_calc_icmsst.dm_efeito
                                      , est_row_param_calc_icmsst.dm_calc_fisica
                                      , est_row_param_calc_icmsst.dm_soma_frete
                                      , est_row_param_calc_icmsst.dm_soma_seguro
                                      , est_row_param_calc_icmsst.dm_soma_outra_desp
                                      , est_row_param_calc_icmsst.dm_soma_ipi
                                      , est_row_param_calc_icmsst.dm_soma_ii
                                      , est_row_param_calc_icmsst.dm_soma_icmsst_od
                                      , est_row_param_calc_icmsst.dm_tipo_calc_st );
     else
        --
        update param_calc_icmsst
           set dm_tipo_param            = est_row_param_calc_icmsst.dm_tipo_param
             , prioridade               = est_row_param_calc_icmsst.prioridade
             , cfop_id                  = est_row_param_calc_icmsst.cfop_id
             , regtrib_id               = est_row_param_calc_icmsst.regtrib_id
             , formatrib_id             = est_row_param_calc_icmsst.formatrib_id
             , estado_id_orig           = est_row_param_calc_icmsst.estado_id_orig
             , estado_id_dest           = est_row_param_calc_icmsst.estado_id_dest
             , dt_ini                   = est_row_param_calc_icmsst.dt_ini
             , dt_fin                   = est_row_param_calc_icmsst.dt_fin
             , cnae_id                  = est_row_param_calc_icmsst.cnae_id
             , cest_id                  = est_row_param_calc_icmsst.cest_id
             , ncm_id                   = est_row_param_calc_icmsst.ncm_id
             , extipi_id                = est_row_param_calc_icmsst.extipi_id
             , dm_orig_merc             = est_row_param_calc_icmsst.dm_orig_merc
             , codst_id                 = est_row_param_calc_icmsst.codst_id
             , aliq_dest                = est_row_param_calc_icmsst.aliq_dest
             , obsfiscal_id             = est_row_param_calc_icmsst.obsfiscal_id
             , obs_compl                = est_row_param_calc_icmsst.obs_compl
             , dm_mod_base_calc_st      = est_row_param_calc_icmsst.dm_mod_base_calc_st
             , indice                   = est_row_param_calc_icmsst.indice
             , perc_reduc_bc            = est_row_param_calc_icmsst.perc_reduc_bc
             , dm_ajusta_mva            = est_row_param_calc_icmsst.dm_ajusta_mva
             , dm_efeito                = est_row_param_calc_icmsst.dm_efeito
             , dm_calc_fisica           = est_row_param_calc_icmsst.dm_calc_fisica
             , dm_soma_frete            = est_row_param_calc_icmsst.dm_soma_frete
             , dm_soma_seguro           = est_row_param_calc_icmsst.dm_soma_seguro
             , dm_soma_outra_desp       = est_row_param_calc_icmsst.dm_soma_outra_desp
             , dm_soma_ipi              = est_row_param_calc_icmsst.dm_soma_ipi
             , dm_soma_ii               = est_row_param_calc_icmsst.dm_soma_ii
             , dm_soma_icmsst_od        = est_row_param_calc_icmsst.dm_soma_icmsst_od
             , dm_tipo_calc_st          = est_row_param_calc_icmsst.dm_tipo_calc_st
         where id                       = est_row_param_calc_icmsst.id;
        --
     end if;
     --
   end if;
   --
EXCEPTION
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_param_calc_icmsst fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
end pkb_integr_param_calc_icmsst;

----------------------------------------------------------------------------------------------------
-- Procedimento que faz a integração da tabela de Aliquota do Imposto por NCM: Tratar IPI, PIS e COFINS
procedure pkb_integr_aliq_tipoimp_ncm ( est_log_generico_calcfiscal   in out nocopy dbms_sql.number_table
                                      , est_row_aliq_tipoimp_ncm      in out nocopy aliq_tipoimp_ncm%rowtype
                                      , en_empresa_id                 in            empresa.id%type
                                      , en_cd_tipoimposto             in            tipo_imposto.cd%type
                                      , en_cd_inc_trib                in            inc_trib.cd%type
                                      , en_cd_reg_trib                in            reg_trib.cd%type
                                      , en_cd_forma_trib              in            forma_trib.cd%type
                                      , ev_cd_cnae                    in            cnae.cd%type
                                      , en_cd_cfop                    in            cfop.cd%type
                                      , ev_cd_ncm                     in            ncm.cod_ncm%type
                                      , ev_cd_ex_tipi                 in            ex_tipi.cod_ex_tipi%type
                                      , ev_cl_enq                     in            classe_enq_ipi.cl_enq%type
                                      , ev_cod_selo_ipi               in            selo_contr_ipi.cod_selo_ipi%type
                                      , ev_cod_st                     in            cod_st.cod_st%type
                                      , ev_cod_of                     in            obs_fiscal.cod_of%type
                                      , en_loteintws_id               in            lote_int_ws.id%type default 0
                                      )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   est_row_aliq_tipoimp_ncm.id := pk_csf_calc_fiscal.fkg_aliqtipoimpncm_id ( ed_dt_ini             => est_row_aliq_tipoimp_ncm.dt_ini
                                                                           , ed_dt_fin             => est_row_aliq_tipoimp_ncm.dt_fin
                                                                           , en_tipoimposto_id     => pk_csf.fkg_Tipo_Imposto_id ( en_cd_tipoimposto )
                                                                           , en_inctrib_id         => pk_csf.fkg_id_inc_trib_cd ( en_cd_inc_trib )
                                                                           , en_regtrib_id         => pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib)
                                                                           , en_formatrib_id       => pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib )
                                                                           , en_cnae_id            => pk_csf.fkg_id_cnae_cd ( ev_cd_cnae )
                                                                           , en_cfop_id            => pk_csf.fkg_cfop_id ( en_cd_cfop )
                                                                           , en_ncm_id             => pk_csf.fkg_Ncm_id ( ev_cd_ncm )
                                                                           , en_extipi_id          => pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ))
                                                                           , en_dm_orig_merc       => est_row_aliq_tipoimp_ncm.dm_orig_merc
                                                                           , en_dm_calc_cons_final => est_row_aliq_tipoimp_ncm.dm_calc_cons_final);
   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_aliq_tipoimp_ncm.id;
   gv_obj_referencia := 'ALIQ_TIPOIMP_NCM';
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --                            Tabela de Aliquota do Imposto por NCM: Tratar IPI, PIS e COFINS
   gv_mensagem_log   := 'Integração de Aliquota do Imposto por NCM: Tratar IPI, PIS e COFINS, Tipo Imp.: '||en_cd_tipoimposto||', Incidencia Trib.: '||en_cd_inc_trib
                        ||', Regime Trib.:'||en_cd_reg_trib||', CNAE: '||ev_cd_cnae||', CFOP: '||en_cd_cfop||', NCM: '||ev_cd_ncm||vv_nro_lote||'.';
   --
   vn_fase := 3;
   --
   if trim(est_row_aliq_tipoimp_ncm.dm_tipo_param) not in ('E','R')then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Valor do Dominio "Tipo de Parametro" inválido ('|| est_row_aliq_tipoimp_ncm.dm_tipo_param 
                       ||') Valores válidos: "E" - Exceção e "R" - Regra. Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_aliq_tipoimp_ncm.prioridade,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_resumo_log := 'Valor do Campo "Prioridade do Parâmetro" inválido ('|| est_row_aliq_tipoimp_ncm.prioridade
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 5;
   --
   est_row_aliq_tipoimp_ncm.tipoimposto_id := pk_csf.fkg_Tipo_Imposto_id ( en_cd_tipoimposto );
   --
   if nvl(est_row_aliq_tipoimp_ncm.tipoimposto_id,0) <= 0 then
      --
      vn_fase := 5.1;
      --
      gv_resumo_log := 'Código do "Tipo de Imposto" inválido ou não existe no Compliance ('|| en_cd_tipoimposto
                       ||'). Favor Verificar';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 6;
   --
   if trim(en_cd_inc_trib) is not null then 
      --
      vn_fase := 6.1;
      --
      est_row_aliq_tipoimp_ncm.INCTRIB_ID := pk_csf.fkg_id_inc_trib_cd ( en_cd_inc_trib );
      --
      if nvl(est_row_aliq_tipoimp_ncm.INCTRIB_ID,0) <= 0 then
         --
         vn_fase := 6.2;
         --
         gv_resumo_log := 'Código do "Incidencia Tributaria" inválido ou não existe no Compliance ('|| en_cd_inc_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 7;
   --
   if trim(en_cd_reg_trib) is not null then
      --
      vn_fase := 7.1;
      --
      est_row_aliq_tipoimp_ncm.REGTRIB_ID := pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib);
      --
      if nvl(est_row_aliq_tipoimp_ncm.REGTRIB_ID,0) <= 0 then
         --
         vn_fase := 7.2;
         --
         gv_resumo_log := 'Código do "Regime Tributario" inválido ou não existe no Compliance ('|| en_cd_reg_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 8;
   --
   if trim(en_cd_forma_trib) is not null then
      --
      vn_fase := 8.1;
      --
      est_row_aliq_tipoimp_ncm.FORMATRIB_ID := pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib );
      --
      if nvl(est_row_aliq_tipoimp_ncm.FORMATRIB_ID,0) <= 0 then
         --
         vn_fase := 8.2;
         --
         est_row_aliq_tipoimp_ncm.formatrib_id := null;
         --
         gv_resumo_log := 'Código do "Forma de Tributacao" inválido ou não existe no Compliance ('|| en_cd_forma_trib
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 9;
   --
   if trim(ev_cd_cnae) is not null then
      --
      vn_fase := 9.1;
      --
      est_row_aliq_tipoimp_ncm.CNAE_ID := pk_csf.fkg_id_cnae_cd ( ev_cd_cnae );
      --
      if nvl(est_row_aliq_tipoimp_ncm.CNAE_ID,0) <= 0 then
         --
         vn_fase := 9.2;
         --
         gv_resumo_log := 'Código da Tabela Vermelha de "CNAE" inválido ('|| ev_cd_cnae
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   if trim(en_cd_cfop) is not null then
      --
      vn_fase := 10.1;
      --
      est_row_aliq_tipoimp_ncm.cfop_id := pk_csf.fkg_cfop_id ( en_cd_cfop );
      --
      if nvl(est_row_aliq_tipoimp_ncm.cfop_id,0) <= 0 then
         --
         vn_fase := 10.2;
         --
         gv_resumo_log := 'Código da Tabela de "CFOP" inválido ('|| en_cd_cfop
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   if trim(ev_cod_of) is not null then
      --
      est_row_aliq_tipoimp_ncm.obsfiscal_id := pk_csf_calc_fiscal.fkg_obsfiscal_id ( ev_cod_of => ev_cod_of );
      --
      if nvl(est_row_aliq_tipoimp_ncm.obsfiscal_id,0) <= 0 then
         --
         vn_fase := 10.1;
         --
         gv_resumo_log := 'Código da Observacao Fiscal inválido, Favor Verificar. Dominio = '||ev_cod_of;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 11;
   --
   if trim(ev_cd_ncm) is not null then
      --
      vn_fase := 11.1;
      --
      est_row_aliq_tipoimp_ncm.ncm_id := pk_csf.fkg_Ncm_id ( ev_cd_ncm );
      --
      if nvl(est_row_aliq_tipoimp_ncm.ncm_id,0) <= 0 then
         --
         vn_fase := 11.2;
         --
         gv_resumo_log := 'Código da Tabela de "NCM" inválido ('|| ev_cd_ncm
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   if trim(ev_cd_ex_tipi) is not null then
      --
      vn_fase := 12.1;
      --
      est_row_aliq_tipoimp_ncm.extipi_id := pk_csf.fkg_ex_tipi_id ( ev_cd_ex_tipi ,  pk_csf.fkg_Ncm_id ( ev_cd_ncm ));
      --
      if nvl(est_row_aliq_tipoimp_ncm.extipi_id,0) <= 0 then
         --
         vn_fase := 12.2;
         --
         gv_resumo_log := 'Código da Tabela de "Exceção de Ncm informados na TIPI" inválido ('|| ev_cd_ex_tipi
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 12.3;
   --
   if trim(ev_cl_enq) is not null then
      --
      vn_fase := 12.4;
      --
      est_row_aliq_tipoimp_ncm.classeenqipi_id := pk_csf.fkg_Classe_Enq_IPI_id ( ev_cl_enq => ev_cl_enq);
      --
      if nvl(est_row_aliq_tipoimp_ncm.classeenqipi_id,0) = 0 then
         --
         gv_resumo_log := 'Código da Tabela de "Código da Classe de Enquadramento Legal do IPI" inválido ('|| ev_cl_enq
                       ||'). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 12.5;
   --
   if trim(ev_cod_selo_ipi) is not null then
      --
      vn_fase := 12.6;
      --
      est_row_aliq_tipoimp_ncm.selocontripi_id := pk_csf.fkg_Selo_Contr_IPI_id ( ev_cod_selo_ipi => ev_cod_selo_ipi);
      --
      if nvl(est_row_aliq_tipoimp_ncm.selocontripi_id,0) = 0 then
         --
         gv_resumo_log := 'Código da Tabela de "Código do Selo de Controle de IPI" inválido ('|| ev_cod_selo_ipi ||
                          '). Favor Verificar';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if nvl(est_row_aliq_tipoimp_ncm.dm_orig_merc,0) not in (0,1,2,3,4,5,6,7,8) then
      --
      vn_fase := 13.1;
      --
       gv_resumo_log := 'Valor de Dominio de "Origem de Mercadoria" ('|| est_row_aliq_tipoimp_ncm.dm_orig_merc ||
                        ') inválido, Valores validos: 0 - Nacional, exceto as indicadas nos códigos 3 a 5, 1 - Estrangeira - Importação direta, exceto a indicada no código 6, '||
                        '2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7, 3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%, '||
                        '4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes, '||
                        '5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%, 6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e '||
                        '7 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_aliq_tipoimp_ncm.DM_CALC_CONS_FINAL,-1) not in (0, 1, 2, 3, 4, 5, 6, 7) then
      --
      vn_fase := 14.1;
      --
      gv_resumo_log := 'Valor de Dominio de "Calcula Consumidor Final" ('|| est_row_aliq_tipoimp_ncm.DM_CALC_CONS_FINAL ||
                       ') inválido, Valores validos: ' ||
                       '0-Não, '||
                       '1-Sim, '||
                       '2-Indiferente, '||
                       '3-Industria, '||
                       '4-Comercio, '||
                       '5-Atacado, '||
                       '6-Varejo, '||
                       '7-Industria / Consumo Final. '||
                       'Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 15;
   --
   if trim(ev_cod_st) is not null then 
      --
      vn_fase := 15.1;
      --
      est_row_aliq_tipoimp_ncm.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => ev_cod_st
                                                                , en_tipoimp_id  => est_row_aliq_tipoimp_ncm.tipoimposto_id
                                                                );
      --
      if nvl(est_row_aliq_tipoimp_ncm.codst_id,0) <= 0 then
         --
         vn_fase := 15.2;
         --
         gv_resumo_log := 'Valor do "Código de Situação Tributaria" Inválido ('|| ev_cod_st ||'), Favor Verificar.';
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 16;
   --
   if nvl(est_row_aliq_tipoimp_ncm.dm_tipo,0) not in (1,2) then
      --
      vn_fase := 16.1;
      --
      gv_resumo_log := 'Valor do "Código de Situação Tributaria" Inválido ('|| est_row_aliq_tipoimp_ncm.dm_tipo ||'), Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(est_row_aliq_tipoimp_ncm.indice,0) <= 0 then
      --
      vn_fase := 17.1;
      --
      gv_resumo_log := 'Valor de "Aliquota ou Valor do Imposto" Inválido ('|| est_row_aliq_tipoimp_ncm.indice ||
                       ') não pode ser nullo ou menor que zero, Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 18;
   --
   if nvl(est_row_aliq_tipoimp_ncm.DM_SOMA_FRETE,-1) not in (0,1) then
      --
      vn_fase := 18.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Frete na Base de Calculo" Inválido ('|| est_row_aliq_tipoimp_ncm.DM_SOMA_FRETE ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 19;
   --
   if nvl(est_row_aliq_tipoimp_ncm.DM_SOMA_SEGURO,-1) not in (0,1) then
      --
      vn_fase := 19.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Seguro na Base de Calculo" Inválido ('|| est_row_aliq_tipoimp_ncm.DM_SOMA_SEGURO ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 20;
   --
   if nvl(est_row_aliq_tipoimp_ncm.DM_SOMA_OUTRA_DESP,-1) not in (0,1) then
      --
      vn_fase := 20.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma Outras Despesas na Base de Calculo" Inválido ('|| est_row_aliq_tipoimp_ncm.DM_SOMA_OUTRA_DESP ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 21;
   --
   if nvl(est_row_aliq_tipoimp_ncm.DM_SOMA_II,-1) not in (0,1) then
      --
      vn_fase := 21.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Imposto de Importação na Base de Calculo" Inválido ('|| est_row_aliq_tipoimp_ncm.DM_SOMA_II ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 22;
   --
   if nvl(est_row_aliq_tipoimp_ncm.DM_SOMA_ICMSST,-1) not in (0,1) then
      --
      vn_fase := 21.1;
      --
      gv_resumo_log := 'Valor do Dominio de "Soma o Imposto de ICMS-ST na Base de Calculo" Inválido ('|| est_row_aliq_tipoimp_ncm.DM_SOMA_ICMSST ||
                       ') Valores permitidos: 0-Não ou 1-Sim. Favor Verificar.';
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 99;
   --
   if trim(est_row_aliq_tipoimp_ncm.dm_tipo_param)          in ('R','E')
    and nvl(est_row_aliq_tipoimp_ncm.prioridade, -1)        >= 0
    and nvl(est_row_aliq_tipoimp_ncm.TIPOIMPOSTO_ID,0)      >  0
    and nvl(est_row_aliq_tipoimp_ncm.DM_CALC_CONS_FINAL,-1) >= 0
    and nvl(est_row_aliq_tipoimp_ncm.DM_TIPO,-1)            >= 0
    and nvl(est_row_aliq_tipoimp_ncm.INDICE,0)              >  0
    and nvl(est_row_aliq_tipoimp_ncm.DM_SOMA_FRETE,-1)      >= 0
    and nvl(est_row_aliq_tipoimp_ncm.DM_SOMA_SEGURO,-1)     >= 0
    and nvl(est_row_aliq_tipoimp_ncm.DM_SOMA_OUTRA_DESP,-1) >= 0
    and nvl(est_row_aliq_tipoimp_ncm.DM_SOMA_II,-1)         >= 0
    and nvl(est_row_aliq_tipoimp_ncm.DM_SOMA_ICMSST,-1)     >= 0 then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_aliq_tipoimp_ncm.id,0) = 0 then
         --
         vn_fase := 99.2;
         --
         select aliqtipoimpncm_seq.nextval
           into est_row_aliq_tipoimp_ncm.id
           from dual;
         --
         insert into aliq_tipoimp_ncm ( id
                                      , dm_tipo_param
                                      , prioridade
                                      , tipoimposto_id
                                      , inctrib_id
                                      , regtrib_id
                                      , formatrib_id
                                      , cnae_id
                                      , cfop_id
                                      , ncm_id
                                      , extipi_id
                                      , dm_orig_merc
                                      , dt_ini
                                      , dt_fin
                                      , dm_calc_cons_final
                                      , codst_id
                                      , dm_tipo
                                      , indice
                                      , perc_major
                                      , perc_reduc_bc
                                      , dm_soma_frete
                                      , dm_soma_seguro
                                      , dm_soma_outra_desp
                                      , dm_soma_ii
                                      , dm_soma_icmsst
                                      , obsfiscal_id
                                      , obs_compl
                                      , classeenqipi_id
                                      , selocontripi_id
                                      , qtde_selo_contr_ipi
                                      , enqlegalipi_id )
                                values( est_row_aliq_tipoimp_ncm.id
                                      , est_row_aliq_tipoimp_ncm.dm_tipo_param
                                      , est_row_aliq_tipoimp_ncm.prioridade
                                      , est_row_aliq_tipoimp_ncm.tipoimposto_id
                                      , est_row_aliq_tipoimp_ncm.inctrib_id
                                      , est_row_aliq_tipoimp_ncm.regtrib_id
                                      , est_row_aliq_tipoimp_ncm.formatrib_id
                                      , est_row_aliq_tipoimp_ncm.cnae_id
                                      , est_row_aliq_tipoimp_ncm.cfop_id
                                      , est_row_aliq_tipoimp_ncm.ncm_id
                                      , est_row_aliq_tipoimp_ncm.extipi_id
                                      , est_row_aliq_tipoimp_ncm.dm_orig_merc
                                      , est_row_aliq_tipoimp_ncm.dt_ini
                                      , est_row_aliq_tipoimp_ncm.dt_fin
                                      , est_row_aliq_tipoimp_ncm.dm_calc_cons_final
                                      , est_row_aliq_tipoimp_ncm.codst_id
                                      , est_row_aliq_tipoimp_ncm.dm_tipo
                                      , est_row_aliq_tipoimp_ncm.indice
                                      , est_row_aliq_tipoimp_ncm.perc_major
                                      , est_row_aliq_tipoimp_ncm.perc_reduc_bc
                                      , est_row_aliq_tipoimp_ncm.dm_soma_frete
                                      , est_row_aliq_tipoimp_ncm.dm_soma_seguro
                                      , est_row_aliq_tipoimp_ncm.dm_soma_outra_desp
                                      , est_row_aliq_tipoimp_ncm.dm_soma_ii
                                      , est_row_aliq_tipoimp_ncm.dm_soma_icmsst
                                      , est_row_aliq_tipoimp_ncm.obsfiscal_id
                                      , est_row_aliq_tipoimp_ncm.obs_compl
                                      , est_row_aliq_tipoimp_ncm.classeenqipi_id
                                      , est_row_aliq_tipoimp_ncm.selocontripi_id
                                      , est_row_aliq_tipoimp_ncm.qtde_selo_contr_ipi
                                      , est_row_aliq_tipoimp_ncm.enqlegalipi_id );
         --
      else
         --
         vn_fase := 99.3;
         --
         update aliq_tipoimp_ncm
            set dm_tipo_param       = est_row_aliq_tipoimp_ncm.dm_tipo_param
              , prioridade          = est_row_aliq_tipoimp_ncm.prioridade         
              , tipoimposto_id      = est_row_aliq_tipoimp_ncm.tipoimposto_id     
              , inctrib_id          = est_row_aliq_tipoimp_ncm.inctrib_id         
              , regtrib_id          = est_row_aliq_tipoimp_ncm.regtrib_id         
              , formatrib_id        = est_row_aliq_tipoimp_ncm.formatrib_id       
              , cnae_id             = est_row_aliq_tipoimp_ncm.cnae_id            
              , cfop_id             = est_row_aliq_tipoimp_ncm.cfop_id            
              , ncm_id              = est_row_aliq_tipoimp_ncm.ncm_id             
              , extipi_id           = est_row_aliq_tipoimp_ncm.extipi_id          
              , dm_orig_merc        = est_row_aliq_tipoimp_ncm.dm_orig_merc       
              , dt_ini              = est_row_aliq_tipoimp_ncm.dt_ini             
              , dt_fin              = est_row_aliq_tipoimp_ncm.dt_fin             
              , dm_calc_cons_final  = est_row_aliq_tipoimp_ncm.dm_calc_cons_final 
              , codst_id            = est_row_aliq_tipoimp_ncm.codst_id           
              , dm_tipo             = est_row_aliq_tipoimp_ncm.dm_tipo            
              , indice              = est_row_aliq_tipoimp_ncm.indice             
              , perc_major          = est_row_aliq_tipoimp_ncm.perc_major         
              , perc_reduc_bc       = est_row_aliq_tipoimp_ncm.perc_reduc_bc      
              , dm_soma_frete       = est_row_aliq_tipoimp_ncm.dm_soma_frete      
              , dm_soma_seguro      = est_row_aliq_tipoimp_ncm.dm_soma_seguro     
              , dm_soma_outra_desp  = est_row_aliq_tipoimp_ncm.dm_soma_outra_desp 
              , dm_soma_ii          = est_row_aliq_tipoimp_ncm.dm_soma_ii         
              , dm_soma_icmsst      = est_row_aliq_tipoimp_ncm.dm_soma_icmsst     
              , obsfiscal_id        = est_row_aliq_tipoimp_ncm.obsfiscal_id       
              , obs_compl           = est_row_aliq_tipoimp_ncm.obs_compl          
              , classeenqipi_id     = est_row_aliq_tipoimp_ncm.classeenqipi_id    
              , selocontripi_id     = est_row_aliq_tipoimp_ncm.selocontripi_id    
              , qtde_selo_contr_ipi = est_row_aliq_tipoimp_ncm.qtde_selo_contr_ipi
              , enqlegalipi_id      = est_row_aliq_tipoimp_ncm.enqlegalipi_id
          where id                  = est_row_aliq_tipoimp_ncm.id;
         --
      end if;
      --
      commit;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_aliq_tipoimp_ncm fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
end pkb_integr_aliq_tipoimp_ncm;

----------------------------------------------------------------------------------------------------
-- Procedimento que faz a integração da Tabela de CFOP por Tipo de Imposto
procedure pkb_integr_cfop_tipoimp ( est_log_generico_calcfiscal   in out nocopy  dbms_sql.number_table
                                  , est_row_cfop_tipoimp          in out nocopy  cfop_tipoimp%rowtype
                                  , en_empresa_id                 in             empresa.id%type
                                  , en_cfop_cd                    in             cfop.cd%type
                                  , en_cd_reg_trib                in             reg_trib.cd%type
                                  , en_cd_forma_trib              in             forma_trib.cd%type
                                  , en_cd_tipoimp                 in             tipo_imposto.cd%type
                                  , ev_cod_st                     in             cod_st.cod_st%type
                                  , ev_cod_of                     in             obs_fiscal.cod_of%type
                                  , ev_cfop_cd_ret                in             cfop.cd%type
                                  , en_loteintws_id               in             lote_int_ws.id%type default 0
                                  )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_nro_lote                  varchar2(100) := null;
   --
begin
   --
   vn_fase := 1;
   --
   est_row_cfop_tipoimp.id := pk_csf_calc_fiscal.fkg_cfoptipoimp_id ( en_cfop_id        => pk_csf.fkg_cfop_id ( en_cfop_cd )
                                                                    , en_regtrib_id     => pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib)
                                                                    , en_formatrib      => pk_csf.fkg_forma_trib_cd ( pk_csf.fkg_id_reg_trib_cd (en_cd_reg_trib), en_cd_forma_trib )
                                                                    , en_tipoimposto_id => pk_csf.fkg_Tipo_Imposto_id ( en_cd => en_cd_tipoimp )
                                                                    , en_dm_tipo_calc   => est_row_cfop_tipoimp.dm_tipo_calc
                                                                    );
   --
   vn_fase := 2;
   --
   gn_referencia_id  := est_row_cfop_tipoimp.id;
   gv_obj_referencia := 'CFOP_TIPOIMP';
   --
   if nvl(en_loteintws_id,0) > 0 then
      vv_nro_lote := ' Lote WS: ' || en_loteintws_id;
   end if;
   --
   gv_mensagem_log   := 'Integração das Informações da Tabela de CFOP por Tipo de Imposto, CFOP: '||en_cfop_cd ||', Cód. Reg. Trib.:'|| en_cd_reg_trib
                        ||', Cód. Forma Trib.: '|| en_cd_forma_trib || ', Cód. Tipo Imp.: '|| en_cd_tipoimp ||vv_nro_lote||'.';
   --
   vn_fase := 3;
   --
   est_row_cfop_tipoimp.cfop_id := pk_csf.fkg_cfop_id ( en_cfop_cd );
   --
   if nvl(est_row_cfop_tipoimp.cfop_id,0) <= 0 then
      --
      vn_fase := 3.1;
      --
      gv_resumo_log := 'Código do Numero do CFOP inválido ou não encontrado na base Compliance. Favor Verificar . Código = '||en_cfop_cd;
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if (en_cd_reg_trib) is not null then
      --
      est_row_cfop_tipoimp.regtrib_id := pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib );
      --
      if nvl(est_row_cfop_tipoimp.regtrib_id,0) <= 0 then
         --
         vn_fase := 4.1;
         --
         gv_resumo_log := 'Código de Regime Tributario inválido ou não encontrado na base Compliance, Favor Verificar. Código = '||en_cd_reg_trib;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 5;
   --
   if trim(en_cd_reg_trib) is not null then
      --
      est_row_cfop_tipoimp.regtrib_id := pk_csf.fkg_id_reg_trib_cd ( en_cd_reg_trib );
      --
      if nvl(est_row_cfop_tipoimp.regtrib_id,0) <= 0 then
         --
         vn_fase := 4.1;
         --
         gv_resumo_log := 'Código de Regime Tributario inválido ou não encontrado na base Compliance, Favor Verificar. Código = '||en_cd_reg_trib;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 5;
   --
   if trim(en_cd_forma_trib) is not null then
      --
      est_row_cfop_tipoimp.formatrib_id := pk_csf.fkg_forma_trib_cd ( est_row_cfop_tipoimp.regtrib_id , en_cd_forma_trib );
      --
      if nvl(est_row_cfop_tipoimp.formatrib_id,0) <= 0 then
         --
         vn_fase := 5.1;
         --
         est_row_cfop_tipoimp.formatrib_id := null;
         --
         gv_resumo_log := 'Código de Forma de Tributacao inválido ou não encontrado na base Compliance, Favor Verificar. Código = '||en_cd_forma_trib;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 6;
   --
   est_row_cfop_tipoimp.tipoimposto_id := pk_csf.fkg_Tipo_Imposto_id ( en_cd => en_cd_tipoimp );
   --
   if nvl(est_row_cfop_tipoimp.tipoimposto_id,0) <= 0 then
      --
      vn_fase := 6.1;
      --
      gv_resumo_log := 'Código de Tipo de Imposto inválido ou não encontrado na base Compliance, Favor Verificar. Código = '||en_cd_tipoimp;
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 7;
   --
   if nvl(est_row_cfop_tipoimp.dm_tipo_calc,-1) not in (0,1) then
      --
      vn_fase := 7.1;
      --
      gv_resumo_log := 'Valor do Tipo de Calculo inválido, Favor Verificar. Dominio = '||est_row_cfop_tipoimp.dm_tipo_calc;
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 8;
   --
   if nvl(est_row_cfop_tipoimp.dm_trib_imposto,-1) not in (0,1) then
      --
      vn_fase := 8.1;
      --
      gv_resumo_log := 'Valor do Tributação de Imposto inválido, Favor Verificar. Dominio = '||est_row_cfop_tipoimp.dm_trib_imposto;
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 9;
   --
   if trim(ev_cod_st) is not null then
      --
      est_row_cfop_tipoimp.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => ev_cod_st
                                                            , en_tipoimp_id  => est_row_cfop_tipoimp.tipoimposto_id
                                                            );
      --
      if nvl(est_row_cfop_tipoimp.codst_id,0) <= 0 then
         --
         vn_fase := 9.1;
         --
         gv_resumo_log := 'Código da Situação Tributaria inválido, Favor Verificar. Dominio = '||ev_cod_st;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 10;
   --
   if trim(ev_cod_of) is not null then
      --
      est_row_cfop_tipoimp.obsfiscal_id := pk_csf_calc_fiscal.fkg_obsfiscal_id ( ev_cod_of => ev_cod_of );
      --
      if nvl(est_row_cfop_tipoimp.obsfiscal_id,0) <= 0 then
         --
         vn_fase := 10.1;
         --
         gv_resumo_log := 'Código da Observacao Fiscal inválido, Favor Verificar. Dominio = '||ev_cod_of;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 11;
   --
   if trim(ev_cfop_cd_ret) is not null then
      --
      est_row_cfop_tipoimp.cfop_id_retorno := pk_csf.fkg_cfop_id ( ev_cfop_cd_ret );
      --
      if nvl(est_row_cfop_tipoimp.cfop_id_retorno,0) <= 0 then
         --
         vn_fase := 11.1;
         --
         gv_resumo_log := 'Código do CFOP do Retorna da Mercadoria inválido, Favor Verificar. Dominio = '||ev_cfop_cd_ret;
         --
         vn_loggenericocalcfiscal_id := null;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => gv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => gn_referencia_id
                          , ev_obj_referencia            => gv_obj_referencia
                          , en_empresa_id                => en_empresa_id
                          );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   if nvl(est_row_cfop_tipoimp.prioridade,-1) < 0 then
      --
      vn_fase := 12.1;
      --
      gv_resumo_log := 'Valor da Prioridade de cálculo para o CFOP não pode ser menor ou igual a zero, Favor Verificar. Valor = '||est_row_cfop_tipoimp.prioridade;
      --
      vn_loggenericocalcfiscal_id := null;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => gv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );  
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_cfop_tipoimp.cfop_id,0) > 0
    and nvl(est_row_cfop_tipoimp.tipoimposto_id,0) > 0
    and nvl(est_row_cfop_tipoimp.dm_tipo_calc,-1) in (0,1)
    and nvl(est_row_cfop_tipoimp.prioridade,-1) > 0
    and nvl(est_row_cfop_tipoimp.dm_tipo_calc,-1) in (0,1) then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_cfop_tipoimp.id,0) = 0 then
         --
         vn_fase := 99.2;
         --
         select cfoptipoimp_seq.nextval
           into est_row_cfop_tipoimp.id
           from dual;
         --
         insert into cfop_tipoimp ( id
                                  , cfop_id
                                  , regtrib_id
                                  , formatrib_id
                                  , tipoimposto_id
                                  , dm_tipo_calc
                                  , prioridade
                                  , dm_trib_imposto
                                  , codst_id
                                  , obsfiscal_id
                                  , obs_compl
                                  , cfop_id_retorno
                                  , nro_dia_retorno )
                            values( est_row_cfop_tipoimp.id
                                  , est_row_cfop_tipoimp.cfop_id
                                  , est_row_cfop_tipoimp.regtrib_id
                                  , est_row_cfop_tipoimp.formatrib_id
                                  , est_row_cfop_tipoimp.tipoimposto_id
                                  , est_row_cfop_tipoimp.dm_tipo_calc
                                  , est_row_cfop_tipoimp.prioridade
                                  , est_row_cfop_tipoimp.dm_trib_imposto
                                  , est_row_cfop_tipoimp.codst_id
                                  , est_row_cfop_tipoimp.obsfiscal_id
                                  , est_row_cfop_tipoimp.obs_compl
                                  , est_row_cfop_tipoimp.cfop_id_retorno
                                  , est_row_cfop_tipoimp.nro_dia_retorno );
         --
      else
         --
         vn_fase := 99.3;
         --
         update cfop_tipoimp
            set cfop_id          = est_row_cfop_tipoimp.cfop_id
              , regtrib_id       = est_row_cfop_tipoimp.regtrib_id
              , formatrib_id     = est_row_cfop_tipoimp.formatrib_id
              , tipoimposto_id   = est_row_cfop_tipoimp.tipoimposto_id
              , dm_tipo_calc     = est_row_cfop_tipoimp.dm_tipo_calc
              , prioridade       = est_row_cfop_tipoimp.prioridade
              , dm_trib_imposto  = est_row_cfop_tipoimp.dm_trib_imposto
              , codst_id         = est_row_cfop_tipoimp.codst_id
              , obsfiscal_id     = est_row_cfop_tipoimp.obsfiscal_id
              , obs_compl        = est_row_cfop_tipoimp.obs_compl
              , cfop_id_retorno  = est_row_cfop_tipoimp.cfop_id_retorno
              , nro_dia_retorno  = est_row_cfop_tipoimp.nro_dia_retorno
          where id               = est_row_cfop_tipoimp.id;
         --
      end if;
      --
      commit;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_cfop_tipoimp fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => gn_referencia_id
                       , ev_obj_referencia            => gv_obj_referencia
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
end pkb_integr_cfop_tipoimp;

-------------------------------------------------------------------------------------------------------

-- Procedimento que faz a validação e gravação dos dados na tabela SC_INFOR_ADIC
procedure pkb_integr_sc_infor_adic ( est_log_generico_calcfiscal   in out nocopy  dbms_sql.number_table
                                   , est_row_sc_infor_adic         in out nocopy  sc_infor_adic%rowtype
                                   , en_empresa_id                 in             empresa.id%type
                                   , ev_cod_of                     in             obs_fiscal.cod_of%type
                                   )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(est_row_sc_infor_adic.soliccalc_id,0) <= 0 then
      --
      vv_mensagem_log := 'Não informada a Solicitação de Calculo para relacionar a Informação Adicional.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => est_row_sc_infor_adic.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 2;
   --
   est_row_sc_infor_adic.obsfiscal_id := pk_csf_calc_fiscal.fkg_obsfiscal_id ( ev_cod_of => trim(ev_cod_of) );
   --
   vn_fase := 2.1;
   --
   if nvl(est_row_sc_infor_adic.obsfiscal_id,0) <= 0
      and trim(ev_cod_of) is not null
      then
      --
      vv_mensagem_log := 'Código da Observação Fiscal (' || ev_cod_of || ') esta inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_sc_infor_adic.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_sc_infor_adic.soliccalc_id,0) > 0 then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_sc_infor_adic.id,0) <= 0 then
         --
         vn_fase := 99.2;
         --
         select scinforadic_seq.nextval
           into est_row_sc_infor_adic.id
           from dual;
         --
         vn_fase := 99.3;
         --
         insert into sc_infor_adic ( id
                                   , soliccalc_id
                                   , obsfiscal_id
                                   , texto
                                   , obs_compl
                                   )
                            values ( est_row_sc_infor_adic.id
                                   , est_row_sc_infor_adic.soliccalc_id
                                   , est_row_sc_infor_adic.obsfiscal_id
                                   , est_row_sc_infor_adic.texto
                                   , est_row_sc_infor_adic.obs_compl
                                   );
         --
      else
         --
         vn_fase := 99.4;
         --
         update sc_infor_adic set soliccalc_id            = est_row_sc_infor_adic.soliccalc_id
                                , obsfiscal_id            = est_row_sc_infor_adic.obsfiscal_id
                                , texto                   = est_row_sc_infor_adic.texto
                                , obs_compl               = est_row_sc_infor_adic.obs_compl
          where id = est_row_sc_infor_adic.id;
         --
      end if;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_sc_infor_adic fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => est_row_sc_infor_adic.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
end pkb_integr_sc_infor_adic;

-------------------------------------------------------------------------------------------------------

-- Procedimento que faz a validação e gravação dos dados na tabela TOTAL_SOLIC_CALC
procedure pkb_integr_total_solic_calc ( est_log_generico_calcfiscal   in out nocopy  dbms_sql.number_table
                                      , est_row_total_solic_calc      in out nocopy  total_solic_calc%rowtype
                                      , en_empresa_id                 in             empresa.id%type
                                      )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(est_row_total_solic_calc.soliccalc_id,0) <= 0 then
      --
      vv_mensagem_log := 'Não informada a Solicitação de Calculo para relacionar ao Total.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => est_row_total_solic_calc.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   est_row_total_solic_calc.vl_base_calc_icms  := nvl( est_row_total_solic_calc.vl_base_calc_icms,0);
   est_row_total_solic_calc.vl_imp_trib_icms   := nvl( est_row_total_solic_calc.vl_imp_trib_icms,0);
   est_row_total_solic_calc.vl_base_calc_st    := nvl( est_row_total_solic_calc.vl_base_calc_st,0);
   est_row_total_solic_calc.vl_imp_trib_st     := nvl( est_row_total_solic_calc.vl_imp_trib_st,0);
   est_row_total_solic_calc.vl_total_item      := nvl( est_row_total_solic_calc.vl_total_item,0);
   est_row_total_solic_calc.vl_frete           := nvl( est_row_total_solic_calc.vl_frete,0);
   est_row_total_solic_calc.vl_seguro          := nvl( est_row_total_solic_calc.vl_seguro,0);
   est_row_total_solic_calc.vl_desconto        := nvl( est_row_total_solic_calc.vl_desconto,0);
   est_row_total_solic_calc.vl_imp_trib_ii     := nvl( est_row_total_solic_calc.vl_imp_trib_ii,0);
   est_row_total_solic_calc.vl_imp_trib_ipi    := nvl( est_row_total_solic_calc.vl_imp_trib_ipi,0);
   est_row_total_solic_calc.vl_imp_trib_pis    := nvl( est_row_total_solic_calc.vl_imp_trib_pis,0);
   est_row_total_solic_calc.vl_imp_trib_cofins := nvl( est_row_total_solic_calc.vl_imp_trib_cofins,0);
   est_row_total_solic_calc.vl_outra_despesas  := nvl( est_row_total_solic_calc.vl_outra_despesas,0);
   est_row_total_solic_calc.vl_total_nf        := nvl( est_row_total_solic_calc.vl_total_nf,0);
   --
   vn_fase := 99;
   --
   if nvl(est_row_total_solic_calc.soliccalc_id,0) > 0 then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_total_solic_calc.id,0) <= 0 then
         --
         vn_fase := 99.2;
         --
         select totalsoliccalc_seq.nextval
           into est_row_total_solic_calc.id
           from dual;
         --
         vn_fase := 99.3;
         --
         insert into total_solic_calc ( id
                                      , soliccalc_id
                                      , vl_base_calc_icms
                                      , vl_imp_trib_icms
                                      , vl_base_calc_st
                                      , vl_imp_trib_st
                                      , vl_total_item
                                      , vl_frete
                                      , vl_seguro
                                      , vl_desconto
                                      , vl_imp_trib_ii
                                      , vl_imp_trib_ipi
                                      , vl_imp_trib_pis
                                      , vl_imp_trib_cofins
                                      , vl_outra_despesas
                                      , vl_total_nf
                                      , vl_serv_nao_trib
                                      , vl_base_calc_iss
                                      , vl_imp_trib_iss
                                      , vl_pis_iss
                                      , vl_cofins_iss
                                      , vl_ret_pis
                                      , vl_ret_cofins
                                      , vl_ret_csll
                                      , vl_base_calc_irrf
                                      , vl_ret_irrf
                                      , vl_base_calc_ret_prev
                                      , vl_ret_prev
                                      , vl_total_serv
                                      , vl_abat_nt
                                      , vl_forn
                                      , vl_terc
                                      , vl_servico
                                      , vl_ret_iss
                                      , vl_tot_trib
                                      , vl_icms_deson
                                      , vl_deducao
                                      , vl_outras_ret
                                      , vl_desc_incond
                                      , vl_desc_cond
                                      , vl_icms_uf_dest
                                      , vl_icms_uf_remet
                                      , vl_comb_pobr_uf_dest
                                      )
                               values ( est_row_total_solic_calc.id
                                      , est_row_total_solic_calc.soliccalc_id
                                      , est_row_total_solic_calc.vl_base_calc_icms
                                      , est_row_total_solic_calc.vl_imp_trib_icms
                                      , est_row_total_solic_calc.vl_base_calc_st
                                      , est_row_total_solic_calc.vl_imp_trib_st
                                      , est_row_total_solic_calc.vl_total_item
                                      , est_row_total_solic_calc.vl_frete
                                      , est_row_total_solic_calc.vl_seguro
                                      , est_row_total_solic_calc.vl_desconto
                                      , est_row_total_solic_calc.vl_imp_trib_ii
                                      , est_row_total_solic_calc.vl_imp_trib_ipi
                                      , est_row_total_solic_calc.vl_imp_trib_pis
                                      , est_row_total_solic_calc.vl_imp_trib_cofins
                                      , est_row_total_solic_calc.vl_outra_despesas
                                      , est_row_total_solic_calc.vl_total_nf
                                      , est_row_total_solic_calc.vl_serv_nao_trib
                                      , est_row_total_solic_calc.vl_base_calc_iss
                                      , est_row_total_solic_calc.vl_imp_trib_iss
                                      , est_row_total_solic_calc.vl_pis_iss
                                      , est_row_total_solic_calc.vl_cofins_iss
                                      , est_row_total_solic_calc.vl_ret_pis
                                      , est_row_total_solic_calc.vl_ret_cofins
                                      , est_row_total_solic_calc.vl_ret_csll
                                      , est_row_total_solic_calc.vl_base_calc_irrf
                                      , est_row_total_solic_calc.vl_ret_irrf
                                      , est_row_total_solic_calc.vl_base_calc_ret_prev
                                      , est_row_total_solic_calc.vl_ret_prev
                                      , est_row_total_solic_calc.vl_total_serv
                                      , est_row_total_solic_calc.vl_abat_nt
                                      , est_row_total_solic_calc.vl_forn
                                      , est_row_total_solic_calc.vl_terc
                                      , est_row_total_solic_calc.vl_servico
                                      , est_row_total_solic_calc.vl_ret_iss
                                      , est_row_total_solic_calc.vl_tot_trib
                                      , est_row_total_solic_calc.vl_icms_deson
                                      , est_row_total_solic_calc.vl_deducao
                                      , est_row_total_solic_calc.vl_outras_ret
                                      , est_row_total_solic_calc.vl_desc_incond
                                      , est_row_total_solic_calc.vl_desc_cond
                                      , est_row_total_solic_calc.vl_icms_uf_dest
                                      , est_row_total_solic_calc.vl_icms_uf_remet
                                      , est_row_total_solic_calc.vl_comb_pobr_uf_dest
                                      );
         --
      else
         --
         vn_fase := 99.4;
         --
         update total_solic_calc set soliccalc_id            = est_row_total_solic_calc.soliccalc_id
                                   , vl_base_calc_icms       = est_row_total_solic_calc.vl_base_calc_icms
                                   , vl_imp_trib_icms        = est_row_total_solic_calc.vl_imp_trib_icms
                                   , vl_base_calc_st         = est_row_total_solic_calc.vl_base_calc_st
                                   , vl_imp_trib_st          = est_row_total_solic_calc.vl_imp_trib_st
                                   , vl_total_item           = est_row_total_solic_calc.vl_total_item
                                   , vl_frete                = est_row_total_solic_calc.vl_frete
                                   , vl_seguro               = est_row_total_solic_calc.vl_seguro
                                   , vl_desconto             = est_row_total_solic_calc.vl_desconto
                                   , vl_imp_trib_ii          = est_row_total_solic_calc.vl_imp_trib_ii
                                   , vl_imp_trib_ipi         = est_row_total_solic_calc.vl_imp_trib_ipi
                                   , vl_imp_trib_pis         = est_row_total_solic_calc.vl_imp_trib_pis
                                   , vl_imp_trib_cofins      = est_row_total_solic_calc.vl_imp_trib_cofins
                                   , vl_outra_despesas       = est_row_total_solic_calc.vl_outra_despesas
                                   , vl_total_nf             = est_row_total_solic_calc.vl_total_nf
                                   , vl_serv_nao_trib        = est_row_total_solic_calc.vl_serv_nao_trib
                                   , vl_base_calc_iss        = est_row_total_solic_calc.vl_base_calc_iss
                                   , vl_imp_trib_iss         = est_row_total_solic_calc.vl_imp_trib_iss
                                   , vl_pis_iss              = est_row_total_solic_calc.vl_pis_iss
                                   , vl_cofins_iss           = est_row_total_solic_calc.vl_cofins_iss
                                   , vl_ret_pis              = est_row_total_solic_calc.vl_ret_pis
                                   , vl_ret_cofins           = est_row_total_solic_calc.vl_ret_cofins
                                   , vl_ret_csll             = est_row_total_solic_calc.vl_ret_csll
                                   , vl_base_calc_irrf       = est_row_total_solic_calc.vl_base_calc_irrf
                                   , vl_ret_irrf             = est_row_total_solic_calc.vl_ret_irrf
                                   , vl_base_calc_ret_prev   = est_row_total_solic_calc.vl_base_calc_ret_prev
                                   , vl_ret_prev             = est_row_total_solic_calc.vl_ret_prev
                                   , vl_total_serv           = est_row_total_solic_calc.vl_total_serv
                                   , vl_abat_nt              = est_row_total_solic_calc.vl_abat_nt
                                   , vl_forn                 = est_row_total_solic_calc.vl_forn
                                   , vl_terc                 = est_row_total_solic_calc.vl_terc
                                   , vl_servico              = est_row_total_solic_calc.vl_servico
                                   , vl_ret_iss              = est_row_total_solic_calc.vl_ret_iss
                                   , vl_tot_trib             = est_row_total_solic_calc.vl_tot_trib
                                   , vl_icms_deson           = est_row_total_solic_calc.vl_icms_deson
                                   , vl_deducao              = est_row_total_solic_calc.vl_deducao
                                   , vl_outras_ret           = est_row_total_solic_calc.vl_outras_ret
                                   , vl_desc_incond          = est_row_total_solic_calc.vl_desc_incond
                                   , vl_desc_cond            = est_row_total_solic_calc.vl_desc_cond
                                   , vl_icms_uf_dest         = est_row_total_solic_calc.vl_icms_uf_dest
                                   , vl_icms_uf_remet        = est_row_total_solic_calc.vl_icms_uf_remet
                                   , vl_comb_pobr_uf_dest    = est_row_total_solic_calc.vl_comb_pobr_uf_dest
          where id = est_row_total_solic_calc.id;
         --
      end if;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_total_solic_calc fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => est_row_total_solic_calc.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
end pkb_integr_total_solic_calc;

-------------------------------------------------------------------------------------------------------

-- Procedimento que faz a validação e gravação dos dados na tabela IMP_ITEMSC
procedure pkb_integr_imp_itemsc ( est_log_generico_calcfiscal   in out nocopy  dbms_sql.number_table
                                , est_row_imp_itemsc            in out nocopy  imp_itemsc%rowtype
                                , en_empresa_id                 in             empresa.id%type
                                , en_soliccalc_id               in             solic_calc.id%type
                                , en_tipoimp_cd                 in             tipo_imposto.cd%type
                                , ev_cod_st                     in             cod_st.cod_st%type
                                , ev_descr_item                 in             varchar2
                                )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vv_tipoimp_sigla             tipo_imposto.sigla%type;
   --
   vn_perc_reduc                imp_itemnf.perc_reduc%type; 
   vn_vl_base_calc              imp_itemnf.vl_base_calc%type;
   vn_aliq_apli                 imp_itemnf.aliq_apli%type;
   vn_vl_imp_trib               imp_itemnf.vl_imp_trib%type;         
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(est_row_imp_itemsc.itemsoliccalc_id,0) <= 0 then
      --
      vv_mensagem_log := ev_descr_item || 'Não informado o Item da Solicitação de Calculo para relacionar ao Imposto.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 2;
   --
   if nvl(en_tipoimp_cd,0) > 0 then
      --
      vn_fase := 2.1;
      --
      est_row_imp_itemsc.tipoimp_id  := pk_csf.fkg_Tipo_Imposto_id ( en_cd => en_tipoimp_cd );
      --
      vn_fase := 2.2;
      --
      if nvl(est_row_imp_itemsc.tipoimp_id,0) <= 0 then
         --
         vv_mensagem_log := ev_descr_item || '"Tipo de Imposto" está inválido ('||en_tipoimp_cd||').';
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_validacao
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      else
         --
         vv_tipoimp_sigla := pk_csf.fkg_Tipo_Imposto_Sigla ( en_cd => en_tipoimp_cd );
         --
      end if;
      --
   else
      --
      vv_mensagem_log := ev_descr_item || '"Tipo de Imposto" não informado.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 3;
   --
   if nvl(est_row_imp_itemsc.dm_tipo,0) not in (0, 1) then
      --
      vv_mensagem_log := ev_descr_item || ', Imposto ' || vv_tipoimp_sigla || ', "Tipo" informado (' || est_row_imp_itemsc.dm_tipo || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if trim(ev_cod_st) is not null then
      --
      vn_fase := 4.1;
      --
      est_row_imp_itemsc.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => trim(ev_cod_st)
                                                          , en_tipoimp_id  => est_row_imp_itemsc.tipoimp_id );
      --
      vn_fase := 4.2;
      --
      if nvl(est_row_imp_itemsc.codst_id,0) <= 0 then
         --
         vv_mensagem_log := ev_descr_item || ', Imposto ' || vv_tipoimp_sigla || ', "Código de Situação Tributária" informado (' || ev_cod_st || ') está inválido.';
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => gv_resumo_log
                          , en_tipo_log                  => erro_de_validacao
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
         pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                             );
         --
      end if;
      --
   end if;
   --
   vn_fase := 5;
   --
   begin 
      select ii.perc_reduc
           , ii.vl_base_calc
           , ii.aliq_apli
           , ii.vl_imp_trib
        into vn_perc_reduc
           , vn_vl_base_calc
           , vn_aliq_apli
           , vn_vl_imp_trib
        from solic_calc       sc
           , nota_fiscal      nf  
           , item_nota_fiscal tnf  
           , imp_itemnf       ii
       where sc.id            = en_soliccalc_id 
         and nf.empresa_id    = sc.empresa_id 
         and nf.dm_ind_emit   = sc.dm_ind_emit
         and nf.dm_ind_oper   = sc.dm_ind_oper
         and nf.modfiscal_id  = sc.modfiscal_id
         and nf.serie         = sc.serie
         and nf.nro_nf        = sc.numero
         and nf.dt_emiss      = sc.dt_emiss
         and tnf.notafiscal_id = nf.id
         and ii.itemnf_id      = tnf.id            
         and ii.tipoimp_id    = est_row_imp_itemsc.tipoimp_id
         and ii.dm_tipo       = est_row_imp_itemsc.dm_tipo;
   exception
      when others then
         vn_perc_reduc   := est_row_imp_itemsc.perc_reduc; 
         vn_vl_base_calc := est_row_imp_itemsc.vl_base_calc;
         vn_aliq_apli    := est_row_imp_itemsc.aliq_apli;
         vn_vl_imp_trib  := est_row_imp_itemsc.vl_imp_trib;         
   end;
   -- Se o valor do dominio for nulo ou zero mas o campo perc_reduc for maior q zero a rotina 
   -- irá carregar o dominio com valor "1" para manter a base de cálculo reduzida, a aliquota e o valor do imposto
   if nvl(est_row_imp_itemsc.dm_manter_bc_int,0) = 0 and
      nvl(vn_perc_reduc,0) > 0 then
      --
      vn_fase := 5.1;
      --
      est_row_imp_itemsc.dm_manter_bc_int := 1;
      est_row_imp_itemsc.memoria          := 'Foi mantida a base de cálculo, a aliquota '||
                                             'e o valor do imposto integrado, devido a parametrizacao "DM_MANTER_BC_INT"';
      --
      vn_fase := 5.2;
      --
   elsif nvl(est_row_imp_itemsc.dm_manter_bc_int,0) not in (0,1) then
      --
      vv_mensagem_log := ev_descr_item || ', O valor do domínio "dm_manter_bc_int" informado (' || ev_cod_st || ') está inválido. '||
                                          ' Valor esperado "0" ou "1"';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => informacao
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_imp_itemsc.itemsoliccalc_id,0) > 0
      and nvl(est_row_imp_itemsc.tipoimp_id,0) > 0
      and nvl(est_row_imp_itemsc.dm_tipo, 0) in (0, 1)
      then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_imp_itemsc.id,0) <= 0 then
         --
         vn_fase := 99.2;
         --
         select impitemsc_seq.nextval
           into est_row_imp_itemsc.id
           from dual;
         --
         vn_fase := 99.3;
         --
         insert into imp_itemsc ( id
                                , itemsoliccalc_id
                                , tipoimp_id
                                , dm_tipo
                                , codst_id
                                , vl_base_calc
                                , aliq_apli
                                , vl_imp_trib
                                , perc_reduc
                                , perc_adic
                                , qtde_base_calc_prod
                                , vl_aliq_prod
                                , vl_bc_st_ret
                                , vl_icmsst_ret
                                , vl_bc_st_dest
                                , vl_icmsst_dest
                                , vl_imp_nao_dest
                                , vl_icms_deson
                                , vl_icms_oper
                                , percent_difer
                                , vl_icms_difer
                                , memoria
                                , dm_manter_bc_int
                                )
                         values ( est_row_imp_itemsc.id
                                , est_row_imp_itemsc.itemsoliccalc_id
                                , est_row_imp_itemsc.tipoimp_id
                                , est_row_imp_itemsc.dm_tipo
                                , est_row_imp_itemsc.codst_id
                                , vn_vl_base_calc
                                , vn_aliq_apli
                                , vn_vl_imp_trib
                                , vn_perc_reduc
                                , est_row_imp_itemsc.perc_adic
                                , est_row_imp_itemsc.qtde_base_calc_prod
                                , est_row_imp_itemsc.vl_aliq_prod
                                , est_row_imp_itemsc.vl_bc_st_ret
                                , est_row_imp_itemsc.vl_icmsst_ret
                                , est_row_imp_itemsc.vl_bc_st_dest
                                , est_row_imp_itemsc.vl_icmsst_dest
                                , est_row_imp_itemsc.vl_imp_nao_dest
                                , est_row_imp_itemsc.vl_icms_deson
                                , est_row_imp_itemsc.vl_icms_oper
                                , est_row_imp_itemsc.percent_difer
                                , est_row_imp_itemsc.vl_icms_difer
                                , est_row_imp_itemsc.memoria
                                , est_row_imp_itemsc.dm_manter_bc_int
                                );
         --
      else
         --
         vn_fase := 99.4;
         --
         update imp_itemsc set itemsoliccalc_id     = est_row_imp_itemsc.itemsoliccalc_id
                             , tipoimp_id           = est_row_imp_itemsc.tipoimp_id
                             , dm_tipo              = est_row_imp_itemsc.dm_tipo
                             , codst_id             = est_row_imp_itemsc.codst_id
                             , vl_base_calc         = vn_vl_base_calc
                             , aliq_apli            = vn_aliq_apli
                             , vl_imp_trib          = vn_vl_imp_trib
                             , perc_reduc           = vn_perc_reduc
                             , perc_adic            = est_row_imp_itemsc.perc_adic
                             , qtde_base_calc_prod  = est_row_imp_itemsc.qtde_base_calc_prod
                             , vl_aliq_prod         = est_row_imp_itemsc.vl_aliq_prod
                             , vl_bc_st_ret         = est_row_imp_itemsc.vl_bc_st_ret
                             , vl_icmsst_ret        = est_row_imp_itemsc.vl_icmsst_ret
                             , vl_bc_st_dest        = est_row_imp_itemsc.vl_bc_st_dest
                             , vl_icmsst_dest       = est_row_imp_itemsc.vl_icmsst_dest
                             , vl_imp_nao_dest      = est_row_imp_itemsc.vl_imp_nao_dest
                             , vl_icms_deson        = est_row_imp_itemsc.vl_icms_deson
                             , vl_icms_oper         = est_row_imp_itemsc.vl_icms_oper
                             , percent_difer        = est_row_imp_itemsc.percent_difer
                             , vl_icms_difer        = est_row_imp_itemsc.vl_icms_difer
                             , memoria              = est_row_imp_itemsc.memoria
                             , dm_manter_bc_int     = est_row_imp_itemsc.dm_manter_bc_int
          where id = est_row_imp_itemsc.id;
         --
      end if;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_imp_itemsc fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
end pkb_integr_imp_itemsc;

-------------------------------------------------------------------------------------------------------

-- Procedimento que faz a validação e gravação dos dados na tabela PART_ICMS_SOLIC_CALC
procedure pkb_integr_part_icms_sc ( est_log_generico_calcfiscal   in out nocopy  dbms_sql.number_table
                                  , est_row_part_icms_solic_calc  in out nocopy  part_icms_solic_calc%rowtype
                                  , en_empresa_id                 in             empresa.id%type
                                  , en_soliccalc_id               in             solic_calc.id%type
                                  , ev_descr_item                 in             varchar2
                                  )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(est_row_part_icms_solic_calc.itemsoliccalc_id,0) <= 0 then
      --
      vv_mensagem_log := ev_descr_item || 'Não informado o Item da Solicitação de Calculo para relacionar a Partilha de ICMS.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 99;
   --
   est_row_part_icms_solic_calc.vl_bc_uf_dest           := nvl(est_row_part_icms_solic_calc.vl_bc_uf_dest,0);
   est_row_part_icms_solic_calc.perc_icms_uf_dest       := nvl(est_row_part_icms_solic_calc.perc_icms_uf_dest,0);
   est_row_part_icms_solic_calc.perc_icms_inter         := nvl(est_row_part_icms_solic_calc.perc_icms_inter,0);
   est_row_part_icms_solic_calc.perc_icms_inter_part    := nvl(est_row_part_icms_solic_calc.perc_icms_inter_part,0);
   est_row_part_icms_solic_calc.vl_icms_uf_dest         := nvl(est_row_part_icms_solic_calc.vl_icms_uf_dest,0);
   est_row_part_icms_solic_calc.vl_icms_uf_remet        := nvl(est_row_part_icms_solic_calc.vl_icms_uf_remet,0);
   est_row_part_icms_solic_calc.perc_comb_pobr_uf_dest  := nvl(est_row_part_icms_solic_calc.perc_comb_pobr_uf_dest,0);
   est_row_part_icms_solic_calc.vl_comb_pobr_uf_dest    := nvl(est_row_part_icms_solic_calc.vl_comb_pobr_uf_dest,0);
   --
   vn_fase := 99.1;
   --
   if nvl(est_row_part_icms_solic_calc.itemsoliccalc_id,0) > 0 then
      --
      vn_fase := 99.2;
      --
      if nvl(est_row_part_icms_solic_calc.id,0) <= 0 then
         --
         vn_fase := 99.3;
         --
         select particmssoliccalc_seq.nextval
           into est_row_part_icms_solic_calc.id
           from dual;
         --
         vn_fase := 99.4;
         --
         insert into part_icms_solic_calc ( id
                                          , itemsoliccalc_id
                                          , vl_bc_uf_dest
                                          , perc_icms_uf_dest
                                          , perc_icms_inter
                                          , perc_icms_inter_part
                                          , vl_icms_uf_dest
                                          , vl_icms_uf_remet
                                          , perc_comb_pobr_uf_dest
                                          , vl_comb_pobr_uf_dest
                                          , memoria
                                          )
                                   values ( est_row_part_icms_solic_calc.id
                                          , est_row_part_icms_solic_calc.itemsoliccalc_id
                                          , est_row_part_icms_solic_calc.vl_bc_uf_dest
                                          , est_row_part_icms_solic_calc.perc_icms_uf_dest
                                          , est_row_part_icms_solic_calc.perc_icms_inter
                                          , est_row_part_icms_solic_calc.perc_icms_inter_part
                                          , est_row_part_icms_solic_calc.vl_icms_uf_dest
                                          , est_row_part_icms_solic_calc.vl_icms_uf_remet
                                          , est_row_part_icms_solic_calc.perc_comb_pobr_uf_dest
                                          , est_row_part_icms_solic_calc.vl_comb_pobr_uf_dest
                                          , est_row_part_icms_solic_calc.memoria
                                          );
         --
      else
         --
         vn_fase := 99.5;
         --
         update part_icms_solic_calc set itemsoliccalc_id        = est_row_part_icms_solic_calc.itemsoliccalc_id
                                       , vl_bc_uf_dest           = est_row_part_icms_solic_calc.vl_bc_uf_dest
                                       , perc_icms_uf_dest       = est_row_part_icms_solic_calc.perc_icms_uf_dest
                                       , perc_icms_inter         = est_row_part_icms_solic_calc.perc_icms_inter
                                       , perc_icms_inter_part    = est_row_part_icms_solic_calc.perc_icms_inter_part
                                       , vl_icms_uf_dest         = est_row_part_icms_solic_calc.vl_icms_uf_dest
                                       , vl_icms_uf_remet        = est_row_part_icms_solic_calc.vl_icms_uf_remet
                                       , perc_comb_pobr_uf_dest  = est_row_part_icms_solic_calc.perc_comb_pobr_uf_dest
                                       , vl_comb_pobr_uf_dest    = est_row_part_icms_solic_calc.vl_comb_pobr_uf_dest
                                       , memoria                 = est_row_part_icms_solic_calc.memoria
          where id = est_row_part_icms_solic_calc.id;
         --
      end if;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_part_icms_sc fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
end pkb_integr_part_icms_sc;

-------------------------------------------------------------------------------------------------------

-- Procedimento que faz a validação e gravação dos dados na tabela ITEM_SOLIC_CALC
procedure pkb_integr_logcalcfiscal ( est_log_generico_calcfiscal   in out nocopy  dbms_sql.number_table
                                   , est_row_loggenericocalcfiscal in out nocopy  log_generico_calcfiscal%rowtype
                                   , en_empresa_id                 in             empresa.id%type
                                   )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
begin
   --
   vn_fase := 1;
   --
   est_row_loggenericocalcfiscal.id := pk_csf_calc_fiscal.fkg_loggenericocalcfiscal_id ( en_referencia_id => est_row_loggenericocalcfiscal.referencia_id
                                                                                       , ev_mensagem      => est_row_loggenericocalcfiscal.id
                                                                                       );
   --
   vn_fase := 2;
   --
   if trim(est_row_loggenericocalcfiscal.mensagem) is not null then
      --
      vv_mensagem_log := 'Não existe informação para integrar o LOG_GENERICO_CALCFISCAL';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => est_row_loggenericocalcfiscal.referencia_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 99;
   --
   if trim(est_row_loggenericocalcfiscal.mensagem) is not null then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_loggenericocalcfiscal.id,0) = 0 then
         --
         select loggenericocalcfiscal_seq.nextval
           into est_row_loggenericocalcfiscal.id
           from dual;
         --
         insert into log_generico_calcfiscal ( id
                                             , processo_id
                                             , dt_hr_log
                                             , referencia_id
                                             , obj_referencia
                                             , resumo
                                             , dm_impressa
                                             , dm_env_email
                                             , csftipolog_id
                                             , empresa_id
                                             , mensagem )
                                       values( est_row_loggenericocalcfiscal.id
                                             , est_row_loggenericocalcfiscal.processo_id
                                             , est_row_loggenericocalcfiscal.dt_hr_log
                                             , est_row_loggenericocalcfiscal.referencia_id
                                             , est_row_loggenericocalcfiscal.obj_referencia
                                             , est_row_loggenericocalcfiscal.resumo
                                             , est_row_loggenericocalcfiscal.dm_impressa
                                             , est_row_loggenericocalcfiscal.dm_env_email
                                             , est_row_loggenericocalcfiscal.csftipolog_id
                                             , en_empresa_id
                                             , est_row_loggenericocalcfiscal.mensagem );
         --
      else
         --
         update log_generico_calcfiscal
            set processo_id     = est_row_loggenericocalcfiscal.processo_id
              , dt_hr_log       = est_row_loggenericocalcfiscal.dt_hr_log
              , referencia_id   = est_row_loggenericocalcfiscal.referencia_id
              , obj_referencia  = est_row_loggenericocalcfiscal.obj_referencia
              , resumo          = est_row_loggenericocalcfiscal.resumo
              , dm_impressa     = est_row_loggenericocalcfiscal.dm_impressa
              , dm_env_email    = est_row_loggenericocalcfiscal.dm_env_email
              , csftipolog_id   = est_row_loggenericocalcfiscal.csftipolog_id
              , empresa_id      = en_empresa_id
              , mensagem        = est_row_loggenericocalcfiscal.mensagem
         where id               = est_row_loggenericocalcfiscal.id;
         --
      end if;
      --
      commit;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_logcalcfiscal fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => est_row_loggenericocalcfiscal.referencia_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
end pkb_integr_logcalcfiscal;

-------------------------------------------------------------------------------------------------------

-- Procedimento que faz a validação e gravação dos dados na tabela ITEM_SOLIC_CALC
procedure pkb_integr_item_solic_calc ( est_log_generico_calcfiscal   in out nocopy  dbms_sql.number_table
                                     , est_row_item_solic_calc       in out nocopy  item_solic_calc%rowtype
                                     , en_empresa_id                 in             empresa.id%type
                                     )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_cfop_id            cfop.id%type;
   vv_descr_item         varchar2(200);
   --
begin
   --
   vn_fase := 1;
   --
   vv_descr_item := est_row_item_solic_calc.cod_item || '-' || est_row_item_solic_calc.descr_item || ', ';
   --
   if nvl(est_row_item_solic_calc.soliccalc_id,0) <= 0 then
      --
      vv_mensagem_log := vv_descr_item || 'Não informada a Solicitação de Calculo para relacionar ao item.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => est_row_item_solic_calc.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 2;
   --
   if nvl(est_row_item_solic_calc.nro_item,0) <= 0 then
      --
      vv_mensagem_log := vv_descr_item || 'Número do Item informado (' || est_row_item_solic_calc.nro_item || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_item_solic_calc.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 3;
   --
   vn_cfop_id := pk_csf.fkg_cfop_id ( en_cd => est_row_item_solic_calc.cfop );
   --
   vn_fase := 3.1;
   --
   if nvl(vn_cfop_id,0) <= 0
      and est_row_item_solic_calc.cfop is not null
      then
      --
      vv_mensagem_log := vv_descr_item || 'CFOP informado (' || est_row_item_solic_calc.cfop || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_item_solic_calc.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 3.2;
   --
   if est_row_item_solic_calc.cfop is null then
      --
      vv_mensagem_log := vv_descr_item || 'CFOP não informado.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_item_solic_calc.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_item_solic_calc.dm_tipo_item,0) not in (1, 2) then
      --
      vv_mensagem_log := vv_descr_item || 'Tipo de Item informado (' || est_row_item_solic_calc.dm_tipo_item || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_item_solic_calc.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_item_solic_calc.dm_tipo_item := 1;
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_item_solic_calc.dm_ind_tot,0) not in (0, 1) then
      --
      vv_mensagem_log := vv_descr_item || 'Indicador de valor do item entra no valor total do Documento Fiscal informado (' || est_row_item_solic_calc.dm_ind_tot || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_item_solic_calc.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_item_solic_calc.dm_ind_tot := 1;
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_item_solic_calc.soliccalc_id,0) > 0
      and nvl(est_row_item_solic_calc.nro_item,0) > 0
      and est_row_item_solic_calc.cfop is not null
      and nvl(est_row_item_solic_calc.dm_tipo_item,0) in (1, 2)
      and nvl(est_row_item_solic_calc.dm_ind_tot,0) in (0, 1)
      then
      --
      vn_fase := 99.1;
      --
      if nvl(est_row_item_solic_calc.id,0) <= 0 then
         --
         vn_fase := 99.2;
         --
         select itemsoliccalc_seq.nextval
           into est_row_item_solic_calc.id
           from dual;
         --
         vn_fase := 99.3;
         --
         insert into item_solic_calc ( id
                                     , soliccalc_id
                                     , nro_item
                                     , cod_item
                                     , descr_item
                                     , cod_ncm
                                     , extipi
                                     , cod_cest
                                     , dm_orig_merc
                                     , cfop
                                     , cd_lista_serv
                                     , dm_tipo_item
                                     , unid_med
                                     , qtde
                                     , vl_unit
                                     , vl_bruto
                                     , vl_desc
                                     , vl_frete
                                     , vl_seguro
                                     , vl_outro
                                     , vl_bc_ii
                                     , vl_desp_adu
                                     , vl_ii
                                     , vl_iof
                                     , dm_ind_tot
                                     , ibge_cid_serv_prest
                                     , vl_desc_incondicionado
                                     , vl_desc_condicionado
                                     , vl_deducao
                                     , vl_outra_ret
                                     , dm_nat_oper_serv
                                     , vl_tot_trib_item
                                     , dm_mod_base_calc
                                     , dm_mod_base_calc_st
                                     , dm_mot_des_icms
                                     , cl_enq_ipi
                                     , cod_selo_ipi
                                     , qtde_selo_ipi
                                     , cod_enq_ipi
                                     , vl_operacao
                                     , cod_trib_municipio
                                     )
                              values ( est_row_item_solic_calc.id
                                     , est_row_item_solic_calc.soliccalc_id
                                     , est_row_item_solic_calc.nro_item
                                     , est_row_item_solic_calc.cod_item
                                     , est_row_item_solic_calc.descr_item
                                     , est_row_item_solic_calc.cod_ncm
                                     , est_row_item_solic_calc.extipi
                                     , est_row_item_solic_calc.cod_cest
                                     , est_row_item_solic_calc.dm_orig_merc
                                     , est_row_item_solic_calc.cfop
                                     , est_row_item_solic_calc.cd_lista_serv
                                     , est_row_item_solic_calc.dm_tipo_item
                                     , est_row_item_solic_calc.unid_med
                                     , est_row_item_solic_calc.qtde
                                     , est_row_item_solic_calc.vl_unit
                                     , est_row_item_solic_calc.vl_bruto
                                     , est_row_item_solic_calc.vl_desc
                                     , est_row_item_solic_calc.vl_frete
                                     , est_row_item_solic_calc.vl_seguro
                                     , est_row_item_solic_calc.vl_outro
                                     , est_row_item_solic_calc.vl_bc_ii
                                     , est_row_item_solic_calc.vl_desp_adu
                                     , est_row_item_solic_calc.vl_ii
                                     , est_row_item_solic_calc.vl_iof
                                     , est_row_item_solic_calc.dm_ind_tot
                                     , est_row_item_solic_calc.ibge_cid_serv_prest
                                     , est_row_item_solic_calc.vl_desc_incondicionado
                                     , est_row_item_solic_calc.vl_desc_condicionado
                                     , est_row_item_solic_calc.vl_deducao
                                     , est_row_item_solic_calc.vl_outra_ret
                                     , est_row_item_solic_calc.dm_nat_oper_serv
                                     , est_row_item_solic_calc.vl_tot_trib_item
                                     , est_row_item_solic_calc.dm_mod_base_calc
                                     , est_row_item_solic_calc.dm_mod_base_calc_st
                                     , est_row_item_solic_calc.dm_mot_des_icms
                                     , est_row_item_solic_calc.cl_enq_ipi
                                     , est_row_item_solic_calc.cod_selo_ipi
                                     , est_row_item_solic_calc.qtde_selo_ipi
                                     , est_row_item_solic_calc.cod_enq_ipi
                                     , est_row_item_solic_calc.vl_operacao
                                     , est_row_item_solic_calc.cod_trib_municipio
                                     );
         --
      else
         --
         vn_fase := 99.4;
         --
         update item_solic_calc set soliccalc_id            = est_row_item_solic_calc.soliccalc_id
                                  , nro_item                = est_row_item_solic_calc.nro_item
                                  , cod_item                = est_row_item_solic_calc.cod_item
                                  , descr_item              = est_row_item_solic_calc.descr_item
                                  , cod_ncm                 = est_row_item_solic_calc.cod_ncm
                                  , extipi                  = est_row_item_solic_calc.extipi
                                  , cod_cest                = est_row_item_solic_calc.cod_cest
                                  , dm_orig_merc            = est_row_item_solic_calc.dm_orig_merc
                                  , cfop                    = est_row_item_solic_calc.cfop
                                  , cd_lista_serv           = est_row_item_solic_calc.cd_lista_serv
                                  , dm_tipo_item            = est_row_item_solic_calc.dm_tipo_item
                                  , unid_med                = est_row_item_solic_calc.unid_med
                                  , qtde                    = est_row_item_solic_calc.qtde
                                  , vl_unit                 = est_row_item_solic_calc.vl_unit
                                  , vl_bruto                = est_row_item_solic_calc.vl_bruto
                                  , vl_desc                 = est_row_item_solic_calc.vl_desc
                                  , vl_frete                = est_row_item_solic_calc.vl_frete
                                  , vl_seguro               = est_row_item_solic_calc.vl_seguro
                                  , vl_outro                = est_row_item_solic_calc.vl_outro
                                  , vl_bc_ii                = est_row_item_solic_calc.vl_bc_ii
                                  , vl_desp_adu             = est_row_item_solic_calc.vl_desp_adu
                                  , vl_ii                   = est_row_item_solic_calc.vl_ii
                                  , vl_iof                  = est_row_item_solic_calc.vl_iof
                                  , dm_ind_tot              = est_row_item_solic_calc.dm_ind_tot
                                  , ibge_cid_serv_prest     = est_row_item_solic_calc.ibge_cid_serv_prest
                                  , vl_desc_incondicionado  = est_row_item_solic_calc.vl_desc_incondicionado
                                  , vl_desc_condicionado    = est_row_item_solic_calc.vl_desc_condicionado
                                  , vl_deducao              = est_row_item_solic_calc.vl_deducao
                                  , vl_outra_ret            = est_row_item_solic_calc.vl_outra_ret
                                  , dm_nat_oper_serv        = est_row_item_solic_calc.dm_nat_oper_serv
                                  , vl_tot_trib_item        = est_row_item_solic_calc.vl_tot_trib_item
                                  , dm_mod_base_calc        = est_row_item_solic_calc.dm_mod_base_calc
                                  , dm_mod_base_calc_st     = est_row_item_solic_calc.dm_mod_base_calc_st
                                  , dm_mot_des_icms         = est_row_item_solic_calc.dm_mot_des_icms
                                  , cl_enq_ipi              = est_row_item_solic_calc.cl_enq_ipi
                                  , cod_selo_ipi            = est_row_item_solic_calc.cod_selo_ipi
                                  , qtde_selo_ipi           = est_row_item_solic_calc.qtde_selo_ipi
                                  , cod_enq_ipi             = est_row_item_solic_calc.cod_enq_ipi
                                  , vl_operacao             = est_row_item_solic_calc.vl_operacao
                                  , cod_trib_municipio      = est_row_item_solic_calc.cod_trib_municipio
          where id = est_row_item_solic_calc.id;
         --
      end if;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_item_solic_calc fase(' || vn_fase || '): ' || sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => est_row_item_solic_calc.soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
end pkb_integr_item_solic_calc;

-------------------------------------------------------------------------------------------------------

-- Procedimento que faz a validação e gravação dos dados na tabela SOLIC_CALC
procedure pkb_integr_solic_calc ( est_log_generico_calcfiscal   in out nocopy  dbms_sql.number_table
                                , est_row_solic_calc            in out nocopy  solic_calc%rowtype
                                , ev_cod_nat                    in             nat_oper.cod_nat%type
                                , ev_cod_mod                    in             mod_fiscal.cod_mod%type
                                , ev_sigla_estado_part          in             estado.sigla_estado%type
                                )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_natoper_id                nat_oper.id%type;
   vv_descr_nat                 nat_oper.descr_nat%type;
   vn_multorg_id                mult_org.id%type;
   vn_dm_situacao_empresa       empresa.dm_situacao%type;
   --
begin
   --
   vn_fase := 1;
   -- Define o cabeçalho do log
   --
   vn_multorg_id := pk_csf.fkg_multorg_id_empresa ( en_empresa_id => est_row_solic_calc.empresa_id );
   --
   vn_fase := 1.1;
   --
   vn_natoper_id := pk_csf.fkg_natoper_id_cod_nat ( ev_cod_nat    => trim(ev_cod_nat)
                                                  , en_multorg_id => vn_multorg_id
                                                  );
   --
   vn_fase := 1.2;
   --
   est_row_solic_calc.modfiscal_id := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => trim ( ev_cod_mod ) );
   --
   vn_fase := 1.3;
   --
   est_row_solic_calc.estado_id := pk_csf.fkg_Estado_id ( ev_sigla_estado => trim(ev_sigla_estado_part) );
   --
   vn_fase := 1.4;
   --
   gv_resumo_log := null;
   --
   if nvl(vn_natoper_id,0) > 0 then
      --
      begin
         --
         select descr_nat
           into vv_descr_nat
           from nat_oper
          where id = vn_natoper_id;
         --
      exception
         when others then
            vv_descr_nat := null;
      end;
      --
      gv_resumo_log := gv_resumo_log || 'Natureza da operação: ' || ev_cod_nat || '-' || vv_descr_nat || chr(13);
      --
   end if;
   --
   vn_fase := 1.5;
   --
   gv_resumo_log := gv_resumo_log || 'Emitente: ' || pk_csf.fkg_dominio ( ev_dominio   => 'SOLIC_CALC.DM_IND_EMIT'
                                                                        , ev_vl        => est_row_solic_calc.dm_ind_emit
                                                                        ) || chr(13);
   --
   vn_fase := 1.6;
   --
   gv_resumo_log := gv_resumo_log || 'Operação: ' || pk_csf.fkg_dominio ( ev_dominio   => 'SOLIC_CALC.DM_IND_OPER'
                                                                        , ev_vl        => est_row_solic_calc.dm_ind_oper
                                                                        ) || chr(13);
   --
   vn_fase := 1.7;
   --
   gv_resumo_log := gv_resumo_log || 'Modelo Fiscal: ' || ev_cod_mod || chr(13);
   --
   if trim(est_row_solic_calc.serie) is not null then
      gv_resumo_log := gv_resumo_log || 'Série: ' || est_row_solic_calc.serie || chr(13);
   end if;
   --
   gv_resumo_log := gv_resumo_log || 'Número: ' || est_row_solic_calc.numero || chr(13);
   --
   est_row_solic_calc.dt_emiss := nvl(est_row_solic_calc.dt_emiss, sysdate);
   --
   gv_resumo_log := gv_resumo_log || 'Data Emissão: ' || to_char(est_row_solic_calc.dt_emiss, 'dd/mm/rrrr') || chr(13);
   --
   vn_fase := 1.8;
   --
   if trim(est_row_solic_calc.cpf_cnpj_part) is not null then
      gv_resumo_log := gv_resumo_log || 'CPF ou CNPJ do Participante: ' || est_row_solic_calc.cpf_cnpj_part || chr(13);
   end if;
   --
   gv_resumo_log := gv_resumo_log || 'UF do Participante: ' || ev_sigla_estado_part || chr(13);
   --
   vn_fase := 1.9;
   --
   if nvl(est_row_solic_calc.id,0) <= 0 then
      --
      select soliccalc_seq.nextval
        into est_row_solic_calc.id
        from dual;
      --
   end if;
   --
   vn_fase := 2;
   --
   vn_dm_situacao_empresa := pk_csf.fkg_empresa_id_situacao ( en_empresa_id => est_row_solic_calc.empresa_id );
   --
   if nvl(vn_dm_situacao_empresa,0) = 0 then -- Empresa Inativa
      --
      vv_mensagem_log := 'Empresa esta inativa no sistema!';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 3;
   --
   if nvl(vn_natoper_id,0) <= 0 
      and trim(ev_cod_nat) is not null
      then
      --
      vv_mensagem_log := 'Natureza da Operação informada (' || ev_cod_nat || ') está inválida.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_solic_calc.dm_ind_emit,-1) not in (0, 1) then
      --
      vv_mensagem_log := 'Indicador do Emitente informado (' || est_row_solic_calc.dm_ind_emit || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_solic_calc.dm_ind_oper,-1) not in (0, 1) then
      --
      vv_mensagem_log := 'Indicador da Operação informado (' || est_row_solic_calc.dm_ind_oper || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 6;
   --
   if nvl(est_row_solic_calc.modfiscal_id,0) <= 0 
      and trim ( ev_cod_mod ) is not null
      then
      --
      vv_mensagem_log := 'Modelo Fiscal informado (' || ev_cod_mod || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 7;
   --
   if ev_cod_mod not in ('99','ND') and length(trim(est_row_solic_calc.numero)) > 9 then
      --
      vv_mensagem_log := '"Número da Nota Fiscal" ('||nvl(est_row_solic_calc.numero,0)||') não pode ter mais do que 9 dígitos.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   -- 
   vn_fase := 7.1;
   --   
   est_row_solic_calc.numero := nvl(est_row_solic_calc.numero,0);
   --
   vn_fase := 8;
   --
   if nvl(est_row_solic_calc.estado_id,0) <= 0
      and trim(ev_sigla_estado_part) is not null
      then
      --
      vv_mensagem_log := 'UF do Participante informado (' || ev_sigla_estado_part || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
   end if;
   --
   vn_fase := 9;
   --
   if nvl(est_row_solic_calc.dm_tipo_part,0) not in (1, 2) then
      --
      vv_mensagem_log := 'Tipo do Participante informado (' || est_row_solic_calc.dm_tipo_part || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_solic_calc.dm_tipo_part := 1;
      --
   end if;
   --
   vn_fase := 10;
   --
   -- Onde: dm_cons_final => nota_fiscal.dm_ind_final
   if nvl(est_row_solic_calc.dm_cons_final, -1) not in (0, 1, 2, 3, 4, 5, 6, 7) then
      --
      vv_mensagem_log := 'Indicador de Calculo para Consumidor Final informado (' || est_row_solic_calc.dm_cons_final || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_solic_calc.dm_cons_final := 0;
      --
   end if;
   --
   vn_fase := 11;
   --
   if nvl(est_row_solic_calc.dm_ind_ie_part,0) not in (1, 2, 9) then
      --
      vv_mensagem_log := 'Indicador da IE do Participante informado (' || est_row_solic_calc.dm_ind_ie_part || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_solic_calc.dm_ind_ie_part := 1;
      --
   end if;
   --
   vn_fase := 12;
   --
   if nvl(est_row_solic_calc.dm_reg_trib_part,0) not in (1, 2, 3) then
      --
      vv_mensagem_log := 'Regime de Tributacao do Participante informado (' || est_row_solic_calc.dm_reg_trib_part || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_solic_calc.dm_reg_trib_part := 1;
      --
   end if;
   --
   vn_fase := 13;
   --
   if nvl(est_row_solic_calc.dm_part_tem_suframa, -1) not in (0, 1) then
      --
      vv_mensagem_log := 'Participante tem suframa informado (' || est_row_solic_calc.dm_reg_trib_part || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_solic_calc.dm_reg_trib_part := 0;
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_solic_calc.dm_ind_ativ_part,-1) not in (0, 1) then
      --
      vv_mensagem_log := 'Indicador de Atividade do Participante informado (' || est_row_solic_calc.dm_ind_ativ_part || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_solic_calc.dm_ind_ativ_part := 0;
      --
   end if;
   --
   vn_fase := 15;
   --
   if est_row_solic_calc.dm_mot_des_icms_part is not null
      and est_row_solic_calc.dm_mot_des_icms_part not in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 90)
      then
      --
      vv_mensagem_log := 'Motivo da Desoneração do ICMS do Participante informado (' || est_row_solic_calc.dm_mot_des_icms_part || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_solic_calc.dm_mot_des_icms_part := null;
      --
   end if;
   --
   vn_fase := 16;
   --
   if nvl(est_row_solic_calc.dm_calc_icmsst_part,-1) not in (0, 1) then
      --
      vv_mensagem_log := 'Indicador "Calcula ICMS-ST para o Participante" (' || est_row_solic_calc.dm_calc_icmsst_part || ') está inválido.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => gv_resumo_log
                       , en_tipo_log                  => erro_de_validacao
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_solic_calc.dm_calc_icmsst_part := 0;
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(est_log_generico_calcfiscal.count,0) > 0 then
      --
      est_row_solic_calc.dm_situacao := 3; -- Erro
      --
   else
      --
      est_row_solic_calc.dm_situacao := 0; -- Aberto
      --
   end if;
   --
   est_row_solic_calc.dm_st_integr := 16; -- API
   --
   est_row_solic_calc.dt_solic := sysdate;
   --
   vn_fase := 99;
   --
   if est_row_solic_calc.empresa_id is not null
      and est_row_solic_calc.dm_situacao in (0, 1, 2, 3)
      and est_row_solic_calc.dm_st_integr in (0, 1, 2, 7, 15, 16)
      and est_row_solic_calc.dt_solic is not null
      and est_row_solic_calc.dm_ind_emit in (0, 1)
      and est_row_solic_calc.dm_ind_oper in (0, 1)
      and est_row_solic_calc.modfiscal_id is not null
      and est_row_solic_calc.numero is not null
      and est_row_solic_calc.dt_emiss is not null
      and est_row_solic_calc.estado_id is not null
      and est_row_solic_calc.dm_calc_icmsst_part in (0, 1)
      then
      --
      vn_fase := 99.1;
      --
      if pk_csf_calc_fiscal.fkg_existe_solic_calc ( en_soliccalc_id => est_row_solic_calc.id ) = true then
         --
         vn_fase := 99.2;
         --
         update solic_calc set id                    = est_row_solic_calc.id
                             , empresa_id            = est_row_solic_calc.empresa_id
                             , dm_situacao           = est_row_solic_calc.dm_situacao
                             , dm_st_integr          = est_row_solic_calc.dm_st_integr
                             , dt_solic              = est_row_solic_calc.dt_solic
                             , natoper_id            = est_row_solic_calc.natoper_id
                             , dm_ind_emit           = est_row_solic_calc.dm_ind_emit
                             , dm_ind_oper           = est_row_solic_calc.dm_ind_oper
                             , modfiscal_id          = est_row_solic_calc.modfiscal_id
                             , serie                 = est_row_solic_calc.serie
                             , numero                = est_row_solic_calc.numero
                             , dt_emiss              = est_row_solic_calc.dt_emiss
                             , cpf_cnpj_part         = est_row_solic_calc.cpf_cnpj_part
                             , estado_id             = est_row_solic_calc.estado_id
                             , dm_tipo_part          = est_row_solic_calc.dm_tipo_part
                             , dm_cons_final         = est_row_solic_calc.dm_cons_final
                             , dm_ind_ie_part        = est_row_solic_calc.dm_ind_ie_part
                             , dm_reg_trib_part      = est_row_solic_calc.dm_reg_trib_part
                             , dm_part_tem_suframa   = est_row_solic_calc.dm_part_tem_suframa
                             , dm_ind_ativ_part      = est_row_solic_calc.dm_ind_ativ_part
                             , dm_mot_des_icms_part  = est_row_solic_calc.dm_mot_des_icms_part
                             , dm_calc_icmsst_part   = est_row_solic_calc.dm_calc_icmsst_part
          where id = est_row_solic_calc.id;
         --
      else
         --
         vn_fase := 99.3;
         --
         insert into solic_calc ( id
                                , empresa_id
                                , dm_situacao
                                , dm_st_integr
                                , dt_solic
                                , natoper_id
                                , dm_ind_emit
                                , dm_ind_oper
                                , modfiscal_id
                                , serie
                                , numero
                                , dt_emiss
                                , cpf_cnpj_part
                                , estado_id
                                , dm_tipo_part
                                , dm_cons_final
                                , dm_ind_ie_part
                                , dm_reg_trib_part
                                , dm_part_tem_suframa
                                , dm_ind_ativ_part
                                , dm_mot_des_icms_part
                                , dm_calc_icmsst_part
                                )
                         values ( est_row_solic_calc.id
                                , est_row_solic_calc.empresa_id
                                , est_row_solic_calc.dm_situacao
                                , est_row_solic_calc.dm_st_integr
                                , est_row_solic_calc.dt_solic
                                , est_row_solic_calc.natoper_id
                                , est_row_solic_calc.dm_ind_emit
                                , est_row_solic_calc.dm_ind_oper
                                , est_row_solic_calc.modfiscal_id
                                , est_row_solic_calc.serie
                                , est_row_solic_calc.numero
                                , est_row_solic_calc.dt_emiss
                                , est_row_solic_calc.cpf_cnpj_part
                                , est_row_solic_calc.estado_id
                                , est_row_solic_calc.dm_tipo_part
                                , est_row_solic_calc.dm_cons_final
                                , est_row_solic_calc.dm_ind_ie_part
                                , est_row_solic_calc.dm_reg_trib_part
                                , est_row_solic_calc.dm_part_tem_suframa
                                , est_row_solic_calc.dm_ind_ativ_part
                                , est_row_solic_calc.dm_mot_des_icms_part
                                , est_row_solic_calc.dm_calc_icmsst_part
                                );
         --
      end if;
      --
   else
      --
      est_row_solic_calc := null;
      --
   end if;
   --
exception
   when others then
      --
      update solic_calc set dm_situacao = 3
       where id = est_row_solic_calc.id;
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_integr_solic_calc fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => est_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => est_row_solic_calc.empresa_id
                       );
      --
      pkb_gt_log_generico ( en_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , est_log_generico_calcfiscal  => est_log_generico_calcfiscal
                          );
      --
      est_row_solic_calc := null;
      --
end pkb_integr_solic_calc;

-------------------------------------------------------------------------------------------------------

-- Procedimento de Criar os totais da Solicitação de Calculo
procedure pkb_criar_total_sc ( en_soliccalc_id            in  solic_calc.id%type
                             , en_regtrib_cd              in  reg_trib.cd%type
                             , en_empresa_id              in  empresa.id%type
                             )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_total_solic_calc          total_solic_calc%rowtype;
   vt_log_generico_calcfiscal   dbms_sql.number_table;
   --
begin
   --
   vn_fase := 1;
   --
   vt_log_generico_calcfiscal.delete;
   --
   if nvl(en_soliccalc_id,0) > 0 then
      --
      vn_fase := 2;
      --
      vt_total_solic_calc := null;
      --
      vt_total_solic_calc.soliccalc_id := en_soliccalc_id;
      --
      -- soma valores do item da solicitacao de calculo
      begin
         --
         select /*round(sum(decode(isc.dm_ind_tot, 1, isc.vl_bruto, 0)), 2) - (nvl(vt_total_solic_calc.vl_serv_nao_trib,0))*/
                sum(isc.vl_bruto)
              , sum(isc.vl_frete)
              , sum(isc.vl_seguro)
              , sum(isc.vl_desc)
              , sum(isc.vl_outro)
              , sum(isc.vl_tot_trib_item)
           into vt_total_solic_calc.vl_total_item
              , vt_total_solic_calc.vl_frete
              , vt_total_solic_calc.vl_seguro
              , vt_total_solic_calc.vl_desconto
              , vt_total_solic_calc.vl_outra_despesas
              , vt_total_solic_calc.vl_tot_trib
           from item_solic_calc isc
          where isc.soliccalc_id  = en_soliccalc_id;
             --
      exception
         when others then
            vt_total_solic_calc.vl_total_item := 0;
            vt_total_solic_calc.vl_frete := 0;
            vt_total_solic_calc.vl_seguro := 0;
            vt_total_solic_calc.vl_desconto := 0;
            vt_total_solic_calc.vl_outra_despesas := 0;
            vt_total_solic_calc.vl_tot_trib := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(en_regtrib_cd, 0) <> 1 then
         -- Soma valores do ICMS
         begin
            select sum(imp.vl_base_calc)
                 , sum(imp.vl_imp_trib)
              into vt_total_solic_calc.vl_base_calc_icms
                 , vt_total_solic_calc.vl_imp_trib_icms
              from item_solic_calc   isc
                 , imp_itemsc        imp
                 , tipo_imposto      ti
                 , cod_st            cst
             where isc.soliccalc_id      = en_soliccalc_id
               and imp.itemsoliccalc_id  = isc.id
               and imp.dm_tipo           = 0 -- 0-imposto, 1-retenção
               and ti.id                 = imp.tipoimp_id
               and ti.cd                 = 1 -- ICMS
               and cst.id                = imp.codst_id
               and cst.cod_st not in ('30', '40', '41', '50', '60');
         exception
            when others then
               vt_total_solic_calc.vl_base_calc_icms := 0;
               vt_total_solic_calc.vl_imp_trib_icms := 0;
         end;
      --
      else
         -- Soma valores do ICMS para Simples Nacional
         begin
            select sum(imp.vl_base_calc)
                 , sum(imp.vl_imp_trib)
              into vt_total_solic_calc.vl_base_calc_icms
                 , vt_total_solic_calc.vl_imp_trib_icms
              from item_solic_calc   isc
                 , imp_itemsc        imp
                 , tipo_imposto      ti
             where isc.soliccalc_id      = en_soliccalc_id
               and imp.itemsoliccalc_id  = isc.id
               and imp.dm_tipo           = 0 -- 0-imposto, 1-retenção
               and ti.id                 = imp.tipoimp_id
               and ti.cd                 = 1; -- ICMS
         exception
            when others then
               vt_total_solic_calc.vl_base_calc_icms := 0;
               vt_total_solic_calc.vl_imp_trib_icms := 0;
         end;
         --
      end if;
      --
      vn_fase := 4;
      -- soma valores do ICMS-ST
      begin
         select round( sum( decode( sc.dm_ind_emit, 1, nvl(imp_st.vl_base_calc, 0)
                                                     , decode(cst_icms.cod_st, '60', 0, nvl(imp_st.vl_base_calc, 0)) ) ), 2)
              , round( sum( decode( sc.dm_ind_emit, 1, nvl(imp_st.vl_imp_trib, 0)
                                                     , decode(cst_icms.cod_st, '60', 0, nvl(imp_st.vl_imp_trib, 0)) ) ), 2)
           into vt_total_solic_calc.vl_base_calc_st
              , vt_total_solic_calc.vl_imp_trib_st
           from solic_calc        sc
              , item_solic_calc   it
              , imp_itemsc        imp_st
              , tipo_imposto      ti
              , imp_itemsc        imp_icms
              , cod_st            cst_icms
              , tipo_imposto      ti_icms
          where sc.id                     = en_soliccalc_id
            and it.soliccalc_id           = sc.id
            and imp_st.itemsoliccalc_id   = it.id
            and imp_st.dm_tipo            = 0 -- 0-imposto, 1-retenção
            and ti.id                     = imp_st.tipoimp_id
            and ti.cd                     = '2' --ICMS_ST
            and imp_icms.itemsoliccalc_id = it.id
            and imp_icms.dm_tipo          = 0 -- 0-imposto, 1-retenção
            and cst_icms.id               = imp_icms.codst_id
            and ti_icms.id                = imp_icms.tipoimp_id
            and ti_icms.cd        in ( '1' );
      exception
         when others then
            vt_total_solic_calc.vl_base_calc_st := 0;
            vt_total_solic_calc.vl_imp_trib_st := 0;
      end;
      --
      vn_fase := 5;
      --
      if nvl(vt_total_solic_calc.vl_base_calc_st,0) <= 0
         and nvl(vt_total_solic_calc.vl_imp_trib_st,0) <= 0
         then
         --
         begin
            --
            select round(sum(nvl(imp_st.vl_base_calc,0)),2)
                 , round(sum(nvl(imp_st.vl_imp_trib,0)),2)
              into vt_total_solic_calc.vl_base_calc_st
                 , vt_total_solic_calc.vl_imp_trib_st
              from item_solic_calc   it
                 , imp_itemsc        imp_st
                 , tipo_imposto      ti
                 , imp_itemsc        imp_icms
                 , tipo_imposto      ti_icms
             where it.soliccalc_id          = en_soliccalc_id
               and imp_st.itemsoliccalc_id  = it.id
               and imp_st.dm_tipo           = 0 -- 0-imposto, 1-retenção
               and ti.id                    = imp_st.tipoimp_id
               and ti.cd                    = '2' --ICMS_ST
               and it.id                    = imp_icms.itemsoliccalc_id
               and imp_icms.dm_tipo         = 0 -- 0-imposto, 1-retenção
               and nvl(imp_icms.codst_id,0) > 0
               and ti_icms.id               = imp_icms.tipoimp_id
               and ti_icms.cd               = '10'; -- Somente Simples Nacional
            --
         exception
            when others then
               vt_total_solic_calc.vl_base_calc_st    := 0;
               vt_total_solic_calc.vl_imp_trib_st     := 0;
         end;
         --
      end if;
      --
      vn_fase := 6;
      -- soma valores do II
      begin
         --
         select sum(imp.vl_imp_trib)
           into vt_total_solic_calc.vl_imp_trib_ii
           from item_solic_calc   isc
              , imp_itemsc        imp
              , tipo_imposto      ti
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo           = 0 -- 0-imposto, 1-retenção
            and ti.id                 = imp.tipoimp_id
            and ti.cd                 = 7; -- II
         --
      exception
         when others then
            vt_total_solic_calc.vl_imp_trib_ii := 0;
      end;
      --
      vn_fase := 7;
      --
      -- soma valores de IPI
      begin
         select sum(imp.vl_imp_trib)
           into vt_total_solic_calc.vl_imp_trib_ipi
           from item_solic_calc   isc
              , imp_itemsc        imp
              , tipo_imposto      ti
              , cod_st            cst
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo           = 0 -- 0-imposto, 1-retenção
            and ti.id                 = imp.tipoimp_id
            and ti.cd                 = 3 -- IPI
            and cst.id                = imp.codst_id
            and cst.cod_st not in ('02', '03', '04', '05', '51', '52', '53', '54', '55');
      exception
         when others then
            vt_total_solic_calc.vl_imp_trib_ipi := 0;
      end;
      --
      vn_fase := 8;
      -- soma valores de PIS
      begin
         select sum(decode(nvl(isc.cd_lista_serv,0), 0, nvl(imp.vl_imp_trib,0), 0)) -- valor de item produto/mercadoria
              , sum(decode(nvl(isc.cd_lista_serv,0), 0, 0, nvl(imp.vl_imp_trib,0))) -- valor de item serviço
           into vt_total_solic_calc.vl_imp_trib_pis
              , vt_total_solic_calc.vl_pis_iss
           from item_solic_calc   isc
              , imp_itemsc        imp
              , tipo_imposto      ti
              , cod_st            cst
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo           = 0 -- 0-imposto, 1-retenção
            and ti.id                 = imp.tipoimp_id
            and ti.cd                 = 4 -- PIS
            and cst.id                = imp.codst_id
            and cst.cod_st not in ('04', '05', '06', '07', '08', '09', '70', '71', '72', '73', '74', '75');
      exception
         when others then
            vt_total_solic_calc.vl_imp_trib_pis := 0;
            vt_total_solic_calc.vl_pis_iss      := 0;
      end;
      --
      vn_fase := 9;
      -- soma valores de PIS Retido
      begin
         select sum(imp.vl_imp_trib)
           into vt_total_solic_calc.vl_ret_pis
           from item_solic_calc   isc
              , imp_itemsc        imp
              , tipo_imposto      ti
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo           = 1 -- 0-imposto, 1-retenção
            and ti.id                 = imp.tipoimp_id
            and ti.cd                 = 4; -- PIS
      exception
         when others then
            vt_total_solic_calc.vl_ret_pis := 0;
      end;
      --
      vn_fase := 10;
      -- soma valores de COFINS
      begin
         select sum(decode(nvl(isc.cd_lista_serv,0), 0, nvl(imp.vl_imp_trib,0), 0)) -- valor de item produto/mercadoria
              , sum(decode(nvl(isc.cd_lista_serv,0), 0, 0, nvl(imp.vl_imp_trib,0))) -- valor de item serviço
           into vt_total_solic_calc.vl_imp_trib_cofins
              , vt_total_solic_calc.vl_cofins_iss
           from item_solic_calc   isc
              , imp_itemsc        imp
              , tipo_imposto      ti
              , cod_st            cst
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo           = 0 -- 0-imposto, 1-retenção
            and ti.id                 = imp.tipoimp_id
            and ti.cd                 = 5 -- COFINS
            and cst.id                = imp.codst_id
            and cst.cod_st not in ('04', '05', '06', '07', '08', '09', '70', '71', '72', '73', '74', '75');
      exception
         when others then
            vt_total_solic_calc.vl_imp_trib_cofins := 0;
            vt_total_solic_calc.vl_cofins_iss      := 0;
      end;
      --
      vn_fase := 11;
      -- soma valores de COFINS Retido
      begin
         select sum(imp.vl_imp_trib)
           into vt_total_solic_calc.vl_ret_cofins
           from item_solic_calc   isc
              , imp_itemsc        imp
              , tipo_imposto      ti
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo           = 1 -- 0-imposto, 1-retenção
            and ti.id                 = imp.tipoimp_id
            and ti.cd                 = 5; -- COFINS
      exception
         when others then
            vt_total_solic_calc.vl_ret_cofins := 0;
      end;
      --
      vn_fase := 12;
      -- Valor Total dos itens de serviços
      vt_total_solic_calc.vl_serv_nao_trib := 0;
      begin
         select round(sum(it.vl_bruto), 2)
           into vt_total_solic_calc.vl_serv_nao_trib
           from item_solic_calc  it
          where it.soliccalc_id   = en_soliccalc_id
            and it.cd_lista_serv is not null
            and it.dm_tipo_item =2 /*2-SERVICO*/
            and it.dm_ind_tot = 0; /* 0-Valor do item NÃO compõe o valor total*/
      exception
         when others then
            vt_total_solic_calc.vl_serv_nao_trib := 0;
      end;
      --
      vn_fase := 13;
      --
      -- soma valores de ISS
      begin
         select sum(imp.vl_base_calc)
              , sum(imp.vl_imp_trib)
           into vt_total_solic_calc.vl_base_calc_iss
              , vt_total_solic_calc.vl_imp_trib_iss
           from item_solic_calc  isc
              , imp_itemsc       imp
              , tipo_imposto     ti
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo       = 0 -- 0-imposto, 1-retenção
            and ti.id             = imp.tipoimp_id
            and ti.cd             = 6; -- ISS
      exception
         when others then
            vt_total_solic_calc.vl_base_calc_iss := 0;
            vt_total_solic_calc.vl_imp_trib_iss  := 0;
      end;
      --
      vn_fase := 14;
      -- soma valores de ISS Retido
      begin
         select sum(imp.vl_imp_trib)
           into vt_total_solic_calc.vl_ret_iss
           from item_solic_calc  isc
              , imp_itemsc       imp
              , tipo_imposto     ti
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo           = 1 -- 0-imposto, 1-retenção
            and ti.id                 = imp.tipoimp_id
            and ti.cd                 = 6; -- ISS
      exception
         when others then
            vt_total_solic_calc.vl_ret_iss := 0;
      end;
      --
      vn_fase := 15;
      -- Soma da desoneração do ICMS
      begin
         --
         select sum(vl_icms_deson)
           into vt_total_solic_calc.vl_icms_deson
           from imp_itemsc imp
              , item_solic_calc  isc
              , tipo_imposto     ti
              , cod_st           cs
          where isc.soliccalc_id  = en_soliccalc_id
            and isc.id            = imp.itemsoliccalc_id
            and imp.dm_tipo       = 0 -- 0-imposto
            and imp.tipoimp_id    = ti.id
            and ti.cd             = 1
            and imp.codst_id      = cs.id
            and cs.cod_st in ('20', '30', '40', '41', '50', '70', '90'); -- ICMS
         --
      exception
         when others then
            vt_total_solic_calc.vl_icms_deson := 0;
      end;
      --
      vn_fase := 16;
      -- Soma o total da nota fiscal
      vt_total_solic_calc.vl_total_nf := ( nvl(vt_total_solic_calc.vl_total_item,0) - nvl(vt_total_solic_calc.vl_desconto,0) - nvl(vt_total_solic_calc.vl_icms_deson,0) )
                          + nvl(vt_total_solic_calc.vl_imp_trib_st,0)
                          + nvl(vt_total_solic_calc.vl_frete,0)
                          + nvl(vt_total_solic_calc.vl_seguro,0)
                          + nvl(vt_total_solic_calc.vl_outra_despesas,0)
                          + nvl(vt_total_solic_calc.vl_imp_trib_ii,0)
                          + nvl(vt_total_solic_calc.vl_imp_trib_ipi,0)
                          + nvl(vt_total_solic_calc.vl_serv_nao_trib,0);
      --
      vn_fase := 17;
      -- soma valores dos itens de serviço da nota fiscal
      begin
         select sum(isc.vl_bruto)
           into vt_total_solic_calc.vl_total_serv
           from item_solic_calc  isc
          where isc.soliccalc_id  = en_soliccalc_id
            and isc.cd_lista_serv is not null;
      exception
         when others then
            vt_total_solic_calc.vl_total_serv := 0;
      end;
      --
      vn_fase := 18;
      --
      begin
         --
         select sum(vl_deducao)
              , sum(vl_desc_incondicionado)
              , sum(vl_desc_condicionado)
              , sum(vl_outra_ret)
           into vt_total_solic_calc.vl_deducao
              , vt_total_solic_calc.vl_desc_incond
              , vt_total_solic_calc.vl_desc_cond
              , vt_total_solic_calc.vl_outras_ret
           from item_solic_calc  isc
          where isc.soliccalc_id  = en_soliccalc_id;
         --
      exception
         when others then
            vt_total_solic_calc.vl_deducao     := 0;
            vt_total_solic_calc.vl_desc_incond := 0;
            vt_total_solic_calc.vl_desc_cond   := 0;
            vt_total_solic_calc.vl_outras_ret  := 0;
      end;
      --
      vn_fase := 19;
      -- Soma valor do CSLL Retido
      begin
         select sum(imp.vl_imp_trib)
           into vt_total_solic_calc.vl_ret_csll
           from item_solic_calc  isc
              , imp_itemsc       imp
              , tipo_imposto     ti
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo           = 1 -- 0-imposto, 1-retenção
            and ti.id                 = imp.tipoimp_id
            and ti.cd                 = 11; -- CSLL
      exception
         when others then
            vt_total_solic_calc.vl_ret_csll := 0;
      end;
      --
      vn_fase := 20;
      -- Soma valor do IRRF Retido
      begin
         select sum(imp.vl_imp_trib)
           into vt_total_solic_calc.vl_ret_irrf
           from item_solic_calc  isc
              , imp_itemsc       imp
              , tipo_imposto     ti
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo           = 1 -- 0-imposto, 1-retenção
            and ti.id                 = imp.tipoimp_id
            and ti.cd                 = 12; -- IRRF
      exception
         when others then
            vt_total_solic_calc.vl_ret_irrf := 0;
      end;
      --
      vn_fase := 21;
      -- Soma valor do INSS Retido
      begin
         select sum(imp.vl_base_calc)
              , sum(imp.vl_imp_trib)
           into vt_total_solic_calc.vl_base_calc_ret_prev
              , vt_total_solic_calc.vl_ret_prev
           from item_solic_calc  isc
              , imp_itemsc       imp
              , tipo_imposto     ti
          where isc.soliccalc_id      = en_soliccalc_id
            and imp.itemsoliccalc_id  = isc.id
            and imp.dm_tipo           = 1 -- 0-imposto, 1-retenção
            and ti.id                 = imp.tipoimp_id
            and ti.cd                 = 13; -- INSS
      exception
         when others then
            vt_total_solic_calc.vl_base_calc_ret_prev := 0;
            vt_total_solic_calc.vl_ret_prev := 0;
      end;
      --
      vn_fase := 22;
      -- Soma valores de ICMS em Operações Interestaduais de Vendas a Consumidor Final
      begin
         select sum(id.vl_icms_uf_dest)
              , sum(id.vl_icms_uf_remet)
              , sum(id.vl_comb_pobr_uf_dest)
           into vt_total_solic_calc.vl_icms_uf_dest
              , vt_total_solic_calc.vl_icms_uf_remet
              , vt_total_solic_calc.vl_comb_pobr_uf_dest
           from item_solic_calc       isc
              , part_icms_solic_calc  id
          where isc.soliccalc_id     = en_soliccalc_id
            and id.itemsoliccalc_id  = isc.id;
      exception
         when others then
            vt_total_solic_calc.vl_icms_uf_dest        := 0;
            vt_total_solic_calc.vl_icms_uf_remet       := 0;
            vt_total_solic_calc.vl_comb_pobr_uf_dest   := 0;
      end;
      --
      if nvl(vt_total_solic_calc.vl_icms_uf_dest,0) <= 0 then
         vt_total_solic_calc.vl_icms_uf_dest := null;
      end if;
      --
      if nvl(vt_total_solic_calc.vl_icms_uf_remet,0) <= 0 then
         vt_total_solic_calc.vl_icms_uf_remet := null;
      end if;
      --
      if nvl(vt_total_solic_calc.vl_comb_pobr_uf_dest,0) <= 0 then
         vt_total_solic_calc.vl_comb_pobr_uf_dest := null;
      end if;
      --
      vn_fase := 23;
      -- chama API de Total
      pkb_integr_total_solic_calc ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                                  , est_row_total_solic_calc      => vt_total_solic_calc
                                  , en_empresa_id                 => en_empresa_id
                                  );
      --
      commit;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_criar_total_sc fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_criar_total_sc;

-------------------------------------------------------------------------------------------------------

-- Procedimento de retornar valores trabalhados de impostos do Item da Solicitação de Calculo
procedure pkb_retorna_vlr_imp_itemsc ( en_soliccalc_id              in             solic_calc.id%type
                                     , est_item_solic_calc          in out nocopy  item_solic_calc%rowtype
                                     )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_row_solic_calc            solic_calc%rowtype;
   --
   vn_vl_icms_deson             number(15,2);
   vn_vl_imp_trib_st            number(15,2);
   vn_vl_imp_trib_ii            number(15,2);
   vn_vl_imp_trib_ipi           number(15,2);
   vn_vl_serv_nao_trib          number(15,2);
   --
begin
   --
   vn_fase := 1;
   --
   vt_row_solic_calc := null;
   --
   pkb_recup_dados_solic_calc ( en_soliccalc_id            => en_soliccalc_id
                              , st_row_solic_calc          => vt_row_solic_calc
                              );
   --
   vn_fase := 1.1;
   -- Calculo o valor dos tributos do item
   begin
      --
      select sum(imp.vl_imp_trib)
        into est_item_solic_calc.vl_tot_trib_item
        from imp_itemsc imp
       where imp.itemsoliccalc_id = est_item_solic_calc.id
         and imp.dm_tipo = 0;
      --
   exception
      when others then
         est_item_solic_calc.vl_tot_trib_item := 0;
   end;
   --
   vn_fase := 2;
   --
   if trim(est_item_solic_calc.cd_lista_serv) is not null then
      vn_vl_serv_nao_trib := est_item_solic_calc.vl_unit;
   end if;
   --
   vn_fase := 2.1;
   --
   begin
      --
      select sum( case when ti.cd = 1 then nvl(ii.vl_icms_deson,0) else 0 end ) vl_icms_deson
           , sum( case when ti.cd = 2 then nvl(ii.vl_imp_trib,0) else 0 end ) vl_icmsst
           , sum( case when ti.cd = 3 then nvl(ii.vl_imp_trib,0) else 0 end ) vl_ipi
           , sum( case when ti.cd = 7 then nvl(ii.vl_imp_trib,0) else 0 end ) vl_ii
        into vn_vl_icms_deson
           , vn_vl_imp_trib_st
           , vn_vl_imp_trib_ii
           , vn_vl_imp_trib_ipi
        from imp_itemsc    ii
           , tipo_imposto  ti
       where 1 = 1
         and ii.itemsoliccalc_id = est_item_solic_calc.id
         and ii.dm_tipo          = 0
         and ti.id               = ii.tipoimp_id;
      --
   exception
      when others then
         vn_vl_icms_deson   := 0;
         vn_vl_imp_trib_st  := 0;
         vn_vl_imp_trib_ii  := 0;
         vn_vl_imp_trib_ipi := 0;
   end;
   --
   vn_fase := 3;
   -- Calcula o valor da operação
   est_item_solic_calc.vl_operacao := ( nvl(est_item_solic_calc.vl_bruto,0) - nvl(est_item_solic_calc.vl_desc,0) - nvl(vn_vl_icms_deson,0) )
                                      + nvl(vn_vl_imp_trib_st,0)
                                      + nvl(est_item_solic_calc.vl_frete,0)
                                      + nvl(est_item_solic_calc.vl_seguro,0)
                                      + nvl(est_item_solic_calc.vl_outro,0)
                                      + nvl(vn_vl_imp_trib_ii,0)
                                      + nvl(vn_vl_imp_trib_ipi,0)
                                      + nvl(vn_vl_serv_nao_trib,0);
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_retorna_vlr_imp_itemsc fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => vt_row_solic_calc.empresa_id
                       );
      --
end pkb_retorna_vlr_imp_itemsc;

-------------------------------------------------------------------------------------------------------

-- Procedimento de montagem da Observacao Fiscal da Solicitação de Calculo
procedure pkb_monta_sc_infor_adic ( en_soliccalc_id              in solic_calc.id%type
                                  , en_empresa_id                in empresa.id%type
                                  , en_obsfiscal_id              in obs_fiscal.id%type
                                  , ev_obs_compl                 in sc_infor_adic.obs_compl%type
                                  )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_log_generico_calcfiscal   dbms_sql.number_table;
   vt_row_sc_infor_adic         sc_infor_adic%rowtype;
   vt_row_obs_fiscal            obs_fiscal%rowtype;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_soliccalc_id,0) > 0
      and ( nvl(en_obsfiscal_id,0) > 0 or trim(ev_obs_compl) is not null )
      then
      --
      vn_fase := 2;
      --
      vt_log_generico_calcfiscal.delete;
      vt_row_sc_infor_adic := null;
      --
      vn_fase := 2.01;
      --
      vt_row_obs_fiscal := pk_csf_calc_fiscal.fkg_obsfiscal_row ( en_obsfiscal_id => en_obsfiscal_id );
      --
      vn_fase := 2.1;
      -- Verifica se já existe a informação adicional
      if nvl(en_obsfiscal_id,0) > 0 then
         --
         vn_fase := 2.11;
         begin
            --
            select * into vt_row_sc_infor_adic
              from sc_infor_adic
             where 1 = 1
               and soliccalc_id = en_soliccalc_id
               and obsfiscal_id = en_obsfiscal_id;
            --
         exception
            when others then
               vt_row_sc_infor_adic := null;
         end;
         --
      else
         --
         vn_fase := 2.12;
         begin
            --
            select * into vt_row_sc_infor_adic
              from sc_infor_adic
             where 1 = 1
               and soliccalc_id = en_soliccalc_id
               and obsfiscal_id is null;
            --
         exception
            when others then
               vt_row_sc_infor_adic := null;
         end;
         --
      end if;
      --
      vn_fase := 2.3;
      -- caso não achou informação adicional
      if nvl(vt_row_sc_infor_adic.id,0) <= 0 then
         --
         vn_fase := 2.4;
         --
         vt_row_sc_infor_adic.soliccalc_id  := en_soliccalc_id;
         vt_row_sc_infor_adic.obsfiscal_id  := en_obsfiscal_id;
         --
         vn_fase := 2.41;
         --
         if nvl(en_obsfiscal_id,0) > 0 then
            vt_row_sc_infor_adic.texto := vt_row_obs_fiscal.texto;
         else
            vt_row_sc_infor_adic.texto := null;
         end if;
         --
         vn_fase := 2.42;
         --
         vt_row_sc_infor_adic.obs_compl := trim(ev_obs_compl);
         --
      else
         --
         vn_fase := 2.5;
         --
         if trim(vt_row_sc_infor_adic.obs_compl) is not null then
            --
            if trim(ev_obs_compl) is not null then
               vt_row_sc_infor_adic.obs_compl := vt_row_sc_infor_adic.obs_compl || ', ' || trim(ev_obs_compl);
            end if;
            --
         else
            vt_row_sc_infor_adic.obs_compl := trim(ev_obs_compl);
         end if;
         --
      end if;
      --
      vn_fase := 99;
      --
      -- Chama API de Tratar Informações Adicionais
      pkb_integr_sc_infor_adic ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                               , est_row_sc_infor_adic         => vt_row_sc_infor_adic
                               , en_empresa_id                 => en_empresa_id
                               , ev_cod_of                     => vt_row_obs_fiscal.cod_of
                               );
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_monta_sc_infor_adic fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_monta_sc_infor_adic;

-------------------------------------------------------------------------------------------------------

--| Procedimento de recuperar os parâmetros de Retido a nível Global
procedure pkb_recup_param_calc_retido ( en_soliccalc_id              in solic_calc.id%type
                                      , en_empresa_id                in empresa.id%type
                                      , en_cnae_id                   in cnae.id%type
                                      , en_regtrib_id                in reg_trib.id%type
                                      , en_formatrib_id              in forma_trib.id%type
                                      , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                                      , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                                      , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                      , ev_cpf_cnpj_part             in varchar2
                                      , en_dm_tipo_calc              in number -- Tipo do Calculo 0-Normal; 1-Retido
                                      , en_cfop_id                   in cfop.id%type
                                      , en_tiposervico_id            in tipo_servico.id%type
                                      , en_cidade_id                 in cidade.id%type
                                      , en_tipoimposto_id            in tipo_imposto.id%type
                                      --| Retorno do Imposto
                                      , st_row_param_calc_retido     out param_calc_retido%rowtype
                                      )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_qtde_tpparam  number;
   vn_qtde_rtrib    number;
   vn_qtde_ftrib    number;
   vn_qtde_cnae     number;
   vn_qtde_cfop     number;
   vn_qtde_tpserv   number;
   vn_cnae_id       cnae.id%type;
   --
   cursor c_dados is
   select distinct
          p.prioridade
     from param_calc_retido p
    where 1 = 1
      and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
      and p.tipoimposto_id      = en_tipoimposto_id
      and p.cfop_id             = en_cfop_id
    order by p.prioridade;
   --
   -- Procedimento de recuperar parâmetros do Regime Trib
   procedure pkb_recup_param_rtrib ( evc_dm_tipo_param        in param_calc_retido.dm_tipo_param%type
                                   , enc_tiposervico_id       in param_calc_retido.tiposervico_id%type
                                   , enc_cnae_id              in param_calc_retido.cnae_id%type
                                   , enc_formatrib_id         in param_calc_retido.formatrib_id%type
                                   , enc_regtrib_id           in param_calc_retido.regtrib_id%type
                                   )
   is
      --
      cursor c_rtrib is
      select p.*
        from param_calc_retido p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.tipoimposto_id          = en_tipoimposto_id
         and p.cfop_id                 = en_cfop_id
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.tiposervico_id,0)   = nvl(enc_tiposervico_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.formatrib_id,0)     = nvl(enc_formatrib_id,0)
         and nvl(p.regtrib_id,0)       = nvl(enc_regtrib_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 8;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_rtrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                ||' , enc_tiposervico_id: ' || enc_tiposervico_id
                                                ||' , enc_cnae_id: ' || enc_cnae_id
                                                ||' , enc_formatrib_id: ' || enc_formatrib_id
                                                ||' , enc_regtrib_id: ' || enc_regtrib_id
                               );
      commit;*/
      --
      for rec in c_rtrib loop
         exit when c_rtrib%notfound or (c_rtrib%notfound) is null;
         --
         vn_fase := 8.1;
         --
         st_row_param_calc_retido := rec;
         --
         vn_fase := 8.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_retido.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 8.3;
      --
      if nvl(st_row_param_calc_retido.id,0) <= 0
         and nvl(vn_qtde_rtrib,0) > 0
         then
         --
         vn_qtde_rtrib := 0;
         -- Aplica a recursividade para achar com o Forma Trib. NULO
         pkb_recup_param_rtrib ( evc_dm_tipo_param        => evc_dm_tipo_param
                               , enc_tiposervico_id       => enc_tiposervico_id
                               , enc_cnae_id              => enc_cnae_id
                               , enc_formatrib_id         => enc_formatrib_id
                               , enc_regtrib_id           => null
                               );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_rtrib fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_rtrib;
   --
   -- Procedimento de recuperar parâmetros do Forma Trib
   procedure pkb_recup_param_ftrib ( evc_dm_tipo_param        in param_calc_retido.dm_tipo_param%type
                                   , enc_tiposervico_id       in param_calc_retido.tiposervico_id%type
                                   , enc_cnae_id              in param_calc_retido.cnae_id%type
                                   , enc_formatrib_id         in param_calc_retido.formatrib_id%type
                                   )
   is
      --
      cursor c_ftrib is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.tiposervico_id
           , p.cnae_id
           , p.formatrib_id
        from param_calc_retido p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.tipoimposto_id          = en_tipoimposto_id
         and p.cfop_id                 = en_cfop_id
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.tiposervico_id,0)   = nvl(enc_tiposervico_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.formatrib_id,0)     = nvl(enc_formatrib_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 7;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_ftrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                ||' , enc_tiposervico_id: ' || enc_tiposervico_id
                                                ||' , enc_cnae_id: ' || enc_cnae_id
                                                ||' , enc_formatrib_id: ' || enc_formatrib_id
                               );
      commit;*/
      --
      for rec in c_ftrib loop
         exit when c_ftrib%notfound or (c_ftrib%notfound) is null;
         --
         vn_fase := 7.1;
         --
         -- Verifica no nível abaixo Regime Trib.
         vn_qtde_rtrib := 1;
         --
         pkb_recup_param_rtrib ( evc_dm_tipo_param        => rec.dm_tipo_param
                               , enc_tiposervico_id       => rec.tiposervico_id
                               , enc_cnae_id              => rec.cnae_id
                               , enc_formatrib_id         => rec.formatrib_id
                               , enc_regtrib_id           => en_regtrib_id
                               );
         --
         vn_fase := 7.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_retido.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7.3;
      --
      if nvl(st_row_param_calc_retido.id,0) <= 0
         and nvl(vn_qtde_ftrib,0) > 0
         then
         --
         vn_qtde_ftrib := 0;
         -- Aplica a recursividade para achar com o Forma Trib. NULO
         pkb_recup_param_ftrib ( evc_dm_tipo_param        => evc_dm_tipo_param
                               , enc_tiposervico_id       => enc_tiposervico_id
                               , enc_cnae_id              => enc_cnae_id
                               , enc_formatrib_id         => null
                               );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_ftrib fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_ftrib;
   --
   -- Procedimento de recuperar parâmetros do CNAE
   procedure pkb_recup_param_cnae ( evc_dm_tipo_param        in param_calc_retido.dm_tipo_param%type
                                  , enc_tiposervico_id       in param_calc_retido.tiposervico_id%type
                                  , enc_cnae_id              in param_calc_retido.cnae_id%type
                                  )
   is
      --
      cursor c_cnae is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.tiposervico_id
           , p.cnae_id
        from param_calc_retido p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.tipoimposto_id          = en_tipoimposto_id
         and p.cfop_id                 = en_cfop_id
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.tiposervico_id,0)   = nvl(enc_tiposervico_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 6;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_cnae evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                ||' , enc_tiposervico_id: ' || enc_tiposervico_id
                                                ||' , enc_cnae_id: ' || enc_cnae_id
                               );
      commit;*/
      --
      for rec in c_cnae loop
         exit when c_cnae%notfound or (c_cnae%notfound) is null;
         --
         vn_fase := 6.1;
         --
         -- Verifica no nível abaixo Forma Trib.
         vn_qtde_ftrib := 1;
         --
         pkb_recup_param_ftrib ( evc_dm_tipo_param        => rec.dm_tipo_param
                               , enc_tiposervico_id       => rec.tiposervico_id
                               , enc_cnae_id              => rec.cnae_id
                               , enc_formatrib_id         => en_formatrib_id
                               );
         --
         vn_fase := 6.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_retido.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 6.3;
      --
      if nvl(st_row_param_calc_retido.id,0) <= 0
         and ( trim(enc_cnae_id) is not null or nvl(vn_qtde_cnae,0) > 0 )
         then
         --
         -- Recupera do CNAE superior para pesquisa
         vn_cnae_id := pk_csf.fkg_ar_cnae_id ( en_cnae_id => enc_cnae_id );
         --
         if nvl(vn_cnae_id,0) <= 0 then
            vn_qtde_cnae := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o CNAE NULO
         pkb_recup_param_cnae ( evc_dm_tipo_param        => evc_dm_tipo_param
                              , enc_tiposervico_id       => enc_tiposervico_id
                              , enc_cnae_id              => vn_cnae_id
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cnae fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cnae;
   --
   -- Procedimento de recuperar parâmetros do Tipo de Serviço
   procedure pkb_recup_param_tpserv ( evc_dm_tipo_param        in param_calc_retido.dm_tipo_param%type
                                    , enc_tiposervico_id       in param_calc_retido.tiposervico_id%type
                                    )
   is
      --
      cursor c_tpserv is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.tiposervico_id
        from param_calc_retido p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.tipoimposto_id          = en_tipoimposto_id
         and p.cfop_id                 = en_cfop_id
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.tiposervico_id,0)   = nvl(enc_tiposervico_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 4;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_tpserv evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                ||' , enc_tiposervico_id: ' || enc_tiposervico_id
                               );
      commit;*/
      --
      for rec in c_tpserv loop
         exit when c_tpserv%notfound or (c_tpserv%notfound) is null;
         --
         vn_fase := 4.1;
         --
         -- Verifica no nível abaixo CNAE
         vn_qtde_cnae := 1;
         --
         pkb_recup_param_cnae ( evc_dm_tipo_param        => rec.dm_tipo_param
                              , enc_tiposervico_id       => rec.tiposervico_id
                              , enc_cnae_id              => en_cnae_id
                              );
         --
         vn_fase := 4.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_retido.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.3;
      --
      if nvl(st_row_param_calc_retido.id,0) <= 0
         and nvl(vn_qtde_tpserv,0) > 0
         then
         --
         vn_qtde_tpserv := 0;
         -- Aplica a recursividade para achar com o Tipo Serviço NULO
         pkb_recup_param_tpserv ( evc_dm_tipo_param        => evc_dm_tipo_param
                                , enc_tiposervico_id       => null
                                );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpserv fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpserv;
   --
   -- Procedimento de recuperar parâmetros do Tipo de Parametro (E-Excecao ou R-Regra)
   procedure pkb_recup_param_tpparam ( evc_dm_tipo_param       in param_calc_retido.dm_tipo_param%type
                                     )
   is
      --
      cursor c_tpparam is
      select distinct
             p.prioridade
           , p.dm_tipo_param
        from param_calc_retido p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.tipoimposto_id      = en_tipoimposto_id
         and p.cfop_id             = en_cfop_id
         and p.dm_tipo_param       = evc_dm_tipo_param
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_tpparam evc_dm_tipo_param: ' || evc_dm_tipo_param
                               );
      commit;*/
      --
      for rec in c_tpparam loop
         exit when c_tpparam%notfound or (c_tpparam%notfound) is null;
         --
         vn_fase := 3.1;
         --
         -- Verifica no nível abaixo Tipo Servico
         vn_qtde_tpserv := 1;
         --
         pkb_recup_param_tpserv ( evc_dm_tipo_param        => rec.dm_tipo_param
                                , enc_tiposervico_id       => en_tiposervico_id
                                );
         --
         vn_fase := 3.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_retido.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_param_calc_retido.id,0) <= 0
         and nvl(vn_qtde_tpparam,0) > 0
         then
         --
         vn_qtde_tpparam := 0;
         -- Aplica a recursividade para achar com o Tipo de Parametro "Regra"
         pkb_recup_param_tpparam ( evc_dm_tipo_param       => 'R' ); -- Regra
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpparam fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpparam;
   --
begin
   --
   vn_fase := 1;
   --
   st_row_param_calc_retido := null;
   --
   vn_fase := 1.1;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde_tpparam := 1;
      --| Verifica no nivel abaixo (Tipo de Parametro (E-Excecao ou R-Regra))
      pkb_recup_param_tpparam ( evc_dm_tipo_param => 'E' ); -- Primeiro "Excecao"
      --
      vn_fase := 99;
      -- Se encontrou o parâmetro, finaliza o processo
      if nvl(st_row_param_calc_retido.id,0) > 0 then
         --
         exit;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calc_retido fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_calc_retido;

-------------------------------------------------------------------------------------------------------

--| Procedimento de recuperar os parâmetros de Retido a nível Empresa
procedure pkb_recup_param_calc_ret_nop ( en_soliccalc_id                       in solic_calc.id%type
                                       , en_empresa_id                         in empresa.id%type
                                       , en_natoper_id                         in nat_oper.id%type
                                       , en_dm_ind_emit                        in solic_calc.dm_ind_emit%type
                                       , en_dm_ind_oper                        in solic_calc.dm_ind_oper%type
                                       , ed_dt_emiss                           in solic_calc.dt_emiss%type
                                       , ev_cpf_cnpj_part                      in varchar2
                                       , en_dm_tipo_calc                       in number -- Tipo do Calculo 0-Normal; 1-Retido
                                       , en_tiposervico_id                     in tipo_servico.id%type
                                       , en_cidade_id                          in cidade.id%type
                                       , en_item_id                            in item.id%type
                                       , en_tipoimposto_id                     in tipo_imposto.id%type
                                       , en_tipoimp_cd                         in tipo_imposto.cd%type
                                       --| Retorno do Imposto
                                       , st_row_param_imp_nat_oper_serv        out param_imp_nat_oper_serv%rowtype
                                       , sv_txt                                out infor_comp_dcto_fiscal.txt%type
                                       )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_qtde_item     number;
   vn_qtde_tpserv   number;
   --
   vn_dm_nat_oper               nat_oper_serv.dm_nat_oper%type;
   vn_inforcompdctofiscal_id    infor_comp_dcto_fiscal.id%type;
   vv_txt                       infor_comp_dcto_fiscal.txt%type;
   --
   cursor c_dados is
   select distinct
          nos.empresa_id
        , nos.dm_ind_emit
        , p.natoperserv_id
        , p.cidade_id
        , p.dm_tipo
        , p.dm_calc_imp_sn
     from nat_oper_serv            nos
        , param_imp_nat_oper_serv  p
        , tipo_imposto             ti
    where 1 = 1
      and nos.natoper_id       = en_natoper_id
      and nos.empresa_id       = en_empresa_id
      and nos.dm_ind_emit      = en_dm_ind_emit
      and p.natoperserv_id     = nos.id
      and p.cidade_id          = en_cidade_id
      and p.dm_tipo            = en_dm_tipo_calc
      and ti.id                = p.tipoimp_id
      and ti.cd                = en_tipoimposto_id;
   --
   -- Procedimento de recuperar parâmetros do Tipo Servico
   procedure pkb_recup_param_tpserv ( enc_item_id         in nat_oper_serv.item_id%type
                                    , enc_tiposervico_id  in param_imp_nat_oper_serv.tiposervico_id%type
                                    )
   is
      --
      cursor c_tpserv is
      select p.*
        from nat_oper_serv            nos
           , param_imp_nat_oper_serv  p
           , tipo_imposto             ti
       where 1 = 1
         and nos.natoper_id           = en_natoper_id
         and nos.empresa_id           = en_empresa_id
         and nos.dm_ind_emit          = en_dm_ind_emit
         and nvl(nos.item_id,0)       = nvl(enc_item_id,0)
         and p.natoperserv_id         = nos.id
         and p.cidade_id              = en_cidade_id
         and p.dm_tipo                = en_dm_tipo_calc
         and nvl(p.tiposervico_id,0)  = nvl(enc_tiposervico_id,0)
         and ti.id                    = p.tipoimp_id
         and ti.cd                    = en_tipoimposto_id;
      --
   begin
      --
      vn_fase := 3;
      --
      for rec in c_tpserv loop
         exit when c_tpserv%notfound or (c_tpserv%notfound) is null;
         --
         vn_fase := 3.1;
         --
         st_row_param_imp_nat_oper_serv := rec;
         --
         vn_fase := 3.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_imp_nat_oper_serv.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_param_imp_nat_oper_serv.id,0) <= 0
         and nvl(vn_qtde_tpserv,0) > 0
         then
         --
         vn_qtde_tpserv := 0;
         -- Aplica a recursividade para achar com o Item nulo
         pkb_recup_param_tpserv ( enc_item_id         => enc_item_id
                                , enc_tiposervico_id  => null
                                );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpserv fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpserv;
   --
   -- Procedimento de recuperar parâmetros do Item
   procedure pkb_recup_param_item ( enc_item_id       in nat_oper_serv.item_id%type
                                  )
   is
      --
      cursor c_item is
      select distinct
             nos.empresa_id
           , nos.dm_ind_emit
           , p.natoperserv_id
           , p.cidade_id
           , p.dm_tipo
           , nos.item_id
        from nat_oper_serv            nos
           , param_imp_nat_oper_serv  p
           , tipo_imposto             ti
       where 1 = 1
         and nos.natoper_id       = en_natoper_id
         and nos.empresa_id       = en_empresa_id
         and nos.dm_ind_emit      = en_dm_ind_emit
         and nvl(nos.item_id,0)   = nvl(enc_item_id,0)
         and p.natoperserv_id     = nos.id
         and p.cidade_id          = en_cidade_id
         and p.dm_tipo            = en_dm_tipo_calc
         and ti.id                = p.tipoimp_id
         and ti.cd                = en_tipoimposto_id;
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_item enc_item_id: ' || enc_item_id
                               );
      commit;*/
      --
      for rec in c_item loop
         exit when c_item%notfound or (c_item%notfound) is null;
         --
         vn_fase := 3.1;
         --
         -- Verifica no nível abaixo Tipo Servico
         vn_qtde_tpserv := 1;
         --
         pkb_recup_param_tpserv ( enc_item_id              => rec.item_id
                                , enc_tiposervico_id       => en_tiposervico_id
                                );
         --
         vn_fase := 3.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_imp_nat_oper_serv.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_param_imp_nat_oper_serv.id,0) <= 0
         and nvl(vn_qtde_item,0) > 0
         then
         --
         vn_qtde_item := 0;
         -- Aplica a recursividade para achar com o Item nulo
         pkb_recup_param_item ( enc_item_id       => null );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_item fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_item;
   --
begin
   --
   vn_fase := 1;
   --
   st_row_param_imp_nat_oper_serv := null;
   --
   vn_fase := 1.1;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 2;
      --
      if en_tipoimp_cd      = 13 and  -- INSS
         rec.dm_calc_imp_sn = 0  then -- 0-NÃO - Calcula imposto para Simples Nacional
         --
         exit;
         --
      else
         --
         vn_qtde_item := 1;
         --| Verifica no nivel abaixo (Item)
         pkb_recup_param_item ( enc_item_id => en_item_id );
         --
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_imp_nat_oper_serv.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   begin
      --
      select inforcompdctofiscal_id
           , dm_nat_oper
        into vn_inforcompdctofiscal_id
           , vn_dm_nat_oper
        from nat_oper_serv
       where id = st_row_param_imp_nat_oper_serv.natoperserv_id;
      --
   exception
      when others then
         vn_inforcompdctofiscal_id := null;
         vn_dm_nat_oper := null;
   end;
   --
   vn_fase := 11;
   --
   if nvl(vn_inforcompdctofiscal_id,0) > 0 then
      --
      begin
         --
         select txt into vv_txt
           from infor_comp_dcto_fiscal
          where id = vn_inforcompdctofiscal_id;
         --
      exception
         when others then
            vv_txt := null;
      end;
      --
   end if;
   --
   vn_fase := 12;
   --
   sv_txt := vv_txt;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calc_ret_nop fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_calc_ret_nop;

-------------------------------------------------------------------------------------------------------

--| Procedimento de cálculo de Retido
procedure pkb_calc_retido ( en_soliccalc_id              in solic_calc.id%type
                          , en_empresa_id                in empresa.id%type
                          , en_cnae_id                   in cnae.id%type
                          , en_regtrib_id                in reg_trib.id%type
                          , en_formatrib_id              in forma_trib.id%type
                          , en_natoper_id                in nat_oper.id%type
                          , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                          , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                          , ed_dt_emiss                  in solic_calc.dt_emiss%type
                          , ev_cpf_cnpj_part             in varchar2
                          , en_dm_trib_imposto           in number
                          , en_dm_tipo_calc              in number -- Tipo do Calculo 0-Normal; 1-Retido
                          , en_obsfiscal_id              in obs_fiscal.id%type
                          , ev_obs_compl                 in cfop_tipoimp.obs_compl%type
                          , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                          --| Item
                          , en_item_id                   in item.id%type
                          , en_cfop_id                   in cfop.id%type
                          , en_tipoimposto_id            in tipo_imposto.id%type
                          --| Retorno do Imposto
                          , est_item_solic_calc          in out nocopy  item_solic_calc%rowtype
                          , est_row_imp_itemsc           in out nocopy  imp_itemsc%rowtype
                          )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   vv_resumo_log                log_generico_calcfiscal.resumo%type;   
   --
   vt_row_param_calc_retido        param_calc_retido%rowtype;
   vt_row_param_imp_nat_oper_serv  param_imp_nat_oper_serv%rowtype;
   --
   vb_achou                     boolean := false;
   vv_memoria                   imp_itemsc.memoria%type;
   vn_cidade_id                 cidade.id%type;
   vn_tiposervico_id            tipo_servico.id%type;
   --
   vn_valor_min              number(15,2);
   vn_dm_cons_per_ant_mes    number(1);
   vn_dm_fato_gera_ret       number(1);
   vn_aliq                   number(7,4);
   vn_obsfiscal_id           number;
   vv_obs_compl              varchar2(4000);
   vn_tipoimp_cd             tipo_imposto.cd%type;
   vv_tipoimp_sigla          tipo_imposto.sigla%type;
   vn_trib_imposto           number(1) := 0;
   vn_multorg_id             mult_org.id%type;
   vn_pessoa_id              pessoa.id%type;
   vn_tipoparam_id           tipo_param.id%type;
   vn_valortipoparam_id      valor_tipo_param.id%type;
   vn_valortipoparam_cd      valor_tipo_param.cd%type;
   vv_nome                   pessoa.nome%type;
   vv_cod_part               pessoa.cod_part%type;   
   --
begin
   --
   vn_fase := 1;
   --
   vt_row_param_calc_retido := null;
   vt_row_param_imp_nat_oper_serv := null;
   vb_achou := false;
   --
   vn_fase := 1.1;
   --
   vn_cidade_id := pk_csf.fkg_cidade_ibge_id ( ev_ibge_cidade => est_item_solic_calc.ibge_cid_serv_prest );
   --
   vn_fase := 1.2;
   --
   vn_tiposervico_id := pk_csf.fkg_Tipo_Servico_id ( ev_cod_lst => est_item_solic_calc.cd_lista_serv );
   --
   vn_fase := 1.3;
   --
   vn_tipoimp_cd := pk_csf.fkg_Tipo_Imposto_cd ( en_tipoimp_id => en_tipoimposto_id );
   --
   vn_fase := 1.4;
   --
   vv_tipoimp_sigla := pk_csf.fkg_Tipo_Imp_Sigla ( en_id => en_tipoimposto_id );
   --
   vn_fase := 1.5;
   --
   vn_multorg_id := pk_csf.fkg_multorg_id_empresa ( en_empresa_id => en_empresa_id);
   --
   vn_fase := 1.6;
   --
   vn_pessoa_id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_multorg_id  => vn_multorg_id
                                                 , en_cpf_cnpj    => ev_cpf_cnpj_part );
   --
   vn_fase := 1.7;
   --
   begin
      select id
        into vn_tipoparam_id
        from tipo_param
       where cd = 2;
   exception
      when others then
         vn_tipoparam_id := null;
   end;
   --
   vn_fase := 1.8;
   --
   vn_valortipoparam_id := pk_csf.fkg_pessoa_valortipoparam_id ( en_tipoparam_id => vn_tipoparam_id
                                                               , en_pessoa_id    => vn_pessoa_id );
   --
   vn_fase := 1.9;
   --
   vn_valortipoparam_cd := pk_csf.fkg_valortipoparam_id ( en_valortipoparam_id => vn_valortipoparam_id);
   --
   vn_fase := 1.10;
   --
   -- Essa regra foi incluída para poder entrar no cálculo o INSS para optantes do SIMPLES NACIONAL
   -- Na rotina pkb_recup_param_calc_ret_nop será ainda verificado outro parâmetro que confirma o cálculo
   if nvl(en_dm_trib_imposto,0)    = 1 and
      nvl(en_dm_reg_trib_part,0)   = 3 and   -- (Somente calcula os retidos para o Regime Normal do participante)
      nvl(vn_valortipoparam_cd,0) <> 7 then  -- (7 - Imune/Isenta)
      --
      vn_trib_imposto := 1; -- Sim, tributa imposto
      --
   elsif nvl(en_dm_trib_imposto,0)    =  1  and
         nvl(en_dm_reg_trib_part,0)  <>  3  and   -- (Calcula os retidos para os Regimes do SIMPLES NACIONAL)
         nvl(vn_tipoimp_cd,0)         = 13  and   -- (INSS - Sim, tributa imposto)
         nvl(vn_valortipoparam_cd,0) <>  7  then  -- (7 - Imune/Isenta)
      --
      vn_trib_imposto := 1; -- Sim, tributa imposto
      --
   else
      --
      vn_trib_imposto := 0; -- Não, tributa imposto
      --
      vn_fase := 1.11;
      --	  
      if nvl(vn_valortipoparam_cd,0) = 7 then -- (7 - Imune/Isenta)	  
         --
         vv_nome := pk_csf.fkg_nome_pessoa_id( en_pessoa_id => vn_pessoa_id );	
         vv_cod_part := pk_csf.fkg_pessoa_cod_part ( en_pessoa_id => vn_pessoa_id );		  
	     -- 
         vv_resumo_log := 'Participante com parâmetrização que impede o Calculo, Verifique.';
         vv_mensagem_log := 'Participante ID Nro.: '||vn_pessoa_id||' Cod.Part. Nro.: '||vv_cod_part||' - '||vv_nome||', '||
                            'tem cadastrado "Regime Especial de Tributação" com tipo "7- Imune/Isenta" e não foi calculado. '||
                            'Quando está cadastrado esse regime não é efetuado o calculo, se o documento do participante tiver que '||
                            'ser caculado essa parâmetrização tem que ser retirada do participante.';
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_resumo_log
                          , en_tipo_log                  => informacao
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
	     --
      end if;
      --	  
   end if;
   --
   if nvl(vn_trib_imposto,0) = 1 then -- Sim, tributa imposto
      --
      vn_fase := 2;
      --| Procedimento de recuperar os parâmetros de ISS a nível da Empresa
      pkb_recup_param_calc_ret_nop ( en_soliccalc_id                       => en_soliccalc_id
                                   , en_empresa_id                         => en_empresa_id
                                   , en_natoper_id                         => en_natoper_id
                                   , en_dm_ind_emit                        => en_dm_ind_emit
                                   , en_dm_ind_oper                        => en_dm_ind_oper
                                   , ed_dt_emiss                           => ed_dt_emiss
                                   , ev_cpf_cnpj_part                      => ev_cpf_cnpj_part
                                   , en_dm_tipo_calc                       => en_dm_tipo_calc
                                   , en_tiposervico_id                     => vn_tiposervico_id
                                   , en_cidade_id                          => vn_cidade_id
                                   , en_item_id                            => en_item_id
                                   , en_tipoimposto_id                     => en_tipoimposto_id
                                   , en_tipoimp_cd                         => vn_tipoimp_cd
                                   --| Retorno do Imposto
                                   , st_row_param_imp_nat_oper_serv        => vt_row_param_imp_nat_oper_serv
                                   , sv_txt                                => vv_obs_compl
                                   );
      --
      vn_fase := 2.1;
      --
      if nvl(vt_row_param_imp_nat_oper_serv.id,0) <= 0 then
         --
         vn_fase := 3;
         --| Procedimento de recuperar os parâmetros de Retidos a nível Global
         pkb_recup_param_calc_retido ( en_soliccalc_id              => en_soliccalc_id
                                     , en_empresa_id                => en_empresa_id
                                     , en_cnae_id                   => en_cnae_id
                                     , en_regtrib_id                => en_regtrib_id
                                     , en_formatrib_id              => en_formatrib_id
                                     , en_dm_ind_emit               => en_dm_ind_emit
                                     , en_dm_ind_oper               => en_dm_ind_oper
                                     , ed_dt_emiss                  => ed_dt_emiss
                                     , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                     , en_dm_tipo_calc              => en_dm_tipo_calc
                                     , en_cfop_id                   => en_cfop_id
                                     , en_tiposervico_id            => vn_tiposervico_id
                                     , en_cidade_id                 => vn_cidade_id
                                     , en_tipoimposto_id            => en_tipoimposto_id
                                     --| Retorno do Imposto
                                     , st_row_param_calc_retido     => vt_row_param_calc_retido
                                     );
         --
         vn_fase := 3.1;
         --
         if nvl(vt_row_param_calc_retido.id,0) <= 0 then
            --
            vn_fase := 3.2;
            --
            vb_achou := true;
            --
            vn_valor_min              := null;
            vn_dm_cons_per_ant_mes    := null;
            vn_dm_fato_gera_ret       := null;
            vn_aliq                   := null;
            vn_obsfiscal_id           := null;
            vv_obs_compl              := null;
            --
            vv_memoria                := 'Nao localizado parametro de Retido (Imposto ' || vn_tipoimp_cd || '-' || vv_tipoimp_sigla || '), em dados da Natureza de Operacao ou CFOP Global.';
            --
         else
            --
            vn_fase := 3.3;
            --
            vb_achou := true;
            --
            vn_valor_min              := vt_row_param_calc_retido.valor_min;
            vn_dm_cons_per_ant_mes    := vt_row_param_calc_retido.dm_cons_per_ant_mes;
            vn_dm_fato_gera_ret       := vt_row_param_calc_retido.dm_fato_gera_ret;
            vn_aliq                   := vt_row_param_calc_retido.aliq;
            vn_obsfiscal_id           := vt_row_param_calc_retido.obsfiscal_id;
            vv_obs_compl              := vt_row_param_calc_retido.obs_compl;
            vv_memoria                := pk_csf_calc_fiscal.fkg_mem_param_calc_retido ( en_paramcalcretido_id => vt_row_param_calc_retido.id );
            --
         end if;
         --
      else
         --
         vn_fase := 2.2;
         --
         vb_achou := true;
         --
         vn_valor_min              := vt_row_param_imp_nat_oper_serv.valor_min;
         vn_dm_cons_per_ant_mes    := vt_row_param_imp_nat_oper_serv.dm_cons_per_ant_mes;
         vn_dm_fato_gera_ret       := vt_row_param_imp_nat_oper_serv.dm_fato_gera_ret;
         vn_aliq                   := vt_row_param_imp_nat_oper_serv.aliq;
         -- Natureza de Operação Serviço e Informações, vem do NOP (Natureza da Operação e Prestação)
         vv_memoria                := pk_csf_calc_fiscal.fkg_mem_param_calc_iss_nop ( en_paramimpnatoperserv_id => vt_row_param_imp_nat_oper_serv.id );
         --
      end if;
      --
   else
      --
      vn_fase := 1.9;
      --
      vn_valor_min              := null;
      vn_dm_cons_per_ant_mes    := null;
      vn_dm_fato_gera_ret       := null;
      vn_aliq                   := null;
      vn_obsfiscal_id           := null;
      vv_obs_compl              := null;
      vv_memoria                := 'Nao tributa imposto de Retido (Imposto ' || vn_tipoimp_cd || '-' || vv_tipoimp_sigla || ').';
      vb_achou := false;
      --
   end if;
   --
   vn_fase := 4;
   --
   if vb_achou then
      --
      vn_fase := 4.1;
      --
      est_row_imp_itemsc.itemsoliccalc_id      := est_item_solic_calc.id;
      est_row_imp_itemsc.tipoimp_id            := en_tipoimposto_id;
      est_row_imp_itemsc.dm_tipo               := nvl(en_dm_tipo_calc,0);
      est_row_imp_itemsc.codst_id              := null;
      --
      vn_fase := 4.2;
      --
      est_row_imp_itemsc.aliq_apli             := nvl(vn_aliq,0);
      --
      vn_fase := 4.3;
      --
      if nvl(est_row_imp_itemsc.aliq_apli,0) > 0 then
         --
         vn_fase := 4.31;
         --
         if nvl(vn_dm_cons_per_ant_mes,0) = 1 then
            --
            vn_fase := 4.32;
            --
            est_row_imp_itemsc.vl_base_calc := nvl(est_item_solic_calc.vl_bruto,0) 
                                                 - nvl(est_item_solic_calc.vl_desc,0) 
                                                 - nvl(est_item_solic_calc.vl_desc_incondicionado,0) 
                                                 - nvl(est_item_solic_calc.vl_desc_condicionado,0);
            --
         else
            --
            vn_fase := 4.33;
            --
            est_row_imp_itemsc.vl_base_calc := nvl(est_item_solic_calc.vl_bruto,0)
                                                 - nvl(est_item_solic_calc.vl_desc,0) 
                                                 - nvl(est_item_solic_calc.vl_desc_incondicionado,0) 
                                                 - nvl(est_item_solic_calc.vl_desc_condicionado,0);
            --
         end if;
         --
         if nvl(est_row_imp_itemsc.vl_base_calc,0) >= nvl(vn_valor_min,0) then
            est_row_imp_itemsc.vl_imp_trib      := nvl(est_row_imp_itemsc.vl_base_calc,0) * (nvl(est_row_imp_itemsc.aliq_apli,0) / 100);
         else
            est_row_imp_itemsc.vl_imp_trib      := null;
         end if;
         --
      else
         --
         est_row_imp_itemsc.vl_base_calc          := null;
         est_row_imp_itemsc.aliq_apli             := null;
         est_row_imp_itemsc.vl_imp_trib           := null;
         --
      end if;
      --
      vn_fase := 4.4;
      --
      est_row_imp_itemsc.perc_reduc            := null;
      est_row_imp_itemsc.perc_adic             := null;
      est_row_imp_itemsc.qtde_base_calc_prod   := null;
      est_row_imp_itemsc.vl_aliq_prod          := null;
      est_row_imp_itemsc.vl_bc_st_ret          := null;
      est_row_imp_itemsc.vl_icmsst_ret         := null;
      est_row_imp_itemsc.vl_bc_st_dest         := null;
      est_row_imp_itemsc.vl_icmsst_dest        := null;
      est_row_imp_itemsc.vl_imp_nao_dest       := null;
      est_row_imp_itemsc.vl_icms_deson         := null;
      est_row_imp_itemsc.vl_icms_oper          := null;
      est_row_imp_itemsc.percent_difer         := null;
      est_row_imp_itemsc.vl_icms_difer         := null;
      est_row_imp_itemsc.memoria               := vv_memoria;
      --
      --
      vn_fase := 6;
      -- Atualiza dados da Observação Fiscal
      -- Procedimento de montagem da Observacao Fiscal da Solicitação de Calculo
      pkb_monta_sc_infor_adic ( en_soliccalc_id              => en_soliccalc_id
                              , en_empresa_id                => en_empresa_id
                              , en_obsfiscal_id              => vn_obsfiscal_id
                              , ev_obs_compl                 => vv_obs_compl
                              );
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_calc_retido fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_calc_retido;

-------------------------------------------------------------------------------------------------------

--| Procedimento de recuperar os parâmetros de ISS a nível Global
procedure pkb_recup_param_calc_iss ( en_soliccalc_id              in solic_calc.id%type
                                   , en_empresa_id                in empresa.id%type
                                   , en_cnae_id                   in cnae.id%type
                                   , en_regtrib_id                in reg_trib.id%type
                                   , en_formatrib_id              in forma_trib.id%type
                                   , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                                   , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                                   , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                   , ev_cpf_cnpj_part             in varchar2
                                   , en_dm_tipo_calc              in number -- Tipo do Calculo 0-Normal; 1-Retido
                                   , en_cfop_id                   in cfop.id%type
                                   , en_tiposervico_id            in tipo_servico.id%type
                                   , en_cidade_id                 in cidade.id%type
                                   --| Retorno do Imposto
                                   , st_row_param_calc_iss        out param_calc_iss%rowtype
                                   )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_qtde_tpparam  number;
   vn_qtde_rtrib    number;
   vn_qtde_ftrib    number;
   vn_qtde_cnae     number;
   vn_qtde_cfop     number;
   vn_qtde_tpserv   number;
   vn_cnae_id       cnae.id%Type;
   --
   cursor c_dados is
   select distinct p.prioridade
     from param_calc_iss             p
    where 1 = 1
      and ed_dt_emiss           between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
      and p.cidade_id           = en_cidade_id
      and p.dm_tipo_calc        = en_dm_tipo_calc
    order by p.prioridade;
   --
   -- Procedimento de recuperar parâmetros do Regime Trib
   procedure pkb_recup_param_rtrib ( evc_dm_tipo_param        in param_calc_iss.dm_tipo_param%type
                                   , enc_tiposervico_id       in param_calc_iss.tiposervico_id%type
                                   , enc_cfop_id              in param_calc_iss.cfop_id%type
                                   , enc_cnae_id              in param_calc_iss.cnae_id%type
                                   , enc_formatrib_id         in param_calc_iss.formatrib_id%type
                                   , enc_regtrib_id           in param_calc_iss.regtrib_id%type
                                   )
   is
      --
      cursor c_rtrib is
      select p.*
        from param_calc_iss p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cidade_id               = en_cidade_id
         and p.dm_tipo_calc            = en_dm_tipo_calc
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.tiposervico_id,0)   = nvl(enc_tiposervico_id,0)
         and nvl(p.cfop_id,0)          = nvl(enc_cfop_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.formatrib_id,0)     = nvl(enc_formatrib_id,0)
         and nvl(p.regtrib_id,0)       = nvl(enc_regtrib_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 8;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_rtrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                ||' , enc_tiposervico_id: ' || enc_tiposervico_id
                                                ||' , enc_cfop_id: ' || enc_cfop_id
                                                ||' , enc_cnae_id: ' || enc_cnae_id
                                                ||' , enc_formatrib_id: ' || enc_formatrib_id
                                                ||' , enc_regtrib_id: ' || enc_regtrib_id
                               );
      commit;*/
      --
      for rec in c_rtrib loop
         exit when c_rtrib%notfound or (c_rtrib%notfound) is null;
         --
         vn_fase := 8.1;
         --
         st_row_param_calc_iss := rec;
         --
         vn_fase := 8.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_iss.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 8.3;
      --
      if nvl(st_row_param_calc_iss.id,0) <= 0
         and nvl(vn_qtde_rtrib,0) > 0
         then
         --
         vn_qtde_rtrib := 0;
         -- Aplica a recursividade para achar com o Forma Trib. NULO
         pkb_recup_param_rtrib ( evc_dm_tipo_param        => evc_dm_tipo_param
                               , enc_tiposervico_id       => enc_tiposervico_id
                               , enc_cfop_id              => enc_cfop_id
                               , enc_cnae_id              => enc_cnae_id
                               , enc_formatrib_id         => enc_formatrib_id
                               , enc_regtrib_id           => null
                               );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_rtrib fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_rtrib;    
   --
   -- Procedimento de recuperar parâmetros do Forma Trib
   procedure pkb_recup_param_ftrib ( evc_dm_tipo_param        in param_calc_iss.dm_tipo_param%type
                                   , enc_tiposervico_id       in param_calc_iss.tiposervico_id%type
                                   , enc_cfop_id              in param_calc_iss.cfop_id%type
                                   , enc_cnae_id              in param_calc_iss.cnae_id%type
                                   , enc_formatrib_id         in param_calc_iss.formatrib_id%type
                                   )
   is
      --
      cursor c_ftrib is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.tiposervico_id
           , p.cfop_id
           , p.cnae_id
           , p.formatrib_id
        from param_calc_iss p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cidade_id               = en_cidade_id
         and p.dm_tipo_calc            = en_dm_tipo_calc
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.tiposervico_id,0)   = nvl(enc_tiposervico_id,0)
         and nvl(p.cfop_id,0)          = nvl(enc_cfop_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.formatrib_id,0)     = nvl(enc_formatrib_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 7;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_ftrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                ||' , enc_tiposervico_id: ' || enc_tiposervico_id
                                                ||' , enc_cfop_id: ' || enc_cfop_id
                                                ||' , enc_cnae_id: ' || enc_cnae_id
                                                ||' , enc_formatrib_id: ' || enc_formatrib_id
                               );
      commit;*/
      --
      for rec in c_ftrib loop
         exit when c_ftrib%notfound or (c_ftrib%notfound) is null;
         --
         vn_fase := 7.1;
         --
         -- Verifica no nível abaixo Regime Trib.
         vn_qtde_rtrib := 1;
         --
         pkb_recup_param_rtrib ( evc_dm_tipo_param        => rec.dm_tipo_param
                               , enc_tiposervico_id       => rec.tiposervico_id
                               , enc_cfop_id              => rec.cfop_id
                               , enc_cnae_id              => rec.cnae_id
                               , enc_formatrib_id         => rec.formatrib_id
                               , enc_regtrib_id           => en_regtrib_id
                               );
         --
         vn_fase := 7.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_iss.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7.3;
      --
      if nvl(st_row_param_calc_iss.id,0) <= 0
         and nvl(vn_qtde_ftrib,0) > 0
         then
         --
         vn_qtde_ftrib := 0;
         -- Aplica a recursividade para achar com o Forma Trib. NULO
         pkb_recup_param_ftrib ( evc_dm_tipo_param        => evc_dm_tipo_param
                               , enc_tiposervico_id       => enc_tiposervico_id
                               , enc_cfop_id              => enc_cfop_id
                               , enc_cnae_id              => enc_cnae_id
                               , enc_formatrib_id         => null
                               );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_ftrib fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_ftrib;
   --
   -- Procedimento de recuperar parâmetros do CNAE
   procedure pkb_recup_param_cnae ( evc_dm_tipo_param        in param_calc_iss.dm_tipo_param%type
                                  , enc_tiposervico_id       in param_calc_iss.tiposervico_id%type
                                  , enc_cfop_id              in param_calc_iss.cfop_id%type
                                  , enc_cnae_id              in param_calc_iss.cnae_id%type
                                  )
   is
      --
      cursor c_cnae is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.tiposervico_id
           , p.cfop_id
           , p.cnae_id
        from param_calc_iss p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cidade_id               = en_cidade_id
         and p.dm_tipo_calc            = en_dm_tipo_calc
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.tiposervico_id,0)   = nvl(enc_tiposervico_id,0)
         and nvl(p.cfop_id,0)          = nvl(enc_cfop_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
      order by p.prioridade;
      --
   begin
      --
      vn_fase := 6;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_cnae evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                ||' , enc_tiposervico_id: ' || enc_tiposervico_id
                                                ||' , enc_cfop_id: ' || enc_cfop_id
                                                ||' , enc_cnae_id: ' || enc_cnae_id
                               );
      commit;*/
      --
      for rec in c_cnae loop
         exit when c_cnae%notfound or (c_cnae%notfound) is null;
         --
         vn_fase := 6.1;
         --
         -- Verifica no nível abaixo Forma Trib.
         vn_qtde_ftrib := 1;
         --
         pkb_recup_param_ftrib ( evc_dm_tipo_param        => rec.dm_tipo_param
                               , enc_tiposervico_id       => rec.tiposervico_id
                               , enc_cfop_id              => rec.cfop_id
                               , enc_cnae_id              => rec.cnae_id
                               , enc_formatrib_id         => en_formatrib_id
                               );
         --
         vn_fase := 6.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_iss.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 6.3;
      --
      if nvl(st_row_param_calc_iss.id,0) <= 0
         and ( trim(enc_cnae_id) is not null or nvl(vn_qtde_cnae,0) > 0 )
         then
         --
         -- Recupera do CNAE superior para pesquisa
         vn_cnae_id := pk_csf.fkg_ar_cnae_id ( en_cnae_id => enc_cnae_id );
         --
         if nvl(vn_cnae_id,0) <= 0 then
            vn_qtde_cnae := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o CNAE NULO
         pkb_recup_param_cnae ( evc_dm_tipo_param        => evc_dm_tipo_param
                              , enc_tiposervico_id       => enc_tiposervico_id
                              , enc_cfop_id              => enc_cfop_id
                              , enc_cnae_id              => vn_cnae_id
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cnae fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cnae;
   --
   -- Procedimento de recuperar parâmetros do CFOP
   procedure pkb_recup_param_cfop ( evc_dm_tipo_param        in param_calc_iss.dm_tipo_param%type
                                  , enc_tiposervico_id       in param_calc_iss.tiposervico_id%type
                                  , enc_cfop_id              in param_calc_iss.cfop_id%type
                                  )
   is
      --
      cursor c_cfop is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.tiposervico_id
           , p.cfop_id
        from param_calc_iss p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cidade_id               = en_cidade_id
         and p.dm_tipo_calc            = en_dm_tipo_calc
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.tiposervico_id,0)   = nvl(enc_tiposervico_id,0)
         and nvl(p.cfop_id,0)          = nvl(enc_cfop_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 5;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_cfop evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                ||' , enc_tiposervico_id: ' || enc_tiposervico_id
                                                ||' , enc_cfop_id: ' || enc_cfop_id
                               );
      commit;*/
      --
      for rec in c_cfop loop
         exit when c_cfop%notfound or (c_cfop%notfound) is null;
         --
         vn_fase := 5.1;
         --
         -- Verifica no nível abaixo CNAE
         vn_qtde_cnae := 1;
         --
         pkb_recup_param_cnae ( evc_dm_tipo_param        => rec.dm_tipo_param
                              , enc_tiposervico_id       => rec.tiposervico_id
                              , enc_cfop_id              => rec.cfop_id
                              , enc_cnae_id              => en_cnae_id
                              );
         --
         vn_fase := 5.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_iss.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 5.3;
      --
      if nvl(st_row_param_calc_iss.id,0) <= 0
         and nvl(vn_qtde_cfop,0) > 0
         then
         --
         vn_qtde_cfop := 0;
         -- Aplica a recursividade para achar com o CFOP NULO
         pkb_recup_param_cfop ( evc_dm_tipo_param        => evc_dm_tipo_param
                              , enc_tiposervico_id       => enc_tiposervico_id
                              , enc_cfop_id              => null
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cfop fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cfop;
   --
   -- Procedimento de recuperar parâmetros do Tipo de Serviço
   procedure pkb_recup_param_tpserv ( evc_dm_tipo_param        in param_calc_iss.dm_tipo_param%type
                                    , enc_tiposervico_id       in param_calc_iss.tiposervico_id%type
                                    )
   is
      --
      cursor c_tpserv is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.tiposervico_id
        from param_calc_iss p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cidade_id               = en_cidade_id
         and p.dm_tipo_calc            = en_dm_tipo_calc
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.tiposervico_id,0)   = nvl(enc_tiposervico_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 4;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_tpserv evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                ||' , enc_tiposervico_id: ' || enc_tiposervico_id
                               );
      commit;*/
      --
      for rec in c_tpserv loop
         exit when c_tpserv%notfound or (c_tpserv%notfound) is null;
         --
         vn_fase := 4.1;
         --
         -- Verifica no nível abaixo CFOP
         vn_qtde_cfop := 1;
         --
         pkb_recup_param_cfop ( evc_dm_tipo_param        => rec.dm_tipo_param
                              , enc_tiposervico_id       => rec.tiposervico_id
                              , enc_cfop_id              => en_cfop_id
                              );
         --
         vn_fase := 4.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_iss.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.3;
      --
      if nvl(st_row_param_calc_iss.id,0) <= 0
         and nvl(vn_qtde_tpserv,0) > 0
         then
         --
         vn_qtde_tpserv := 0;
         -- Aplica a recursividade para achar com o Tipo Serviço NULO
         pkb_recup_param_tpserv ( evc_dm_tipo_param        => evc_dm_tipo_param
                                , enc_tiposervico_id       => null 
                                );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpserv fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpserv;
   --
   -- Procedimento de recuperar parâmetros do Tipo de Parametro (E-Excecao ou R-Regra)
   procedure pkb_recup_param_tpparam ( evc_dm_tipo_param       in param_calc_iss.dm_tipo_param%type
                                     )
   is
      --
      cursor c_tpparam is
      select distinct
             p.prioridade
           , p.dm_tipo_param
        from param_calc_iss p
       where 1 = 1
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cidade_id           = en_cidade_id
         and p.dm_tipo_calc        = en_dm_tipo_calc
         and p.dm_tipo_param       = evc_dm_tipo_param
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_tpparam evc_dm_tipo_param: ' || evc_dm_tipo_param
                               );
      commit;*/
      --
      for rec in c_tpparam loop
         exit when c_tpparam%notfound or (c_tpparam%notfound) is null;
         --
         vn_fase := 3.1;
         --
         -- Verifica no nível abaixo Tipo Servico
         vn_qtde_tpserv := 1;
         --
         pkb_recup_param_tpserv ( evc_dm_tipo_param        => rec.dm_tipo_param
                                , enc_tiposervico_id       => en_tiposervico_id 
                                );
         --
         vn_fase := 3.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_iss.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_param_calc_iss.id,0) <= 0
         and nvl(vn_qtde_tpparam,0) > 0
         then
         --
         vn_qtde_tpparam := 0;
         -- Aplica a recursividade para achar com o Tipo de Parametro "Regra"
         pkb_recup_param_tpparam ( evc_dm_tipo_param       => 'R' ); -- Regra
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpparam fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpparam;
   --
begin
   --
   vn_fase := 1;
   --
   st_row_param_calc_iss := null;
   --
   vn_fase := 1.1;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde_tpparam := 1;
      --| Verifica no nivel abaixo (Tipo de Parametro (E-Excecao ou R-Regra))
      pkb_recup_param_tpparam ( evc_dm_tipo_param => 'E' ); -- Primeiro "Excecao"
      --
      vn_fase := 99;
      -- Se encontrou o parâmetro, finaliza o processo
      if nvl(st_row_param_calc_iss.id,0) > 0 then
         --
         exit;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calc_iss fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_calc_iss;

-------------------------------------------------------------------------------------------------------

--| Procedimento de recuperar os parâmetros de ISS a nível Empresa
procedure pkb_recup_param_calc_iss_nop ( en_soliccalc_id                       in solic_calc.id%type
                                       , en_empresa_id                         in empresa.id%type
                                       , en_natoper_id                         in nat_oper.id%type
                                       , en_dm_ind_emit                        in solic_calc.dm_ind_emit%type
                                       , en_dm_ind_oper                        in solic_calc.dm_ind_oper%type
                                       , ed_dt_emiss                           in solic_calc.dt_emiss%type
                                       , ev_cpf_cnpj_part                      in varchar2
                                       , en_dm_tipo_calc                       in number -- Tipo do Calculo 0-Normal; 1-Retido
                                       , en_tiposervico_id                     in tipo_servico.id%type
                                       , en_cidade_id                          in cidade.id%type
                                       , en_item_id                            in item.id%type
                                       --| Retorno do Imposto
                                       , st_row_param_imp_nat_oper_serv        out param_imp_nat_oper_serv%rowtype
                                       , sn_dm_nat_oper                        out nat_oper_serv.dm_nat_oper%type
                                       , sv_txt                                out infor_comp_dcto_fiscal.txt%type
                                       )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_qtde_item     number;
   vn_qtde_tpserv   number;
   --
   vn_dm_nat_oper               nat_oper_serv.dm_nat_oper%type;
   vn_inforcompdctofiscal_id    infor_comp_dcto_fiscal.id%type;
   vv_txt                       infor_comp_dcto_fiscal.txt%type;
   --
   cursor c_dados is
   select distinct
          nos.empresa_id
        , nos.dm_ind_emit
        , p.natoperserv_id
        , p.cidade_id
        , p.dm_tipo
     from nat_oper_serv            nos
        , param_imp_nat_oper_serv  p
        , tipo_imposto             ti
    where 1 = 1
      and nos.natoper_id           = en_natoper_id
      and nos.empresa_id       = en_empresa_id
      and nos.dm_ind_emit      = en_dm_ind_emit
      and p.natoperserv_id     = nos.id
      and p.cidade_id          = en_cidade_id
      and p.dm_tipo            = en_dm_tipo_calc
      and ti.id                = p.tipoimp_id
      and ti.cd                = 6; -- ISS
   --
   -- Procedimento de recuperar parâmetros do Tipo Servico
   procedure pkb_recup_param_tpserv ( enc_item_id         in nat_oper_serv.item_id%type
                                    , enc_tiposervico_id  in param_imp_nat_oper_serv.tiposervico_id%type
                                    )
   is
      --
      cursor c_tpserv is
      select p.*
        from nat_oper_serv            nos
           , param_imp_nat_oper_serv  p
           , tipo_imposto             ti
       where 1 = 1
         and nos.natoper_id           = en_natoper_id
         and nos.empresa_id           = en_empresa_id
         and nos.dm_ind_emit          = en_dm_ind_emit
         and nvl(nos.item_id,0)       = nvl(enc_item_id,0)
         and p.natoperserv_id         = nos.id
         and p.cidade_id              = en_cidade_id
         and p.dm_tipo                = en_dm_tipo_calc
         and nvl(p.tiposervico_id,0)  = nvl(enc_tiposervico_id,0)
         and ti.id                    = p.tipoimp_id
         and ti.cd                    = 6; -- ISS
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_item enc_item_id: ' || enc_item_id
                                                || ', enc_tiposervico_id ' || enc_tiposervico_id
                               );
      commit;*/
      --
      for rec in c_tpserv loop
         exit when c_tpserv%notfound or (c_tpserv%notfound) is null;
         --
         vn_fase := 3.1;
         --
         st_row_param_imp_nat_oper_serv := rec;
         --
         vn_fase := 3.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_imp_nat_oper_serv.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_param_imp_nat_oper_serv.id,0) <= 0
         and nvl(vn_qtde_tpserv,0) > 0
         then
         --
         vn_qtde_tpserv := 0;
         -- Aplica a recursividade para achar com o Item nulo
         pkb_recup_param_tpserv ( enc_item_id         => enc_item_id
                                , enc_tiposervico_id  => null
                                );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpserv fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpserv;
   --
   -- Procedimento de recuperar parâmetros do Item
   procedure pkb_recup_param_item ( enc_item_id       in nat_oper_serv.item_id%type
                                  )
   is
      --
      cursor c_item is
      select distinct
             nos.empresa_id
           , nos.dm_ind_emit
           , p.natoperserv_id
           , p.cidade_id
           , p.dm_tipo
           , nos.item_id
        from nat_oper_serv            nos
           , param_imp_nat_oper_serv  p
           , tipo_imposto             ti
       where 1 = 1
         and nos.natoper_id       = en_natoper_id
         and nos.empresa_id       = en_empresa_id
         and nos.dm_ind_emit      = en_dm_ind_emit
         and nvl(nos.item_id,0)   = nvl(enc_item_id,0)
         and p.natoperserv_id     = nos.id
         and p.cidade_id          = en_cidade_id
         and p.dm_tipo            = en_dm_tipo_calc
         and ti.id                = p.tipoimp_id
         and ti.cd                = 6; -- ISS
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_item enc_item_id: ' || enc_item_id
                               );
      commit;*/
      --
      for rec in c_item loop
         exit when c_item%notfound or (c_item%notfound) is null;
         --
         vn_fase := 3.1;
         --
         -- Verifica no nível abaixo Tipo Servico
         vn_qtde_tpserv := 1;
         --
         pkb_recup_param_tpserv ( enc_item_id              => rec.item_id
                                , enc_tiposervico_id       => en_tiposervico_id
                                );
         --
         vn_fase := 3.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_imp_nat_oper_serv.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_param_imp_nat_oper_serv.id,0) <= 0
         and nvl(vn_qtde_item,0) > 0
         then
         --
         vn_qtde_item := 0;
         -- Aplica a recursividade para achar com o Item nulo
         pkb_recup_param_item ( enc_item_id       => null );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_item fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_item;
   --
begin
   --
   vn_fase := 1;
   --
   st_row_param_imp_nat_oper_serv := null;
   --
   vn_fase := 1.1;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde_item := 1;
      --| Verifica no nivel abaixo (Item)
      pkb_recup_param_item ( enc_item_id => en_item_id );
      --
      -- Se encontrou o parâmetro, finaliza o processo
      if nvl(st_row_param_imp_nat_oper_serv.id,0) > 0 then
         --
         exit;
         --
      end if;
      --
   end loop;
   --
   vn_fase := 10;
   --
   begin
      --
      select inforcompdctofiscal_id
           , dm_nat_oper
        into vn_inforcompdctofiscal_id
           , vn_dm_nat_oper
        from nat_oper_serv
       where id = st_row_param_imp_nat_oper_serv.natoperserv_id;
      --
   exception
      when others then
         vn_inforcompdctofiscal_id := null;
         vn_dm_nat_oper := null;
   end;
   --
   vn_fase := 11;
   --
   if nvl(vn_inforcompdctofiscal_id,0) > 0 then
      --
      begin
         --
         select txt into vv_txt
           from infor_comp_dcto_fiscal
          where id = vn_inforcompdctofiscal_id;
         --
      exception
         when others then
            vv_txt := null;
      end;
      --
   end if;
   --
   vn_fase := 12;
   --
   sn_dm_nat_oper := vn_dm_nat_oper;
   sv_txt := vv_txt;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calc_iss_nop fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_calc_iss_nop;

-------------------------------------------------------------------------------------------------------

--| Procedimento de cálculo de ISS
procedure pkb_calc_iss ( en_soliccalc_id              in solic_calc.id%type
                       , en_empresa_id                in empresa.id%type
                       , en_cnae_id                   in cnae.id%type
                       , en_regtrib_id                in reg_trib.id%type
                       , en_formatrib_id              in forma_trib.id%type
                       , en_natoper_id                in nat_oper.id%type
                       , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                       , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                       , ed_dt_emiss                  in solic_calc.dt_emiss%type
                       , ev_cpf_cnpj_part             in varchar2
                       , en_dm_trib_imposto           in number
                       , en_dm_tipo_calc              in number -- Tipo do Calculo 0-Normal; 1-Retido
                       , en_obsfiscal_id              in obs_fiscal.id%type
                       , ev_obs_compl                 in cfop_tipoimp.obs_compl%type
                       --| Item
                       , en_item_id                   in item.id%type
                       , en_cfop_id                   in cfop.id%type
                       --| Retorno do Imposto
                       , est_item_solic_calc          in out nocopy  item_solic_calc%rowtype
                       , est_row_imp_itemsc           in out nocopy  imp_itemsc%rowtype
                       )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_row_param_calc_iss           param_calc_iss%rowtype;
   vt_row_param_imp_nat_oper_serv  param_imp_nat_oper_serv%rowtype;
   --
   vb_achou                     boolean := false;
   vv_memoria                   imp_itemsc.memoria%type;
   vn_cidade_id                 cidade.id%type;
   vn_tiposervico_id            tipo_servico.id%type;
   --
   vn_codtribmunicipio_id    number;
   vn_aliq                   number(7,4);
   vn_dm_nat_oper            number(1);
   vn_obsfiscal_id           number;
   vv_obs_compl              varchar2(4000);
   vv_dm_ind_regra           param_calc_regra_arred.dm_ind_regra%type;
   --
begin
   --
   vn_fase := 1;
   --
   vt_row_param_calc_iss := null;
   vt_row_param_imp_nat_oper_serv := null;
   vb_achou := false;
   --
   vn_fase := 1.1;
   --
   vn_cidade_id := pk_csf.fkg_cidade_ibge_id ( ev_ibge_cidade => est_item_solic_calc.ibge_cid_serv_prest );
   --
   vn_fase := 1.2;
   --
   vn_tiposervico_id := pk_csf.fkg_Tipo_Servico_id ( ev_cod_lst => est_item_solic_calc.cd_lista_serv );
   --
   vn_fase := 1.3;
   --
   if nvl(en_dm_trib_imposto,0) = 1 then -- Sim, tributa imposto
      --
      vn_fase := 2;
      --| Procedimento de recuperar os parâmetros de ISS a nível da Empresa
      pkb_recup_param_calc_iss_nop ( en_soliccalc_id                       => en_soliccalc_id
                                   , en_empresa_id                         => en_empresa_id
                                   , en_natoper_id                         => en_natoper_id
                                   , en_dm_ind_emit                        => en_dm_ind_emit
                                   , en_dm_ind_oper                        => en_dm_ind_oper
                                   , ed_dt_emiss                           => ed_dt_emiss
                                   , ev_cpf_cnpj_part                      => ev_cpf_cnpj_part
                                   , en_dm_tipo_calc                       => en_dm_tipo_calc
                                   , en_tiposervico_id                     => vn_tiposervico_id
                                   , en_cidade_id                          => vn_cidade_id
                                   , en_item_id                            => en_item_id
                                   --| Retorno do Imposto
                                   , st_row_param_imp_nat_oper_serv        => vt_row_param_imp_nat_oper_serv
                                   , sn_dm_nat_oper                        => vn_dm_nat_oper
                                   , sv_txt                                => vv_obs_compl
                                   );
      --
      vn_fase := 2.1;
      --
      if nvl(vt_row_param_imp_nat_oper_serv.id,0) <= 0 then
         --
         vn_fase := 3;
         --| Procedimento de recuperar os parâmetros de ISS a nível Global
         pkb_recup_param_calc_iss ( en_soliccalc_id              => en_soliccalc_id
                                  , en_empresa_id                => en_empresa_id
                                  , en_cnae_id                   => en_cnae_id
                                  , en_regtrib_id                => en_regtrib_id
                                  , en_formatrib_id              => en_formatrib_id
                                  , en_dm_ind_emit               => en_dm_ind_emit
                                  , en_dm_ind_oper               => en_dm_ind_oper
                                  , ed_dt_emiss                  => ed_dt_emiss
                                  , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                  , en_dm_tipo_calc              => en_dm_tipo_calc
                                  , en_cfop_id                   => en_cfop_id
                                  , en_tiposervico_id            => vn_tiposervico_id
                                  , en_cidade_id                 => vn_cidade_id
                                  --| Retorno do Imposto
                                  , st_row_param_calc_iss        => vt_row_param_calc_iss
                                  );
         --
         vn_fase := 3.1;
         --
         if nvl(vt_row_param_calc_iss.id,0) <= 0 then
            --
            vn_fase := 3.2;
            --
            vb_achou := true;
            --
            vn_codtribmunicipio_id    := null;
            vn_aliq                   := null;
            vn_dm_nat_oper            := null;
            vn_obsfiscal_id           := null;
            vv_obs_compl              := null;
            vv_dm_ind_regra           := null;
            --
            vv_memoria                := 'Nao localizado parametro de ISS, em dados da Natureza de Operacao ou CFOP Global';
            --
         else
            --
            vn_fase := 3.3;
            --
            vb_achou := true;
            --
            vn_codtribmunicipio_id    := vt_row_param_calc_iss.codtribmunicipio_id;
            vn_aliq                   := vt_row_param_calc_iss.aliq;
            vn_dm_nat_oper            := vt_row_param_calc_iss.dm_nat_oper;
            vn_obsfiscal_id           := vt_row_param_calc_iss.obsfiscal_id;
            vv_obs_compl              := vt_row_param_calc_iss.obs_compl;
            vv_memoria                := pk_csf_calc_fiscal.fkg_mem_param_calc_iss ( en_paramcalciss_id => vt_row_param_calc_iss.id );
            vv_dm_ind_regra           := pk_csf_calc_fiscal.fkg_dmindregra ( en_empresa_id        => en_empresa_id
                                                                           , ev_objeto_referencia => 'PARAM_CALC_ISS'
                                                                           , en_id_referencia     => vt_row_param_calc_iss.id );
            --
         end if;
         --
      else
         --
         vn_fase := 2.2;
         --
         vb_achou := true;
         --
         vn_codtribmunicipio_id    := vt_row_param_imp_nat_oper_serv.codtribmunicipio_id;
         vn_aliq                   := vt_row_param_imp_nat_oper_serv.aliq;
         -- Natureza de Operação Serviço e Informações, vem do NOP (Natureza da Operação e Prestação)
         vv_memoria                := pk_csf_calc_fiscal.fkg_mem_param_calc_iss_nop ( en_paramimpnatoperserv_id => vt_row_param_imp_nat_oper_serv.id );
         --
         vv_dm_ind_regra           := pk_csf_calc_fiscal.fkg_dmindregra ( en_empresa_id        => en_empresa_id
                                                                        , ev_objeto_referencia => 'PARAM_IMP_NAT_OPER_SERV'
                                                                        , en_id_referencia     => vt_row_param_imp_nat_oper_serv.id );
      end if;
      --
   else
      --
      vn_fase := 1.9;
      --
      vb_achou := true;
      --
      vn_codtribmunicipio_id    := null;
      vn_aliq                   := null;
      vn_dm_nat_oper            := null;
      vn_obsfiscal_id           := null;
      vv_obs_compl              := null;
      vv_memoria                := 'Nao tributa imposto de ISS.';
      vv_dm_ind_regra           := null;
      --
   end if;
   --
   vn_fase := 4;
   --
   if vb_achou then
      --
      vn_fase := 4.1;
      --
      est_row_imp_itemsc.itemsoliccalc_id      := est_item_solic_calc.id;
      est_row_imp_itemsc.tipoimp_id            := pk_csf.fkg_Tipo_Imposto_id ( en_cd => '6'); -- ISS
      est_row_imp_itemsc.dm_tipo               := nvl(en_dm_tipo_calc,0);
      est_row_imp_itemsc.codst_id              := null;
      --
      vn_fase := 4.2;
      --
      est_row_imp_itemsc.vl_base_calc          := nvl(est_item_solic_calc.vl_bruto,0) - nvl(est_item_solic_calc.vl_desc,0) - nvl(est_item_solic_calc.vl_desc_incondicionado,0) - nvl(est_item_solic_calc.vl_desc_condicionado,0);
      --
      est_row_imp_itemsc.aliq_apli             := nvl(vn_aliq,0);
      --
      vn_fase := 4.3;
      --
      if nvl(est_row_imp_itemsc.aliq_apli,0) > 0 then
         --
         est_row_imp_itemsc.vl_imp_trib      := nvl(est_row_imp_itemsc.vl_base_calc,0) * (nvl(est_row_imp_itemsc.aliq_apli,0) / 100);
         --
         -- Verifica se irá arredondar ou truncar para duas casas decimais o valor do imposto
         if nvl(vv_dm_ind_regra, 'T') = 'T' then
            --
            est_row_imp_itemsc.vl_imp_trib := trunc(est_row_imp_itemsc.vl_imp_trib,2);
            --
         end if;
         --
      else
         --
         est_row_imp_itemsc.vl_base_calc          := null;
         est_row_imp_itemsc.aliq_apli             := null;
         est_row_imp_itemsc.vl_imp_trib           := null;
         --
      end if;
      --
      vn_fase := 4.4;
      --
      est_row_imp_itemsc.perc_reduc            := null;
      est_row_imp_itemsc.perc_adic             := null;
      est_row_imp_itemsc.qtde_base_calc_prod   := null;
      est_row_imp_itemsc.vl_aliq_prod          := null;
      est_row_imp_itemsc.vl_bc_st_ret          := null;
      est_row_imp_itemsc.vl_icmsst_ret         := null;
      est_row_imp_itemsc.vl_bc_st_dest         := null;
      est_row_imp_itemsc.vl_icmsst_dest        := null;
      est_row_imp_itemsc.vl_imp_nao_dest       := null;
      est_row_imp_itemsc.vl_icms_deson         := null;
      est_row_imp_itemsc.vl_icms_oper          := null;
      est_row_imp_itemsc.percent_difer         := null;
      est_row_imp_itemsc.vl_icms_difer         := null;
      est_row_imp_itemsc.memoria               := vv_memoria;
      --
      vn_fase := 5;
      -- Atualiza Informações do Item
      est_item_solic_calc.dm_nat_oper_serv := vn_dm_nat_oper;
      est_item_solic_calc.cod_trib_municipio := pk_csf_nfs.fkg_cod_trib_municipio_cd ( en_codtribmunic_id => vn_codtribmunicipio_id );
      --
      vn_fase := 6;
      -- Atualiza dados da Observação Fiscal
      -- Procedimento de montagem da Observacao Fiscal da Solicitação de Calculo
      pkb_monta_sc_infor_adic ( en_soliccalc_id              => en_soliccalc_id
                              , en_empresa_id                => en_empresa_id
                              , en_obsfiscal_id              => vn_obsfiscal_id
                              , ev_obs_compl                 => vv_obs_compl
                              );
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_calc_iss fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_calc_iss;

-------------------------------------------------------------------------------------------------------

--| Procedimento de recuperar parâmetros de calculo de Aliquota do Imposto por NCM, Global: Tratar IPI, PIS e COFINS
procedure pkb_recup_aliq_tipoimp_ncm ( en_soliccalc_id              in solic_calc.id%type
                                     , en_empresa_id                in empresa.id%type
                                     , en_cnae_id                   in cnae.id%type
                                     , en_inctrib_id                in inc_trib.id%type
                                     , en_regtrib_id                in reg_trib.id%type
                                     , en_formatrib_id              in forma_trib.id%type
                                     , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                                     , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                                     , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                     , ev_cpf_cnpj_part             in varchar2
                                     , en_estado_id_dest            in estado.id%type
                                     , en_dm_tipo_part              in solic_calc.dm_tipo_part%type
                                     , en_dm_cons_final             in solic_calc.dm_cons_final%type
                                     , en_dm_ind_ie_part            in solic_calc.dm_ind_ie_part%type
                                     , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                                     , en_dm_part_tem_suframa       in solic_calc.dm_part_tem_suframa%type
                                     , en_dm_ind_ativ_part          in solic_calc.dm_ind_ativ_part%type
                                     --| Item
                                     , en_ncm_id                    in ncm.id%type
                                     , en_extipi_id                 in ex_tipi.id%type
                                     , en_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                     , en_cfop_id                   in cfop.id%type
                                     , en_tipoimposto_id            in tipo_imposto.id%type
                                     , st_row_aliq_tipoimp_ncm      out aliq_tipoimp_ncm%rowtype
                                     )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_dm_calc_fisica         param_calc_icms_empr.dm_calc_fisica%type;
   vn_dm_calc_cons_final     param_calc_icms_empr.dm_calc_cons_final%type;
   vn_dm_calc_contr_isento   param_calc_icms_empr.dm_calc_contr_isento%type;
   vn_dm_calc_nao_contr      param_calc_icms_empr.dm_calc_nao_contr%type;
   vn_dm_emit_com_suframa    param_calc_icms_empr.dm_emit_com_suframa%type;
   vn_dm_dest_com_suframa    param_calc_icms_empr.dm_dest_com_suframa%type;
   vv_empresa_suframa        juridica.suframa%type;
   --
   vn_qtde_itrib    number;
   vn_qtde_rtrib    number;
   vn_qtde_ftrib    number;
   vn_qtde_cnae     number;
   vn_qtde_cfop     number;
   vn_qtde_ncm      number;
   vn_qtde_extipi   number;
   vn_qtde_origmerc number;
   vn_qtde_tpparam  number;
   vn_ncm_id        ncm.id%type;
   --
   cursor c_dados is
   select distinct
          p.prioridade
     from aliq_tipoimp_ncm  p
    where p.tipoimposto_id         = en_tipoimposto_id
      and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
    order by p.prioridade;
   --
   -- Procedimento de recuperar parâmetros do Incidencia de Tributação
   procedure pkb_recup_param_inctrib ( evc_dm_tipo_param             in aliq_tipoimp_ncm.dm_tipo_param%type
                                     , enc_inctrib_id                in inc_trib.id%type
                                     , enc_regtrib_id                in reg_trib.id%type
                                     , enc_formatrib_id              in forma_trib.id%type
                                     , enc_cnae_id                   in cnae.id%type
                                     , enc_cfop_id                   in cfop.id%type
                                     , enc_ncm_id                    in ncm.id%type
                                     , enc_extipi_id                 in ex_tipi.id%type
                                     , enc_dm_orig_merc              in aliq_tipoimp_ncm.dm_orig_merc%type
                                     , enc_dm_calc_cons_final        in aliq_tipoimp_ncm.dm_calc_cons_final%type
                                     )
   is
      --
      cursor c_itrib is
      select p.*
        from aliq_tipoimp_ncm p
       where p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.inctrib_id,0)       = nvl(enc_inctrib_id,0)
         and nvl(p.regtrib_id,0)       = nvl(enc_regtrib_id,0)
         and nvl(p.formatrib_id,0)     = nvl(enc_formatrib_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.cfop_id,0)          = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 12;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_inctrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_inctrib_id: ' || enc_inctrib_id
                                                || ' enc_regtrib_id: ' || enc_regtrib_id
                                                || ' enc_formatrib_id: ' || enc_formatrib_id
                                                || ' enc_cnae_id: ' || enc_cnae_id
                                                || ' enc_cfop_id: ' || enc_cfop_id
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_itrib loop
         exit when c_itrib%notfound or (c_itrib%notfound) is null;
         --
         vn_fase := 12.1;
         --
         --insert into erro values (rec.id);
         --
         st_row_aliq_tipoimp_ncm := rec;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 12.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm.id,0) <= 0
         and ( trim(enc_inctrib_id) is not null or nvl(vn_qtde_itrib,0) > 0 )
         then
         --
         vn_qtde_itrib := 0;
         --
         -- Aplica a recursividade para achar com o Incidencia Tributária nulo
         pkb_recup_param_inctrib ( evc_dm_tipo_param             => evc_dm_tipo_param
                                 , enc_inctrib_id                => null
                                 , enc_regtrib_id                => enc_regtrib_id
                                 , enc_formatrib_id              => enc_formatrib_id
                                 , enc_cnae_id                   => enc_cnae_id
                                 , enc_cfop_id                   => enc_cfop_id
                                 , enc_ncm_id                    => enc_ncm_id
                                 , enc_extipi_id                 => enc_extipi_id
                                 , enc_dm_orig_merc              => enc_dm_orig_merc
                                 , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                 );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_inctrib fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_inctrib;
   --
   -- Procedimento de recuperar parâmetros do Regime de Tributação
   procedure pkb_recup_param_regtrib ( evc_dm_tipo_param             in aliq_tipoimp_ncm.dm_tipo_param%type
                                     , enc_regtrib_id                in reg_trib.id%type
                                     , enc_formatrib_id              in forma_trib.id%type
                                     , enc_cnae_id                   in cnae.id%type
                                     , enc_cfop_id                   in cfop.id%type
                                     , enc_ncm_id                    in ncm.id%type
                                     , enc_extipi_id                 in ex_tipi.id%type
                                     , enc_dm_orig_merc              in aliq_tipoimp_ncm.dm_orig_merc%type
                                     , enc_dm_calc_cons_final        in aliq_tipoimp_ncm.dm_calc_cons_final%type
                                     )
   is
      --
      cursor c_rtrib is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.regtrib_id
           , p.formatrib_id
           , p.cnae_id
           , p.cfop_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm p
       where p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss               between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.regtrib_id,0)       = nvl(enc_regtrib_id,0)
         and nvl(p.formatrib_id,0)     = nvl(enc_formatrib_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.cfop_id,0)          = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 12;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_regtrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_regtrib_id: ' || enc_regtrib_id
                                                || ' enc_formatrib_id: ' || enc_formatrib_id
                                                || ' enc_cnae_id: ' || enc_cnae_id
                                                || ' enc_cfop_id: ' || enc_cfop_id
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_rtrib loop
         exit when c_rtrib%notfound or (c_rtrib%notfound) is null;
         --
         vn_fase := 12.1;
         --
         vn_qtde_itrib := 1;
         --| Verifica no nivel abaixo (Incidencia Tributária)
         pkb_recup_param_inctrib ( evc_dm_tipo_param             => rec.dm_tipo_param
                                 , enc_inctrib_id                => en_inctrib_id
                                 , enc_regtrib_id                => rec.regtrib_id
                                 , enc_formatrib_id              => rec.formatrib_id
                                 , enc_cnae_id                   => rec.cnae_id
                                 , enc_cfop_id                   => rec.cfop_id
                                 , enc_ncm_id                    => rec.ncm_id
                                 , enc_extipi_id                 => rec.extipi_id
                                 , enc_dm_orig_merc              => rec.dm_orig_merc
                                 , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                 );
         --
         vn_fase := 12.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 12.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm.id,0) <= 0
         and ( trim(enc_regtrib_id) is not null or nvl(vn_qtde_rtrib,0) > 0 )
         then
         --
         vn_qtde_rtrib := 0;
         --
         -- Aplica a recursividade para achar com o Regime Tributario nulo
         pkb_recup_param_regtrib ( evc_dm_tipo_param             => evc_dm_tipo_param
                                 , enc_regtrib_id                => null
                                 , enc_formatrib_id              => enc_formatrib_id
                                 , enc_cnae_id                   => enc_cnae_id
                                 , enc_cfop_id                   => enc_cfop_id
                                 , enc_ncm_id                    => enc_ncm_id
                                 , enc_extipi_id                 => enc_extipi_id
                                 , enc_dm_orig_merc              => enc_dm_orig_merc
                                 , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                 );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_regtrib fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_regtrib;
   --
   -- Procedimento de recuperar parâmetros do Forma de Tributação
   procedure pkb_recup_param_formatrib ( evc_dm_tipo_param             in aliq_tipoimp_ncm.dm_tipo_param%type
                                       , enc_formatrib_id              in forma_trib.id%type
                                       , enc_cnae_id                   in cnae.id%type
                                       , enc_cfop_id                   in cfop.id%type
                                       , enc_ncm_id                    in ncm.id%type
                                       , enc_extipi_id                 in ex_tipi.id%type
                                       , enc_dm_orig_merc              in aliq_tipoimp_ncm.dm_orig_merc%type
                                       , enc_dm_calc_cons_final        in aliq_tipoimp_ncm.dm_calc_cons_final%type
                                       )
   is
      --
      cursor c_ftrib is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.formatrib_id
           , p.cnae_id
           , p.cfop_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm p
       where p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss               between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.formatrib_id,0)     = nvl(enc_formatrib_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.cfop_id,0)          = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 11;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_formatrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_formatrib_id: ' || enc_formatrib_id
                                                || ' enc_cnae_id: ' || enc_cnae_id
                                                || ' enc_cfop_id: ' || enc_cfop_id
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_ftrib loop
         exit when c_ftrib%notfound or (c_ftrib%notfound) is null;
         --
         vn_fase := 11.1;
         --
         vn_qtde_rtrib := 1;
         --| Verifica no nivel abaixo (Regime de Tributação)
         pkb_recup_param_regtrib ( evc_dm_tipo_param             => rec.dm_tipo_param
                                 , enc_regtrib_id                => en_regtrib_id
                                 , enc_formatrib_id              => rec.formatrib_id
                                 , enc_cnae_id                   => rec.cnae_id
                                 , enc_cfop_id                   => rec.cfop_id
                                 , enc_ncm_id                    => rec.ncm_id
                                 , enc_extipi_id                 => rec.extipi_id
                                 , enc_dm_orig_merc              => rec.dm_orig_merc
                                 , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                 );
         --
         vn_fase := 11.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 11.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm.id,0) <= 0
         and ( trim(enc_formatrib_id) is not null or nvl(vn_qtde_ftrib,0) > 0 )
         then
         --
         vn_qtde_ftrib := 0;
         --
         -- Aplica a recursividade para achar com o Forma de Tributacao nulo
         pkb_recup_param_formatrib ( evc_dm_tipo_param             => evc_dm_tipo_param
                                   , enc_formatrib_id              => null
                                   , enc_cnae_id                   => enc_cnae_id
                                   , enc_cfop_id                   => enc_cfop_id
                                   , enc_ncm_id                    => enc_ncm_id
                                   , enc_extipi_id                 => enc_extipi_id
                                   , enc_dm_orig_merc              => enc_dm_orig_merc
                                   , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                   );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_formatrib fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_formatrib;
   --
   -- Procedimento de recuperar parâmetros do CNAE
   procedure pkb_recup_param_cnae ( evc_dm_tipo_param             in aliq_tipoimp_ncm.dm_tipo_param%type
                                  , enc_cnae_id                   in cnae.id%type
                                  , enc_cfop_id                   in cfop.id%type
                                  , enc_ncm_id                    in ncm.id%type
                                  , enc_extipi_id                 in ex_tipi.id%type
                                  , enc_dm_orig_merc              in aliq_tipoimp_ncm.dm_orig_merc%type
                                  , enc_dm_calc_cons_final        in aliq_tipoimp_ncm.dm_calc_cons_final%type
                                  )
   is
      --
      vn_cnae_id    cnae.id%type;
      --
      cursor c_cfop is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.cnae_id
           , p.cfop_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm p
       where p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss               between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.cfop_id,0)          = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 10;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_cnae evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_cnae_id: ' || enc_cnae_id
                                                || ' enc_cfop_id: ' || enc_cfop_id
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_cfop loop
         exit when c_cfop%notfound or (c_cfop%notfound) is null;
         --
         vn_fase := 10.1;
         --
         vn_qtde_ftrib := 1;
         --| Verifica no nivel abaixo (Forma de Tributação)
         pkb_recup_param_formatrib ( evc_dm_tipo_param             => rec.dm_tipo_param
                                   , enc_formatrib_id              => en_formatrib_id
                                   , enc_cnae_id                   => rec.cnae_id
                                   , enc_cfop_id                   => rec.cfop_id
                                   , enc_ncm_id                    => rec.ncm_id
                                   , enc_extipi_id                 => rec.extipi_id
                                   , enc_dm_orig_merc              => rec.dm_orig_merc
                                   , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                   );
         --
         vn_fase := 10.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 10.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm.id,0) <= 0
         and ( trim(enc_cnae_id) is not null or nvl(vn_qtde_cnae,0) > 0 )
         then
         -- Recupera do CNAE superior para pesquisa
         vn_cnae_id := pk_csf.fkg_ar_cnae_id ( en_cnae_id => enc_cnae_id );
         --
         if nvl(vn_cnae_id,0) <= 0 then
            vn_qtde_cnae := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o CNAE nulo
         pkb_recup_param_cnae ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cnae_id                   => vn_cnae_id
                              , enc_cfop_id                   => enc_cfop_id
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_extipi_id                 => enc_extipi_id
                              , enc_dm_orig_merc              => enc_dm_orig_merc
                              , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cnae fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cnae;
   --
   -- Procedimento de recuperar parâmetros do CFOP
   procedure pkb_recup_param_cfop ( evc_dm_tipo_param             in aliq_tipoimp_ncm.dm_tipo_param%type
                                  , enc_cfop_id                   in cfop.id%type
                                  , enc_ncm_id                    in ncm.id%type
                                  , enc_extipi_id                 in ex_tipi.id%type
                                  , enc_dm_orig_merc              in aliq_tipoimp_ncm.dm_orig_merc%type
                                  , enc_dm_calc_cons_final        in aliq_tipoimp_ncm.dm_calc_cons_final%type
                                  )
   is
      --
      cursor c_cfop is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.cfop_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm p
       where p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.cfop_id,0)          = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 9;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_cfop evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_cfop_id: ' || enc_cfop_id
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_cfop loop
         exit when c_cfop%notfound or (c_cfop%notfound) is null;
         --
         vn_fase := 9.1;
         --
         vn_qtde_cnae := 1;
         --| Verifica no nivel abaixo (CNAE)
         pkb_recup_param_cnae ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , enc_cnae_id                   => en_cnae_id
                              , enc_cfop_id                   => rec.cfop_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_extipi_id                 => rec.extipi_id
                              , enc_dm_orig_merc              => rec.dm_orig_merc
                              , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                              );
         --
         vn_fase := 9.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 9.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm.id,0) <= 0
         and ( trim(enc_cfop_id) is not null or nvl(vn_qtde_cfop,0) > 0 )
         then
         --
         vn_qtde_cfop := 0;
         -- Aplica a recursividade para achar com o CFOP nulo
         pkb_recup_param_cfop ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cfop_id                   => null
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_extipi_id                 => enc_extipi_id
                              , enc_dm_orig_merc              => enc_dm_orig_merc
                              , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cfop fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cfop;    
   --
   -- Procedimento de recuperar parâmetros do NCM
   procedure pkb_recup_param_ncm ( evc_dm_tipo_param             in aliq_tipoimp_ncm.dm_tipo_param%type
                                 , enc_ncm_id                    in ncm.id%type
                                 , enc_extipi_id                 in ex_tipi.id%type
                                 , enc_dm_orig_merc              in aliq_tipoimp_ncm.dm_orig_merc%type
                                 , enc_dm_calc_cons_final        in aliq_tipoimp_ncm.dm_calc_cons_final%type
                                 )
   is
      --
      cursor c_ncm is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm p
       where p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 8;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_ncm evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_ncm loop
         exit when c_ncm%notfound or (c_ncm%notfound) is null;
         --
         vn_fase := 8.1;
         --
         vn_qtde_cfop := 1;
         --| Verifica no nivel abaixo (CFOP)
         pkb_recup_param_cfop ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , enc_cfop_id                   => en_cfop_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_extipi_id                 => rec.extipi_id
                              , enc_dm_orig_merc              => rec.dm_orig_merc
                              , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                              );
         --
         vn_fase := 8.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 8.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm.id,0) <= 0
         and ( trim(enc_ncm_id) is not null or nvl(vn_qtde_ncm,0) > 0 )
         then
         --
         vn_ncm_id := pk_csf.fkg_ncm_id_superior ( ev_cod_ncm => pk_csf.fkg_cod_ncm_id ( en_ncm_id => enc_ncm_id ) );
         --
         if nvl(vn_ncm_id,0) <= 0 then
            vn_qtde_ncm := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o NCM nulo
         pkb_recup_param_ncm ( evc_dm_tipo_param             => evc_dm_tipo_param
                             , enc_ncm_id                    => vn_ncm_id
                             , enc_extipi_id                 => enc_extipi_id
                             , enc_dm_orig_merc              => enc_dm_orig_merc
                             , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                             );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_ncm fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_ncm;
   --
   -- Procedimento de recuperar parâmetros do Ex-Tipi
   procedure pkb_recup_param_extipi ( evc_dm_tipo_param             in aliq_tipoimp_ncm.dm_tipo_param%type
                                    , enc_extipi_id                 in ex_tipi.id%type
                                    , enc_dm_orig_merc              in aliq_tipoimp_ncm.dm_orig_merc%type
                                    , enc_dm_calc_cons_final        in aliq_tipoimp_ncm.dm_calc_cons_final%type
                                    )
   is
      --
      cursor c_extipi is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm p
       where p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss               between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 7;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_extipi evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_extipi loop
         exit when c_extipi%notfound or (c_extipi%notfound) is null;
         --
         vn_fase := 7.1;
         --
         vn_qtde_ncm := 1;
         --| Verifica no nivel abaixo (NCM)
         pkb_recup_param_ncm ( evc_dm_tipo_param             => rec.dm_tipo_param
                             , enc_ncm_id                    => en_ncm_id
                             , enc_extipi_id                 => rec.extipi_id
                             , enc_dm_orig_merc              => rec.dm_orig_merc
                             , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                             );
         --
         vn_fase := 7.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm.id,0) <= 0
         and ( trim(enc_extipi_id) is not null or nvl(vn_qtde_extipi,0) > 0 )
         then
         --
         vn_qtde_extipi := 0;
         -- Aplica a recursividade para achar com o Ex-Tipi nulo
         pkb_recup_param_extipi ( evc_dm_tipo_param             => evc_dm_tipo_param
                                , enc_extipi_id                 => null
                                , enc_dm_orig_merc              => enc_dm_orig_merc
                                , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_extipi fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_extipi;
   --
   -- Procedimento de recuperar parâmetros Origem da Mercadoria
   procedure pkb_recup_param_origmerc ( evc_dm_tipo_param             in aliq_tipoimp_ncm.dm_tipo_param%type
                                      , enc_dm_orig_merc              in aliq_tipoimp_ncm.dm_orig_merc%type
                                      , enc_dm_calc_cons_final        in aliq_tipoimp_ncm.dm_calc_cons_final%type
                                      )
   is
      --
      cursor c_origmerc is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_orig_merc
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm p
       where p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss               between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 7;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_origmerc evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_origmerc loop
         exit when c_origmerc%notfound or (c_origmerc%notfound) is null;
         --
         vn_fase := 7.1;
         --
         vn_qtde_extipi := 1;
         --| Verifica no nivel abaixo (Ex-Tipi)
         pkb_recup_param_extipi ( evc_dm_tipo_param             => rec.dm_tipo_param
                                , enc_extipi_id                 => en_extipi_id
                                , enc_dm_orig_merc              => rec.dm_orig_merc
                                , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                );
         --
         vn_fase := 7.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm.id,0) <= 0
         and ( trim(enc_dm_orig_merc) is not null or nvl(vn_qtde_origmerc,0) > 0 )
         then
         --
         vn_qtde_origmerc := 0;
         -- Aplica a recursividade para achar com o Origem da Mercadoria nulo
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_orig_merc              => null
                                  , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_origmerc fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_origmerc;
   --
   -- Procedimento de recuperar parâmetros do Consumidor Final
   procedure pkb_recup_param_consfinal ( evc_dm_tipo_param             in aliq_tipoimp_ncm.dm_tipo_param%type
                                       , enc_dm_calc_cons_final        in aliq_tipoimp_ncm.dm_calc_cons_final%type
                                       )
   is
      --
      cursor c_cfinal is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm p
       where p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss               between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 4;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_consfinal evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_cfinal loop
         exit when c_cfinal%notfound or (c_cfinal%notfound) is null;
         --
         vn_fase := 4.1;
         --
         vn_qtde_origmerc := 1;
         --
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_orig_merc              => en_dm_orig_merc
                                  , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                  );
         --
         vn_fase := 4.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm.id,0) <= 0
         and enc_dm_calc_cons_final in (0, 1, 3, 4, 5, 6, 7) then
         --
         -- Aplica a recursividade para achar com o Consumidor Final Indiferente
         pkb_recup_param_consfinal ( evc_dm_tipo_param             => evc_dm_tipo_param
                                   , enc_dm_calc_cons_final        => 2
                                   );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_consfinal fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_consfinal;
   --
   -- Procedimento de recuperar parâmetros do Tipo de Parametro (E-Excecao ou R-Regra)
   procedure pkb_recup_param_tpparam ( evc_dm_tipo_param       in param_calc_icmsst.dm_tipo_param%type
                                     )
   is
      --
      cursor c_tpparam is
      select distinct
             p.prioridade
           , p.dm_tipo_param
        from aliq_tipoimp_ncm p
       where p.tipoimposto_id             = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param              = evc_dm_tipo_param
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_tpparam evc_dm_tipo_param: ' || evc_dm_tipo_param
                               );
      commit;*/
      --
      for rec in c_tpparam loop
         exit when c_tpparam%notfound or (c_tpparam%notfound) is null;
         --
         vn_fase := 3.1;
         --
         pkb_recup_param_consfinal ( evc_dm_tipo_param             => rec.dm_tipo_param
                                   , enc_dm_calc_cons_final        => vn_dm_calc_cons_final
                                   );
         --
         vn_fase := 3.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm.id,0) <= 0
         and nvl(vn_qtde_tpparam,0) > 0
         then
         --
         vn_qtde_tpparam := 0;
         -- Aplica a recursividade para achar com o Tipo de Parametro "Regra"
         pkb_recup_param_tpparam ( evc_dm_tipo_param       => 'R' ); -- Regra
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpparam fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpparam;
   --
begin
   --
   vn_fase := 1;
   --
   if en_dm_tipo_part = 1 then -- Fisica
      vn_dm_calc_fisica := 1; -- Sim
   elsif en_dm_tipo_part = 2 then -- Juridica
      vn_dm_calc_fisica := 0; -- Não
   else
      --
      vn_dm_calc_fisica := 2; -- Indiferente
      --
   end if;
   --
   vn_fase := 1.1;
   --
   if en_dm_cons_final = 1 then -- Consumidor Final Sim
      vn_dm_calc_cons_final := 1; -- Sim
   elsif en_dm_cons_final = 0 then -- Consumidor Final Não
      vn_dm_calc_cons_final := 0; -- Não
   --
   --3 - Industria, 4 - Comercio, 5-Atacado, 6 - Varejo, 7 - Industria / Consumo Final
   elsif en_dm_cons_final = 3 then
      vn_dm_calc_cons_final := 3;
   elsif en_dm_cons_final = 4 then
      vn_dm_calc_cons_final := 4;
   elsif en_dm_cons_final = 5 then
      vn_dm_calc_cons_final := 5;
   elsif en_dm_cons_final = 6 then
      vn_dm_calc_cons_final := 6;
   elsif en_dm_cons_final = 7 then
      vn_dm_calc_cons_final := 7;
   --
   else
      vn_dm_calc_cons_final := 2; -- Indiferente
   end if;
   --
   vn_fase := 1.2;
   --
   if en_dm_ind_ie_part in (1) then
      vn_dm_calc_contr_isento   := 0; -- Não
      vn_dm_calc_nao_contr      := 0; -- Não
   elsif en_dm_ind_ie_part in (2) then
      vn_dm_calc_contr_isento   := 1; -- Sim
      vn_dm_calc_nao_contr      := 0; -- Não
   elsif en_dm_ind_ie_part in (9) then
      vn_dm_calc_contr_isento   := 0; -- Não
      vn_dm_calc_nao_contr      := 1; -- Sim
   else
      -- Indiferente
      vn_dm_calc_contr_isento   := 2;
      vn_dm_calc_nao_contr      := 2;
   end if;
   --
   vn_fase := 1.3;
   --
   begin
      --
      select j.suframa
        into vv_empresa_suframa
        from empresa e
           , juridica j
       where e.id = en_empresa_id
         and j.pessoa_id = e.pessoa_id
         and trim(j.suframa) is not null
         and rownum = 1;
      --
   exception
      when others then
         vv_empresa_suframa := null;
   end;
   --
   vn_fase := 1.4;
   --
   if en_dm_ind_emit = 0 then -- Emissão Propria
      --
      if trim(vv_empresa_suframa) is not null then
         vn_dm_emit_com_suframa := 1;
      else
         vn_dm_emit_com_suframa := 0;
      end if;
      --
      if en_dm_part_tem_suframa = 1 then
         vn_dm_dest_com_suframa := 1;
      else
         vn_dm_dest_com_suframa := 0;
      end if;
      --
   else
      --
      if trim(vv_empresa_suframa) is not null then
         vn_dm_dest_com_suframa := 1;
      else
         vn_dm_dest_com_suframa := 0;
      end if;
      --
      if en_dm_part_tem_suframa = 1 then
         vn_dm_emit_com_suframa := 1;
      else
         vn_dm_emit_com_suframa := 0;
      end if;
      --
   end if;
   --
   st_row_aliq_tipoimp_ncm := null;
   --
   vn_fase := 1.9;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde_tpparam := 1;
      --| Verifica no nivel abaixo (Tipo de Parametro (E-Excecao ou R-Regra))
      pkb_recup_param_tpparam ( evc_dm_tipo_param => 'E' ); -- Primeiro "Excecao"
      --
      vn_fase := 99;
      -- Se encontrou o parâmetro, finaliza o processo
      if nvl(st_row_aliq_tipoimp_ncm.id,0) > 0 then
         --
         exit;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_aliq_tipoimp_ncm fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_aliq_tipoimp_ncm;

-------------------------------------------------------------------------------------------------------

--| Procedimento de recuperar parâmetros de calculo de Aliquota do Imposto por NCM, detalhe por ITEM da Empresa: Tratar IPI, PIS e COFINS
procedure pkb_recup_aliq_tipoimp_ncm_emp ( en_soliccalc_id              in solic_calc.id%type
                                         , en_empresa_id                in empresa.id%type
                                         , en_natoper_id                in nat_oper.id%type
                                         , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                                         , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                                         , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                         , ev_cpf_cnpj_part             in varchar2
                                         , en_estado_id_dest            in estado.id%type
                                         , en_dm_tipo_part              in solic_calc.dm_tipo_part%type
                                         , en_dm_cons_final             in solic_calc.dm_cons_final%type
                                         , en_dm_ind_ie_part            in solic_calc.dm_ind_ie_part%type
                                         , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                                         , en_dm_part_tem_suframa       in solic_calc.dm_part_tem_suframa%type
                                         , en_dm_ind_ativ_part          in solic_calc.dm_ind_ativ_part%type
                                         --| Item
                                         , en_item_id                   in item.id%type
                                         , en_ncm_id                    in ncm.id%type
                                         , en_extipi_id                 in ex_tipi.id%type
                                         , en_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                         , en_cfop_id                   in cfop.id%type
                                         , en_tipoimposto_id            in tipo_imposto.id%type
                                         , st_row_aliq_tipoimp_ncm_empr out aliq_tipoimp_ncm_empresa%rowtype
                                         )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_dm_calc_fisica         param_calc_icms_empr.dm_calc_fisica%type;
   vn_dm_calc_cons_final     param_calc_icms_empr.dm_calc_cons_final%type;
   vn_dm_calc_contr_isento   param_calc_icms_empr.dm_calc_contr_isento%type;
   vn_dm_calc_nao_contr      param_calc_icms_empr.dm_calc_nao_contr%type;
   vn_dm_emit_com_suframa    param_calc_icms_empr.dm_emit_com_suframa%type;
   vn_dm_dest_com_suframa    param_calc_icms_empr.dm_dest_com_suframa%type;
   vv_empresa_suframa        juridica.suframa%type;
   --
   vn_qtde_cfop     number;
   vn_qtde_ncm      number;
   vn_qtde_extipi   number;
   vn_qtde_origmerc number;
   vn_qtde_item     number;
   vn_qtde_part     number;
   vn_qtde_natoper  number;
   vn_qtde_tpparam  number;
   vn_ncm_id        ncm.id%type;
   --
   cursor c_dados is
   select distinct
          p.prioridade
     from aliq_tipoimp_ncm_empresa p
    where p.empresa_id             = en_empresa_id
      and p.tipoimposto_id         = en_tipoimposto_id
      and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
    order by p.prioridade;
   --
   -- Procedimento de recuperar parâmetros do NCM
   procedure pkb_recup_param_cfop ( evc_dm_tipo_param             in aliq_tipoimp_ncm_empresa.dm_tipo_param%type
                                  , enc_cfop_id                   in cfop.id%type
                                  , enc_ncm_id                    in ncm.id%type
                                  , enc_extipi_id                 in ex_tipi.id%type
                                  , enc_dm_orig_merc              in aliq_tipoimp_ncm_empresa.dm_orig_merc%type
                                  , enc_item_id                   in item.id%type
                                  , enc_natoper_id                in nat_oper.id%type
                                  , evc_cpf_cnpj_part             in varchar2
                                  , enc_dm_calc_cons_final        in aliq_tipoimp_ncm_empresa.dm_calc_cons_final%type
                                  )
   is
      --
      cursor c_cfop is
      select p.*
        from aliq_tipoimp_ncm_empresa p
       where p.empresa_id              = en_empresa_id
         and p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.cfop_id,0)          = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 9;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_cfop pkb_recup_param_ncm: ' || evc_dm_tipo_param
                                                || ' enc_cfop_id: ' || enc_cfop_id
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_item_id: ' || enc_item_id
                                                || ' enc_natoper_id: ' || enc_natoper_id
                                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_cfop loop
         exit when c_cfop%notfound or (c_cfop%notfound) is null;
         --
         vn_fase := 9.1;
         --
         --insert into erro values (erro_Seq.nextval || ' ' || rec.id);
         --
         st_row_aliq_tipoimp_ncm_empr := rec;
         --
         if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 9.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) <= 0
         and ( trim(enc_cfop_id) is not null or nvl(vn_qtde_cfop,0) > 0 )
         then
         --
         vn_qtde_cfop := 0;
         -- Aplica a recursividade para achar com o CFOP nulo
         pkb_recup_param_cfop ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cfop_id                   => null
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_extipi_id                 => enc_extipi_id
                              , enc_dm_orig_merc              => enc_dm_orig_merc
                              , enc_item_id                   => enc_item_id
                              , enc_natoper_id                => enc_natoper_id
                              , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                              , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cfop fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cfop;    
   --
   -- Procedimento de recuperar parâmetros do NCM
   procedure pkb_recup_param_ncm ( evc_dm_tipo_param             in aliq_tipoimp_ncm_empresa.dm_tipo_param%type
                                 , enc_ncm_id                    in ncm.id%type
                                 , enc_extipi_id                 in ex_tipi.id%type
                                 , enc_dm_orig_merc              in aliq_tipoimp_ncm_empresa.dm_orig_merc%type
                                 , enc_item_id                   in item.id%type
                                 , enc_natoper_id                in nat_oper.id%type
                                 , evc_cpf_cnpj_part             in varchar2
                                 , enc_dm_calc_cons_final        in aliq_tipoimp_ncm_empresa.dm_calc_cons_final%type
                                 )
   is
      --
      cursor c_ncm is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.item_id
           , p.natoper_id
           , p.cpf_cnpj
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm_empresa p
       where p.empresa_id              = en_empresa_id
         and p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 8;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_ncm pkb_recup_param_ncm: ' || evc_dm_tipo_param
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_item_id: ' || enc_item_id
                                                || ' enc_natoper_id: ' || enc_natoper_id
                                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_ncm loop
         exit when c_ncm%notfound or (c_ncm%notfound) is null;
         --
         vn_fase := 8.1;
         --
         vn_qtde_cfop := 1;
         --| Verifica no nivel abaixo (CFOP)
         pkb_recup_param_cfop ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , enc_cfop_id                   => en_cfop_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_extipi_id                 => rec.extipi_id
                              , enc_dm_orig_merc              => rec.dm_orig_merc
                              , enc_item_id                   => rec.item_id
                              , enc_natoper_id                => rec.natoper_id
                              , evc_cpf_cnpj_part             => rec.cpf_cnpj
                              , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                              );
         --
         vn_fase := 8.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 8.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) <= 0
         and ( trim(enc_ncm_id) is not null or nvl(vn_qtde_ncm,0) > 0 )
         then
         --
         vn_ncm_id := pk_csf.fkg_ncm_id_superior ( ev_cod_ncm => pk_csf.fkg_cod_ncm_id ( en_ncm_id => enc_ncm_id ) );
         --
         if nvl(vn_ncm_id,0) <= 0 then
            vn_qtde_ncm := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o NCM nulo
         pkb_recup_param_ncm ( evc_dm_tipo_param             => evc_dm_tipo_param
                             , enc_ncm_id                    => vn_ncm_id
                             , enc_extipi_id                 => enc_extipi_id
                             , enc_dm_orig_merc              => enc_dm_orig_merc
                             , enc_item_id                   => enc_item_id
                             , enc_natoper_id                => enc_natoper_id
                             , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                             , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                             );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_ncm fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_ncm;
   --
   -- Procedimento de recuperar parâmetros do Ex-Tipo
   procedure pkb_recup_param_extipi ( evc_dm_tipo_param             in aliq_tipoimp_ncm_empresa.dm_tipo_param%type
                                    , enc_extipi_id                 in ex_tipi.id%type
                                    , enc_dm_orig_merc              in aliq_tipoimp_ncm_empresa.dm_orig_merc%type
                                    , enc_item_id                   in item.id%type
                                    , enc_natoper_id                in nat_oper.id%type
                                    , evc_cpf_cnpj_part             in varchar2
                                    , enc_dm_calc_cons_final        in aliq_tipoimp_ncm_empresa.dm_calc_cons_final%type
                                    )
   is
      --
      cursor c_extipi is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.extipi_id
           , p.dm_orig_merc
           , p.item_id
           , p.natoper_id
           , p.cpf_cnpj
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm_empresa p
       where p.empresa_id              = en_empresa_id
         and p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 7;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_extipi evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_item_id: ' || enc_item_id
                                                || ' enc_natoper_id: ' || enc_natoper_id
                                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_extipi loop
         exit when c_extipi%notfound or (c_extipi%notfound) is null;
         --
         vn_fase := 7.1;
         --
         vn_qtde_ncm := 1;
         --| Verifica no nivel abaixo (NCM)
         pkb_recup_param_ncm ( evc_dm_tipo_param             => rec.dm_tipo_param
                             , enc_ncm_id                    => en_ncm_id
                             , enc_extipi_id                 => rec.extipi_id
                             , enc_dm_orig_merc              => rec.dm_orig_merc
                             , enc_item_id                   => rec.item_id
                             , enc_natoper_id                => rec.natoper_id
                             , evc_cpf_cnpj_part             => rec.cpf_cnpj
                             , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                             );
         --
         vn_fase := 7.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) <= 0
         and ( trim(enc_extipi_id) is not null or nvl(vn_qtde_extipi,0) > 0 )
         then
         --
         vn_qtde_extipi := 0;
         -- Aplica a recursividade para achar com o Ex-Tipi nulo
         pkb_recup_param_extipi ( evc_dm_tipo_param             => evc_dm_tipo_param
                                , enc_extipi_id                 => null
                                , enc_dm_orig_merc              => enc_dm_orig_merc
                                , enc_item_id                   => enc_item_id
                                , enc_natoper_id                => enc_natoper_id
                                , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                                , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_extipi fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_extipi;
   --
   -- Procedimento de recuperar parâmetros do Origem da Mercadoria
   procedure pkb_recup_param_origmerc ( evc_dm_tipo_param             in aliq_tipoimp_ncm_empresa.dm_tipo_param%type
                                      , enc_dm_orig_merc              in aliq_tipoimp_ncm_empresa.dm_orig_merc%type
                                      , enc_item_id                   in item.id%type
                                      , enc_natoper_id                in nat_oper.id%type
                                      , evc_cpf_cnpj_part             in varchar2
                                      , enc_dm_calc_cons_final        in aliq_tipoimp_ncm_empresa.dm_calc_cons_final%type
                                      )
   is
      --
      cursor c_origmerc is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_orig_merc
           , p.item_id
           , p.natoper_id
           , p.cpf_cnpj
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm_empresa p
       where p.empresa_id              = en_empresa_id
         and p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 7;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_origmerc evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                                || ' enc_item_id: ' || enc_item_id
                                                || ' enc_natoper_id: ' || enc_natoper_id
                                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_origmerc loop
         exit when c_origmerc%notfound or (c_origmerc%notfound) is null;
         --
         vn_fase := 7.1;
         --
         vn_qtde_extipi := 1;
         --| Verifica no nivel abaixo (Ex-Tipi)
         pkb_recup_param_extipi ( evc_dm_tipo_param             => rec.dm_tipo_param
                                , enc_extipi_id                 => en_extipi_id
                                , enc_dm_orig_merc              => rec.dm_orig_merc
                                , enc_item_id                   => rec.item_id
                                , enc_natoper_id                => rec.natoper_id
                                , evc_cpf_cnpj_part             => rec.cpf_cnpj
                                , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                );
         --
         vn_fase := 7.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) <= 0
         and ( trim(enc_dm_orig_merc) is not null or nvl(vn_qtde_origmerc,0) > 0 )
         then
         --
         vn_qtde_origmerc := 0;
         -- Aplica a recursividade para achar com o Origem da Mercadoria nulo
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_orig_merc              => null
                                  , enc_item_id                   => enc_item_id
                                  , enc_natoper_id                => enc_natoper_id
                                  , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                                  , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_origmerc fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_origmerc;
   --
   -- Procedimento de recuperar parâmetros do Item
   procedure pkb_recup_param_item ( evc_dm_tipo_param             in aliq_tipoimp_ncm_empresa.dm_tipo_param%type
                                  , enc_item_id                   in item.id%type
                                  , enc_natoper_id                in nat_oper.id%type
                                  , evc_cpf_cnpj_part             in varchar2
                                  , enc_dm_calc_cons_final        in aliq_tipoimp_ncm_empresa.dm_calc_cons_final%type
                                  )
   is
      --
      cursor c_item is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.item_id
           , p.natoper_id
           , p.cpf_cnpj
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm_empresa p
       where p.empresa_id              = en_empresa_id
         and p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 6;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_item evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_item_id: ' || enc_item_id
                                                || ' enc_natoper_id: ' || enc_natoper_id
                                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_item loop
         exit when c_item%notfound or (c_item%notfound) is null;
         --
         vn_fase := 6.1;
         --
         vn_qtde_origmerc := 1;
         --
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_orig_merc              => en_dm_orig_merc
                                  , enc_item_id                   => rec.item_id
                                  , enc_natoper_id                => rec.natoper_id
                                  , evc_cpf_cnpj_part             => rec.cpf_cnpj
                                  , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                  );
         --
         vn_fase := 6.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 6.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) <= 0
         and ( trim(enc_item_id) is not null or nvl(vn_qtde_item,0) > 0 )
         then
         --
         vn_qtde_item := 0;
         -- Aplica a recursividade para achar com o ITEM nulo
         pkb_recup_param_item ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_item_id                   => null
                              , enc_natoper_id                => enc_natoper_id
                              , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                              , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_item fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_item;
   --
   -- Procedimento de recuperar parâmetros da Natureza da Operação
   procedure pkb_recup_param_natoper ( evc_dm_tipo_param             in aliq_tipoimp_ncm_empresa.dm_tipo_param%type
                                     , enc_natoper_id                in nat_oper.id%type
                                     , evc_cpf_cnpj_part             in varchar2
                                     , enc_dm_calc_cons_final        in aliq_tipoimp_ncm_empresa.dm_calc_cons_final%type
                                     )
   is
      --
      cursor c_natoper is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.natoper_id
           , p.cpf_cnpj
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm_empresa p
       where p.empresa_id              = en_empresa_id
         and p.tipoimposto_id          = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 5;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_natoper evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_natoper_id: ' || enc_natoper_id
                                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_natoper loop
         exit when c_natoper%notfound or (c_natoper%notfound) is null;
         --
         vn_fase := 5.1;
         --
         vn_qtde_item := 1;
         --| Verifica no nivel abaixo (Item)
         pkb_recup_param_item ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , enc_item_id                   => en_item_id
                              , enc_natoper_id                => rec.natoper_id
                              , evc_cpf_cnpj_part             => rec.cpf_cnpj
                              , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                              );
         --
         vn_fase := 5.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 5.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) <= 0
         and ( trim(enc_natoper_id) is not null or nvl(vn_qtde_natoper,0) > 0 )
         then
         --
         vn_qtde_natoper := 0;
         -- Aplica a recursividade para achar com o Natureza Da Operação nulo
         pkb_recup_param_natoper ( evc_dm_tipo_param             => evc_dm_tipo_param
                                 , enc_natoper_id                => null
                                 , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                                 , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                 );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_natoper fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_natoper;
   --
   -- Procedimento de recuperar parâmetros do CPF/CNPJ Participante
   procedure pkb_recup_param_part ( evc_dm_tipo_param             in aliq_tipoimp_ncm_empresa.dm_tipo_param%type
                                  , evc_cpf_cnpj_part             in varchar2
                                  , enc_dm_calc_cons_final        in aliq_tipoimp_ncm_empresa.dm_calc_cons_final%type
                                  )
   is
      --
      cursor c_part is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.cpf_cnpj
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm_empresa p
       where p.empresa_id                 = en_empresa_id
         and p.tipoimposto_id             = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param              = evc_dm_tipo_param
         and nvl(trim(p.cpf_cnpj),'0')    = nvl(trim(evc_cpf_cnpj_part),'0')
         and p.dm_calc_cons_final         = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 4;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_part evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_part loop
         exit when c_part%notfound or (c_part%notfound) is null;
         --
         vn_fase := 4.1;
         --
         vn_qtde_natoper := 1;
         --| Verifica no nivel abaixo (Natureza da Operação)
         pkb_recup_param_natoper ( evc_dm_tipo_param             => rec.dm_tipo_param
                                 , enc_natoper_id                => en_natoper_id
                                 , evc_cpf_cnpj_part             => rec.cpf_cnpj
                                 , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                 );
         --
         vn_fase := 4.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) <= 0
         and ( trim(evc_cpf_cnpj_part) is not null or nvl(vn_qtde_part,0) > 0 )
         then
         --
         vn_qtde_part := 0;
         -- Aplica a recursividade para achar com o Participante nulo
         pkb_recup_param_part ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , evc_cpf_cnpj_part             => null
                              , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_part fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_part;
   --
   -- Procedimento de recuperar parâmetros do Consumidor Final
   procedure pkb_recup_param_consfinal ( evc_dm_tipo_param             in aliq_tipoimp_ncm_empresa.dm_tipo_param%type
                                       , enc_dm_calc_cons_final        in aliq_tipoimp_ncm_empresa.dm_calc_cons_final%type
                                       )
   is
      --
      cursor c_cfinal is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_cons_final
        from aliq_tipoimp_ncm_empresa p
       where p.empresa_id                 = en_empresa_id
         and p.tipoimposto_id             = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param              = evc_dm_tipo_param
         and p.dm_calc_cons_final         = enc_dm_calc_cons_final
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 4;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_consfinal evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                               );
      commit;*/
      --
      for rec in c_cfinal loop
         exit when c_cfinal%notfound or (c_cfinal%notfound) is null;
         --
         vn_fase := 4.1;
         --
         vn_qtde_part := 1;
         --| Verifica no nivel abaixo (Participante)
         pkb_recup_param_part ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , evc_cpf_cnpj_part             => ev_cpf_cnpj_part
                              , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                              );
         --
         vn_fase := 4.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) <= 0
         and enc_dm_calc_cons_final in (0, 1, 3, 4, 5, 6, 7) then
         --
         -- Aplica a recursividade para achar com o Consumidor Final Indiferente
         pkb_recup_param_consfinal ( evc_dm_tipo_param             => evc_dm_tipo_param
                                   , enc_dm_calc_cons_final        => 2
                                   );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_consfinal fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_consfinal;   
   --
   -- Procedimento de recuperar parâmetros do Tipo de Parametro (E-Excecao ou R-Regra)
   procedure pkb_recup_param_tpparam ( evc_dm_tipo_param       in aliq_tipoimp_ncm_empresa.dm_tipo_param%type
                                     )
   is
      --
      cursor c_tpparam is
      select distinct
             p.prioridade
           , p.dm_tipo_param
        from aliq_tipoimp_ncm_empresa p
       where p.empresa_id             = en_empresa_id
         and p.tipoimposto_id         = en_tipoimposto_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param              = evc_dm_tipo_param
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_tpparam evc_dm_tipo_param: ' || evc_dm_tipo_param
                               );
      commit;*/
      --
      for rec in c_tpparam loop
         exit when c_tpparam%notfound or (c_tpparam%notfound) is null;
         --
         vn_fase := 3.1;
         --
         --| Verifica no nivel abaixo (Participante
         pkb_recup_param_consfinal ( evc_dm_tipo_param             => rec.dm_tipo_param
                                   , enc_dm_calc_cons_final        => vn_dm_calc_cons_final
                                   );
         --
         vn_fase := 3.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) <= 0
         and nvl(vn_qtde_tpparam,0) > 0
         then
         --
         vn_qtde_tpparam := 0;
         -- Aplica a recursividade para achar com o Tipo de Parametro "Regra"
         pkb_recup_param_tpparam ( evc_dm_tipo_param       => 'R' ); -- Regra
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpparam fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpparam;
   --
begin
   --
   vn_fase := 1;
   --
   if en_dm_tipo_part = 1 then -- Fisica
      vn_dm_calc_fisica := 1; -- Sim
   elsif en_dm_tipo_part = 2 then -- Juridica
      vn_dm_calc_fisica := 0; -- Não
   else
      --
      vn_dm_calc_fisica := 2; -- Indiferente
      --
   end if;
   --
   vn_fase := 1.1;
   --
   if en_dm_cons_final = 1 then -- Consumidor Final Sim
      vn_dm_calc_cons_final := 1; -- Sim
   elsif en_dm_cons_final = 0 then -- Consumidor Final Não
      vn_dm_calc_cons_final := 0; -- Não
   --
   --3 - Industria, 4 - Comercio, 5-Atacado, 6 - Varejo
   elsif en_dm_cons_final = 3 then
      vn_dm_calc_cons_final := 3;
   elsif en_dm_cons_final = 4 then
      vn_dm_calc_cons_final := 4;
   elsif en_dm_cons_final = 5 then
      vn_dm_calc_cons_final := 5;
   elsif en_dm_cons_final = 6 then
      vn_dm_calc_cons_final := 6;
   elsif en_dm_cons_final = 7 then
      vn_dm_calc_cons_final := 7;
   --
   else
      vn_dm_calc_cons_final := 2; -- Indiferente
   end if;
   --
   vn_fase := 1.2;
   --
   if en_dm_ind_ie_part in (1) then
      vn_dm_calc_contr_isento   := 0; -- Não
      vn_dm_calc_nao_contr      := 0; -- Não
   elsif en_dm_ind_ie_part in (2) then
      vn_dm_calc_contr_isento   := 1; -- Sim
      vn_dm_calc_nao_contr      := 0; -- Não
   elsif en_dm_ind_ie_part in (9) then
      vn_dm_calc_contr_isento   := 0; -- Não
      vn_dm_calc_nao_contr      := 1; -- Sim
   else
      -- Indiferente
      vn_dm_calc_contr_isento   := 2;
      vn_dm_calc_nao_contr      := 2;
   end if;
   --
   vn_fase := 1.3;
   --
   begin
      --
      select j.suframa
        into vv_empresa_suframa
        from empresa e
           , juridica j
       where e.id = en_empresa_id
         and j.pessoa_id = e.pessoa_id
         and trim(j.suframa) is not null
         and rownum = 1;
      --
   exception
      when others then
         vv_empresa_suframa := null;
   end;
   --
   vn_fase := 1.4;
   --
   if en_dm_ind_emit = 0 then -- Emissão Propria
      --
      if trim(vv_empresa_suframa) is not null then
         vn_dm_emit_com_suframa := 1;
      else
         vn_dm_emit_com_suframa := 0;
      end if;
      --
      if en_dm_part_tem_suframa = 1 then
         vn_dm_dest_com_suframa := 1;
      else
         vn_dm_dest_com_suframa := 0;
      end if;
      --
   else
      --
      if trim(vv_empresa_suframa) is not null then
         vn_dm_dest_com_suframa := 1;
      else
         vn_dm_dest_com_suframa := 0;
      end if;
      --
      if en_dm_part_tem_suframa = 1 then
         vn_dm_emit_com_suframa := 1;
      else
         vn_dm_emit_com_suframa := 0;
      end if;
      --
   end if;
   --
   st_row_aliq_tipoimp_ncm_empr := null;
   --
   vn_fase := 1.9;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde_tpparam := 1;
      --| Verifica no nivel abaixo (Tipo de Parametro (E-Excecao ou R-Regra))
      pkb_recup_param_tpparam ( evc_dm_tipo_param => 'E' ); -- Primeiro "Excecao"
      --
      vn_fase := 99;
      -- Se encontrou o parâmetro, finaliza o processo
      if nvl(st_row_aliq_tipoimp_ncm_empr.id,0) > 0 then
         --
         exit;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_aliq_tipoimp_ncm_emp fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_aliq_tipoimp_ncm_emp;

-------------------------------------------------------------------------------------------------------

-- Procedimento de calculo Aliquota do Imposto por NCM: Tratar IPI, PIS e COFINS
procedure pkb_calc_aliq_tipoimp_ncm ( en_soliccalc_id              in solic_calc.id%type
                                    , en_empresa_id                in empresa.id%type
                                    , en_cnae_id                   in cnae.id%type
                                    , en_inctrib_id                in inc_trib.id%type
                                    , en_regtrib_id                in reg_trib.id%type
                                    , en_formatrib_id              in forma_trib.id%type
                                    , en_natoper_id                in nat_oper.id%type
                                    , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                                    , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                                    , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                    , ev_cpf_cnpj_part             in varchar2
                                    , en_estado_id_orig            in estado.id%type
                                    , en_estado_id_dest            in estado.id%type
                                    , en_dm_tipo_part              in solic_calc.dm_tipo_part%type
                                    , en_dm_cons_final             in solic_calc.dm_cons_final%type
                                    , en_dm_ind_ie_part            in solic_calc.dm_ind_ie_part%type
                                    , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                                    , en_dm_part_tem_suframa       in solic_calc.dm_part_tem_suframa%type
                                    , en_dm_ind_ativ_part          in solic_calc.dm_ind_ativ_part%type
                                    , en_dm_mot_des_icms_part      in solic_calc.dm_mot_des_icms_part%type
                                    , en_dm_trib_imposto           in number
                                    , en_codst_id                  in cod_st.id%type
                                    , en_obsfiscal_id              in obs_fiscal.id%type
                                    , ev_obs_compl                 in cfop_tipoimp.obs_compl%type
                                    --| Item
                                    , en_item_id                   in item.id%type
                                    , en_ncm_id                    in ncm.id%type
                                    , en_extipi_id                 in ex_tipi.id%type
                                    , en_cfop_id                   in cfop.id%type
                                    , en_tipoimposto_id            in tipo_imposto.id%type
                                    --| Retorno do Imposto
                                    , est_item_solic_calc          in out nocopy  item_solic_calc%rowtype
                                    , est_row_imp_itemsc           in out nocopy  imp_itemsc%rowtype
                                    )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_row_aliq_tipoimp_ncm_empr    aliq_tipoimp_ncm_empresa%rowtype := null;
   vt_row_aliq_tipoimp_ncm         aliq_tipoimp_ncm%rowtype := null;
   --
   vb_achou          boolean := false;
   vv_cod_st         cod_st.cod_st%type;
   vn_tipoimp_cd     tipo_imposto.cd%type;
   vv_tipoimp_sigla  tipo_imposto.sigla%type;
   vv_memoria        imp_itemsc.memoria%type;
   --
   vn_vl_imp_ii      number;
   vn_vl_imp_icmsst  number;
   vn_aux_base_calc  number;
   vn_dif_base_calc  number;
   vn_aux_imp_trib   number;
   --
   vn_codst_id               number;
   vn_dm_tipo                number(1);
   vn_indice                 number(10,4);
   vn_perc_major             number(6,4);
   vn_perc_reduc_bc          number(6,4);
   vn_dm_soma_frete          number(1);
   vn_dm_soma_seguro         number(1);
   vn_dm_soma_outra_desp     number(1);
   vn_dm_soma_ii             number(1);
   vn_dm_soma_icmsst         number(1);
   vn_obsfiscal_id           number;
   vv_obs_compl              varchar2(4000);
   vn_classeenqipi_id        number;
   vn_selocontripi_id        number;
   vn_qtde_selo_contr_ipi    number(12);
   vn_enqlegalipi_id         number;
   --
begin
   --
   vn_fase := 1;
   --
   vt_row_aliq_tipoimp_ncm_empr := null;
   vb_achou := false;
   --
   vn_tipoimp_cd := pk_csf.fkg_Tipo_Imposto_cd ( en_tipoimp_id => en_tipoimposto_id );
   --
   vv_tipoimp_sigla := pk_csf.fkg_Tipo_Imp_Sigla ( en_id => en_tipoimposto_id );
   --
   if nvl(en_dm_trib_imposto,0) = 1 then -- Sim, tributa imposto
      --
      vn_fase := 1.1;
      --| Procedimento de recuperar parâmetros de calculo de Aliquota do Imposto por NCM, detalhe por ITEM da Empresa: Tratar IPI, PIS e COFINS
      pkb_recup_aliq_tipoimp_ncm_emp ( en_soliccalc_id              => en_soliccalc_id
                                     , en_empresa_id                => en_empresa_id
                                     , en_natoper_id                => en_natoper_id
                                     , en_dm_ind_emit               => en_dm_ind_emit
                                     , en_dm_ind_oper               => en_dm_ind_oper
                                     , ed_dt_emiss                  => ed_dt_emiss
                                     , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                     , en_estado_id_dest            => en_estado_id_dest
                                     , en_dm_tipo_part              => en_dm_tipo_part
                                     , en_dm_cons_final             => en_dm_cons_final
                                     , en_dm_ind_ie_part            => en_dm_ind_ie_part
                                     , en_dm_reg_trib_part          => en_dm_reg_trib_part
                                     , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                                     , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                                     --| Item
                                     , en_item_id                   => en_item_id
                                     , en_ncm_id                    => en_ncm_id
                                     , en_extipi_id                 => en_extipi_id
                                     , en_dm_orig_merc              => est_item_solic_calc.dm_orig_merc
                                     , en_cfop_id                   => en_cfop_id
                                     , en_tipoimposto_id            => en_tipoimposto_id
                                     , st_row_aliq_tipoimp_ncm_empr => vt_row_aliq_tipoimp_ncm_empr
                                     );
      --
      vn_fase := 2;
      --
      if nvl(vt_row_aliq_tipoimp_ncm_empr.id,0) <= 0 then
         --| Procedimento de recuperar parâmetros de calculo de Aliquota do Imposto por NCM, Global: Tratar IPI, PIS e COFINS
         vn_fase := 2.1;
         --
         vt_row_aliq_tipoimp_ncm := null;
         --
         pkb_recup_aliq_tipoimp_ncm ( en_soliccalc_id              => en_soliccalc_id
                                    , en_empresa_id                => en_empresa_id
                                    , en_cnae_id                   => en_cnae_id
                                    , en_inctrib_id                => en_inctrib_id
                                    , en_regtrib_id                => en_regtrib_id
                                    , en_formatrib_id              => en_formatrib_id
                                    , en_dm_ind_emit               => en_dm_ind_emit
                                    , en_dm_ind_oper               => en_dm_ind_oper
                                    , ed_dt_emiss                  => ed_dt_emiss
                                    , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                    , en_estado_id_dest            => en_estado_id_dest
                                    , en_dm_tipo_part              => en_dm_tipo_part
                                    , en_dm_cons_final             => en_dm_cons_final
                                    , en_dm_ind_ie_part            => en_dm_ind_ie_part
                                    , en_dm_reg_trib_part          => en_dm_reg_trib_part
                                    , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                                    , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                                    --| Item
                                    , en_ncm_id                    => en_ncm_id
                                    , en_extipi_id                 => en_extipi_id
                                    , en_dm_orig_merc              => est_item_solic_calc.dm_orig_merc
                                    , en_cfop_id                   => en_cfop_id
                                    , en_tipoimposto_id            => en_tipoimposto_id
                                    , st_row_aliq_tipoimp_ncm      => vt_row_aliq_tipoimp_ncm
                                    );
         --
         vn_fase := 3;
         --
         if nvl(vt_row_aliq_tipoimp_ncm.id,0) <= 0 then
            --
            vn_fase := 3.1;
            -- avisa que não achou nada e atribui os parâmetros da origem (Global ou Natureza da Operação) CST, tributação
            vb_achou := true;
            --
            vv_memoria                := 'Nao localizado parametro do Imposto ' || vn_tipoimp_cd || '-' || vv_tipoimp_sigla || ', em dados da Natureza de Operacao ou CFOP Global';
            vn_codst_id               := en_codst_id;
            vn_dm_tipo                := 1; -- Percentual
            vn_indice                 := 0;
            vn_perc_major             := 0;
            vn_perc_reduc_bc          := 0;
            vn_dm_soma_frete          := 0;
            vn_dm_soma_seguro         := 0;
            vn_dm_soma_outra_desp     := 0;
            vn_dm_soma_ii             := 0;
            vn_dm_soma_icmsst         := 0;
            vn_obsfiscal_id           := en_obsfiscal_id;
            vv_obs_compl              := ev_obs_compl;
            vn_classeenqipi_id        := 0;
            vn_selocontripi_id        := 0;
            vn_qtde_selo_contr_ipi    := 0;
            vn_enqlegalipi_id         := 0;
            --
         else
            --
            vn_fase := 3.2;
            --
            vb_achou := true;
            -- atribui os dados recuperados para o calculo
            vn_codst_id               := nvl(vt_row_aliq_tipoimp_ncm.codst_id, en_codst_id);
            vn_dm_tipo                := vt_row_aliq_tipoimp_ncm.dm_tipo;
            vn_indice                 := vt_row_aliq_tipoimp_ncm.indice;
            vn_perc_major             := vt_row_aliq_tipoimp_ncm.perc_major;
            vn_perc_reduc_bc          := vt_row_aliq_tipoimp_ncm.perc_reduc_bc;
            vn_dm_soma_frete          := vt_row_aliq_tipoimp_ncm.dm_soma_frete;
            vn_dm_soma_seguro         := vt_row_aliq_tipoimp_ncm.dm_soma_seguro;
            vn_dm_soma_outra_desp     := vt_row_aliq_tipoimp_ncm.dm_soma_outra_desp;
            vn_dm_soma_ii             := vt_row_aliq_tipoimp_ncm.dm_soma_ii;
            vn_dm_soma_icmsst         := vt_row_aliq_tipoimp_ncm.dm_soma_icmsst;
            vn_obsfiscal_id           := vt_row_aliq_tipoimp_ncm.obsfiscal_id;
            vv_obs_compl              := vt_row_aliq_tipoimp_ncm.obs_compl;
            vn_classeenqipi_id        := vt_row_aliq_tipoimp_ncm.classeenqipi_id;
            vn_selocontripi_id        := vt_row_aliq_tipoimp_ncm.selocontripi_id;
            vn_qtde_selo_contr_ipi    := vt_row_aliq_tipoimp_ncm.qtde_selo_contr_ipi;
            vn_enqlegalipi_id         := vt_row_aliq_tipoimp_ncm.enqlegalipi_id;
            vv_memoria                := pk_csf_calc_fiscal.fkg_mem_aliq_tipoimp_ncm ( en_aliqtipoimpncm_id => vt_row_aliq_tipoimp_ncm.id );
            --
         end if;
         --
      else
         --
         vn_fase := 2.2;
         --
         vb_achou := true;
         -- atribui os dados recuperados para o calculo
         vn_codst_id               := nvl(vt_row_aliq_tipoimp_ncm_empr.codst_id, en_codst_id);
         vn_dm_tipo                := vt_row_aliq_tipoimp_ncm_empr.dm_tipo;
         vn_indice                 := vt_row_aliq_tipoimp_ncm_empr.indice;
         vn_perc_major             := vt_row_aliq_tipoimp_ncm_empr.perc_major;
         vn_perc_reduc_bc          := vt_row_aliq_tipoimp_ncm_empr.perc_reduc_bc;
         vn_dm_soma_frete          := vt_row_aliq_tipoimp_ncm_empr.dm_soma_frete;
         vn_dm_soma_seguro         := vt_row_aliq_tipoimp_ncm_empr.dm_soma_seguro;
         vn_dm_soma_outra_desp     := vt_row_aliq_tipoimp_ncm_empr.dm_soma_outra_desp;
         vn_dm_soma_ii             := vt_row_aliq_tipoimp_ncm_empr.dm_soma_ii;
         vn_dm_soma_icmsst         := vt_row_aliq_tipoimp_ncm_empr.dm_soma_icmsst;
         vn_obsfiscal_id           := vt_row_aliq_tipoimp_ncm_empr.obsfiscal_id;
         vv_obs_compl              := vt_row_aliq_tipoimp_ncm_empr.obs_compl;
         vn_classeenqipi_id        := vt_row_aliq_tipoimp_ncm_empr.classeenqipi_id;
         vn_selocontripi_id        := vt_row_aliq_tipoimp_ncm_empr.selocontripi_id;
         vn_qtde_selo_contr_ipi    := vt_row_aliq_tipoimp_ncm_empr.qtde_selo_contr_ipi;
         vn_enqlegalipi_id         := vt_row_aliq_tipoimp_ncm_empr.enqlegalipi_id;
         vv_memoria                := pk_csf_calc_fiscal.fkg_mem_aliq_tipoimp_ncm_empr ( en_aliqtipoimpncmempresa_id => vt_row_aliq_tipoimp_ncm_empr.id );
         --
      end if;
      --
   else
      --
      vn_fase := 1.9;
      -- Não tributando os impostos pega os dados para registro do imposto
      vv_memoria                := 'Nao tributa Imposto ' || vn_tipoimp_cd || '-' || vv_tipoimp_sigla || '.';
      vb_achou := true;
      vn_codst_id               := en_codst_id;
      vn_dm_tipo                := 1; -- Percentual
      vn_indice                 := 0;
      vn_perc_major             := 0;
      vn_perc_reduc_bc          := 0;
      vn_dm_soma_frete          := 0;
      vn_dm_soma_seguro         := 0;
      vn_dm_soma_outra_desp     := 0;
      vn_dm_soma_ii             := 0;
      vn_dm_soma_icmsst         := 0;
      vn_obsfiscal_id           := en_obsfiscal_id;
      vv_obs_compl              := ev_obs_compl;
      vn_classeenqipi_id        := 0;
      vn_selocontripi_id        := 0;
      vn_qtde_selo_contr_ipi    := 0;
      vn_enqlegalipi_id         := 0;
      --
   end if;
   --
   vn_fase := 7;
   --
   if vb_achou then
      --
      -- Realizad o calculo dos Impostos
      --
      vn_fase := 7.2;
      --
      vv_cod_st := pk_csf.fkg_Cod_ST_cod ( en_id_st => vn_codst_id );
      --
      vn_fase := 7.3;
      --
      if vn_tipoimp_cd in (3, 4, 5) -- IPI, PIS e COFINS
         then
         --
         vn_fase := 7.4;
         --
         est_row_imp_itemsc.itemsoliccalc_id := est_item_solic_calc.id;
         est_row_imp_itemsc.tipoimp_id       := pk_csf.fkg_Tipo_Imposto_id ( en_cd => '1' ); -- ICMS
         est_row_imp_itemsc.dm_tipo          := 0;
         est_row_imp_itemsc.codst_id         := vn_codst_id;
         est_row_imp_itemsc.memoria          := vv_memoria;
         --
         est_row_imp_itemsc.vl_base_calc     := nvl(est_item_solic_calc.vl_bruto,0) - est_item_solic_calc.vl_desc;
         --
         vn_fase := 7.5;
         --
         if nvl(vn_dm_soma_frete,0) = 1 then
            est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) + nvl(est_item_solic_calc.vl_frete,0);
         end if;
         --
         if nvl(vn_dm_soma_seguro,0) = 1 then
            est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) + nvl(est_item_solic_calc.vl_seguro,0);
         end if;
         --
         if nvl(vn_dm_soma_outra_desp,0) = 1 then
            est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) + nvl(est_item_solic_calc.vl_outro,0);
         end if;
         --
         vn_fase := 7.6;
         --
         if nvl(vn_dm_soma_ii,0) = 1 then
            --
            begin
               --
               select ii.vl_imp_trib
                 into vn_vl_imp_ii
                 from imp_itemsc ii
                    , tipo_imposto ti
                where 1 = 1
                  and ii.itemsoliccalc_id = est_item_solic_calc.id
                  and ii.dm_tipo          = 0 -- Normal
                  and ti.id               = ii.tipoimp_id
                  and ti.cd               = '7';
               --
            exception
               when others then
                  vn_vl_imp_ii := 0;
            end;
            --
            est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) + nvl(vn_vl_imp_ii,0);
            --
         end if;
         --
         vn_fase := 7.61;
         --
         if nvl(vn_dm_soma_icmsst,0) = 1 then
            --
            begin
               --
               select ii.vl_imp_trib
                 into vn_vl_imp_icmsst
                 from imp_itemsc ii
                    , tipo_imposto ti
                where 1 = 1
                  and ii.itemsoliccalc_id = est_item_solic_calc.id
                  and ii.dm_tipo          = 0 -- Normal
                  and ti.id               = ii.tipoimp_id
                  and ti.cd               = '2';
               --
            exception
               when others then
                  vn_vl_imp_icmsst := 0;
            end;
            --
            est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) + nvl(vn_vl_imp_icmsst,0);
            --
         end if;
         --
         vn_fase := 7.7;
         --
         if vn_dm_tipo = 1 then -- Percentual
            --
            vn_fase := 8;
            --
            est_row_imp_itemsc.aliq_apli := ( nvl(vn_indice,0) + nvl(vn_perc_major,0) );
            --
            vn_fase := 8.1;
            -- Valor Próprio = Base Reduzida *Alíquota Próprio / 100
            if nvl(est_row_imp_itemsc.aliq_apli,0) > 0 then
               est_row_imp_itemsc.vl_imp_trib      := nvl(est_row_imp_itemsc.vl_base_calc,0) * (nvl(est_row_imp_itemsc.aliq_apli,0) / 100);
            else
               est_row_imp_itemsc.vl_base_calc     := 0;
               est_row_imp_itemsc.vl_imp_trib      := 0;
            end if;
            --
            est_row_imp_itemsc.qtde_base_calc_prod := null;
            est_row_imp_itemsc.vl_aliq_prod := null;
            --
         else
            --
            vn_fase := 9;
            --
            est_row_imp_itemsc.aliq_apli := null;
            est_row_imp_itemsc.vl_base_calc := null;
            --
            vn_fase := 9.1;
            est_row_imp_itemsc.qtde_base_calc_prod := nvl(est_item_solic_calc.qtde,0);
            est_row_imp_itemsc.vl_aliq_prod := nvl(vn_indice,0);
            --
            vn_fase := 9.2;
            --
            if nvl(est_row_imp_itemsc.vl_aliq_prod,0) > 0 then
               est_row_imp_itemsc.vl_imp_trib      := nvl(est_row_imp_itemsc.qtde_base_calc_prod,0) * nvl(est_row_imp_itemsc.vl_aliq_prod,0);
            else
               --
               est_row_imp_itemsc.vl_imp_trib         := 0;
               est_row_imp_itemsc.qtde_base_calc_prod := 0;
               est_row_imp_itemsc.vl_aliq_prod        := 0;
               --
            end if;
            --
         end if;
         --
         if vn_tipoimp_cd in (3) then -- IPI
            --
            if vv_cod_st in ('01', '51') then
               --
               est_row_imp_itemsc.aliq_apli := null;
               --
            elsif vv_cod_st in ('02', '03', '04', '05', '52', '53', '54', '55') then
               --
               est_row_imp_itemsc.aliq_apli := null;
               est_row_imp_itemsc.vl_base_calc := null;
               --
            end if;
            --
         end if;
         --
         if vn_tipoimp_cd in (4, 5) then -- PIS/COFINS
            --
            if vv_cod_st in ('06') then
               --
               est_row_imp_itemsc.aliq_apli := null;
               --
            elsif vv_cod_st in ('04', '05', '07', '08', '09') then
               --
               est_row_imp_itemsc.aliq_apli := null;
               est_row_imp_itemsc.vl_base_calc := null;
               --
            end if;
            --
         end if;
         --
         est_row_imp_itemsc.perc_reduc           := null;
         est_row_imp_itemsc.perc_adic            := null;
         est_row_imp_itemsc.vl_bc_st_ret         := null;
         est_row_imp_itemsc.vl_icmsst_ret        := null;
         est_row_imp_itemsc.vl_bc_st_dest        := null;
         est_row_imp_itemsc.vl_icmsst_dest       := null;
         est_row_imp_itemsc.vl_imp_nao_dest      := null;
         est_row_imp_itemsc.vl_icms_deson        := null;
         est_row_imp_itemsc.vl_icms_oper         := null;
         est_row_imp_itemsc.percent_difer        := null;
         est_row_imp_itemsc.vl_icms_difer        := null;
         --
         vn_fase := 10;
         -- Recupera dados do IPI para o Item
         if vn_tipoimp_cd = 3 then -- IPI
            --
            est_item_solic_calc.cl_enq_ipi     := pk_csf.fkg_Classe_Enq_IPI_cd ( en_classeenqipi_id => vn_classeenqipi_id);
            est_item_solic_calc.cod_selo_ipi   := pk_csf.fkg_Selo_Contr_IPI_cd ( en_selocontripi_id => vn_selocontripi_id );
            est_item_solic_calc.qtde_selo_ipi  := vn_qtde_selo_contr_ipi;
            est_item_solic_calc.cod_enq_ipi    := pk_csf.fkg_cd_enq_legal_ipi ( en_enqlegalipi_id => vn_enqlegalipi_id );
            --
         end if;
         --
         vn_fase := 11;
         -- Atualiza dados da Observação Fiscal
         -- Procedimento de montagem da Observacao Fiscal da Solicitação de Calculo
         pkb_monta_sc_infor_adic ( en_soliccalc_id              => en_soliccalc_id
                                 , en_empresa_id                => en_empresa_id
                                 , en_obsfiscal_id              => vn_obsfiscal_id
                                 , ev_obs_compl                 => vv_obs_compl
                                 );
         --
      end if;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_calc_aliq_tipoimp_ncm fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_calc_aliq_tipoimp_ncm;

-------------------------------------------------------------------------------------------------------

--| Procedimento de recuperar parâmetros de calculo de ICMS-ST Global
procedure pkb_recup_param_calc_icmsst ( en_soliccalc_id              in solic_calc.id%type
                                      , en_empresa_id                in empresa.id%type
                                      , en_cnae_id                   in cnae.id%type
                                      , en_regtrib_id                in reg_trib.id%type
                                      , en_formatrib_id              in forma_trib.id%type
                                      , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                                      , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                                      , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                      , ev_cpf_cnpj_part             in varchar2
                                      , en_estado_id_orig            in estado.id%type
                                      , en_estado_id_dest            in estado.id%type
                                      , en_dm_tipo_part              in solic_calc.dm_tipo_part%type
                                      , en_dm_cons_final             in solic_calc.dm_cons_final%type
                                      , en_dm_ind_ie_part            in solic_calc.dm_ind_ie_part%type
                                      , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                                      , en_dm_part_tem_suframa       in solic_calc.dm_part_tem_suframa%type
                                      , en_dm_ind_ativ_part          in solic_calc.dm_ind_ativ_part%type
                                      , en_dm_mot_des_icms_part      in solic_calc.dm_mot_des_icms_part%type
                                      --| Item
                                      , en_cest_id                   in cest.id%type
                                      , en_ncm_id                    in ncm.id%type
                                      , en_extipi_id                 in ex_tipi.id%type
                                      , en_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                      , en_cfop_id                   in cfop.id%type
                                      , st_row_param_calc_icmsst     out param_calc_icmsst%rowtype
                                      )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_dm_calc_fisica         param_calc_icmsst.dm_calc_fisica%type;
   --
   vn_qtde_regtrib number;
   vn_qtde_formatrib number;
   vn_qtde_cnae number;
   vn_qtde_estdest number;
   vn_qtde_cest number;
   vn_qtde_ncm number;
   vn_qtde_extipi number;
   vn_qtde_origmerc number;
   vn_qtde_tpparam number;
   vn_ncm_id        ncm.id%type;
   --
   cursor c_dados is
   select distinct
          p.prioridade
     from param_calc_icmsst p
    where p.estado_id_orig             = en_estado_id_orig
      and p.estado_id_dest             = en_estado_id_dest
      and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
      and p.cfop_id                    = en_cfop_id
    order by p.prioridade;
   --
   -- Procedimento de recuperar parâmetros do Regime de Tributação
   procedure pkb_recup_param_regtrib ( evc_dm_tipo_param             in param_calc_icmsst.dm_tipo_param%type
                                     , enc_regtrib_id                in reg_trib.id%type
                                     , enc_formatrib_id              in forma_trib.id%type
                                     , enc_cnae_id                   in cnae.id%type
                                     , enc_cest_id                   in cest.id%type
                                     , enc_ncm_id                    in ncm.id%type
                                     , enc_extipi_id                 in ex_tipi.id%type
                                     , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                     , enc_dm_calc_fisica            in param_calc_icmsst.dm_calc_fisica%type
                                     )
   is
      --
      cursor c_rtrib is
      select p.*
        from param_calc_icmsst p
       where p.estado_id_orig             = en_estado_id_orig
         and p.estado_id_dest             = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                    = en_cfop_id
         and p.dm_tipo_param              = evc_dm_tipo_param
         and nvl(p.regtrib_id,0)          = nvl(enc_regtrib_id,0)
         and nvl(p.formatrib_id,0)        = nvl(enc_formatrib_id,0)
         and nvl(p.cnae_id,0)             = nvl(enc_cnae_id,0)
         and nvl(p.cest_id,0)             = nvl(enc_cest_id,0)
         and nvl(p.ncm_id,0)              = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)           = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)        = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica             = enc_dm_calc_fisica
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_regtrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_regtrib_id: ' || enc_regtrib_id
                                                || ' enc_formatrib_id: ' || enc_formatrib_id
                                                || ' enc_cnae_id: ' || enc_cnae_id
                                || ' enc_cest_id: ' || enc_cest_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                               );
      commit;*/
      --
      for rec in c_rtrib loop
         exit when c_rtrib%notfound or (c_rtrib%notfound) is null;
         --
         vn_fase := 3.1;
         --
         --insert into erro values (erro_Seq.nextval || ' ICMST-ST nivel global: ' || rec.id); commit;
         --
         st_row_param_calc_icmsst := rec;
         --
         if nvl(st_row_param_calc_icmsst.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_param_calc_icmsst.id,0) <= 0
         and ( nvl(enc_regtrib_id,0) > 0 or nvl(vn_qtde_regtrib,0) > 0 )
         then
         --
         vn_qtde_regtrib := 0;
         --
         -- Aplica a recursividade para achar com o Regime de tributação nulo
         pkb_recup_param_regtrib ( evc_dm_tipo_param             => evc_dm_tipo_param
                                 , enc_regtrib_id                => null
                                 , enc_formatrib_id              => enc_formatrib_id
                                 , enc_cnae_id                   => enc_cnae_id
                                 , enc_cest_id                   => enc_cest_id
                                 , enc_ncm_id                    => enc_ncm_id
                                 , enc_extipi_id                 => enc_extipi_id
                                 , enc_dm_orig_merc              => enc_dm_orig_merc
                                 , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                 );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_regtrib fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_regtrib;
   --
   -- Procedimento de recuperar parâmetros do Forma de Tributação
   procedure pkb_recup_param_formatrib ( evc_dm_tipo_param             in param_calc_icmsst.dm_tipo_param%type
                                       , enc_formatrib_id              in forma_trib.id%type
                                       , enc_cnae_id                   in cnae.id%type
                                       , enc_cest_id                   in cest.id%type
                                       , enc_ncm_id                    in ncm.id%type
                                       , enc_extipi_id                 in ex_tipi.id%type
                                       , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                       , enc_dm_calc_fisica            in param_calc_icmsst.dm_calc_fisica%type
                                       )
   is
      --
      cursor c_ftrib is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.formatrib_id
           , p.cnae_id
           , p.cest_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
        from param_calc_icmsst p
       where p.estado_id_orig             = en_estado_id_orig
         and p.estado_id_dest             = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                    = en_cfop_id
         and p.dm_tipo_param              = evc_dm_tipo_param
         and nvl(p.formatrib_id,0)        = nvl(enc_formatrib_id,0)
         and nvl(p.cnae_id,0)             = nvl(enc_cnae_id,0)
         and nvl(p.cest_id,0)             = nvl(enc_cest_id,0)
         and nvl(p.ncm_id,0)              = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)           = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)        = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica             = enc_dm_calc_fisica
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 4;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_formatrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_formatrib_id: ' || enc_formatrib_id
                                                || ' enc_cnae_id: ' || enc_cnae_id
                                || ' enc_cest_id: ' || enc_cest_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                               );
      commit;*/
      --
      for rec in c_ftrib loop
         exit when c_ftrib%notfound or (c_ftrib%notfound) is null;
         --
         vn_fase := 4.1;
         --
         vn_qtde_regtrib := 1;
         --
         pkb_recup_param_regtrib ( evc_dm_tipo_param             => rec.dm_tipo_param
                                 , enc_regtrib_id                => en_regtrib_id
                                 , enc_formatrib_id              => rec.formatrib_id
                                 , enc_cnae_id                   => rec.cnae_id
                                 , enc_cest_id                   => rec.cest_id
                                 , enc_ncm_id                    => rec.ncm_id
                                 , enc_extipi_id                 => rec.extipi_id
                                 , enc_dm_orig_merc              => rec.dm_orig_merc
                                 , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                 );
         --
         vn_fase := 4.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.3;
      --
      if nvl(st_row_param_calc_icmsst.id,0) <= 0
         and ( nvl(enc_formatrib_id,0) > 0 or nvl(vn_qtde_formatrib,0) > 0 )
         then
         --
         vn_qtde_formatrib := 0;
         --
         -- Aplica a recursividade para achar com o Forma de tributação nulo
         pkb_recup_param_formatrib ( evc_dm_tipo_param             => evc_dm_tipo_param
                                   , enc_formatrib_id              => null
                                   , enc_cnae_id                   => enc_cnae_id
                                   , enc_cest_id                   => enc_cest_id
                                   , enc_ncm_id                    => enc_ncm_id
                                   , enc_extipi_id                 => enc_extipi_id
                                   , enc_dm_orig_merc              => enc_dm_orig_merc
                                   , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                   );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_formatrib fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_formatrib;
   --
   -- Procedimento de recuperar parâmetros do CNAE
   procedure pkb_recup_param_cnae ( evc_dm_tipo_param             in param_calc_icmsst.dm_tipo_param%type
                                  , enc_cnae_id                   in cnae.id%type
                                  , enc_cest_id                   in cest.id%type
                                  , enc_ncm_id                    in ncm.id%type
                                  , enc_extipi_id                 in ex_tipi.id%type
                                  , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                  , enc_dm_calc_fisica            in param_calc_icmsst.dm_calc_fisica%type
                                  )
   is
      --
      vn_cnae_id    cnae.id%type;
      --
      cursor c_cnae is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.cnae_id
           , p.cest_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
        from param_calc_icmsst p
       where p.estado_id_orig             = en_estado_id_orig
         and p.estado_id_dest             = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                    = en_cfop_id
         and p.dm_tipo_param              = evc_dm_tipo_param
         and nvl(p.cnae_id,0)             = nvl(enc_cnae_id,0)
         and nvl(p.cest_id,0)             = nvl(enc_cest_id,0)
         and nvl(p.ncm_id,0)              = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)           = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)        = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica             = enc_dm_calc_fisica
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 5;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_cnae evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_cnae_id: ' || enc_cnae_id
                                || ' enc_cest_id: ' || enc_cest_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                               );
      commit;*/
      --
      for rec in c_cnae loop
         exit when c_cnae%notfound or (c_cnae%notfound) is null;
         --
         vn_fase := 5.1;
         --
         vn_qtde_formatrib := 1;
         -- Forma de Tributação
         pkb_recup_param_formatrib ( evc_dm_tipo_param             => evc_dm_tipo_param
                                   , enc_formatrib_id              => en_formatrib_id
                                   , enc_cnae_id                   => rec.cnae_id
                                   , enc_cest_id                   => rec.cest_id
                                   , enc_ncm_id                    => rec.ncm_id
                                   , enc_extipi_id                 => rec.extipi_id
                                   , enc_dm_orig_merc              => rec.dm_orig_merc
                                   , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                   );
         --
         vn_fase := 5.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 5.3;
      --
      if nvl(st_row_param_calc_icmsst.id,0) <= 0
         and ( nvl(enc_cnae_id,0) > 0 or nvl(vn_qtde_cnae,0) > 0 )
         then
         -- Recupera do CNAE superior para pesquisa
         vn_cnae_id := pk_csf.fkg_ar_cnae_id ( en_cnae_id => enc_cnae_id );
         --
         if nvl(vn_cnae_id,0) <= 0 then
            vn_qtde_cnae := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o CNAE nulo ou de nível superior
         pkb_recup_param_cnae ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cnae_id                   => vn_cnae_id
                              , enc_cest_id                   => enc_cest_id
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_extipi_id                 => enc_extipi_id
                              , enc_dm_orig_merc              => enc_dm_orig_merc
                              , enc_dm_calc_fisica            => enc_dm_calc_fisica
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cnae fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cnae;
   --
   -- Procedimento de recuperar parâmetros do CEST
   procedure pkb_recup_param_cest ( evc_dm_tipo_param             in param_calc_icmsst.dm_tipo_param%type
                                  , enc_cest_id                   in cest.id%type
                                  , enc_ncm_id                    in ncm.id%type
                                  , enc_extipi_id                 in ex_tipi.id%type
                                  , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                  , enc_dm_calc_fisica            in param_calc_icmsst.dm_calc_fisica%type
                                  )
   is
      --
      cursor c_cest is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.cest_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
        from param_calc_icmsst p
       where p.estado_id_orig             = en_estado_id_orig
         and p.estado_id_dest             = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                    = en_cfop_id
         and p.dm_tipo_param              = evc_dm_tipo_param
         and nvl(p.cest_id,0)             = nvl(enc_cest_id,0)
         and nvl(p.ncm_id,0)              = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)           = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)        = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica             = enc_dm_calc_fisica
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 6;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_cest evc_dm_tipo_param: ' || evc_dm_tipo_param
                                || ' enc_cest_id: ' || enc_cest_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                               );
      commit;*/
      --
      for rec in c_cest loop
         exit when c_cest%notfound or (c_cest%notfound) is null;
         --
         vn_fase := 6.1;
         --
         vn_qtde_cnae := 1;
         --
         pkb_recup_param_cnae ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cnae_id                   => en_cnae_id
                              , enc_cest_id                   => rec.cest_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_extipi_id                 => rec.extipi_id
                              , enc_dm_orig_merc              => rec.dm_orig_merc
                              , enc_dm_calc_fisica            => rec.dm_calc_fisica
                              );
         --
         vn_fase := 6.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 6.3;
      --
      if nvl(st_row_param_calc_icmsst.id,0) <= 0
         and ( nvl(enc_cest_id,0) > 0 or nvl(vn_qtde_cest,0) > 0 )
         then
         --
         vn_qtde_cest := 0;
         -- Aplica a recursividade para achar com o CEST nulo
         pkb_recup_param_cest ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cest_id                   => null
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_extipi_id                 => enc_extipi_id
                              , enc_dm_orig_merc              => enc_dm_orig_merc
                              , enc_dm_calc_fisica            => enc_dm_calc_fisica
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cest fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cest;
   --
   -- Procedimento de recuperar parâmetros do NCM
   procedure pkb_recup_param_ncm ( evc_dm_tipo_param             in param_calc_icmsst.dm_tipo_param%type
                                 , enc_ncm_id                    in ncm.id%type
                                 , enc_extipi_id                 in ex_tipi.id%type
                                 , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                 , enc_dm_calc_fisica            in param_calc_icmsst.dm_calc_fisica%type
                                 )
   is
      --
      cursor c_ncm is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
        from param_calc_icmsst p
       where p.estado_id_orig             = en_estado_id_orig
         and p.estado_id_dest             = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                    = en_cfop_id
         and p.dm_tipo_param              = evc_dm_tipo_param
         and nvl(p.ncm_id,0)              = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)           = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)        = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica             = enc_dm_calc_fisica
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 8;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_ncm evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                               );
      commit;*/
      --
      for rec in c_ncm loop
         exit when c_ncm%notfound or (c_ncm%notfound) is null;
         --
         vn_fase := 8.1;
         --
         vn_qtde_cest := 1;
         --| Verifica no nivel abaixo (CEST)
         pkb_recup_param_cest ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , enc_cest_id                   => en_cest_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_extipi_id                 => rec.extipi_id
                              , enc_dm_orig_merc              => rec.dm_orig_merc
                              , enc_dm_calc_fisica            => rec.dm_calc_fisica
                              );
         --
         vn_fase := 8.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 8.3;
      --
      if nvl(st_row_param_calc_icmsst.id,0) <= 0
         and ( nvl(enc_ncm_id,0) > 0 or nvl(vn_qtde_ncm,0) > 0 )
         then
         --
         vn_ncm_id := pk_csf.fkg_ncm_id_superior ( ev_cod_ncm => pk_csf.fkg_cod_ncm_id ( en_ncm_id => enc_ncm_id ) );
         --
         if nvl(vn_ncm_id,0) <= 0 then
            vn_qtde_ncm := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o NCM nulo
         pkb_recup_param_ncm ( evc_dm_tipo_param             => evc_dm_tipo_param
                             , enc_ncm_id                    => vn_ncm_id
                             , enc_extipi_id                 => enc_extipi_id
                             , enc_dm_orig_merc              => enc_dm_orig_merc
                             , enc_dm_calc_fisica            => enc_dm_calc_fisica
                             );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_ncm fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_ncm;
   --
   -- Procedimento de recuperar parâmetros do Ex-Tipi
   procedure pkb_recup_param_extipi ( evc_dm_tipo_param             in param_calc_icmsst.dm_tipo_param%type
                                    , enc_extipi_id                 in ex_tipi.id%type
                                    , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                    , enc_dm_calc_fisica            in param_calc_icmsst.dm_calc_fisica%type
                                    )
   is
      --
      cursor c_extipi is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
        from param_calc_icmsst p
       where p.estado_id_orig             = en_estado_id_orig
         and p.estado_id_dest             = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                    = en_cfop_id
         and p.dm_tipo_param              = evc_dm_tipo_param
         and nvl(p.extipi_id,0)           = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)        = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica             = enc_dm_calc_fisica
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 9;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_extipi evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                               );
      commit;*/
      --
      for rec in c_extipi loop
         exit when c_extipi%notfound or (c_extipi%notfound) is null;
         --
         vn_fase := 9.1;
         --
         vn_qtde_ncm := 1;
         --| Verifica no nivel abaixo (NCM)
         pkb_recup_param_ncm ( evc_dm_tipo_param             => rec.dm_tipo_param
                             , enc_ncm_id                    => en_ncm_id
                             , enc_extipi_id                 => rec.extipi_id
                             , enc_dm_orig_merc              => rec.dm_orig_merc
                             , enc_dm_calc_fisica            => rec.dm_calc_fisica
                             );
         --
         vn_fase := 9.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 9.3;
      --
      if nvl(st_row_param_calc_icmsst.id,0) <= 0
         and ( nvl(enc_extipi_id,0) > 0 or nvl(vn_qtde_extipi,0) > 0 )
         then
         --
         vn_qtde_extipi := 0;
         -- Aplica a recursividade para achar com o Ex-Tipi nulo
         pkb_recup_param_extipi ( evc_dm_tipo_param             => evc_dm_tipo_param
                                , enc_extipi_id                 => null
                                , enc_dm_orig_merc              => enc_dm_orig_merc
                                , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_extipi fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_extipi;
   --
   -- Procedimento de recuperar parâmetros da Origem da Mercadoria
   procedure pkb_recup_param_origmerc ( evc_dm_tipo_param             in param_calc_icmsst.dm_tipo_param%type
                                      , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                      , enc_dm_calc_fisica            in param_calc_icmsst.dm_calc_fisica%type
                                      )
   is
      --
      cursor c_origmerc is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_orig_merc
           , p.dm_calc_fisica
        from param_calc_icmsst p
       where p.estado_id_orig             = en_estado_id_orig
         and p.estado_id_dest             = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                    = en_cfop_id
         and p.dm_tipo_param              = evc_dm_tipo_param
         and nvl(p.dm_orig_merc,0)        = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica             = enc_dm_calc_fisica
       order by p.prioridade;
      --
   begin
      --
      vn_fase :=10;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_origmerc evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                               );
      commit;*/
      --
      for rec in c_origmerc loop
         exit when c_origmerc%notfound or (c_origmerc%notfound) is null;
         --
         vn_fase := 10.1;
         --
         vn_qtde_extipi := 1;
         --| Verifica no nivel abaixo (Ex-Tipi)
         pkb_recup_param_extipi ( evc_dm_tipo_param             => rec.dm_tipo_param
                                , enc_extipi_id                 => en_extipi_id
                                , enc_dm_orig_merc              => rec.dm_orig_merc
                                , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                );
         --
         vn_fase := 10.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 10.3;
      --
      if nvl(st_row_param_calc_icmsst.id,0) <= 0
         and ( enc_dm_orig_merc is not null or nvl(vn_qtde_origmerc,0) > 0 )
         then
         --
         vn_qtde_origmerc := 0;
         -- Aplica a recursividade para achar com a Origem da Mercadoria nulo
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_orig_merc              => null
                                  , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_origmerc fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_origmerc;
   --
   -- Procedimento de recuperar parâmetros de Calcula Pessoa Fisica
   procedure pkb_recup_param_calcfisica ( evc_dm_tipo_param             in param_calc_icmsst.dm_tipo_param%type
                                        , enc_dm_calc_fisica            in param_calc_icmsst.dm_calc_fisica%type
                                        )
   is
      --
      cursor c_calcfisica is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_fisica
        from param_calc_icmsst p
       where p.estado_id_orig             = en_estado_id_orig
         and p.estado_id_dest             = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                    = en_cfop_id
         and p.dm_tipo_param              = evc_dm_tipo_param
         and p.dm_calc_fisica             = enc_dm_calc_fisica
       order by p.prioridade;
      --
   begin
      --
      vn_fase :=10;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_origmerc evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_orig_merc: ' || en_dm_orig_merc
                               );
      commit;*/
      --
      for rec in c_calcfisica loop
         exit when c_calcfisica%notfound or (c_calcfisica%notfound) is null;
         --
         vn_fase := 10.1;
         --
         vn_qtde_origmerc := 1;
         --| Verifica no nivel abaixo (Origem da Mercadoria)
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_orig_merc              => en_dm_orig_merc
                                  , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                  );
         --
         vn_fase := 10.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 10.3;
      --
      if nvl(st_row_param_calc_icmsst.id,0) <= 0
         and enc_dm_calc_fisica in (0, 1, 3, 4, 5, 6)
         then
         --
         vn_qtde_origmerc := 0;
         -- Aplica a recursividade para achar Calcula Pessoa Fisica como 2-indiferente
         pkb_recup_param_calcfisica ( evc_dm_tipo_param             => evc_dm_tipo_param
                                    , enc_dm_calc_fisica            => 2
                                    );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calcfisica fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_calcfisica;
   --
   -- Procedimento de recuperar parâmetros do Tipo de Parametro (E-Excecao ou R-Regra)
   procedure pkb_recup_param_tpparam ( evc_dm_tipo_param       in param_calc_icmsst.dm_tipo_param%type
                                     )
   is
      --
      cursor c_tpparam is
      select distinct
             p.prioridade
           , p.dm_tipo_param
        from param_calc_icmsst p
       where p.estado_id_orig             = en_estado_id_orig
         and p.estado_id_dest             = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                    = en_cfop_id
         and p.dm_tipo_param              = evc_dm_tipo_param
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 17;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_tpparam evc_dm_tipo_param: ' || evc_dm_tipo_param
                               );
      commit;*/
      --
      for rec in c_tpparam loop
         exit when c_tpparam%notfound or (c_tpparam%notfound) is null;
         --
         vn_fase := 17.1;
         --
         pkb_recup_param_calcfisica ( evc_dm_tipo_param  => rec.dm_tipo_param
                                    , enc_dm_calc_fisica => en_dm_cons_final  -- Provisiorio
                                    );
         --
         vn_fase := 17.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 17.3;
      --
      if nvl(st_row_param_calc_icmsst.id,0) <= 0
         and nvl(vn_qtde_tpparam,0) > 0
         then
         --
         vn_qtde_tpparam := 0;
         -- Aplica a recursividade para achar com o Tipo de Parametro "Regra"
         pkb_recup_param_tpparam ( evc_dm_tipo_param       => 'R' ); -- Regra
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpparam fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpparam;
   --
begin
   --
   vn_fase := 1;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_calc_icmsst : ' );
      commit;*/
   --
   /* -- Provisorio
   if en_dm_tipo_part = 1 then -- Fisica
      vn_dm_calc_fisica := 1; -- Sim
   elsif en_dm_tipo_part = 2 then -- Juridica
      vn_dm_calc_fisica := 0; -- Não
   else
      --
      vn_dm_calc_fisica := 2; -- Indiferente
      --
   end if; */
   vn_dm_calc_fisica := en_dm_cons_final;
   --
   st_row_param_calc_icmsst := null;
   --
   vn_fase := 1.9;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde_tpparam := 1;
      --| Verifica no nivel abaixo (Tipo de Parametro (E-Excecao ou R-Regra))
      pkb_recup_param_tpparam ( evc_dm_tipo_param => 'E' ); -- Primeiro "Excecao"
      --
      vn_fase := 99;
      -- Se encontrou o parâmetro, finaliza o processo
      if nvl(st_row_param_calc_icmsst.id,0) > 0 then
         --
         exit;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calc_icmsst fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_calc_icmsst;

-------------------------------------------------------------------------------------------------------

--| Procedimento de recuperar parâmetros de calculo de ICMSST da Empresa
procedure pkb_rec_param_calc_icmsst_empr ( en_soliccalc_id                in solic_calc.id%type
                                         , en_empresa_id                  in empresa.id%type
                                         , en_natoper_id                  in nat_oper.id%type
                                         , en_dm_ind_emit                 in solic_calc.dm_ind_emit%type
                                         , en_dm_ind_oper                 in solic_calc.dm_ind_oper%type
                                         , ed_dt_emiss                    in solic_calc.dt_emiss%type
                                         , ev_cpf_cnpj_part               in varchar2
                                         , en_estado_id_dest              in estado.id%type
                                         , en_dm_tipo_part                in solic_calc.dm_tipo_part%type
                                         , en_dm_cons_final               in solic_calc.dm_cons_final%type
                                         , en_dm_ind_ie_part              in solic_calc.dm_ind_ie_part%type
                                         , en_dm_reg_trib_part            in solic_calc.dm_reg_trib_part%type
                                         , en_dm_part_tem_suframa         in solic_calc.dm_part_tem_suframa%type
                                         , en_dm_ind_ativ_part            in solic_calc.dm_ind_ativ_part%type
                                         , en_dm_mot_des_icms_part        in solic_calc.dm_mot_des_icms_part%type
                                         --| Item
                                         , en_item_id                     in item.id%type
                                         , en_cest_id                     in cest.id%type
                                         , en_ncm_id                      in ncm.id%type
                                         , en_extipi_id                   in ex_tipi.id%type
                                         , en_dm_orig_merc                in item_solic_calc.dm_orig_merc%type
                                         , en_cfop_id                     in cfop.id%type
                                         , st_row_param_calc_icmsst_empr  out param_calc_icmsst_empr%rowtype
                                         )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_dm_calc_fisica            param_calc_icmsst_empr.dm_calc_fisica%type;
   --
   vn_qtde_cest number;
   vn_qtde_ncm number;
   vn_qtde_extipi number;
   vn_qtde_origmerc number;
   vn_qtde_item number;
   vn_qtde_part number;
   vn_qtde_natoper number;
   vn_qtde_tpparam number;
   vn_ncm_id        ncm.id%type;
   --
   cursor c_dados is
   select distinct
          p.prioridade
     from param_calc_icmsst_empr p
    where p.empresa_id             = en_empresa_id
      and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
      and p.cfop_id                = en_cfop_id
      and p.estado_id_dest         = en_estado_id_dest
    order by p.prioridade;
   --
   -- Procedimento de recuperar parâmetros do CEST
   procedure pkb_recup_param_cest ( evc_dm_tipo_param             in param_calc_icmsst_empr.dm_tipo_param%type
                                  , enc_cest_id                   in cest.id%type
                                  , enc_ncm_id                    in ncm.id%type
                                  , enc_extipi_id                 in ex_tipi.id%type
                                  , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                  , enc_item_id                   in item.id%type
                                  , enc_dm_calc_fisica            in param_calc_icmsst_empr.dm_calc_fisica%type
                                  , evc_cpf_cnpj_part             in varchar2
                                  , enc_natoper_id                in nat_oper.id%type
                                  )
   is
      --
      cursor c_cest is
      select p.*
        from param_calc_icmsst_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                 = en_cfop_id
         and p.estado_id_dest          = en_estado_id_dest
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.cest_id,0)          = nvl(enc_cest_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_cest evc_dm_tipo_param: ' || evc_dm_tipo_param
                                || ' enc_cest_id: ' || enc_cest_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                               );
      commit;*/
      --
      for rec in c_cest loop
         exit when c_cest%notfound or (c_cest%notfound) is null;
         --
         vn_fase := 3.1;
         --
         --insert into erro values (erro_Seq.nextval || ' ICMS-ST nivel empresa: ' || rec.id); commit;
         -- Acho um parâmetro
         st_row_param_calc_icmsst_empr := rec;
         --
         if nvl(st_row_param_calc_icmsst_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_param_calc_icmsst_empr.id,0) <= 0
         and ( nvl(enc_cest_id,0) > 0 or nvl(vn_qtde_cest,0) > 0 )
         then
         --
         vn_qtde_cest := 0;
         -- Aplica a recursividade para achar com o CEST nulo
         pkb_recup_param_cest ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cest_id                   => null
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_extipi_id                 => enc_extipi_id
                              , enc_dm_orig_merc              => enc_dm_orig_merc
                              , enc_item_id                   => enc_item_id
                              , enc_dm_calc_fisica            => enc_dm_calc_fisica
                              , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                              , enc_natoper_id                => enc_natoper_id
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cest fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cest;
   --
   -- Procedimento de recuperar parâmetros do NCM
   procedure pkb_recup_param_ncm ( evc_dm_tipo_param             in param_calc_icmsst_empr.dm_tipo_param%type
                                 , enc_ncm_id                    in ncm.id%type
                                 , enc_extipi_id                 in ex_tipi.id%type
                                 , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                 , enc_item_id                   in item.id%type
                                 , enc_dm_calc_fisica            in param_calc_icmsst_empr.dm_calc_fisica%type
                                 , evc_cpf_cnpj_part             in varchar2
                                 , enc_natoper_id                in nat_oper.id%type
                                 )
   is
      --
      cursor c_ncm is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.item_id
           , p.dm_calc_fisica
           , p.cpf_cnpj
           , p.natoper_id
        from param_calc_icmsst_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                 = en_cfop_id
         and p.estado_id_dest          = en_estado_id_dest
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 4;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_ncm evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                               );
      commit;*/
      --
      for rec in c_ncm loop
         exit when c_ncm%notfound or (c_ncm%notfound) is null;
         --
         vn_fase := 4.1;
         --
         vn_qtde_cest := 1;
         --| Verifica no nivel abaixo (CEST)
         pkb_recup_param_cest ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , enc_cest_id                   => en_cest_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_extipi_id                 => rec.extipi_id
                              , enc_dm_orig_merc              => rec.dm_orig_merc
                              , enc_item_id                   => rec.item_id
                              , enc_dm_calc_fisica            => rec.dm_calc_fisica
                              , evc_cpf_cnpj_part             => rec.cpf_cnpj
                              , enc_natoper_id                => rec.natoper_id
                              );
         --
         vn_fase := 4.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.3;
      --
      if nvl(st_row_param_calc_icmsst_empr.id,0) <= 0
         and ( nvl(enc_ncm_id,0) > 0 or nvl(vn_qtde_ncm,0) > 0 )
         then
         --
         vn_ncm_id := pk_csf.fkg_ncm_id_superior ( ev_cod_ncm => pk_csf.fkg_cod_ncm_id ( en_ncm_id => enc_ncm_id ) );
         --
         if nvl(vn_ncm_id,0) <= 0 then
            vn_qtde_ncm := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o NCM nulo
         pkb_recup_param_ncm ( evc_dm_tipo_param             => evc_dm_tipo_param
                             , enc_ncm_id                    => vn_ncm_id
                             , enc_extipi_id                 => enc_extipi_id
                             , enc_dm_orig_merc              => enc_dm_orig_merc
                             , enc_item_id                   => enc_item_id
                             , enc_dm_calc_fisica            => enc_dm_calc_fisica
                             , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                             , enc_natoper_id                => enc_natoper_id
                             );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_ncm fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_ncm;
   --
   -- Procedimento de recuperar parâmetros do Ex-Tipi
   procedure pkb_recup_param_extipi ( evc_dm_tipo_param             in param_calc_icmsst_empr.dm_tipo_param%type
                                    , enc_extipi_id                 in ex_tipi.id%type
                                    , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                    , enc_item_id                   in item.id%type
                                    , enc_dm_calc_fisica            in param_calc_icmsst_empr.dm_calc_fisica%type
                                    , evc_cpf_cnpj_part             in varchar2
                                    , enc_natoper_id                in nat_oper.id%type
                                    )
   is
      --
      cursor c_extipi is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.extipi_id
           , p.dm_orig_merc
           , p.item_id
           , p.dm_calc_fisica
           , p.cpf_cnpj
           , p.natoper_id
        from param_calc_icmsst_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                 = en_cfop_id
         and p.estado_id_dest          = en_estado_id_dest
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 5;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_extipi evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                               );
      commit;*/
      --
      for rec in c_extipi loop
         exit when c_extipi%notfound or (c_extipi%notfound) is null;
         --
         vn_fase := 5.1;
         --
         vn_qtde_ncm := 1;
         --| Verifica no nivel abaixo (NCM)
         pkb_recup_param_ncm ( evc_dm_tipo_param             => rec.dm_tipo_param
                             , enc_ncm_id                    => en_ncm_id
                             , enc_extipi_id                 => rec.extipi_id
                             , enc_dm_orig_merc              => rec.dm_orig_merc
                             , enc_item_id                   => rec.item_id
                             , enc_dm_calc_fisica            => rec.dm_calc_fisica
                             , evc_cpf_cnpj_part             => rec.cpf_cnpj
                             , enc_natoper_id                => rec.natoper_id
                             );
         --
         vn_fase := 5.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 5.3;
      --
      if nvl(st_row_param_calc_icmsst_empr.id,0) <= 0
         and ( nvl(enc_extipi_id,0) > 0 or nvl(vn_qtde_extipi,0) > 0 )
         then
         --
         vn_qtde_extipi := 0;
         -- Aplica a recursividade para achar com o Ex-Tipi nulo
         pkb_recup_param_extipi ( evc_dm_tipo_param             => evc_dm_tipo_param
                                , enc_extipi_id                 => null
                                , enc_dm_orig_merc              => enc_dm_orig_merc
                                , enc_item_id                   => enc_item_id
                                , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                                , enc_natoper_id                => enc_natoper_id
                                );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_extipi fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_extipi;
   --
   -- Procedimento de recuperar parâmetros da Origem da Mercadoria
   procedure pkb_recup_param_origmerc ( evc_dm_tipo_param             in param_calc_icmsst_empr.dm_tipo_param%type
                                      , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                      , enc_item_id                   in item.id%type
                                      , enc_dm_calc_fisica            in param_calc_icmsst_empr.dm_calc_fisica%type
                                      , evc_cpf_cnpj_part             in varchar2
                                      , enc_natoper_id                in nat_oper.id%type
                                      )
   is
      --
      cursor c_origmerc is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_orig_merc
           , p.item_id
           , p.dm_calc_fisica
           , p.cpf_cnpj
           , p.natoper_id
        from param_calc_icmsst_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                 = en_cfop_id
         and p.estado_id_dest          = en_estado_id_dest
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 6;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_origmerc evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                               );
      commit;*/
      --
      for rec in c_origmerc loop
         exit when c_origmerc%notfound or (c_origmerc%notfound) is null;
         --
         vn_fase := 6.1;
         --
         vn_qtde_extipi := 1;
         --| Verifica no nivel abaixo (Ex-Tipi)
         pkb_recup_param_extipi ( evc_dm_tipo_param             => rec.dm_tipo_param
                                , enc_extipi_id                 => en_extipi_id
                                , enc_dm_orig_merc              => rec.dm_orig_merc
                                , enc_item_id                   => rec.item_id
                                , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                , evc_cpf_cnpj_part             => rec.cpf_cnpj
                                , enc_natoper_id                => rec.natoper_id
                                );
         --
         vn_fase := 6.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 6.3;
      --
      if nvl(st_row_param_calc_icmsst_empr.id,0) <= 0
         and ( enc_dm_orig_merc is not null or nvl(vn_qtde_origmerc,0) > 0 )
         then
         --
         vn_qtde_origmerc := 0;
         -- Aplica a recursividade para achar com a Origem da Mercadoria nulo
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_orig_merc              => null
                                  , enc_item_id                   => enc_item_id
                                  , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                  , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                                  , enc_natoper_id                => enc_natoper_id
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_origmerc fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_origmerc;
   --
   -- Procedimento de recuperar parâmetros do Item
   procedure pkb_recup_param_item ( evc_dm_tipo_param             in param_calc_icmsst_empr.dm_tipo_param%type
                                  , enc_item_id                   in item.id%type
                                  , enc_dm_calc_fisica            in param_calc_icmsst_empr.dm_calc_fisica%type
                                  , evc_cpf_cnpj_part             in varchar2
                                  , enc_natoper_id                in nat_oper.id%type
                                  )
   is
      --
      cursor c_item is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.item_id
           , p.dm_calc_fisica
           , p.cpf_cnpj
           , p.natoper_id
        from param_calc_icmsst_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                 = en_cfop_id
         and p.estado_id_dest          = en_estado_id_dest
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 7;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_item evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                               );
      commit;*/
      --
      for rec in c_item loop
         exit when c_item%notfound or (c_item%notfound) is null;
         --
         vn_fase := 7.1;
         --
         vn_qtde_origmerc := 1;
         --| Verifica no nivel abaixo (Origem da Mercadoria)
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_orig_merc              => en_dm_orig_merc
                                  , enc_item_id                   => rec.item_id
                                  , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                  , evc_cpf_cnpj_part             => rec.cpf_cnpj
                                  , enc_natoper_id                => rec.natoper_id
                                  );
         --
         vn_fase := 7.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7.3;
      --
      if nvl(st_row_param_calc_icmsst_empr.id,0) <= 0
         and ( nvl(enc_item_id,0) > 0 or nvl(vn_qtde_item,0) > 0 )
         then
         --
         vn_qtde_item := 0;
         -- Aplica a recursividade para achar com o Item nulo
         pkb_recup_param_item ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_item_id                   => null
                              , enc_dm_calc_fisica            => enc_dm_calc_fisica
                              , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                              , enc_natoper_id                => enc_natoper_id
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_item fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_item;
   --
   -- Procedimento de recuperar parâmetros de Calcular Pessoa Fisica
   procedure pkb_recup_param_calcfisica ( evc_dm_tipo_param             in param_calc_icmsst_empr.dm_tipo_param%type
                                        , enc_dm_calc_fisica            in param_calc_icmsst_empr.dm_calc_fisica%type
                                        , evc_cpf_cnpj_part             in varchar2
                                        , enc_natoper_id                in nat_oper.id%type
                                        )
   is
      --
      cursor c_calcfisica is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_fisica
           , p.cpf_cnpj
           , p.natoper_id
        from param_calc_icmsst_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                 = en_cfop_id
         and p.estado_id_dest          = en_estado_id_dest
         and p.dm_tipo_param           = evc_dm_tipo_param
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 7;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_item evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_item_id: ' || en_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                               );
      commit;*/
      --
      for rec in c_calcfisica loop
         exit when c_calcfisica%notfound or (c_calcfisica%notfound) is null;
         --
         vn_fase := 7.1;
         --
         vn_qtde_item := 1;
         --| Verifica no nivel abaixo (Item)
         pkb_recup_param_item ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , enc_item_id                   => en_item_id
                              , enc_dm_calc_fisica            => rec.dm_calc_fisica
                              , evc_cpf_cnpj_part             => rec.cpf_cnpj
                              , enc_natoper_id                => rec.natoper_id
                              );
         --
         vn_fase := 7.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7.3;
      --
      if nvl(st_row_param_calc_icmsst_empr.id,0) <= 0
         and enc_dm_calc_fisica in (0, 1, 3, 4, 5, 6)
         then
         --
         vn_qtde_item := 0;
         -- Aplica a recursividade para achar Calcula Pessoa Fisica como 2-Indiferente
         pkb_recup_param_calcfisica ( evc_dm_tipo_param             => evc_dm_tipo_param
                                    , enc_dm_calc_fisica            => 2
                                    , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                                    , enc_natoper_id                => enc_natoper_id
                                    );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calcfisica fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_calcfisica;
   --
   -- Procedimento de recuperar parâmetros do CPF/CNPJ Participante
   procedure pkb_recup_param_part ( evc_dm_tipo_param             in param_calc_icmsst_empr.dm_tipo_param%type
                                  , evc_cpf_cnpj_part             in varchar2
                                  , enc_natoper_id                in nat_oper.id%type
                                  )
   is
      --
      cursor c_part is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.cpf_cnpj
           , p.natoper_id
        from param_calc_icmsst_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                 = en_cfop_id
         and p.estado_id_dest          = en_estado_id_dest
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 8;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_part evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                               );
      commit;*/
      --
      for rec in c_part loop
         exit when c_part%notfound or (c_part%notfound) is null;
         --
         vn_fase := 8.1;
         --
         pkb_recup_param_calcfisica ( evc_dm_tipo_param             => rec.dm_tipo_param
                                    , enc_dm_calc_fisica            => en_dm_cons_final
                                    , evc_cpf_cnpj_part             => rec.cpf_cnpj
                                    , enc_natoper_id                => rec.natoper_id
                                    );
         --
         vn_fase := 8.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 8.3;
      --
      if nvl(st_row_param_calc_icmsst_empr.id,0) <= 0
         and ( trim(evc_cpf_cnpj_part) is not null or nvl(vn_qtde_part,0) > 0 )
         then
         --
         vn_qtde_part := 0;
         -- Aplica a recursividade para achar com o Participante nulo
         pkb_recup_param_part ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , evc_cpf_cnpj_part             => null
                              , enc_natoper_id                => enc_natoper_id
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_part fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_part;
   --
   -- Procedimento de recuperar parâmetros da Natureza de Operação
   procedure pkb_recup_param_natoper ( evc_dm_tipo_param             in param_calc_icmsst_empr.dm_tipo_param%type
                                     , enc_natoper_id                in nat_oper.id%type
                                     )
   is
      --
      cursor c_natoper is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.natoper_id
        from param_calc_icmsst_empr p
       where p.empresa_id             = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                = en_cfop_id
         and p.estado_id_dest         = en_estado_id_dest
         and p.dm_tipo_param          = evc_dm_tipo_param
         and nvl(p.natoper_id,0)      = nvl(enc_natoper_id,0)
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 9;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_natoper evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_natoper_id: ' || enc_natoper_id
                               );
      commit;*/
      --
      for rec in c_natoper loop
         exit when c_natoper%notfound or (c_natoper%notfound) is null;
         --
         vn_fase := 9.1;
         --
         vn_qtde_part := 1;
         --| Verifica no nivel abaixo (CPF/CNPJ Participante)
         pkb_recup_param_part ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , evc_cpf_cnpj_part             => ev_cpf_cnpj_part
                              , enc_natoper_id                => rec.natoper_id
                              );
         --
         vn_fase := 9.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 9.3;
      --
      if nvl(st_row_param_calc_icmsst_empr.id,0) <= 0
         and ( nvl(enc_natoper_id,0) > 0 or nvl(vn_qtde_natoper,0) > 0 )
         then
         --
         vn_qtde_natoper := 0;
         -- Aplica a recursividade para achar com o Natureza da Operação nulo
         pkb_recup_param_natoper ( evc_dm_tipo_param             => evc_dm_tipo_param
                                 , enc_natoper_id                => null
                                 );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_natoper fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_natoper;
   --
   -- Procedimento de recuperar parâmetros do Tipo de Parametro (E-Excecao ou R-Regra)
   procedure pkb_recup_param_tpparam ( evc_dm_tipo_param       in param_calc_icmsst_empr.dm_tipo_param%type
                                     )
   is
      --
      cursor c_tpparam is
      select distinct
             p.prioridade
           , p.dm_tipo_param
        from param_calc_icmsst_empr p
       where p.empresa_id             = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id                = en_cfop_id
         and p.estado_id_dest         = en_estado_id_dest
         and p.dm_tipo_param          = evc_dm_tipo_param
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 16;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_tpparam evc_dm_tipo_param: ' || evc_dm_tipo_param
                               );
      commit;*/
      --
      for rec in c_tpparam loop
         exit when c_tpparam%notfound or (c_tpparam%notfound) is null;
         --
         vn_fase := 16.1;
         --
         vn_qtde_natoper := 1;
         --| Verifica no nivel abaixo (Natureza da Operação)
         pkb_recup_param_natoper ( evc_dm_tipo_param             => rec.dm_tipo_param
                                 , enc_natoper_id                => en_natoper_id
                                 );

         --
         vn_fase := 16.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icmsst_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 16.3;
      --
      if nvl(st_row_param_calc_icmsst_empr.id,0) <= 0
         and nvl(vn_qtde_tpparam,0) > 0
         then
         --
         vn_qtde_tpparam := 0;
         -- Aplica a recursividade para achar com o Tipo de Parametro "Regra"
         pkb_recup_param_tpparam ( evc_dm_tipo_param       => 'R' ); -- Regra
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpparam fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpparam;
   --
begin
   --
   vn_fase := 1;
      /*insert into erro values (erro_Seq.nextval ||' pkb_rec_param_calc_icmsst_empr evc_dm_tipo_param: ' );
      commit;*/
   --
   /* -- provisorio
   if en_dm_tipo_part = 1 then -- Fisica
      vn_dm_calc_fisica := 1; -- Sim
   elsif en_dm_tipo_part = 2 then -- Juridica
      vn_dm_calc_fisica := 0; -- Não
   else
      --
      vn_dm_calc_fisica := 2; -- Indiferente
      --
   end if;*/
   vn_dm_calc_fisica := en_dm_cons_final;
   --
   vn_fase := 1.1;
   --
   st_row_param_calc_icmsst_empr := null;
   --
   vn_fase := 1.9;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde_tpparam := 1;
      --| Verifica no nivel abaixo (Tipo de Parametro (E-Excecao ou R-Regra))
      pkb_recup_param_tpparam ( evc_dm_tipo_param => 'E' ); -- Primeiro "Excecao"
      --
      vn_fase := 99;
      -- Se encontrou o parâmetro, finaliza o processo
      if nvl(st_row_param_calc_icmsst_empr.id,0) > 0 then
         --
         exit;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_rec_param_calc_icmsst_empr fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_rec_param_calc_icmsst_empr;

-------------------------------------------------------------------------------------------------------

-- Procedimento de calculo do ICMS-ST
procedure pkb_calc_icmsst ( en_soliccalc_id              in solic_calc.id%type
                          , en_empresa_id                in empresa.id%type
                          , en_cnae_id                   in cnae.id%type
                          , en_regtrib_id                in reg_trib.id%type
                          , en_formatrib_id              in forma_trib.id%type
                          , en_natoper_id                in nat_oper.id%type
                          , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                          , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                          , ed_dt_emiss                  in solic_calc.dt_emiss%type
                          , ev_cpf_cnpj_part             in varchar2
                          , en_estado_id_orig            in estado.id%type
                          , en_estado_id_dest            in estado.id%type
                          , en_dm_tipo_part              in solic_calc.dm_tipo_part%type
                          , en_dm_cons_final             in solic_calc.dm_cons_final%type
                          , en_dm_ind_ie_part            in solic_calc.dm_ind_ie_part%type
                          , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                          , en_dm_part_tem_suframa       in solic_calc.dm_part_tem_suframa%type
                          , en_dm_ind_ativ_part          in solic_calc.dm_ind_ativ_part%type
                          , en_dm_mot_des_icms_part      in solic_calc.dm_mot_des_icms_part%type
                          , en_dm_trib_imposto           in number
                          , en_calcular_icms_st          in number
                          , en_codst_id                  in cod_st.id%type
                          , en_obsfiscal_id              in obs_fiscal.id%type
                          , ev_obs_compl                 in cfop_tipoimp.obs_compl%type
                          --| Item
                          , en_item_id                   in item.id%type
                          , en_cest_id                   in cest.id%type
                          , en_ncm_id                    in ncm.id%type
                          , en_extipi_id                 in ex_tipi.id%type
                          , en_cfop_id                   in cfop.id%type
                          --| Retorno do Imposto
                          , est_item_solic_calc          in out nocopy  item_solic_calc%rowtype
                          , est_row_imp_itemsc           in out nocopy  imp_itemsc%rowtype
                          )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_row_param_calc_icmsst_empr     param_calc_icmsst_empr%rowtype := null;
   vt_row_param_calc_icmsst          param_calc_icmsst%rowtype := null;
   vv_memoria                imp_itemsc.memoria%type;
   --
   vb_achou          boolean := false;
   vv_cod_st         cod_st.cod_st%type;
   vn_vl_imp_ipi     number;
   vn_vl_imp_ii      number;
   vn_aux_base_calc  number;
   vn_dif_base_calc  number;
   vn_aux_imp_trib   number;
   --
   vn_codst_id               number;
   vn_aliq_dest              number(6,4);
   vn_perc_reduc_bc          number(6,4);
   vn_obsfiscal_id           number;
   vv_obs_compl              varchar2(4000);
   vn_dm_mod_base_calc_st    number(1);
   vn_indice                 number(10,4);
   vn_dm_ajusta_mva          number(1);
   vn_dm_efeito              number(1);
   vn_dm_calc_fisica         number(1);
   vn_dm_soma_frete          number(1);
   vn_dm_soma_seguro         number(1);
   vn_dm_soma_outra_desp     number(1);
   vn_dm_soma_ipi            number(1);
   vn_dm_soma_ii             number(1);
   vn_dm_soma_icmsst_od      number(1);
   vn_dm_tipo_calc_st        number(1);
   --
   vn_vl_operacao        number;
   vn_a                  number;
   vn_b                  number;
   vn_vl_base_calc_obs   number;
   vn_vl_imp_trib_obs    number;
   vv_texto              varchar2(255) := null;
   --
   vt_row_imp_itemsc     imp_itemsc%rowtype;
   --
begin
   --
   vn_fase := 1;
   --
   vt_row_param_calc_icmsst_empr := null;
   vb_achou := false;
   --
   if nvl(en_dm_trib_imposto,0) = 1 -- Sim, tributa imposto
      and nvl(en_calcular_icms_st,0) = 1 -- Sim
      then
      --
      vn_fase := 1.1;
      -- recuperar parâmetros de calculo de ICMSST da Empresa
      pkb_rec_param_calc_icmsst_empr ( en_soliccalc_id                => en_soliccalc_id
                                     , en_empresa_id                  => en_empresa_id
                                     , en_natoper_id                  => en_natoper_id
                                     , en_dm_ind_emit                 => en_dm_ind_emit
                                     , en_dm_ind_oper                 => en_dm_ind_oper
                                     , ed_dt_emiss                    => ed_dt_emiss
                                     , ev_cpf_cnpj_part               => ev_cpf_cnpj_part
                                     , en_estado_id_dest              => en_estado_id_dest
                                     , en_dm_tipo_part                => en_dm_tipo_part
                                     , en_dm_cons_final               => en_dm_cons_final
                                     , en_dm_ind_ie_part              => en_dm_ind_ie_part
                                     , en_dm_reg_trib_part            => en_dm_reg_trib_part
                                     , en_dm_part_tem_suframa         => en_dm_part_tem_suframa
                                     , en_dm_ind_ativ_part            => en_dm_ind_ativ_part
                                     , en_dm_mot_des_icms_part        => en_dm_mot_des_icms_part
                                     --| Item
                                     , en_item_id                     => en_item_id
                                     , en_cest_id                     => en_cest_id
                                     , en_ncm_id                      => en_ncm_id
                                     , en_extipi_id                   => en_extipi_id
                                     , en_dm_orig_merc                => est_item_solic_calc.dm_orig_merc
                                     , en_cfop_id                     => en_cfop_id
                                     , st_row_param_calc_icmsst_empr  => vt_row_param_calc_icmsst_empr
                                     );
      --
      vn_fase := 2;
      --
      -- Se não achou, busca nos parâmetros Globais de ICMS-ST
      if nvl(vt_row_param_calc_icmsst_empr.id,0) <= 0 then
         --
         vn_fase := 2.1;
         --
         pkb_recup_param_calc_icmsst ( en_soliccalc_id              => en_soliccalc_id
                                     , en_empresa_id                => en_empresa_id
                                     , en_cnae_id                   => en_cnae_id
                                     , en_regtrib_id                => en_regtrib_id
                                     , en_formatrib_id              => en_formatrib_id
                                     , en_dm_ind_emit               => en_dm_ind_emit
                                     , en_dm_ind_oper               => en_dm_ind_oper
                                     , ed_dt_emiss                  => ed_dt_emiss
                                     , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                     , en_estado_id_orig            => en_estado_id_orig
                                     , en_estado_id_dest            => en_estado_id_dest
                                     , en_dm_tipo_part              => en_dm_tipo_part
                                     , en_dm_cons_final             => en_dm_cons_final
                                     , en_dm_ind_ie_part            => en_dm_ind_ie_part
                                     , en_dm_reg_trib_part          => en_dm_reg_trib_part
                                     , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                                     , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                                     , en_dm_mot_des_icms_part      => en_dm_mot_des_icms_part
                                     --| Item
                                     , en_cest_id                   => en_cest_id
                                     , en_ncm_id                    => en_ncm_id
                                     , en_extipi_id                 => en_extipi_id
                                     , en_dm_orig_merc              => est_item_solic_calc.dm_orig_merc
                                     , en_cfop_id                   => en_cfop_id
                                     , st_row_param_calc_icmsst     => vt_row_param_calc_icmsst
                                     );
         --
         vn_fase := 2.2;
         --
         if nvl(vt_row_param_calc_icmsst.id,0) <= 0 then
            --
            vn_fase := 3;
            --
            vv_memoria                := 'Nao localizado parametro de ICMS-ST, em dados da Natureza de Operacao ou CFOP Global';
            vb_achou := false;
            vn_codst_id               := en_codst_id;
            vn_aliq_dest              := 0;
            vn_perc_reduc_bc          := 0;
            vn_obsfiscal_id           := null;
            vv_obs_compl              := null;
            vn_dm_mod_base_calc_st    := 4; --MVA
            vn_indice                 := 0;
            vn_dm_ajusta_mva          := 0;
            vn_dm_efeito              := 1; -- Destaca Imposto
            vn_dm_calc_fisica         := 0;
            vn_dm_soma_frete          := 0;
            vn_dm_soma_seguro         := 0;
            vn_dm_soma_outra_desp     := 0;
            vn_dm_soma_ipi            := 0;
            vn_dm_soma_ii             := 0;
            vn_dm_soma_icmsst_od      := 0;
            vn_dm_tipo_calc_st        := 1; -- Normal
            --
            -- Informação de Imposto parametrizado Errado
            vv_mensagem_log := 'Para o Nro. Item ' || est_item_solic_calc.nro_item || ', Item ' || est_item_solic_calc.cod_item || '-' || est_item_solic_calc.descr_item || ', '
                               || ' imposto ICMS-ST configurado de forma incorreta e CFOP ' || est_item_solic_calc.cfop
                               || ' .' || vv_memoria;
            --
            pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                             , ev_mensagem                  => vv_mensagem_log
                             , ev_resumo                    => vv_mensagem_log
                             , en_tipo_log                  => info_calc_fiscal
                             , en_referencia_id             => en_soliccalc_id
                             , ev_obj_referencia            => 'SOLIC_CALC'
                             , en_empresa_id                => en_empresa_id
                             );
            --
         else
            --
            vn_fase := 3.1;
            -- Atribui os valores encontrados
            vb_achou := true;
            vn_codst_id               := nvl(vt_row_param_calc_icmsst.codst_id, en_codst_id);
            vn_aliq_dest              := vt_row_param_calc_icmsst.aliq_dest;
            vn_perc_reduc_bc          := vt_row_param_calc_icmsst.perc_reduc_bc;
            vn_obsfiscal_id           := vt_row_param_calc_icmsst.obsfiscal_id;
            vv_obs_compl              := vt_row_param_calc_icmsst.obs_compl;
            vn_dm_mod_base_calc_st    := vt_row_param_calc_icmsst.dm_mod_base_calc_st;
            vn_indice                 := vt_row_param_calc_icmsst.indice;
            vn_dm_ajusta_mva          := vt_row_param_calc_icmsst.dm_ajusta_mva;
            vn_dm_efeito              := vt_row_param_calc_icmsst.dm_efeito;
            vn_dm_calc_fisica         := vt_row_param_calc_icmsst.dm_calc_fisica;
            vn_dm_soma_frete          := vt_row_param_calc_icmsst.dm_soma_frete;
            vn_dm_soma_seguro         := vt_row_param_calc_icmsst.dm_soma_seguro;
            vn_dm_soma_outra_desp     := vt_row_param_calc_icmsst.dm_soma_outra_desp;
            vn_dm_soma_ipi            := vt_row_param_calc_icmsst.dm_soma_ipi;
            vn_dm_soma_ii             := vt_row_param_calc_icmsst.dm_soma_ii;
            vn_dm_soma_icmsst_od      := vt_row_param_calc_icmsst.dm_soma_icmsst_od;
            vn_dm_tipo_calc_st        := vt_row_param_calc_icmsst.dm_tipo_calc_st;
            vv_memoria                := pk_csf_calc_fiscal.fkg_mem_param_calc_icmsst ( en_paramcalcicmsst_id => vt_row_param_calc_icmsst.id );
            --
         end if;
         --
      else
         --
         vn_fase := 2.3;
         -- Atribui os valores encontrados
         vb_achou := true;
         vn_codst_id               := nvl(vt_row_param_calc_icmsst_empr.codst_id, en_codst_id);
         vn_aliq_dest              := vt_row_param_calc_icmsst_empr.aliq_dest;
         vn_perc_reduc_bc          := vt_row_param_calc_icmsst_empr.perc_reduc_bc;
         vn_obsfiscal_id           := vt_row_param_calc_icmsst_empr.obsfiscal_id;
         vv_obs_compl              := vt_row_param_calc_icmsst_empr.obs_compl;
         vn_dm_mod_base_calc_st    := vt_row_param_calc_icmsst_empr.dm_mod_base_calc_st;
         vn_indice                 := vt_row_param_calc_icmsst_empr.indice;
         vn_dm_ajusta_mva          := vt_row_param_calc_icmsst_empr.dm_ajusta_mva;
         vn_dm_efeito              := vt_row_param_calc_icmsst_empr.dm_efeito;
         vn_dm_calc_fisica         := vt_row_param_calc_icmsst_empr.dm_calc_fisica;
         vn_dm_soma_frete          := vt_row_param_calc_icmsst_empr.dm_soma_frete;
         vn_dm_soma_seguro         := vt_row_param_calc_icmsst_empr.dm_soma_seguro;
         vn_dm_soma_outra_desp     := vt_row_param_calc_icmsst_empr.dm_soma_outra_desp;
         vn_dm_soma_ipi            := vt_row_param_calc_icmsst_empr.dm_soma_ipi;
         vn_dm_soma_ii             := vt_row_param_calc_icmsst_empr.dm_soma_ii;
         vn_dm_soma_icmsst_od      := vt_row_param_calc_icmsst_empr.dm_soma_icmsst_od;
         vn_dm_tipo_calc_st        := vt_row_param_calc_icmsst_empr.dm_tipo_calc_st;
         vv_memoria                := pk_csf_calc_fiscal.fkg_mem_param_calc_icmsst_empr ( en_paramcalcicmsstempr_id => vt_row_param_calc_icmsst_empr.id );
         --
      end if;
      --
   else
      --
      vn_fase := 1.2;
      --
      vv_memoria                := 'Nao tributa imposto de ICMS-ST.';
      vb_achou := false;
      vn_codst_id               := en_codst_id;
      vn_aliq_dest              := 0;
      vn_perc_reduc_bc          := 0;
      vn_obsfiscal_id           := null;
      vv_obs_compl              := null;
      vn_dm_mod_base_calc_st    := 4; --MVA
      vn_indice                 := 0;
      vn_dm_ajusta_mva          := 0;
      vn_dm_efeito              := 1; -- Destaca Imposto
      vn_dm_calc_fisica         := 0;
      vn_dm_soma_frete          := 0;
      vn_dm_soma_seguro         := 0;
      vn_dm_soma_outra_desp     := 0;
      vn_dm_soma_ipi            := 0;
      vn_dm_soma_ii             := 0;
      vn_dm_soma_icmsst_od      := 0;
      vn_dm_tipo_calc_st        := 1; -- Normal
      --
   end if;
   --
   vn_fase := 7;
   --
   if vb_achou then
      --
      vn_fase := 7.1;
      --
      est_row_imp_itemsc.itemsoliccalc_id  := est_item_solic_calc.id;
      est_row_imp_itemsc.tipoimp_id        := pk_csf.fkg_Tipo_Imposto_id ( en_cd => 2 ); -- ICMS-ST
      est_row_imp_itemsc.dm_tipo           := 0; -- Normal
      est_row_imp_itemsc.memoria := vv_memoria;
      --
      est_item_solic_calc.dm_mod_base_calc_st := vn_dm_mod_base_calc_st;
      --
      vn_fase := 7.2;
      --
      begin
         --
         select ii.vl_imp_trib
           into vn_vl_imp_ipi
           from imp_itemsc ii
              , tipo_imposto ti
          where 1 = 1
            and ii.itemsoliccalc_id = est_item_solic_calc.id
            and ii.dm_tipo = 0 -- Normal
            and ti.id = ii.tipoimp_id
            and ti.cd = '3'; -- IPI
         --
      exception
         when others then
            vn_vl_imp_ipi := 0;
      end;
      --
      vn_fase := 7.3;
      --
      begin
         --
         select ii.vl_imp_trib
           into vn_vl_imp_ii
           from imp_itemsc ii
              , tipo_imposto ti
          where 1 = 1
            and ii.itemsoliccalc_id = est_item_solic_calc.id
            and ii.dm_tipo = 0 -- Normal
            and ti.id = ii.tipoimp_id
            and ti.cd = '7'; -- Importacao
         --
      exception
         when others then
            vn_vl_imp_ii := 0;
      end;
      --
      vn_fase := 7.4;
      --
      -- recupera o ICMS-Normal
      begin
         --
         select ii.*
           into vt_row_imp_itemsc
           from imp_itemsc ii
              , tipo_imposto ti
          where 1 = 1
            and ii.itemsoliccalc_id = est_item_solic_calc.id
            and ii.dm_tipo = 0 -- Normal
            and ti.id = ii.tipoimp_id
            and ti.cd = '1';
         --
      exception
         when others then
            vt_row_imp_itemsc := null;
      end;
      --
      vn_fase := 7.5;
      --
      vn_vl_operacao := (nvl(est_item_solic_calc.vl_bruto,0) - nvl(est_item_solic_calc.vl_desc,0));
      
      if nvl(vn_dm_soma_frete,0) = 1 then
         --
         vn_vl_operacao := nvl(vn_vl_operacao,0) + nvl(est_item_solic_calc.vl_frete,0);
         --
      end if;
      --
      if nvl(vn_dm_soma_seguro,0) = 1 then
         --
         vn_vl_operacao := nvl(vn_vl_operacao,0) + nvl(est_item_solic_calc.vl_seguro,0);
         --
      end if;
      --
      if nvl(vn_dm_soma_outra_desp,0) = 1 then
         --
         vn_vl_operacao := nvl(vn_vl_operacao,0) + nvl(est_item_solic_calc.vl_outro,0);
         --
      end if;
      --
      if nvl(vn_dm_soma_ipi,0) = 1 then
         --
         vn_vl_operacao := nvl(vn_vl_operacao,0) + nvl(vn_vl_imp_ipi,0);
         --
      end if;
      --
      if nvl(vn_dm_soma_ii,0) = 1 then
         --
         vn_vl_operacao := nvl(vn_vl_operacao,0) + nvl(vn_vl_imp_ii,0);
         --
      end if;
      --
      vn_fase := 7.6;
      --
      if vn_dm_tipo_calc_st = 1 then -- Normal
         --
         vn_fase := 8;
         --
         if nvl(est_item_solic_calc.dm_mod_base_calc_st,-1) = 4 then -- Margem de Valor Agregado
            --
            vn_fase := 8.1;
            --
            if nvl(vn_dm_ajusta_mva,0) = 1 then
               --
               vn_fase := 8.11;
               -- calcula a MVA Ajustada
               vn_a := round( ( 1 + (nvl(vn_indice,1) / 100)), 4);
               --
               vn_fase := 8.12;
               vn_b := round( ( 1 - ( nvl(vt_row_imp_itemsc.aliq_apli,1)/100 ) ) / ( 1 - ( nvl(vn_aliq_dest,1)/100 ) ), 4);
               --
               vn_fase := 8.13;
               vn_indice :=round( ( ( nvl(vn_a,0) * nvl(vn_b,0) ) - 1 ) * 100, 2 );
               --
            else
               --
               vn_indice := round(vn_indice,2);
               --
            end if;
            --
            vn_fase := 8.2;
            est_row_imp_itemsc.vl_base_calc := round(nvl(vn_vl_operacao,0) + ( nvl(vn_vl_operacao,0) * (nvl(vn_indice,1)/100) ), 2);
            est_row_imp_itemsc.aliq_apli    := vn_aliq_dest;
            est_row_imp_itemsc.perc_adic    := vn_indice;
            --
            est_row_imp_itemsc.vl_imp_trib := ( nvl(est_row_imp_itemsc.vl_base_calc,0) * ( nvl(est_row_imp_itemsc.aliq_apli,1)/100 ) ) - nvl(vt_row_imp_itemsc.vl_imp_trib,0);
            --
         else
            --
            vn_fase := 8.3;
            est_row_imp_itemsc.vl_base_calc := round( ( nvl(vn_indice,0) * nvl(est_item_solic_calc.qtde,0) ), 2);
            est_row_imp_itemsc.aliq_apli    := vn_aliq_dest;
            vn_fase := 8.4;
            est_row_imp_itemsc.vl_imp_trib := round( ( nvl(est_row_imp_itemsc.vl_base_calc,0) * ( nvl(est_row_imp_itemsc.aliq_apli,1)/100 ) ), 2) - nvl(vt_row_imp_itemsc.vl_imp_trib,0);
            --
         end if;
         --
      elsif vn_dm_tipo_calc_st = 2 then -- Pauta x MVA
         --
         vn_fase := 9;
         --
      elsif vn_dm_tipo_calc_st = 3 then -- Carga Liquida
         --
         vn_fase := 10;
         --
      elsif vn_dm_tipo_calc_st = 4 then -- Carga Media
         --
         vn_fase := 11;
            --
            est_row_imp_itemsc.aliq_apli    := vn_indice;
            est_row_imp_itemsc.vl_imp_trib  := round( ( nvl(vn_vl_operacao,0) * ( nvl(est_row_imp_itemsc.aliq_apli,1)/100 ) ), 2);
            --
            vn_fase := 11.1;
            --
            est_row_imp_itemsc.vl_base_calc := round( ( nvl(vt_row_imp_itemsc.vl_imp_trib,0) + nvl(est_row_imp_itemsc.vl_imp_trib,0) ) / (nvl(vn_aliq_dest,1)/100), 2);
         --
      end if;
      --
      vn_fase := 12;
      --
      if vn_dm_efeito = 2 then --Lista na Observacao
         --
         vn_fase := 12.1;
         vn_vl_base_calc_obs  := nvl(est_row_imp_itemsc.vl_base_calc,0);
         vn_vl_imp_trib_obs   := nvl(est_row_imp_itemsc.vl_imp_trib,0);
         --
         vn_fase := 12.2;
         if nvl(vn_dm_soma_icmsst_od,0) = 1 then -- Sim, soma o valor de ICMS-ST em Outras Despesas
            --
            est_item_solic_calc.vl_outro := nvl(est_item_solic_calc.vl_outro,0) + nvl(vn_vl_imp_trib_obs,0);
            --
         end if;
         --
      end if;
      --
      vn_fase := 13;
      -- Cria a mensagem de ICMS-ST informado na Observação da Nota Fiscal
      if nvl(vn_vl_base_calc_obs,0) > 0 and nvl(vn_vl_imp_trib_obs,0) > 0 then
         --
         vn_fase := 13.1;
         vv_texto := 'Base de Calculo de ICMS-ST: ' || trim(to_char(vn_vl_base_calc_obs, '999G999G999G990D99'))||
                     ' Valor Tributado de ICMS-ST: ' || trim(to_char(vn_vl_imp_trib_obs, '999G999G999G990D99'));
         --
         vn_fase := 13.2;
         if trim(vv_obs_compl) is not null then
            vv_obs_compl := vv_obs_compl || ', ' || vv_texto;
         else
            vv_obs_compl := vv_texto;
         end if;
         --
      end if;
      --
      vn_fase := 14;
      --
      -- Atualiza os dados do Imposto de ICMS-Normal
      if nvl(vn_codst_id,0) > 0 then
         --
         update imp_itemsc set codst_id = vn_codst_id
          where id = vt_row_imp_itemsc.id;
         --
      end if;
      --
      vn_fase := 15;
      --| Monta as Observações da Solicitação do Calculo
      -- Procedimento de montagem da Observacao Fiscal da Solicitação de Calculo
      pkb_monta_sc_infor_adic ( en_soliccalc_id              => en_soliccalc_id
                              , en_empresa_id                => en_empresa_id
                              , en_obsfiscal_id              => vn_obsfiscal_id
                              , ev_obs_compl                 => vv_obs_compl
                              );
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_calc_icmsst fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_calc_icmsst;

-------------------------------------------------------------------------------------------------------

--| Procedimento de recuperar parâmetros de calculo de ICMS Global
procedure pkb_recup_param_calc_icms ( en_soliccalc_id              in solic_calc.id%type
                                    , en_empresa_id                in empresa.id%type
                                    , en_cnae_id                   in cnae.id%type
                                    , en_regtrib_id                in reg_trib.id%type
                                    , en_formatrib_id              in forma_trib.id%type
                                    , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                                    , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                                    , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                    , ev_cpf_cnpj_part             in varchar2
                                    , en_estado_id_orig            in estado.id%type
                                    , en_estado_id_dest            in estado.id%type
                                    , en_dm_tipo_part              in solic_calc.dm_tipo_part%type
                                    , en_dm_cons_final             in solic_calc.dm_cons_final%type
                                    , en_dm_ind_ie_part            in solic_calc.dm_ind_ie_part%type
                                    , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                                    , en_dm_part_tem_suframa       in solic_calc.dm_part_tem_suframa%type
                                    , en_dm_ind_ativ_part          in solic_calc.dm_ind_ativ_part%type
                                    , en_dm_mot_des_icms_part      in solic_calc.dm_mot_des_icms_part%type
                                    --| Item
                                    , en_ncm_id                    in ncm.id%type
                                    , en_extipi_id                 in ex_tipi.id%type
                                    , en_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                    , en_cfop_id                   in cfop.id%type
                                    , st_row_param_calc_icms       out param_calc_icms%rowtype
                                    )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_dm_calc_fisica         param_calc_icms.dm_calc_fisica%type;
   vn_dm_calc_cons_final     param_calc_icms.dm_calc_cons_final%type;
   vn_dm_calc_contr_isento   param_calc_icms.dm_calc_contr_isento%type;
   vn_dm_calc_nao_contr      param_calc_icms.dm_calc_nao_contr%type;
   vn_dm_emit_com_suframa    param_calc_icms.dm_emit_com_suframa%type;
   vn_dm_dest_com_suframa    param_calc_icms.dm_dest_com_suframa%type;
   vv_empresa_suframa        juridica.suframa%type;
   --
   vn_qtde_regtrib number;
   vn_qtde_formatrib number;
   vn_qtde_cnae number;
   vn_qtde_estdest number;
   vn_qtde_cfop number;
   vn_qtde_ncm number;
   vn_qtde_extipi number;
   vn_qtde_origmerc number;
   vn_qtde_tpparam  number;
   vn_ncm_id        ncm.id%type;
   --
   cursor c_dados is
   select distinct
          p.prioridade
     from param_calc_icms p
    where p.estado_id_orig             = en_estado_id_orig
      and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
    order by p.prioridade;
   --
   -- Procedimento de recuperar parâmetros do Regime de Tributação
   procedure pkb_recup_param_regtrib ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                     , enc_regtrib_id                in reg_trib.id%type
                                     , enc_formatrib_id              in forma_trib.id%type
                                     , enc_cnae_id                   in cnae.id%type
                                     , enc_estado_id_dest            in estado.id%type
                                     , enc_cfop_id                   in cfop.id%type
                                     , enc_ncm_id                    in ncm.id%type
                                     , enc_extipi_id                 in ex_tipi.id%type
                                     , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                     , enc_dm_calc_fisica            in param_calc_icms.dm_calc_fisica%type
                                     , enc_dm_calc_cons_final        in param_calc_icms.dm_calc_cons_final%type
                                     , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                     , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                     , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                     , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                     )
   is
      --
      cursor c_rtrib is
      select p.*
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.regtrib_id,0)       = nvl(enc_regtrib_id,0)
         and nvl(p.formatrib_id,0)     = nvl(enc_formatrib_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.estado_id_dest,0)   = nvl(enc_estado_id_dest,0)
         and nvl(p.cfop_id, 0)         = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_regtrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_regtrib_id: ' || enc_regtrib_id
                                                || ' enc_formatrib_id: ' || enc_formatrib_id
                                                || ' enc_cnae_id: ' || enc_cnae_id
                                                || ' enc_estado_id_dest: ' || enc_estado_id_dest
                                || ' enc_cfop_id: ' || enc_cfop_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_rtrib loop
         exit when c_rtrib%notfound or (c_rtrib%notfound) is null;
         --
         vn_fase := 3.1;
         --
         --insert into erro values (rec.id); commit;
         --
         st_row_param_calc_icms := rec;
         --
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and ( nvl(enc_regtrib_id,0) > 0 or nvl(vn_qtde_regtrib,0) > 0 )
         then
         --
         vn_qtde_regtrib := 0;
         --
         -- Aplica a recursividade para achar com o Regime de tributação nulo
         pkb_recup_param_regtrib ( evc_dm_tipo_param             => evc_dm_tipo_param
                                 , enc_regtrib_id                => null
                                 , enc_formatrib_id              => enc_formatrib_id
                                 , enc_cnae_id                   => enc_cnae_id
                                 , enc_estado_id_dest            => enc_estado_id_dest
                                 , enc_cfop_id                   => enc_cfop_id
                                 , enc_ncm_id                    => enc_ncm_id
                                 , enc_extipi_id                 => enc_extipi_id
                                 , enc_dm_orig_merc              => enc_dm_orig_merc
                                 , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                 , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                 , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                 , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                 , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                 , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                 );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_regtrib fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_regtrib;
   --
   -- Procedimento de recuperar parâmetros do Forma de Tributação
   procedure pkb_recup_param_formatrib ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                       , enc_formatrib_id              in forma_trib.id%type
                                       , enc_cnae_id                   in cnae.id%type
                                       , enc_estado_id_dest            in estado.id%type
                                       , enc_cfop_id                   in cfop.id%type
                                       , enc_ncm_id                    in ncm.id%type
                                       , enc_extipi_id                 in ex_tipi.id%type
                                       , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                       , enc_dm_calc_fisica            in param_calc_icms.dm_calc_fisica%type
                                       , enc_dm_calc_cons_final        in param_calc_icms.dm_calc_cons_final%type
                                       , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                       , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                       , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                       , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                       )
   is
      --
      cursor c_ftrib is
      select distinct
             p.prioridade
           , p.formatrib_id
           , p.cnae_id
           , p.estado_id_dest
           , p.dm_tipo_param
           , p.cfop_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.formatrib_id,0)     = nvl(enc_formatrib_id,0)
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.estado_id_dest,0)   = nvl(enc_estado_id_dest,0)
         and nvl(p.cfop_id, 0)         = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 4;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_formatrib evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_formatrib_id: ' || enc_formatrib_id
                                                || ' enc_cnae_id: ' || enc_cnae_id
                                                || ' enc_estado_id_dest: ' || enc_estado_id_dest
                                || ' enc_cfop_id: ' || enc_cfop_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_ftrib loop
         exit when c_ftrib%notfound or (c_ftrib%notfound) is null;
         --
         vn_fase := 4.1;
         --
         vn_qtde_regtrib := 1;
         --
         pkb_recup_param_regtrib ( evc_dm_tipo_param             => rec.dm_tipo_param
                                 , enc_regtrib_id                => en_regtrib_id
                                 , enc_formatrib_id              => rec.formatrib_id
                                 , enc_cnae_id                   => rec.cnae_id
                                 , enc_estado_id_dest            => rec.estado_id_dest
                                 , enc_cfop_id                   => rec.cfop_id
                                 , enc_ncm_id                    => rec.ncm_id
                                 , enc_extipi_id                 => rec.extipi_id
                                 , enc_dm_orig_merc              => rec.dm_orig_merc
                                 , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                 , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                 , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                 , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                 , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                 , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                 );
         --
         vn_fase := 4.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and ( nvl(enc_formatrib_id,0) > 0 or nvl(vn_qtde_formatrib,0) > 0 )
         then
         --
         vn_qtde_formatrib := 0;
         --
         -- Aplica a recursividade para achar com o Forma de tributação nulo
         pkb_recup_param_formatrib ( evc_dm_tipo_param             => evc_dm_tipo_param
                                   , enc_formatrib_id              => null
                                   , enc_cnae_id                   => enc_cnae_id
                                   , enc_estado_id_dest            => enc_estado_id_dest
                                   , enc_cfop_id                   => enc_cfop_id
                                   , enc_ncm_id                    => enc_ncm_id
                                   , enc_extipi_id                 => enc_extipi_id
                                   , enc_dm_orig_merc              => enc_dm_orig_merc
                                   , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                   , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                   , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                   , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                   , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                   , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                   );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_formatrib fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_formatrib;
   --
   -- Procedimento de recuperar parâmetros do CNAE
   procedure pkb_recup_param_cnae ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                  , enc_cnae_id                   in cnae.id%type
                                  , enc_estado_id_dest            in estado.id%type
                                  , enc_cfop_id                   in cfop.id%type
                                  , enc_ncm_id                    in ncm.id%type
                                  , enc_extipi_id                 in ex_tipi.id%type
                                  , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                  , enc_dm_calc_fisica            in param_calc_icms.dm_calc_fisica%type
                                  , enc_dm_calc_cons_final        in param_calc_icms.dm_calc_cons_final%type
                                  , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                  , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                  , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                  , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                  )
   is
      --
      vn_cnae_id    cnae.id%type;
      --
      cursor c_cnae is
      select distinct
             p.prioridade
           , p.cnae_id
           , p.estado_id_dest
           , p.dm_tipo_param
           , p.cfop_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.cnae_id,0)          = nvl(enc_cnae_id,0)
         and nvl(p.estado_id_dest,0)   = nvl(enc_estado_id_dest,0)
         and nvl(p.cfop_id, 0)         = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 5;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_cnae evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_cnae_id: ' || enc_cnae_id
                                                || ' enc_estado_id_dest: ' || enc_estado_id_dest
                                || ' enc_cfop_id: ' || enc_cfop_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_cnae loop
         exit when c_cnae%notfound or (c_cnae%notfound) is null;
         --
         vn_fase := 5.1;
         --
         vn_qtde_formatrib := 1;
         -- Forma de Tributação
         pkb_recup_param_formatrib ( evc_dm_tipo_param             => evc_dm_tipo_param
                                   , enc_formatrib_id              => en_formatrib_id
                                   , enc_cnae_id                   => rec.cnae_id
                                   , enc_estado_id_dest            => rec.estado_id_dest
                                   , enc_cfop_id                   => rec.cfop_id
                                   , enc_ncm_id                    => rec.ncm_id
                                   , enc_extipi_id                 => rec.extipi_id
                                   , enc_dm_orig_merc              => rec.dm_orig_merc
                                   , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                   , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                   , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                   , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                   , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                   , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                   );
         --
         vn_fase := 5.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 5.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and ( nvl(enc_cnae_id,0) > 0 or nvl(vn_qtde_cnae,0) > 0 )
         then
         -- Recupera do CNAE superior para pesquisa
         vn_cnae_id := pk_csf.fkg_ar_cnae_id ( en_cnae_id => enc_cnae_id );
         --
         if nvl(vn_cnae_id,0) <= 0 then
            vn_qtde_cnae := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o CNAE nulo ou de nível superior
         pkb_recup_param_cnae ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cnae_id                   => vn_cnae_id
                              , enc_estado_id_dest            => enc_estado_id_dest
                              , enc_cfop_id                   => enc_cfop_id
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_extipi_id                 => enc_extipi_id
                              , enc_dm_orig_merc              => enc_dm_orig_merc
                              , enc_dm_calc_fisica            => enc_dm_calc_fisica
                              , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                              , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                              , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                              , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                              , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cnae fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cnae;
   --
   -- Procedimento de recuperar parâmetros do Estado do Destinatario
   procedure pkb_recup_param_estdest ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                     , enc_estado_id_dest            in estado.id%type
                                     , enc_cfop_id                   in cfop.id%type
                                     , enc_ncm_id                    in ncm.id%type
                                     , enc_extipi_id                 in ex_tipi.id%type
                                     , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                     , enc_dm_calc_fisica            in param_calc_icms.dm_calc_fisica%type
                                     , enc_dm_calc_cons_final        in param_calc_icms.dm_calc_cons_final%type
                                     , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                     , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                     , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                     , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                     )
   is
      --
      cursor c_ufdest is
      select distinct
             p.prioridade
           , p.estado_id_dest
           , p.dm_tipo_param
           , p.cfop_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.estado_id_dest,0)   = nvl(enc_estado_id_dest,0)
         and nvl(p.cfop_id, 0)         = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 6;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_estdest evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_estado_id_dest: ' || enc_estado_id_dest
                                || ' enc_cfop_id: ' || enc_cfop_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_ufdest loop
         exit when c_ufdest%notfound or (c_ufdest%notfound) is null;
         --
         vn_fase := 6.1;
         --
         vn_qtde_cnae := 1;
         --
         pkb_recup_param_cnae ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cnae_id                   => en_cnae_id
                              , enc_estado_id_dest            => rec.estado_id_dest
                              , enc_cfop_id                   => rec.cfop_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_extipi_id                 => rec.extipi_id
                              , enc_dm_orig_merc              => rec.dm_orig_merc
                              , enc_dm_calc_fisica            => rec.dm_calc_fisica
                              , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                              , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                              , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                              , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                              , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                              );
         --
         vn_fase := 6.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 6.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and ( nvl(enc_estado_id_dest,0) > 0 or nvl(vn_qtde_estdest,0) > 0 )
         then
         --
         vn_qtde_estdest := 0;
         -- Aplica a recursividade para achar com o Estado do Destinatario nulo
         pkb_recup_param_estdest ( evc_dm_tipo_param             => evc_dm_tipo_param
                                 , enc_estado_id_dest            => null
                                 , enc_cfop_id                   => enc_cfop_id
                                 , enc_ncm_id                    => enc_ncm_id
                                 , enc_extipi_id                 => enc_extipi_id
                                 , enc_dm_orig_merc              => enc_dm_orig_merc
                                 , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                 , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                 , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                 , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                 , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                 , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                 );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_estdest fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_estdest;
   --
   -- Procedimento de recuperar parâmetros do CFOP
   procedure pkb_recup_param_cfop ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                  , enc_cfop_id                   in cfop.id%type
                                  , enc_ncm_id                    in ncm.id%type
                                  , enc_extipi_id                 in ex_tipi.id%type
                                  , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                  , enc_dm_calc_fisica            in param_calc_icms.dm_calc_fisica%type
                                  , enc_dm_calc_cons_final        in param_calc_icms.dm_calc_cons_final%type
                                  , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                  , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                  , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                  , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                  )
   is
      --
      cursor c_cfop is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.cfop_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.cfop_id, 0)         = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 7;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_cfop evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_cfop_id: ' || enc_cfop_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_cfop loop
         exit when c_cfop%notfound or (c_cfop%notfound) is null;
         --
         vn_fase := 7.1;
         --
         vn_qtde_estdest := 1;
         --| Verifica no nivel abaixo (Estado do Destinatario)
         pkb_recup_param_estdest ( evc_dm_tipo_param             => rec.dm_tipo_param
                                 , enc_estado_id_dest            => en_estado_id_dest
                                 , enc_cfop_id                   => rec.cfop_id
                                 , enc_ncm_id                    => rec.ncm_id
                                 , enc_extipi_id                 => rec.extipi_id
                                 , enc_dm_orig_merc              => rec.dm_orig_merc
                                 , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                 , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                 , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                 , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                 , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                 , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                 );
         --
         vn_fase := 7.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and ( nvl(enc_cfop_id,0) > 0 or nvl(vn_qtde_cfop,0) > 0 )
         then
         --
         vn_qtde_cfop := 0;
         -- Aplica a recursividade para achar com o CFOP nulo
         pkb_recup_param_cfop ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cfop_id                   => null
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_extipi_id                 => enc_extipi_id
                              , enc_dm_orig_merc              => enc_dm_orig_merc
                              , enc_dm_calc_fisica            => enc_dm_calc_fisica
                              , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                              , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                              , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                              , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                              , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cfop fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cfop;
   --
   -- Procedimento de recuperar parâmetros do NCM
   procedure pkb_recup_param_ncm ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                 , enc_ncm_id                    in ncm.id%type
                                 , enc_extipi_id                 in ex_tipi.id%type
                                 , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                 , enc_dm_calc_fisica            in param_calc_icms.dm_calc_fisica%type
                                 , enc_dm_calc_cons_final        in param_calc_icms.dm_calc_cons_final%type
                                 , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                 , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                 , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                 , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                 )
   is
      --
      cursor c_ncm is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 8;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_ncm evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_ncm loop
         exit when c_ncm%notfound or (c_ncm%notfound) is null;
         --
         vn_fase := 8.1;
         --
         vn_qtde_cfop := 1;
         --| Verifica no nivel abaixo (CFOP)
         pkb_recup_param_cfop ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , enc_cfop_id                   => en_cfop_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_extipi_id                 => rec.extipi_id
                              , enc_dm_orig_merc              => rec.dm_orig_merc
                              , enc_dm_calc_fisica            => rec.dm_calc_fisica
                              , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                              , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                              , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                              , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                              , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                              );
         --
         vn_fase := 8.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 8.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and ( nvl(enc_ncm_id,0) > 0 or nvl(vn_qtde_ncm,0) > 0 )
         then
         --
         vn_ncm_id := pk_csf.fkg_ncm_id_superior ( ev_cod_ncm => pk_csf.fkg_cod_ncm_id ( en_ncm_id => enc_ncm_id ) );
         --
         if nvl(vn_ncm_id,0) <= 0 then
            vn_qtde_ncm := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o NCM nulo
         pkb_recup_param_ncm ( evc_dm_tipo_param             => evc_dm_tipo_param
                             , enc_ncm_id                    => vn_ncm_id
                             , enc_extipi_id                 => enc_extipi_id
                             , enc_dm_orig_merc              => enc_dm_orig_merc
                             , enc_dm_calc_fisica            => enc_dm_calc_fisica
                             , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                             , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                             , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                             , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                             , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                             );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_ncm fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_ncm;
   --
   -- Procedimento de recuperar parâmetros do Ex-Tipi
   procedure pkb_recup_param_extipi ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                    , enc_extipi_id                 in ex_tipi.id%type
                                    , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                    , enc_dm_calc_fisica            in param_calc_icms.dm_calc_fisica%type
                                    , enc_dm_calc_cons_final        in param_calc_icms.dm_calc_cons_final%type
                                    , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                    , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                    , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                    , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                    )
   is
      --
      cursor c_extipi is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.extipi_id
           , p.dm_orig_merc
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 9;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_extipi evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_extipi loop
         exit when c_extipi%notfound or (c_extipi%notfound) is null;
         --
         vn_fase := 9.1;
         --
         vn_qtde_ncm := 1;
         --| Verifica no nivel abaixo (NCM)
         pkb_recup_param_ncm ( evc_dm_tipo_param             => rec.dm_tipo_param
                             , enc_ncm_id                    => en_ncm_id
                             , enc_extipi_id                 => rec.extipi_id
                             , enc_dm_orig_merc              => rec.dm_orig_merc
                             , enc_dm_calc_fisica            => rec.dm_calc_fisica
                             , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                             , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                             , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                             , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                             , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                             );
         --
         vn_fase := 9.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 9.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and ( nvl(enc_extipi_id,0) > 0 or nvl(vn_qtde_extipi,0) > 0 )
         then
         --
         vn_qtde_extipi := 0;
         -- Aplica a recursividade para achar com o Ex-Tipi nulo
         pkb_recup_param_extipi ( evc_dm_tipo_param             => evc_dm_tipo_param
                                , enc_extipi_id                 => null
                                , enc_dm_orig_merc              => enc_dm_orig_merc
                                , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_extipi fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_extipi;
   --
   -- Procedimento de recuperar parâmetros da Origem da Mercadoria
   procedure pkb_recup_param_origmerc ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                      , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                      , enc_dm_calc_fisica            in param_calc_icms.dm_calc_fisica%type
                                      , enc_dm_calc_cons_final        in param_calc_icms.dm_calc_cons_final%type
                                      , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                      , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                      , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                      , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                      )
   is
      --
      cursor c_origmerc is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_orig_merc
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.dm_orig_merc,0)     = nvl(enc_dm_orig_merc,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase :=10;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_origmerc evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_origmerc loop
         exit when c_origmerc%notfound or (c_origmerc%notfound) is null;
         --
         vn_fase := 10.1;
         --
         vn_qtde_extipi := 1;
         --| Verifica no nivel abaixo (Ex-Tipi)
         pkb_recup_param_extipi ( evc_dm_tipo_param             => rec.dm_tipo_param
                                , enc_extipi_id                 => en_extipi_id
                                , enc_dm_orig_merc              => rec.dm_orig_merc
                                , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                );
         --
         vn_fase := 10.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 10.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and ( trim(enc_dm_orig_merc) is not null or nvl(vn_qtde_origmerc,0) > 0 )
         then
         --
         vn_qtde_origmerc := 0;
         -- Aplica a recursividade para achar com a Origem da Mercadoria nulo
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_orig_merc              => null
                                  , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                  , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                  , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                  , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                  , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                  , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_origmerc fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_origmerc;
   --
   -- Procedimento de recuperar parâmetros da Calcula Pessoa Fisica
   procedure pkb_recup_param_calcfisica ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                        , enc_dm_calc_fisica            in param_calc_icms.dm_calc_fisica%type
                                        , enc_dm_calc_cons_final        in param_calc_icms.dm_calc_cons_final%type
                                        , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                        , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                        , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                        , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                        )
   is
      --
      cursor c_calcfisica is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 11;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_calcfisica evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit; */
      --
      for rec in c_calcfisica loop
         exit when c_calcfisica%notfound or (c_calcfisica%notfound) is null;
         --
         vn_fase := 11.1;
         --
         vn_qtde_origmerc := 1;
         --| Verifica no nivel abaixo (Origem da Mercadoria)
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_orig_merc              => en_dm_orig_merc
                                  , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                  , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                  , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                  , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                  , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                  , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                  );
         --
         vn_fase := 11.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 11.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and nvl(enc_dm_calc_fisica,0) in (0, 1)
         then
         --
         -- Aplica a recursividade para achar com o Calcula Pessoa Fisica Indiferente
         pkb_recup_param_calcfisica ( evc_dm_tipo_param             => evc_dm_tipo_param
                                    , enc_dm_calc_fisica            => 2
                                    , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                    , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                    , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                    , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                    , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                    );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calcfisica fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_calcfisica;
   --
   -- Procedimento de recuperar parâmetros da Calcula Consumidor Final
   procedure pkb_recup_param_consfinal ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                       , enc_dm_calc_cons_final        in param_calc_icms.dm_calc_cons_final%type
                                       , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                       , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                       , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                       , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                       )
   is
      --
      cursor c_calcfisica is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 12;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_consfinal evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit; */
      --
      for rec in c_calcfisica loop
         exit when c_calcfisica%notfound or (c_calcfisica%notfound) is null;
         --
         vn_fase := 12.1;
         --
         --| Verifica no nivel abaixo (Calcula Pessoa Fisica)
         pkb_recup_param_calcfisica ( evc_dm_tipo_param             => rec.dm_tipo_param
                                    , enc_dm_calc_fisica            => vn_dm_calc_fisica
                                    , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                    , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                    , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                    , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                    , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                    );
         --
         vn_fase := 12.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 12.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and nvl(enc_dm_calc_cons_final,0) in (0, 1, 3, 4, 5, 6, 7) then 
         --
         -- Aplica a recursividade para achar com o Calcula Consumidor Final Indiferente
         pkb_recup_param_consfinal ( evc_dm_tipo_param             => evc_dm_tipo_param
                                   , enc_dm_calc_cons_final        => 2
                                   , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                   , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                   , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                   , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                   );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_consfinal fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_consfinal;
   --
   -- Procedimento de recuperar parâmetros da Calcula Contribuinte Isento
   procedure pkb_recup_param_contrisento ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                         , enc_dm_calc_contr_isento      in param_calc_icms.dm_calc_contr_isento%type
                                         , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                         , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                         , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                         )
   is
      --
      cursor c_contrisento is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 13;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_contrisento evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_contrisento loop
         exit when c_contrisento%notfound or (c_contrisento%notfound) is null;
         --
         vn_fase := 13.1;
         --
         --| Verifica no nivel abaixo (Calcula Consumidor Final)
         pkb_recup_param_consfinal ( evc_dm_tipo_param             => rec.dm_tipo_param
                                   , enc_dm_calc_cons_final        => vn_dm_calc_cons_final
                                   , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                   , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                   , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                   , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                   );
         --
         vn_fase := 13.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 13.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and nvl(enc_dm_calc_contr_isento,0) in (0, 1)
         then
         --
         -- Aplica a recursividade para achar com o Calcula Contribuinte Isento Indiferente
         pkb_recup_param_contrisento ( evc_dm_tipo_param             => evc_dm_tipo_param
                                     , enc_dm_calc_contr_isento      => 2
                                     , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                     , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                     , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                     );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_contrisento fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_contrisento;
   --
   -- Procedimento de recuperar parâmetros da Calcula Não Contribuinte
   procedure pkb_recup_param_naocontr ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                      , enc_dm_calc_nao_contr         in param_calc_icms.dm_calc_nao_contr%type
                                      , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                      , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                      )
   is
      --
      cursor c_contrisento is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig          = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 14;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_naocontr evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_contrisento loop
         exit when c_contrisento%notfound or (c_contrisento%notfound) is null;
         --
         vn_fase := 14.1;
         --
         --| Verifica no nivel abaixo (Calcula Contribuinte Isento)
         pkb_recup_param_contrisento ( evc_dm_tipo_param             => rec.dm_tipo_param
                                     , enc_dm_calc_contr_isento      => vn_dm_calc_contr_isento
                                     , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                     , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                     , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                     );
         --
         vn_fase := 14.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 14.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and nvl(enc_dm_calc_nao_contr,0) in (0, 1)
         then
         --
         -- Aplica a recursividade para achar com o Calcula Não Contribuinte Indiferente
         pkb_recup_param_naocontr ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_calc_nao_contr         => 2
                                  , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                  , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_naocontr fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_naocontr;
   --
   -- Procedimento de recuperar parâmetros da Emitente com Suframa
   procedure pkb_recup_param_emitsufr ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                      , enc_dm_emit_com_suframa       in param_calc_icms.dm_emit_com_suframa%type
                                      , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                      )
   is
      --
      cursor c_emitsufr is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig         = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param          = evc_dm_tipo_param
         and p.dm_emit_com_suframa    = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa    = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 15;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_emitsufr evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_emitsufr loop
         exit when c_emitsufr%notfound or (c_emitsufr%notfound) is null;
         --
         vn_fase := 15.1;
         --
         --| Verifica no nivel abaixo (Calcula Não Contribuinte)
         pkb_recup_param_naocontr ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_calc_nao_contr         => vn_dm_calc_nao_contr
                                  , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                  , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                  );
         --
         vn_fase := 15.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 14.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and nvl(enc_dm_emit_com_suframa,0) in (0, 1)
         then
         --
         -- Aplica a recursividade para achar com o Emitente com Suframa Indiferente
         pkb_recup_param_emitsufr ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_emit_com_suframa       => 2
                                  , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_emitsufr fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_emitsufr;
   --
   -- Procedimento de recuperar parâmetros da Destinatário com Suframa
   procedure pkb_recup_param_destsufr ( evc_dm_tipo_param             in param_calc_icms.dm_tipo_param%type
                                      , enc_dm_dest_com_suframa       in param_calc_icms.dm_dest_com_suframa%type
                                      )
   is
      --
      cursor c_destsufr is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_dest_com_suframa
        from param_calc_icms p
       where p.estado_id_orig         = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param          = evc_dm_tipo_param
         and p.dm_dest_com_suframa    = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 16;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_destsufr evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_destsufr loop
         exit when c_destsufr%notfound or (c_destsufr%notfound) is null;
         --
         vn_fase := 16.1;
         --
         --| Verifica no nivel abaixo (Emitente com Suframa)
         pkb_recup_param_emitsufr ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_emit_com_suframa       => vn_dm_emit_com_suframa
                                  , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                  );
         --
         vn_fase := 16.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 16.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and nvl(enc_dm_dest_com_suframa,0) in (0, 1)
         then
         --
         -- Aplica a recursividade para achar com o Destinatário com Suframa Indiferente
         pkb_recup_param_destsufr ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_dest_com_suframa       => 2
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_destsufr fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_destsufr;
   --
   -- Procedimento de recuperar parâmetros do Tipo de Parametro (E-Excecao ou R-Regra)
   procedure pkb_recup_param_tpparam ( evc_dm_tipo_param       in param_calc_icms.dm_tipo_param%type
                                     )
   is
      --
      cursor c_tpparam is
      select distinct
             p.prioridade
           , p.dm_tipo_param
        from param_calc_icms p
       where p.estado_id_orig         = en_estado_id_orig
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param          = evc_dm_tipo_param
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 17;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_tpparam evc_dm_tipo_param: ' || evc_dm_tipo_param
                               );
      commit;*/
      --
      for rec in c_tpparam loop
         exit when c_tpparam%notfound or (c_tpparam%notfound) is null;
         --
         vn_fase := 17.1;
         --
         --| Verifica no nivel abaixo (Destinatário com Suframa)
         pkb_recup_param_destsufr ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_dest_com_suframa       => vn_dm_dest_com_suframa
                                  );
         --
         vn_fase := 17.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 17.3;
      --
      if nvl(st_row_param_calc_icms.id,0) <= 0
         and nvl(vn_qtde_tpparam,0) > 0
         then
         --
         vn_qtde_tpparam := 0;
         -- Aplica a recursividade para achar com o Tipo de Parametro "Regra"
         pkb_recup_param_tpparam ( evc_dm_tipo_param       => 'R' ); -- Regra
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpparam fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpparam;
   --
begin
   --
   vn_fase := 1;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_calc_icms ' );
      commit;*/
   --
   if en_dm_tipo_part = 1 then -- Fisica
      vn_dm_calc_fisica := 1; -- Sim
   elsif en_dm_tipo_part = 2 then -- Juridica
      vn_dm_calc_fisica := 0; -- Não
   else
      --
      vn_dm_calc_fisica := 2; -- Indiferente
      --
   end if;
   --
   vn_fase := 1.1;
   --
   if en_dm_cons_final = 1 then -- Consumidor Final Sim
      vn_dm_calc_cons_final := 1; -- Sim
   elsif en_dm_cons_final = 0 then -- Consumidor Final Não
      vn_dm_calc_cons_final := 0; -- Não
   --
   --3 - Industria, 4 - Comercio, 5-Atacado, 6 - Varejo
   elsif en_dm_cons_final = 3 then
      vn_dm_calc_cons_final := 3;
   elsif en_dm_cons_final = 4 then
      vn_dm_calc_cons_final := 4;
   elsif en_dm_cons_final = 5 then
      vn_dm_calc_cons_final := 5;
   elsif en_dm_cons_final = 6 then
      vn_dm_calc_cons_final := 6;
   elsif en_dm_cons_final = 7 then
      vn_dm_calc_cons_final := 7;
   --
   else
      vn_dm_calc_cons_final := 2; -- Indiferente
   end if;
   --
   vn_fase := 1.2;
   --
   if en_dm_ind_ie_part in (1) then
      vn_dm_calc_contr_isento   := 0; -- Não
      vn_dm_calc_nao_contr      := 0; -- Não
   elsif en_dm_ind_ie_part in (2) then
      vn_dm_calc_contr_isento   := 1; -- Sim
      vn_dm_calc_nao_contr      := 0; -- Não
   elsif en_dm_ind_ie_part in (9) then
      vn_dm_calc_contr_isento   := 0; -- Não
      vn_dm_calc_nao_contr      := 1; -- Sim
   else
      -- Indiferente
      vn_dm_calc_contr_isento   := 2;
      vn_dm_calc_nao_contr      := 2;
   end if;
   --
   vn_fase := 1.3;
   --
   begin
      --
      select j.suframa
        into vv_empresa_suframa
        from empresa e
           , juridica j
       where e.id = en_empresa_id
         and j.pessoa_id = e.pessoa_id
         and trim(j.suframa) is not null
         and rownum = 1;
      --
   exception
      when others then
         vv_empresa_suframa := null;
   end;
   --
   vn_fase := 1.4;
   --
   if en_dm_ind_emit = 0 then -- Emissão Propria
      --
      if trim(vv_empresa_suframa) is not null then
         vn_dm_emit_com_suframa := 1;
      else
         vn_dm_emit_com_suframa := 0;
      end if;
      --
      if en_dm_part_tem_suframa = 1 then
         vn_dm_dest_com_suframa := 1;
      else
         vn_dm_dest_com_suframa := 0;
      end if;
      --
   else
      --
      if trim(vv_empresa_suframa) is not null then
         vn_dm_dest_com_suframa := 1;
      else
         vn_dm_dest_com_suframa := 0;
      end if;
      --
      if en_dm_part_tem_suframa = 1 then
         vn_dm_emit_com_suframa := 1;
      else
         vn_dm_emit_com_suframa := 0;
      end if;
      --
   end if;
   --
   st_row_param_calc_icms := null;
   --
   vn_fase := 1.9;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde_tpparam := 1;
      --| Verifica no nivel abaixo (Tipo de Parametro (E-Excecao ou R-Regra))
      pkb_recup_param_tpparam ( evc_dm_tipo_param => 'E' ); -- Primeiro "Excecao"
      --
      vn_fase := 99;
      -- Se encontrou o parâmetro, finaliza o processo
      if nvl(st_row_param_calc_icms.id,0) > 0 then
         --
         exit;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calc_icms fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_calc_icms;

-------------------------------------------------------------------------------------------------------

--| Procedimento de recuperar parâmetros de calculo de ICMS da Empresa
procedure pkb_recup_param_calc_icms_empr ( en_soliccalc_id              in  solic_calc.id%type
                                         , en_empresa_id                in empresa.id%type
                                         , en_natoper_id                in nat_oper.id%type
                                         , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                                         , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                                         , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                         , ev_cpf_cnpj_part             in varchar2
                                         , en_estado_id_dest            in estado.id%type
                                         , en_dm_tipo_part              in solic_calc.dm_tipo_part%type
                                         , en_dm_cons_final             in solic_calc.dm_cons_final%type
                                         , en_dm_ind_ie_part            in solic_calc.dm_ind_ie_part%type
                                         , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                                         , en_dm_part_tem_suframa       in solic_calc.dm_part_tem_suframa%type
                                         , en_dm_ind_ativ_part          in solic_calc.dm_ind_ativ_part%type
                                         , en_dm_mot_des_icms_part      in solic_calc.dm_mot_des_icms_part%type
                                         --| Item
                                         , en_item_id                   in item.id%type
                                         , en_ncm_id                    in ncm.id%type
                                         , en_extipi_id                 in ex_tipi.id%type
                                         , en_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                         , en_cfop_id                   in cfop.id%type
                                         , st_row_param_calc_icms_empr  out param_calc_icms_empr%rowtype
                                         )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_dm_calc_fisica         param_calc_icms_empr.dm_calc_fisica%type;
   vn_dm_calc_cons_final     param_calc_icms_empr.dm_calc_cons_final%type;
   vn_dm_calc_contr_isento   param_calc_icms_empr.dm_calc_contr_isento%type;
   vn_dm_calc_nao_contr      param_calc_icms_empr.dm_calc_nao_contr%type;
   vn_dm_emit_com_suframa    param_calc_icms_empr.dm_emit_com_suframa%type;
   vn_dm_dest_com_suframa    param_calc_icms_empr.dm_dest_com_suframa%type;
   vv_empresa_suframa        juridica.suframa%type;
   vn_qtde_estdest number;
   vn_qtde_cfop number;
   vn_qtde_ncm number;
   vn_qtde_extipi number;
   vn_qtde_origmerc number;
   vn_qtde_item number;
   vn_qtde_part number;
   vn_qtde_natoper number;
   vn_qtde_tpparam number;
   vn_ncm_id        ncm.id%type;
   --
   cursor c_dados is
   select distinct
          p.prioridade
     from param_calc_icms_empr p
    where p.empresa_id             = en_empresa_id
      and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
    order by p.prioridade;
   --
   -- Procedimento de recuperar parâmetros do Estado do Destinatario
   procedure pkb_recup_param_estdest ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                     , enc_estado_id_dest            in estado.id%type
                                     , enc_cfop_id                   in cfop.id%type
                                     , enc_ncm_id                    in ncm.id%type
                                     , enc_extipi_id                 in ex_tipi.id%type
                                     , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                     , enc_item_id                   in item.id%type
                                     , evc_cpf_cnpj_part             in varchar2
                                     , enc_natoper_id                in nat_oper.id%type
                                     , enc_dm_calc_fisica            in param_calc_icms_empr.dm_calc_fisica%type
                                     , enc_dm_calc_cons_final        in param_calc_icms_empr.dm_calc_cons_final%type
                                     , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                     , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                     , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                     , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                     )
   is
      --
      cursor c_ufdest is
      select p.*
        from param_calc_icms_empr p
       where p.empresa_id             = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.estado_id_dest,0)  = nvl(enc_estado_id_dest,0)
         and nvl(p.cfop_id, 0)        = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)          = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)       = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,-1)    = nvl(enc_dm_orig_merc,-1)
         and nvl(p.item_id,0)         = nvl(enc_item_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and ( nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0) )
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 3;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_estdest evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_estado_id_dest: ' || enc_estado_id_dest
                                || ' enc_cfop_id: ' || enc_cfop_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_ufdest loop
         exit when c_ufdest%notfound or (c_ufdest%notfound) is null;
         --
         vn_fase := 3.1;
         --
        --insert into erro values (erro_Seq.nextval || ' - ID PARAM: ' || rec.id); commit;
         -- Acho um parâmetro
         st_row_param_calc_icms_empr := rec;
         --
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 3.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and ( nvl(enc_estado_id_dest,0) > 0 or nvl(vn_qtde_estdest,0) > 0 )
         --and nvl(vn_qtde_estdest,0) > 0
         then
         --
         vn_qtde_estdest := 0;
         -- Aplica a recursividade para achar com o Estado do Destinatario nulo
         pkb_recup_param_estdest ( evc_dm_tipo_param             => evc_dm_tipo_param
                                 , enc_estado_id_dest            => null
                                 , enc_cfop_id                   => enc_cfop_id
                                 , enc_ncm_id                    => enc_ncm_id
                                 , enc_extipi_id                 => enc_extipi_id
                                 , enc_dm_orig_merc              => enc_dm_orig_merc
                                 , enc_item_id                   => enc_item_id
                                 , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                                 , enc_natoper_id                => enc_natoper_id
                                 , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                 , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                 , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                 , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                 , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                 , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                 );
         --
      else
         vn_qtde_estdest := 0;
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_estdest fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_estdest;
   --
   -- Procedimento de recuperar parâmetros do CFOP
   procedure pkb_recup_param_cfop ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                  , enc_cfop_id                   in cfop.id%type
                                  , enc_ncm_id                    in ncm.id%type
                                  , enc_extipi_id                 in ex_tipi.id%type
                                  , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                  , enc_item_id                   in item.id%type
                                  , evc_cpf_cnpj_part             in varchar2
                                  , enc_natoper_id                in nat_oper.id%type
                                  , enc_dm_calc_fisica            in param_calc_icms_empr.dm_calc_fisica%type
                                  , enc_dm_calc_cons_final        in param_calc_icms_empr.dm_calc_cons_final%type
                                  , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                  , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                  , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                  , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                  )
   is
      --
      cursor c_cfop is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.cfop_id
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.item_id
           , p.cpf_cnpj
           , p.natoper_id
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.cfop_id, 0)         = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,-1)     = nvl(enc_dm_orig_merc,-1)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 4;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_cfop evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_cfop_id: ' || enc_cfop_id
                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_cfop loop
         exit when c_cfop%notfound or (c_cfop%notfound) is null;
         --
         vn_fase := 4.1;
         --
         vn_qtde_estdest := 1;
         --| Verifica no nivel abaixo (Estado do Destinatario)
         pkb_recup_param_estdest ( evc_dm_tipo_param             => rec.dm_tipo_param
                                 , enc_estado_id_dest            => en_estado_id_dest
                                 , enc_cfop_id                   => rec.cfop_id
                                 , enc_ncm_id                    => rec.ncm_id
                                 , enc_extipi_id                 => rec.extipi_id
                                 , enc_dm_orig_merc              => rec.dm_orig_merc
                                 , enc_item_id                   => rec.item_id
                                 , evc_cpf_cnpj_part             => rec.cpf_cnpj
                                 , enc_natoper_id                => rec.natoper_id
                                 , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                 , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                 , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                 , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                 , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                 , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                 );
         --
         vn_fase := 4.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and ( nvl(enc_cfop_id,0) > 0 or nvl(vn_qtde_cfop,0) > 0 )
         --and nvl(vn_qtde_cfop,0) > 0
         then
         --
         vn_qtde_cfop := 0;
         -- Aplica a recursividade para achar com o CFOP nulo
         pkb_recup_param_cfop ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_cfop_id                   => null
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_extipi_id                 => enc_extipi_id
                              , enc_dm_orig_merc              => enc_dm_orig_merc
                              , enc_item_id                   => enc_item_id
                              , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                              , enc_natoper_id                => enc_natoper_id
                              , enc_dm_calc_fisica            => enc_dm_calc_fisica
                              , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                              , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                              , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                              , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                              , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                              );
         --
      else
         vn_qtde_cfop := 0;
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cfop fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cfop;
   --
   -- Procedimento de recuperar parâmetros do NCM
   procedure pkb_recup_param_ncm ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                 , enc_ncm_id                    in ncm.id%type
                                 , enc_extipi_id                 in ex_tipi.id%type
                                 , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                 , enc_item_id                   in item.id%type
                                 , evc_cpf_cnpj_part             in varchar2
                                 , enc_natoper_id                in nat_oper.id%type
                                 , enc_dm_calc_fisica            in param_calc_icms_empr.dm_calc_fisica%type
                                 , enc_dm_calc_cons_final        in param_calc_icms_empr.dm_calc_cons_final%type
                                 , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                 , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                 , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                 , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                 )
   is
      --
      cursor c_ncm is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.ncm_id
           , p.extipi_id
           , p.dm_orig_merc
           , p.item_id
           , p.cpf_cnpj
           , p.natoper_id
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.ncm_id,0)           = nvl(enc_ncm_id,0)
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,-1)     = nvl(enc_dm_orig_merc,-1)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 4;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_ncm evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_ncm_id: ' || enc_ncm_id
                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_ncm loop
         exit when c_ncm%notfound or (c_ncm%notfound) is null;
         --
         vn_fase := 4.1;
         --
         vn_qtde_cfop := 1;
         --| Verifica no nivel abaixo (CFOP)
         pkb_recup_param_cfop ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , enc_cfop_id                   => en_cfop_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_extipi_id                 => rec.extipi_id
                              , enc_dm_orig_merc              => rec.dm_orig_merc
                              , enc_item_id                   => rec.item_id
                              , evc_cpf_cnpj_part             => rec.cpf_cnpj
                              , enc_natoper_id                => rec.natoper_id
                              , enc_dm_calc_fisica            => rec.dm_calc_fisica
                              , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                              , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                              , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                              , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                              , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                              );
         --
         vn_fase := 4.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and ( nvl(enc_ncm_id,0) > 0 or nvl(vn_qtde_ncm,0) > 0 )
         --and nvl(vn_qtde_ncm,0) > 0
         then
         --
         vn_ncm_id := pk_csf.fkg_ncm_id_superior ( ev_cod_ncm => pk_csf.fkg_cod_ncm_id ( en_ncm_id => enc_ncm_id ) );
         --
         if nvl(vn_ncm_id,0) <= 0 then
            vn_qtde_ncm := 0;
         end if;
         --
         -- Aplica a recursividade para achar com o NCM nulo
         pkb_recup_param_ncm ( evc_dm_tipo_param             => evc_dm_tipo_param
                             , enc_ncm_id                    => vn_ncm_id
                             , enc_extipi_id                 => enc_extipi_id
                             , enc_dm_orig_merc              => enc_dm_orig_merc
                             , enc_item_id                   => enc_item_id
                             , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                             , enc_natoper_id                => enc_natoper_id
                             , enc_dm_calc_fisica            => enc_dm_calc_fisica
                             , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                             , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                             , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                             , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                             , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                             );
         --
      else
         vn_qtde_ncm := 0;
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_ncm fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_ncm;
   --
   -- Procedimento de recuperar parâmetros do Ex-Tipi
   procedure pkb_recup_param_extipi ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                    , enc_extipi_id                 in ex_tipi.id%type
                                    , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                    , enc_item_id                   in item.id%type
                                    , evc_cpf_cnpj_part             in varchar2
                                    , enc_natoper_id                in nat_oper.id%type
                                    , enc_dm_calc_fisica            in param_calc_icms_empr.dm_calc_fisica%type
                                    , enc_dm_calc_cons_final        in param_calc_icms_empr.dm_calc_cons_final%type
                                    , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                    , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                    , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                    , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                    )
   is
      --
      cursor c_extipi is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.extipi_id
           , p.dm_orig_merc
           , p.item_id
           , p.cpf_cnpj
           , p.natoper_id
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.extipi_id,0)        = nvl(enc_extipi_id,0)
         and nvl(p.dm_orig_merc,-1)     = nvl(enc_dm_orig_merc,-1)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 5;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_extipi evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_extipi_id: ' || enc_extipi_id
                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_extipi loop
         exit when c_extipi%notfound or (c_extipi%notfound) is null;
         --
         vn_fase := 5.1;
         --
         vn_qtde_ncm := 1;
         --| Verifica no nivel abaixo (NCM)
         pkb_recup_param_ncm ( evc_dm_tipo_param             => rec.dm_tipo_param
                             , enc_ncm_id                    => en_ncm_id
                             , enc_extipi_id                 => rec.extipi_id
                             , enc_dm_orig_merc              => rec.dm_orig_merc
                             , enc_item_id                   => rec.item_id
                             , evc_cpf_cnpj_part             => rec.cpf_cnpj
                             , enc_natoper_id                => rec.natoper_id
                             , enc_dm_calc_fisica            => rec.dm_calc_fisica
                             , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                             , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                             , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                             , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                             , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                             );
         --
         vn_fase := 5.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 5.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and ( nvl(enc_extipi_id,0) > 0 or nvl(vn_qtde_extipi,0) > 0 )
         --and nvl(vn_qtde_extipi,0) > 0
         then
         --
         vn_qtde_extipi := 0;
         -- Aplica a recursividade para achar com o Ex-Tipi nulo
         pkb_recup_param_extipi ( evc_dm_tipo_param             => evc_dm_tipo_param
                                , enc_extipi_id                 => null
                                , enc_dm_orig_merc              => enc_dm_orig_merc
                                , enc_item_id                   => enc_item_id
                                , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                                , enc_natoper_id                => enc_natoper_id
                                , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                );
         --
      else
         vn_qtde_extipi := 0;
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_extipi fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_extipi;
   --
   -- Procedimento de recuperar parâmetros da Origem da Mercadoria
   procedure pkb_recup_param_origmerc ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                      , enc_dm_orig_merc              in item_solic_calc.dm_orig_merc%type
                                      , enc_item_id                   in item.id%type
                                      , evc_cpf_cnpj_part             in varchar2
                                      , enc_natoper_id                in nat_oper.id%type
                                      , enc_dm_calc_fisica            in param_calc_icms_empr.dm_calc_fisica%type
                                      , enc_dm_calc_cons_final        in param_calc_icms_empr.dm_calc_cons_final%type
                                      , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                      , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                      , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                      , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                      )
   is
      --
      cursor c_origmerc is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_orig_merc
           , p.item_id
           , p.cpf_cnpj
           , p.natoper_id
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.dm_orig_merc,-1)     = nvl(enc_dm_orig_merc,-1)
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 6;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_origmerc evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_orig_merc: ' || enc_dm_orig_merc
                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_origmerc loop
         exit when c_origmerc%notfound or (c_origmerc%notfound) is null;
         --
         vn_fase := 6.1;
         --
         vn_qtde_extipi := 1;
         --| Verifica no nivel abaixo (Ex-Tipi)
         pkb_recup_param_extipi ( evc_dm_tipo_param             => rec.dm_tipo_param
                                , enc_extipi_id                 => en_extipi_id
                                , enc_dm_orig_merc              => rec.dm_orig_merc
                                , enc_item_id                   => rec.item_id
                                , evc_cpf_cnpj_part             => rec.cpf_cnpj
                                , enc_natoper_id                => rec.natoper_id
                                , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                );
         --
         vn_fase := 6.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 6.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and ( enc_dm_orig_merc is not null or nvl(vn_qtde_origmerc,0) > 0 )
         --and nvl(vn_qtde_origmerc,0) > 0
         then
         --
         vn_qtde_origmerc := 0;
         -- Aplica a recursividade para achar com a Origem da Mercadoria nulo
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_orig_merc              => null
                                  , enc_item_id                   => enc_item_id
                                  , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                                  , enc_natoper_id                => enc_natoper_id
                                  , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                  , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                  , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                  , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                  , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                  , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                  );
         --
      else
         vn_qtde_origmerc := 0;
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_origmerc fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_origmerc;
   --
   -- Procedimento de recuperar parâmetros do Item
   procedure pkb_recup_param_item ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                  , enc_item_id                   in item.id%type
                                  , evc_cpf_cnpj_part             in varchar2
                                  , enc_natoper_id                in nat_oper.id%type
                                  , enc_dm_calc_fisica            in param_calc_icms_empr.dm_calc_fisica%type
                                  , enc_dm_calc_cons_final        in param_calc_icms_empr.dm_calc_cons_final%type
                                  , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                  , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                  , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                  , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                  )
   is
      --
      cursor c_item is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.item_id
           , p.cpf_cnpj
           , p.natoper_id
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id             = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.item_id,0)          = nvl(enc_item_id,0)
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 7;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_item evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_item_id: ' || enc_item_id
                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_item loop
         exit when c_item%notfound or (c_item%notfound) is null;
         --
         vn_fase := 7.1;
         --
         vn_qtde_origmerc := 1;
         --| Verifica no nivel abaixo (Origem da Mercadoria)
         pkb_recup_param_origmerc ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_orig_merc              => en_dm_orig_merc
                                  , enc_item_id                   => rec.item_id
                                  , evc_cpf_cnpj_part             => rec.cpf_cnpj
                                  , enc_natoper_id                => rec.natoper_id
                                  , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                  , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                  , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                  , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                  , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                  , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                  );
         --
         vn_fase := 7.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 7.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and ( nvl(enc_item_id,0) > 0 or nvl(vn_qtde_item,0) > 0 )
         --and nvl(vn_qtde_item,0) > 0
         then
         --
         vn_qtde_item := 0;
         -- Aplica a recursividade para achar com o Item nulo
         pkb_recup_param_item ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , enc_item_id                   => null
                              , evc_cpf_cnpj_part             => evc_cpf_cnpj_part
                              , enc_natoper_id                => enc_natoper_id
                              , enc_dm_calc_fisica            => enc_dm_calc_fisica
                              , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                              , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                              , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                              , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                              , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                              );
         --
      else
         vn_qtde_item := 0;
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_item fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_item;
   --
   -- Procedimento de recuperar parâmetros do CPF/CNPJ Participante
   procedure pkb_recup_param_part ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                  , evc_cpf_cnpj_part             in varchar2
                                  , enc_natoper_id                in nat_oper.id%type
                                  , enc_dm_calc_fisica            in param_calc_icms_empr.dm_calc_fisica%type
                                  , enc_dm_calc_cons_final        in param_calc_icms_empr.dm_calc_cons_final%type
                                  , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                  , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                  , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                  , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                  )
   is
      --
      cursor c_part is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.cpf_cnpj
           , p.natoper_id
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id             = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(trim(p.cpf_cnpj),'0') = nvl(trim(evc_cpf_cnpj_part),'0')
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 8;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_part evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' evc_cpf_cnpj_part: ' || evc_cpf_cnpj_part
                                || ' enc_natoper_id: ' || enc_natoper_id
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_part loop
         exit when c_part%notfound or (c_part%notfound) is null;
         --
         vn_fase := 8.1;
         --
         vn_qtde_item := 1;
         --| Verifica no nivel abaixo (Item)
         pkb_recup_param_item ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , enc_item_id                   => en_item_id
                              , evc_cpf_cnpj_part             => rec.cpf_cnpj
                              , enc_natoper_id                => rec.natoper_id
                              , enc_dm_calc_fisica            => rec.dm_calc_fisica
                              , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                              , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                              , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                              , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                              , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                              );
         --
         vn_fase := 8.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 8.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and ( trim(evc_cpf_cnpj_part) is not null or nvl(vn_qtde_part,0) > 0 )
         --and nvl(vn_qtde_part,0) > 0
         then
         --
         vn_qtde_part := 0;
         -- Aplica a recursividade para achar com o Participante nulo
         pkb_recup_param_part ( evc_dm_tipo_param             => evc_dm_tipo_param
                              , evc_cpf_cnpj_part             => null
                              , enc_natoper_id                => enc_natoper_id
                              , enc_dm_calc_fisica            => enc_dm_calc_fisica
                              , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                              , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                              , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                              , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                              , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                              );
         --
      else
         vn_qtde_part := 0;
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_part fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_part;
   --
   -- Procedimento de recuperar parâmetros da Natureza de Operação
   procedure pkb_recup_param_natoper ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                     , enc_natoper_id                in nat_oper.id%type
                                     , enc_dm_calc_fisica            in param_calc_icms_empr.dm_calc_fisica%type
                                     , enc_dm_calc_cons_final        in param_calc_icms_empr.dm_calc_cons_final%type
                                     , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                     , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                     , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                     , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                     )
   is
      --
      cursor c_natoper is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.natoper_id
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and nvl(p.natoper_id,0)       = nvl(enc_natoper_id,0)
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 9;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_natoper evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_natoper_id: ' || enc_natoper_id
                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_natoper loop
         exit when c_natoper%notfound or (c_natoper%notfound) is null;
         --
         vn_fase := 9.1;
         --
         vn_qtde_part := 1;
         --| Verifica no nivel abaixo (CPF/CNPJ Participante)
         pkb_recup_param_part ( evc_dm_tipo_param             => rec.dm_tipo_param
                              , evc_cpf_cnpj_part             => ev_cpf_cnpj_part
                              , enc_natoper_id                => rec.natoper_id
                              , enc_dm_calc_fisica            => rec.dm_calc_fisica
                              , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                              , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                              , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                              , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                              , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                              );
         --
         vn_fase := 9.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 9.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and ( nvl(enc_natoper_id,0) > 0 or nvl(vn_qtde_natoper,0) > 0 )
         --and nvl(vn_qtde_natoper,0) > 0
         then
         --
         vn_qtde_natoper := 0;
         -- Aplica a recursividade para achar com o Natureza da Operação nulo
         pkb_recup_param_natoper ( evc_dm_tipo_param             => evc_dm_tipo_param
                                 , enc_natoper_id                => null
                                 , enc_dm_calc_fisica            => enc_dm_calc_fisica
                                 , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                 , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                 , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                 , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                 , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                 );
         --
      else
         vn_qtde_natoper := 0;
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_natoper fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_natoper;
   --
   -- Procedimento de recuperar parâmetros da Calcula Pessoa Fisica
   procedure pkb_recup_param_calcfisica ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                        , enc_dm_calc_fisica            in param_calc_icms_empr.dm_calc_fisica%type
                                        , enc_dm_calc_cons_final        in param_calc_icms_empr.dm_calc_cons_final%type
                                        , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                        , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                        , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                        , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                        )
   is
      --
      cursor c_calcfisica is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_fisica
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id             = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and p.dm_calc_fisica          = enc_dm_calc_fisica
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 10;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_calcfisica evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_calc_fisica: ' || enc_dm_calc_fisica
                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_calcfisica loop
         exit when c_calcfisica%notfound or (c_calcfisica%notfound) is null;
         --
         vn_fase := 10.1;
         --
         vn_qtde_natoper := 1;
         --| Verifica no nivel abaixo (Natureza de Operação)
         pkb_recup_param_natoper ( evc_dm_tipo_param             => rec.dm_tipo_param
                                 , enc_natoper_id                => en_natoper_id
                                 , enc_dm_calc_fisica            => rec.dm_calc_fisica
                                 , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                 , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                 , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                 , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                 , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                 );
         --
         vn_fase := 10.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 10.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and nvl(enc_dm_calc_fisica,0) in (0, 1)
         then
         --
         -- Aplica a recursividade para achar com o Calcula Pessoa Fisica Indiferente
         pkb_recup_param_calcfisica ( evc_dm_tipo_param             => evc_dm_tipo_param
                                    , enc_dm_calc_fisica            => 2
                                    , enc_dm_calc_cons_final        => enc_dm_calc_cons_final
                                    , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                    , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                    , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                    , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                    );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calcfisica fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_calcfisica;
   --
   -- Procedimento de recuperar parâmetros da Calcula Consumidor Final
   procedure pkb_recup_param_consfinal ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                       , enc_dm_calc_cons_final        in param_calc_icms_empr.dm_calc_cons_final%type
                                       , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                       , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                       , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                       , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                       )
   is
      --
      cursor c_calcfisica is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_cons_final
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id             = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and p.dm_calc_cons_final      = enc_dm_calc_cons_final
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 11;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_consfinal evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_calc_cons_final: ' || enc_dm_calc_cons_final
                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_calcfisica loop
         exit when c_calcfisica%notfound or (c_calcfisica%notfound) is null;
         --
         vn_fase := 11.1;
         --
         --| Verifica no nivel abaixo (Calcula Pessoa Fisica)
         pkb_recup_param_calcfisica ( evc_dm_tipo_param             => rec.dm_tipo_param
                                    , enc_dm_calc_fisica            => vn_dm_calc_fisica
                                    , enc_dm_calc_cons_final        => rec.dm_calc_cons_final
                                    , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                    , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                    , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                    , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                    );
         --
         vn_fase := 11.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 11.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and nvl(enc_dm_calc_cons_final,0) in (0, 1, 3, 4, 5, 6, 7) then
         --
         -- Aplica a recursividade para achar com o Calcula Consumidor Final Indiferente
         pkb_recup_param_consfinal ( evc_dm_tipo_param             => evc_dm_tipo_param
                                   , enc_dm_calc_cons_final        => 2
                                   , enc_dm_calc_contr_isento      => enc_dm_calc_contr_isento
                                   , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                   , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                   , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                   );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_consfinal fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_consfinal;
   --
   -- Procedimento de recuperar parâmetros da Calcula Contribuinte Isento
   procedure pkb_recup_param_contrisento ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                         , enc_dm_calc_contr_isento      in param_calc_icms_empr.dm_calc_contr_isento%type
                                         , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                         , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                         , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                         )
   is
      --
      cursor c_contrisento is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_contr_isento
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and p.dm_calc_contr_isento    = enc_dm_calc_contr_isento
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 12;
      /*insert into erro values (erro_Seq.nextval || ' pkb_recup_param_contrisento evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_calc_contr_isento: ' || enc_dm_calc_contr_isento
                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_contrisento loop
         exit when c_contrisento%notfound or (c_contrisento%notfound) is null;
         --
         vn_fase := 12.1;
         --
         --| Verifica no nivel abaixo (Calcula Consumidor Final)
         pkb_recup_param_consfinal ( evc_dm_tipo_param             => rec.dm_tipo_param
                                   , enc_dm_calc_cons_final        => vn_dm_calc_cons_final
                                   , enc_dm_calc_contr_isento      => rec.dm_calc_contr_isento
                                   , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                   , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                   , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                   );
         --
         vn_fase := 12.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 12.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and nvl(enc_dm_calc_contr_isento,0) in (0, 1)
         then
         --
         -- Aplica a recursividade para achar com o Calcula Contribuinte Isento Indiferente
         pkb_recup_param_contrisento ( evc_dm_tipo_param             => evc_dm_tipo_param
                                     , enc_dm_calc_contr_isento      => 2
                                     , enc_dm_calc_nao_contr         => enc_dm_calc_nao_contr
                                     , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                     , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                     );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_contrisento fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_contrisento;
   --
   -- Procedimento de recuperar parâmetros da Calcula Não Contribuinte
   procedure pkb_recup_param_naocontr ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                      , enc_dm_calc_nao_contr         in param_calc_icms_empr.dm_calc_nao_contr%type
                                      , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                      , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                      )
   is
      --
      cursor c_contrisento is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_calc_nao_contr
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id              = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param           = evc_dm_tipo_param
         and p.dm_calc_nao_contr       = enc_dm_calc_nao_contr
         and p.dm_emit_com_suframa     = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa     = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 13;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_naocontr evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_calc_nao_contr: ' || enc_dm_calc_nao_contr
                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_contrisento loop
         exit when c_contrisento%notfound or (c_contrisento%notfound) is null;
         --
         vn_fase := 13.1;
         --
         --| Verifica no nivel abaixo (Calcula Contribuinte Isento)
         pkb_recup_param_contrisento ( evc_dm_tipo_param             => rec.dm_tipo_param
                                     , enc_dm_calc_contr_isento      => vn_dm_calc_contr_isento
                                     , enc_dm_calc_nao_contr         => rec.dm_calc_nao_contr
                                     , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                     , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                     );
         --
         vn_fase := 13.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 13.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and nvl(enc_dm_calc_nao_contr,0) in (0, 1)
         then
         --
         -- Aplica a recursividade para achar com o Calcula Não Contribuinte Indiferente
         pkb_recup_param_naocontr ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_calc_nao_contr         => 2
                                  , enc_dm_emit_com_suframa       => enc_dm_emit_com_suframa
                                  , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_naocontr fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_naocontr;
   --
   -- Procedimento de recuperar parâmetros da Emitente com Suframa
   procedure pkb_recup_param_emitsufr ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                      , enc_dm_emit_com_suframa       in param_calc_icms_empr.dm_emit_com_suframa%type
                                      , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                      )
   is
      --
      cursor c_emitsufr is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_emit_com_suframa
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id             = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param          = evc_dm_tipo_param
         and p.dm_emit_com_suframa    = enc_dm_emit_com_suframa
         and p.dm_dest_com_suframa    = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 14;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_emitsufr evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_emit_com_suframa: ' || enc_dm_emit_com_suframa
                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_emitsufr loop
         exit when c_emitsufr%notfound or (c_emitsufr%notfound) is null;
         --
         vn_fase := 14.1;
         --
         --| Verifica no nivel abaixo (Calcula Não Contribuinte)
         pkb_recup_param_naocontr ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_calc_nao_contr         => vn_dm_calc_nao_contr
                                  , enc_dm_emit_com_suframa       => rec.dm_emit_com_suframa
                                  , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                  );
         --
         vn_fase := 14.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 14.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and nvl(enc_dm_emit_com_suframa,0) in (0, 1)
         then
         --
         -- Aplica a recursividade para achar com o Emitente com Suframa Indiferente
         pkb_recup_param_emitsufr ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_emit_com_suframa       => 2
                                  , enc_dm_dest_com_suframa       => enc_dm_dest_com_suframa
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_emitsufr fase(' || vn_fase || '): '||sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_emitsufr;
   --
   -- Procedimento de recuperar parâmetros da Destinatário com Suframa
   procedure pkb_recup_param_destsufr ( evc_dm_tipo_param             in param_calc_icms_empr.dm_tipo_param%type
                                      , enc_dm_dest_com_suframa       in param_calc_icms_empr.dm_dest_com_suframa%type
                                      )
   is
      --
      cursor c_destsufr is
      select distinct
             p.prioridade
           , p.dm_tipo_param
           , p.dm_dest_com_suframa
        from param_calc_icms_empr p
       where p.empresa_id             = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param          = evc_dm_tipo_param
         and p.dm_dest_com_suframa    = enc_dm_dest_com_suframa
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 15;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_destsufr evc_dm_tipo_param: ' || evc_dm_tipo_param
                                                || ' enc_dm_dest_com_suframa: ' || enc_dm_dest_com_suframa
                               );
      commit;*/
      --
      for rec in c_destsufr loop
         exit when c_destsufr%notfound or (c_destsufr%notfound) is null;
         --
         vn_fase := 15.1;
         --
         --| Verifica no nivel abaixo (Emitente com Suframa)
         pkb_recup_param_emitsufr ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_emit_com_suframa       => vn_dm_emit_com_suframa
                                  , enc_dm_dest_com_suframa       => rec.dm_dest_com_suframa
                                  );
         --
         vn_fase := 14.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 15.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and nvl(enc_dm_dest_com_suframa,0) in (0, 1)
         then
         --
         -- Aplica a recursividade para achar com o Destinatário com Suframa Indiferente
         pkb_recup_param_destsufr ( evc_dm_tipo_param             => evc_dm_tipo_param
                                  , enc_dm_dest_com_suframa       => 2
                                  );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_destsufr fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_destsufr;
   --
   -- Procedimento de recuperar parâmetros do Tipo de Parametro (E-Excecao ou R-Regra)
   procedure pkb_recup_param_tpparam ( evc_dm_tipo_param       in param_calc_icms_empr.dm_tipo_param%type
                                     )
   is
      --
      cursor c_tpparam is
      select distinct
             p.prioridade
           , p.dm_tipo_param
        from param_calc_icms_empr p
       where p.empresa_id             = en_empresa_id
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.dm_tipo_param          = evc_dm_tipo_param
       order by p.prioridade;
      --
   begin
      --
      vn_fase := 16;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_tpparam evc_dm_tipo_param: ' || evc_dm_tipo_param
                               );
      commit;*/
      --
      for rec in c_tpparam loop
         exit when c_tpparam%notfound or (c_tpparam%notfound) is null;
         --
         vn_fase := 16.1;
         --
         --| Verifica no nivel abaixo (Destinatário com Suframa)
         pkb_recup_param_destsufr ( evc_dm_tipo_param             => rec.dm_tipo_param
                                  , enc_dm_dest_com_suframa       => vn_dm_dest_com_suframa
                                  );
         --
         vn_fase := 16.2;
         -- Se encontrou o parâmetro, finaliza o processo
         if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 16.3;
      --
      if nvl(st_row_param_calc_icms_empr.id,0) <= 0
         and nvl(vn_qtde_tpparam,0) > 0
         then
         --
         vn_qtde_tpparam := 0;
         -- Aplica a recursividade para achar com o Tipo de Parametro "Regra"
         pkb_recup_param_tpparam ( evc_dm_tipo_param       => 'R' ); -- Regra
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_tpparam fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_tpparam;
   --
begin
   --
   vn_fase := 1;
      /*insert into erro values (erro_Seq.nextval ||' pkb_recup_param_calc_icms_empr '
                               );
      commit;*/
   --
   if en_dm_tipo_part = 1 then -- Fisica
      vn_dm_calc_fisica := 1; -- Sim
   elsif en_dm_tipo_part = 2 then -- Juridica
      vn_dm_calc_fisica := 0; -- Não
   else
      --
      vn_dm_calc_fisica := 2; -- Indiferente
      --
   end if;
   --
   vn_fase := 1.1;
   --
   if en_dm_cons_final = 1 then -- Consumidor Final Sim
      vn_dm_calc_cons_final := 1; -- Sim
   elsif en_dm_cons_final = 0 then -- Consumidor Final Não
      vn_dm_calc_cons_final := 0; -- Não
   --
   --3 - Industria, 4 - Comercio, 5-Atacado, 6 - Varejo
   elsif en_dm_cons_final = 3 then
      vn_dm_calc_cons_final := 3;
   elsif en_dm_cons_final = 4 then
      vn_dm_calc_cons_final := 4;
   elsif en_dm_cons_final = 5 then
      vn_dm_calc_cons_final := 5;
   elsif en_dm_cons_final = 6 then
      vn_dm_calc_cons_final := 6;
   elsif en_dm_cons_final = 7 then
      vn_dm_calc_cons_final := 7;
   --
   else
      vn_dm_calc_cons_final := 2; -- Indiferente
   end if;
   --
   vn_fase := 1.2;
   --
   if en_dm_ind_ie_part in (1) then
      vn_dm_calc_contr_isento   := 0; -- Não
      vn_dm_calc_nao_contr      := 0; -- Não
   elsif en_dm_ind_ie_part in (2) then
      vn_dm_calc_contr_isento   := 1; -- Sim
      vn_dm_calc_nao_contr      := 0; -- Não
   elsif en_dm_ind_ie_part in (9) then
      vn_dm_calc_contr_isento   := 0; -- Não
      vn_dm_calc_nao_contr      := 1; -- Sim
   else
      -- Indiferente
      vn_dm_calc_contr_isento   := 2;
      vn_dm_calc_nao_contr      := 2;
   end if;
   --
   vn_fase := 1.3;
   --
   begin
      --
      select j.suframa
        into vv_empresa_suframa
        from empresa e
           , juridica j
       where e.id = en_empresa_id
         and j.pessoa_id = e.pessoa_id
         and trim(j.suframa) is not null
         and rownum = 1;
      --
   exception
      when others then
         vv_empresa_suframa := null;
   end;
   --
   vn_fase := 1.4;
   --
   if en_dm_ind_emit = 0 then -- Emissão Propria
      --
      if trim(vv_empresa_suframa) is not null then
         vn_dm_emit_com_suframa := 1;
      else
         vn_dm_emit_com_suframa := 0;
      end if;
      --
      if en_dm_part_tem_suframa = 1 then
         vn_dm_dest_com_suframa := 1;
      else
         vn_dm_dest_com_suframa := 0;
      end if;
      --
   else
      --
      if trim(vv_empresa_suframa) is not null then
         vn_dm_dest_com_suframa := 1;
      else
         vn_dm_dest_com_suframa := 0;
      end if;
      --
      if en_dm_part_tem_suframa = 1 then
         vn_dm_emit_com_suframa := 1;
      else
         vn_dm_emit_com_suframa := 0;
      end if;
      --
   end if;
   --
   st_row_param_calc_icms_empr := null;
   --
   vn_fase := 1.9;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde_tpparam := 1;
      --| Verifica no nivel abaixo (Tipo de Parametro (E-Excecao ou R-Regra))
      pkb_recup_param_tpparam ( evc_dm_tipo_param => 'E' ); -- Primeiro "Excecao"
      --
      vn_fase := 99;
      -- Se encontrou o parâmetro, finaliza o processo
      if nvl(st_row_param_calc_icms_empr.id,0) > 0 then
         --
         exit;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_calc_icms_empr fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_calc_icms_empr;

-------------------------------------------------------------------------------------------------------

-- Procedimento de calculo do ICMS
procedure pkb_calc_icms ( en_soliccalc_id              in solic_calc.id%type
                        , en_empresa_id                in empresa.id%type
                        , en_cnae_id                   in cnae.id%type
                        , en_regtrib_id                in reg_trib.id%type
                        , en_formatrib_id              in forma_trib.id%type
                        , en_natoper_id                in nat_oper.id%type
                        , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                        , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                        , ed_dt_emiss                  in solic_calc.dt_emiss%type
                        , ev_cpf_cnpj_part             in varchar2
                        , en_estado_id_orig            in estado.id%type
                        , en_estado_id_dest            in estado.id%type
                        , en_dm_tipo_part              in solic_calc.dm_tipo_part%type
                        , en_dm_cons_final             in solic_calc.dm_cons_final%type
                        , en_dm_ind_ie_part            in solic_calc.dm_ind_ie_part%type
                        , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                        , en_dm_part_tem_suframa       in solic_calc.dm_part_tem_suframa%type
                        , en_dm_ind_ativ_part          in solic_calc.dm_ind_ativ_part%type
                        , en_dm_mot_des_icms_part      in solic_calc.dm_mot_des_icms_part%type
                        , en_dm_trib_imposto           in number
                        , en_codst_id                  in cod_st.id%type
                        , en_obsfiscal_id              in obs_fiscal.id%type
                        , ev_obs_compl                 in cfop_tipoimp.obs_compl%type
                        --| Item
                        , en_item_id                   in item.id%type
                        , en_ncm_id                    in ncm.id%type
                        , en_extipi_id                 in ex_tipi.id%type
                        , en_cfop_id                   in cfop.id%type
                        --| Retorno do Imposto
                        , est_item_solic_calc          in out nocopy  item_solic_calc%rowtype
                        , est_row_imp_itemsc           in out nocopy  imp_itemsc%rowtype
                        )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_row_param_calc_icms_empr     param_calc_icms_empr%rowtype := null;
   vt_row_param_calc_icms          param_calc_icms%rowtype := null;
   --
   vb_achou          boolean := false;
   vv_cod_st         cod_st.cod_st%type;
   vn_vl_imp_ipi     number;
   vn_vl_imp_ii      number;
   vn_aux_base_calc  number;
   vn_dif_base_calc  number;
   vn_aux_imp_trib   number;
   --
   vn_cfop_id_dest           number;
   vn_codst_id               number;
   vn_aliq_dest              number(6,4);
   vn_perc_reduc_bc          number(6,4);
   vn_perc_difer             number(7,4);
   vn_obsfiscal_id           number;
   vv_obs_compl              varchar2(4000);
   vn_dm_mod_base_calc       number(1);
   vn_indice                 number(10,4);
   vn_dm_ajusta_mva          number(1);
   vn_dm_ajust_desc_zfm_item number(1);
   vn_dm_soma_frete          number(1);
   vn_dm_soma_seguro         number(1);
   vn_dm_soma_outra_desp     number(1);
   vn_dm_soma_ipi            number(1);
   vn_dm_soma_ii             number(1);
   vv_memoria                imp_itemsc.memoria%type;
   --
begin
   --
   vn_fase := 1;
   --
   vt_row_param_calc_icms_empr := null;
   vb_achou := false;
   --
   if nvl(en_dm_trib_imposto,0) = 1 then -- Sim, tributa imposto
      --
      vn_fase := 1.1;
      --| Procedimento de recuperar parâmetros de calculo de ICMS da Empresa
      pkb_recup_param_calc_icms_empr ( en_soliccalc_id              => en_soliccalc_id
                                     , en_empresa_id                => en_empresa_id
                                     , en_natoper_id                => en_natoper_id
                                     , en_dm_ind_emit               => en_dm_ind_emit
                                     , en_dm_ind_oper               => en_dm_ind_oper
                                     , ed_dt_emiss                  => ed_dt_emiss
                                     , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                     , en_estado_id_dest            => en_estado_id_dest
                                     , en_dm_tipo_part              => en_dm_tipo_part
                                     , en_dm_cons_final             => en_dm_cons_final
                                     , en_dm_ind_ie_part            => en_dm_ind_ie_part
                                     , en_dm_reg_trib_part          => en_dm_reg_trib_part
                                     , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                                     , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                                     , en_dm_mot_des_icms_part      => en_dm_mot_des_icms_part
                                     --| Item
                                     , en_item_id                   => en_item_id
                                     , en_ncm_id                    => en_ncm_id
                                     , en_extipi_id                 => en_extipi_id
                                     , en_dm_orig_merc              => est_item_solic_calc.dm_orig_merc
                                     , en_cfop_id                   => en_cfop_id
                                     , st_row_param_calc_icms_empr  => vt_row_param_calc_icms_empr
                                     );
      --
      vn_fase := 2;
      --
      if nvl(vt_row_param_calc_icms_empr.id,0) <= 0 then
         --| Procedimento de recuperar parâmetros de calculo de ICMS Exceções Global
         vn_fase := 2.1;
         --
         vt_row_param_calc_icms := null;
         --
         pkb_recup_param_calc_icms ( en_soliccalc_id              => en_soliccalc_id
                                   , en_empresa_id                => en_empresa_id
                                   , en_cnae_id                   => en_cnae_id
                                   , en_regtrib_id                => en_regtrib_id
                                   , en_formatrib_id              => en_formatrib_id
                                   , en_dm_ind_emit               => en_dm_ind_emit
                                   , en_dm_ind_oper               => en_dm_ind_oper
                                   , ed_dt_emiss                  => ed_dt_emiss
                                   , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                   , en_estado_id_orig            => en_estado_id_orig
                                   , en_estado_id_dest            => en_estado_id_dest
                                   , en_dm_tipo_part              => en_dm_tipo_part
                                   , en_dm_cons_final             => en_dm_cons_final
                                   , en_dm_ind_ie_part            => en_dm_ind_ie_part
                                   , en_dm_reg_trib_part          => en_dm_reg_trib_part
                                   , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                                   , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                                   , en_dm_mot_des_icms_part      => en_dm_mot_des_icms_part
                                   --| Item
                                   , en_ncm_id                    => en_ncm_id
                                   , en_extipi_id                 => en_extipi_id
                                   , en_dm_orig_merc              => est_item_solic_calc.dm_orig_merc
                                   , en_cfop_id                   => en_cfop_id
                                   , st_row_param_calc_icms       => vt_row_param_calc_icms
                                   );
         --
         vn_fase := 3;
         --
         if nvl(vt_row_param_calc_icms.id,0) <= 0 then
            --
            vn_fase := 3.1;
            -- avisa que não achou nada e atribui os parâmetros da origem (Global ou Natureza da Operação) CST, tributação
            vv_memoria                := 'Nao localizado parametro de ICMS, em dados da Natureza de Operacao ou CFOP Global';
            vb_achou := true;
            vn_cfop_id_dest           := null;
            vn_codst_id               := en_codst_id;
            vn_aliq_dest              := 0;
            vn_perc_reduc_bc          := 0;
            vn_perc_difer             := 0;
            vn_obsfiscal_id           := en_obsfiscal_id;
            vv_obs_compl              := ev_obs_compl;
            vn_dm_mod_base_calc       := 3; -- Valor da Operacao
            vn_indice                 := 0;
            vn_dm_ajusta_mva          := 0;
            vn_dm_ajust_desc_zfm_item := 0;
            vn_dm_soma_frete          := 0;
            vn_dm_soma_seguro         := 0;
            vn_dm_soma_outra_desp     := 0;
            vn_dm_soma_ipi            := 0;
            vn_dm_soma_ii             := 0;
            --
         else
            --
            vn_fase := 3.2;
            --
            vb_achou := true;
            -- atribui os dados recuperados para o calculo
            vn_cfop_id_dest           := vt_row_param_calc_icms.cfop_id_dest;
            vn_codst_id               := nvl(vt_row_param_calc_icms.codst_id, en_codst_id);
            vn_aliq_dest              := vt_row_param_calc_icms.aliq_dest;
            vn_perc_reduc_bc          := vt_row_param_calc_icms.perc_reduc_bc;
            vn_perc_difer             := vt_row_param_calc_icms.perc_difer;
            vn_obsfiscal_id           := vt_row_param_calc_icms.obsfiscal_id;
            vv_obs_compl              := vt_row_param_calc_icms.obs_compl;
            vn_dm_mod_base_calc       := vt_row_param_calc_icms.dm_mod_base_calc;
            vn_indice                 := vt_row_param_calc_icms.indice;
            vn_dm_ajusta_mva          := vt_row_param_calc_icms.dm_ajusta_mva;
            vn_dm_ajust_desc_zfm_item := vt_row_param_calc_icms.dm_ajust_desc_zfm_item;
            vn_dm_soma_frete          := vt_row_param_calc_icms.dm_soma_frete;
            vn_dm_soma_seguro         := vt_row_param_calc_icms.dm_soma_seguro;
            vn_dm_soma_outra_desp     := vt_row_param_calc_icms.dm_soma_outra_desp;
            vn_dm_soma_ipi            := vt_row_param_calc_icms.dm_soma_ipi;
            vn_dm_soma_ii             := vt_row_param_calc_icms.dm_soma_ii;
            vv_memoria                := pk_csf_calc_fiscal.fkg_mem_param_calc_icms ( en_paramcalcicms_id => vt_row_param_calc_icms.id );
            --
         end if;
         --
      else
         --
         vn_fase := 2.2;
         --
         vb_achou := true;
         -- atribui os dados recuperados para o calculo
         vn_cfop_id_dest           := vt_row_param_calc_icms_empr.cfop_id_dest;
         vn_codst_id               := nvl(vt_row_param_calc_icms_empr.codst_id, en_codst_id);
         vn_aliq_dest              := vt_row_param_calc_icms_empr.aliq_dest;
         vn_perc_reduc_bc          := vt_row_param_calc_icms_empr.perc_reduc_bc;
         vn_perc_difer             := vt_row_param_calc_icms_empr.perc_difer;
         vn_obsfiscal_id           := vt_row_param_calc_icms_empr.obsfiscal_id;
         vv_obs_compl              := vt_row_param_calc_icms_empr.obs_compl;
         vn_dm_mod_base_calc       := vt_row_param_calc_icms_empr.dm_mod_base_calc;
         vn_indice                 := vt_row_param_calc_icms_empr.indice;
         vn_dm_ajusta_mva          := vt_row_param_calc_icms_empr.dm_ajusta_mva;
         vn_dm_ajust_desc_zfm_item := vt_row_param_calc_icms_empr.dm_ajust_desc_zfm_item;
         vn_dm_soma_frete          := vt_row_param_calc_icms_empr.dm_soma_frete;
         vn_dm_soma_seguro         := vt_row_param_calc_icms_empr.dm_soma_seguro;
         vn_dm_soma_outra_desp     := vt_row_param_calc_icms_empr.dm_soma_outra_desp;
         vn_dm_soma_ipi            := vt_row_param_calc_icms_empr.dm_soma_ipi;
         vn_dm_soma_ii             := vt_row_param_calc_icms_empr.dm_soma_ii;
         vv_memoria                := pk_csf_calc_fiscal.fkg_mem_param_calc_icms_empr ( en_paramcalcicmsempr_id => vt_row_param_calc_icms_empr.id );
         --
      end if;
      --
   else
      --
      -- Não tributando os impostos pega os dados para registro do imposto
      vv_memoria                := 'Nao tributa imposto de ICMS.';
      vb_achou                  := true;
      vn_cfop_id_dest           := null;
      vn_codst_id               := en_codst_id;
      vn_aliq_dest              := 0;
      vn_perc_reduc_bc          := 0;
      vn_perc_difer             := 0;
      vn_obsfiscal_id           := en_obsfiscal_id;
      vv_obs_compl              := ev_obs_compl;
      vn_dm_mod_base_calc       := 3; -- Valor da Operacao
      vn_indice                 := 0;
      vn_dm_ajusta_mva          := 0;
      vn_dm_ajust_desc_zfm_item := 0;
      vn_dm_soma_frete          := 0;
      vn_dm_soma_seguro         := 0;
      vn_dm_soma_outra_desp     := 0;
      vn_dm_soma_ipi            := 0;
      vn_dm_soma_ii             := 0;
      --
   end if;
   --
   vn_fase := 7;
   --
   if vb_achou then
      --
/*
O MUNDO PERFEITO
No mundo perfeito, e na maior parte dos casos o calculo ICMS CST 70 se dá da seguinte forma:
Variáveis para Cálculo da CST 70:
Base de calculo: 100,00
Alíquota ICMS[bb] Próprio: 12%
Alíquota ICMS ST[bb] : 17%
MVA Ajustado[bb] : 45%
% Red. Base ICMS Próprio: 40%
% Red. Base ICMS ST: 40%
Valor IPI : 0,00

Calculo Base de ICMS Próprio com Redução:
Base Reduzida = Base ICMS * (100  % Red. Base ICMS Próprio)  / 100
Base Reduzida = 100,00 * (100  40) / 100
Base Reduzida = 60,00

Calculo Base ICMS ST:
Base ICMS ST = (Base ICMS  + IPI)* MVA Ajustado  / 100
Base ICMS ST = (100,00 + 0,00) * (100 + 45)  / 100
Base ICMS ST = 145,00

Calculo Base Reduzida ICMS ST:
Base Reduzida ST = Base ICMS ST * (100  % Red. Base ICMS ST)  / 100
Base Reduzida ST = 145,00 * (100  40) / 100
Base Reduzida ST = 87,00

Valor ICMS Próprio:
Valor ICMS Próprio = Base Reduzida *Alíquota ICMS Próprio / 100
Valor ICMS Próprio = 60 * 12 / 100
Valor ICMS Próprio = 7,20

Valor ICMS ST:
Valor ICMS ST = (Base Reduzida ICMS ST * Alíquota ICMS ST / 100)  Valor ICMS Próprio
Valor ICMS ST = (87,00 * 17 / 100)  7,20
Valor ICMS ST = 14,79  7,20
Valor ICMS ST = 7,59
*/
      -- Realizad o calculo do ICMS
      vn_fase := 7.1;
      --
      vv_cod_st := pk_csf.fkg_Cod_ST_cod ( en_id_st => vn_codst_id );
      --
      est_row_imp_itemsc.itemsoliccalc_id := est_item_solic_calc.id;
      est_row_imp_itemsc.tipoimp_id       := pk_csf.fkg_Tipo_Imposto_id ( en_cd => '1' ); -- ICMS
      est_row_imp_itemsc.dm_tipo          := 0;
      est_row_imp_itemsc.codst_id         := vn_codst_id;
      est_item_solic_calc.dm_mod_base_calc := vn_dm_mod_base_calc;
      --
      est_row_imp_itemsc.vl_base_calc     := nvl(est_item_solic_calc.vl_bruto,0) - est_item_solic_calc.vl_desc;
      --
      vn_fase := 7.2;
      --
      if nvl(vn_dm_soma_frete,0) = 1 then
         est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) + nvl(est_item_solic_calc.vl_frete,0);
      end if;
      --
      if nvl(vn_dm_soma_seguro,0) = 1 then
         est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) + nvl(est_item_solic_calc.vl_seguro,0);
      end if;
      --
      if nvl(vn_dm_soma_outra_desp,0) = 1 then
         est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) + nvl(est_item_solic_calc.vl_outro,0);
      end if;
      --
      vn_fase := 7.3;
      --
      if nvl(vn_dm_soma_ipi,0) = 1 then
         --
         begin
            --
            select ii.vl_imp_trib
              into vn_vl_imp_ipi
              from imp_itemsc ii
                 , tipo_imposto ti
             where 1 = 1
               and ii.itemsoliccalc_id = est_item_solic_calc.id
               and ii.dm_tipo = 0 -- Normal
               and ti.id = ii.tipoimp_id
               and ti.cd = '3';
            --
         exception
            when others then
               vn_vl_imp_ipi := 0;
         end;
         --
         est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) + nvl(vn_vl_imp_ipi,0);
         --
      end if;
      --
      vn_fase := 7.4;
      --
      if nvl(vn_dm_soma_ii,0) = 1 then
         --
         begin
            --
            select ii.vl_imp_trib
              into vn_vl_imp_ii
              from imp_itemsc ii
                 , tipo_imposto ti
             where 1 = 1
               and ii.itemsoliccalc_id = est_item_solic_calc.id
               and ii.dm_tipo = 0 -- Normal
               and ti.id = ii.tipoimp_id
               and ti.cd = '7';
            --
         exception
            when others then
               vn_vl_imp_ipi := 0;
         end;
         --
         est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) + nvl(vn_vl_imp_ii,0);
         --
      end if;
      --
      vn_fase := 7.5;
      --
      est_row_imp_itemsc.aliq_apli        := vn_aliq_dest;
      est_row_imp_itemsc.perc_reduc       := vn_perc_reduc_bc;
      est_row_imp_itemsc.percent_difer    := vn_perc_difer;
      --
      vn_fase := 8;
      --
      if vv_cod_st = '51' then -- Diferimento
         --
         vn_fase := 8.1;
         -- Base Reduzida = Base ICMS * (100  % Red. Base ICMS Próprio)  / 100
         est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) * (100 - nvl(est_row_imp_itemsc.perc_reduc,0)) / 100;
         --
         vn_fase := 8.2;
         -- Valor ICMS Próprio = Base Reduzida *Alíquota ICMS Próprio / 100
         if nvl(est_row_imp_itemsc.aliq_apli,0) > 0 then
            est_row_imp_itemsc.vl_icms_oper      := nvl(est_row_imp_itemsc.vl_base_calc,0) * nvl(est_row_imp_itemsc.aliq_apli,0) / 100;
         else
            est_row_imp_itemsc.vl_icms_oper      := 0;
         end if;
         --
         vn_fase := 8.3;
         --
         est_row_imp_itemsc.vl_icms_difer := nvl(est_row_imp_itemsc.vl_icms_oper,0) * ( nvl(est_row_imp_itemsc.percent_difer,0) / 100 );
         --
         vn_fase := 8.4;
         --
         est_row_imp_itemsc.vl_imp_trib := nvl(est_row_imp_itemsc.vl_icms_oper,0) - nvl(est_row_imp_itemsc.vl_icms_difer,0);
         --
      else
         --
         vn_fase := 8.5;
         --
         if nvl(est_row_imp_itemsc.perc_reduc,0) > 0 then
            vn_aux_base_calc := est_row_imp_itemsc.vl_base_calc;
         else
            vn_aux_base_calc := 0;
         end if;
         --
         vn_fase := 8.6;
         -- Base Reduzida = Base ICMS * (100  % Red. Base ICMS Próprio)  / 100
         est_row_imp_itemsc.vl_base_calc := nvl(est_row_imp_itemsc.vl_base_calc,0) * (100 - nvl(est_row_imp_itemsc.perc_reduc,0)) / 100;
         --
         vn_fase := 8.7;
         -- Valor ICMS Próprio = Base Reduzida *Alíquota ICMS Próprio / 100
         if nvl(est_row_imp_itemsc.aliq_apli,0) > 0 then
            est_row_imp_itemsc.vl_imp_trib      := nvl(est_row_imp_itemsc.vl_base_calc,0) * nvl(est_row_imp_itemsc.aliq_apli,0) / 100;
         else
            est_row_imp_itemsc.vl_imp_trib      := 0;
         end if;
         --
         vn_fase := 8.8;
         --
         vn_dif_base_calc := nvl(vn_aux_base_calc,0) - nvl(est_row_imp_itemsc.vl_base_calc,0);
         --
         vn_fase := 8.9;
         --
         if nvl(vn_dif_base_calc,0) > 0 then
            --
            vn_fase := 8.91;
            vn_aux_imp_trib := nvl(vn_aux_base_calc,0) * nvl(est_row_imp_itemsc.aliq_apli,0) / 100;
            --
            vn_fase := 8.92;
            est_row_imp_itemsc.vl_icms_deson := nvl(vn_aux_imp_trib,0) - nvl(est_row_imp_itemsc.vl_imp_trib,0);
            est_item_solic_calc.dm_mot_des_icms := nvl(en_dm_mot_des_icms_part,9);
            --
         else
            --
            vn_fase := 8.93;
            est_row_imp_itemsc.vl_icms_deson := null;
            est_item_solic_calc.dm_mot_des_icms := null;
         end if;
         --
         vn_fase := 8.10;
         --
         if vv_cod_st in ('00', '10') then
            --
            if nvl(est_row_imp_itemsc.perc_reduc,0) <= 0 then
               est_row_imp_itemsc.perc_reduc := null;
            end if;
            --
            if nvl(est_row_imp_itemsc.percent_difer,0) <= 0 then
               est_row_imp_itemsc.percent_difer := null;
               est_row_imp_itemsc.vl_icms_oper := null;
               est_row_imp_itemsc.vl_icms_difer := null;
            end if;
            --
            if nvl(est_row_imp_itemsc.vl_icms_deson,0) <= 0 then
               est_row_imp_itemsc.vl_icms_deson := null;
               est_item_solic_calc.dm_mot_des_icms := null;
            end if;
            --
         elsif vv_cod_st in ('20', '70', '90') then
            --
            if nvl(est_row_imp_itemsc.percent_difer,0) <= 0 then
               est_row_imp_itemsc.percent_difer := null;
               est_row_imp_itemsc.vl_icms_oper := null;
               est_row_imp_itemsc.vl_icms_difer := null;
            end if;
            --
            if nvl(est_row_imp_itemsc.vl_icms_deson,0) <= 0 then
               est_row_imp_itemsc.vl_icms_deson := null;
               est_item_solic_calc.dm_mot_des_icms := null;
            end if;
            --
         elsif vv_cod_st in ('30', '40', '41', '50', '60') then
            --
            if en_dm_part_tem_suframa = 1 -- Se tem suframa
               and nvl(est_row_imp_itemsc.vl_imp_trib,0) > 0 
               then
               --
               est_row_imp_itemsc.vl_icms_deson := nvl(est_row_imp_itemsc.vl_imp_trib,0);
               est_item_solic_calc.dm_mot_des_icms := 7; -- Suframa
               --
            end if;
            --
            est_row_imp_itemsc.vl_base_calc := null;
            --
            est_row_imp_itemsc.aliq_apli := null;
            --
            est_row_imp_itemsc.vl_imp_trib := null;
            --
            est_row_imp_itemsc.perc_reduc := null;
            --
            if nvl(est_row_imp_itemsc.percent_difer,0) <= 0 then
               est_row_imp_itemsc.percent_difer := null;
               est_row_imp_itemsc.vl_icms_oper := null;
               est_row_imp_itemsc.vl_icms_difer := null;
            end if;
            --
            if nvl(est_row_imp_itemsc.vl_icms_deson,0) <= 0 then
               est_row_imp_itemsc.vl_icms_deson := null;
               est_item_solic_calc.dm_mot_des_icms := null;
            end if;
            --
         end if;
         --
      end if;
      --
      vn_fase := 9;
      --
      est_row_imp_itemsc.perc_adic            := null;
      est_row_imp_itemsc.qtde_base_calc_prod  := null;
      est_row_imp_itemsc.vl_aliq_prod         := null;
      est_row_imp_itemsc.vl_bc_st_ret         := null;
      est_row_imp_itemsc.vl_icmsst_ret        := null;
      est_row_imp_itemsc.vl_bc_st_dest        := null;
      est_row_imp_itemsc.vl_icmsst_dest       := null;
      est_row_imp_itemsc.vl_imp_nao_dest      := null;
      --
      est_row_imp_itemsc.memoria := vv_memoria;
      --
      vn_fase := 9.1;
      -- caso houver CFOP de Destino, então Troca do Item
      if nvl(vn_cfop_id_dest,0) > 0 then
         est_item_solic_calc.cfop := pk_csf.fkg_cfop_cd ( en_cfop_id => vn_cfop_id_dest );
      end if;
      --
      vn_fase := 9.2;
      -- Atualiza dados da Observação Fiscal
      -- Procedimento de montagem da Observacao Fiscal da Solicitação de Calculo
      pkb_monta_sc_infor_adic ( en_soliccalc_id              => en_soliccalc_id
                              , en_empresa_id                => en_empresa_id
                              , en_obsfiscal_id              => vn_obsfiscal_id
                              , ev_obs_compl                 => vv_obs_compl
                              );
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_calc_icms fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_calc_icms;

-------------------------------------------------------------------------------------------------------

-- Prodimento de recuperar o parametro de partilha de icms Global
procedure pkb_recup_param_part_icms ( en_soliccalc_id              in solic_calc.id%type
                                    , en_empresa_id                in empresa.id%type
                                    , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                    , en_estado_id_orig            in estado.id%type
                                    , en_estado_id_dest            in estado.id%type
                                    --| Item
                                    , en_ncm_id                    in ncm.id%type
                                    , en_cfop_id                   in cfop.id%type
                                    , st_row_cfop_part_icms_estado out cfop_part_icms_estado%rowtype
                                    )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_qtde_item  number;
   vn_qtde_ncm   number;
   vn_qtde_cfop  number;
   --
begin
   --
   vn_fase := 1;
   --
   st_row_cfop_part_icms_estado := null;
   --
   begin
      --
      select p.*
        into st_row_cfop_part_icms_estado
        from cfop_part_icms_estado p
       where 1 = 1
         and p.estado_id_orig  = en_estado_id_orig
         and p.estado_id_dest  = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and p.cfop_id         = en_cfop_id
         and nvl(p.ncm_id,0)   = nvl(en_ncm_id, 0);
      --
   exception
      when others then
         st_row_cfop_part_icms_estado := null;
   end;
   --
   vn_fase := 2;
   --
   if nvl(st_row_cfop_part_icms_estado.id,0) <= 0 then
      --
      begin
         --
         select p.*
           into st_row_cfop_part_icms_estado
           from cfop_part_icms_estado p
          where 1 = 1
            and p.estado_id_orig  = en_estado_id_orig
            and p.estado_id_dest  = en_estado_id_dest
            and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
            and p.cfop_id         = en_cfop_id
            and p.ncm_id is null;
         --
      exception
         when others then
            st_row_cfop_part_icms_estado := null;
      end;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_part_icms fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_part_icms;

-------------------------------------------------------------------------------------------------------

-- Prodimento de recuperar o parametro de partilha de icms da empresa
procedure pkb_recup_param_part_icms_empr ( en_soliccalc_id              in solic_calc.id%type
                                         , en_empresa_id                in empresa.id%type
                                         , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                         , en_estado_id_orig            in estado.id%type
                                         , en_estado_id_dest            in estado.id%type
                                         --| Item
                                         , en_orig                      in param_icms_inter_cf.orig%type										 
                                         , en_item_id                   in item.id%type
                                         , en_ncm_id                    in ncm.id%type
                                         , en_cfop_id                   in cfop.id%type
                                         , st_row_param_icms_inter_cf   out param_icms_inter_cf%rowtype
                                         )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_qtde_item  number;
   vn_qtde_ncm   number;
   vn_qtde_cfop  number;
   vn_qtde_orig  number;
   vv_cod_ncm    ncm.cod_ncm%type  := null;
   vn_ncm_id     ncm.id%type;
   --
   cursor c_dados is
   select distinct p.empresa_id, p.estado_id, p.dt_ini, p.dt_fin
     from param_icms_inter_cf p
    where p.empresa_id = en_empresa_id
      and p.estado_id = en_estado_id_dest
      and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
    order by 1, 2, 3, 4;
   --
   procedure pkb_recup_param_cfop ( enc_orig                      in param_icms_inter_cf.orig%type
                                  , enc_item_id                   in item.id%type
                                  , enc_ncm_id                    in ncm.id%type
                                  , enc_cfop_id                   in cfop.id%type
                                  )
   is
      --
      cursor c_cfop is
      select p.*
        from param_icms_inter_cf p
       where p.empresa_id      = en_empresa_id
         and p.estado_id       = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and nvl(p.cfop_id,0)  = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)   = nvl(enc_ncm_id,0)
         and nvl(p.item_id,0)  = nvl(enc_item_id,0)
         and nvl(p.orig,-1)    = nvl(enc_orig,-1)		 
       order by 1, 2, 3, 4, 5, 6, 7, 8;
      --
   begin
      --
      vn_fase := 4;
      --
      for rec in c_cfop loop
         exit when c_cfop%notfound or (c_cfop%notfound) is null;
         --
         vn_fase := 4.1;
         -- Faz busca pelo CFOP
         st_row_param_icms_inter_cf := rec;
         --
         if nvl(st_row_param_icms_inter_cf.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.2;
      --
      if nvl(st_row_param_icms_inter_cf.id,0) <= 0
         and ( enc_cfop_id is not null and nvl(vn_qtde_cfop,0) > 0 )
         then
         --
         vn_qtde_cfop := 0;
         -- Aplica a recursividade para achar com o CFOP nulo
         pkb_recup_param_cfop ( enc_orig                      => enc_orig
                              , enc_item_id                   => enc_item_id
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_cfop_id                   => null
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cfop fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_cfop;    
   --
   procedure pkb_recup_param_ncm ( enc_orig                      in param_icms_inter_cf.orig%type
                                 , enc_item_id                   in item.id%type
                                 , enc_ncm_id                    in ncm.id%type
                                 )
   is
      --
      cursor c_ncm is
      select distinct p.orig, p.item_id, p.ncm_id
        from param_icms_inter_cf p
       where p.empresa_id      = en_empresa_id
         and p.estado_id       = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and nvl(p.ncm_id,0)   = nvl(enc_ncm_id,0)
         and nvl(p.item_id,0)  = nvl(enc_item_id,0)
         and nvl(p.orig,-1)    = nvl(enc_orig,-1)		 
       order by 1, 2, 3;
      --
   begin
      --
      vn_fase := 3;
      --
      for rec in c_ncm loop
         exit when c_ncm%notfound or (c_ncm%notfound) is null;
         --
         vn_fase := 3.1;
         -- Faz busca pelo CFOP
         vn_qtde_cfop := 1;
         --
         pkb_recup_param_cfop ( enc_orig                      => rec.orig
                              , enc_item_id                   => rec.item_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_cfop_id                   => en_cfop_id
                              );
         --
         if nvl(st_row_param_icms_inter_cf.id,0) > 0 then
            exit;
         end if;
         --
      end loop;
      --
      vn_fase := 3.2;
      --
      if nvl(st_row_param_icms_inter_cf.id,0) <= 0
         and ( vn_ncm_id is not null and nvl(vn_qtde_ncm,0) > 0 )	  
         --and ( enc_ncm_id is not null and nvl(vn_qtde_ncm,0) > 0 )
         then
         --
         --vn_ncm_id := pk_csf.fkg_ncm_id_superior ( ev_cod_ncm => pk_csf.fkg_cod_ncm_id ( en_ncm_id => enc_ncm_id ) );
         --
         --if nvl(vn_ncm_id,0) <= 0 then
            vn_qtde_ncm := 0;
         --end if;
         --
         -- Aplica a recursividade para achar com o NCM nulo
         pkb_recup_param_ncm ( enc_orig                      => enc_orig
                             , enc_item_id                   => enc_item_id
                             , enc_ncm_id                    => null --vn_ncm_id
                             );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_ncm fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_ncm;    
   --
   procedure pkb_recup_param_item ( enc_orig                      in param_icms_inter_cf.orig%type
                                  , enc_item_id                   in item.id%type )
   is
      --
      cursor c_item is
      select distinct p.orig, p.item_id
        from param_icms_inter_cf p
       where p.empresa_id      = en_empresa_id
         and p.estado_id       = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and nvl(p.item_id,0)  = nvl(enc_item_id,0)
         and nvl(p.orig,-1)    = nvl(enc_orig,-1)		 
       order by 1, 2;
      --
   begin
      --
      vn_fase := 2;
      --
      for rec in c_item loop
         exit when c_item%notfound or (c_item%notfound) is null;
         --
         vn_fase := 2.1;
         -- Faz busca pelo NCM
         vn_qtde_ncm := 1;
         --
         pkb_recup_param_ncm ( enc_orig                      => rec.orig
                             , enc_item_id                   => rec.item_id
                             , enc_ncm_id                    => vn_ncm_id --en_ncm_id
                             );
         --
         if nvl(st_row_param_icms_inter_cf.id,0) > 0 then
            exit;
         end if;
         --
      end loop;
      --
      vn_fase := 2.2;
      --
      if nvl(st_row_param_icms_inter_cf.id,0) <= 0
         and ( en_item_id is not null and nvl(vn_qtde_item,0) > 0 )
         then
         --
         vn_qtde_item := 0;
         -- Aplica a recursividade para achar com o ITEM nulo
         pkb_recup_param_item ( enc_orig    => enc_orig
                              , enc_item_id => null );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_item fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_item;
   --
   procedure pkb_recup_param_orig ( enc_orig                      in param_icms_inter_cf.orig%type )
   is
      --
      cursor c_orig is
      select distinct p.orig
        from param_icms_inter_cf p
       where p.empresa_id      = en_empresa_id
         and p.estado_id       = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and nvl(p.orig,-1)    = nvl(enc_orig,-1)
       order by 1;
      --
   begin
      --
      vn_fase := 2;
      --
      for rec in c_orig loop
         exit when c_orig%notfound or (c_orig%notfound) is null;
         --
         vn_fase := 2.1;
         -- Faz busca pelo ITEM
         vn_qtde_item := 1;
         --
         pkb_recup_param_item ( enc_orig                     => rec.orig
                              , enc_item_id                  => en_item_id
                              );
         --
         if nvl(st_row_param_icms_inter_cf.id,0) > 0 then
            exit;
         end if;
         --
      end loop;
      --
      vn_fase := 2.2;
      --
      if nvl(st_row_param_icms_inter_cf.id,0) <= 0
         and ( en_orig is not null and nvl(vn_qtde_orig,0) > 0 )
         then
         --
         vn_qtde_orig := 0;
         -- Aplica a recursividade para achar com ORIG nulo
         pkb_recup_param_orig ( enc_orig => null );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_orig fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
   end pkb_recup_param_orig;   
   --
begin
   --
   vn_fase := 1;
   --
   vn_ncm_id  := en_ncm_id;
   vv_cod_ncm := null;   
   vv_cod_ncm := pk_csf.fkg_cod_ncm_id ( en_ncm_id => en_ncm_id );
   --
   vn_fase := 1.1;
   --   
   if vv_cod_ncm is null then
      vn_ncm_id := pk_csf.fkg_ncm_id_superior ( ev_cod_ncm => pk_csf.fkg_cod_ncm_id ( en_ncm_id => en_ncm_id ) );   
   end if;	  
   --
   vn_fase := 1.2;
   --
   st_row_param_icms_inter_cf := null;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 1.3;
      -- Faz a busca pelo ORIG
      vn_qtde_orig := 1;
      --
      pkb_recup_param_orig ( enc_orig => en_orig );
      --
      vn_fase := 1.4;
      --
      if nvl(st_row_param_icms_inter_cf.id,0) > 0 then
         exit;
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_part_icms_empr fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_part_icms_empr;

-------------------------------------------------------------------------------------------------------

--| Procedimento Calcula a Partilha de ICMS
procedure pkb_calc_part_icms ( en_soliccalc_id              in solic_calc.id%type
                             , en_empresa_id                in empresa.id%type
                             , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                             , ed_dt_emiss                  in solic_calc.dt_emiss%type
                             , en_dm_cons_final             in solic_calc.dm_cons_final%type
                             , en_estado_id_orig            in estado.id%type
                             , en_estado_id_dest            in estado.id%type
                             --| Item
                             , en_orig                      in param_icms_inter_cf.orig%type  							 
                             , en_item_id                   in item.id%type
                             , en_ncm_id                    in ncm.id%type
                             , en_cfop_id                   in cfop.id%type
                             , et_item_solic_calc           in item_solic_calc%rowtype
                             )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_log_generico_calcfiscal   dbms_sql.number_table;
   --
   vv_memoria                   part_icms_solic_calc.memoria%type;
   vt_imp_itemsc                imp_itemsc%rowtype;
   vt_param_icms_inter_cf       param_icms_inter_cf%rowtype := null;
   vt_cfop_part_icms_estado     cfop_part_icms_estado%rowtype := null;
   vt_part_icms_solic_calc      part_icms_solic_calc%rowtype;
   --
   vn_perc_icms_uf_des               number(7,4);
   vn_perc_icms_inter_part           number(7,4);
   vn_perc_comb_pobr_uf_dest         number(7,4);
   vn_perc_icms_inter                number(7,4);
   vn_per_red_bc_icms_interno        number(7,4);
   vn_per_red_bc_icms_interestad     number(7,4);
   vn_vl_base_calc_icms              nota_fiscal_total.vl_base_calc_icms%type;
   --
begin
   --
   vn_fase := 1;
   --
   vt_log_generico_calcfiscal.delete;
   --
   if en_dm_ind_emit = 0 -- Emissão Propria
      and substr(et_item_solic_calc.cfop, 1, 1) in ('2', '6')
      and en_dm_cons_final = 1 -- Sim, consumidor final
      and nvl(en_estado_id_orig,0) <> nvl(en_estado_id_dest,0)
      then
      --
      vn_fase := 2;
      --
      vt_imp_itemsc := null;
      vt_part_icms_solic_calc := null;
      --
      begin
         --
         select ii.*
           into vt_imp_itemsc
           from imp_itemsc    ii
              , tipo_imposto  ti
          where ii.itemsoliccalc_id  = et_item_solic_calc.id
            and ii.dm_tipo           = 0
            and ti.id                = ii.tipoimp_id
            and ti.cd                = '1'; -- ICMS
         --
      exception
         when others then
            vt_imp_itemsc := null;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vt_imp_itemsc.id,0) > 0 then
         --
         vn_fase := 4;
         --
         -- Recuperar o parametro de partilha de icms da empresa
         pkb_recup_param_part_icms_empr ( en_soliccalc_id              => en_soliccalc_id
                                        , en_empresa_id                => en_empresa_id
                                        , ed_dt_emiss                  => ed_dt_emiss
                                        , en_estado_id_orig            => en_estado_id_orig
                                        , en_estado_id_dest            => en_estado_id_dest
                                        --| Item
                                        , en_orig                      => en_orig										
                                        , en_item_id                   => en_item_id
                                        , en_ncm_id                    => en_ncm_id
                                        , en_cfop_id                   => en_cfop_id
                                        , st_row_param_icms_inter_cf   => vt_param_icms_inter_cf
                                        );
         --
         vn_fase := 4.1;
         --
         if nvl(vt_param_icms_inter_cf.id,0) <= 0 then
            --
            vn_fase := 4.2;
            --
            -- Recuperar o parâmetro de Partilha de ICMS Global
            pkb_recup_param_part_icms ( en_soliccalc_id              => en_soliccalc_id
                                      , en_empresa_id                => en_empresa_id
                                      , ed_dt_emiss                  => ed_dt_emiss
                                      , en_estado_id_orig            => en_estado_id_orig
                                      , en_estado_id_dest            => en_estado_id_dest
                                      --| Item
                                      , en_ncm_id                    => en_ncm_id
                                      , en_cfop_id                   => en_cfop_id
                                      , st_row_cfop_part_icms_estado => vt_cfop_part_icms_estado
                                      );
            --
            vn_fase := 4.3;
            --
            if nvl(vt_cfop_part_icms_estado.id,0) <= 0 then
               --
               vn_fase := 4.31;
               --
               vn_perc_icms_uf_des               := 0;
               vn_perc_icms_inter_part           := 0;
               vn_perc_comb_pobr_uf_dest         := 0;
               vn_perc_icms_inter                := 0;
               vn_per_red_bc_icms_interno        := 0;
               vn_per_red_bc_icms_interestad     := 0;
               --
            else
               --
               vn_fase := 4.32;
               --
               vv_memoria                        := pk_csf_calc_fiscal.fkg_mem_cfop_part_icms_estado ( en_cfopparticmsestado_id => vt_cfop_part_icms_estado.id );
               vn_perc_icms_uf_des               := vt_cfop_part_icms_estado.perc_icms_uf_des;
               vn_perc_icms_inter_part           := vt_cfop_part_icms_estado.perc_icms_inter_part;
               vn_perc_comb_pobr_uf_dest         := vt_cfop_part_icms_estado.perc_comb_pobr_uf_dest;
               vn_perc_icms_inter                := vt_cfop_part_icms_estado.perc_icms_inter;
               vn_per_red_bc_icms_interno        := 0;
               vn_per_red_bc_icms_interestad     := 0;			   
               --
            end if;
            --
         else
            --
            vn_fase := 4.4;
            --
            vv_memoria                        := pk_csf_calc_fiscal.fkg_mem_param_icms_inter_cf ( en_paramicmsintercf_id => vt_param_icms_inter_cf.id );
            vn_perc_icms_uf_des               := vt_param_icms_inter_cf.perc_icms_uf_des;
            vn_perc_icms_inter_part           := vt_param_icms_inter_cf.perc_icms_inter_part;
            vn_perc_comb_pobr_uf_dest         := vt_param_icms_inter_cf.perc_comb_pobr_uf_dest;
            vn_perc_icms_inter                := vt_param_icms_inter_cf.perc_icms_inter;
            vn_per_red_bc_icms_interno        := vt_param_icms_inter_cf.per_red_bc_icms_interno;
            vn_per_red_bc_icms_interestad     := vt_param_icms_inter_cf.per_red_bc_icms_interestadual;			
            --
         end if;
         --
         vn_fase := 5;
         --
         if nvl(vn_perc_icms_uf_des,0) > 0
            or nvl(vn_perc_icms_inter_part,0) > 0
            or nvl(vn_perc_comb_pobr_uf_dest,0) > 0
            or nvl(vn_perc_icms_inter,0) > 0
            or nvl(vn_per_red_bc_icms_interno,0) > 0
            or nvl(vn_per_red_bc_icms_interestad,0) > 0			
            then
            --
            vn_fase := 5.1;
            --
            vt_part_icms_solic_calc.itemsoliccalc_id        := et_item_solic_calc.id;
            --
            vn_fase := 5.2;
            --
            if nvl(vt_imp_itemsc.vl_base_calc,0) <= 0 then
               vt_part_icms_solic_calc.vl_bc_uf_dest           := nvl(et_item_solic_calc.vl_bruto,0) - nvl(et_item_solic_calc.vl_desc,0);
            else
               vt_part_icms_solic_calc.vl_bc_uf_dest           := nvl(vt_imp_itemsc.vl_base_calc,0);
            end if;
            --
            vn_fase := 5.3;
            --
            vt_part_icms_solic_calc.perc_icms_uf_dest          := nvl(vn_perc_icms_uf_des,0);
            --
            if nvl(vt_imp_itemsc.aliq_apli,0) <= 0 then
               vt_part_icms_solic_calc.perc_icms_inter            := nvl(vn_perc_icms_inter,0);
            else
               vt_part_icms_solic_calc.perc_icms_inter            := nvl(vt_imp_itemsc.aliq_apli,0);
            end if;
            --
            vn_fase := 5.4;
            vt_part_icms_solic_calc.perc_icms_inter_part       := nvl(vn_perc_icms_inter_part,0);
            --
            -- == Verifica se existe percentual de redução de ICMS Interno (Dentro do Estado)	=========================			
            vt_part_icms_solic_calc.vl_icms_uf_remet           := (nvl(vt_part_icms_solic_calc.vl_bc_uf_dest,0) * ((vn_perc_icms_uf_des - nvl(vt_part_icms_solic_calc.perc_icms_inter,0))/100) ) * (1 - (vn_perc_icms_inter_part/100));
            --			
            if nvl(vn_per_red_bc_icms_interno,0) > 0 then				
               vn_vl_base_calc_icms                     := 0;
               vn_vl_base_calc_icms                     := (nvl(vt_part_icms_solic_calc.vl_bc_uf_dest,0) - (nvl(vt_part_icms_solic_calc.vl_bc_uf_dest,0) * (nvl(vn_per_red_bc_icms_interno,0)/100)));
               vt_part_icms_solic_calc.vl_icms_uf_remet := (nvl(vn_vl_base_calc_icms,0) * ((vn_perc_icms_uf_des - nvl(vt_part_icms_solic_calc.perc_icms_inter,0))/100) ) * (1 - (vn_perc_icms_inter_part/100));			  
            end if;			
            -- ========================================================================================================
            vn_fase := 5.5;
            -- == Verifica se existe percentual de redução de ICMS Interestadual (Fora do Estado)	====================
            vt_part_icms_solic_calc.vl_icms_uf_dest            := (nvl(vt_part_icms_solic_calc.vl_bc_uf_dest,0) * ((vn_perc_icms_uf_des - nvl(vt_part_icms_solic_calc.perc_icms_inter,0))/100) ) * (vn_perc_icms_inter_part/100);
            --
            if nvl(vn_per_red_bc_icms_interestad,0) > 0 then			
               vn_vl_base_calc_icms                     := 0;			
               vn_vl_base_calc_icms                     := (nvl(vt_part_icms_solic_calc.vl_bc_uf_dest,0) - (nvl(vt_part_icms_solic_calc.vl_bc_uf_dest,0) * (nvl(vn_per_red_bc_icms_interestad,0)/100)));			
               vt_part_icms_solic_calc.vl_icms_uf_dest  := (nvl(vn_vl_base_calc_icms,0) * ((vn_perc_icms_uf_des - nvl(vt_part_icms_solic_calc.perc_icms_inter,0))/100) ) * (vn_perc_icms_inter_part/100);			   
            end if;
            -- ========================================================================================================
            vn_fase := 5.6;
            vt_part_icms_solic_calc.perc_comb_pobr_uf_dest     := nvl(vn_perc_comb_pobr_uf_dest,0);
            vt_part_icms_solic_calc.vl_comb_pobr_uf_dest       := round( (nvl(vt_part_icms_solic_calc.vl_bc_uf_dest,0) * (vn_perc_comb_pobr_uf_dest/100)), 2);
            --
            vt_part_icms_solic_calc.memoria := vv_memoria;
            --
            vn_fase := 5.7;
            --
            -- Procedimento que faz a validação e gravação dos dados na tabela PART_ICMS_SOLIC_CALC
            pkb_integr_part_icms_sc ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                                    , est_row_part_icms_solic_calc  => vt_part_icms_solic_calc
                                    , en_empresa_id                 => en_empresa_id
                                    , en_soliccalc_id               => en_soliccalc_id
                                    , ev_descr_item                 => ('Nro. Item ' || et_item_solic_calc.nro_item || ', Item ' || et_item_solic_calc.cod_item || '-' || et_item_solic_calc.descr_item)
                                    );
            --
         end if;
         --
      end if;
      --
   end if;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_calc_part_icms fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_calc_part_icms;

-------------------------------------------------------------------------------------------------------

--| Procedimento recupera parâmetros da Calculadora Fiscal pela Natureza da Operacao
procedure pkb_recup_param_nat_oper ( en_soliccalc_id              in solic_calc.id%type
                                   , en_empresa_id                in empresa.id%type
                                   , en_cnae_id                   in cnae.id%type
                                   , en_inctrib_id                in inc_trib.id%type
                                   , en_regtrib_id                in reg_trib.id%type
                                   , en_formatrib_id              in forma_trib.id%type
                                   , en_natoper_id                in nat_oper.id%type
                                   , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                                   , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                                   , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                   , ev_cpf_cnpj_part             in varchar2
                                   , en_estado_id_dest            in estado.id%type
                                   , en_dm_tipo_part              in solic_calc.dm_tipo_part%type
                                   , en_dm_cons_final             in solic_calc.dm_cons_final%type
                                   , en_dm_ind_ie_part            in solic_calc.dm_ind_ie_part%type
                                   , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                                   , en_dm_part_tem_suframa       in solic_calc.dm_part_tem_suframa%type
                                   , en_dm_ind_ativ_part          in solic_calc.dm_ind_ativ_part%type
                                   , en_dm_mot_des_icms_part      in solic_calc.dm_mot_des_icms_part%type
                                   , en_calcular_icms_st          in number
                                   , sb_calculou                  out boolean
                                   )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_log_generico_calcfiscal   dbms_sql.number_table;
   --
   vn_estado_id_orig            estado.id%type;
   vn_cfop_cd                   cfop.cd%type;
   vt_tipo_imposto              tipo_imposto%rowtype;
   vv_cod_st                    cod_st.cod_st%type;
   vn_cfop_id                   cfop.id%type;
   vt_item_solic_calc           item_solic_calc%rowtype;
   vt_row_imp_itemsc            imp_itemsc%rowtype;
   --
   vn_item_id                   item.id%type;
   vn_cest_id                   cest.id%type;
   vn_ncm_id                    ncm.id%type;
   vn_extipi_id                 ex_tipi.id%type;
   --
   vn_trocou_cfop               number := 0;
   vn_qtde_imp                  number;
   --
   vn_qtde_natoper_calc         number;
   vv_cod_nat                   nat_oper.cod_nat%type;
   vv_descr_nat                 nat_oper.descr_nat%type;
   vn_orig                      item.dm_orig_merc%type;
   vv_cod_trib_municipio        item_solic_calc.cod_trib_municipio%type;
   --
   cursor c_itemsc is
   select isc.*
     from item_solic_calc   isc
    where isc.soliccalc_id = en_soliccalc_id
    order by isc.nro_item;
   --
   cursor c_param ( enc_cfop_id  cfop.id%type ) is
   select nopti.*
        , nop.cod_nat
        , nop.descr_nat
     from nat_oper          nop
        , nat_oper_tipoimp  nopti
    where 1 = 1
      and nop.id            = en_natoper_id
      and nopti.natoper_id  = nop.id
      and nopti.cfop_id     = enc_cfop_id
    order by nopti.dm_tipo_calc, nopti.prioridade;
   --
begin
   --
   vn_fase := 1;
   --
   sb_calculou := false;
   --
   vt_log_generico_calcfiscal.delete;
   --
   begin
      --
      select cid.estado_id
        into vn_estado_id_orig
        from empresa e
           , pessoa p
           , cidade cid
       where e.id = en_empresa_id
         and p.id = e.pessoa_id
         and cid.id = p.cidade_id;
      --
   exception
      when others then
         vn_estado_id_orig := null;
   end;
   --
   for rec_itemsc in c_itemsc loop
      exit when c_itemsc%notfound or (c_itemsc%notfound) is null;
      --
      vn_fase := 1.1;
      --
      vn_cfop_id := pk_csf.fkg_cfop_id ( en_cd => rec_itemsc.cfop );
      --
      vt_item_solic_calc := null;
      vt_item_solic_calc := rec_itemsc;
      --
      vv_cod_trib_municipio := rec_itemsc.cod_trib_municipio;
      --
      vt_item_solic_calc.vl_bruto := round( nvl(vt_item_solic_calc.qtde,0) * nvl(vt_item_solic_calc.vl_unit,0),2 );
      --
      vn_fase := 1.2;
      --
      vn_item_id := pk_csf.fkg_Item_id_conf_empr ( en_empresa_id  => en_empresa_id
                                                 , ev_cod_item    => trim(rec_itemsc.cod_item)
                                                 );
      --
      vn_fase := 1.21;	  
      --	  
      begin
         select it.dm_orig_merc
           into vn_orig
           from item it
          where it.id = vn_item_id;		  
      exception
         when others then
            vn_orig := null;		 
      end;
	  --
      vn_fase := 1.3;
      --
      vn_ncm_id := pk_csf.fkg_Ncm_id ( ev_cod_ncm => trim(rec_itemsc.cod_ncm));
      --
      vn_fase := 1.4;
      --
      vn_extipi_id := pk_csf.fkg_ex_tipi_id ( ev_cod_ex_tipi  => trim(rec_itemsc.extipi)
                                            , en_ncm_id       => vn_ncm_id
                                            );
      --
      vn_fase := 1.5;
      --
      vn_cest_id := pk_csf.fkg_id_cest_cd ( ev_cest_cd => trim(rec_itemsc.cod_cest) );
      --
      vn_fase := 1.9;
      --
      vn_qtde_natoper_calc := 0;
      --
      <<inicio>>
      --
      for rec in c_param(vn_cfop_id) loop
         exit when c_param%notfound or (c_param%notfound) is null;
         --
         vn_fase := 2;
         --
         vn_cfop_cd := pk_csf.fkg_cfop_cd ( en_cfop_id => rec.cfop_id );
         --
         vn_fase := 2.1;
         --
         begin
            --
            select * into vt_tipo_imposto
              from tipo_imposto
             where id = rec.tipoimposto_id;
            --
         exception
            when others then
               vt_tipo_imposto := null;
         end;
         --
         vn_fase := 2.2;
         --
         if nvl(rec.codst_id,0) > 0 then
            vv_cod_st := pk_csf.fkg_Cod_ST_cod ( en_id_st => rec.codst_id );
         else
            vv_cod_st := null;
         end if;
         --
         vn_fase := 2.3;
         --
         vt_row_imp_itemsc := null;
         --
         vn_qtde_imp := 0;
         --
         begin
            --
            select count(1)
              into vn_qtde_imp
              from imp_itemsc
             where 1 = 1
               and itemsoliccalc_id  = rec_itemsc.id
               and tipoimp_id        = rec.tipoimposto_id
               and dm_tipo           = rec.dm_tipo_calc;
            --
         exception
            when others then
               vn_qtde_imp := 0;
         end;
         --
         vn_fase := 2.4;
         --
         if rec.dm_tipo_calc = 0 then -- Normal
            --
            vn_fase := 3;
            --
            if vt_tipo_imposto.cd = '1' --  ICMS
               then
               --
               vn_fase := 4;
               --
               if vn_trocou_cfop = 0 then
                  --
                  pkb_calc_icms ( en_soliccalc_id              => en_soliccalc_id
                                , en_empresa_id                => en_empresa_id
                                , en_cnae_id                   => en_cnae_id
                                , en_regtrib_id                => en_regtrib_id
                                , en_formatrib_id              => en_formatrib_id
                                , en_natoper_id                => en_natoper_id
                                , en_dm_ind_emit               => en_dm_ind_emit
                                , en_dm_ind_oper               => en_dm_ind_oper
                                , ed_dt_emiss                  => ed_dt_emiss
                                , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                , en_estado_id_orig            => vn_estado_id_orig
                                , en_estado_id_dest            => en_estado_id_dest
                                , en_dm_tipo_part              => en_dm_tipo_part
                                , en_dm_cons_final             => en_dm_cons_final
                                , en_dm_ind_ie_part            => en_dm_ind_ie_part
                                , en_dm_reg_trib_part          => en_dm_reg_trib_part
                                , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                                , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                                , en_dm_mot_des_icms_part      => en_dm_mot_des_icms_part
                                , en_dm_trib_imposto           => rec.dm_trib_imposto
                                , en_codst_id                  => rec.codst_id
                                , en_obsfiscal_id              => rec.obsfiscal_id
                                , ev_obs_compl                 => rec.obs_compl
                                --| Item
                                , en_item_id                   => vn_item_id
                                , en_ncm_id                    => vn_ncm_id
                                , en_extipi_id                 => vn_extipi_id
                                , en_cfop_id                   => vn_cfop_id
                                , est_item_solic_calc          => vt_item_solic_calc
                                , est_row_imp_itemsc           => vt_row_imp_itemsc
                                );
                  --
                  -- verifica se houve troca de CFOP
                  if vt_item_solic_calc.cfop <> rec_itemsc.cfop then
                     --
                     vn_cfop_id := pk_csf.fkg_cfop_id ( en_cd => vt_item_solic_calc.cfop );
                     --
                     vn_trocou_cfop := 1; -- 1-Sim
                     sb_calculou := true;
                     --
                     exit;
                     --
                  end if;
                  --
               else
                  --
                  vn_trocou_cfop := 0;
                  --
               end if;
               --
            elsif vt_tipo_imposto.cd = '2'  -- ICMS-ST
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 5;
               -- Procedimento de calculo do ICMS-ST
               pkb_calc_icmsst ( en_soliccalc_id              => en_soliccalc_id
                               , en_empresa_id                => en_empresa_id
                               , en_cnae_id                   => en_cnae_id
                               , en_regtrib_id                => en_regtrib_id
                               , en_formatrib_id              => en_formatrib_id
                               , en_natoper_id                => en_natoper_id
                               , en_dm_ind_emit               => en_dm_ind_emit
                               , en_dm_ind_oper               => en_dm_ind_oper
                               , ed_dt_emiss                  => ed_dt_emiss
                               , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                               , en_estado_id_orig            => vn_estado_id_orig
                               , en_estado_id_dest            => en_estado_id_dest
                               , en_dm_tipo_part              => en_dm_tipo_part
                               , en_dm_cons_final             => en_dm_cons_final
                               , en_dm_ind_ie_part            => en_dm_ind_ie_part
                               , en_dm_reg_trib_part          => en_dm_reg_trib_part
                               , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                               , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                               , en_dm_mot_des_icms_part      => en_dm_mot_des_icms_part
                               , en_dm_trib_imposto           => rec.dm_trib_imposto
                               , en_calcular_icms_st          => en_calcular_icms_st
                               , en_codst_id                  => rec.codst_id
                               , en_obsfiscal_id              => rec.obsfiscal_id
                               , ev_obs_compl                 => rec.obs_compl
                               --| Item
                               , en_item_id                   => vn_item_id
                               , en_cest_id                   => vn_cest_id
                               , en_ncm_id                    => vn_ncm_id
                               , en_extipi_id                 => vn_extipi_id
                               , en_cfop_id                   => vn_cfop_id
                               --| Retorno do Imposto
                               , est_item_solic_calc          => vt_item_solic_calc
                               , est_row_imp_itemsc           => vt_row_imp_itemsc
                               );
               --
            elsif vt_tipo_imposto.cd in ('3', '4', '5') -- IPI, PIS e COFINS
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 6;
               --
               pkb_calc_aliq_tipoimp_ncm ( en_soliccalc_id              => en_soliccalc_id
                                         , en_empresa_id                => en_empresa_id
                                         , en_cnae_id                   => en_cnae_id
                                         , en_inctrib_id                => en_inctrib_id
                                         , en_regtrib_id                => en_regtrib_id
                                         , en_formatrib_id              => en_formatrib_id
                                         , en_natoper_id                => en_natoper_id
                                         , en_dm_ind_emit               => en_dm_ind_emit
                                         , en_dm_ind_oper               => en_dm_ind_oper
                                         , ed_dt_emiss                  => ed_dt_emiss
                                         , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                         , en_estado_id_orig            => vn_estado_id_orig
                                         , en_estado_id_dest            => en_estado_id_dest
                                         , en_dm_tipo_part              => en_dm_tipo_part
                                         , en_dm_cons_final             => en_dm_cons_final
                                         , en_dm_ind_ie_part            => en_dm_ind_ie_part
                                         , en_dm_reg_trib_part          => en_dm_reg_trib_part
                                         , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                                         , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                                         , en_dm_mot_des_icms_part      => en_dm_mot_des_icms_part
                                         , en_dm_trib_imposto           => rec.dm_trib_imposto
                                         , en_codst_id                  => rec.codst_id
                                         , en_obsfiscal_id              => rec.obsfiscal_id
                                         , ev_obs_compl                 => rec.obs_compl
                                         --| Item
                                         , en_item_id                   => vn_item_id
                                         , en_ncm_id                    => vn_ncm_id
                                         , en_extipi_id                 => vn_extipi_id
                                         , en_cfop_id                   => vn_cfop_id
                                         , en_tipoimposto_id            => rec.tipoimposto_id
                                         --| Retorno do Imposto
                                         , est_item_solic_calc          => vt_item_solic_calc
                                         , est_row_imp_itemsc           => vt_row_imp_itemsc
                                         );
               --
            elsif vt_tipo_imposto.cd = '6'  -- ISS
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 8;
               --
               pkb_calc_iss ( en_soliccalc_id              => en_soliccalc_id
                            , en_empresa_id                => en_empresa_id
                            , en_cnae_id                   => en_cnae_id
                            , en_regtrib_id                => en_regtrib_id
                            , en_formatrib_id              => en_formatrib_id
                            , en_natoper_id                => en_natoper_id
                            , en_dm_ind_emit               => en_dm_ind_emit
                            , en_dm_ind_oper               => en_dm_ind_oper
                            , ed_dt_emiss                  => ed_dt_emiss
                            , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                            , en_dm_trib_imposto           => rec.dm_trib_imposto
                            , en_dm_tipo_calc              => rec.dm_tipo_calc
                            , en_obsfiscal_id              => rec.obsfiscal_id
                            , ev_obs_compl                 => rec.obs_compl
                            --| Item
                            , en_item_id                   => vn_item_id
                            , en_cfop_id                   => vn_cfop_id
                            --| Retorno do Imposto
                            , est_item_solic_calc          => vt_item_solic_calc
                            , est_row_imp_itemsc           => vt_row_imp_itemsc
                            );
               --
            elsif vt_tipo_imposto.cd = '7'  -- Imposto de importação
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 9;
               --
               vt_row_imp_itemsc.itemsoliccalc_id  := vt_item_solic_calc.id;
               vt_row_imp_itemsc.tipoimp_id        := rec.tipoimposto_id;
               vt_row_imp_itemsc.dm_tipo           := 0; -- Normal
               vt_row_imp_itemsc.vl_base_calc      := nvl(vt_item_solic_calc.vl_bc_ii,0);
               vt_row_imp_itemsc.vl_imp_trib       := nvl(vt_item_solic_calc.vl_ii,0);
               --
            else
               --
               vn_fase := 10;
               --
               if nvl(vn_qtde_imp,0) <= 0 then
                  --
                  -- Informação de Imposto parametrizado Errado
                  vv_mensagem_log := 'Para o Nro. Item ' || vt_item_solic_calc.nro_item || ', Item ' || vt_item_solic_calc.cod_item || '-' || vt_item_solic_calc.descr_item || ', '
                                     || ' imposto ' || vt_tipo_imposto.cd || '-' || vt_tipo_imposto.descr || ' configurado de forma incorreta, no CFOP ' || rec_itemsc.cfop
                                     || ' e Natureza de Operação ' || rec.cod_nat || '-' || rec.descr_nat;
                  --
                  pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                                   , ev_mensagem                  => vv_mensagem_log
                                   , ev_resumo                    => vv_mensagem_log
                                   , en_tipo_log                  => info_calc_fiscal
                                   , en_referencia_id             => en_soliccalc_id
                                   , ev_obj_referencia            => 'SOLIC_CALC'
                                   , en_empresa_id                => en_empresa_id
                                   );
                  --
               end if;
               --
            end if;
            --
         else
            --
            vn_fase := 11;
            -- Retenções
            if vt_tipo_imposto.cd in ( 6 ) -- 6-ISS
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 11.1;
               --
               pkb_calc_iss ( en_soliccalc_id              => en_soliccalc_id
                            , en_empresa_id                => en_empresa_id
                            , en_cnae_id                   => en_cnae_id
                            , en_regtrib_id                => en_regtrib_id
                            , en_formatrib_id              => en_formatrib_id
                            , en_natoper_id                => en_natoper_id
                            , en_dm_ind_emit               => en_dm_ind_emit
                            , en_dm_ind_oper               => en_dm_ind_oper
                            , ed_dt_emiss                  => ed_dt_emiss
                            , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                            , en_dm_trib_imposto           => rec.dm_trib_imposto
                            , en_dm_tipo_calc              => rec.dm_tipo_calc
                            , en_obsfiscal_id              => rec.obsfiscal_id
                            , ev_obs_compl                 => rec.obs_compl
                            --| Item
                            , en_item_id                   => vn_item_id
                            , en_cfop_id                   => vn_cfop_id
                            --| Retorno do Imposto
                            , est_item_solic_calc          => vt_item_solic_calc
                            , est_row_imp_itemsc           => vt_row_imp_itemsc
                            );
               --
            elsif vt_tipo_imposto.cd in ( 4, 5, 11, 12, 13 ) -- 4-PIS, 5-COFINS, 11-CSLL, 12-IRRF, 13-INSS
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 12;
               --
               pkb_calc_retido ( en_soliccalc_id              => en_soliccalc_id
                               , en_empresa_id                => en_empresa_id
                               , en_cnae_id                   => en_cnae_id
                               , en_regtrib_id                => en_regtrib_id
                               , en_formatrib_id              => en_formatrib_id
                               , en_natoper_id                => en_natoper_id
                               , en_dm_ind_emit               => en_dm_ind_emit
                               , en_dm_ind_oper               => en_dm_ind_oper
                               , ed_dt_emiss                  => ed_dt_emiss
                               , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                               , en_dm_trib_imposto           => rec.dm_trib_imposto
                               , en_dm_tipo_calc              => rec.dm_tipo_calc
                               , en_obsfiscal_id              => rec.obsfiscal_id
                               , ev_obs_compl                 => rec.obs_compl
                               , en_dm_reg_trib_part          => en_dm_reg_trib_part
                               --| Item
                               , en_item_id                   => vn_item_id
                               , en_cfop_id                   => vn_cfop_id
                               , en_tipoimposto_id            => rec.tipoimposto_id
                               --| Retorno do Imposto
                               , est_item_solic_calc          => vt_item_solic_calc
                               , est_row_imp_itemsc           => vt_row_imp_itemsc
                               );
               --
            else
               --
               vn_fase := 29;
               --
               if nvl(vn_qtde_imp,0) <= 0 then
                  --
                  -- Informação de retnção parametrizado Errado
                  vv_mensagem_log := 'Para o Nro. Item ' || vt_item_solic_calc.nro_item || ', Item ' || vt_item_solic_calc.cod_item || '-' || vt_item_solic_calc.descr_item || ', '
                                     || ' retenção ' || vt_tipo_imposto.cd || '-' || vt_tipo_imposto.descr || ' configurado de forma incorreta, no CFOP ' || rec_itemsc.cfop
                                     || ' e Natureza de Operação ' || rec.cod_nat || '-' || rec.descr_nat;
                  --
                  pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                                   , ev_mensagem                  => vv_mensagem_log
                                   , ev_resumo                    => vv_mensagem_log
                                   , en_tipo_log                  => info_calc_fiscal
                                   , en_referencia_id             => en_soliccalc_id
                                   , ev_obj_referencia            => 'SOLIC_CALC'
                                   , en_empresa_id                => en_empresa_id
                                   );
                  --
               end if;
               --
            end if;
            --
         end if;
         --
         vn_fase := 30;
         --
         if nvl(vt_row_imp_itemsc.itemsoliccalc_id,0) > 0 then
            --
            if nvl(vt_row_imp_itemsc.codst_id,0) > 0 then
               vv_cod_st := pk_csf.fkg_Cod_ST_cod ( en_id_st => vt_row_imp_itemsc.codst_id );
            else
               vv_cod_st := null;
            end if;
            --
            --| Armazena o impostos comforme API
            pkb_integr_imp_itemsc ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                                  , est_row_imp_itemsc            => vt_row_imp_itemsc
                                  , en_empresa_id                 => en_empresa_id
                                  , en_soliccalc_id               => en_soliccalc_id
                                  , en_tipoimp_cd                 => vt_tipo_imposto.cd
                                  , ev_cod_st                     => vv_cod_st    
                                  , ev_descr_item                 => '(Origem chamada do cálculo: Parâmetros da NOP(Fase:'||vn_fase||'))-' || 'Nro. Item ' || vt_item_solic_calc.nro_item || ', Item ' || vt_item_solic_calc.cod_item || '-' || vt_item_solic_calc.descr_item
                                  );
            --
         end if;
         --
         vn_qtde_natoper_calc := nvl(vn_qtde_natoper_calc,0) + 1;
         vv_cod_nat   := rec.cod_nat;
         vv_descr_nat := rec.descr_nat;
         --
         sb_calculou := true;
         --
      end loop;
      --
      vn_fase := 31;
      --
      if vn_trocou_cfop = 1 then
         --
         vn_fase := 31.1;
         --
         if nvl(vt_row_imp_itemsc.itemsoliccalc_id,0) > 0 then
            --
            if nvl(vt_row_imp_itemsc.codst_id,0) > 0 then
               vv_cod_st := pk_csf.fkg_Cod_ST_cod ( en_id_st => vt_row_imp_itemsc.codst_id );
            else
               vv_cod_st := null;
            end if;
            --
            --| Armazena o impostos comforme API
            pkb_integr_imp_itemsc ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                                  , est_row_imp_itemsc            => vt_row_imp_itemsc
                                  , en_empresa_id                 => en_empresa_id
                                  , en_soliccalc_id               => en_soliccalc_id
                                  , en_tipoimp_cd                 => vt_tipo_imposto.cd
                                  , ev_cod_st                     => vv_cod_st  
                                  , ev_descr_item                 => '(Origem chamada do cálculo: Parâmetros da NOP(Fase:'||vn_fase||'))-'|| 'Nro. Item ' || vt_item_solic_calc.nro_item || ', Item ' || vt_item_solic_calc.cod_item || '-' || vt_item_solic_calc.descr_item
                                  );
            --
         end if;
         --
         goto inicio;
         --
      end if;
      --
      vn_fase := 31.2;
      --
      if nvl(vn_qtde_natoper_calc,0) <= 0
         and trim(vv_cod_nat) is not null
         then
         --
         vv_mensagem_log := 'Para o Nro. Item ' || vt_item_solic_calc.nro_item || ', Item ' || vt_item_solic_calc.cod_item || '-' || vt_item_solic_calc.descr_item || ', '
                            || 'CFOP ' || rec_itemsc.cfop || ' e Natureza de Operação ' || vv_cod_nat || '-' || vv_descr_nat || ' não tem imposto/retenção configurado.';
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => info_calc_fiscal
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
      end if;
      --
      vn_fase := 31.3;
      -- Calcula a Partilha de ICMS  
      pkb_calc_part_icms ( en_soliccalc_id              => en_soliccalc_id
                         , en_empresa_id                => en_empresa_id
                         , en_dm_ind_emit               => en_dm_ind_emit
                         , ed_dt_emiss                  => ed_dt_emiss
                         , en_dm_cons_final             => en_dm_cons_final
                         , en_estado_id_orig            => vn_estado_id_orig
                         , en_estado_id_dest            => en_estado_id_dest
                         --| Item
                         , en_orig                      => vn_orig					 
                         , en_item_id                   => vn_item_id
                         , en_ncm_id                    => vn_ncm_id
                         , en_cfop_id                   => vn_cfop_id
                         , et_item_solic_calc           => vt_item_solic_calc
                         );
      --
      vn_fase := 32;
      --
      -- Procedimento de retornar valores trabalhados de impostos do Item da Solicitação de Calculo
      pkb_retorna_vlr_imp_itemsc ( en_soliccalc_id              => en_soliccalc_id
                                 , est_item_solic_calc          => vt_item_solic_calc
                                 );
      --
      vn_fase := 99;
      --| Atualiza dadoa do item, caso necessário (Exemplo IPI)
      update item_solic_calc set cfop                 = vt_item_solic_calc.cfop
                               , vl_bruto             = vt_item_solic_calc.vl_bruto
                               , vl_tot_trib_item     = vt_item_solic_calc.vl_tot_trib_item
                               , dm_nat_oper_serv     = vt_item_solic_calc.dm_nat_oper_serv
                               , dm_mod_base_calc     = vt_item_solic_calc.dm_mod_base_calc
                               , dm_mod_base_calc_st  = vt_item_solic_calc.dm_mod_base_calc_st
                               , dm_mot_des_icms      = vt_item_solic_calc.dm_mot_des_icms
                               , cl_enq_ipi           = vt_item_solic_calc.cl_enq_ipi
                               , cod_selo_ipi         = vt_item_solic_calc.cod_selo_ipi
                               , qtde_selo_ipi        = vt_item_solic_calc.qtde_selo_ipi
                               , cod_enq_ipi          = vt_item_solic_calc.cod_enq_ipi
                               , vl_operacao          = vt_item_solic_calc.vl_operacao
                               , cod_trib_municipio   = vv_cod_trib_municipio--vt_item_solic_calc.cod_trib_municipio
       where id = vt_item_solic_calc.id;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_nat_oper fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_nat_oper;

-------------------------------------------------------------------------------------------------------

--| Procedimento recupera parâmetros da Calculadora Fiscal pelo CFOP x Tipo Imposto
procedure pkb_recup_param_cfop_tpimp ( en_soliccalc_id              in solic_calc.id%type
                                     , en_empresa_id                in empresa.id%type
                                     , en_cnae_id                   in cnae.id%type
                                     , en_inctrib_id                in inc_trib.id%type
                                     , en_regtrib_id                in reg_trib.id%type
                                     , en_formatrib_id              in forma_trib.id%type
                                     , en_natoper_id                in nat_oper.id%type
                                     , en_dm_ind_emit               in solic_calc.dm_ind_emit%type
                                     , en_dm_ind_oper               in solic_calc.dm_ind_oper%type
                                     , ed_dt_emiss                  in solic_calc.dt_emiss%type
                                     , ev_cpf_cnpj_part             in varchar2
                                     , en_estado_id_dest            in estado.id%type
                                     , en_dm_tipo_part              in solic_calc.dm_tipo_part%type
                                     , en_dm_cons_final             in solic_calc.dm_cons_final%type
                                     , en_dm_ind_ie_part            in solic_calc.dm_ind_ie_part%type
                                     , en_dm_reg_trib_part          in solic_calc.dm_reg_trib_part%type
                                     , en_dm_part_tem_suframa       in solic_calc.dm_part_tem_suframa%type
                                     , en_dm_ind_ativ_part          in solic_calc.dm_ind_ativ_part%type
                                     , en_dm_mot_des_icms_part      in solic_calc.dm_mot_des_icms_part%type
                                     , en_calcular_icms_st          in number
                                     , sb_calculou                  out boolean
                                     )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_log_generico_calcfiscal   dbms_sql.number_table;
   --
   vn_estado_id_orig            estado.id%type;
   vn_cfop_cd                   cfop.cd%type;
   vt_tipo_imposto              tipo_imposto%rowtype;
   vv_cod_st                    cod_st.cod_st%type;
   vn_cfop_id                   cfop.id%type;
   vt_item_solic_calc           item_solic_calc%rowtype;
   vt_row_imp_itemsc            imp_itemsc%rowtype;
   --
   vn_item_id                   item.id%type;
   vn_cest_id                   cest.id%type;
   vn_ncm_id                    ncm.id%type;
   vn_extipi_id                 ex_tipi.id%type;
   --
   vn_trocou_cfop               number := 0;
   vn_qtde_imp                  number;
   --
   vn_qtde_cfop_calc            number;
   vn_orig                      item.dm_orig_merc%type;   
   vv_cod_trib_municipio        item_solic_calc.cod_trib_municipio%type;
   --
   cursor c_itemsc is
   select isc.*
     from item_solic_calc   isc
    where isc.soliccalc_id = en_soliccalc_id
    order by isc.nro_item;
   --
   cursor c_param ( enc_cfop_id  cfop.id%type ) is
   select cti.*
     from cfop_tipoimp  cti
    where 1 = 1
      and cti.cfop_id     = enc_cfop_id
    order by cti.dm_tipo_calc, cti.prioridade;
   --
begin
   --
   vn_fase := 1;
   --
   sb_calculou := false;
   --
   vt_log_generico_calcfiscal.delete;
   --
   begin
      --
      select cid.estado_id
        into vn_estado_id_orig
        from empresa e
           , pessoa p
           , cidade cid
       where e.id = en_empresa_id
         and p.id = e.pessoa_id
         and cid.id = p.cidade_id;
      --
   exception
      when others then
         vn_estado_id_orig := null;
   end;
   --
   for rec_itemsc in c_itemsc loop
      exit when c_itemsc%notfound or (c_itemsc%notfound) is null;
      --
      vn_fase := 1.1;
      --
      vn_cfop_id := pk_csf.fkg_cfop_id ( en_cd => rec_itemsc.cfop );
      --
      vt_item_solic_calc := null;
      vt_item_solic_calc := rec_itemsc;
      --
      vv_cod_trib_municipio := rec_itemsc.cod_trib_municipio;
      --
      vt_item_solic_calc.vl_bruto := round( nvl(vt_item_solic_calc.qtde,0) * nvl(vt_item_solic_calc.vl_unit,0),2 );
      --
      vn_fase := 1.2;
      --
      vn_item_id := pk_csf.fkg_Item_id_conf_empr ( en_empresa_id  => en_empresa_id
                                                 , ev_cod_item    => trim(rec_itemsc.cod_item)
                                                 );
      --
      vn_fase := 1.21;
      --	  
      begin
         select it.dm_orig_merc
           into vn_orig
           from item it
          where it.id = vn_item_id;		  
      exception
         when others then
            vn_orig := null;		 
      end;
	  --
      vn_fase := 1.3;
      --
      vn_ncm_id := pk_csf.fkg_Ncm_id ( ev_cod_ncm => trim(rec_itemsc.cod_ncm));
      --
      vn_fase := 1.4;
      --
      vn_extipi_id := pk_csf.fkg_ex_tipi_id ( ev_cod_ex_tipi  => trim(rec_itemsc.extipi)
                                            , en_ncm_id       => vn_ncm_id
                                            );
      --
      vn_fase := 1.5;
      --
      vn_cest_id := pk_csf.fkg_id_cest_cd ( ev_cest_cd => trim(rec_itemsc.cod_cest) );
      --
      vn_fase := 1.9;
      --
      vn_qtde_cfop_calc := 0;
      -- Quando existir TROCA DE CFOP, pelo ICMS, pesquisa Novamente os parâmetros do CFOP
      <<inicio>>
      --
      for rec in c_param(vn_cfop_id) loop
         exit when c_param%notfound or (c_param%notfound) is null;
         --
         vn_fase := 2;
         --
         vn_cfop_cd := pk_csf.fkg_cfop_cd ( en_cfop_id => rec.cfop_id );
         --
         vn_fase := 2.1;
         --
         begin
            --
            select * into vt_tipo_imposto
              from tipo_imposto
             where id = rec.tipoimposto_id;
            --
         exception
            when others then
               vt_tipo_imposto := null;
         end;
         --
         vn_fase := 2.2;
         --
         if nvl(rec.codst_id,0) > 0 then
            vv_cod_st := pk_csf.fkg_Cod_ST_cod ( en_id_st => rec.codst_id );
         else
            vv_cod_st := null;
         end if;
         --
         vn_fase := 2.3;
         --
         vt_row_imp_itemsc := null;
         --
         vn_qtde_imp := 0;
         --
         begin
            --
            select count(1) 
              into vn_qtde_imp
              from imp_itemsc
             where 1 = 1
               and itemsoliccalc_id  = rec_itemsc.id
               and tipoimp_id        = rec.tipoimposto_id
               and dm_tipo           = rec.dm_tipo_calc;
            --
         exception
            when others then
               vn_qtde_imp := 0;
         end;
         --
         vn_fase := 2.4;
         --
         if rec.dm_tipo_calc = 0 then -- Normal
            --
            vn_fase := 3;
            --
            if vt_tipo_imposto.cd = '1' --  ICMS
               then
               --
               vn_fase := 4;
               --
               if vn_trocou_cfop = 0 then
                  -- 
                  pkb_calc_icms ( en_soliccalc_id              => en_soliccalc_id
                                , en_empresa_id                => en_empresa_id
                                , en_cnae_id                   => en_cnae_id
                                , en_regtrib_id                => en_regtrib_id
                                , en_formatrib_id              => en_formatrib_id
                                , en_natoper_id                => en_natoper_id
                                , en_dm_ind_emit               => en_dm_ind_emit
                                , en_dm_ind_oper               => en_dm_ind_oper
                                , ed_dt_emiss                  => ed_dt_emiss
                                , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                , en_estado_id_orig            => vn_estado_id_orig
                                , en_estado_id_dest            => en_estado_id_dest
                                , en_dm_tipo_part              => en_dm_tipo_part
                                , en_dm_cons_final             => en_dm_cons_final
                                , en_dm_ind_ie_part            => en_dm_ind_ie_part
                                , en_dm_reg_trib_part          => en_dm_reg_trib_part
                                , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                                , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                                , en_dm_mot_des_icms_part      => en_dm_mot_des_icms_part
                                , en_dm_trib_imposto           => rec.dm_trib_imposto
                                , en_codst_id                  => rec.codst_id
                                , en_obsfiscal_id              => rec.obsfiscal_id
                                , ev_obs_compl                 => rec.obs_compl
                                --| Item
                                , en_item_id                   => vn_item_id
                                , en_ncm_id                    => vn_ncm_id
                                , en_extipi_id                 => vn_extipi_id
                                , en_cfop_id                   => vn_cfop_id
                                , est_item_solic_calc          => vt_item_solic_calc
                                , est_row_imp_itemsc           => vt_row_imp_itemsc
                                );
                  --
                  -- verifica se houve troca de CFOP
                  if vt_item_solic_calc.cfop <> rec_itemsc.cfop then
                     --
                     vn_cfop_id := pk_csf.fkg_cfop_id ( en_cd => vt_item_solic_calc.cfop );
                     --
                     vn_trocou_cfop := 1; -- 1-Sim
                     sb_calculou := true;
                     --
                     exit;
                     --
                  end if;
                  --
               else
                  --
                  vn_trocou_cfop := 0;
                  --
               end if;
               --
            elsif vt_tipo_imposto.cd = '2'  -- ICMS-ST
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 5;
               -- Procedimento de calculo do ICMS-ST
               -- 
               pkb_calc_icmsst ( en_soliccalc_id              => en_soliccalc_id
                               , en_empresa_id                => en_empresa_id
                               , en_cnae_id                   => en_cnae_id
                               , en_regtrib_id                => en_regtrib_id
                               , en_formatrib_id              => en_formatrib_id
                               , en_natoper_id                => en_natoper_id
                               , en_dm_ind_emit               => en_dm_ind_emit
                               , en_dm_ind_oper               => en_dm_ind_oper
                               , ed_dt_emiss                  => ed_dt_emiss
                               , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                               , en_estado_id_orig            => vn_estado_id_orig
                               , en_estado_id_dest            => en_estado_id_dest
                               , en_dm_tipo_part              => en_dm_tipo_part
                               , en_dm_cons_final             => en_dm_cons_final
                               , en_dm_ind_ie_part            => en_dm_ind_ie_part
                               , en_dm_reg_trib_part          => en_dm_reg_trib_part
                               , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                               , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                               , en_dm_mot_des_icms_part      => en_dm_mot_des_icms_part
                               , en_dm_trib_imposto           => rec.dm_trib_imposto
                               , en_calcular_icms_st          => en_calcular_icms_st
                               , en_codst_id                  => rec.codst_id
                               , en_obsfiscal_id              => rec.obsfiscal_id
                               , ev_obs_compl                 => rec.obs_compl
                               --| Item
                               , en_item_id                   => vn_item_id
                               , en_cest_id                   => vn_cest_id
                               , en_ncm_id                    => vn_ncm_id
                               , en_extipi_id                 => vn_extipi_id
                               , en_cfop_id                   => vn_cfop_id
                               --| Retorno do Imposto
                               , est_item_solic_calc          => vt_item_solic_calc
                               , est_row_imp_itemsc           => vt_row_imp_itemsc
                               );
               --
            elsif vt_tipo_imposto.cd in ('3', '4', '5') -- IPI, PIS e COFINS
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 6;
               --
               -- 
               pkb_calc_aliq_tipoimp_ncm ( en_soliccalc_id              => en_soliccalc_id
                                         , en_empresa_id                => en_empresa_id
                                         , en_cnae_id                   => en_cnae_id
                                         , en_inctrib_id                => en_inctrib_id
                                         , en_regtrib_id                => en_regtrib_id
                                         , en_formatrib_id              => en_formatrib_id
                                         , en_natoper_id                => en_natoper_id
                                         , en_dm_ind_emit               => en_dm_ind_emit
                                         , en_dm_ind_oper               => en_dm_ind_oper
                                         , ed_dt_emiss                  => ed_dt_emiss
                                         , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                                         , en_estado_id_orig            => vn_estado_id_orig
                                         , en_estado_id_dest            => en_estado_id_dest
                                         , en_dm_tipo_part              => en_dm_tipo_part
                                         , en_dm_cons_final             => en_dm_cons_final
                                         , en_dm_ind_ie_part            => en_dm_ind_ie_part
                                         , en_dm_reg_trib_part          => en_dm_reg_trib_part
                                         , en_dm_part_tem_suframa       => en_dm_part_tem_suframa
                                         , en_dm_ind_ativ_part          => en_dm_ind_ativ_part
                                         , en_dm_mot_des_icms_part      => en_dm_mot_des_icms_part
                                         , en_dm_trib_imposto           => rec.dm_trib_imposto
                                         , en_codst_id                  => rec.codst_id
                                         , en_obsfiscal_id              => rec.obsfiscal_id
                                         , ev_obs_compl                 => rec.obs_compl
                                         --| Item
                                         , en_item_id                   => vn_item_id
                                         , en_ncm_id                    => vn_ncm_id
                                         , en_extipi_id                 => vn_extipi_id
                                         , en_cfop_id                   => vn_cfop_id
                                         , en_tipoimposto_id            => rec.tipoimposto_id
                                         --| Retorno do Imposto
                                         , est_item_solic_calc          => vt_item_solic_calc
                                         , est_row_imp_itemsc           => vt_row_imp_itemsc
                                         );
               --
            elsif vt_tipo_imposto.cd = '6'  -- ISS
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 8;
               --
               --
               pkb_calc_iss ( en_soliccalc_id              => en_soliccalc_id
                            , en_empresa_id                => en_empresa_id
                            , en_cnae_id                   => en_cnae_id
                            , en_regtrib_id                => en_regtrib_id
                            , en_formatrib_id              => en_formatrib_id
                            , en_natoper_id                => en_natoper_id
                            , en_dm_ind_emit               => en_dm_ind_emit
                            , en_dm_ind_oper               => en_dm_ind_oper
                            , ed_dt_emiss                  => ed_dt_emiss
                            , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                            , en_dm_trib_imposto           => rec.dm_trib_imposto
                            , en_dm_tipo_calc              => rec.dm_tipo_calc
                            , en_obsfiscal_id              => rec.obsfiscal_id
                            , ev_obs_compl                 => rec.obs_compl
                            --| Item
                            , en_item_id                   => vn_item_id
                            , en_cfop_id                   => vn_cfop_id
                            --| Retorno do Imposto
                            , est_item_solic_calc          => vt_item_solic_calc
                            , est_row_imp_itemsc           => vt_row_imp_itemsc
                            );
               --
            elsif vt_tipo_imposto.cd = '7'  -- Imposto de importação
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 9;
               --
               vt_row_imp_itemsc.itemsoliccalc_id  := vt_item_solic_calc.id;
               vt_row_imp_itemsc.tipoimp_id        := rec.tipoimposto_id;
               vt_row_imp_itemsc.dm_tipo           := 0; -- Normal
               vt_row_imp_itemsc.vl_base_calc      := nvl(vt_item_solic_calc.vl_bc_ii,0);
               vt_row_imp_itemsc.vl_imp_trib       := nvl(vt_item_solic_calc.vl_ii,0);
               --
            else
               --
               vn_fase := 10;
               --
               if nvl(vn_qtde_imp,0) <= 0 then
                  --
                  -- Informação de Imposto parametrizado Errado
                  vv_mensagem_log := 'Para o Nro. Item ' || vt_item_solic_calc.nro_item || ', Item ' || vt_item_solic_calc.cod_item || '-' || vt_item_solic_calc.descr_item || ', '
                                     || ' imposto ' || vt_tipo_imposto.cd || '-' || vt_tipo_imposto.descr || ' configurado de forma incorreta, no CFOP ' || rec_itemsc.cfop;
                  --
                  pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                                   , ev_mensagem                  => vv_mensagem_log
                                   , ev_resumo                    => vv_mensagem_log
                                   , en_tipo_log                  => info_calc_fiscal
                                   , en_referencia_id             => en_soliccalc_id
                                   , ev_obj_referencia            => 'SOLIC_CALC'
                                   , en_empresa_id                => en_empresa_id
                                   );
                  --
               end if;
               --
            end if;
            --
         else
            --
            vn_fase := 11;
            -- Retenções
            if vt_tipo_imposto.cd in ( 6 ) -- 6-ISS
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 11.1;
               --
               pkb_calc_iss ( en_soliccalc_id              => en_soliccalc_id
                            , en_empresa_id                => en_empresa_id
                            , en_cnae_id                   => en_cnae_id
                            , en_regtrib_id                => en_regtrib_id
                            , en_formatrib_id              => en_formatrib_id
                            , en_natoper_id                => en_natoper_id
                            , en_dm_ind_emit               => en_dm_ind_emit
                            , en_dm_ind_oper               => en_dm_ind_oper
                            , ed_dt_emiss                  => ed_dt_emiss
                            , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                            , en_dm_trib_imposto           => rec.dm_trib_imposto
                            , en_dm_tipo_calc              => rec.dm_tipo_calc
                            , en_obsfiscal_id              => rec.obsfiscal_id
                            , ev_obs_compl                 => rec.obs_compl
                            --| Item
                            , en_item_id                   => vn_item_id
                            , en_cfop_id                   => vn_cfop_id
                            --| Retorno do Imposto
                            , est_item_solic_calc          => vt_item_solic_calc
                            , est_row_imp_itemsc           => vt_row_imp_itemsc
                            );
               --
            elsif vt_tipo_imposto.cd in ( 4, 5, 11, 12, 13 ) -- 4-PIS, 5-COFINS, 11-CSLL, 12-IRRF, 13-INSS
               and nvl(vn_qtde_imp,0) <= 0
               then
               --
               vn_fase := 12;
               --
               --
               pkb_calc_retido ( en_soliccalc_id              => en_soliccalc_id
                               , en_empresa_id                => en_empresa_id
                               , en_cnae_id                   => en_cnae_id
                               , en_regtrib_id                => en_regtrib_id
                               , en_formatrib_id              => en_formatrib_id
                               , en_natoper_id                => en_natoper_id
                               , en_dm_ind_emit               => en_dm_ind_emit
                               , en_dm_ind_oper               => en_dm_ind_oper
                               , ed_dt_emiss                  => ed_dt_emiss
                               , ev_cpf_cnpj_part             => ev_cpf_cnpj_part
                               , en_dm_trib_imposto           => rec.dm_trib_imposto
                               , en_dm_tipo_calc              => rec.dm_tipo_calc
                               , en_obsfiscal_id              => rec.obsfiscal_id
                               , ev_obs_compl                 => rec.obs_compl
                               , en_dm_reg_trib_part          => en_dm_reg_trib_part
                               --| Item
                               , en_item_id                   => vn_item_id
                               , en_cfop_id                   => vn_cfop_id
                               , en_tipoimposto_id            => rec.tipoimposto_id
                               --| Retorno do Imposto
                               , est_item_solic_calc          => vt_item_solic_calc
                               , est_row_imp_itemsc           => vt_row_imp_itemsc
                               );
               --
            else
               --
               vn_fase := 29;
               --
               if nvl(vn_qtde_imp,0) <= 0 then
                  -- Informação de retnção parametrizado Errado
                  vv_mensagem_log := 'Para o Nro. Item ' || vt_item_solic_calc.nro_item || ', Item ' || vt_item_solic_calc.cod_item || '-' || vt_item_solic_calc.descr_item || ', '
                                     || ' retenção ' || vt_tipo_imposto.cd || '-' || vt_tipo_imposto.descr || ' configurado de forma incorreta, no CFOP ' || rec_itemsc.cfop;
                  --
                  pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                                   , ev_mensagem                  => vv_mensagem_log
                                   , ev_resumo                    => vv_mensagem_log
                                   , en_tipo_log                  => info_calc_fiscal
                                   , en_referencia_id             => en_soliccalc_id
                                   , ev_obj_referencia            => 'SOLIC_CALC'
                                   , en_empresa_id                => en_empresa_id
                                   );
                  --
               end if;
               --
            end if;
            --
         end if;
         --
         vn_fase := 30;
         --
         if nvl(vt_row_imp_itemsc.itemsoliccalc_id,0) > 0 then
            --
            if nvl(vt_row_imp_itemsc.codst_id,0) > 0 then
               vv_cod_st := pk_csf.fkg_Cod_ST_cod ( en_id_st => vt_row_imp_itemsc.codst_id );
            else
               vv_cod_st := null;
            end if;
            --| Armazena o impostos comforme API
            pkb_integr_imp_itemsc ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                                  , est_row_imp_itemsc            => vt_row_imp_itemsc
                                  , en_empresa_id                 => en_empresa_id
                                  , en_soliccalc_id               => en_soliccalc_id
                                  , en_tipoimp_cd                 => vt_tipo_imposto.cd
                                  , ev_cod_st                     => vv_cod_st
                                  , ev_descr_item                 => '(Origem chamada do cálculo: Parâmetros do CFOP e Tipo de Imposto(Fase:'||vn_fase||'))-'|| 'Nro. Item ' || vt_item_solic_calc.nro_item || ', Item ' || vt_item_solic_calc.cod_item || '-' || vt_item_solic_calc.descr_item
                                  );
            --
         end if;
         --
         vn_qtde_cfop_calc := nvl(vn_qtde_cfop_calc,0) + 1;
         --
         sb_calculou := true;
         --
      end loop;
      --
      vn_fase := 31;
      --
      if vn_trocou_cfop = 1 then
         --
         vn_fase := 31.1;
         --
         if nvl(vt_row_imp_itemsc.itemsoliccalc_id,0) > 0 then
            --
            if nvl(vt_row_imp_itemsc.codst_id,0) > 0 then
               vv_cod_st := pk_csf.fkg_Cod_ST_cod ( en_id_st => vt_row_imp_itemsc.codst_id );
            else
               vv_cod_st := null;
            end if;
            --| Armazena o impostos comforme API
            pkb_integr_imp_itemsc ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                                  , est_row_imp_itemsc            => vt_row_imp_itemsc
                                  , en_empresa_id                 => en_empresa_id
                                  , en_soliccalc_id               => en_soliccalc_id
                                  , en_tipoimp_cd                 => vt_tipo_imposto.cd
                                  , ev_cod_st                     => vv_cod_st
                                  , ev_descr_item                 => '(Origem chamada do cálculo: Parâmetros do CFOP e Tipo de Imposto(Fase:'||vn_fase||'))-'|| 'Nro. Item ' || vt_item_solic_calc.nro_item || ', Item ' || vt_item_solic_calc.cod_item || '-' || vt_item_solic_calc.descr_item
                                  );
            --
         end if;
         --
         goto inicio;
         --
      end if;
      --
      vn_fase := 31.2;
      --
      if nvl(vn_qtde_cfop_calc,0) <= 0 then
         --
         vv_mensagem_log := 'Para o Nro. Item ' || vt_item_solic_calc.nro_item || ', Item ' || vt_item_solic_calc.cod_item || '-' || vt_item_solic_calc.descr_item || ', '
                            || 'CFOP ' || rec_itemsc.cfop || ' não tem imposto/retenção configurado em nível global.';
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => info_calc_fiscal
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => en_empresa_id
                          );
         --
      end if;
      --
      vn_fase := 31.3;
      -- Calcula a Partilha de ICMS
      pkb_calc_part_icms ( en_soliccalc_id              => en_soliccalc_id
                         , en_empresa_id                => en_empresa_id
                         , en_dm_ind_emit               => en_dm_ind_emit
                         , ed_dt_emiss                  => ed_dt_emiss
                         , en_dm_cons_final             => en_dm_cons_final
                         , en_estado_id_orig            => vn_estado_id_orig
                         , en_estado_id_dest            => en_estado_id_dest
                         --| Item
                         , en_orig                      => vn_orig						 
                         , en_item_id                   => vn_item_id
                         , en_ncm_id                    => vn_ncm_id
                         , en_cfop_id                   => vn_cfop_id
                         , et_item_solic_calc           => vt_item_solic_calc
                         );
      --
      vn_fase := 32;
      --
      -- Procedimento de retornar valores trabalhados de impostos do Item da Solicitação de Calculo
      pkb_retorna_vlr_imp_itemsc ( en_soliccalc_id              => en_soliccalc_id
                                 , est_item_solic_calc          => vt_item_solic_calc
                                 );
      --
      vn_fase := 99;
      --| Atualiza dadoa do item, caso necessário (Exemplo IPI)
      update item_solic_calc set cfop                 = vt_item_solic_calc.cfop
                               , vl_bruto             = vt_item_solic_calc.vl_bruto
                               , vl_tot_trib_item     = vt_item_solic_calc.vl_tot_trib_item
                               , dm_nat_oper_serv     = vt_item_solic_calc.dm_nat_oper_serv
                               , dm_mod_base_calc     = vt_item_solic_calc.dm_mod_base_calc
                               , dm_mod_base_calc_st  = vt_item_solic_calc.dm_mod_base_calc_st
                               , dm_mot_des_icms      = vt_item_solic_calc.dm_mot_des_icms
                               , cl_enq_ipi           = vt_item_solic_calc.cl_enq_ipi
                               , cod_selo_ipi         = vt_item_solic_calc.cod_selo_ipi
                               , qtde_selo_ipi        = vt_item_solic_calc.qtde_selo_ipi
                               , cod_enq_ipi          = vt_item_solic_calc.cod_enq_ipi
                               , vl_operacao          = vt_item_solic_calc.vl_operacao
                               , cod_trib_municipio   = vv_cod_trib_municipio--vt_item_solic_calc.cod_trib_municipio
       where id = vt_item_solic_calc.id;
      --
   end loop;
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cfop_tpimp fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => en_empresa_id
                       );
      --
end pkb_recup_param_cfop_tpimp;

-------------------------------------------------------------------------------------------------------

--| Procedimento de executar o calculo de impostos
procedure pkb_executar_solic_calc ( en_soliccalc_id            in  solic_calc.id%type
                                  )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vt_row_solic_calc            solic_calc%rowtype;
   --
   vn_cnae_id                   cnae.id%type;
   vn_inctrib_id                inc_trib.id%type;
   vn_regtrib_id                reg_trib.id%type;
   vn_formatrib_id              forma_trib.id%type;
   --
   vb_calculou                  boolean := false;
   --
begin
   --
   vn_fase := 1;
   --
   vt_row_solic_calc := null;
   --
   vn_fase := 1.1;
   --
   pkb_recup_dados_solic_calc ( en_soliccalc_id            => en_soliccalc_id
                              , st_row_solic_calc          => vt_row_solic_calc
                              );
   --
   vn_fase := 1.2;
   --
   if nvl(vt_row_solic_calc.id,0) > 0
      and nvl(vt_row_solic_calc.dm_situacao,0) in (0, 1)
      then
      --
      vn_fase := 2;
      --
      -- Procedimento para retornar o Regime Tributário da Empresa e Forma de Tributação
      pk_csf.pkb_empresa_forma_trib ( en_empresa_id     => vt_row_solic_calc.empresa_id
                                    , ed_dt_ref         => vt_row_solic_calc.dt_emiss
                                    , sn_regtrib_id     => vn_regtrib_id
                                    , sn_formatrib_id   => vn_formatrib_id
                                    );
      --
      vn_fase := 2.1;
      --
      vn_cnae_id := pk_csf.fkg_empresa_cnae_primario ( en_empresa_id     => vt_row_solic_calc.empresa_id
                                                     , ed_dt_ref         => vt_row_solic_calc.dt_emiss
                                                     );
      --
      vn_fase := 2.2;
      --
      vn_inctrib_id := pk_csf.fkg_empresa_inc_trib ( en_empresa_id     => vt_row_solic_calc.empresa_id
                                                   , ed_dt_ref         => vt_row_solic_calc.dt_emiss
                                                   );
      --
      vn_fase := 2.3;
      --
      --| exclui os dados que são gerados, caso já existir
      pkb_excluir_dados_calc ( en_soliccalc_id => vt_row_solic_calc.id );
      --
      vn_fase := 2.4;
      --
      if nvl(vn_inctrib_id,0) <= 0 then
         --
         vv_mensagem_log := 'Não definido o parâmetro de "Incidencia Tributaria (Pis/Cofin)" para a Empresa.';
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_validacao
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => vt_row_solic_calc.empresa_id
                          );
         --
      end if;
      --
      vn_fase := 3;
      -- Recupera pela Natureza da Operação
      pkb_recup_param_nat_oper ( en_soliccalc_id              => vt_row_solic_calc.id
                               , en_empresa_id                => vt_row_solic_calc.empresa_id
                               , en_cnae_id                   => vn_cnae_id
                               , en_inctrib_id                => vn_inctrib_id
                               , en_regtrib_id                => vn_regtrib_id
                               , en_formatrib_id              => vn_formatrib_id
                               , en_natoper_id                => vt_row_solic_calc.natoper_id
                               , en_dm_ind_emit               => vt_row_solic_calc.dm_ind_emit
                               , en_dm_ind_oper               => vt_row_solic_calc.dm_ind_oper
                               , ed_dt_emiss                  => vt_row_solic_calc.dt_emiss
                               , ev_cpf_cnpj_part             => vt_row_solic_calc.cpf_cnpj_part
                               , en_estado_id_dest            => vt_row_solic_calc.estado_id
                               , en_dm_tipo_part              => vt_row_solic_calc.dm_tipo_part
                               , en_dm_cons_final             => vt_row_solic_calc.dm_cons_final
                               , en_dm_ind_ie_part            => vt_row_solic_calc.dm_ind_ie_part
                               , en_dm_reg_trib_part          => vt_row_solic_calc.dm_reg_trib_part
                               , en_dm_part_tem_suframa       => vt_row_solic_calc.dm_part_tem_suframa
                               , en_dm_ind_ativ_part          => vt_row_solic_calc.dm_ind_ativ_part
                               , en_dm_mot_des_icms_part      => vt_row_solic_calc.dm_mot_des_icms_part
                               , en_calcular_icms_st          => vt_row_solic_calc.dm_calc_icmsst_part
                               , sb_calculou                  => vb_calculou
                               );
      --
      if not vb_calculou then -- se não calculo, tem no nivel CFOP Global
         --
         vn_fase := 4;
         -- Recupera pelos parâmetros Globais
         pkb_recup_param_cfop_tpimp ( en_soliccalc_id              => vt_row_solic_calc.id
                                    , en_empresa_id                => vt_row_solic_calc.empresa_id
                                    , en_cnae_id                   => vn_cnae_id
                                    , en_inctrib_id                => vn_inctrib_id
                                    , en_regtrib_id                => vn_regtrib_id
                                    , en_formatrib_id              => vn_formatrib_id
                                    , en_natoper_id                => vt_row_solic_calc.natoper_id
                                    , en_dm_ind_emit               => vt_row_solic_calc.dm_ind_emit
                                    , en_dm_ind_oper               => vt_row_solic_calc.dm_ind_oper
                                    , ed_dt_emiss                  => vt_row_solic_calc.dt_emiss
                                    , ev_cpf_cnpj_part             => vt_row_solic_calc.cpf_cnpj_part
                                    , en_estado_id_dest            => vt_row_solic_calc.estado_id
                                    , en_dm_tipo_part              => vt_row_solic_calc.dm_tipo_part
                                    , en_dm_cons_final             => vt_row_solic_calc.dm_cons_final
                                    , en_dm_ind_ie_part            => vt_row_solic_calc.dm_ind_ie_part
                                    , en_dm_reg_trib_part          => vt_row_solic_calc.dm_reg_trib_part
                                    , en_dm_part_tem_suframa       => vt_row_solic_calc.dm_part_tem_suframa
                                    , en_dm_ind_ativ_part          => vt_row_solic_calc.dm_ind_ativ_part
                                    , en_dm_mot_des_icms_part      => vt_row_solic_calc.dm_mot_des_icms_part
                                    , en_calcular_icms_st          => vt_row_solic_calc.dm_calc_icmsst_part
                                    , sb_calculou                  => vb_calculou
                                    );
         --
      end if;
      --
      vn_fase := 5;
      --
      if vb_calculou then
         -- Gera os valores totais
         pkb_criar_total_sc ( en_soliccalc_id            => vt_row_solic_calc.id
                            , en_regtrib_cd              => pk_csf.fkg_cd_reg_trib_id ( en_regtrib_id => vn_regtrib_id )
                            , en_empresa_id              => vt_row_solic_calc.empresa_id
                            );
         --
      else
         --
         vv_mensagem_log := 'Não encontrado parâmetros para a Solicitação de Calculo.';
         --
         pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_validacao
                          , en_referencia_id             => en_soliccalc_id
                          , ev_obj_referencia            => 'SOLIC_CALC'
                          , en_empresa_id                => vt_row_solic_calc.empresa_id
                          );
         --
      end if;
      --
      vn_fase := 99;
      --
      update solic_calc set dm_situacao = 2 -- Calculado
       where id = vt_row_solic_calc.id;
      --
      commit;
      --
   else
      --
      vv_mensagem_log := 'Situação não permite que seja realizado o cálculo novamente.';
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => info_calc_fiscal
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => vt_row_solic_calc.empresa_id
                       );
      --
   end if;
   --
exception
   when others then
      --
      update solic_calc set dm_situacao = 3 -- ERRO
       where id = vt_row_solic_calc.id;
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_executar_solic_calc fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => en_soliccalc_id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => vt_row_solic_calc.empresa_id
                       );
      --
      commit;
      --
end pkb_executar_solic_calc;

-------------------------------------------------------------------------------------------------------

--| Procedimento de solicitar o cálculo de um item sincrono
procedure pkb_solicitar_calc_item ( ev_multorg_cd              in mult_org.cd%type
                                  , ev_multorg_hash            in mult_org.hash%type
                                  , ev_cpf_cnpj_empresa        in varchar2
                                  , ev_cod_nat                 in nat_oper.cod_nat%type
                                  , en_dm_ind_emit             in solic_calc.dm_ind_emit%type
                                  , en_dm_ind_oper             in solic_calc.dm_ind_oper%type
                                  , ev_cod_mod                 in mod_fiscal.cod_mod%type
                                  , ev_serie                   in solic_calc.serie%type
                                  , en_numero                  in solic_calc.numero%type
                                  , ed_dt_emiss                in solic_calc.dt_emiss%type
                                  , ev_cpf_cnpj_part           in varchar2
                                  , ev_sigla_estado_part       in estado.sigla_estado%type
                                  , en_dm_tipo_part            in solic_calc.dm_tipo_part%type
                                  , en_dm_cons_final           in solic_calc.dm_cons_final%type
                                  , en_dm_ind_ie_part          in solic_calc.dm_ind_ie_part%type
                                  , en_dm_reg_trib_part        in solic_calc.dm_reg_trib_part%type
                                  , en_dm_part_tem_suframa     in solic_calc.dm_part_tem_suframa%type
                                  , en_dm_ind_ativ_part        in solic_calc.dm_ind_ativ_part%type
                                  , en_dm_mot_des_icms_part    in solic_calc.dm_mot_des_icms_part%type
                                  , en_dm_calc_icmsst_part     in solic_calc.dm_calc_icmsst_part%type
                                  --| Item
                                  , ev_cod_item                in item_solic_calc.cod_item%type
                                  , ev_descr_item              in item_solic_calc.descr_item%type
                                  , ev_cod_ncm                 in item_solic_calc.cod_ncm%type
                                  , ev_extipi                  in item_solic_calc.extipi%type
                                  , ev_cod_cest                in item_solic_calc.cod_cest%type
                                  , en_dm_orig_merc            in item_solic_calc.dm_orig_merc%type
                                  , en_cfop                    in item_solic_calc.cfop%type
                                  , ev_cd_lista_serv           in item_solic_calc.cd_lista_serv%type
                                  , en_dm_tipo_item            in item_solic_calc.dm_tipo_item%type
                                  , ev_unid_med                in item_solic_calc.unid_med%type
                                  , en_qtde                    in item_solic_calc.qtde%type
                                  , en_vl_unit                 in item_solic_calc.vl_unit%type
                                  , en_vl_bruto                in item_solic_calc.vl_bruto%type
                                  , en_vl_desc                 in item_solic_calc.vl_desc%type
                                  , en_vl_frete                in item_solic_calc.vl_frete%type
                                  , en_vl_seguro               in item_solic_calc.vl_seguro%type
                                  , en_vl_outro                in item_solic_calc.vl_outro%type
                                  , en_dm_ind_tot              in item_solic_calc.dm_ind_tot%type
                                  , en_vl_bc_ii                in item_solic_calc.vl_bc_ii%type
                                  , en_vl_desp_adu             in item_solic_calc.vl_desp_adu%type
                                  , en_vl_ii                   in item_solic_calc.vl_ii%type
                                  , en_vl_iof                  in item_solic_calc.vl_iof%type
                                  , en_ibge_cid_serv_prest     in item_solic_calc.ibge_cid_serv_prest%type
                                  , en_vl_desc_incondicionado  in item_solic_calc.vl_desc_incondicionado%type
                                  , en_vl_desc_condicionado    in item_solic_calc.vl_desc_condicionado%type
                                  , en_vl_deducao              in item_solic_calc.vl_deducao%type
                                  , en_vl_outra_ret            in item_solic_calc.vl_outra_ret%type
                                  , sn_soliccalc_id            out solic_calc.id%type
                                  )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_multorg_id                mult_org.id%type;
   --
   vt_row_solic_calc            solic_calc%rowtype;
   vt_row_item_solic_calc       item_solic_calc%rowtype;
   vt_log_generico_calcfiscal   dbms_sql.number_table;
   --
begin
   --
   vn_fase := 1;
   --
   vt_row_solic_calc       := null;
   vt_row_item_solic_calc  := null;
   vt_log_generico_calcfiscal.delete;
   --
   vn_fase := 1.1;
   --
   vn_multorg_id := pk_csf.fkg_multorg_id ( ev_multorg_cd    => ev_multorg_cd
                                          , ev_multorg_hash  => ev_multorg_hash
                                          );
   --
   vn_fase := 1.2;
   --
   if nvl(vn_multorg_id,0) > 0 then
      --
      vn_fase := 1.3;
      --
      vt_row_solic_calc.empresa_id := pk_csf.fkg_empresa_id_cpf_cnpj ( en_multorg_id  => vn_multorg_id
                                                                     , ev_cpf_cnpj    => ev_cpf_cnpj_empresa
                                                                     );
      --
      vn_fase := 1.4;
      --
      if nvl(vt_row_solic_calc.empresa_id,0) > 0 then
         --
         vn_fase := 2;
         --
         vt_row_solic_calc.dm_ind_emit           := en_dm_ind_emit;
         vt_row_solic_calc.dm_ind_oper           := en_dm_ind_oper;
         vt_row_solic_calc.serie                 := ev_serie;
         vt_row_solic_calc.numero                := en_numero;
         vt_row_solic_calc.dt_emiss              := ed_dt_emiss;
         vt_row_solic_calc.cpf_cnpj_part         := ev_cpf_cnpj_part;
         vt_row_solic_calc.dm_tipo_part          := en_dm_tipo_part;
         vt_row_solic_calc.dm_cons_final         := en_dm_cons_final;
         vt_row_solic_calc.dm_ind_ie_part        := en_dm_ind_ie_part;
         vt_row_solic_calc.dm_reg_trib_part      := en_dm_reg_trib_part;
         vt_row_solic_calc.dm_part_tem_suframa   := en_dm_part_tem_suframa;
         vt_row_solic_calc.dm_ind_ativ_part      := en_dm_ind_ativ_part;
         vt_row_solic_calc.dm_mot_des_icms_part  := en_dm_mot_des_icms_part;
         vt_row_solic_calc.dm_calc_icmsst_part   := en_dm_calc_icmsst_part;
         --
         vn_fase := 2.1;
         --
         -- Procedimento que faz a validação e gravação dos dados na tabela SOLIC_CALC
         pkb_integr_solic_calc ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                               , est_row_solic_calc            => vt_row_solic_calc
                               , ev_cod_nat                    => ev_cod_nat
                               , ev_cod_mod                    => ev_cod_mod
                               , ev_sigla_estado_part          => ev_sigla_estado_part
                               );
         --
         vn_fase := 2.2;
         --
         if nvl(vt_row_solic_calc.id,0) > 0 then
            --
            vn_fase := 3;
            --
            vt_row_item_solic_calc.soliccalc_id           := vt_row_solic_calc.id;
            vt_row_item_solic_calc.nro_item               := 1;
            vt_row_item_solic_calc.cod_item               := ev_cod_item;
            vt_row_item_solic_calc.descr_item             := ev_descr_item;
            vt_row_item_solic_calc.cod_ncm                := ev_cod_ncm;
            vt_row_item_solic_calc.extipi                 := ev_extipi;
            vt_row_item_solic_calc.cod_cest               := ev_cod_cest;
            vt_row_item_solic_calc.dm_orig_merc           := en_dm_orig_merc;
            vt_row_item_solic_calc.cfop                   := en_cfop;
            vt_row_item_solic_calc.cd_lista_serv          := ev_cd_lista_serv;
            vt_row_item_solic_calc.dm_tipo_item           := en_dm_tipo_item;
            vt_row_item_solic_calc.unid_med               := ev_unid_med;
            vt_row_item_solic_calc.qtde                   := en_qtde;
            vt_row_item_solic_calc.vl_unit                := en_vl_unit;
            vt_row_item_solic_calc.vl_bruto               := en_vl_bruto;
            vt_row_item_solic_calc.vl_desc                := en_vl_desc;
            vt_row_item_solic_calc.vl_frete               := en_vl_frete;
            vt_row_item_solic_calc.vl_seguro              := en_vl_seguro;
            vt_row_item_solic_calc.vl_outro               := en_vl_outro;
            vt_row_item_solic_calc.dm_ind_tot             := en_dm_ind_tot;
            vt_row_item_solic_calc.vl_bc_ii               := en_vl_bc_ii;
            vt_row_item_solic_calc.vl_desp_adu            := en_vl_desp_adu;
            vt_row_item_solic_calc.vl_ii                  := en_vl_ii;
            vt_row_item_solic_calc.vl_iof                 := en_vl_iof;
            vt_row_item_solic_calc.ibge_cid_serv_prest    := en_ibge_cid_serv_prest;
            vt_row_item_solic_calc.vl_desc_incondicionado := en_vl_desc_incondicionado;
            vt_row_item_solic_calc.vl_desc_condicionado   := en_vl_desc_condicionado;
            vt_row_item_solic_calc.vl_deducao             := en_vl_deducao;
            vt_row_item_solic_calc.vl_outra_ret           := en_vl_outra_ret;
            --
            vn_fase := 3.1;
            --
            pkb_integr_item_solic_calc ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                                       , est_row_item_solic_calc       => vt_row_item_solic_calc
                                       , en_empresa_id                 => vt_row_solic_calc.empresa_id
                                       );
            --
            vn_fase := 3.2;
            --
            if nvl(vt_log_generico_calcfiscal.count,0) > 0 then
               --
               vt_row_solic_calc.dm_situacao := 3; -- Erro;
               --
               update solic_calc set dm_situacao = vt_row_solic_calc.dm_situacao
                where id = vt_row_solic_calc.id;
               --
            end if;
            --
            commit;
            --
            vn_fase := 3.3;
            --
            if nvl(vt_row_solic_calc.dm_situacao,0) in (0, 1) then
               --
               vn_fase := 4;
               --| Chama procedimento da Calculadora Fiscal
               pkb_executar_solic_calc ( en_soliccalc_id => vt_row_solic_calc.id );
               --
               -- Retona o ID da Solicitação de Calculo criado para consulta dos dados
               sn_soliccalc_id := vt_row_solic_calc.id;
               --
            end if;
            --
         end if; -- Teste da Solicitação de Calculo
         --
      end if; -- Teste da Empresa
      --
   end if; -- Teste da MultOrg
   --
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_solicitar_calc_item fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico ( sn_loggenericocalcfiscal_id  => vn_loggenericocalcfiscal_id
                       , ev_mensagem                  => vv_mensagem_log
                       , ev_resumo                    => vv_mensagem_log
                       , en_tipo_log                  => erro_de_sistema
                       , en_referencia_id             => vt_row_solic_calc.id
                       , ev_obj_referencia            => 'SOLIC_CALC'
                       , en_empresa_id                => vt_row_solic_calc.empresa_id
                       );
      --
      raise_application_error ( -20101, vv_mensagem_log );
      --
end pkb_solicitar_calc_item;

-------------------------------------------------------------------------------------------------------

end pk_csf_api_calc_fiscal;
/
