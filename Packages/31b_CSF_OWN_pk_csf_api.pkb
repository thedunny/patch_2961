create or replace package body csf_own.pk_csf_api is

---------------------------------------------------------------
-- Corpo do pacote de integração de notas fiscais para o CSF -- 
---------------------------------------------------------------

-----------------------------------------------------------------------------------------------------
-- Checa se a NOTA_FISCAL_MDE já existe registrado e vinculado a NFe
----------------------------------------------------------------------------------------------------
FUNCTION FKG_CK_NOTA_FISCAL_MDE_REGISTR(en_notafiscal_id       in nota_fiscal_mde.notafiscal_id%type,
                                        en_tipoeventosefaz_id  in nota_fiscal_mde.tipoeventosefaz_id%type)
return boolean is
  vn_aux             number;
  vn_loggenerico_id  log_generico_nf.id%type;
begin
   select distinct 1 -- idx: NOTA_FISCAL_MDE_IDX5
     into vn_aux
   from NOTA_FISCAL_MDE nf
   where nf.notafiscal_id      = en_notafiscal_id
     and nf.tipoeventosefaz_id = en_tipoeventosefaz_id
     --ADEQUAÇÃO ARMANDO 15/09/2020
     --and nf.dm_situacao        = 3     -- Processado
     --and nf.cod_msg            = 135
     ;  -- Evento registrado e vinculado a NF-e
   --
   -- Grava o Log na nota informando que houve tentativa de novas inclusões do MDE
   vn_loggenerico_id := null;
   gv_mensagem_log   := 'Esta Nota Fiscal já encontra-se registrada no MDE';
   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                       , ev_mensagem         => gv_mensagem_log
                       , ev_resumo           => gv_mensagem_log
                       , en_tipo_log         => informacao
                       , en_referencia_id    => en_notafiscal_id
                       , ev_obj_referencia   => gv_obj_referencia );
   --
   return true;
   --
exception
  when others then
    return false;   
end FKG_CK_NOTA_FISCAL_MDE_REGISTR;
--
-- Função interna para gerar o número randomico para o cnf_nfe
function FKG_GERA_CNF_NFE_RAND (en_empresa_id in empresa.id%type
                              , en_nro_nf     in nota_fiscal.nro_nf%type) 
return number is
   vn_fase    number    := 0;
   vn_parte_1 number(3) := 0;
   vn_parte_2 number(6) := 0;
   vn_param   number(9) := 0;
   vn_retorno number    := 0;
BEGIN
   --
   vn_fase := 1;
   --
   -- Caso a empresa tenha mais de 3 caracteres, considerar somente as 3 ultimas --
   vn_parte_1 := case when length(en_empresa_id) > 3 
                    then substr(en_empresa_id, -3, length(en_empresa_id))
                    else en_empresa_id 
                 end;   
   --
   vn_fase := 2;
   --
   -- Caso o número da nota tenha mais de 6 caracteres, considerar somente os 6 ultimos --
   vn_parte_2 := case when length(en_nro_nf) > 6 
                    then substr(en_nro_nf, -6, length(en_nro_nf))
                    else en_nro_nf 
                 end;
   --
   vn_fase := 3;
   --
   -- Concatenar as partes --
   vn_param   := to_number ( vn_parte_1 || vn_parte_2 );
   --
   vn_fase := 4;
   --
   -- Chama a função para gerar o número randômico --
   vn_retorno := pk_csf.fkg_numero_aleatorio(en_num => vn_param,
                                             en_ini => 10000000,
                                             en_fim => 99999999); 
   --
   return(vn_retorno);
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_gera_cnf_nfe_rand fase('||vn_fase||'):'||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END FKG_GERA_CNF_NFE_RAND;
--
--------------------------------------------------------------------------------------------------------------------------------
-- Função retorna o ID do XML do conhecimento de transporte através da chave de acesso, e retornar se o mesmo estiver cancelado
--------------------------------------------------------------------------------------------------------------------------------
FUNCTION fkg_xml_nota_fiscal_chv ( EV_NRO_CHAVE_NFE IN NOTA_FISCAL.NRO_CHAVE_NFE%TYPE )
         RETURN BOOLEAN
IS
   --
   vn_notafiscal_id nota_fiscal.id%type;
   --
BEGIN
   --
   begin
      select max(nf.id)
        into vn_notafiscal_id
        from nota_fiscal nf
       where nf.nro_chave_nfe   = ev_nro_chave_nfe
         and nf.dm_arm_nfe_terc = 1;
   exception
      when others then
         vn_notafiscal_id := 0;
   end;
   --
   if nvl(vn_notafiscal_id,0) <> 0 then
      --
      begin
         select nf.id
           into vn_notafiscal_id
           from nota_fiscal nf
          where nf.id         = vn_notafiscal_id
            and nf.dm_st_proc = 7; -- cancelada
      exception
         when others then
            vn_notafiscal_id := 0;
      end;
      --
   end if;
   --
   if nvl(vn_notafiscal_id,0) = 0 then
      return false;
   else
      return true;
   end if;
   --
EXCEPTION
   when others then
      return false;
END FKG_XML_NOTA_FISCAL_CHV;
--
---------------------------------------------------------------------------------------------------------
-- Função valida Nota Fiscal MDE com flag de armazenamento XML
---------------------------------------------------------------------------------------------------------
function FKG_NOTA_MDE_ARMAZ( en_notafiscal_id      in       nota_fiscal.id%type
                           , en_dm_arm_nfe_terc    in       nota_fiscal.dm_arm_nfe_terc%type ) 
return number
is
   --
   vn_fase                    number := 0;
   vn_loggenerico_id          log_generico_nf.id%type;
   vn_qtde                    number := 0;
   vv_cabec_log               log_generico_nf.mensagem%type;
   vn_dm_ind_emit             nota_fiscal.dm_ind_emit%type;
   --                            
BEGIN
   --
   -- 0 - Não pode excluir / 1 - Pode excluir
   vn_fase := 1;
   --
   -- Verifica se existe nota fiscal MDE 
   if nvl(en_notafiscal_id,0) > 0 then
      begin
         select n.dm_ind_emit
           into vn_dm_ind_emit
           from nota_fiscal n 
          where n.id = en_notafiscal_id;		   
      exception
         when others then
		   vn_dm_ind_emit := null; 
      end;
	  --
      begin
         select count(1)
           into vn_qtde
           from nota_fiscal_mde m
          where m.notafiscal_id = en_notafiscal_id;
      exception
         when others then
            vn_qtde := 0;
      end;
   end if;   
   -- 
   vn_fase := 2;
   --  
   --Armazena NFe de Terceiro: 0-Nao; 1-Sim
   if nvl(vn_qtde,0) > 0 then -- Nota MDE existe
      if en_dm_arm_nfe_terc = 0 then -- Não armazena NFe de Terceiro
         --
         vn_fase := 3;
         --
         return 1;
      else  
         if nvl(vn_dm_ind_emit,0) = 1 then    -- Terceiros
            return 1;
         else			   
            --
            vn_fase := 4;
            --
            vv_cabec_log := 'Exclusão de Nota Fiscal X Nota Fiscal MDE';
            gv_mensagem_log := 'Existe Nota Fiscal Manifesto do Destinatario (MDE) e flag Armaz "marcado" impossivel excluir, verifique.';
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => vv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --           
            return 0;
         end if;
      end if;   
   else -- Nota MDE não existe
      return 1;      
   end if;
exception   
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_nota_mde_armaz fase('||vn_fase||'): '||sqlerrm;
      --
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
end FKG_NOTA_MDE_ARMAZ;
--
-----------------------------------------------------------------------------------------------------
-- Checa se existe consulta pendente ou consulta no dia de chave de acesso nfe
-----------------------------------------------------------------------------------------------------
FUNCTION FKG_CHECA_CHAVE_ENVIO_PENDENTE(ev_nro_chave_nfe nota_fiscal.nro_chave_nfe%type) 
return number is
   --
   vn_retorno number := 0;
   --
begin
   -- Primeiro passo, checa se existe consulta no mesmo dia
   begin
      select distinct 1
        into vn_retorno
      from csf_cons_sit t
      where t.chnfe                 = ev_nro_chave_nfe
        and trunc(t.dt_hr_cons_sit) = trunc(sysdate); 
   exception
      when others then
         vn_retorno := 0;
   end;
   --
   -- Se não achou pendencia de consulta no dia, checa se existe consulta pendente de envio
   if vn_retorno = 0 then
      --
      begin
         select distinct 1
           into vn_retorno
         from csf_cons_sit t
         where t.chnfe       = ev_nro_chave_nfe
           and t.dm_situacao = 1; 
      exception
         when others then
            vn_retorno := 0;
      end;
      --
   end if;
   --
   return vn_retorno;
   --
exception
  when others then
     null;
end;
--
----------------------------------------------------------------------------
-- Função para verificar se existe registro de erro gravados no Log Generico
----------------------------------------------------------------------------
function fkg_ver_erro_log_generico_nf( en_nota_fiscal_id in nota_fiscal.id%type )
         return number
is
   --
   vn_qtde      number := 0;
   --
begin
   --
   select count(1)
     into vn_qtde
     from log_generico_nf ln,
          csf_tipo_log tc
    where ln.referencia_id = en_nota_fiscal_id
      and tc.id = ln.csftipolog_id -- #73332
      and tc.dm_grau_sev   = 1;  -- erro
   --
   if nvl(vn_qtde,0) > 0 then
      return 1;  -- erro
   else
      return 0;  -- só aviso/informação
   end if;
   --
exception
   when no_data_found then
      return 0;
   when others then
      raise_application_error(-20101, 'Problemas em fkg_ver_erro_log_generico_nf. Erro = '||sqlerrm);
end fkg_ver_erro_log_generico_nf;
--
---------------------------------------------------------------------------------
-- Procedimento para Validar ou Validar e Criar NRO_CHAVE_NFE da Nota Fiscal   --
---------------------------------------------------------------------------------
procedure pkb_valida_cria_nro_chave_nfe( est_log_generico_nf  in out nocopy dbms_sql.number_table
                                       , en_notafiscal_id     in nota_fiscal.id%type
                                       , ev_nro_chave_nfe_new in nota_fiscal.nro_chave_nfe%type
                                       --, en_cria_chave        in number -- 0 - Não / 1- Sim
                                       , ev_rotina_orig       in varchar2
                                       ) is
   --
   -- Parâmetros de entrada
   -- =====================
   -- en_notafiscal_id     => ID da tabela nota_fiscal
   -- ev_nro_chave_nfe_new => Valor do nro_chave_nfe que a rotina que chamou a validação quer inserir ou atualizar
   -- en_cria_chave        => Identifica se a rotina que chamou a validação quer criar uma NOVA chave, se estiver c erro
   -- ev_rotina_orig       => O nome da rotina que está chamando a procedure de validação da chave (Exemplo: 'pk_csf_api.pkb_consistem_nf')
   --
   vn_fase                    number := 0;
   vn_loggenerico_id          log_generico_nf.id%type;
   vn_dig_verif_chave         nota_fiscal.dig_verif_chave%type;
   vv_cod_mod                 mod_fiscal.cod_mod%type;
   vn_inforcompdctofiscal_id  infor_comp_dcto_fiscal.id%type;
   vn_codconsitemcont_id      cod_cons_item_cont.id%type;
   vn_dm_ind_emit             nota_fiscal.dm_ind_emit%type;
   vn_uf_ibge_emit            nota_fiscal.uf_ibge_emit%type;
   vv_cnpj_empr               pessoa.cod_part%type;
   vd_dt_emiss                nota_fiscal.dt_emiss%type;
   vv_serie                   nota_fiscal.serie%type;
   vn_dm_forma_emiss          nota_fiscal.dm_forma_emiss%type;
   vv_cnpj_pessoa             pessoa.cod_part%type;
   vv_nro_chave_nfe_new       nota_fiscal.nro_chave_nfe%type;
   vv_nro_chave_nfe_old       nota_fiscal.nro_chave_nfe%type;
   vn_empresa_id              nota_fiscal.empresa_id%type;
   vn_cnf_nfe                 nota_fiscal.cnf_nfe%type;
   vn_qtde_erro_chave         number := 0;
   vv_cd_sitdocto             sit_docto.cd%type;
   vn_dm_legado               nota_fiscal.dm_legado%type;
   vn_nro_nf                  nota_fiscal.nro_nf%type;  
   vn_dm_nro_chave_nfe_orig   nota_fiscal.dm_nro_chave_nfe_orig%type;
   vn_uf_ibge_NFEmit          nota_fiscal_emit.uf%type;  --#71235
   --
begin
   --
   vn_fase := 1;
   --
   -- Busca dados da nota fiscal
   begin
      select nf.dm_ind_emit
           , nf.uf_ibge_emit
           , pk_csf.fkg_cnpj_ou_cpf_empresa(nf.empresa_id)
           , nf.empresa_id
           , nf.dt_emiss
           , nf.serie
           , nf.dm_forma_emiss
           , pk_csf.fkg_cnpjcpf_pessoa_id ( nf.pessoa_id )
           , sd.cd
           , nf.dm_legado
           , nf.nro_chave_nfe
           , cod_mod
           , nro_nf
           , dm_nro_chave_nfe_orig
        into vn_dm_ind_emit
           , vn_uf_ibge_emit
           , vv_cnpj_empr
           , vn_empresa_id
           , vd_dt_emiss
           , vv_serie
           , vn_dm_forma_emiss
           , vv_cnpj_pessoa
           , vv_cd_sitdocto
           , vn_dm_legado
           , vv_nro_chave_nfe_old
           , vv_cod_mod
           , vn_nro_nf
           , vn_dm_nro_chave_nfe_orig
        from nota_fiscal nf
           , sit_docto   sd
           , mod_fiscal  md
       where nf.id = en_notafiscal_id
         and sd.id = nf.sitdocto_id
         and md.id = nf.modfiscal_id;
   exception
      when others then
         vn_dm_ind_emit       := null;
         vn_uf_ibge_emit      := null;
         vv_cnpj_empr         := null;
         vd_dt_emiss          := null;
         vv_serie             := null;
         vn_dm_forma_emiss    := null;
         vv_cnpj_pessoa       := null;
         vv_cd_sitdocto       := null;
         vn_dm_legado         := null;
         vv_nro_chave_nfe_old := null;
         vv_cod_mod           := null;
         vn_nro_nf            := null;  
         vn_dm_nro_chave_nfe_orig := null;
   end;
   --
   --#71235 Recupera o UF da tabela NOTA_FISCAL_EMIT 
   Begin
     select nfe.uf
       into vn_uf_ibge_NFEmit
       from nota_fiscal_emit nfe
      where nfe.notafiscal_id = en_notafiscal_id ;
   exception
     when others then
       vn_uf_ibge_NFEmit := null ;
   end;
   -- se encontrou a uf, atribui na variavel, senao mantem a uf da tabela nota_fiscal ja atribuida.
   if vn_uf_ibge_NFEmit is not null then
     --
     vn_uf_ibge_emit := pk_csf.fkg_Estado_ibge_sigla(vn_uf_ibge_NFEmit);
     --
   end if;
   --
   vn_fase := 2;
   --
   if nvl(en_notafiscal_id,0)          = 0 and
      nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 3;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para validação do NRO_CHAVE_NFE da Nota Fiscal '||
                         '(Processo que gerou msg: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). '||
                         '(Processo que chamou a validação: '||ev_rotina_orig||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Carrega o valor da chave da nota que foi enviado como parâmetro para uma variável NEW
   -- o valor enviado sendo nulo verifica se já existe valor para o campo executado pelo select
   vv_nro_chave_nfe_new := nvl(ev_nro_chave_nfe_new,vv_nro_chave_nfe_old);
   --
   if trim(vv_nro_chave_nfe_new) is not null then
      --
      vn_fase := 5;
      --
      -- Valida tamanho da Chave de Acesso
      if length(trim(vv_nro_chave_nfe_new)) <> 44 then
         --
         vn_fase := 6;
         --
         gv_mensagem_log := 'Chave de acesso informada está inválida, o tamanho está inválido (Chave = '||trim(vv_nro_chave_nfe_new)||'). '||
                            '(Processo que gerou msg: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). '||
                            '(Processo que chamou a validação: '||ev_rotina_orig||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 7;
      --
      -- Busca dígito verificador
      vn_dig_verif_chave := pk_csf.fkg_mod_11 ( ev_codigo => substr(trim(vv_nro_chave_nfe_new), 1,43) );
      --
      vn_fase := 8;
      --
      if nvl(vn_dig_verif_chave,0) <> to_number( substr(trim(vv_nro_chave_nfe_new), 44,1) ) then
         --
         vn_fase := 9;
         --
         gv_mensagem_log := 'Chave de acesso informada está inválida (Chave = '||trim(vv_nro_chave_nfe_new)|| '), pois o dígito verificador ('||
                            substr(trim(vv_nro_chave_nfe_new), 44,1)||') está diferente do "dígito verificador calculado" ('||vn_dig_verif_chave||'). '||
                            '(Processo que gerou msg: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). '||
                            '(Processo que chamou a validação: '||ev_rotina_orig||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 10;
      --
      if lpad(vn_nro_nf, 9, '0') <> to_number(substr(trim(vv_nro_chave_nfe_new), 26, 9)) then
         --
         vn_fase := 11;
         --
         gv_mensagem_log := 'Chave de acesso informada está inválida, o número da Nota Fiscal não confere com o número da Nota Fiscal encontrado na Chave de acesso informada (Nro da NF = '||
                            vn_nro_nf||' Chave = '||trim(vv_nro_chave_nfe_new)||' Nro da NF na chave = '||substr(trim(vv_nro_chave_nfe_new), 26, 9)||'). '||
                            '(Processo que gerou msg: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). '||
                            '(Processo que chamou a validação: '||ev_rotina_orig||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 12;
      --
      -- Valida Chave de Acesso somente para notas de emissão própria e que não são legado
      if vn_dm_ind_emit       = 0 and
         nvl(vn_dm_legado, 0) = 0 and
         vv_cod_mod           in ('55', '65') then
         --
         vn_fase := 13;
         --
         -- Valida se a informação da Chave está correta
         pkb_valida_chave_acesso ( est_log_generico_nf  => est_log_generico_nf
                                 , ev_nro_chave_nfe     => vv_nro_chave_nfe_new
                                 , en_uf_ibge           => vn_uf_ibge_emit
                                 , ev_cnpj              => vv_cnpj_empr
                                 , ed_dt_emiss          => vd_dt_emiss
                                 , ev_cod_mod           => vv_cod_mod
                                 , en_serie             => vv_serie
                                 , en_nro_nf            => vn_nro_nf
                                 , en_dm_forma_emiss    => vn_dm_forma_emiss
                                 , en_dm_nro_chave_nfe_orig => vn_dm_nro_chave_nfe_orig
                                 , sn_cnf_nfe           => vn_cnf_nfe
                                 , sn_dig_verif_chave   => vn_dig_verif_chave
                                 , sn_qtde_erro         => vn_qtde_erro_chave );
            --
            vn_fase := 14;
            --
            -- Se houver erro de chave e a chave foi criada pela Compliance uma nova chave será criada
            -- Isso pode ocorrer qdo uma nota é integrada como contingência e depois muda o DM_FORMA_EMISS para normal e a 
            -- chave precisará ser alterada tb
            if nvl(vn_qtde_erro_chave,0) > 0 and nvl(vn_dm_nro_chave_nfe_orig,0) = 1 then
               --
               vn_fase := 14.1;
               --
               vn_cnf_nfe := FKG_GERA_CNF_NFE_RAND(vn_empresa_id, vn_nro_nf);
               --
               -- Cria chave para a Nota Fiscal
               pkb_integr_nfchave_refer ( est_log_generico_nf      => est_log_generico_nf
                                        , en_empresa_id            => vn_empresa_id
                                        , en_notafiscal_id         => en_notafiscal_id
                                        , ed_dt_emiss              => vd_dt_emiss
                                        , ev_cod_mod               => vv_cod_mod
                                        , en_serie                 => vv_serie
                                        , en_nro_nf                => vn_nro_nf
                                        , en_dm_forma_emiss        => vn_dm_forma_emiss
                                        , esn_cnf_nfe              => vn_cnf_nfe
                                        , sn_dig_verif_chave       => vn_dig_verif_chave
                                        , sv_nro_chave_nfe         => vv_nro_chave_nfe_new
                                        , sn_dm_nro_chave_nfe_orig => vn_dm_nro_chave_nfe_orig );
               --
               vn_fase := 14.2;
               -- Grava o log de criação de uma nova chave
               gv_mensagem_log := 'Gerada uma nova Chave de Acesso para a Nota Fiscal porque estava com erro de validação. '||
                                  '(Processo que gerou msg: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). '||
                                  '(Processo que chamou a validação: '||ev_rotina_orig||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => informacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               --
            elsif nvl(vn_qtde_erro_chave,0) > 0 then
               --
               vn_fase := 14.3;
               gv_mensagem_log := 'Chave de acesso informada está inválida (chave = '||trim(vv_nro_chave_nfe_new)||'). '||
                                  '(Processo que gerou msg: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). '||
                                  '(Processo que chamou a validação: '||ev_rotina_orig||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
      elsif vn_dm_ind_emit = 1 and
            trim(vv_cod_mod) in ('55', '65') then
         --
         vn_fase := 15;
         -- Valida chave de acesso de Terceiro
         --
         if nvl(trim(vv_cd_sitdocto), '00') <> '08' then
            --
            -- Se a Chave de Acesso já existe para a Nota Fiscal, então valida a informação
            pkb_valida_chave_acesso ( est_log_generico_nf  => est_log_generico_nf
                                    , ev_nro_chave_nfe     => vv_nro_chave_nfe_new
                                    , en_uf_ibge           => vn_uf_ibge_emit
                                    , ev_cnpj              => vv_cnpj_pessoa
                                    , ed_dt_emiss          => vd_dt_emiss
                                    , ev_cod_mod           => vv_cod_mod
                                    , en_serie             => vv_serie
                                    , en_nro_nf            => vn_nro_nf
                                    , en_dm_forma_emiss    => null
                                    , en_dm_nro_chave_nfe_orig => vn_dm_nro_chave_nfe_orig
                                    , sn_cnf_nfe           => vn_cnf_nfe
                                    , sn_dig_verif_chave   => vn_dig_verif_chave
                                    , sn_qtde_erro         => vn_qtde_erro_chave );
            --
            vn_fase := 16;
            --
            if nvl(vn_qtde_erro_chave,0) > 0 then
               --
               gv_mensagem_log := 'Chave de acesso de terceiro está inválida (chave = '||trim(vv_nro_chave_nfe_new)||'). '||
                                  '(Processo que gerou msg: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). '||
                                  '(Processo que chamou a validação: '||ev_rotina_orig||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
         vn_fase := 17;
         -- Validação NF-e: A chave da NF-e já existe com XML armazenado e está cancelada
         if trim(vv_cod_mod) = '55' and
            fkg_xml_nota_fiscal_chv ( ev_nro_chave_nfe => trim(vv_nro_chave_nfe_new) ) = true then
            --
            vn_fase := 18;
            --
            gv_mensagem_log := 'Através da Chave da NF-e de terceiro, foi encontrado XML armazenado com situação de Cancelamento (chave = '||
                                trim(vv_nro_chave_nfe_new)||'). '||
                               '(Processo que gerou msg: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). '||
                               '(Processo que chamou a validação: '||ev_rotina_orig||').';
            --
            vn_loggenerico_id := null;
            --
            pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                           , ev_mensagem         => gv_cabec_log
                                           , ev_resumo           => gv_mensagem_log
                                           , en_tipo_log         => erro_de_validacao
                                           , en_referencia_id    => gn_referencia_id
                                           , ev_obj_referencia   => gv_obj_referencia );
            --
            -- Armazena o "loggenerico_id" na memória
            pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                              , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   else
      --
      -- Verifica se nota fiscal é de emissão própria, não é de legado e modelo 55 ou 65
      if vn_dm_ind_emit       = 0 and
         nvl(vn_dm_legado, 0) = 0 and
         vv_cod_mod           in ('55', '65') then
         --
         vn_fase := 19;
         --
         vn_cnf_nfe := FKG_GERA_CNF_NFE_RAND(vn_empresa_id, vn_nro_nf);
         --
         -- Cria chave para a Nota Fiscal
         pkb_integr_nfchave_refer ( est_log_generico_nf => est_log_generico_nf
                                  , en_empresa_id       => vn_empresa_id
                                  , en_notafiscal_id    => en_notafiscal_id
                                  , ed_dt_emiss         => vd_dt_emiss
                                  , ev_cod_mod          => vv_cod_mod
                                  , en_serie            => vv_serie
                                  , en_nro_nf           => vn_nro_nf
                                  , en_dm_forma_emiss   => vn_dm_forma_emiss
                                  , esn_cnf_nfe         => vn_cnf_nfe
                                  , sn_dig_verif_chave  => vn_dig_verif_chave
                                  , sv_nro_chave_nfe         => vv_nro_chave_nfe_new
                                  , sn_dm_nro_chave_nfe_orig => vn_dm_nro_chave_nfe_orig );
         --
         vn_fase := 20;
         -- Grava o log de criação de uma nova chave
         gv_mensagem_log := 'Gerada uma Chave de Acesso para a Nota Fiscal porque estava nula. '||
                            '(Processo que gerou msg: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). '||
                            '(Processo que chamou a validação: '||ev_rotina_orig||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => informacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      
      --#73490  caso seja nf de terceiro e nao tenha enviado a chave, gera erro de validacao.
      elsif vn_dm_ind_emit = 1  --terceiro
         and vv_cod_mod in ('55', '65') then
        --
        vn_fase := 20.1;
        --
        gv_mensagem_log := 'Não foi enviada a Chave de Acesso Nfe da nota fiscal de Terceiro Nro_Nf '||vn_nro_nf||', serie '||vv_serie
                           ||', Dt_emiss '||vd_dt_emiss||', modelo '||vv_cod_mod||', que é obrigatória para este modelo. Inclua a chave e valide novamente. '||
                           '(Rotina que gerou validação: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). ';
        --
        vn_loggenerico_id := null;
        --
        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                            , ev_mensagem         => gv_cabec_log
                            , ev_resumo           => gv_mensagem_log
                            , en_tipo_log         => erro_de_validacao
                            , en_referencia_id    => gn_referencia_id
                            , ev_obj_referencia   => gv_obj_referencia );
        -- Armazena o "loggenerico_id" na mem¿ria
        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                               , est_log_generico_nf => est_log_generico_nf );
        --
      end if;
      --
   end if;
   --
   vn_fase := 21;
   --
   if vv_cod_mod not in ('55', '65')
      and trim(vv_nro_chave_nfe_new) is not null then
      --
      vn_fase := 22;
      --
      gv_mensagem_log := 'Não pode ser informada a chave de acesso para nota fiscal do modelo ('||vv_cod_mod||'). '||
                         '(Processo que gerou msg: pk_csf_api.pkb_valida_cria_nro_chave_nfe / Fase: '||vn_fase||'). '||
                         '(Processo que chamou a validação: '||ev_rotina_orig||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 23;
   --
   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Atualiza a chave na nota fiscal nas seguintes situações:
   -----------------------------------------------------------------------------------------------------------------------------------------
   --
   -- 1) Não foi enviado o número da chave pelo ERP do Cliente e nem existia na base - O Compliance irá criar uma Chave nova
   if nvl(vn_qtde_erro_chave,0)  = 0     and
      trim(vv_nro_chave_nfe_old) is null and
      trim(ev_nro_chave_nfe_new) is null and
      trim(vv_nro_chave_nfe_new) is not null then
      --
      vn_fase := 30;
      --
      -- Variavel global usada em logs
      pk_csf_api.gv_objeto := 'pk_csf_api.pkb_valida_cria_nro_chave_nfe';
      pk_csf_api.gn_fase   := vn_fase;
      --
      -- Atualiza dados da nota fiscal
      update nota_fiscal nf
         set nf.nro_chave_nfe   = vv_nro_chave_nfe_new
           , nf.id_tag_nfe      = 'NFe' || vv_nro_chave_nfe_new
           , nf.cnf_nfe         = vn_cnf_nfe
           , nf.dig_verif_chave = vn_dig_verif_chave
           , nf.dm_nro_chave_nfe_orig = vn_dm_nro_chave_nfe_orig
       where nf.id = en_notafiscal_id;
      --
      -- Esse commit é necessário pq a chave será validada novamente na rotina PKB_CONSISTEM_NF
      commit;
      --
      -- Variavel global usada em logs
      pk_csf_api.gv_objeto := null;
      pk_csf_api.gn_fase   := null;
      --
   -- 2) A Chave enviada pelo ERP do cliente é igual a chave já atualizada nas tabelas
   elsif (trim(vv_nro_chave_nfe_new) is not null 
     and nvl(trim(vv_nro_chave_nfe_new),'A') = nvl(trim(vv_nro_chave_nfe_old),'A')) then
      --
      vn_fase := 31;
      --
      -- Variavel global usada em logs
      pk_csf_api.gv_objeto := 'pk_csf_api.pkb_valida_cria_nro_chave_nfe';
      pk_csf_api.gn_fase   := vn_fase;
      --
      -- Atualiza dados da nota fiscal
      update nota_fiscal nf
         set nf.nro_chave_nfe   = vv_nro_chave_nfe_new
           , nf.id_tag_nfe      = 'NFe' || vv_nro_chave_nfe_new
           , nf.cnf_nfe         = vn_cnf_nfe
           , nf.dig_verif_chave = vn_dig_verif_chave
           , nf.dm_nro_chave_nfe_orig = vn_dm_nro_chave_nfe_orig
       where nf.id = en_notafiscal_id;
      --
      -- Esse commit é necessário pq a chave será validada novamente na rotina PKB_CONSISTEM_NF
      commit;
      --
      -- Variavel global usada em logs
      pk_csf_api.gv_objeto := null;
      pk_csf_api.gn_fase   := null;
      --
   -- 3) A Chave enviada pelo ERP do cliente não é nula mas o valor old das tabelas sim, ou não existe valor old
   elsif trim(vv_nro_chave_nfe_new) is not null and
         trim(vv_nro_chave_nfe_old) is null     then
      --
      vn_fase := 32;
      --
      -- Variavel global usada em logs
      pk_csf_api.gv_objeto := 'pk_csf_api.pkb_valida_cria_nro_chave_nfe';
      pk_csf_api.gn_fase   := vn_fase;
      --
      -- Atualiza dados da nota fiscal
      update nota_fiscal nf
         set nf.nro_chave_nfe   = vv_nro_chave_nfe_new
           , nf.id_tag_nfe      = 'NFe' || vv_nro_chave_nfe_new
           , nf.cnf_nfe         = vn_cnf_nfe
           , nf.dig_verif_chave = vn_dig_verif_chave
           , nf.dm_nro_chave_nfe_orig = vn_dm_nro_chave_nfe_orig
       where nf.id = en_notafiscal_id;
      --
      -- Esse commit é necessário pq a chave será validada novamente na rotina PKB_CONSISTEM_NF
      commit;
      --
      -- Variavel global usada em logs
      pk_csf_api.gv_objeto := null;
      pk_csf_api.gn_fase   := null;
      --
   -- 4) Atualiza quando a Chave enviada pelo ERP do cliente for diferente da Chave já inserida nas tabelas e a 
   --    chave foi criada pela Compliance
   elsif trim(vv_nro_chave_nfe_new) is not null and
         trim(vv_nro_chave_nfe_old) is not null and
         nvl(trim(vv_nro_chave_nfe_new),'A') <> nvl(trim(vv_nro_chave_nfe_old),'A') and
         nvl(vn_dm_nro_chave_nfe_orig,0)      = 1 then -- 1-Chave Criada pela Compliance
      --
      --
      vn_fase := 33;
      --
      -- Variavel global usada em logs
      pk_csf_api.gv_objeto := 'pk_csf_api.pkb_valida_cria_nro_chave_nfe';
      pk_csf_api.gn_fase   := vn_fase;
      --
      -- Atualiza dados da nota fiscal
      update nota_fiscal nf
         set nf.nro_chave_nfe         = vv_nro_chave_nfe_new
           , nf.id_tag_nfe            = 'NFe' || vv_nro_chave_nfe_new
           , nf.cnf_nfe               = vn_cnf_nfe
           , nf.dig_verif_chave       = vn_dig_verif_chave
           , nf.dm_nro_chave_nfe_orig = vn_dm_nro_chave_nfe_orig
       where nf.id = en_notafiscal_id;
      --
      -- Esse commit é necessário pq a chave será validada novamente na rotina PKB_CONSISTEM_NF
      commit;
      --
      -- Variavel global usada em logs
      pk_csf_api.gv_objeto := null;
      pk_csf_api.gn_fase   := null;
      --
   -- 5) Não atualiza quando a Chave enviada pelo ERP do cliente for diferente da Chave já inserida nas tabelas
   elsif trim(vv_nro_chave_nfe_new) is not null and
         trim(vv_nro_chave_nfe_old) is not null and
         nvl(trim(vv_nro_chave_nfe_new),'A') <> nvl(trim(vv_nro_chave_nfe_old),'A') then
      --
      null;
      --
   end if;
   --
exception
   --
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_valida_cria_nro_chave_nfe fase('||vn_fase||'). '||
                         '(Processo que chamou a validação: '||ev_rotina_orig||'). '||
                         'Erro: '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
end pkb_valida_cria_nro_chave_nfe;
--
-----------------------------------------------------------
-- Procedimento insere ou atualiza um usuário no sistema --
-----------------------------------------------------------
PROCEDURE PKB_INTEGR_USUARIO ( EV_NOME       IN  NEO_USUARIO.NOME%TYPE
                             , EV_LOGIN      IN  NEO_USUARIO.LOGIN%TYPE
                             , EV_SENHA      IN  NEO_USUARIO.SENHA%TYPE
                             , EV_EMAIL      IN  NEO_USUARIO.EMAIL%TYPE
                             , EN_BLOQUEADO  IN  NEO_USUARIO.BLOQUEADO%TYPE
                             , EV_ID_ERP     IN  NEO_USUARIO.ID_ERP%TYPE ) IS
   --
   vn_fase       number := 0;
   vn_usuario_id neo_usuario.id%type := null;
   vv_senha      neo_usuario.senha%type := null;
   vn_multorg_id mult_org.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_login) is not null
      and trim(ev_senha) is not null then
      --
      vn_fase := 2;
      --
      vn_usuario_id := pk_csf.fkg_usuario_id ( ev_login => trim(lower(ev_login)) );
      --
      vn_fase := 3;
      --
      vv_senha := lower(pk_csf.fkg_md5 ( ev_valor => trim(lower(ev_senha)) ));
      --
      vn_fase := 4;
      --
      vn_multorg_id := pk_csf.fkg_multorg_id(ev_multorg_cd => '1');
      --
      vn_fase := 5;
      --
      if nvl(vn_usuario_id,0) > 0 then
         --
         vn_fase := 6;
         --
         update neo_usuario set nome       = trim(ev_nome)
                              , login      = trim(lower(ev_login))
                              , senha      = vv_senha
                              , email      = trim(ev_email)
                              , bloqueado  = en_bloqueado
                              , id_erp     = ev_id_erp
          where id = vn_usuario_id;
         --
      else
         --
         vn_fase := 7;
         --
         select neousuario_seq.nextval
           into vn_usuario_id
           from dual;
         --
         vn_fase := 8;
         --
         insert into neo_usuario ( id
                                 , nome
                                 , login
                                 , senha
                                 , email
                                 , bloqueado
                                 , id_erp
                                 , impressora_id
                                 , dm_tipo_acesso
                                 , impressora_id_cont
                                 , dm_prim_acesso
                                 , dm_st_integra
                                 , dm_st_proc
                                 , multorg_id
                                 )
                          values ( vn_usuario_id
                                 , trim(ev_nome)
                                 , trim(lower(ev_login))
                                 , vv_senha
                                 , trim(ev_email)
                                 , en_bloqueado
                                 , ev_id_erp
                                 , null
                                 , 0 -- dm_tipo_acesso: 0-Interno, 1-Externo
                                 , null
                                 , 0 -- dm_prim_acesso: 0-Não, 1-Sim
                                 , 0 -- dm_st_integra: 0-Indefinido, 7-Integração por view de banco de dados, 8-Inserida a resposta para o ERP, 9-Atualizada a resposta para o ERP
                                 , 3 -- dm_st_proc: 0-Não Validada, 1-Validada, 2-Erro de validação, 3-Informado pelo Portal
                                 , vn_multorg_id
                                 );
         --
         insert into neo_usuario_papel values (vn_usuario_id, 3);
         --
         insert into neo_usuario_papel values (vn_usuario_id, 5);
         --
      end if;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_usuario fase('||vn_fase||'):'||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END PKB_INTEGR_USUARIO;

---------------------------------------------------------------------------
-- Procedimento insere ou atualiza das empresas que o usuário tem acesso --
---------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_EMPR_USUARIO ( EV_LOGIN            IN  NEO_USUARIO.LOGIN%TYPE
                                  , EV_CNPJ_CPF         IN  VARCHAR2
                                  , EN_DM_ACESSO        IN  USUARIO_EMPRESA.DM_ACESSO%TYPE
                                  , EN_DM_EMPR_DEFAULT  IN  USUARIO_EMPRESA.DM_EMPR_DEFAULT%TYPE
                                  , EV_COD_UNID_ORG     IN  UNID_ORG.CD%TYPE ) IS
   --
   vn_fase        number := 0;
   vn_usuario_id  neo_usuario.id%type := null;
   vn_empresa_id  empresa.id%type := null;
   vn_usuempr_id  usuario_empresa.id%type := null;
   --
   cursor c_usuempr ( en_usuario_id  neo_usuario.id%type
                    , en_empresa_id  empresa.id%type ) is
   select id
     from usuario_empresa
    where usuario_id = en_usuario_id
      and empresa_id = en_empresa_id;
   --
   PROCEDURE PKB_USUEMPR_UNIDORG IS
      --
      vn_usuemprunidorg_id usuempr_unidorg.id%type;
      --
      cursor c_usu_unid is
      select id
        from usuempr_unidorg
       where usuempr_id  = gt_row_usuempr_unidorg.usuempr_id
         and unidorg_id  = gt_row_usuempr_unidorg.unidorg_id;
      --
   BEGIN
      --
      if nvl(gt_row_usuempr_unidorg.usuempr_id,0) > 0
         and nvl(gt_row_usuempr_unidorg.unidorg_id,0) > 0 then
         --
         open c_usu_unid;
         fetch c_usu_unid into vn_usuemprunidorg_id;
         close c_usu_unid;
         --
         if nvl(vn_usuemprunidorg_id,0) <= 0 then
            --
            insert into usuempr_unidorg ( id
                                        , usuempr_id
                                        , unidorg_id
                                        , dm_acesso
                                        , dm_uo_default )
                                 values ( usuemprunidorg_seq.nextval
                                        , gt_row_usuempr_unidorg.usuempr_id
                                        , gt_row_usuempr_unidorg.unidorg_id
                                        , gt_row_usuempr_unidorg.dm_acesso
                                        , gt_row_usuempr_unidorg.dm_uo_default );
            --
         else
            --
            update usuempr_unidorg set dm_acesso      = gt_row_usuempr_unidorg.dm_acesso
                                     , dm_uo_default  = gt_row_usuempr_unidorg.dm_uo_default
             where id = vn_usuemprunidorg_id;
            --
         end if;
         --
      end if;
      --
   EXCEPTION
      when others then
         raise_application_error(-20101, 'Erro na pkb_usuempr_unidorg: '||sqlerrm);
   END PKB_USUEMPR_UNIDORG;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if ev_login is not null
      and ev_cnpj_cpf is not null then
      --
      vn_fase := 2;
      --
      vn_usuario_id := pk_csf.fkg_usuario_id ( ev_login => trim(lower(ev_login)) );
      --
      vn_fase := 3;
      --
      vn_empresa_id := pk_csf.fkg_empresa_id_pelo_cpf_cnpj ( en_multorg_id => pk_csf.fkg_multorg_id(ev_multorg_cd => '1') -- mult-org default
                                                           , ev_cpf_cnpj   => ev_cnpj_cpf );
      --
      vn_fase := 4;
      --
      open c_usuempr(vn_usuario_id, vn_empresa_id);
      fetch c_usuempr into vn_usuempr_id;
      close c_usuempr;
      --
      vn_fase := 5;
      --
      if nvl(vn_usuario_id,0) > 0 and nvl(vn_empresa_id,0) > 0 then
         --
         vn_fase := 6;
         --
         if nvl(vn_usuempr_id,0) <= 0 then
            --
            vn_fase := 7;
            --
            select usuempr_seq.nextval
              into vn_usuempr_id
              from dual;
            --
            vn_fase := 8;
            --
            insert into usuario_empresa ( id
                                        , usuario_id
                                        , empresa_id
                                        , dm_acesso
                                        , dm_empr_default )
                                 values ( vn_usuempr_id
                                        , vn_usuario_id
                                        , vn_empresa_id
                                        , nvl(en_dm_acesso, 1)
                                        , nvl(en_dm_empr_default, 0) );

            --
         else
            --
            vn_fase := 9;
            --
            update usuario_empresa set dm_acesso = nvl(en_dm_acesso, 1)
                                     , dm_empr_default = nvl(en_dm_empr_default,0 )
             where id = vn_usuempr_id;
            --
         end if;
         --
         vn_fase := 10;
         -- Relacionar Usuário a Unidade Organizacional
         if trim(ev_cod_unid_org) is not null and nvl(vn_usuempr_id,0) > 0 then
            --
            gt_row_usuempr_unidorg.usuempr_id  := vn_usuempr_id;
            --
            vn_fase := 11;
            --
            gt_row_usuempr_unidorg.unidorg_id  := pk_csf.fkg_unig_org_id ( en_empresa_id    => vn_empresa_id
                                                                         , ev_cod_unid_org  => ev_cod_unid_org );
            --
            vn_fase := 12;
            --
            gt_row_usuempr_unidorg.dm_acesso      := nvl(en_dm_acesso, 1);
            gt_row_usuempr_unidorg.dm_uo_default  := nvl(en_dm_empr_default, 0);
            --
            vn_fase := 13;
            --
            pkb_usuempr_unidorg;
            --
         end if;
         --
      end if;
      --
      vn_fase := 14;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_empr_usuario fase('||vn_fase||'):'||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END PKB_INTEGR_EMPR_USUARIO;

------------------------------------------------------------
-- Procedimento insere ou atualiza uma empresa no sistema --
------------------------------------------------------------
PROCEDURE PKB_INTEGR_EMPRESA ( EV_COD_PART         IN PESSOA.COD_PART%TYPE
                             , EV_NOME             IN PESSOA.NOME%TYPE
                             , EV_FANTASIA         IN PESSOA.FANTASIA%TYPE
                             , EV_LOGRAD           IN PESSOA.LOGRAD%TYPE
                             , EV_NRO              IN PESSOA.NRO%TYPE
                             , EV_CX_POSTAL        IN PESSOA.CX_POSTAL%TYPE
                             , EV_COMPL            IN PESSOA.COMPL%TYPE
                             , EV_BAIRRO           IN PESSOA.BAIRRO%TYPE
                             , EV_COD_IBGE_CIDADE  IN CIDADE.IBGE_CIDADE%TYPE
                             , EN_CEP              IN PESSOA.CEP%TYPE
                             , EV_FONE             IN PESSOA.FONE%TYPE
                             , EV_FAX              IN PESSOA.FAX%TYPE
                             , EV_EMAIL            IN PESSOA.EMAIL%TYPE
                             , EV_CNPJ             IN VARCHAR2
                             , EV_IE               IN JURIDICA.IE%TYPE
                             , ev_im               IN JURIDICA.im%TYPE
                             , EV_CNAE             IN JURIDICA.CNAE%TYPE
                             , EV_SUFRAMA          IN JURIDICA.SUFRAMA%TYPE
                             , EV_COD_MATRIZ       IN EMPRESA.COD_MATRIZ%TYPE
                             , EV_COD_FILIAL       IN EMPRESA.COD_FILIAL%TYPE
                             , EB_LOGOTIPO         IN EMPRESA.LOGOTIPO%TYPE
                             , EV_COD_UNID_ORG     IN UNID_ORG.CD%TYPE
                             , EV_DESCR_UNID_ORG   IN UNID_ORG.DESCR%TYPE ) IS
   --
   vn_fase         number := 0;
   vt_log_generico_nf dbms_sql.number_table;
   --
   gt_row_empresa  Empresa%rowtype;
   gt_row_unid_org Unid_Org%rowtype;
   gt_row_pessoa   Pessoa%rowtype;
   gt_row_juridica Juridica%rowtype;
   --
   vn_empresa_id   empresa.id%type;
   --
   -- Função retorna o ID do pais conforme o ID da cidade
   FUNCTION FKG_COD_PAIS_SISCOMEX ( EN_CIDADE_ID IN CIDADE.ID%TYPE )
            RETURN PAIS.ID%TYPE IS
      --
      vn_pais_id pais.id%type := null;
      --
   BEGIN
      --
      if nvl(en_cidade_id,0) > 0 then
         --
         select p.id
           into vn_pais_id
           from cidade c
              , estado e
              , pais   p
          where c.id       = en_cidade_id
            and e.id       = c.estado_id
            and p.id       = e.pais_id;
         --
      end if;
      --
      return vn_pais_id;
      --
   EXCEPTION
      when no_data_found then
         return null;
      when others then
         raise_application_error(-20101, 'Erro na fkg_cod_pais_siscomex: '||sqlerrm);
   END FKG_COD_PAIS_SISCOMEX;

   -- Trabalha os dados a Unidade Organizacional
   PROCEDURE PKB_UNID_ORG IS
      --
      vn_unidorg_id unid_org.id%type;
      vn_qtde_nfe number := 0;
      --
      cursor c_unidorg is
      select uo.id
        from unid_org uo
       where uo.cd = gt_row_unid_org.cd;
      --
   BEGIN
      --
      if nvl(gt_row_unid_org.empresa_id,0) > 0
         and trim(gt_row_unid_org.cd) is not null
         and trim(gt_row_unid_org.descr) is not null
         then
         --
         open c_unidorg;
         fetch c_unidorg into vn_unidorg_id;
         close c_unidorg;
         --
         if nvl(vn_unidorg_id,0) > 0 then
            --
            update unid_org set descr = gt_row_unid_org.descr
             where id = vn_unidorg_id;
            --
            -- verifica se não tem NFe para a UO, pois se NÃO tiver, pode alterar a empresa da UO
            begin
               --
               select count(1)
                 into vn_qtde_nfe
                 from nota_fiscal
                where unidorg_id = vn_unidorg_id;
               --
            exception
               when others then
                  vn_qtde_nfe := 0;
            end;
            --
            if nvl(vn_qtde_nfe,0) <= 0 then
               --
               update unid_org set empresa_id = gt_row_unid_org.empresa_id
                where id = vn_unidorg_id;
               --
            end if;
            --
         else
            --
            insert into unid_org ( id
                                 , empresa_id
                                 , cd
                                 , descr )
                          values ( unidorg_seq.nextval
                                 , gt_row_unid_org.empresa_id
                                 , gt_row_unid_org.cd
                                 , gt_row_unid_org.descr );
            --
         end if;
         --
      end if;
      --
   EXCEPTION
      when others then
         raise_application_error(-20101, 'Erro na pkb_unid_org: '||sqlerrm);
   END PKB_UNID_ORG;

   -- Trabalha os dados da empresa
   PROCEDURE PKB_EMPRESA IS
      --
      vn_empresa_id empresa.id%type := null;
      --
      cursor c_empr ( en_pessoa_id pessoa.id%type ) is
      select id
        from empresa
       where pessoa_id = en_pessoa_id;
      --
      cursor c_empr_matriz is
      select e.id
        from juridica j
           , empresa  e
       where j.num_cnpj    = gt_row_juridica.num_cnpj
         and j.num_filial  = 1 -- Verifica direto a Matriz
         and e.pessoa_id   = j.pessoa_id
         and e.multorg_id  = gt_row_pessoa.multorg_id;
      --
      cursor c_empresa (en_empresa_id empresa.id%type) is
      select id
           , dm_situacao
           , dm_tp_amb
           , dm_tp_impr
           , dm_forma_emiss
           , logotipo
           , dt_ini_integr
           , impressora_id
           , default_cons_stat
           , caminho_chave_jks
           , conteudo_chave_jks
           , senha_chave_jks
           , caminho_cert_pfx
           , conteudo_cert_pfx
           , senha_cert_pfx
           , alias_jks
           , nro_tentativas_comunic
           , max_qtd_nfe_lote
           , max_qtd_impressao
           , email_nome
           , email_ender_remet
           , email_template_subject
           , email_template_body
           , dir_integra
           , dm_valid_imp
           , dm_cont_fs_auto
           , dm_env_danfe_email
           , max_qtd_tent_impr
           , interval_tent_impr
           , dm_valid_icms60
           , dm_aces_ext
           , dm_tipo_integr
           , nome_dblink
           , dm_util_aspa
           , dm_ret_infor_integr
           , impressora_id_cont
           , dm_tp_cert
           , dm_impr_aut
           , dm_valida_ipi
           , dm_valida_pis
           , dm_valida_cofins
           , dm_valid_imp_terc
           , dm_valid_icms60_terc
           , dm_valida_ipi_terc
           , dm_valida_pis_terc
           , dm_valida_cofins_terc
           , multorg_id
        from empresa
       where id = en_empresa_id;
      --
   BEGIN
      -- verifica se já existe empresa para a Pessoa
      open c_empr(gt_row_pessoa.id);
      fetch c_empr into vn_empresa_id;
      close c_empr;
      --
      if nvl(vn_empresa_id,0) <= 0 then -- NÃO exite empresa
         -- verifica se já existe uma empresa matriz com a raiz de CNPJ
         open c_empr_matriz;
         fetch c_empr_matriz into vn_empresa_id;
         close c_empr_matriz;
         --
         gt_row_empresa.pessoa_id     := gt_row_pessoa.id;
         gt_row_empresa.dt_ini_integr := sysdate;
         --
         if nvl(vn_empresa_id,0) > 0 then
            --
            gt_row_empresa.ar_empresa_id := vn_empresa_id;
            -- Se existe uma empresa matriz, pega os dados
            open c_empresa(vn_empresa_id);
            fetch c_empresa into gt_row_empresa.id
                               , gt_row_empresa.dm_situacao
                               , gt_row_empresa.dm_tp_amb
                               , gt_row_empresa.dm_tp_impr
                               , gt_row_empresa.dm_forma_emiss
                               , gt_row_empresa.logotipo
                               , gt_row_empresa.dt_ini_integr
                               , gt_row_empresa.impressora_id
                               , gt_row_empresa.default_cons_stat
                               , gt_row_empresa.caminho_chave_jks
                               , gt_row_empresa.conteudo_chave_jks
                               , gt_row_empresa.senha_chave_jks
                               , gt_row_empresa.caminho_cert_pfx
                               , gt_row_empresa.conteudo_cert_pfx
                               , gt_row_empresa.senha_cert_pfx
                               , gt_row_empresa.alias_jks
                               , gt_row_empresa.nro_tentativas_comunic
                               , gt_row_empresa.max_qtd_nfe_lote
                               , gt_row_empresa.max_qtd_impressao
                               , gt_row_empresa.email_nome
                               , gt_row_empresa.email_ender_remet
                               , gt_row_empresa.email_template_subject
                               , gt_row_empresa.email_template_body
                               , gt_row_empresa.dir_integra
                               , gt_row_empresa.dm_valid_imp
                               , gt_row_empresa.dm_cont_fs_auto
                               , gt_row_empresa.dm_env_danfe_email
                               , gt_row_empresa.max_qtd_tent_impr
                               , gt_row_empresa.interval_tent_impr
                               , gt_row_empresa.dm_valid_icms60
                               , gt_row_empresa.dm_aces_ext
                               , gt_row_empresa.dm_tipo_integr
                               , gt_row_empresa.nome_dblink
                               , gt_row_empresa.dm_util_aspa
                               , gt_row_empresa.dm_ret_infor_integr
                               , gt_row_empresa.impressora_id_cont
                               , gt_row_empresa.dm_tp_cert
                               , gt_row_empresa.dm_impr_aut
                               , gt_row_empresa.dm_valida_ipi
                               , gt_row_empresa.dm_valida_pis
                               , gt_row_empresa.dm_valida_cofins
                               , gt_row_empresa.dm_valid_imp_terc
                               , gt_row_empresa.dm_valid_icms60_terc
                               , gt_row_empresa.dm_valida_ipi_terc
                               , gt_row_empresa.dm_valida_pis_terc
                               , gt_row_empresa.dm_valida_cofins_terc
                               , gt_row_empresa.multorg_id
                               ;
            close c_empresa;
            --
         else
            -- Se NÃO existe um empresa matriz, o usuário seta os dados depois
            gt_row_empresa.dm_situacao             := 0; -- inativa
            gt_row_empresa.dm_tp_amb               := 2; -- Homologação
            gt_row_empresa.dm_tp_impr              := 1; -- Retrato
            gt_row_empresa.dm_forma_emiss          := 1; -- Normal
            gt_row_empresa.ar_empresa_id           := null;
            gt_row_empresa.impressora_id           := null;
            gt_row_empresa.default_cons_stat       := 0;
            gt_row_empresa.caminho_chave_jks       := null;
            gt_row_empresa.conteudo_chave_jks      := null;
            gt_row_empresa.senha_chave_jks         := null;
            gt_row_empresa.caminho_cert_pfx        := null;
            gt_row_empresa.conteudo_cert_pfx       := null;
            gt_row_empresa.senha_cert_pfx          := null;
            gt_row_empresa.alias_jks               := null;
            gt_row_empresa.nro_tentativas_comunic  := 30;
            gt_row_empresa.max_qtd_nfe_lote        := 1;
            gt_row_empresa.max_qtd_impressao       := 1;
            gt_row_empresa.email_nome              := null;
            gt_row_empresa.email_ender_remet       := null;
            gt_row_empresa.email_template_subject  := null;
            gt_row_empresa.email_template_body     := null;
            gt_row_empresa.dir_integra             := null;
            gt_row_empresa.dm_valid_imp            := 1; -- 0-não, 1-sim
            gt_row_empresa.dm_cont_fs_auto         := 0;
            gt_row_empresa.dm_env_danfe_email      := 0;
            gt_row_empresa.max_qtd_tent_impr       := 1;
            gt_row_empresa.interval_tent_impr      := 60;
            gt_row_empresa.dm_valid_icms60         := 1; -- 0-não, 1-sim
            gt_row_empresa.dm_aces_ext             := 0;
            gt_row_empresa.dm_tipo_integr          := 0;
            gt_row_empresa.nome_dblink             := null;
            gt_row_empresa.dm_util_aspa            := 0;
            gt_row_empresa.dm_ret_infor_integr     := 0;
            gt_row_empresa.impressora_id_cont      := null;
            gt_row_empresa.dm_tp_cert              := 1;
            gt_row_empresa.dm_impr_aut             := 0;
            gt_row_empresa.dm_valida_ipi           := 1; -- 0-não, 1-sim
            gt_row_empresa.dm_valida_pis           := 1; -- 0-não, 1-sim
            gt_row_empresa.dm_valida_cofins        := 1; -- 0-não, 1-sim
            gt_row_empresa.dm_valid_imp_terc       := 1; -- 0-não, 1-sim
            gt_row_empresa.dm_valid_icms60_terc    := 1; -- 0-não, 1-sim
            gt_row_empresa.dm_valida_ipi_terc      := 1; -- 0-não, 1-sim
            gt_row_empresa.dm_valida_pis_terc      := 1; -- 0-não, 1-sim
            gt_row_empresa.dm_valida_cofins_terc   := 1; -- 0-não, 1-sim
            gt_row_empresa.multorg_id              := gt_row_pessoa.multorg_id;
            --
         end if;
         --
         select empresa_seq.nextval
           into gt_row_empresa.id
           from dual;
         --
         insert into empresa ( id
                             , pessoa_id
                             , dm_situacao
                             , dm_tp_amb
                             , dm_tp_impr
                             , dm_forma_emiss
                             , ar_empresa_id
                             , logotipo
                             , cod_matriz
                             , cod_filial
                             , dt_ini_integr
                             , impressora_id
                             , default_cons_stat
                             , caminho_chave_jks
                             , conteudo_chave_jks
                             , senha_chave_jks
                             , caminho_cert_pfx
                             , conteudo_cert_pfx
                             , senha_cert_pfx
                             , alias_jks
                             , nro_tentativas_comunic
                             , max_qtd_nfe_lote
                             , max_qtd_impressao
                             , email_nome
                             , email_ender_remet
                             , email_template_subject
                             , email_template_body
                             , dir_integra
                             , dm_valid_imp
                             , dm_cont_fs_auto
                             , dm_env_danfe_email
                             , max_qtd_tent_impr
                             , interval_tent_impr
                             , dm_valid_icms60
                             , dm_aces_ext
                             , dm_tipo_integr
                             , nome_dblink
                             , dm_util_aspa
                             , dm_ret_infor_integr
                             , impressora_id_cont
                             , dm_tp_cert
                             , dm_impr_aut
                             , dm_valida_ipi
                             , dm_valida_pis
                             , dm_valida_cofins
                             , dm_valid_imp_terc
                             , dm_valid_icms60_terc
                             , dm_valida_ipi_terc
                             , dm_valida_pis_terc
                             , dm_valida_cofins_terc
                             , multorg_id
                             )
                      values ( gt_row_empresa.id
                             , gt_row_empresa.pessoa_id
                             , gt_row_empresa.dm_situacao
                             , gt_row_empresa.dm_tp_amb
                             , gt_row_empresa.dm_tp_impr
                             , gt_row_empresa.dm_forma_emiss
                             , gt_row_empresa.ar_empresa_id
                             , gt_row_empresa.logotipo
                             , gt_row_empresa.cod_matriz
                             , gt_row_empresa.cod_filial
                             , gt_row_empresa.dt_ini_integr
                             , gt_row_empresa.impressora_id
                             , gt_row_empresa.default_cons_stat
                             , gt_row_empresa.caminho_chave_jks
                             , gt_row_empresa.conteudo_chave_jks
                             , gt_row_empresa.senha_chave_jks
                             , gt_row_empresa.caminho_cert_pfx
                             , gt_row_empresa.conteudo_cert_pfx
                             , gt_row_empresa.senha_cert_pfx
                             , gt_row_empresa.alias_jks
                             , gt_row_empresa.nro_tentativas_comunic
                             , gt_row_empresa.max_qtd_nfe_lote
                             , gt_row_empresa.max_qtd_impressao
                             , gt_row_empresa.email_nome
                             , gt_row_empresa.email_ender_remet
                             , gt_row_empresa.email_template_subject
                             , gt_row_empresa.email_template_body
                             , gt_row_empresa.dir_integra
                             , gt_row_empresa.dm_valid_imp
                             , gt_row_empresa.dm_cont_fs_auto
                             , gt_row_empresa.dm_env_danfe_email
                             , gt_row_empresa.max_qtd_tent_impr
                             , gt_row_empresa.interval_tent_impr
                             , gt_row_empresa.dm_valid_icms60
                             , gt_row_empresa.dm_aces_ext
                             , gt_row_empresa.dm_tipo_integr
                             , gt_row_empresa.nome_dblink
                             , gt_row_empresa.dm_util_aspa
                             , gt_row_empresa.dm_ret_infor_integr
                             , gt_row_empresa.impressora_id_cont
                             , gt_row_empresa.dm_tp_cert
                             , gt_row_empresa.dm_impr_aut
                             , gt_row_empresa.dm_valida_ipi
                             , gt_row_empresa.dm_valida_pis
                             , gt_row_empresa.dm_valida_cofins
                             , gt_row_empresa.dm_valid_imp_terc
                             , gt_row_empresa.dm_valid_icms60_terc
                             , gt_row_empresa.dm_valida_ipi_terc
                             , gt_row_empresa.dm_valida_pis_terc
                             , gt_row_empresa.dm_valida_cofins_terc
                             , gt_row_empresa.multorg_id
                             );
         --
      else
         --
         update empresa set cod_matriz  = gt_row_empresa.cod_matriz
                          , cod_filial  = gt_row_empresa.cod_filial
          where pessoa_id = gt_row_pessoa.id;
         --
      end if;
      --
      gt_row_unid_org.empresa_id := nvl(vn_empresa_id, gt_row_empresa.id);
      --
      pkb_unid_org;
      --
   EXCEPTION
      when others then
         raise_application_error(-20101, 'Erro na pkb_empresa: '||sqlerrm);
   END PKB_EMPRESA;
   --
BEGIN
   --
   vt_log_generico_nf.delete;
   --
   vn_fase := 1;
   --
   gt_row_empresa  := null;
   gt_row_unid_org := null;
   gt_row_pessoa   := null;
   gt_row_juridica := null;
   --
   if ev_cnpj is not null
      and ev_nome is not null then
      --
      vn_fase := 2;
      --
      gt_row_pessoa.dm_tipo_incl := 1;  -- Integração
      --
      if ev_cod_part is null then
         gt_row_pessoa.cod_part := ev_cnpj;
      else
         gt_row_pessoa.cod_part := ev_cod_part;
      end if;
      --
      gt_row_pessoa.nome            := ev_nome;
      gt_row_pessoa.dm_tipo_pessoa  := 1;  -- juridica
      gt_row_pessoa.fantasia        := ev_fantasia;
      gt_row_pessoa.lograd          := ev_lograd;
      gt_row_pessoa.nro             := ev_nro;
      gt_row_pessoa.cx_postal       := ev_cx_postal;
      gt_row_pessoa.compl           := ev_compl;
      gt_row_pessoa.bairro          := ev_bairro;
      --
      vn_fase := 3;
      --
      gt_row_pessoa.cidade_id := pk_csf.fkg_Cidade_ibge_id ( ev_ibge_cidade => ev_cod_ibge_cidade );
      --
      gt_row_pessoa.cep    := en_cep;
      gt_row_pessoa.fone   := ev_fone;
      gt_row_pessoa.fax    := ev_fax;
      gt_row_pessoa.email  := ev_email;
      gt_row_pessoa.multorg_id      := pk_csf.fkg_multorg_id ( ev_multorg_cd => 1 );
      --
      vn_fase := 4;
      --
      gt_row_pessoa.pais_id := fkg_cod_pais_siscomex ( en_cidade_id => gt_row_pessoa.cidade_id );
      --
      vn_fase := 5;
      --
      if nvl(gt_row_pessoa.cidade_id,0) > 0 then
         --
         vn_fase := 6;
         --
         begin
            --
            select min(id) into vn_empresa_id
              from empresa;
            --
         exception
            when others then
               vn_empresa_id := 0;
         end;
         --
         vn_fase := 7;
         -- Valida se o participante não está cadastrado como empresa
         if pk_csf.fkg_valida_part_empresa ( en_multorg_id => gt_row_pessoa.multorg_id
                                           , ev_cod_part   => gt_row_pessoa.cod_part ) = FALSE then
            -- chama a API de pessoa
            pk_csf_api_cad.pkb_ins_atual_pessoa ( est_log_generico => vt_log_generico_nf
                                                , est_pessoa => gt_row_pessoa
                                                , en_empresa_id => vn_empresa_id
                                                );
            --
         else
            --
            gt_row_pessoa.id := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id  => gt_row_pessoa.multorg_id
                                                              , ev_cod_part    => trim(gt_row_pessoa.cod_part)
                                                              );
            --
         end if;
         --
         vn_fase := 8;
         --
         if nvl(gt_row_pessoa.id,0) > 0 then
            --
            vn_fase := 9;
            -- Trabalha os dados juridicos da empresa
            gt_row_juridica.pessoa_id   := gt_row_pessoa.id;
            gt_row_juridica.num_cnpj    := to_number(substr(lpad(ev_cnpj, 14, '0'), 1, 8));
            gt_row_juridica.num_filial  := to_number(substr(lpad(ev_cnpj, 14, '0'), 9, 4));
            gt_row_juridica.dig_cnpj    := to_number(substr(lpad(ev_cnpj, 14, '0'), 13, 2));
            gt_row_juridica.ie          := ev_ie;
            gt_row_juridica.im          := ev_im;
            gt_row_juridica.cnae        := ev_cnae;
            gt_row_juridica.suframa     := ev_suframa;
            --
            vn_fase := 10;
            --
            pk_csf_api_cad.pkb_ins_atual_juridica ( est_log_generico => vt_log_generico_nf
                                                  , est_juridica => gt_row_juridica
                                                  , en_empresa_id => vn_empresa_id
                                                  );
            --
            vn_fase := 11;
            -- Trabalha os dados da empresa
            gt_row_empresa.cod_matriz  := ev_cod_matriz;
            gt_row_empresa.cod_filial  := ev_cod_filial;
            gt_row_empresa.logotipo    := eb_logotipo;
            --
            vn_fase := 12;
            -- Dados Unidade Organizacional
            gt_row_unid_org.cd     := ev_cod_unid_org;
            gt_row_unid_org.descr  := ev_descr_unid_org;
            --
            vn_fase := 13;
            --
            pkb_empresa;
            --
         end if;
         --
         vn_fase := 14;
         --
         commit;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_empresa fase('||vn_fase||'):'||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END PKB_INTEGR_EMPRESA;

------------------------------------------------------------------------------
-- Procedimento seta o tipo de integração que será feito                    --
-- 0 - Somente valida os dados e registra o Log de ocorrência               --
-- 1 - Valida os dados e registra o Log de ocorrência e insere a informação --
-- Todos os procedimentos de integração fazem referência a ele              --
------------------------------------------------------------------------------
PROCEDURE PKB_SETA_TIPO_INTEGR ( EN_TIPO_INTEGR IN NUMBER ) IS
BEGIN
   --
   gn_tipo_integr := en_tipo_integr;
   --
END PKB_SETA_TIPO_INTEGR;

-----------------------------------------------------------------------------------
-- Procedimento seta o objeto de referencia utilizado na Validação da Informação --
-----------------------------------------------------------------------------------
PROCEDURE PKB_SETA_OBJ_REF ( EV_OBJETO IN VARCHAR2 ) IS
BEGIN
   --
   gv_obj_referencia := upper(ev_objeto);
   --
END PKB_SETA_OBJ_REF;

---------------------------------------------------------------------------------
-- Procedimento seta o "ID de Referencia" utilizado na Validação da Informação --
---------------------------------------------------------------------------------
PROCEDURE PKB_SETA_REFERENCIA_ID ( EN_ID IN NUMBER ) IS
BEGIN
   --
   gn_referencia_id := en_id;
   --
END PKB_SETA_REFERENCIA_ID;

--------------------------------------------------
-- Procedimento exclui dados de uma nota fiscal --         
--------------------------------------------------
PROCEDURE PKB_EXCLUIR_DADOS_NF ( EN_NOTAFISCAL_ID  IN NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_dm_arm_nfe_terc nota_fiscal.dm_arm_nfe_terc%type;
   vn_dm_ind_emit     nota_fiscal.dm_ind_emit%type;
   --
   cursor c_item is
   select id
     from item_nota_fiscal
	where notafiscal_id = en_notafiscal_id
    order by id;
   --
   cursor c_di ( en_itemnf_id item_nota_fiscal.id%type ) is
   select id
     from itemnf_dec_impor
	where itemnf_id = en_itemnf_id
    order by id;
   --
   cursor c_imp ( en_itemnf_id item_nota_fiscal.id%type ) is
   select id
     from imp_itemnf
    where itemnf_id = en_itemnf_id
    order by id;
   --
   cursor c_cobr is
   select id
     from nota_fiscal_cobr
	where notafiscal_id = en_notafiscal_id;
   --
   cursor c_transp is
   select id
     from nota_fiscal_transp
	where notafiscal_id = en_notafiscal_id;
   --
   cursor c_vol ( en_nftransp_id nota_fiscal_transp.id%type ) is
   select id
     from nftransp_vol
	where nftransp_id = en_nftransp_id;
   --
   cursor c_dest is
   select id
     from nota_fiscal_dest
    where notafiscal_id = en_notafiscal_id;
   --
   cursor c_cana is
   select id
     from nf_aquis_cana
	where notafiscal_id = en_notafiscal_id;
   --
   cursor c_agend is
   select id
     from nf_agend_transp
    where notafiscal_id = en_notafiscal_id;
   --
   cursor c_infor is
   select id
     from nfinfor_fiscal
    where notafiscal_id = en_notafiscal_id;
   --
BEGIN
   --
   vn_fase := 1;
   -- Se informou a Nota Fiscal então exclui os dados dos filhos da Tabela Nota_Fiscal
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 1.1;
      --
      begin
        select nf.dm_arm_nfe_terc
          into vn_dm_arm_nfe_terc
          from nota_fiscal nf
         where nf.id = en_notafiscal_id;
      exception
        when others then
          vn_dm_arm_nfe_terc := 0; -- 0-não armazena xml, 1-sim armazena xml
      end;
      --    
      if FKG_NOTA_MDE_ARMAZ(en_notafiscal_id   => en_notafiscal_id,
                            en_dm_arm_nfe_terc => vn_dm_arm_nfe_terc) = 1 then     
         --
         vn_fase := 2;
         -- exclui detalhes dos itens
         for rec in c_item
         loop
           --
           exit when c_item%notfound or (c_item%notfound);
           --
           vn_fase := 2.1;
           --
           for rec_imp in c_imp(rec.id)
           loop
             --
             exit when c_imp%notfound or (c_imp%notfound) is null;
             --
             vn_fase := 2.2;
             --
             delete from imp_itemnf_icms_dest
              where impitemnf_id = rec_imp.id;
             --
             vn_fase := 2.3;
             --
             delete from imp_adic_aposent_esp
              where impitemnf_id = rec_imp.id;
             --
           end loop;
           --
           vn_fase := 2.4;
           -- Impostos e retenção da nota fiscal
           delete from Imp_ItemNf
            where itemnf_id = rec.id;
           --
           vn_fase := 2.5;
           -- Informações de complemento dos itens da nota fiscal
           delete from itemnf_compl_serv
            where itemnf_id = rec.id;
           --
           vn_fase := 2.6;
           -- Informações de combustíveis
           delete from ItemNF_Comb
            where itemnf_id = rec.id;
           --
           vn_fase := 2.7;
           -- Informações de armas
           delete from ItemNF_Arma
            where itemnf_id = rec.id;
           --
           vn_fase := 2.8;
           -- Informações de armazenamento de combustíveis
           delete from ItemNF_Armaz_Comb
            where itemnf_id = rec.id;
           --
           vn_fase := 2.9;
           -- Informações de medicamento
           delete from ItemNF_Med
            where itemnf_id = rec.id;
           --
           vn_fase := 2.10;
           --
           delete from ItemNF_Veic
            where itemnf_id = rec.id;
           --
           vn_fase := 2.11;
           --
           delete from itemnf_rastreab
            where itemnf_id = rec.id;
           --
           vn_fase := 2.12;
           -- acional da DI
           for rec_di in c_di(rec.id)
           loop
             --
             exit when c_di%notfound or (c_di%notfound) is null;
             --
             vn_fase := 2.13;
             --
             delete from itemnfdi_adic
              where itemnfdi_id = rec_di.id;
             --
           end loop;
           --
           vn_fase := 2.14;
           -- documento de importação
           delete from ItemNF_Dec_Impor
            where itemnf_id = rec.id;
           --
           vn_fase := 2.15;
           -- Informações de rateio de frete
           delete from frete_itemnf
            where itemnotafiscal_id = rec.id;
           --
           vn_fase := 2.16;
           -- Informações de Complemento de Transporte do Item
           delete from itemnf_compl_transp
            where itemnf_id = rec.id;
           --
           vn_fase := 2.17;
           -- Informações de Complemento de Transporte do Item
           delete from itemnf_compl
            where itemnf_id = rec.id;
           --
           vn_fase := 2.18;
           -- Informações de documento fiscal
           delete from inf_prov_docto_fiscal
            where itemnf_id = rec.id;
           --
           vn_fase := 2.19;
           --
           delete from itemnf_dif_aliq
            where itemnf_id = rec.id;
           --
           vn_fase := 2.20;
           --
           delete from itemnf_nve
            where itemnf_id = rec.id;
           --
           vn_fase := 2.21;
           --
           delete from itemnf_export
            where itemnf_id = rec.id;
           --
           vn_fase := 2.22;
           --
           delete from itemnf_inf_compl_st
            where itemnf_id = rec.id;
           --
           vn_fase := 2.23;
           --
           delete from itemnf_res_icms_st
            where itemnf_id = rec.id;
           --
           vn_fase := 2.24;
     	     --
           delete from itemnf_res_icms_st
            where itemnf_id = rec.id;
           --
         end loop;
         --
         vn_fase := 3;
         -- Item romaneio de impressão
         delete from impr_inf_nf_romaneio
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 4;
         -- Item da NFe de impressão
         delete from impr_item_nfe
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 5;
         -- Cabeçalho de impressão da NFe
         delete from impr_cab_nfe cab
          where cab.notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 5.1;
         -- exclui os dados de impressão do item da nota (serviços contínuos)
         delete from impr_item_nfsc
          where notafiscal_id = en_notafiscal_id; 
         --      
         vn_fase := 6;
         -- Itens da NF
         delete from Item_Nota_Fiscal
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 6.1;
         -- exclui os dados de impressão do cabeçalho da nota (serviços contínuos)
         delete from impr_cab_nfsc
          where notafiscal_id = en_notafiscal_id;      
         --
         vn_fase := 7;
         -- Informações de complemento da nota fiscal de retorno
         delete from nf_compl_serv_ret ns
          where ns.nfcomplserv_id in (select nc.notafiscal_id
                                        from nf_compl_serv nc
                                       where nc.notafiscal_id = en_notafiscal_id);
         --
         vn_fase := 8;
         -- Informações de complemento da nota fiscal
         delete from nf_compl_serv
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 9;
         -- Informações do cancelamento da NF
         delete from Nota_Fiscal_Canc
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 10;
         -- Informações de totais da nota fiscal
         delete from Nota_Fiscal_Total
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 11;
         -- Informações adicionais da NF
         delete from NFInfor_Adic
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 12;
         -- Informações do Fisco
         delete from Nota_Fiscal_Fisco
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 13;
         -- Destalhes das duplicatas da fatura
         for rec in c_cobr
         loop
           --
           exit when c_cobr%notfound or (c_cobr%notfound) is null;
           --
           vn_fase := 14;
           --
           delete from NFCobr_Dup
            where nfcobr_id = rec.id;
           --
         end loop;
         --
         vn_fase := 15;
         -- Informações da fatura
         delete from Nota_Fiscal_Cobr
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 16;
         --
         for rec in c_transp
         loop
           --
           exit when c_transp%notfound or (c_transp%notfound) is null;
           --
           vn_fase := 16.1;
           -- Informações de veículos do transporte
           delete from NFTransp_Veic
            where nftransp_id = rec.id;
           --
           vn_fase := 16.2;
           -- Lacres de volumes
           for rec_vol in c_vol(rec.id)
           loop
             --
             exit when c_vol%notfound or (c_vol%notfound) is null;
             --
             vn_fase := 16.3;
             --
             delete from NFTranspVol_Lacre
              where nftrvol_id = rec_vol.id;
             --
           end loop;
           --
           vn_fase := 16.4;
           -- Informações de volumes
           delete from NFTransp_Vol
            where nftransp_id = rec.id;
           --
         end loop;
         --
         vn_fase := 17;
         -- Informações de transporte
         delete from Nota_Fiscal_Transp
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 18;
         -- Informações do local coleta/entrega
         delete from Nota_Fiscal_Local
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 19;
         -- Informações de email por tipo de anexo
         for rec in c_dest
         loop
           --
           exit when c_dest%notfound or (c_dest%notfound) is null;
           --
           vn_fase := 19.1;
           --
           delete from nfdest_email
            where notafiscaldest_id = rec.id;
           --
         end loop;
         --
         vn_fase := 20;
         -- Informações do destinatário
         delete from Nota_Fiscal_Dest
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 21;
         -- Informações do emitente
         delete from Nota_Fiscal_Emit
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 22;
         -- NF referênciadas
         delete from nota_fiscal_referen
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 23;
         --
         delete from cupom_fiscal_ref
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 24;
         --
         delete from cfe_ref
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 25;
         --
         delete from nota_fiscal_pdf
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 26;
         --
         begin
           select nf.dm_arm_nfe_terc
		        , nf.dm_ind_emit
             into vn_dm_arm_nfe_terc
			    , vn_dm_ind_emit
             from nota_fiscal nf
            where nf.id = en_notafiscal_id;
         exception
           when others then
              vn_dm_arm_nfe_terc := 0; -- 0-não armazena xml, 1-sim armazena xml
			  vn_dm_ind_emit     := null;
         end;
         --
         vn_fase := 27;
         --
         --if vn_dm_arm_nfe_terc = 0 or nvl( vn_dm_ind_emit, 0 ) = 1 then --ALTERAÇÃO ARMANDO 15/09/2020
         if vn_dm_arm_nfe_terc = 0 AND nvl( vn_dm_ind_emit, 0 ) = 1 then
            --
            vn_fase := 28;
            --
            delete from nota_fiscal_mde
             where notafiscal_id = en_notafiscal_id;
            --
            vn_fase := 29;
            --
            delete from csf_cons_sit_evento cc
             where cc.csfconssit_id in (select cs.id
                                          from csf_cons_sit cs
                                         where cs.notafiscal_id = en_notafiscal_id);
            --
            vn_fase := 30;
            --
            delete from csf_cons_sit
             where notafiscal_id = en_notafiscal_id;
            --
            if nvl( vn_dm_ind_emit, 0 ) = 1 then			
               --
               vn_fase := 30.1;
               --
               delete from nfe_download_xml  
			    where notafiscal_id = en_notafiscal_id;
               --				
            end if;
            --			
         end if; -- vn_dm_arm_nf_terc = 0
         --
         vn_fase := 31;
         -- Intermediário de Serviço
         delete from nf_inter_serv
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 32;
         -- Tabela de Diferencial de Alíquota do Resumo de ICMS para Nota Fiscal de Serviço Contínuo
         delete from nfregist_analit_difal rd
          where rd.nfregistanalit_id in (select ra.id from nfregist_analit ra where ra.notafiscal_id = en_notafiscal_id);
         --
         vn_fase := 32.1;
         -- Resumo de Impostos
         delete from nfregist_analit
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 33;
         -- Detalhamento de serviços prestados na construção civil
         delete from nfs_det_constr_civil
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 34;
         -- Terminal Faturado
         delete from nf_term_fat
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 35;
         --
         for rec in c_cana
         loop
           --
           exit when c_cana%notfound or (c_cana%notfound) is null;
           --
           vn_fase := 35.1;
           -- Aquisição de cana dia
           delete from nf_aquis_cana_dia
            where nfaquiscana_id = rec.id;
           --
           vn_fase := 35.2;
           -- Aquisição de cana dia
           delete from nf_aquis_cana_ded
            where nfaquiscana_id = rec.id;
           --
         end loop;
         --
         vn_fase := 36;
         -- Aquisição de Cana
         delete from nf_aquis_cana
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 37;
         -- Informação de NF de fornecedor para exportação
         delete from inf_nf_romaneio
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 38;
         -- Complemento de operação PIS/PASEP
         delete from nf_compl_oper_pis
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 39;
         -- Complemento de operação COFINS
         delete from nf_compl_oper_cofins
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 40;
         --
         for rec in c_agend
         loop
           --
           exit when c_agend%notfound or (c_agend%notfound) is null;
           --
           vn_fase := 40.1;
           -- Observacoes do Agendamento de Transporte
           delete from nf_obs_agend_transp o
            where o.nfagendtransp_id = rec.id;
           --
           vn_fase := 40.2;
           -- PDF do Agendamento de Transporte
           delete from nf_agend_transp_pdf o
            where o.nfagendtransp_id = rec.id;
           --
         end loop;
         --
         vn_fase := 41;
         -- Agendamento de Transporte
         delete from nf_agend_transp a
          where a.notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 42;
         -- Integração com o CTMS
         delete from ctrl_intr_nfe_ctms
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 43;
         --
         for rec in c_infor
         loop
           --
           exit when c_infor%notfound or (c_infor%notfound) is null;
           --
           vn_fase := 43.1;
           -- Informações de documento fiscal
           delete from inf_prov_docto_fiscal
            where nfinforfisc_id = rec.id;
           --
         end loop;
         --
         vn_fase := 44;
         -- Informações Fiscais
         delete from nfinfor_fiscal
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 45;
         -- Informações Complementares da Nota Fiscal
         delete from nota_fiscal_compl
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 46;
         --
         delete from nota_fiscal_cce
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 47;
         --
         delete from log_nota_fiscal
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 48;
         --
         delete from log_nf_serv_cont
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 49;
         --
         delete from hist_st_nota_fiscal
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 50;
         --
         delete from r_nf_nf
          where notafiscal_id2 = en_notafiscal_id;
         --
         vn_fase := 51;
         --
         delete from r_nf_nf
          where notafiscal_id1 = en_notafiscal_id;
         --
         vn_fase := 52;
         --
         delete from nf_aut_xml
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 53;
         --
         delete from nf_forma_pgto
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 54;
         --
         delete from ret_evento_epec
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 55;
         --
--       delete from r_loteintws_nf
--        where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 56;
         --
         delete from hist_chave_nota_fiscal
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 57;
         --
         delete from r_ctrlintegrarq_nf
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 58;
         --
         delete from nf_proc_reinf
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 59;
         --
         -- Impostos e retenção de origem da nota fiscal(tab da Calc. Fiscal)
         delete from Imp_ItemNf_Orig
          where notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 60;
         --
         --inicio #62316
         delete cons_nfe_dest_cce x
          where x.consnfedest_id in (select id from cons_nfe_dest where notafiscal_id = en_notafiscal_id);
         --
         vn_fase := 61;
         --
         delete cons_nfe_dest_nf x
          where x.consnfedest_id in (select id from cons_nfe_dest where notafiscal_id = en_notafiscal_id);
         --
         vn_fase := 62;
         --
         delete from cons_nfe_dest where notafiscal_id = en_notafiscal_id;
         --#62316 fim
         vn_fase := 63;
         --
         commit;
         --
     end if;
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_excluir_dados_nf fase('||vn_fase||'):'||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
END PKB_EXCLUIR_DADOS_NF;

----------------------------------------------------------------------
-- Procedimento armazena o valor do "loggenerico_id" da nota fiscal --
----------------------------------------------------------------------
PROCEDURE PKB_GT_LOG_GENERICO_NF ( EN_LOGGENERICONF_ID IN            LOG_GENERICO_NF.ID%TYPE
                                 , EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE ) IS
   --
   i pls_integer;
   --
BEGIN
   --
   if nvl(en_loggenericonf_id,0) > 0 then
      --
      i := nvl(est_log_generico_nf.count,0) + 1;
      --
      est_log_generico_nf(i) := en_loggenericonf_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_gt_log_generico_nf: '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema );
      exception
         when others then
            null;
      end;
      --
END PKB_GT_LOG_GENERICO_NF;
-----------------------------------------------------------------------------------------------------
-- Função para verificar se a empresa soma valor de IPI na Base de Calculo do ICMS Difal
-----------------------------------------------------------------------------------------------------
function fkg_emp_calcula_icms_difal( en_empresa_id                in empresa.id%type
                                   , ed_dt_emiss                  in nota_fiscal.dt_emiss%type
                                   , en_estado_id_dest            in estado.id%type
                                   , en_orig                      in param_icms_inter_cf.orig%type										 
                                   , en_item_id                   in item.id%type
                                   , en_ncm_id                    in ncm.id%type
                                   , en_cfop_id                   in cfop.id%type
                                   )    
         return number
is
   --
   vn_soma_ipi_bc_difal      number := 0;
   en_item_id_v              item.id%type;
   en_ncm_id_v               ncm.id%type;
   en_cfop_id_v              cfop.id%type;
                                
    --
begin
   --
  begin
select distinct pi.soma_ipi_bc_difal
      into vn_soma_ipi_bc_difal
     from CSF_OWN.PARAM_ICMS_INTER_CF pi
    where pi.empresa_id = en_empresa_id
      and to_DATE(ed_dt_emiss, 'DD/MM/YYYY') >=  to_DATE(pi.dt_ini, 'DD/MM/YYYY')
      and (to_DATE(ed_dt_emiss, 'DD/MM/YYYY') <=  to_DATE(pi.dt_FIN, 'DD/MM/YYYY') OR pi.dt_FIN IS NULL) 
      and pi.estado_id  = en_estado_id_dest
      and nvl(pi.orig,0) = nvl(en_orig,0)
      and nvl(pi.item_id,0) = nvl(en_item_id,0)
      and nvl(pi.ncm_id,0) = nvl(en_ncm_id,0)
      and nvl(pi.cfop_id,0) = nvl(en_cfop_id,0);
exception
  when no_data_found then
    
    begin
select distinct pi.soma_ipi_bc_difal
      into vn_soma_ipi_bc_difal
     from CSF_OWN.PARAM_ICMS_INTER_CF pi
    where pi.empresa_id = en_empresa_id
      and to_DATE(ed_dt_emiss, 'DD/MM/YYYY') >=  to_DATE(pi.dt_ini, 'DD/MM/YYYY')
      and (to_DATE(ed_dt_emiss, 'DD/MM/YYYY') <=  to_DATE(pi.dt_FIN, 'DD/MM/YYYY') OR pi.dt_FIN IS NULL) 
      and pi.estado_id  = en_estado_id_dest
      and nvl(pi.orig,0) = nvl(en_orig,0)
      and nvl(pi.item_id,0) = nvl(en_item_id,0);
    exception
    when no_data_found then
       begin
select distinct pi.soma_ipi_bc_difal
      into vn_soma_ipi_bc_difal
     from CSF_OWN.PARAM_ICMS_INTER_CF pi
    where pi.empresa_id = en_empresa_id
      and to_DATE(ed_dt_emiss, 'DD/MM/YYYY') >=  to_DATE(pi.dt_ini, 'DD/MM/YYYY')
      and (to_DATE(ed_dt_emiss, 'DD/MM/YYYY') <=  to_DATE(pi.dt_FIN, 'DD/MM/YYYY') OR pi.dt_FIN IS NULL) 
      and pi.estado_id  = en_estado_id_dest
      and nvl(pi.orig,0) = nvl(en_orig,0)
      and nvl(pi.ncm_id,0) = nvl(en_ncm_id,0);
        exception
        when no_data_found then
          begin
select distinct pi.soma_ipi_bc_difal
      into vn_soma_ipi_bc_difal
     from CSF_OWN.PARAM_ICMS_INTER_CF pi
    where pi.empresa_id = en_empresa_id
      and to_DATE(ed_dt_emiss, 'DD/MM/YYYY') >=  to_DATE(pi.dt_ini, 'DD/MM/YYYY')
      and (to_DATE(ed_dt_emiss, 'DD/MM/YYYY') <=  to_DATE(pi.dt_FIN, 'DD/MM/YYYY') OR pi.dt_FIN IS NULL) 
      and pi.estado_id  = en_estado_id_dest
      and nvl(pi.orig,0) = nvl(en_orig,0)
      and nvl(pi.cfop_id,0) = nvl(en_cfop_id,0);
          exception 
          when no_data_found then
            begin
select distinct pi.soma_ipi_bc_difal
      into vn_soma_ipi_bc_difal
     from CSF_OWN.PARAM_ICMS_INTER_CF pi
    where pi.empresa_id = en_empresa_id
      and to_DATE(ed_dt_emiss, 'DD/MM/YYYY') >=  to_DATE(pi.dt_ini, 'DD/MM/YYYY')
      and (to_DATE(ed_dt_emiss, 'DD/MM/YYYY') <=  to_DATE(pi.dt_FIN, 'DD/MM/YYYY') OR pi.dt_FIN IS NULL) 
      and pi.estado_id  = en_estado_id_dest
      and nvl(pi.orig,0) = nvl(en_orig,0)
      and nvl(pi.item_id,0) = nvl(en_item_id,0)
      and nvl(pi.ncm_id,0) = nvl(en_ncm_id,0);
            exception 
            when no_data_found then
              begin
select distinct pi.soma_ipi_bc_difal
      into vn_soma_ipi_bc_difal
     from CSF_OWN.PARAM_ICMS_INTER_CF pi
    where pi.empresa_id = en_empresa_id
      and to_DATE(ed_dt_emiss, 'DD/MM/YYYY') >=  to_DATE(pi.dt_ini, 'DD/MM/YYYY')
      and (to_DATE(ed_dt_emiss, 'DD/MM/YYYY') <=  to_DATE(pi.dt_FIN, 'DD/MM/YYYY') OR pi.dt_FIN IS NULL) 
      and pi.estado_id  = en_estado_id_dest
      and nvl(pi.orig,0) = nvl(en_orig,0)    
      and nvl(pi.ncm_id,0) = nvl(en_ncm_id,0)
      and nvl(pi.cfop_id,0) = nvl(en_cfop_id,0);
              exception 
              when no_data_found then
                begin
select distinct pi.soma_ipi_bc_difal
      into vn_soma_ipi_bc_difal
     from CSF_OWN.PARAM_ICMS_INTER_CF pi
    where pi.empresa_id = en_empresa_id
      and to_DATE(ed_dt_emiss, 'DD/MM/YYYY') >=  to_DATE(pi.dt_ini, 'DD/MM/YYYY')
      and (to_DATE(ed_dt_emiss, 'DD/MM/YYYY') <=  to_DATE(pi.dt_FIN, 'DD/MM/YYYY') OR pi.dt_FIN IS NULL) 
      and pi.estado_id  = en_estado_id_dest
      and nvl(pi.orig,0) = nvl(en_orig,0)
      and nvl(pi.item_id,0) = nvl(en_item_id,0)
      and nvl(pi.cfop_id,0) = nvl(en_cfop_id,0);
                exception 
                when no_data_found then
                  begin
select distinct pi.soma_ipi_bc_difal
      into vn_soma_ipi_bc_difal
     from CSF_OWN.PARAM_ICMS_INTER_CF pi
    where pi.empresa_id = en_empresa_id
      and to_DATE(ed_dt_emiss, 'DD/MM/YYYY') >=  to_DATE(pi.dt_ini, 'DD/MM/YYYY')
      and (to_DATE(ed_dt_emiss, 'DD/MM/YYYY') <=  to_DATE(pi.dt_FIN, 'DD/MM/YYYY') OR pi.dt_FIN IS NULL) 
      and pi.estado_id  = en_estado_id_dest
      and nvl(pi.orig,0) = nvl(en_orig,0);
                  exception 
                  when no_data_found then
                     return 0;
                     
                  end;
                end;
              end;
            end;
          end;  
       end;
    end;
when others then
   return 0;
end;  
   --
        return (vn_soma_ipi_bc_difal);  
   --
exception
   when no_data_found then
      return 0;
   when others then
      raise_application_error(-20101, 'Problemas em fkg_emp_calcula_icms_difal. Erro = '||sqlerrm);
end fkg_emp_calcula_icms_difal;
------------------------------------------
-- Procedimento finaliza o Log Genérico --
------------------------------------------
PROCEDURE PKB_FINALIZA_LOG_GENERICO_NF IS
BEGIN
   --
   gn_processo_id := null;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_finaliza_log_generico_nf: '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema );
      exception
         when others then
            null;
      end;
      --
END PKB_FINALIZA_LOG_GENERICO_NF;

--------------------------------------------------------------------------
-- Procedimento de registro de log de erros na validação da nota fiscal --
--------------------------------------------------------------------------
PROCEDURE PKB_LOG_GENERICO_NF ( SN_LOGGENERICONF_ID     OUT NOCOPY LOG_GENERICO_NF.ID%TYPE
                              , EV_MENSAGEM        IN            LOG_GENERICO_NF.MENSAGEM%TYPE
                              , EV_RESUMO          IN            LOG_GENERICO_NF.RESUMO%TYPE
                              , EN_TIPO_LOG        IN            CSF_TIPO_LOG.CD_COMPAT%TYPE      DEFAULT 1
                              , EN_REFERENCIA_ID   IN            LOG_GENERICO_NF.REFERENCIA_ID%TYPE  DEFAULT NULL
                              , EV_OBJ_REFERENCIA  IN            LOG_GENERICO_NF.OBJ_REFERENCIA%TYPE DEFAULT NULL
                              , EN_EMPRESA_ID      IN            EMPRESA.ID%TYPE                  DEFAULT NULL
                              , EN_DM_IMPRESSA     IN            LOG_GENERICO_NF.DM_IMPRESSA%TYPE    DEFAULT 0
                              )
IS
   --
   vn_fase          number := 0;
   vn_empresa_id    Empresa.Id%type;
   vn_csftipolog_id csf_tipo_log.id%type := null;
   pragma           autonomous_transaction;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(gn_processo_id,0) = 0 then
      select processo_seq.nextval
        into gn_processo_id
        from dual;
   end if;
   --
   vn_empresa_id := nvl(en_empresa_id, gn_empresa_id);
   --
   if nvl(en_tipo_log,0) > 0 and ev_mensagem is not null then
      --
      vn_fase := 2;
      --
      vn_csftipolog_id := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => en_tipo_log );
      --
      vn_fase := 3;
      --
      select loggenericonf_seq.nextval
        into sn_loggenericonf_id
        from dual;
      --
      vn_fase := 4;
      --
      insert into log_generico_nf ( id
                                  , processo_id
                                  , dt_hr_log
                                  , mensagem
                                  , referencia_id
                                  , obj_referencia
                                  , resumo
                                  , dm_impressa
                                  , dm_env_email
                                  , csftipolog_id
                                  , empresa_id
                                  )
                           values
                                  ( sn_loggenericonf_id     -- Valor de cada log de validação
                                  , gn_processo_id        -- Valor ID do processo de integração
                                  , sysdate               -- Sempre atribui a data atual do sistema
                                  , ev_mensagem           -- Mensagem do log
                                  , en_referencia_id      -- Id de referência que gerou o log
                                  , ev_obj_referencia     -- Objeto do Banco que gerou o log
                                  , ev_resumo
                                  , en_dm_impressa
                                  , 0
                                  , vn_csftipolog_id
                                  , vn_empresa_id
                                  );
      --
      vn_fase := 5;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_log_generico_nf fase('||vn_fase||'):'||sqlerrm;
      --
       declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem        => gv_mensagem_log
                                          , ev_resumo          => gv_mensagem_log
                                          , en_tipo_log        => erro_de_sistema 
                                          );
      exception
         when others then
            null;
      end;
      --
END PKB_LOG_GENERICO_NF;

----------------------------------------------------------------------
-- Procedimento de integração de relacionamento entre Notas Fiscais --
----------------------------------------------------------------------
PROCEDURE PKB_INTEGR_R_NF_NF ( EST_LOG_GENERICO_NF    IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                             , EST_ROW_R_NF_NF     IN OUT NOCOPY  R_NF_NF%ROWTYPE 
                             ) 
IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_r_nf_nf.notafiscal_id1,0) <= 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal de Origem.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log||gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_sistema
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if nvl(est_row_r_nf_nf.notafiscal_id2,0) <= 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal de Destino.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log||gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_sistema
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_r_nf_nf.notafiscal_id1,0) > 0
      and nvl(est_row_r_nf_nf.notafiscal_id2,0) > 0 then
      --
      vn_fase := 99.1;
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         select rnfnf_seq.nextval
           into est_row_r_nf_nf.id
           from dual;
         --
         insert into r_nf_nf ( id
                             , notafiscal_id1
                             , notafiscal_id2
                             )
                      values ( est_row_r_nf_nf.id
                             , est_row_r_nf_nf.notafiscal_id1
                             , est_row_r_nf_nf.notafiscal_id2
                             );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_INTEGR_R_NF_NF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_R_NF_NF;

---------------------------------------------------------------------------------------------------
-- Procedimento de integração da Nota Fiscal para registro da Carta de Correção Eletrônica - CCE --
---------------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_CCE ( EST_LOG_GENERICO_NF          IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                     , EST_ROW_NOTA_FISCAL_CCE   IN OUT NOCOPY  NOTA_FISCAL_CCE%ROWTYPE 
                                     ) 
IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_dm_st_proc      nota_fiscal.dm_st_proc%type;
   vd_dt_aut_nfe      date;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_nota_fiscal_cce.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para registro da Carta de Correção Eletrônica.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log||gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_sistema
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   est_row_nota_fiscal_cce.correcao := trim(replace(pk_csf.fkg_converte(est_row_nota_fiscal_cce.correcao), chr(10), ''));
   --
   vn_fase := 3;
   --
   if est_row_nota_fiscal_cce.correcao is null then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para registro da Carta de Correção Eletrônica.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log||gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_sistema
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   if length(est_row_nota_fiscal_cce.correcao) < 15 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'Deve ser informado pelo menos 15 caracteres para o texto de correção da CCe.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log||gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_sistema
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   -- recupera a data de autorização da NFe
   begin
      --
      select nvl(dt_hr_recbto, dt_aut_sefaz)
        into vd_dt_aut_nfe
        from nota_fiscal
       where id = est_row_nota_fiscal_cce.notafiscal_id;
      --
   exception
      when others then
         vd_dt_aut_nfe := sysdate;
   end;
   --
   vn_fase := 6;
   --
   if est_row_nota_fiscal_cce.DT_HR_EVENTO <= vd_dt_aut_nfe then
      est_row_nota_fiscal_cce.DT_HR_EVENTO := sysdate;
   end if;
   --
   vn_fase := 7;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_dm_st_proc := 4; -- Erro de validação
      --
   else
      --
      vn_dm_st_proc := 1; -- Validado
      --
   end if;
   --
   vn_fase := 8;
   --
   if nvl(est_row_nota_fiscal_cce.notafiscal_id,0) > 0
      and est_row_nota_fiscal_cce.correcao is not null
      then
      --
      vn_fase := 8.1;
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 8.2;
	 --
         select notafiscalcce_seq.nextval
           into est_row_nota_fiscal_cce.ID
           from dual;
         --
         insert into nota_fiscal_cce ( ID
                                     , NOTAFISCAL_ID
                                     , DM_ST_INTEGRA
                                     , DM_ST_PROC
                                     , DT_HR_EVENTO
                                     , CORRECAO
                                     )
                              values ( est_row_nota_fiscal_cce.ID
                                     , est_row_nota_fiscal_cce.NOTAFISCAL_ID
                                     , est_row_nota_fiscal_cce.DM_ST_INTEGRA
                                     , vn_dm_st_proc
                                     , est_row_nota_fiscal_cce.DT_HR_EVENTO
                                     , est_row_nota_fiscal_cce.CORRECAO
                                     );
         --
      else
         --
         vn_fase := 8.3;
	 --
         update nota_fiscal_cce set correcao      = est_row_nota_fiscal_cce.correcao
                                  , DT_HR_EVENTO  = est_row_nota_fiscal_cce.DT_HR_EVENTO
                                  , dm_st_proc    = vn_dm_st_proc
          where id = est_row_nota_fiscal_cce.id;
          --
      end if;
      --
      vn_fase := 8.4;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nota_fiscal_cce fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log||gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_CCE;

------------------------------------------------------------------------------------------------
-- Procedimento de integração da Nota Fiscal para registro do Manifesto do Destinatario - MDE --
------------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_MDE ( EST_LOG_GENERICO_NF          IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                     , EST_ROW_NOTA_FISCAL_MDE   IN OUT NOCOPY  NOTA_FISCAL_MDE%ROWTYPE )IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_dm_situacao     nota_fiscal_mde.dm_situacao%type;
   vv_cd              tipo_evento_sefaz.cd%type := null;
   vv_resumo          log_generico_nf.resumo%type;
   vn_dm_ind_emit     nota_fiscal.dm_ind_emit%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_nota_fiscal_mde.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para registro do Manifesto do destinatário.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   vv_cd := pk_csf.fkg_tipoeventosefaz_cd(est_row_nota_fiscal_mde.tipoeventosefaz_id);
   --
   vn_fase := 4;
   --
   if nvl(vv_cd,'X') = '210240' -- Operação não Realizada
      and est_row_nota_fiscal_mde.just is null
      and nvl(est_log_generico_nf.count,0) = 0
      then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'Deve ser informado justificativa de o porque a operação não foi realizada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(vv_cd,'X') = '210240' -- Operação não Realizada
      and nvl(length(est_row_nota_fiscal_mde.just),0) < 15
      and nvl(est_log_generico_nf.count,0) = 0
      then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Deve ser informado pelo menos 15 caracteres para o texto da justificativa de o porque a operação não foi realizada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   if nvl(vv_cd,'X') <> '210240' -- Operação não Realizada
      and est_row_nota_fiscal_mde.just is not null
      and nvl(est_log_generico_nf.count,0) = 0 
      then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := 'Deve ser informado a justificativa somente no evento de "Operação não Realizada".';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6.2;
   --
   begin
      --
      select dm_ind_emit into vn_dm_ind_emit
        from nota_fiscal
       where id = est_row_nota_fiscal_mde.notafiscal_id;
      --
   exception
      when others then
         vn_dm_ind_emit := 0;
   end;
   --
   if nvl(vn_dm_ind_emit,0) <> 1 then
      --
      gv_mensagem_log := 'NFe não é de Terceiro, então não seja gerado o evento.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_dm_situacao := 4; -- Erro de validação
      --
   else
      --
      vn_dm_situacao := 1; -- Validado
      --
   end if;
   --
   vn_fase := 8;
   --
   if nvl(est_row_nota_fiscal_mde.notafiscal_id,0) > 0
      and nvl(est_row_nota_fiscal_mde.tipoeventosefaz_id,0) > 0
      and est_row_nota_fiscal_mde.dt_hr_evento is not null
      then
      --
      vn_fase := 9;
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 10;
	 --
         select notafiscalmde_seq.nextval
           into est_row_nota_fiscal_mde.ID
           from dual;
         --
         vn_fase := 10.1;
         --
         -- Checa se a nota já foi registrada anteriormente.
         if not fkg_ck_nota_fiscal_mde_registr(est_row_nota_fiscal_mde.notafiscal_id, est_row_nota_fiscal_mde.tipoeventosefaz_id) then
            --
         insert into nota_fiscal_mde ( id
                                     , notafiscal_id
                                     , dm_situacao
                                     , dt_hr_evento
                                     , tipoeventosefaz_id
                                     , just
                                     , lotemde_id
                                     , seq_evento
                                     , id_tag_chave
                                     , msgwebserv_id
                                     , cod_msg
                                     , motivo_ret
                                     , dt_hr_reg_evento
                                     , nro_prot
                                     , dm_tipo_integra									 
                                     )
                              values ( est_row_nota_fiscal_mde.id                 -- ID
                                     , est_row_nota_fiscal_mde.notafiscal_id      -- NOTAFISCAL_ID
                                     , vn_dm_situacao                             -- DM_SITUACAO
                                     , est_row_nota_fiscal_mde.dt_hr_evento       -- DT_HR_EVENTO
                                     , est_row_nota_fiscal_mde.tipoeventosefaz_id -- TIPOEVENTOSEFAZ_ID
                                     , est_row_nota_fiscal_mde.just               -- JUST
                                     , est_row_nota_fiscal_mde.lotemde_id         -- LOTEMDE_ID
                                     , est_row_nota_fiscal_mde.seq_evento         -- SEQ_EVENTO
                                     , est_row_nota_fiscal_mde.id_tag_chave       -- ID_TAG_CHAVE
                                     , est_row_nota_fiscal_mde.msgwebserv_id      -- MSGWEBSERV_ID
                                     , est_row_nota_fiscal_mde.cod_msg            -- COD_MSG
                                     , est_row_nota_fiscal_mde.motivo_ret         -- MOTIVO_RET
                                     , est_row_nota_fiscal_mde.dt_hr_reg_evento   -- DT_HR_REG_EVENTO
                                     , est_row_nota_fiscal_mde.nro_prot           -- NRO_PROT
                                     , 0 -- Tipo de integração do evento. (0-Gerado automático pela aplicação/1-Manualmente no portal/2-Integração Webservice)
                                     );
         --
         end if;                               
         --
      else
         --
         vn_fase := 11;
	 --
         if vn_dm_situacao = 4 then                 
         update nota_fiscal_mde set just        = est_row_nota_fiscal_mde.just
                                  , dm_situacao = vn_dm_situacao
          where id = est_row_nota_fiscal_mde.id;
         else
           update nota_fiscal_mde set just        = est_row_nota_fiscal_mde.just
                                    , dm_situacao = vn_dm_situacao
            where id          = est_row_nota_fiscal_mde.id
              and dm_situacao = 0
              and nota_fiscal_mde.lotemde_id is null;
         END IF;
          --
      end if;
      --
      vn_fase := 12;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nota_fiscal_mde fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => null
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_MDE;

-------------------------------------------------------------------------------
-- Procedimento de Integração de dados Complementares do Item da Nota Fiscal --
-------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_ITEMNF_COMPL ( EST_LOG_GENERICO_NF    IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                  , EST_ROW_ITEMNF_COMPL   IN OUT NOCOPY  ITEMNF_COMPL%ROWTYPE
                                  , EN_NOTAFISCAL_ID       IN             NOTA_FISCAL.ID%TYPE
				                      , EV_COD_CLASS           IN             CLASS_CONS_ITEM_CONT.COD_CLASS%TYPE
				                      , EN_DM_IND_REC          IN             ITEM_NOTA_FISCAL.DM_IND_REC%TYPE
				                      , EV_COD_PART_ITEM       IN             PESSOA.COD_PART%TYPE
				                      , EN_DM_IND_REC_COM      IN             ITEM_NOTA_FISCAL.DM_IND_REC_COM%TYPE
				                      , EV_COD_NAT             IN             NAT_OPER.COD_NAT%TYPE
                                  , EN_MULTORG_ID          IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase                    number := 0;
   vn_loggenerico_id          log_generico_nf.id%type;
   vn_classconsitemcont_id    class_cons_item_cont.id%type;
   vn_pessoa_id               pessoa.id%type;
   vn_natoper_id              nat_oper.id%type;
   vn_itemnf_id               itemnf_compl.itemnf_id%type := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_itemnf_compl.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o Item da Nota Fiscal para registro Complemento do Item da Nota Fiscal.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log||gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_sistema
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if nvl(est_row_itemnf_compl.id_item_erp,0) < 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Identificador do Item da Nota Fiscal no ERP não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log||gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   vn_classconsitemcont_id := pk_csf.fkg_class_cons_item_cont_id ( ev_cod_class => trim(ev_cod_class) );
   --
   vn_fase := 4;
   --
   if nvl(vn_classconsitemcont_id,0) <= 0
      and trim(ev_cod_class) is not null then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'Código da Classe de Consumo do Item de Serviço Contínuo está inválido ('||ev_cod_class||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   if en_dm_ind_rec is not null
      and nvl(en_dm_ind_rec,-1) not in (0,1) then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Indicador da Receita de Energia Elétrica está inválido ('||en_dm_ind_rec||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   vn_pessoa_id := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id => en_multorg_id
                                                 , ev_cod_part   => trim(ev_cod_part_item) );
   --
   vn_fase := 7;
   --
   if nvl(vn_pessoa_id,0) <= 0
      and trim(ev_cod_part_item) is not null then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := 'Código da Pessoa, Terceiro em Energia Elétrica, está inválido ('||ev_cod_part_item||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   --
   if en_dm_ind_rec_com is not null
      and en_dm_ind_rec_com not in (0, 1, 2, 3, 4, 5, 9) then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := 'Indicador Comercial da Receita de Energia Elétrica está inválido ('||en_dm_ind_rec_com||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   vn_natoper_id := pk_csf.fkg_Nat_Oper_id ( en_multorg_id => en_multorg_id
                                           , ev_cod_nat    => trim(ev_cod_nat) );
   --
   vn_fase := 10;
   --
   if nvl(vn_natoper_id,0) <= 0
      and trim(ev_cod_nat) is not null then
      --
      vn_fase := 10.1;
      --
      gv_mensagem_log := 'Código da natureza de Operação ('||ev_cod_nat||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11;
   -- Atualiza dados do item da nota fiscal
   update item_nota_fiscal set classconsitemcont_id = vn_classconsitemcont_id
    where id = est_row_itemnf_compl.itemnf_id
	  and classconsitemcont_id is null;
   --
   vn_fase := 12;
   --
   update item_nota_fiscal set dm_ind_rec = en_dm_ind_rec
    where id = est_row_itemnf_compl.itemnf_id
	  and dm_ind_rec is null;
   --
   vn_fase := 13;
   --
   update item_nota_fiscal set pessoa_id = vn_pessoa_id
    where id = est_row_itemnf_compl.itemnf_id
	  and pessoa_id is null;
   --
   vn_fase := 14;
   --
   update item_nota_fiscal set dm_ind_rec_com = en_dm_ind_rec_com
    where id = est_row_itemnf_compl.itemnf_id
	  and dm_ind_rec_com is null;
   --
   vn_fase := 15;
   --
   update item_nota_fiscal set natoper_id = vn_natoper_id
    where id = est_row_itemnf_compl.itemnf_id
	  and natoper_id is null;
   --
   vn_fase := 16;
   --
   if nvl(est_row_itemnf_compl.id_item_erp,0) > 0
      and nvl(est_row_itemnf_compl.itemnf_id,0) > 0 then
      --
      vn_fase := 16.1;
      --
      begin
         select itemnf_id
           into vn_itemnf_id
           from itemnf_compl
          where itemnf_id = est_row_itemnf_compl.itemnf_id;
      exception
         when no_data_found then
            vn_itemnf_id := null;
         when too_many_rows then
            vn_itemnf_id := est_row_itemnf_compl.itemnf_id;
      end;
      --
      if nvl(gn_tipo_integr,0) = 1 and nvl(vn_itemnf_id,0) = 0 then
         --
	 vn_fase := 16.2;
	 --
	 select itemnfcompl_seq.nextval
	   into est_row_itemnf_compl.id
	   from dual;
	 --
	 vn_fase := 16.3;
	 --
         insert into itemnf_compl ( id
                                  , itemnf_id
                                  , id_item_erp
                                  )
                           values ( est_row_itemnf_compl.id
                                  , est_row_itemnf_compl.itemnf_id
                                  , est_row_itemnf_compl.id_item_erp
				  );
	 --
      else
         --
	 vn_fase := 16.4;
	 --
	 update itemnf_compl 
            set id_item_erp = est_row_itemnf_compl.id_item_erp
	  where id = est_row_itemnf_compl.id;
	 --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_itemnf_compl fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNF_COMPL;

-----------------------------------------------------------------------
-- Procedimento de Integração de dados Complementares da Nota Fiscal --
-----------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_COMPL ( EST_LOG_GENERICO_NF        IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                       , EST_ROW_NOTA_FISCAL_COMPL  IN OUT NOCOPY  NOTA_FISCAL_COMPL%ROWTYPE
                                       , EN_NOTAFISCAL_ID           IN             NOTA_FISCAL.ID%TYPE
                                       , EN_NRO_NF                  IN             NOTA_FISCAL.NRO_NF%TYPE
                                       , EV_NRO_CHAVE_NFE           IN             NOTA_FISCAL.NRO_CHAVE_NFE%TYPE
                                       , EN_SUB_SERIE               IN             NOTA_FISCAL.SUB_SERIE%TYPE
                                       , EV_COD_MOD                 IN             MOD_FISCAL.COD_MOD%TYPE
                                       , EV_COD_INFOR               IN             INFOR_COMP_DCTO_FISCAL.COD_INFOR%TYPE
                                       , EV_COD_CTA                 IN             NOTA_FISCAL.COD_CTA%TYPE
                                       , EV_COD_CONS                IN             COD_CONS_ITEM_CONT.COD_CONS%TYPE
                                       , EN_DM_TP_LIGACAO           IN             NOTA_FISCAL.DM_TP_LIGACAO%TYPE
                                       , EV_DM_COD_GRUPO_TENSAO     IN             NOTA_FISCAL.DM_COD_GRUPO_TENSAO%TYPE
                                       , EN_DM_TP_ASSINANTE         IN             NOTA_FISCAL.DM_TP_ASSINANTE%TYPE
                                       , EN_NRO_ORD_EMB             IN             NOTA_FISCAL.NRO_ORD_EMB%TYPE
                                       , EN_SEQ_NRO_ORD_EMB         IN             NOTA_FISCAL.SEQ_NRO_ORD_EMB%TYPE
                                       , EN_MULTORG_ID              IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase                    number := 0;
   vn_loggenerico_id          log_generico_nf.id%type;
   vn_dig_verif_chave         nota_fiscal.dig_verif_chave%type;
   vn_modfiscal_id            mod_fiscal.id%type;
   vn_inforcompdctofiscal_id  infor_comp_dcto_fiscal.id%type;
   vn_codconsitemcont_id      cod_cons_item_cont.id%type;
   vn_dm_ind_emit             nota_fiscal.dm_ind_emit%type;
   vn_uf_ibge_emit            nota_fiscal.uf_ibge_emit%type;
   vv_cnpj_empr               pessoa.cod_part%type;
   vd_dt_emiss                nota_fiscal.dt_emiss%type;
   vv_serie                   nota_fiscal.serie%type;
   vn_dm_forma_emiss          nota_fiscal.dm_forma_emiss%type;
   vv_cnpj_pessoa             pessoa.cod_part%type;
   vv_nro_chave_nfe_new       nota_fiscal.nro_chave_nfe%type;
   vv_nro_chave_nfe_old       nota_fiscal.nro_chave_nfe%type;
   vn_empresa_id              nota_fiscal.empresa_id%type;
   vn_cnf_nfe                 nota_fiscal.cnf_nfe%type;
   vn_qtde_erro_chave         number := 0;
   vv_cd_sitdocto             sit_docto.cd%type;
   vn_dm_legado               nota_fiscal.dm_legado%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   vn_modfiscal_id := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => ev_cod_mod );
   --
   vn_fase := 2;
   --
   -- Busca dados da nota fiscal
   begin
      select nf.dm_ind_emit
           , nf.uf_ibge_emit
           , pk_csf.fkg_cnpj_ou_cpf_empresa(nf.empresa_id)
           , nf.empresa_id
           , nf.dt_emiss
           , nf.serie
           , nf.dm_forma_emiss
           , pk_csf.fkg_cnpjcpf_pessoa_id ( nf.pessoa_id )
           , sd.cd
           , nf.dm_legado
           , nf.nro_chave_nfe
        into vn_dm_ind_emit
           , vn_uf_ibge_emit
           , vv_cnpj_empr
           , vn_empresa_id
           , vd_dt_emiss
           , vv_serie
           , vn_dm_forma_emiss
           , vv_cnpj_pessoa
           , vv_cd_sitdocto
           , vn_dm_legado
           , vv_nro_chave_nfe_old
        from nota_fiscal nf
           , sit_docto   sd
       where nf.id = en_notafiscal_id
         and sd.id = nf.sitdocto_id;
   exception
      when others then
         vn_dm_ind_emit       := null;
         vn_uf_ibge_emit      := null;
         vv_cnpj_empr         := null;
         vd_dt_emiss          := null;
         vv_serie             := null;
         vn_dm_forma_emiss    := null;
         vv_cnpj_pessoa       := null;
         vv_cd_sitdocto       := null;
         vn_dm_legado         := null;
         vv_nro_chave_nfe_old := null;
   end;
   --
   vn_fase := 3;
   --
   if nvl(est_row_nota_fiscal_compl.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 3;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para registro de Complemento da Nota Fiscal.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Procedimento para Validar ou Validar e Criar NRO_CHAVE_NFE da Nota Fiscal
   if nvl(est_row_nota_fiscal_compl.notafiscal_id,0) > 0 then
   --
      pkb_valida_cria_nro_chave_nfe ( est_log_generico_nf  => est_log_generico_nf
                                    , en_notafiscal_id     => est_row_nota_fiscal_compl.notafiscal_id
                                    , ev_nro_chave_nfe_new => ev_nro_chave_nfe
                                    --, en_cria_chave        => 0 -- 0 - Não / 1- Sim
                                    , ev_rotina_orig       => 'pk_csf_api.pkb_integr_nota_fiscal_compl'
                                    );
      --
      end if;
      --
   if nvl(est_row_nota_fiscal_compl.id_erp,0) < 0 then
      --
      vn_fase := 17.1;
      --
      gv_mensagem_log := 'Identificador da Nota Fiscal no ERP não pode ser negativo ('||est_row_nota_fiscal_compl.id_erp||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 18;
   -- valida informações da SUB_SERIE
   if nvl(en_sub_serie,0) < 0 then
      --
      vn_fase := 18.1;
      --
      gv_mensagem_log := 'Sub-série da Nota Fiscal não pode ser negativa ('||en_sub_serie||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 19;
   --
   if trim(ev_cod_infor) is not null then
      --
      vn_fase := 19.1;
      --
      vn_inforcompdctofiscal_id := pk_csf.fkg_Infor_Comp_Dcto_Fiscal_id ( en_multorg_id => en_multorg_id
                                                                        , en_cod_infor  => trim(ev_cod_infor) );
      --
      vn_fase := 19.2;
      --
      if nvl(vn_inforcompdctofiscal_id,0) <= 0
         and trim(ev_cod_infor) is not null then
         --
	      vn_fase := 19.3;
         --
         gv_mensagem_log := 'Código da Informação Complementar do Documento Fiscal ('||ev_cod_infor||') está inválido.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
	 --
      end if;
      --
   end if;
   --
   vn_fase := 20;
   --
   if trim(ev_cod_cons) is not null then
      --
      vn_fase := 20.1;
      --
      vn_codconsitemcont_id := pk_csf.fkg_codconsitemcont_id ( en_modfiscal_id => vn_modfiscal_id
                                                             , ev_cod_cons     => trim(ev_cod_cons) );
      --
      vn_fase := 20.2;
      --
      if nvl(vn_codconsitemcont_id,0) <= 0 and trim(ev_cod_cons) is not null then
         --
	      vn_fase := 20.3;
         --
         gv_mensagem_log := 'Código de Consumo do Item de Serviço Contínuo ('||ev_cod_cons||') está inválido.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
	 --
      end if;
      --
   end if;
   --
   vn_fase := 21;
   --
   if nvl(en_dm_tp_ligacao,-1) > 0
      and nvl(en_dm_tp_ligacao,0) not in (1, 2, 3) then
      --
      vn_fase := 21.2;
      --
      gv_mensagem_log := 'Tipo de ligação de energia elétrica ('||en_dm_tp_ligacao||') está incorreto, deve ser 1, 2 ou 3.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 23;
   --
   if ev_dm_cod_grupo_tensao is not null
      and ev_dm_cod_grupo_tensao not in ('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14')
      then
      --
      vn_fase := 23.1;
      --
      gv_mensagem_log := 'Código do Grupo de Tensão de energia elétrica ('||ev_dm_cod_grupo_tensao||') está incorreto, deve ser 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13 ou 14.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 24;
   --
   if nvl(en_dm_tp_assinante,-1) > 0
      and en_dm_tp_assinante not in (1, 2, 3, 4, 5, 6)
      then
      --
      vn_fase := 24.1;
      --
      gv_mensagem_log := 'Tipo de Assinante de energia elétrica ('||en_dm_tp_assinante||') está incorreto, deve ser 1, 2, 3, 4, 5 ou 6.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
	                     , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 25;
   --
   if nvl(en_nro_ord_emb,0) < 0 then
      --
      vn_fase := 25.1;
      --
      gv_mensagem_log := 'Número da Ordem de Embarque não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 26;
   --
   if nvl(en_seq_nro_ord_emb,0) < 0 then
      --
      vn_fase := 26.1;
      --
      gv_mensagem_log := 'Seqüência do Número da Ordem de Embarque não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 27;
   --
   -- Atualiza dados na tabela nota_fiscal
   update nota_fiscal
      set sub_serie              = en_sub_serie
        , inforcompdctofiscal_id = vn_inforcompdctofiscal_id
        , cod_cta                = ev_cod_cta
        , codconsitemcont_id     = vn_codconsitemcont_id
        , nro_ord_emb            = en_nro_ord_emb
        , seq_nro_ord_emb        = en_seq_nro_ord_emb
    where id = en_notafiscal_id;
   --
   vn_fase := 28;
   --
   if nvl(en_dm_tp_ligacao,-1) in (1, 2, 3) then
      --
      update nota_fiscal
         set dm_tp_ligacao = en_dm_tp_ligacao
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 29;
   --
   if ev_dm_cod_grupo_tensao in ('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14') then
      --
      update nota_fiscal
         set dm_cod_grupo_tensao = ev_dm_cod_grupo_tensao
       where id = en_notafiscal_id
         and dm_cod_grupo_tensao is null;
      --
   end if;
   --
   vn_fase := 30;
   --
   if nvl(en_dm_tp_assinante,-1) in (1, 2, 3, 4, 5, 6) then
      --
      update nota_fiscal
         set dm_tp_assinante = en_dm_tp_assinante
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 31;
   --
   if nvl(est_row_nota_fiscal_compl.notafiscal_id,0) > 0
      and nvl(est_row_nota_fiscal_compl.id_erp,0) > 0
      then
      --
      vn_fase := 31.1;
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
	       vn_fase := 31.2;
	 --
	 select notafiscalcompl_seq.nextval
	   into est_row_nota_fiscal_compl.id
	   from dual;
	 --
	       vn_fase := 31.3;
	 --
	 insert into nota_fiscal_compl ( id
	                               ,notafiscal_id
 				                   , id_erp
				                   )
    values ( est_row_nota_fiscal_compl.id
	        ,est_row_nota_fiscal_compl.notafiscal_id
            ,est_row_nota_fiscal_compl.id_erp
				       );
         --
      else
         --
	       vn_fase := 31.4;
	 --
      	 update nota_fiscal_compl
            set id_erp = est_row_nota_fiscal_compl.id_erp
	  where id = est_row_nota_fiscal_compl.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nota_fiscal_compl fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_COMPL;

----------------------------------------------------------------------------------------------
-- Procedimento de Integração dos dados complementares de transporte do item da nota fiscal --
----------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_ITEMNF_COMPL_TRANSP ( EST_LOG_GENERICO_NF             IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                         , EST_ROW_ITEMNF_COMPL_TRANSP  IN OUT NOCOPY  ITEMNF_COMPL_TRANSP%ROWTYPE
                                         , EN_NOTAFISCAL_ID             IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_ItemNf_Compl_transp.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado ITEM da Nota Fiscal para registro Complemento de Transporte do Item.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if nvl(est_row_itemnf_compl_transp.qtde_prod,0) < 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Informações Complementares de Transporte do Item: Quantidade de Produtos não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if nvl(est_row_itemnf_compl_transp.qtde_emb,0) < 0 then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Informações Complementares de Transporte do Item: Quantidade de Embalagens não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_itemnf_compl_transp.peso_bruto,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'Informações Complementares de Transporte do Item: Peso Bruto não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_itemnf_compl_transp.peso_liq,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Informações Complementares de Transporte do Item: Peso líquido não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   if nvl(est_row_itemnf_compl_transp.volume,0) < 0 then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := 'Informações Complementares de Transporte do Item: Volume não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   -- Se existe registro de Log e o Tipo de validação é 1 (valida e insere)
   -- então registra a informação sobre a Aquisição de Cana diário
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   if nvl(est_row_itemnf_compl_transp.itemnf_id,0) > 0
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 8;
         --
         select itemnfcompltransp_seq.nextval
           into est_row_itemnf_compl_transp.id
           from dual;
         --
         vn_fase := 9;
         --
         insert into itemnf_compl_transp ( id
                                         , itemnf_id
                                         , qtde_emb
                                         , peso_bruto
                                         , peso_liq
                                         , volume
                                         , qtde_prod
                                         , s_num_cot
                                         , cnl_cli
                                         , cnl_cli_des
                                         , alq_pis
                                         , dm_ind_rec_pis
                                         , alq_cofins
                                         , dm_ind_rec_cofins
                                         )
                                  values ( est_row_itemnf_compl_transp.id
                                         , est_row_itemnf_compl_transp.itemnf_id
                                         , nvl(est_row_itemnf_compl_transp.qtde_emb,0)
                                         , nvl(est_row_itemnf_compl_transp.peso_bruto,0)
                                         , nvl(est_row_itemnf_compl_transp.peso_liq,0)
                                         , nvl(est_row_itemnf_compl_transp.volume,0)
                                         , nvl(est_row_itemnf_compl_transp.qtde_prod,0)
                                         , est_row_itemnf_compl_transp.s_num_cot
                                         , est_row_itemnf_compl_transp.cnl_cli
                                         , est_row_itemnf_compl_transp.cnl_cli_des
                                         , nvl(est_row_itemnf_compl_transp.alq_pis,0)
                                         , est_row_itemnf_compl_transp.dm_ind_rec_pis
                                         , nvl(est_row_itemnf_compl_transp.alq_cofins,0)
                                         , est_row_itemnf_compl_transp.dm_ind_rec_cofins
                                         );
         --
      else
         --
         vn_fase := 10;
         --
         update itemnf_compl_transp set itemnf_id          = est_row_itemnf_compl_transp.itemnf_id
                                      , qtde_emb           = nvl(est_row_itemnf_compl_transp.qtde_emb,0)
                                      , peso_bruto         = nvl(est_row_itemnf_compl_transp.peso_bruto,0)
                                      , peso_liq           = nvl(est_row_itemnf_compl_transp.peso_liq,0)
                                      , volume             = nvl(est_row_itemnf_compl_transp.volume,0)
                                      , qtde_prod          = nvl(est_row_itemnf_compl_transp.qtde_prod,0)
                                      , s_num_cot          = est_row_itemnf_compl_transp.s_num_cot
                                      , cnl_cli            = est_row_itemnf_compl_transp.cnl_cli
                                      , cnl_cli_des        = est_row_itemnf_compl_transp.cnl_cli_des
                                      , alq_pis            = nvl(est_row_itemnf_compl_transp.alq_pis,0)
                                      , dm_ind_rec_pis     = est_row_itemnf_compl_transp.dm_ind_rec_pis
                                      , alq_cofins         = nvl(est_row_itemnf_compl_transp.alq_cofins,0)
                                      , dm_ind_rec_cofins  = est_row_itemnf_compl_transp.dm_ind_rec_cofins
          where id = est_row_itemnf_compl_transp.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_ItemNf_Compl_transp fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNF_COMPL_TRANSP;

---------------------------------
-- Integra os dados com o CTMS --
---------------------------------
PROCEDURE PKB_INTEGR_CTMS ( EST_LOG_GENERICO_NF   IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                          , EN_NOTAFISCAL_ID   IN             NOTA_FISCAL.ID%TYPE
                          , EN_DM_TIPO         IN             CTRL_INTR_NFE_CTMS.DM_TIPO%TYPE ) IS
   --
   vn_fase                number := 0;
   vn_loggenerico_id      log_generico_nf.id%type;
   vn_dm_env_dados_ctms   empresa.dm_env_dados_ctms%type;
   vn_ctrlintrnfectms_id  ctrl_intr_nfe_ctms.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   begin
      select em.dm_env_dados_ctms
        into vn_dm_env_dados_ctms
        from nota_fiscal nf
           , empresa     em
       where nf.id = en_notafiscal_id
         and em.id = nf.empresa_id;
   exception
      when others then
         vn_dm_env_dados_ctms := 0;
   end;
   --
   vn_fase := 2;
   --
   if nvl(vn_dm_env_dados_ctms,0) = 1 then -- integra com o CTMS
      --
      if nvl(en_notafiscal_id,0) > 0 and en_dm_tipo in (1, 2) then
         --
         vn_fase := 3;
         --
         begin
            select ci.id
              into vn_ctrlintrnfectms_id
              from ctrl_intr_nfe_ctms ci
             where ci.notafiscal_id = en_notafiscal_id
               and ci.dm_tipo       = en_dm_tipo;
         exception
            when others then
               vn_ctrlintrnfectms_id := null;
         end;
         --
         vn_fase := 4;
         --
         if nvl(vn_ctrlintrnfectms_id,0) <= 0 then
            --
            vn_fase := 5;
            --
            insert into ctrl_intr_nfe_ctms ( id
                                           , notafiscal_id
                                           , dm_situacao
                                           , dt_intr
                                           , dm_tipo
                                           )
                                    values ( ctrlintrnfectms_seq.nextval
                                           , en_notafiscal_id
                                           , 0 -- Não integrado
                                           , sysdate
                                           , en_dm_tipo
                                           );
            --
         else
            --
            vn_fase := 6;
            --
            update ctrl_intr_nfe_ctms set dm_situacao = 0
             where id = vn_ctrlintrnfectms_id;
            --
         end if;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_ctms fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_CTMS;

---------------------------------------------------------------------------
-- Integra as informações sobre Observações de Agendamento de Transporte --
---------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NF_OBS_AGEND_TRANSP ( EST_LOG_GENERICO_NF             IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                         , EST_ROW_NF_OBS_AGEND_TRANSP  IN OUT NOCOPY  NF_OBS_AGEND_TRANSP%ROWTYPE
                                         , EN_NOTAFISCAL_ID             IN             NF_AGEND_TRANSP.NOTAFISCAL_ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_nf_obs_agend_transp.nfagendtransp_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o Agendamento de Transporte para suas Observações.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   -- valida tipo de observação
   if est_row_nf_obs_agend_transp.dm_tipo not in ('A', 'O') then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Tipo de código informado está inválido ('||est_row_nf_obs_agend_transp.dm_tipo||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(est_row_nf_obs_agend_transp.codigo) is null then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Código da Observção do agendamento do transporte não pode ser nulo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   if trim(est_row_nf_obs_agend_transp.obs) is null then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'Observção do agendamento do transporte não pode ser nula.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   -- Se existe registro de Log e o Tipo de validação é 1 (valida e insere)
   -- então registra a informação sobre a Aquisição de Cana diário
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 6;
   --
   est_row_nf_obs_agend_transp.codigo  := trim(est_row_nf_obs_agend_transp.codigo);
   est_row_nf_obs_agend_transp.obs     := trim(est_row_nf_obs_agend_transp.obs);
   --
   vn_fase := 7;
   --
   if nvl(est_row_nf_obs_agend_transp.nfagendtransp_id,0) > 0
      and est_row_nf_obs_agend_transp.dm_tipo in ('A', 'O')
      and est_row_nf_obs_agend_transp.codigo is not null
      and est_row_nf_obs_agend_transp.obs is not null
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 7.1;
         --
         select nfobsagendtransp_seq.nextval
           into est_row_nf_obs_agend_transp.id
           from dual;
         --
         vn_fase := 7.2;
         --
         insert into nf_obs_agend_transp ( id
                                         , nfagendtransp_id
                                         , dm_tipo
                                         , codigo
                                         , obs
                                         )
                                  values ( est_row_nf_obs_agend_transp.id
                                         , est_row_nf_obs_agend_transp.nfagendtransp_id
                                         , est_row_nf_obs_agend_transp.dm_tipo
                                         , est_row_nf_obs_agend_transp.codigo
                                         , est_row_nf_obs_agend_transp.obs
                                         );
         --
      else
         --
         vn_fase := 7.3;
         --
         update nf_obs_agend_transp set nfagendtransp_id  = est_row_nf_obs_agend_transp.nfagendtransp_id
                                      , dm_tipo           = est_row_nf_obs_agend_transp.dm_tipo
                                      , codigo            = est_row_nf_obs_agend_transp.codigo
                                      , obs               = est_row_nf_obs_agend_transp.obs
          where id = est_row_nf_obs_agend_transp.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nf_obs_agend_transp fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NF_OBS_AGEND_TRANSP;

------------------------------------------------------------
-- Integra as informações sobre Agendamento de Transporte --
------------------------------------------------------------
PROCEDURE PKB_INTEGR_NF_AGEND_TRANSP ( EST_LOG_GENERICO_NF         IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                     , EST_ROW_NF_AGEND_TRANSP  IN OUT NOCOPY  NF_AGEND_TRANSP%ROWTYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_nf_agend_transp.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para o Agendamento de Transporte.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   -- gera as observações do endereço
   est_row_nf_agend_transp.nome := substr(pk_csf_api.gt_row_Nota_Fiscal_Dest.nome,1,60); 
   --
   vn_fase := 4;
   --
   --| Se exitir endereço de entrega informa ele, se não existir pega o endereço do destinatário
   begin
      --
      select ( nfl.lograd || decode(nfl.nro,null,null,', ' || nfl.nro) || decode(nfl.compl,null,null,' - ' || nfl.compl) || decode(nfl.bairro,null,null,' - ' || nfl.bairro) )  lograd
           , (nfl.cidade || '/' || nfl.uf) cidade
        into est_row_nf_agend_transp.lograd
           , est_row_nf_agend_transp.cidade
        from nota_fiscal_local nfl
           , nota_fiscal_dest nfd
       where nfl.notafiscal_id = est_row_nf_agend_transp.notafiscal_id
         and nfl.dm_tipo_local = 1 -- Entrega
         and nfd.notafiscal_id = nfl.notafiscal_id
         and (nfd.cnpj <> nfl.cnpj or nfd.cpf <> nfl.cpf);
      --
   exception
      when others then
         est_row_nf_agend_transp.lograd  := null;
         est_row_nf_agend_transp.cidade  := null;
   end;
   --
   vn_fase := 5;
   --
   -- pega dados da nota fiscal
   est_row_nf_agend_transp.nro_nf := substr(trim(to_char(pk_csf_api.gt_row_Nota_Fiscal.nro_nf,'000000000')),1,3) || '.' ||
                                     substr(trim(to_char(pk_csf_api.gt_row_Nota_Fiscal.nro_nf,'000000000')),4,3) || '.' ||
                                     substr(trim(to_char(pk_csf_api.gt_row_Nota_Fiscal.nro_nf,'000000000')),7,3) || '-' ||
                                     pk_csf_api.gt_row_Nota_Fiscal.serie;
   --
   vn_fase := 6;
   -- Pega dados da transportadora
   est_row_nf_agend_transp.nome_transp := pk_csf_api.gt_row_Nota_Fiscal_transp.nome;
   --
   vn_fase := 7;
   --
   -- Se existe registro de Log e o Tipo de validação é 1 (valida e insere)
   -- então registra a informação sobre a Aquisição de Cana diário
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_nf_agend_transp.notafiscal_id;
      --
   end if;
   --
   vn_fase := 8;
   --
   if est_row_nf_agend_transp.pedido is null then
      est_row_nf_agend_transp.pedido := ' ';
   end if;
   --
   vn_fase := 9;
   --
   if est_row_nf_agend_transp.cep is null then
      est_row_nf_agend_transp.cep := ' ';
   end if;
   --
   vn_fase := 10;
   --
   if est_row_nf_agend_transp.nome_transp is null then
      est_row_nf_agend_transp.nome_transp := ' ';
   end if;
   --
   vn_fase := 11;
   --
   if nvl(est_row_nf_agend_transp.notafiscal_id,0) > 0
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 12;
         --
         select nfagendtransp_seq.nextval
           into est_row_nf_agend_transp.id
           from dual;
         --
         vn_fase := 13;
         --
         insert into nf_agend_transp ( id
                                     , notafiscal_id
                                     , pedido
                                     , nome
                                     , lograd
                                     , cidade
                                     , cep
                                     , nro_nf
                                     , nome_transp
                                     )
                              values ( est_row_nf_agend_transp.id
                                     , est_row_nf_agend_transp.notafiscal_id
                                     , est_row_nf_agend_transp.pedido
                                     , est_row_nf_agend_transp.nome
                                     , est_row_nf_agend_transp.lograd
                                     , est_row_nf_agend_transp.cidade
                                     , est_row_nf_agend_transp.cep
                                     , est_row_nf_agend_transp.nro_nf
                                     , est_row_nf_agend_transp.nome_transp
                                     );
         --
      else
         --
         vn_fase := 14;
         --
         update nf_agend_transp set notafiscal_id  = est_row_nf_agend_transp.notafiscal_id
                                  , pedido         = est_row_nf_agend_transp.pedido
                                  , nome           = est_row_nf_agend_transp.nome
                                  , lograd         = est_row_nf_agend_transp.lograd
                                  , cidade         = est_row_nf_agend_transp.cidade
                                  , cep            = est_row_nf_agend_transp.cep
                                  , nro_nf         = est_row_nf_agend_transp.nro_nf
                                  , nome_transp    = est_row_nf_agend_transp.nome_transp
          where id = est_row_nf_agend_transp.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nf_agend_transp fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NF_AGEND_TRANSP;

----------------------------------------------------------------------------------------------------
-- Integra as informações sobre NF de fornecedores dos produtos constantes na DANFE para romaneio --
----------------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_INF_NF_ROMANEIO ( EST_LOG_GENERICO_NF         IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                     , EST_ROW_INF_NF_ROMANEIO  IN OUT NOCOPY  INF_NF_ROMANEIO%ROWTYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_inf_nf_romaneio.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para as Infor. NF Forncedores dos produtos.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if trim(est_row_inf_nf_romaneio.cnpj_cpf) is null then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Informações Romaneio: CNPJ/CPF do emitente da nota fiscal não informado!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if nvl(est_row_inf_nf_romaneio.nro_nf,0) <= 0 then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Informações Romaneio: Número da nota fiscal não informado!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   if est_row_inf_nf_romaneio.dt_emiss is null then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'Informações Romaneio: Data da Emissão da nota fiscal não informado!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   -- Se existe registro de Log e o Tipo de validação é 1 (valida e insere)
   -- então registra a informação sobre a Aquisição de Cana diário
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_inf_nf_romaneio.notafiscal_id;
      --
   end if;
   --
   vn_fase := 6;
   --
   est_row_inf_nf_romaneio.cnpj_cpf := trim(est_row_inf_nf_romaneio.cnpj_cpf);
   est_row_inf_nf_romaneio.serie := trim(est_row_inf_nf_romaneio.serie);
   --
   vn_fase := 7;
   --
   if est_row_inf_nf_romaneio.cnpj_cpf is not null
      and est_row_inf_nf_romaneio.dt_emiss is not null
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 7.1;
         --
         select infnfromaneio_seq.nextval
           into est_row_inf_nf_romaneio.id
           from dual;
         --
         vn_fase := 7.2;
         --
         insert into inf_nf_romaneio ( id
                                     , notafiscal_id
                                     , cnpj_cpf
                                     , nro_nf
                                     , serie
                                     , dt_emiss )
                              values ( est_row_inf_nf_romaneio.id
                                     , est_row_inf_nf_romaneio.notafiscal_id
                                     , est_row_inf_nf_romaneio.cnpj_cpf
                                     , est_row_inf_nf_romaneio.nro_nf
                                     , est_row_inf_nf_romaneio.serie
                                     , est_row_inf_nf_romaneio.dt_emiss
                                     );
         --
      else
         --
         vn_fase := 7.3;
         --
         update inf_nf_romaneio set notafiscal_id  = est_row_inf_nf_romaneio.notafiscal_id
                                  , cnpj_cpf       = est_row_inf_nf_romaneio.cnpj_cpf
                                  , nro_nf         = est_row_inf_nf_romaneio.nro_nf
                                  , serie          = est_row_inf_nf_romaneio.serie
                                  , dt_emiss       = est_row_inf_nf_romaneio.dt_emiss
          where id = est_row_inf_nf_romaneio.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_inf_nf_romaneio fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_INF_NF_ROMANEIO;

--------------------------------------------------------------
-- Integra as informações sobre a dedução da cana-de-açucar --
--------------------------------------------------------------
PROCEDURE PKB_INTEGR_NFAQ_CANA_DED( EST_LOG_GENERICO_NF       IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                  , EST_ROW_NFAQ_CANA_DED  IN OUT NOCOPY  NF_AQUIS_CANA_DED%ROWTYPE
                                  , EN_NOTAFISCAL_ID       IN             NF_AQUIS_CANA.NOTAFISCAL_ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_NFAq_Cana_Ded.nfaquiscana_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o registro dos Aquisição de Cana para o Grupo de Deduções de Cana.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida se a Informação sobre a dedução da cana-de-açucar
   if trim(pk_csf.fkg_converte(est_row_NFAq_Cana_Ded.deducao)) is null then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'A descrição da dedução não foi informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   -- Valida se a Informação sobre o valor da dedução
   if nvl(est_row_NFAq_Cana_Ded.vl_ded, 0) < 0 then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'O valor da dedução da cana-de-açucar adquirida não pode ser negativa ou nula.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Se existe registro de Log e o Tipo de validação é 1 (valida e insere)
   -- então registra a informação sobre a Aquisição de Cana diário
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = (select cnf.notafiscal_id
                     from nf_aquis_cana  cnf
                    where cnf.id = est_row_NFAq_Cana_Ded.nfaquiscana_id);
      --
   end if;
   --
   vn_fase := 5;
   --
   est_row_NFAq_Cana_Ded.deducao := trim(pk_csf.fkg_converte(est_row_NFAq_Cana_Ded.deducao));
   est_row_NFAq_Cana_Ded.vl_ded := nvl(est_row_NFAq_Cana_Ded.vl_ded,0);
   --
   vn_fase := 6;
   --
   if est_row_NFAq_Cana_Ded.deducao is not null then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 6.1;
         --
         select nfaquiscanaded_seq.nextval
           into est_row_NFAq_Cana_Ded.id
           from dual;
         --
         vn_fase := 6.2;
         --
         insert into nf_aquis_cana_ded ( id
                                       , nfaquiscana_id
                                       , deducao
                                       , vl_ded )
                                values ( est_row_NFAq_Cana_Ded.id
                                       , est_row_NFAq_Cana_Ded.nfaquiscana_id
                                       , est_row_NFAq_Cana_Ded.deducao
                                       , est_row_NFAq_Cana_Ded.vl_ded
                                       );
         --
      else
         --
         vn_fase := 6.3;
         --
         update nf_aquis_cana_ded set deducao  = est_row_NFAq_Cana_Ded.deducao
                                    , vl_ded   = est_row_NFAq_Cana_Ded.vl_ded
          where id = est_row_NFAq_Cana_Ded.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_NFAq_Cana_Ded fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                           , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFAQ_CANA_DED;

----------------------------------------------------
-- Integra as informações de cana-de-açuca ao dia --
----------------------------------------------------
PROCEDURE PKB_INTEGR_NFAQ_CANA_DIA ( EST_LOG_GENERICO_NF       IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                   , EST_ROW_NFAQ_CANA_DIA  IN OUT NOCOPY  NF_AQUIS_CANA_DIA%ROWTYPE
                                   , EN_NOTAFISCAL_ID       IN             NF_AQUIS_CANA.NOTAFISCAL_ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_dia            Nf_Aquis_Cana_Dia.dia%TYPE;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_NFAq_Cana_Dia.nfaquiscana_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o registro dos Aquisição de Cana para o Fornecimento Diário de Cana.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida se a Informação sobre o dia da aquisição da cana
   if nvl(est_row_NFAq_Cana_Dia.dia,0) <= 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Não informado o dia da aquisição da cana.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   -- Valida se a Informação sobre a quantidade de cana adquirida
   if nvl(est_row_NFAq_Cana_Dia.qtde, 0) < 0 then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'A quantidade de cana adquirida diariamente não pode ser negativa ou nula.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Valida se a variável 'dia' é maior que o último dia do mês em que a nota fiscal foi emitida.
   vn_dia := null;
   --
   begin
      --
      select to_number(to_char(last_day(nf.dt_emiss), 'DD'))
        into vn_dia
        from nf_aquis_cana  ac
           , nota_fiscal    nf
       where ac.id  = est_row_NFAq_Cana_Dia.nfaquiscana_id
         and nf.id  = ac.notafiscal_id;
       --
   exception
      when others then
         vn_dia := null;
   end;
   --
   vn_fase := 5;
   --
   if nvl(est_row_NFAq_Cana_Dia.dia, 0) > nvl(vn_dia, 0) then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'O valor referente ao Dia é maior que o último dia do Mês.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   -- Se existe registro de Log e o Tipo de validação é 1 (valida e insere)
   -- então registra a informação sobre a Aquisição de Cana diário
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = (select cnf.notafiscal_id
                     from nf_aquis_cana  cnf
                    where cnf.id = est_row_NFAq_Cana_Dia.nfaquiscana_id);
      --
   end if;
   --
   vn_fase := 7;
   --
   est_row_NFAq_Cana_Dia.dia := nvl(est_row_NFAq_Cana_Dia.dia, 0);
   est_row_NFAq_Cana_Dia.qtde := nvl(est_row_NFAq_Cana_Dia.qtde, 0);
   --
   vn_fase := 8;
   --
   if est_row_NFAq_Cana_Dia.dia is not null
      and est_row_NFAq_Cana_Dia.qtde is not null
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 8.1;
         --
         select nfaquiscanadia_seq.nextval
           into est_row_NFAq_Cana_Dia.id
           from dual;
         --
         vn_fase := 8.2;
         --
         insert into nf_aquis_cana_dia ( id
                                       , nfaquiscana_id
                                       , dia
                                       , qtde
                                       )
                                values ( est_row_NFAq_Cana_Dia.id
                                       , est_row_NFAq_Cana_Dia.nfaquiscana_id
                                       , est_row_NFAq_Cana_Dia.dia
                                       , est_row_NFAq_Cana_Dia.qtde
                                       );
          --
       else
          --
          vn_fase := 8.3;
          --
          update nf_aquis_cana_dia set dia = est_row_NFAq_Cana_Dia.dia
                                     , qtde = est_row_NFAq_Cana_Dia.qtde
           where id = est_row_NFAq_Cana_Dia.id;
          --
       end if;
       --
    end if;
    --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_NFAq_Cana_Dia fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFAQ_CANA_DIA;

----------------------------------------------
-- Integra as informações de cana-de-açucar --
----------------------------------------------
PROCEDURE PKB_INTEGR_NFAQUIS_CANA ( EST_LOG_GENERICO_NF      IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                  , EST_ROW_NFAQUIS_CANA  IN OUT NOCOPY  NF_AQUIS_CANA%ROWTYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_NFAquis_Cana.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para registro dos Aquisição de Cana.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida se a Informação sobre a Safra foi fornecida
   if trim(pk_csf.fkg_converte(est_row_NFAquis_Cana.safra)) is null then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Não informado a "Identificação da Safra".';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   -- Valida se a Informação sobre a Mês e ano de Referência
   if trim(pk_csf.fkg_converte(est_row_NFAquis_Cana.mes_ano_ref)) is null then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Não informado o Mês/Ano de Referência da Identificação da Safra.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Valida a informação sobre a quantidade total do mês
   if nvl(est_row_NFAquis_Cana.qtde_total_mes, 0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'O Valor Referente a Quantidade Total do Mês não pode ser negativa ou nula.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   -- Valida a informação sobre a quantidade do mês anterior
   if nvl(est_row_NFAquis_Cana.qtde_total_ant, 0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'O Valor Referente a Quantidade Total do Mês Anterior não pode ser negativa ou nula.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   -- Valida a informação sobre a quantidade total geral de aquisição de cana
   if nvl(est_row_NFAquis_Cana.qtde_total_ger, 0) < 0 then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := 'O Valor Referente a Quantidade Geral de Aquisição de Cana não pode ser negativa ou nula.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   -- Valida a informação sobre o valor dos fornecimentos
   if nvl(est_row_NFAquis_Cana.vl_forn, 0) < 0 then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := 'O Valor dos Fornecidos na Aquisição de Cana não pode ser negativa ou nula.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   -- Valida a informação sobre o valor total da dedução
   if nvl(est_row_NFAquis_Cana.vl_total_ded, 0) < 0 then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := 'O Valor Total da Dedução na Aquisição de Cana não pode ser negativa ou nula.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   -- Vlida a informação sobre o valor líquido dos fornecimentos
   if nvl(est_row_NFAquis_Cana.vl_liq_forn, 0) < 0 then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := 'O Valor Líquido dos Fornecimentos na Aquisição de Cana não pode ser negativa ou nula.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 10;
   --
   -- Se existe registro de Log e o Tipo de validação é 1 (valida e insere)  --- conversar com Leandro sobre esse "1"!!!!!
   -- então registra a informação sobre a Aquisição de Cana
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_NFAquis_Cana.notafiscal_id;
      --
   end if;
   --
   vn_fase := 11;
   --
   est_row_NFAquis_Cana.safra          := trim(pk_csf.fkg_converte(est_row_NFAquis_Cana.safra));
   est_row_NFAquis_Cana.mes_ano_ref    := trim(pk_csf.fkg_converte(est_row_NFAquis_Cana.mes_ano_ref));
   est_row_NFAquis_Cana.qtde_total_mes := nvl(est_row_NFAquis_Cana.qtde_total_mes,0);
   est_row_NFAquis_Cana.qtde_total_ant := nvl(est_row_NFAquis_Cana.qtde_total_ant,0);
   est_row_NFAquis_Cana.qtde_total_ger := nvl(est_row_NFAquis_Cana.qtde_total_ger,0);
   est_row_NFAquis_Cana.vl_forn        := nvl(est_row_NFAquis_Cana.vl_forn,0);
   est_row_NFAquis_Cana.vl_total_ded   := nvl(est_row_NFAquis_Cana.vl_total_ded,0);
   est_row_NFAquis_Cana.vl_liq_forn    := nvl(est_row_NFAquis_Cana.vl_liq_forn,0);
   --
   vn_fase := 12;
   --
   if est_row_NFAquis_Cana.safra is not null
      and est_row_NFAquis_Cana.mes_ano_ref is not null
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 12.1;
         --
         select nfaquiscana_seq.nextval
           into est_row_NFAquis_Cana.id
           from dual;
         --
         vn_fase := 12.2;
         --
         insert into nf_aquis_cana ( id
                                   , notafiscal_id
                                   , safra
                                   , mes_ano_ref
                                   , qtde_total_mes
                                   , qtde_total_ant
                                   , qtde_total_ger
                                   , vl_forn
                                   , vl_total_ded
                                   , vl_liq_forn
                                   )
                            values ( est_row_NFAquis_Cana.id
                                   , est_row_NFAquis_Cana.notafiscal_id
                                   , est_row_NFAquis_Cana.safra
                                   , est_row_NFAquis_Cana.mes_ano_ref
                                   , est_row_NFAquis_Cana.qtde_total_mes
                                   , est_row_NFAquis_Cana.qtde_total_ant
                                   , est_row_NFAquis_Cana.qtde_total_ger
                                   , est_row_NFAquis_Cana.vl_forn
                                   , est_row_NFAquis_Cana.vl_total_ded
                                   , est_row_NFAquis_Cana.vl_liq_forn
                                   );
         --
      else
         --
         vn_fase := 12.3;
         --
         update nf_aquis_cana set safra           = est_row_NFAquis_Cana.safra
                                , mes_ano_ref     = est_row_NFAquis_Cana.mes_ano_ref
                                , qtde_total_mes  = est_row_NFAquis_Cana.qtde_total_mes
                                , qtde_total_ant  = est_row_NFAquis_Cana.qtde_total_ant
                                , qtde_total_ger  = est_row_NFAquis_Cana.qtde_total_ger
                                , vl_forn         = est_row_NFAquis_Cana.vl_forn
                                , vl_total_ded    = est_row_NFAquis_Cana.vl_total_ded
                                , vl_liq_forn     = est_row_NFAquis_Cana.vl_liq_forn
          where id = est_row_NFAquis_Cana.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_NFAquis_Cana fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFAQUIS_CANA;

---------------------------------------------------------------------------------------------------
-- Integra Ressarcimento de ICMS em operações com substituição Tributária do Item da Nota Fiscal --
---------------------------------------------------------------------------------------------------
procedure pkb_integr_itemnf_res_icms_st ( est_log_generico_nf        in out nocopy dbms_sql.number_table
                                        , est_row_itemnf_res_icms_st in out        itemnf_res_icms_st%rowtype
                                        , en_notafiscal_id           in            nota_fiscal.id%type
                                        , en_multorg_id              in            mult_org.id%type
                                        , ev_cod_mod_e               in            varchar2
                                        , ev_cod_part_e              in            varchar2
                                        , ev_cod_part_nfe_ret        in            varchar2
                                        )
is
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_itemnf_res_icms_st.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o ITEM da Nota Fiscal para registro do Ressarcimento de ICMS em operações com Substituição Tributária.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   est_row_itemnf_res_icms_st.modfiscal_id := pk_csf.fkg_mod_fiscal_id ( ev_cod_mod => ev_cod_mod_e );
   --
   vn_fase := 2.1;
   --
   if nvl(est_row_itemnf_res_icms_st.modfiscal_id,0) <= 0 then
      --
      vn_fase := 2.2;
      --
      gv_mensagem_log := '"Modelo fiscal do documento fiscal relativo a última entrada" está inválido('||ev_cod_mod_e||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if nvl(est_row_itemnf_res_icms_st.num_doc_ult_e,0) <= 0 then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Número do documento fiscal relativo a última entrada" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   if est_row_itemnf_res_icms_st.dt_ult_e is null then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Data do documento fiscal relativo a última entrada" deve ser informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   est_row_itemnf_res_icms_st.pessoa_id := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id => en_multorg_id
                                                                         , ev_cod_part   => ev_cod_part_e );
   --
   vn_fase := 5.1;
   --
   if nvl(est_row_itemnf_res_icms_st.pessoa_id,0) = 0 then
      --
      vn_fase := 5.2;
      --
      gv_mensagem_log := '"Participante do documento fiscal relativo a última entrada" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   if est_row_itemnf_res_icms_st.quant_ult_e is null then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Quantidade do Item do documento fiscal relativo a última entrada" deve ser informada (não pode ser nula).';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   if est_row_itemnf_res_icms_st.vl_unit_ult_e is null then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Valor unitário da mercadoria constante na NF relativa a última entrada inclusive despesas acessórias" deve ser informado (não pode ser nulo).';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   --
   if est_row_itemnf_res_icms_st.vl_unit_bc_st is null then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Valor unitário da base de cálculo do imposto pago por substituição" deve ser informado (não pode ser nulo).';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   if est_row_itemnf_res_icms_st.dm_cod_resp_ret is not null and
      est_row_itemnf_res_icms_st.dm_cod_resp_ret not in (1, 2, 3) then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := 'Se for informado "Código que indica o responsável pela retenção do ICMS-ST", o valor deverá ser: 1-Remetente Direto; '||
                         'OU, 2-Remetente Indireto; OU, 3-Próprio declarante. Valor informado: '||est_row_itemnf_res_icms_st.dm_cod_resp_ret||'.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 10;
   --
   if est_row_itemnf_res_icms_st.dm_cod_mot_res is not null and
      est_row_itemnf_res_icms_st.dm_cod_mot_res not in (1, 2, 3, 4, 5, 6, 9) then
      --
      vn_fase := 10.1;
      --
      gv_mensagem_log := 'Se for informado "Código do motivo do ressarcimento", o valor deverá ser: 1-Venda para outra UF; OU, 2-Saída amparada por isenção '||
                         'ou não incidência; OU, 3-Perda ou deterioração; OU, 4-Furto ou roubo; OU, 5-Exportação; OU, 6-Venda interna para Simples Nacional; '||
                         'OU, 9-Outros. Valor informado: '||
                         est_row_itemnf_res_icms_st.dm_cod_mot_res||'.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11;
   --
   if ev_cod_part_nfe_ret is not null then
      --
      vn_fase := 11.1;
      --
      est_row_itemnf_res_icms_st.pessoa_id_nfe_ret := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id => en_multorg_id
                                                                                    , ev_cod_part   => ev_cod_part_nfe_ret );
      --
      vn_fase := 11.2;
      --
      if nvl(est_row_itemnf_res_icms_st.pessoa_id_nfe_ret,0) = 0 then
         --
         vn_fase := 11.3;
         --
         gv_mensagem_log := 'Se for informado "Participante/Emitente da NF-e em que houve a retenção do ICMS-ST", o mesmo deverá existir no cadastro de '||
                            'Participante. Valor informado: '||ev_cod_part_nfe_ret||'.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   if est_row_itemnf_res_icms_st.dm_cod_da is not null and
      est_row_itemnf_res_icms_st.dm_cod_da not in (0, 1) then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := 'Se for informado "Código do modelo do documento de arrecadação", o valor deverá ser: 0-documento estadual de arrecadação, 1-GNRE. '||
                         'Valor informado: '||est_row_itemnf_res_icms_st.dm_cod_da||'.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_itemnf_res_icms_st.itemnf_id,0) > 0 and
      nvl(est_row_itemnf_res_icms_st.modfiscal_id,0) > 0 and
      nvl(est_row_itemnf_res_icms_st.num_doc_ult_e,0) > 0 and
      est_row_itemnf_res_icms_st.dt_ult_e is not null and
      nvl(est_row_itemnf_res_icms_st.pessoa_id,0) > 0 and
      est_row_itemnf_res_icms_st.quant_ult_e is not null and
      est_row_itemnf_res_icms_st.vl_unit_ult_e is not null and
      est_row_itemnf_res_icms_st.vl_unit_bc_st is not null then
      --
      vn_fase := 99.1;
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.2;
         --
         select itemnfresicmsst_seq.nextval
           into est_row_itemnf_res_icms_st.id
           from dual;
         --
         vn_fase := 99.3;
         --
         insert into itemnf_res_icms_st ( id
                                        , itemnf_id
                                        , modfiscal_id
                                        , num_doc_ult_e
                                        , ser_ult_e
                                        , dt_ult_e
                                        , pessoa_id
                                        , quant_ult_e
                                        , vl_unit_ult_e
                                        , vl_unit_bc_st
                                        , vl_unit_limite_bc_icms_ult_e
                                        , vl_unit_icms_ult_e
                                        , aliq_st_ult_e
                                        , vl_unit_res
                                        , dm_cod_resp_ret
                                        , dm_cod_mot_res
                                        , chave_nfe_ret
                                        , pessoa_id_nfe_ret
                                        , ser_nfe_ret
                                        , num_nfe_ret
                                        , item_nfe_ret
                                        , dm_cod_da
                                        , num_da
                                        , chave_nfe_ult_e
                                        , num_item_ult_e
                                        , vl_unit_bc_icms_ult_e
                                        , aliq_icms_ult_e
                                        , vl_unit_res_fcp_st
                                        )
                                 values ( est_row_itemnf_res_icms_st.id
                                        , est_row_itemnf_res_icms_st.itemnf_id
                                        , est_row_itemnf_res_icms_st.modfiscal_id
                                        , est_row_itemnf_res_icms_st.num_doc_ult_e
                                        , est_row_itemnf_res_icms_st.ser_ult_e
                                        , est_row_itemnf_res_icms_st.dt_ult_e
                                        , est_row_itemnf_res_icms_st.pessoa_id
                                        , est_row_itemnf_res_icms_st.quant_ult_e
                                        , est_row_itemnf_res_icms_st.vl_unit_ult_e
                                        , est_row_itemnf_res_icms_st.vl_unit_bc_st
                                        , est_row_itemnf_res_icms_st.vl_unit_limite_bc_icms_ult_e
                                        , est_row_itemnf_res_icms_st.vl_unit_icms_ult_e
                                        , est_row_itemnf_res_icms_st.aliq_st_ult_e
                                        , est_row_itemnf_res_icms_st.vl_unit_res
                                        , est_row_itemnf_res_icms_st.dm_cod_resp_ret
                                        , est_row_itemnf_res_icms_st.dm_cod_mot_res
                                        , est_row_itemnf_res_icms_st.chave_nfe_ret
                                        , est_row_itemnf_res_icms_st.pessoa_id_nfe_ret
                                        , est_row_itemnf_res_icms_st.ser_nfe_ret
                                        , est_row_itemnf_res_icms_st.num_nfe_ret
                                        , est_row_itemnf_res_icms_st.item_nfe_ret
                                        , est_row_itemnf_res_icms_st.dm_cod_da
                                        , est_row_itemnf_res_icms_st.num_da
                                        , est_row_itemnf_res_icms_st.chave_nfe_ult_e
                                        , est_row_itemnf_res_icms_st.num_item_ult_e
                                        , est_row_itemnf_res_icms_st.vl_unit_bc_icms_ult_e
                                        , est_row_itemnf_res_icms_st.aliq_icms_ult_e
                                        , est_row_itemnf_res_icms_st.vl_unit_res_fcp_st
                                        );
         --
      else
         --
         vn_fase := 99.4;
         --
         update itemnf_res_icms_st ir
            set ir.modfiscal_id                 = est_row_itemnf_res_icms_st.modfiscal_id
              , ir.num_doc_ult_e                = est_row_itemnf_res_icms_st.num_doc_ult_e
              , ir.ser_ult_e                    = est_row_itemnf_res_icms_st.ser_ult_e
              , ir.dt_ult_e                     = est_row_itemnf_res_icms_st.dt_ult_e
              , ir.pessoa_id                    = est_row_itemnf_res_icms_st.pessoa_id
              , ir.quant_ult_e                  = est_row_itemnf_res_icms_st.quant_ult_e
              , ir.vl_unit_ult_e                = est_row_itemnf_res_icms_st.vl_unit_ult_e
              , ir.vl_unit_bc_st                = est_row_itemnf_res_icms_st.vl_unit_bc_st
              , ir.vl_unit_limite_bc_icms_ult_e = est_row_itemnf_res_icms_st.vl_unit_limite_bc_icms_ult_e
              , ir.vl_unit_icms_ult_e           = est_row_itemnf_res_icms_st.vl_unit_icms_ult_e
              , ir.aliq_st_ult_e                = est_row_itemnf_res_icms_st.aliq_st_ult_e
              , ir.vl_unit_res                  = est_row_itemnf_res_icms_st.vl_unit_res
              , ir.dm_cod_resp_ret              = est_row_itemnf_res_icms_st.dm_cod_resp_ret
              , ir.dm_cod_mot_res               = est_row_itemnf_res_icms_st.dm_cod_mot_res
              , ir.chave_nfe_ret                = est_row_itemnf_res_icms_st.chave_nfe_ret
              , ir.pessoa_id_nfe_ret            = est_row_itemnf_res_icms_st.pessoa_id_nfe_ret
              , ir.ser_nfe_ret                  = est_row_itemnf_res_icms_st.ser_nfe_ret
              , ir.num_nfe_ret                  = est_row_itemnf_res_icms_st.num_nfe_ret
              , ir.item_nfe_ret                 = est_row_itemnf_res_icms_st.item_nfe_ret
              , ir.dm_cod_da                    = est_row_itemnf_res_icms_st.dm_cod_da
              , ir.num_da                       = est_row_itemnf_res_icms_st.num_da
              , ir.chave_nfe_ult_e              = est_row_itemnf_res_icms_st.chave_nfe_ult_e
              , ir.num_item_ult_e               = est_row_itemnf_res_icms_st.num_item_ult_e
              , ir.vl_unit_bc_icms_ult_e        = est_row_itemnf_res_icms_st.vl_unit_bc_icms_ult_e
              , ir.aliq_icms_ult_e              = est_row_itemnf_res_icms_st.aliq_icms_ult_e
              , ir.vl_unit_res_fcp_st           = est_row_itemnf_res_icms_st.vl_unit_res_fcp_st
          where ir.id = est_row_itemnf_res_icms_st.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_itemnf_res_icms_st fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END pkb_integr_itemnf_res_icms_st;

---------------------------------------------------------------
-- Integra as informações de Ajustes do Item da Nota Fiscal  --
---------------------------------------------------------------
PROCEDURE pkb_integr_inf_prov_docto_fisc ( est_log_generico_nf             in out nocopy  dbms_sql.number_table
                                         , est_row_inf_prov_docto_fiscal   in out nocopy  inf_prov_docto_fiscal%rowtype
                                         , ev_cod_obs                      in             obs_lancto_fiscal.cod_obs%type
                                         , ev_cod_aj                       in             cod_ocor_aj_icms.cod_aj%type
                                         , en_notafiscal_id                in             nota_fiscal.id%type
                                         , en_nro_item                     in             item_nota_fiscal.nro_item%type
                                         , en_multorg_id                   in             mult_org.id%type
                                         )
IS
   --
   vn_fase                 number := 0;
   vn_loggenerico_id       log_generico_nf.id%type;
   vn_obslanctofiscal_id   number;
   --
BEGIN
   --
   vn_fase := 1;
   -- Recupera o ID do item da nota fiscal
   if nvl(en_notafiscal_id, 0) > 0
      and nvl(en_nro_item, 0) > 0 then
      --
      est_row_inf_prov_docto_fiscal.itemnf_id := pk_csf.fkg_item_nota_fiscal_id( en_notafiscal_id => en_notafiscal_id
                                                                               , en_nro_item      => en_nro_item
                                                                               );
      --
      if est_row_inf_prov_docto_fiscal.itemnf_id = -1 then
         --
         est_row_inf_prov_docto_fiscal.itemnf_id := null;
         --
      end if;
      --
   else
      --
      est_row_inf_prov_docto_fiscal.itemnf_id := null;
      --
   end if;
   --
   vn_fase := 2;
   -- Recupera o id da tabela OBS_LANCTO_FISCAL
   vn_obslanctofiscal_id := pk_csf.fkg_id_obs_lancto_fiscal ( en_multorg_id => en_multorg_id
                                                            , ev_cod_obs    => ev_cod_obs );
   --
   vn_fase := 3;
   -- Recupera o id da tabela NFINFOR_FISCAL
   if nvl(en_notafiscal_id, 0) > 0
      and nvl(vn_obslanctofiscal_id, 0) > 0 then
      --
      vn_fase := 3.1;
      --
      est_row_inf_prov_docto_fiscal.nfinforfisc_id := pk_csf.fkg_nfinfor_fiscal_id ( en_notafiscal_id      => en_notafiscal_id
                                                                                   , en_obslanctofiscal_id => vn_obslanctofiscal_id
                                                                                   );
      --
      vn_fase := 3.2;
      -- Se não encontrou o ID registra o log
      if nvl(est_row_inf_prov_docto_fiscal.nfinforfisc_id,0) = 0 then
         --
         vn_fase := 3.3;
         --
         gv_mensagem_log := 'Não informado o "Lançamento Fiscal da Nota Fiscal" para registro dos Ajustes ou o "Código da Observação do Lançamento Fiscal" está inválido (' || ev_cod_obs || ')';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   else
      --
      vn_fase := 3.4;
      --
      gv_mensagem_log := 'Não informado a "Nota Fiscal" ou o "Código da Observação do Lançamento Fiscal" para registro dos Ajustes';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Recupera o id da tabela COD_OCOR_AJ_ICMS
   if ev_cod_aj is not null then
      --
      --#72544 
      if length(trim(ev_cod_aj)) = 8 then --se for tamanho 8 caracteres 
        --
        vn_fase := 4.1;
        -- busca da tabela nova
        est_row_inf_prov_docto_fiscal.codocorajicms_id  := pk_csf_efd.fkg_cod_inf_adic_id ( ev_cod_inf => ev_cod_aj
                                                                                          , ed_dt_ini => pk_csf.fkg_dt_emiss_nf(en_notafiscal_id => en_notafiscal_id)
                                                                                          , ed_dt_fin => pk_csf.fkg_dt_emiss_nf(en_notafiscal_id => en_notafiscal_id) );
        --
      elsif length(trim(ev_cod_aj)) = 10 then  --se for tamanho 10 caracteres 
        --
        vn_fase := 4.2;
        --busca da original
      est_row_inf_prov_docto_fiscal.codocorajicms_id  := pk_csf_efd.fkg_cod_ocor_aj_icms_id ( ev_cod_aj => ev_cod_aj
                                                                                            , ed_dt_ini => pk_csf.fkg_dt_emiss_nf(en_notafiscal_id => en_notafiscal_id)
                                                                                            , ed_dt_fin => pk_csf.fkg_dt_emiss_nf(en_notafiscal_id => en_notafiscal_id) );
      --
      end if;
      --
      vn_fase := 4.21;
      -- Se não encontrou o ID registra o log
      if nvl(est_row_inf_prov_docto_fiscal.codocorajicms_id,0) = 0 then
         --
         vn_fase := 4.3;
         --
         gv_mensagem_log := 'Verifique o cadastro do "Código de Ocorrência de Ajuste de ICMS" '||
                                        ' ou do "Código de informação adicional da apuracão, valores declaratorios (registro E115 do Sped Fiscal)".'||
                                        ' O código enviado é inválido ('||ev_cod_aj||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      else
         --
         if nvl( pk_csf_efd.fkg_cod_ocor_aj_icms_tp_apur ( en_id  => est_row_inf_prov_docto_fiscal.codocorajicms_id ),-1) = 0 and -- Operação Própria
            trim( substr(ev_cod_aj, 1, 2) ) <> pk_csf.fkg_uf_notafiscalemit ( en_notafiscal_id => en_notafiscal_id ) and
            trim( substr(ev_cod_aj, 1, 2) ) <> pk_csf.fkg_uf_notafiscaldest ( en_notafiscal_id => en_notafiscal_id ) then
            --
            gv_mensagem_log := 'Para nota fiscal de emissão própria a UF do Código de Benefício Fiscal tem que ser a mesma do emitente. Verifique o código enviado. (Código: '|| ev_cod_aj ||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia
                                );
            --
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         elsif nvl( pk_csf_efd.fkg_cod_ocor_aj_icms_tp_apur ( en_id  => est_row_inf_prov_docto_fiscal.codocorajicms_id ),-1) <> 0 and -- Diferente de Operação Própria
               trim( substr(ev_cod_aj, 1, 2) ) <> pk_csf.fkg_uf_notafiscalemit ( en_notafiscal_id => en_notafiscal_id ) and
               trim( substr(ev_cod_aj, 1, 2) ) <> pk_csf.fkg_uf_notafiscaldest ( en_notafiscal_id => en_notafiscal_id ) then
            --
            gv_mensagem_log := 'A UF do Código de Benefício Fiscal não corresponde a UF do emitente e nem do destinatário da nota fiscal. Verifique o código enviado. (Código: '|| ev_cod_aj ||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia
                               );
            --
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   else
      --
      vn_fase := 4.4;
      --
      gv_mensagem_log := '"Código de Ocorrência de Ajuste de ICMS" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_inf_prov_docto_fiscal.vl_bc_icms,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Valor da base de cálculo do ICMS ou do ICMS ST" não pode ser negativo ('||est_row_inf_prov_docto_fiscal.vl_bc_icms||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   if nvl(est_row_inf_prov_docto_fiscal.aliq_icms,0) < 0 then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Aliquota do ICMS" não pode ser negativo ('||est_row_inf_prov_docto_fiscal.aliq_icms||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   if nvl(est_row_inf_prov_docto_fiscal.vl_icms,0) < 0 then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Valor do ICMS ou do ICMS ST" não pode ser negativo ('||est_row_inf_prov_docto_fiscal.vl_icms||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   --
   if nvl(est_row_inf_prov_docto_fiscal.vl_outros,0) < 0 then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Outros valores" não podem ser negativos ('||est_row_inf_prov_docto_fiscal.vl_outros||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (Valida e insere)
   -- então realiza a condição de inserir o ajuste
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 10;
   --
   if nvl(est_row_inf_prov_docto_fiscal.nfinforfisc_id, 0) > 0
      and nvl(est_row_inf_prov_docto_fiscal.codocorajicms_id, 0) > 0 then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 10.1;
         --
         select infprovdoctofiscal_seq.nextval
           into est_row_inf_prov_docto_fiscal.id
           from dual;
         --
         vn_fase := 10.2;
         --
         insert into inf_prov_docto_fiscal ( id              
                                           , nfinforfisc_id
                                           , codocorajicms_id
                                           , descr_compl_aj
                                           , itemnf_id
                                           , vl_bc_icms
                                           , aliq_icms
                                           , vl_icms         
                                           , vl_outros
                                           )
                                    values ( est_row_inf_prov_docto_fiscal.id -- id
                                           , est_row_inf_prov_docto_fiscal.nfinforfisc_id  -- nfinforfisc_id
                                           , est_row_inf_prov_docto_fiscal.codocorajicms_id  -- codocorajicms_id
                                           , est_row_inf_prov_docto_fiscal.descr_compl_aj -- descr_compl_aj
                                           , est_row_inf_prov_docto_fiscal.itemnf_id -- itemnf_id
                                           , est_row_inf_prov_docto_fiscal.vl_bc_icms -- vl_bc_icms
                                           , est_row_inf_prov_docto_fiscal.aliq_icms -- aliq_icms
                                           , est_row_inf_prov_docto_fiscal.vl_icms -- vl_icms
                                           , est_row_inf_prov_docto_fiscal.vl_outros -- vl_outros
                                           );
         --
      else
         --
         vn_fase := 10.3;
         --
         update inf_prov_docto_fiscal set nfinforfisc_id   = est_row_inf_prov_docto_fiscal.nfinforfisc_id
                                        , codocorajicms_id = est_row_inf_prov_docto_fiscal.codocorajicms_id
                                        , descr_compl_aj   = est_row_inf_prov_docto_fiscal.descr_compl_aj
                                        , itemnf_id        = est_row_inf_prov_docto_fiscal.itemnf_id 
                                        , vl_bc_icms       = est_row_inf_prov_docto_fiscal.vl_bc_icms
                                        , aliq_icms        = est_row_inf_prov_docto_fiscal.aliq_icms
                                        , vl_icms          = est_row_inf_prov_docto_fiscal.vl_icms
                                        , vl_outros        = est_row_inf_prov_docto_fiscal.vl_outros
          where id = est_row_inf_prov_docto_fiscal.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_inf_prov_docto_fisc fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END pkb_integr_inf_prov_docto_fisc;

------------------------------------------------------------------------------------------------
-- Procedimento integra as informações de impostos partilha ICMS - campos flex field --
------------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_IMPITNFICMSDEST_FF ( EST_LOG_GENERICO_NF      IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                        , EN_NOTAFISCAL_ID         IN            NOTA_FISCAL.ID%TYPE
                                        , EN_IMPITEMNF_ID          IN            IMP_ITEMNF.ID%TYPE
                                        , EN_IMPITEMNFICMSDEST_ID  IN            IMP_ITEMNF_ICMS_DEST.id%type
                                        , EV_ATRIBUTO              IN            VARCHAR2
                                        , EV_VALOR                 IN            VARCHAR2
                                        , EN_MULTORG_ID            IN            MULT_ORG.ID%TYPE
                                        ) 
IS
   --
   vn_fase                  number := 0;
   vn_loggenerico_id        log_generico_nf.id%type;
   vv_mensagem              varchar2(1000) := null;
   vn_dmtipocampo           ff_obj_util_integr.dm_tipo_campo%type;
   --
   vn_vl_bc_fcp_dest        imp_itemnf_icms_dest.vl_bc_fcp_dest%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   gv_mensagem_log := null;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Impostos do Item da Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Impostos do Item da Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_IMP_ITEMNF_ICMS_DEST_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_IMP_ITEMNF_ICMS_DEST_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'VL_BC_FCP_DEST' then
         --
         vn_fase := 10;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 10.2;
               --
               vn_vl_bc_fcp_dest := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_ICMS_DEST_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 10.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      else
         --
         vn_fase := 89;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(en_impitemnf_id,0) = 0 then
      --
      vn_fase := 99.1;
      --
      gv_mensagem_log := 'Identificador do imposto do item da nota fiscal não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.3;
      --
      update nota_fiscal nf
         set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.4;
   --
   if nvl(EN_IMPITEMNFICMSDEST_ID,0) > 0 and
         trim(ev_atributo) = 'VL_BC_FCP_DEST' and
         nvl(vn_vl_bc_fcp_dest, 0) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.19;
         --
         update IMP_ITEMNF_ICMS_DEST ii
            set ii.vl_bc_fcp_dest = vn_vl_bc_fcp_dest
          where ii.id = EN_IMPITEMNFICMSDEST_ID;
         --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_INTEGR_IMPITNFICMSDEST_FF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_IMPITNFICMSDEST_FF;

--------------------------------------------------------------------------------
-- Procedimento integra as informações do Grupo de Tributação do Imposto ICMS --
--------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_IMP_ITEMNFICMSDEST ( EST_LOG_GENERICO_NF        IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                        , EST_ROW_IMP_ITEMNFICMSDEST IN OUT        IMP_ITEMNF_ICMS_DEST%ROWTYPE
                                        , EN_NOTAFISCAL_ID           IN            NOTA_FISCAL.ID%TYPE
                                        , EN_MULTORG_ID              IN            MULT_ORG.ID%TYPE ) IS
   --
   vn_fase               number := 0;
   vn_loggenericonf_id   log_generico_nf.id%type;
   vv_existe             varchar2(1) := null;
   vv_uf_destino         estado.sigla_estado%type := null;
   vv_uf_origem          estado.sigla_estado%type := null;
   vd_dt_emiss           nota_fiscal.dt_emiss%type := null;
   vd_dt_emiss_ref       nota_fiscal.dt_emiss%type := null;
   vd_dt_emiss_nf        nota_fiscal.dt_emiss%type := null;
   vv_mens_dt_nota       varchar2(15) := null;
   vn_cfop               item_nota_fiscal.cfop%type := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   gv_mensagem_log := null;
   --
   if nvl(en_notafiscal_id,0) = 0 and
      nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado identificador da Nota Fiscal para registro do Grupo de Tributação do Imposto ICMS.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if nvl(est_row_imp_itemnficmsdest.impitemnf_id,0) = 0 and
      nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Não informado identificador imposto ICMS do item da Nota Fiscal para registro do Grupo de Tributação do Imposto ICMS.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if est_row_imp_itemnficmsdest.vl_bc_uf_dest is null then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Valor da Base de Cálculo do ICMS na UF do destinatário para registro do Grupo de Tributação do Imposto ICMS não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_imp_itemnficmsdest.vl_bc_uf_dest,0) < 0 then
         --
         vn_fase := 3.2;
         --
         gv_mensagem_log := 'Valor da Base de Cálculo do ICMS na UF do destinatário para registro do Grupo de Tributação do Imposto ICMS não pode ser negativo.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
   end if;
   --
   vn_fase := 4;
   --
   if est_row_imp_itemnficmsdest.perc_icms_uf_dest is null then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'Alíquota adotada nas operações internas na UF do destinatário para registro do Grupo de Tributação do Imposto ICMS não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_imp_itemnficmsdest.perc_icms_uf_dest,0) < 0 then
         --
         vn_fase := 4.2;
         --
         gv_mensagem_log := 'Alíquota adotada nas operações internas na UF do destinatário para registro do Grupo de Tributação do Imposto ICMS não pode ser negativo.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
   end if;
   --
   vn_fase := 5;
   --
   if est_row_imp_itemnficmsdest.perc_icms_inter is null then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Alíquota interestadual das UF para registro do Grupo de Tributação do Imposto ICMS não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_imp_itemnficmsdest.perc_icms_inter,0) < 0 then
         --
         vn_fase := 5.2;
         --
         gv_mensagem_log := 'Alíquota interestadual das UF para registro do Grupo de Tributação do Imposto ICMS não pode ser negativo.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
   else
      --
      vn_fase := 5.3;
      --
      -- Em 18/12/2015 - Angela Inês.
      -- Redmine #13919 - Eliminar as regras da Nota Técnica 2015.002 e 2015.003 - ICMS de UF de Destinatário.
      -- Não consistir os percentuais de 4%, 7% e 12%, devido a SEFAZ validar para alguns estados e para outros não.
      -- O processo deverá ficar comentado, caso em 01/01/2016, o processo da SEFAZ fique mais coerente com as regras da Nota Técnica.
      --
      -- Em 05/07/2018 - Angela Inês.
      -- Redmine #41408 - Tratamento no retorno erro do XML. Alteração na validação do Percentual de ICMS Interestadual - Nota Fiscal Mercantil.
      -- Ao validar o Percentual de ICMS Interestadual, verificar os valores relacionados a mudança da NFe 4.0.
      -- Os valores poderão ser 4%, 7% e 12%, dependendo dos Estados/UF do destinatário. As validações NÃO IRÃO INVALIDAR a nota fiscal, pois ainda estamos
      -- atendendo a NFe 3.10, que não exige essas alíquotas, podendo ser 0(zero). Os logs/mensagens de inconsistência serão gerados como advertência/aviso.
      --
      -- 4% alíquota interestadual para produtos importados
      begin
         select 'S'
           into vv_existe
           from imp_itemnf       ii
              , item_nota_fiscal it
          where ii.id               = est_row_imp_itemnficmsdest.impitemnf_id
            and it.id               = ii.itemnf_id
            and instr(it.cfop,1,1) in (2,6) -- interestadual
            and it.orig            in (1,2,3,8) -- produtos importados
            and rownum              = 1;
      exception
         when no_data_found then
            vv_existe := 'N';
         when others then
            null;
      end;
      --
      vn_fase := 5.4;
      --
      if vv_existe = 'S' and nvl(est_row_imp_itemnficmsdest.perc_icms_inter,0) = 4 then
         --
         vn_fase := 5.5; -- Situação aprovada
         --
      elsif vv_existe = 'N' and nvl(est_row_imp_itemnficmsdest.perc_icms_inter,0) = 4 then
            --
            vn_fase := 5.6;
            --
            gv_mensagem_log := 'Alíquota interestadual das UF para registro do Grupo de Tributação do Imposto ICMS deve ser 4% devido a operação '||
                               'interestadual para produtos importados.';
            --
            vn_loggenericonf_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => informacao -- erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            --pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
            --                       , est_log_generico_nf => est_log_generico_nf );
           --
      elsif vv_existe = 'S' and nvl(est_row_imp_itemnficmsdest.perc_icms_inter,0) in (7,12) then
            --
            vn_fase := 5.7;
            --
            gv_mensagem_log := 'Alíquota interestadual das UF para registro do Grupo de Tributação do Imposto ICMS deve ser 7% ou 12% devido a operação '||
                               'interestadual para produtos não importados.';
            --
            vn_loggenericonf_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => informacao -- erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            --pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
            --                       , est_log_generico_nf => est_log_generico_nf );
            --
      else
         --
         vn_fase := 5.8;
         --
         if vv_existe = 'N' then -- origem do produto não é importação
            --
            vn_fase := 5.9;
            --
            begin
               select pk_csf.fkg_siglaestado_pessoaid(nf.pessoa_id)
                    , pk_csf.fkg_sigla_estado_empresa(nf.empresa_id)
                 into vv_uf_destino
                    , vv_uf_origem
                 from nota_fiscal nf
                where nf.id = en_notafiscal_id;
            exception
               when others then
                  vv_uf_destino := null;
                  vv_uf_origem  := null;
            end;
            --
            vn_fase := 5.10;
            --
            if vv_uf_destino is null then
               --
               vn_fase := 5.11;
               --
               begin
                  select nd.uf
                    into vv_uf_destino
                    from nota_fiscal_dest nd
                   where nd.notafiscal_id = en_notafiscal_id;
               exception
                  when others then
                     vv_uf_destino := null;
               end;
               --
            end if;
            --
            vn_fase := 5.12;
            --
            if vv_uf_origem is null then
               --
               vn_fase := 5.13;
               --
               begin
                  select ne.uf
                    into vv_uf_origem
                    from nota_fiscal_emit ne
                   where ne.notafiscal_id = en_notafiscal_id;
               exception
                  when others then
                     vv_uf_origem := null;
               end;
               --
            end if;
            --
            vn_fase := 5.14;
            --
            if vv_uf_destino is null or
               vv_uf_origem is null then
               --
               vn_fase := 5.15;
               null;
               --
            else
               --
               vn_fase := 5.16;
               --
               if vv_uf_origem in ('PR','SC','RS', 'SP','MG','RJ') and -- origem Sul e Sudeste com exceção de ES
                  vv_uf_destino in ('RO','AC','AM', 'PA', 'TO', 'RR', 'AP', 'BA','PI','MA', 'SE', 'AL', 'PE', 'PR', 'RN', 'CE', 'ES') then -- destino Norte e Nordeste e ES
                  --
                  vn_fase := 5.17;
                  --
                  if nvl(est_row_imp_itemnficmsdest.perc_icms_inter,0) <> 7 then -- 7% para os Estados de origem do Sul e Sudeste (exceto ES), destinado para os Estados do Norte e Nordeste ou ES
                     --
                     vn_fase := 5.18;
                     --
                     gv_mensagem_log := 'Alíquota interestadual das UF para registro do Grupo de Tributação do Imposto ICMS deve ser 7% devido aos Estados de '||
                                        'origem do Sul e Sudeste (exceto ES), destinado para os Estados do Norte e Nordeste ou ES.';
                     --
                     vn_loggenericonf_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => informacao -- erro_de_validacao
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     --pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                     --                       , est_log_generico_nf => est_log_generico_nf );
                     --
                  end if; -- alíquota 7%
                  --
               else
                  --
                  vn_fase := 5.19;
                  -- 12% para os demais casos
                  if nvl(est_row_imp_itemnficmsdest.perc_icms_inter,0) <> 12 then
                     --
                     vn_fase := 5.20;
                     --
                     gv_mensagem_log := 'Alíquota interestadual das UF para registro do Grupo de Tributação do Imposto ICMS deve ser 12% devido a não ter operação '||
                                        'interestadual para produtos importados e não pertencer aos Estados de origem do Sul e Sudeste (exceto ES), destinado para '||
                                        'os Estados do Norte e Nordeste ou ES.';
                     --
                     vn_loggenericonf_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => informacao -- erro_de_validacao
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     --pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                     --                       , est_log_generico_nf => est_log_generico_nf );
                     --
                  end if; -- alíquota 12%
                  --
               end if; -- origem e destino da mercadoria
               --
            end if; -- não foi encontrado UF de destino e/ou de origem
            --
         end if; -- origem do produto não é importação
         --
      end if; -- alíquota 4%, 7% e 12% e origem de produto importação
      --
   end if; -- alíquota nula ou negativa
   --
   vn_fase := 6;
   --
   begin
      select nf.dt_emiss
        into vd_dt_emiss_nf
        from nota_fiscal nf
       where nf.id = en_notafiscal_id;
   exception
      when others then
         vd_dt_emiss_nf := null;
   end;
   --
   vn_fase := 6.1;
   --
   begin
      select max(nr.dt_emiss)
        into vd_dt_emiss_ref
        from nota_fiscal_referen nr
       where nr.notafiscal_id = en_notafiscal_id;
   exception
      when others then
         vd_dt_emiss_ref := null;
   end;
   --
   vn_fase := 6.2;
   --
   if vd_dt_emiss_ref is null then
      vd_dt_emiss     := vd_dt_emiss_nf;
      vv_mens_dt_nota := ' ';
   else
      vd_dt_emiss     := vd_dt_emiss_ref;
      vv_mens_dt_nota := ' referenciada ';
   end if;
   --
   vn_fase := 7;
   --
   
    begin
         select it.cfop
           into vn_cfop
           from imp_itemnf       ii
              , item_nota_fiscal it
          where ii.id               = est_row_imp_itemnficmsdest.impitemnf_id
            and it.id               = ii.itemnf_id
          --  and instr(it.cfop,1,1) in (2,6) -- interestadual
          --  and it.orig            in (1,2,3,8) -- produtos importados
            and rownum              = 1;
      exception
         when no_data_found then
            vn_cfop := '';
         when others then
            null;
      end;
   
   if est_row_imp_itemnficmsdest.perc_icms_inter_part is null then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := 'Percentual de partilha para a UF do destinatário para registro do Grupo de Tributação do Imposto ICMS não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_imp_itemnficmsdest.perc_icms_inter_part,0) < 0 then
         --
         vn_fase := 7.2;
         --
         gv_mensagem_log := 'Percentual de partilha para a UF do destinatário para registro do Grupo de Tributação do Imposto ICMS não pode ser negativo.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
   else
      --
      vn_fase := 7.3;
      --
      if to_number(to_char(trunc(vd_dt_emiss,'rrrr'),'rrrr')) = 2016 and
         nvl(est_row_imp_itemnficmsdest.perc_icms_inter_part,0) <> 40 then
         --
         vn_fase := 7.4;
         --
         gv_mensagem_log := 'Percentual de partilha para a UF do destinatário para registro do Grupo de Tributação do Imposto ICMS deve ser 40% '||
                            'devido ao ano da emissão da nota ser 2016. Data de emissão da nota'||vv_mens_dt_nota||to_char(vd_dt_emiss,'dd/mm/rrrr')||'.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      elsif to_number(to_char(trunc(vd_dt_emiss,'rrrr'),'rrrr')) = 2017 and
            nvl(est_row_imp_itemnficmsdest.perc_icms_inter_part,0) <> 60 then
            --
            vn_fase := 7.5;
            --
            gv_mensagem_log := 'Percentual de partilha para a UF do destinatário para registro do Grupo de Tributação do Imposto ICMS deve ser 60% '||
                               'devido ao ano da emissão da nota ser 2017. Data de emissão da nota'||vv_mens_dt_nota||to_char(vd_dt_emiss,'dd/mm/rrrr')||'.';
            --
            vn_loggenericonf_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
      elsif to_number(to_char(trunc(vd_dt_emiss,'rrrr'),'rrrr')) = 2018 and
            nvl(est_row_imp_itemnficmsdest.perc_icms_inter_part,0) <> 80 and 
                vn_cfop  <> '2554' 
             then
            --
            vn_fase := 7.6;
            --
            gv_mensagem_log := 'Percentual de partilha para a UF do destinatário para registro do Grupo de Tributação do Imposto ICMS deve ser 80% '||
                               'devido ao ano da emissão da nota ser 2018. Data de emissão da nota'||vv_mens_dt_nota||to_char(vd_dt_emiss,'dd/mm/rrrr')||'.';
            --
            vn_loggenericonf_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
      elsif to_number(to_char(trunc(vd_dt_emiss,'rrrr'),'rrrr')) >= 2019 and
            nvl(est_row_imp_itemnficmsdest.perc_icms_inter_part,0) <> 100 then
            --
            vn_fase := 7.7;
            --
            gv_mensagem_log := 'Percentual de partilha para a UF do destinatário para registro do Grupo de Tributação do Imposto ICMS deve ser 100% devido  ao '||
                               'ano da emissão da nota ser igual ou maior que 2019. Data de emissão da nota'||vv_mens_dt_nota||to_char(vd_dt_emiss,'dd/mm/rrrr')||'.';
            --
            vn_loggenericonf_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
      end if; -- alíquota e o ano de emissão
      --
   end if; -- alíquota nula ou negativa
   --
   vn_fase := 8;
   --
   if est_row_imp_itemnficmsdest.vl_icms_uf_dest is null then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := 'Valor do ICMS de partilha para a UF do destinatário para registro do Grupo de Tributação do Imposto ICMS não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_imp_itemnficmsdest.vl_icms_uf_dest,0) < 0 then
         --
         vn_fase := 8.2;
         --
         gv_mensagem_log := 'Valor do ICMS de partilha para a UF do destinatário para registro do Grupo de Tributação do Imposto ICMS não pode ser negativo.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
   end if; -- alíquota nula ou negativa
   --
   vn_fase := 9;
   --
   if est_row_imp_itemnficmsdest.vl_icms_uf_remet is null then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := 'Valor do ICMS de partilha para a UF do remetente para registro do Grupo de Tributação do Imposto ICMS não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_imp_itemnficmsdest.vl_icms_uf_remet,0) < 0 then
         --
         vn_fase := 9.2;
         --
         gv_mensagem_log := 'Valor do ICMS de partilha para a UF do remetente para registro do Grupo de Tributação do Imposto ICMS não pode ser negativo.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
   elsif to_number(to_char(trunc(vd_dt_emiss,'rrrr'),'rrrr')) >= 2019 and
         nvl(est_row_imp_itemnficmsdest.vl_icms_uf_remet,0) > 0 then
         --
         vn_fase := 9.3;
         --
         gv_mensagem_log := 'Valor do ICMS de partilha para a UF do remetente para registro do Grupo de Tributação do Imposto ICMS não pode ser maior '||
                            'que zero devido ao ano de emissão da nota ser igual ou maior que 2019. Data de emissão da nota'||vv_mens_dt_nota||
                            to_char(vd_dt_emiss,'dd/mm/rrrr')||'.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
   end if; -- alíquota nula ou negativa, e ano 2019
   --
   vn_fase := 10;
   --
   if est_row_imp_itemnficmsdest.perc_comb_pobr_uf_dest is null then
      --
      vn_fase := 10.1;
      --
      gv_mensagem_log := 'Percentual do ICMS relativo ao Fundo de Combate à Pobreza (FCP) na UF de destino não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_imp_itemnficmsdest.perc_comb_pobr_uf_dest,0) < 0 then
         --
         vn_fase := 10.2;
         --
         gv_mensagem_log := 'Percentual do ICMS relativo ao Fundo de Combate à Pobreza (FCP) na UF de destino não pode ser negativo.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
   elsif nvl(est_row_imp_itemnficmsdest.perc_comb_pobr_uf_dest,0) > 2 then
         --
         vn_fase := 10.3;
         --
         gv_mensagem_log := 'Percentual do ICMS relativo ao Fundo de Combate à Pobreza (FCP) na UF de destino não pode ser maior que 2%.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
   end if;
   --
   vn_fase := 11;
   --
   if est_row_imp_itemnficmsdest.vl_comb_pobr_uf_dest is null then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := 'Valor do ICMS relativo ao Fundo de Combate à Pobreza (FCP) da UF de destino não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_imp_itemnficmsdest.vl_comb_pobr_uf_dest,0) < 0 then
         --
         vn_fase := 11.2;
         --
         gv_mensagem_log := 'Valor do ICMS relativo ao Fundo de Combate à Pobreza (FCP) da UF de destino não pode ser negativo.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
   end if;
   --
   vn_fase := 12;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 12.1;
      --
      begin
         --
         update nota_fiscal nf
            set nf.dm_st_proc = 10
          where nf.id = en_notafiscal_id;
         --
      exception
         when others then
            --
            gv_mensagem_log := 'Problemas ao atualizar situação da nota fiscal (id='||en_notafiscal_id||') - pkb_integr_imp_itemnficmsdest fase('||vn_fase||
                               '). Erro = '||sqlerrm;
            --
            declare
               vn_loggenericonf_id  log_generico_nf.id%type;
            begin
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                      , est_log_generico_nf => est_log_generico_nf );
            exception
               when others then
                  null;
            end;
            --
      end;
      --
   end if;
   --
   vn_fase := 13;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      nvl(est_row_imp_itemnficmsdest.impitemnf_id,0) > 0 and
      nvl(est_row_imp_itemnficmsdest.vl_bc_uf_dest,0) >= 0 and
      nvl(est_row_imp_itemnficmsdest.perc_icms_uf_dest,0) >= 0 and
      nvl(est_row_imp_itemnficmsdest.perc_icms_inter,0) >= 0 and
      nvl(est_row_imp_itemnficmsdest.perc_icms_inter_part,0) >= 0 and
      nvl(est_row_imp_itemnficmsdest.vl_icms_uf_dest,0) >= 0 and
      nvl(est_row_imp_itemnficmsdest.vl_icms_uf_remet,0) >= 0 and
      nvl(est_row_imp_itemnficmsdest.perc_comb_pobr_uf_dest,0) <= 2 and
      nvl(est_row_imp_itemnficmsdest.vl_comb_pobr_uf_dest,0) >= 0 then
      --
      vn_fase := 13.1;
      --
      if pk_csf.fkg_existe_imp_itemnficmsdest(en_impitemnf_id => est_row_imp_itemnficmsdest.impitemnf_id) = false then
         --
         vn_fase := 13.2;
         --
         select impitemnficmsdest_seq.nextval
           into est_row_imp_itemnficmsdest.id
           from dual;
         --
         vn_fase := 13.3;
         --
         insert into imp_itemnf_icms_dest ( id
                                          , impitemnf_id
                                          , vl_bc_uf_dest
                                          , perc_icms_uf_dest
                                          , perc_icms_inter
                                          , perc_icms_inter_part
                                          , vl_icms_uf_dest
                                          , vl_icms_uf_remet
                                          , perc_comb_pobr_uf_dest
                                          , vl_comb_pobr_uf_dest
                                          )
                                   values ( est_row_imp_itemnficmsdest.id
                                          , est_row_imp_itemnficmsdest.impitemnf_id
                                          , nvl(est_row_imp_itemnficmsdest.vl_bc_uf_dest,0)
                                          , nvl(est_row_imp_itemnficmsdest.perc_icms_uf_dest,0)
                                          , nvl(est_row_imp_itemnficmsdest.perc_icms_inter,0)
                                          , nvl(est_row_imp_itemnficmsdest.perc_icms_inter_part,0)
                                          , nvl(est_row_imp_itemnficmsdest.vl_icms_uf_dest,0)
                                          , nvl(est_row_imp_itemnficmsdest.vl_icms_uf_remet,0)
                                          , nvl(est_row_imp_itemnficmsdest.perc_comb_pobr_uf_dest,0)
                                          , nvl(est_row_imp_itemnficmsdest.vl_comb_pobr_uf_dest,0)
                                          );
         --
      else
         --
         vn_fase := 13.4;
         --
         update imp_itemnf_icms_dest ii
            set ii.vl_bc_uf_dest          = nvl(est_row_imp_itemnficmsdest.vl_bc_uf_dest,0)
              , ii.perc_icms_uf_dest      = nvl(est_row_imp_itemnficmsdest.perc_icms_uf_dest,0)
              , ii.perc_icms_inter        = nvl(est_row_imp_itemnficmsdest.perc_icms_inter,0)
              , ii.perc_icms_inter_part   = nvl(est_row_imp_itemnficmsdest.perc_icms_inter_part,0)
              , ii.vl_icms_uf_dest        = nvl(est_row_imp_itemnficmsdest.vl_icms_uf_dest,0)
              , ii.vl_icms_uf_remet       = nvl(est_row_imp_itemnficmsdest.vl_icms_uf_remet,0)
              , ii.perc_comb_pobr_uf_dest = nvl(est_row_imp_itemnficmsdest.perc_comb_pobr_uf_dest,0)
              , ii.vl_comb_pobr_uf_dest   = nvl(est_row_imp_itemnficmsdest.vl_comb_pobr_uf_dest,0)
          where ii.impitemnf_id = est_row_imp_itemnficmsdest.impitemnf_id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_imp_itemnficmsdest fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenericonf_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_IMP_ITEMNFICMSDEST;

------------------------------------------------------------------------------------------------
-- Procedimento integra as informações de impostos do Item da Nota Fiscal - campos flex field --
------------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_IMP_ITEMNF_FF ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                   , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE
                                   , EN_IMPITEMNF_ID  IN            IMP_ITEMNF.ID%TYPE
                                   , EV_ATRIBUTO      IN            VARCHAR2
                                   , EV_VALOR         IN            VARCHAR2
                                   , EN_MULTORG_ID    IN            MULT_ORG.ID%TYPE ) IS
   --
   vn_fase                  number := 0;
   vn_loggenerico_id        log_generico_nf.id%type;
   vv_mensagem              varchar2(1000) := null;
   vn_dmtipocampo           ff_obj_util_integr.dm_tipo_campo%type;
   vn_vl_base_outro         imp_itemnf.vl_base_outro%type := 0;
   vn_vl_imp_outro          imp_itemnf.vl_imp_outro%type := 0;
   vn_vl_base_isenta        imp_itemnf.vl_base_isenta%type := 0;
   vn_aliq_aplic_outro      imp_itemnf.aliq_aplic_outro%type := 0;
   vn_vl_imp_nao_dest       imp_itemnf.vl_imp_nao_dest%type := 0;
   vn_cod_nat_rec_pc        nat_rec_pc.cod%type := 0;
   vn_codst_id              cod_st.id%type := 0;
   vn_natrecpc_id           nat_rec_pc.id%type := 0;
   vn_cd_tipo_ret_imp       tipo_ret_imp.cd%type := null;
   vn_tipoimp_id            tipo_imposto.id%type := 0;
   vn_tiporetimp_id         tipo_ret_imp.id%type := 0;
   vv_cod_receita           tipo_ret_imp_receita.cod_receita%type;
   vn_tiporetimpreceita_id  tipo_ret_imp_receita.id%type;
   vn_vl_icms_deson         imp_itemnf.vl_icms_deson%type;
   vn_vl_icms_oper          imp_itemnf.vl_icms_oper%type;
   vn_percent_difer         imp_itemnf.percent_difer%type;
   vn_vl_icms_difer         imp_itemnf.vl_icms_difer%type;
   vn_dm_mot_des_icms       item_nota_fiscal.dm_mot_des_icms%type;
   --
   vn_vl_bc_fcp             imp_itemnf.vl_bc_fcp%type;
   vn_aliq_fcp              imp_itemnf.aliq_fcp%type;
   vn_vl_fcp                imp_itemnf.vl_fcp%type;
   vn_cd_imposto            tipo_imposto.cd%type;
   --
   vn_perc_red_bc_icms_efet imp_itemnf.perc_red_bc_icms_efet%type;
   vn_bc_icms_efet          imp_itemnf.bc_icms_efet%type;
   vn_aliq_icms_efet        imp_itemnf.aliq_icms_efet%type;
   vn_vl_icms_efet          imp_itemnf.vl_icms_efet%type;
   --
   vn_dm_valid_icms60       empresa.dm_valid_icms60%type;
   vn_empresa_id            empresa.id%type; 
   vv_cod_st                cod_st.cod_st%type;   
   --   
BEGIN
   --
   vn_fase := 1;
   --
   gv_mensagem_log := null;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Impostos do Item da Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Impostos do Item da Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 8.1;
      --
      begin
         --
         select n.empresa_id
           into vn_empresa_id
           from nota_fiscal n
          where n.id = EN_NOTAFISCAL_ID;
         --
      exception
         when others then
            vn_empresa_id := null;		 
      end;
      --	  
      vn_dm_valid_icms60 := pk_csf.fkg_empresa_dmvalicms60_emis( en_empresa_id => vn_empresa_id );
      --	  
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'VL_BASE_OUTRO'
         or trim(ev_atributo) = 'VL_IMP_OUTRO'
         or trim(ev_atributo) = 'VL_BASE_ISENTA'
         or trim(ev_atributo) = 'ALIQ_APLIC_OUTRO'
         or trim(ev_atributo) = 'COD_NAT_REC_PC'
         or trim(ev_atributo) = 'VL_IMP_NAO_DEST'
         or trim(ev_atributo) = 'CD_TIPO_RET_IMP'
         or trim(ev_atributo) = 'COD_RECEITA'	 
         then
         --
         vn_fase := 10;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 11;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 12;
               --
               if trim(ev_atributo) = 'VL_BASE_OUTRO' then
                  --
                  vn_fase := 13;
                  --
                  vn_vl_base_outro := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                                  , ev_atributo => trim(ev_atributo)
                                                                  , ev_valor    => trim(ev_valor) );
                  --
               elsif trim(ev_atributo) = 'VL_IMP_OUTRO' then
                     --
                     vn_fase := 14;
                     --
                     vn_vl_imp_outro := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                                    , ev_atributo => trim(ev_atributo)
                                                                    , ev_valor    => trim(ev_valor) );
                     --
               elsif trim(ev_atributo) = 'VL_BASE_ISENTA' then
                     --
                     vn_fase := 15;
                     --
                     vn_vl_base_isenta := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                                      , ev_atributo => trim(ev_atributo)
                                                                      , ev_valor    => trim(ev_valor) );
                     --
               elsif trim(ev_atributo) = 'ALIQ_APLIC_OUTRO' then
                     --
                     vn_fase := 16;
                     --
                     vn_aliq_aplic_outro := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                                        , ev_atributo => trim(ev_atributo)
                                                                        , ev_valor    => trim(ev_valor) );
                     --
               elsif trim(ev_atributo) = 'COD_NAT_REC_PC' then
                     --
                     vn_fase := 17;
                     --
                     begin
                        vn_cod_nat_rec_pc := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                                         , ev_atributo => trim(ev_atributo)
                                                                         , ev_valor    => trim(ev_valor) );
                     exception
                        when others then
                           vn_cod_nat_rec_pc := null;
                     end;
                     --
                     vn_fase := 18;
                     --
                     begin
                        select ii.codst_id
                          into vn_codst_id
                          from imp_itemnf ii
                         where ii.id = en_impitemnf_id;
                     exception
                        when others then
                           vn_codst_id := 0;
                     end;
                     --
                     vn_fase := 19;
                     --
                     begin
                        vn_natrecpc_id := pk_csf_efd_pc.fkg_codst_id_nat_rec_pc ( en_multorg_id        => en_multorg_id
                                                                                , en_natrecpc_codst_id => vn_codst_id
                                                                                , en_natrecpc_cod      => vn_cod_nat_rec_pc );
                     exception
                        when others then
                           vn_natrecpc_id := null;
                     end;
                     --
               elsif trim(ev_atributo) = 'VL_IMP_NAO_DEST' then
                     --
                     vn_fase := 20;
                     --
                     vn_vl_imp_nao_dest := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                                        , ev_atributo => trim(ev_atributo)
                                                                        , ev_valor    => trim(ev_valor)
                                                                        );
                     --
               end if;
               --
               vn_fase := 21;
               --
               if nvl(vn_vl_base_outro,0) < 0 or
                  nvl(vn_vl_imp_outro,0) < 0 or
                  nvl(vn_vl_base_isenta,0) < 0 or
                  nvl(vn_aliq_aplic_outro,0) < 0 or
                  nvl(vn_vl_imp_nao_dest,0) < 0
                  then
                  --
                  vn_fase := 22;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR ('||ev_valor||') informado não pode ser negativo.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo         => gv_mensagem_log
                                      , en_tipo_log       => erro_de_validacao
                                      , en_referencia_id  => gn_referencia_id
                                      , ev_obj_referencia => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
                  --
               elsif trim(ev_atributo) = 'COD_NAT_REC_PC' and
                     nvl(vn_natrecpc_id,0) <= 0 then
                     --
                     vn_fase := 23;
                     --
                     gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR ('||ev_valor||') informado está inválido.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo         => gv_mensagem_log
                                         , en_tipo_log       => erro_de_validacao
                                         , en_referencia_id  => gn_referencia_id
                                         , ev_obj_referencia => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                     --
               end if;
               --
            elsif vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 24;
                  --
                  if trim(ev_atributo) = 'CD_TIPO_RET_IMP' then
                     --
                     vn_fase := 25;
                     --
                     begin
                        vn_cd_tipo_ret_imp := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                                            , ev_atributo => trim(ev_atributo)
                                                                            , ev_valor    => trim(ev_valor) );
                     exception
                        when others then
                           vn_cd_tipo_ret_imp := null;
                     end;
                     --
                     vn_fase := 26;
                     --
                     begin
                        select ii.tipoimp_id
                          into vn_tipoimp_id
                          from imp_itemnf ii
                         where ii.id = en_impitemnf_id;
                     exception
                        when others then
                           vn_tipoimp_id := 0;
                     end;
                     --
                     vn_fase := 27;
                     --
                     begin
                        vn_tiporetimp_id := pk_csf.fkg_tipo_ret_imp( en_multorg_id => en_multorg_id
                                                                   , en_cd_ret     => vn_cd_tipo_ret_imp
                                                                   , en_tipoimp_id => vn_tipoimp_id );
                     exception
                        when others then
                           vn_tiporetimp_id := null;
                     end;
                     --
                     vn_fase := 28;
                     --
                     if nvl(vn_tiporetimp_id,0) <= 0 then
                        --
                        vn_fase := 29;
                        --
                        gv_mensagem_log := 'Identificador do tipo de retenção de imposto inválido de acordo com o imposto ('||
                                           pk_csf.fkg_tipo_imp_sigla(en_id => vn_tipoimp_id)||') e valor do atributo ('||ev_valor||'), informados.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo         => gv_mensagem_log
                                            , en_tipo_log       => erro_de_validacao
                                            , en_referencia_id  => gn_referencia_id
                                            , ev_obj_referencia => gv_obj_referencia );
                        -- Armazena o "loggenerico_id" na memória
                        pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                        --
                     end if;
                     --
                  elsif trim(ev_atributo) = 'COD_RECEITA' then
                     --
                     vn_fase := 29.1;
                     --
                     begin
                        vv_cod_receita := pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                                         , ev_atributo => trim(ev_atributo)
                                                                         , ev_valor    => trim(ev_valor) 
                                                                         );
                     exception
                        when others then
                           vv_cod_receita := null;
                     end;
                     --
                     vn_fase := 29.2;
                     --
                     begin
                        select ii.tipoimp_id
                             , ii.tiporetimp_id
                          into vn_tipoimp_id
                             , vn_tiporetimp_id
                          from imp_itemnf ii
                         where ii.id = en_impitemnf_id;
                     exception
                        when others then
                           vn_tipoimp_id := 0;
                           vn_tiporetimp_id := 0;
                     end;
                     --
                     vn_fase := 29.3;
                     --
                     if nvl(vn_tiporetimp_id,0) <= 0 then
                        --
                        begin
                           --
                           select min(r.id)
                             into vn_tiporetimpreceita_id
                             from tipo_ret_imp tri
                                , tipo_ret_imp_receita r
                            where tri.multorg_id   = en_multorg_id
                              and tri.tipoimp_id   = vn_tipoimp_id
                              and r.TIPORETIMP_ID  = tri.id
                              and r.cod_receita    = trim(vv_cod_receita);
                           --
                        exception
                           when others then
                              vn_tiporetimpreceita_id := 0;
                        end;
                        --
                     else
                        --
                        begin
                           --
                           select r.id
                             into vn_tiporetimpreceita_id
                             from tipo_ret_imp_receita r
                            where r.TIPORETIMP_ID = vn_tiporetimp_id
                              and r.cod_receita = trim(vv_cod_receita);
                           --
                        exception
                           when others then
                              vn_tiporetimpreceita_id := 0;
                        end;
                        --
                     end if;
                     --
                     vn_fase := 29.4;
                     --
                     if nvl(vn_tiporetimpreceita_id,0) <= 0 then
                        --
                        vn_fase := 29.5;
                        --
                        gv_mensagem_log := 'Identificador do Código de "Receita do tipo de retenção de imposto" inválido de acordo com o "imposto" ('||
                                           pk_csf.fkg_tipo_imp_sigla(en_id => vn_tipoimp_id)||'), "tipo de retenção de imposto"(' || pk_csf.fkg_tipo_ret_imp_cd ( en_tiporetimp_id => vn_tiporetimp_id )
                                           || ') e "valor do atributo" ('||ev_valor||'), informados.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo         => gv_mensagem_log
                                            , en_tipo_log       => erro_de_validacao
                                            , en_referencia_id  => gn_referencia_id
                                            , ev_obj_referencia => gv_obj_referencia );
                        -- Armazena o "loggenerico_id" na memória
                        pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                        --
                     end if;
                     --
                  end if;
                  --
            else
               --
               vn_fase := 30;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO/CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         else
            --
            vn_fase := 31;
            --
            gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR deve ser maior do que zero (0).';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo         => gv_mensagem_log
                                , en_tipo_log       => erro_de_validacao
                                , en_referencia_id  => gn_referencia_id
                                , ev_obj_referencia => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      elsif trim(ev_atributo) = 'VL_ICMS_DESON' then
         --
         vn_fase := 32;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 33;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 34;
               --
               vn_vl_icms_deson := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
               --
               vn_fase := 34.1;
               --
               begin
                  --
                  select dm_mot_des_icms
                    into vn_dm_mot_des_icms
                    from imp_itemnf ii
                       , item_nota_fiscal inf
                   where ii.id         = en_impitemnf_id
                     and inf.id        = ii.itemnf_id
					 and ii.tipoimp_id = 1;
                  --
               exception
                  when others then
                     vn_dm_mot_des_icms := null;
                     vn_vl_icms_deson   := NULL;
               end;
               --
               vn_fase := 34.2;
               --
               if (vn_dm_mot_des_icms is null and nvl(vn_vl_icms_deson,0) > 0) or
                  (vn_dm_mot_des_icms is not null and nvl(vn_vl_icms_deson,0) = 0 )then
                  --
                  vn_fase := 34.3;
                  --
                  gv_mensagem_log := 'Verifique a integração! Se existe ICMS Desonerado, os campos dm_mot_des_icms e o vl_icms_deson devem ser preechidos obrigatoriamente.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo => gv_mensagem_log
                                      , en_tipo_log => erro_de_validacao
                                      , en_referencia_id => gn_referencia_id
                                      , ev_obj_referencia => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;			   
			   --
               if vn_dm_mot_des_icms is null and vn_vl_icms_deson = 0 then
                  --
                  vn_vl_icms_deson := null;
                  --
               end if;
               --
            else
               --
               vn_fase := 35;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'VL_ICMS_OPER' then
         --
         vn_fase := 36;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 37;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 38;
               --
               vn_vl_icms_oper := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                              , ev_atributo => trim(ev_atributo)
                                                              , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 39;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
         --
         end if;
         --
      elsif trim(ev_atributo) = 'PERCENT_DIFER' then
         --
         vn_fase := 40;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 41;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 42;
               --
               vn_percent_difer := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
               --
               if nvl(vn_percent_difer,0) = 0 then
                  --
                  vn_percent_difer := null;
                  --
               end if;
               --
            else
               --
               vn_fase := 43;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'VL_ICMS_DIFER' then
         --
         vn_fase := 44;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 45;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 46;
               --
               vn_vl_icms_difer := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 47;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'VL_BC_FCP' then    
         --
         vn_fase := 48;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 48.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 48.2;
               --
               -- Verifique o tipo do imposto - Somente insere o vlr p o tipo de imposto ICMS ou ICSM-ST
               --
               begin
                  select ti.cd
                    into vn_cd_imposto
                    from imp_itemnf   ii
                       , tipo_imposto ti
                   where ti.id = ii.tipoimp_id
                     and ii.id = en_impitemnf_id
                     and ti.cd in (1, 2); -- ICMS / ICMS-ST
               exception
                  when others then
                     vn_cd_imposto := null;
               end;
               --
               if trim(vn_cd_imposto) is not null then
                  --
                  vn_vl_bc_fcp := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                              , ev_atributo => trim(ev_atributo)
                                                              , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 48.3;
                  --
                  -- Atribui null p a variável de VALOR
                  vn_vl_bc_fcp := null;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o Tipo de IMPOSTO tem que ser ICMS ou ICMS-ST. O VALOR não será incluído. Verifique!';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => informacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );

                  --
               end if;
               --
            else
               --
               vn_fase := 48.4;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'ALIQ_FCP' then     
         --
         vn_fase := 49;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 49.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 49.2;
               --
               -- Verifique o tipo do imposto - Somente insere o vlr p o tipo de imposto ICMS ou ICSM-ST
               --
               begin
                  select ti.cd
                    into vn_cd_imposto
                    from imp_itemnf   ii
                       , tipo_imposto ti
                   where ti.id = ii.tipoimp_id
                     and ii.id = en_impitemnf_id
                     and ti.cd in (1, 2); -- ICMS / ICMS-ST
               exception
                  when others then
                     vn_cd_imposto := null;
               end;
               --
               if trim(vn_cd_imposto) is not null then
                  --
                  vn_aliq_fcp := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                             , ev_atributo => trim(ev_atributo)
                                                             , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 49.3;
                  --
                  -- Atribui null p a variável de VALOR
                  vn_aliq_fcp := null;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o Tipo de IMPOSTO tem que ser ICMS ou ICMS-ST. O VALOR não será incluído. Verifique!';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => informacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );

                  --
               end if;
               --
            else
               --
               vn_fase := 49.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'VL_FCP' then    
         --
         vn_fase := 50;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 50.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 50.2;
               --
               -- Verifique o tipo do imposto - Somente insere o vlr p o tipo de imposto ICMS ou ICSM-ST
               --
               begin
                  select ti.cd
                    into vn_cd_imposto
                    from imp_itemnf   ii
                       , tipo_imposto ti
                   where ti.id = ii.tipoimp_id
                     and ii.id = en_impitemnf_id
                     and ti.cd in (1, 2); -- ICMS / ICMS-ST
               exception
                  when others then
                     vn_cd_imposto := null;
               end;
               --
               if trim(vn_cd_imposto) is not null then
                  --
                  vn_vl_fcp := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                           , ev_atributo => trim(ev_atributo)
                                                           , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 50.3;
                  --
                  -- Atribui null p a variável de VALOR
                  vn_vl_fcp := null;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o Tipo de IMPOSTO tem que ser ICMS ou ICMS-ST. O VALOR não será incluído. Verifique!';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => informacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );

                  --
               end if;
               --
            else
               --
               vn_fase := 50.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'BC_ICMS_EFET' then
         --
         vn_fase := 51;
         --
         begin
            select ti.cd
                 , cs.cod_st
              into vn_cd_imposto
                 , vv_cod_st					
              from imp_itemnf   ii
                 , tipo_imposto ti
                 , cod_st       cs					   
             where ti.id         = ii.tipoimp_id
               and ii.id         = en_impitemnf_id
               and ti.cd         in (1, 2, 10) -- ICMS / ICMS-ST / SN
               and cs.id         = ii.codst_id
               and cs.tipoimp_id = ii.tipoimp_id;					 
         exception
            when others then
               vn_cd_imposto := null;
               vv_cod_st	   := null;			 
         end;
         --		 
         if trim(ev_valor) is not null then
            --
            vn_fase := 51.1;
            --			
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 51.2;
               --
               -- Verifique o tipo do imposto - Somente insere o vlr p o tipo de imposto ICMS ou ICSM-ST
               --
               if trim(vn_cd_imposto) is not null then
                  --
                  vn_bc_icms_efet := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                           , ev_atributo => trim(ev_atributo)
                                                           , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 51.3;
                  --	  
                  -- Atribui null p a variável de VALOR
                  vn_bc_icms_efet := null;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o Tipo de IMPOSTO tem que ser ICMS ou ICMS-ST. O VALOR não será incluído. Verifique!';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => informacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  --
               end if;				  
               --
            else
               --
               vn_fase := 51.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         else
            --	
            if nvl(vn_dm_valid_icms60,0) = 1 and      -- Ativo na empresa para checar ICMS60				  
               nvl(vn_cd_imposto,0)      = 1 and      -- ICMS
               nvl(trim(vv_cod_st),'*')  = '60' then  -- CODST 60  
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', e nota com ICMS60 deverá ser informado o valor da Base ICMS Efetivo. Verifique!';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               --					 
            end if;
            --				  
         end if;
         --
      elsif trim(ev_atributo) = 'VL_ICMS_EFET' then
         --
         vn_fase := 52;
         --
         begin
            select ti.cd
                 , cs.cod_st
              into vn_cd_imposto
                 , vv_cod_st					
              from imp_itemnf   ii
                 , tipo_imposto ti
                 , cod_st       cs					   
             where ti.id         = ii.tipoimp_id
               and ii.id         = en_impitemnf_id
               and ti.cd         in (1, 2, 10) -- ICMS / ICMS-ST / SN
               and cs.id         = ii.codst_id
               and cs.tipoimp_id = ii.tipoimp_id;					 
         exception
            when others then
               vn_cd_imposto := null;
               vv_cod_st	   := null;			 
         end;
         --			 
         if trim(ev_valor) is not null then
            --
            vn_fase := 52.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 52.2;
               --
               -- Verifique o tipo do imposto - Somente insere o vlr p o tipo de imposto ICMS ou ICSM-ST
               --
               if trim(vn_cd_imposto) is not null then
                  --
                  vn_vl_icms_efet := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                           , ev_atributo => trim(ev_atributo)
                                                           , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 52.3;
                  --
                  -- Atribui null p a variável de VALOR
                  vn_vl_icms_efet := null;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o Tipo de IMPOSTO tem que ser ICMS ou ICMS-ST. O VALOR não será incluído. Verifique!';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => informacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );

                  --
               end if;
               --
            else
               --
               vn_fase := 52.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         else
            --	
            if nvl(vn_dm_valid_icms60,0) = 1 and      -- Ativo na empresa para checar ICMS60				  
               nvl(vn_cd_imposto,0)      = 1 and      -- ICMS
               nvl(trim(vv_cod_st),'*')  = '60' then  -- CODST 60  
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', e nota com ICMS60 deverá ser informado Valor ICMS Efetivo. Verifique!';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               --					 
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'ALIQ_ICMS_EFET' then
         --
         vn_fase := 53;
         --
         begin
            select ti.cd
                 , cs.cod_st
              into vn_cd_imposto
                 , vv_cod_st					
              from imp_itemnf   ii
                 , tipo_imposto ti
                 , cod_st       cs					   
             where ti.id         = ii.tipoimp_id
               and ii.id         = en_impitemnf_id
               and ti.cd         in (1, 2, 10) -- ICMS / ICMS-ST / SN
               and cs.id         = ii.codst_id
               and cs.tipoimp_id = ii.tipoimp_id;					 
         exception
            when others then
               vn_cd_imposto := null;
               vv_cod_st	   := null;			 
         end;
         --		 
         if trim(ev_valor) is not null then
            --
            vn_fase := 53.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 53.2;
               --
               -- Verifique o tipo do imposto - Somente insere o vlr p o tipo de imposto ICMS ou ICSM-ST
               --
               if trim(vn_cd_imposto) is not null then
                  --
                  vn_aliq_icms_efet := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                           , ev_atributo => trim(ev_atributo)
                                                           , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 53.3;
                  --
                  -- Atribui null p a variável de VALOR
                  vn_aliq_icms_efet := null;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o Tipo de IMPOSTO tem que ser ICMS ou ICMS-ST. O VALOR não será incluído. Verifique!';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => informacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );

                  --
               end if;
               --
            else
               --
               vn_fase := 53.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         else
            --		 
            if nvl(vn_dm_valid_icms60,0) = 1 and      -- Ativo na empresa para checar ICMS60				  
               nvl(vn_cd_imposto,0)      = 1 and      -- ICMS
               nvl(trim(vv_cod_st),'*')  = '60' then  -- CODST 60  
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', e nota com ICMS60 deverá ser informado o valor da Aliquota do ICMS Efetivo. Verifique!';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               --					 
            end if;
            -- 
         end if;
         --
      elsif trim(ev_atributo) = 'PERC_RED_BC_ICMS_EFET' then
         --
         vn_fase := 54;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 54.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 54.2;
               --
               -- Verifique o tipo do imposto - Somente insere o vlr p o tipo de imposto ICMS ou ICSM-ST
               --
               begin
                  select ti.cd
                    into vn_cd_imposto
                    from imp_itemnf   ii
                       , tipo_imposto ti
                   where ti.id = ii.tipoimp_id
                     and ii.id = en_impitemnf_id
                     and ti.cd in (1, 2, 10); -- ICMS / ICMS-ST / SN
               exception
                  when others then
                     vn_cd_imposto := null;
               end;
               --
               if trim(vn_cd_imposto) is not null then
                  --
                  vn_perc_red_bc_icms_efet := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_IMP_ITEMNF_FF'
                                                           , ev_atributo => trim(ev_atributo)
                                                           , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 54.3;
                  --
                  -- Atribui null p a variável de VALOR
                  vn_perc_red_bc_icms_efet := null;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o Tipo de IMPOSTO tem que ser ICMS ou ICMS-ST. O VALOR não será incluído. Verifique!';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => informacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );

                  --
               end if;
               --
            else
               --
               vn_fase := 54.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;                           
         --         
      else
         --
         vn_fase := 89;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(en_impitemnf_id,0) = 0 then
      --
      vn_fase := 99.1;
      --
      gv_mensagem_log := 'Identificador do imposto do item da nota fiscal não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.3;
      --
      update nota_fiscal nf
         set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.4;
   --
   if nvl(en_impitemnf_id,0) > 0 and
      trim(ev_atributo) = 'VL_BASE_OUTRO' and
      vn_vl_base_outro is not null and
      gv_mensagem_log is null then
      --
      vn_fase := 99.5;
      --
      update imp_itemnf ii
         set ii.vl_base_outro = vn_vl_base_outro
       where ii.id = en_impitemnf_id;
      --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'VL_IMP_OUTRO' and 
         vn_vl_imp_outro is not null and
         gv_mensagem_log is null then
         --
         vn_fase := 99.6;
         --
         update imp_itemnf ii
            set ii.vl_imp_outro = vn_vl_imp_outro
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'VL_BASE_ISENTA' and 
         vn_vl_base_isenta is not null and
         gv_mensagem_log is null then
         --
         vn_fase := 99.7;
         --
         update imp_itemnf ii
            set ii.vl_base_isenta = vn_vl_base_isenta
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'ALIQ_APLIC_OUTRO' and
         vn_aliq_aplic_outro is not null and
         gv_mensagem_log is null then
         --
         vn_fase := 99.8;
         --
         update imp_itemnf ii
            set ii.aliq_aplic_outro = vn_aliq_aplic_outro
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'VL_IMP_NAO_DEST' and
         vn_vl_imp_nao_dest is not null and
         gv_mensagem_log is null then
         --
         vn_fase := 99.9;
         --
         update imp_itemnf ii
            set ii.vl_imp_nao_dest = vn_vl_imp_nao_dest
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'COD_NAT_REC_PC' and
         vn_natrecpc_id is not null and
         gv_mensagem_log is null then
         --
         vn_fase := 99.10;
         --
         update imp_itemnf ii
            set ii.natrecpc_id = vn_natrecpc_id
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'CD_TIPO_RET_IMP' and
         vn_tiporetimp_id is not null and
         gv_mensagem_log is null then
         --
         vn_fase := 99.11;
         --
         update imp_itemnf ii
            set ii.tiporetimp_id = vn_tiporetimp_id
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'VL_ICMS_DESON' and
         nvl(vn_vl_icms_deson, 0) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.12;
         --
         IF vn_vl_icms_deson = 0 THEN
            vn_vl_icms_deson := NULL;
         END IF;
         --
         update imp_itemnf ii
            set ii.vl_icms_deson = vn_vl_icms_deson
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'VL_ICMS_OPER' and
         nvl(vn_vl_icms_oper, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.13;
         --
         update imp_itemnf ii
            set ii.vl_icms_oper = vn_vl_icms_oper
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'PERCENT_DIFER' and
         nvl(vn_percent_difer, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.14;
         --
         update imp_itemnf ii
            set ii.percent_difer = vn_percent_difer
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'VL_ICMS_DIFER' and
         nvl(vn_vl_icms_difer, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.15;
         --
         update imp_itemnf ii
            set ii.vl_icms_difer = vn_vl_icms_difer
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'COD_RECEITA' and
         nvl(vn_tiporetimpreceita_id, 0) > 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.16;
         --
         update imp_itemnf ii
            set ii.tiporetimpreceita_id = vn_tiporetimpreceita_id
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'VL_BC_FCP' and
         nvl(vn_vl_bc_fcp, 0) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.17;
         --
         update imp_itemnf ii
            set ii.VL_BC_FCP = vn_vl_bc_fcp
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'ALIQ_FCP' and
         nvl(vn_aliq_fcp, 0) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.18;
         --
         update imp_itemnf ii
            set ii.ALIQ_FCP = vn_aliq_fcp
          where ii.id = en_impitemnf_id;
         --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'VL_FCP' and
         nvl(vn_vl_fcp, 0) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.19;
         --
         update imp_itemnf ii
            set ii.VL_FCP = vn_vl_fcp
          where ii.id = en_impitemnf_id;
            --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'BC_ICMS_EFET' and
         nvl(vn_bc_icms_efet, 0) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.20;
         --
         update imp_itemnf ii
            set ii.bc_icms_efet = vn_bc_icms_efet
          where ii.id = en_impitemnf_id;
            --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'ALIQ_ICMS_EFET' and
         nvl(vn_aliq_icms_efet, 0) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.21;
         --
         update imp_itemnf ii
            set ii.aliq_icms_efet = vn_aliq_icms_efet
          where ii.id = en_impitemnf_id;
            --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'VL_ICMS_EFET' and
         nvl(vn_vl_icms_efet, 0) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.22;
         --
         update imp_itemnf ii
            set ii.vl_ICMS_EFET = vn_vl_icms_efet
          where ii.id = en_impitemnf_id;
            --
   elsif nvl(en_impitemnf_id,0) > 0 and
         trim(ev_atributo) = 'PERC_RED_BC_ICMS_EFET' and
         nvl(vn_perc_red_bc_icms_efet, 0) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.23;
         --
         update imp_itemnf ii
            set ii.perc_red_bc_icms_efet = vn_perc_red_bc_icms_efet
          where ii.id = en_impitemnf_id;                     
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Imp_ItemNf_ff fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_IMP_ITEMNF_FF;

---------------------------------------------------------------
-- Integra as informações de impostos do Item da Nota Fiscal --
---------------------------------------------------------------
PROCEDURE PKB_INTEGR_IMP_ITEMNF ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                , EST_ROW_IMP_ITEMNF   IN OUT NOCOPY  IMP_ITEMNF%ROWTYPE
                                , EN_CD_IMP            IN             TIPO_IMPOSTO.CD%TYPE
                                , EV_COD_ST            IN             COD_ST.COD_ST%TYPE
                                , EN_NOTAFISCAL_ID     IN             NOTA_FISCAL.ID%TYPE
                                , EV_SIGLA_ESTADO      IN             ESTADO.SIGLA_ESTADO%TYPE DEFAULT NULL ) IS
   --
   vn_fase                 number := 0;
   vn_loggenerico_id       log_generico_nf.id%type;
   vv_Sigla                Tipo_Imposto.Sigla%TYPE := null;
   vn_dm_rateia_ii_vl_item empresa.dm_rateia_ii_vl_item%type := null;
   vn_dm_mod_base_calc_st  item_nota_fiscal.dm_mod_base_calc_st%type; 
   --
   vn_vl_imp_trib          Imp_ItemNf.vl_imp_trib%type;
   vv_cod_mod              mod_fiscal.cod_mod%type;
   vb_gera_log             boolean;
   vn_vl_imp_trib_2        number; /*para calculo do Imp_ItemNf.vl_imp_trib sem truncar*/
   vv_cd_tipo_imposto      tipo_imposto.cd%type;
   vn_vl_toler_nf          number;
   vn_dif_valor            number;
   vn_empresa_id           empresa.id%type;   
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_Imp_ItemNf.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado ITEM da Nota Fiscal para registro dos Impostos.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 1.2;
   --
   begin
     select nfi.empresa_id
       into vn_empresa_id
      from item_nota_fiscal ite,
           nota_fiscal nfi
     where ite.id = est_row_Imp_ItemNf.Itemnf_Id
       and nfi.id = ite.notafiscal_id;
   exception
     when no_data_found then
        vn_empresa_id := null;
   end;
   --   
   vn_fase := 2;
   --
   -- Recupera o Tipo de Imposto, se não informado registra o erro de validação
   if nvl(en_cd_imp,0) > 0 then
      --
      vn_fase := 2.1;
      --
      est_row_Imp_ItemNf.tipoimp_id  := pk_csf.fkg_Tipo_Imposto_id ( en_cd => en_cd_imp );
      --
      vn_fase := 2.2;
      -- Se não encontrou o tipo de imposto registra o log
      if nvl(est_row_Imp_ItemNf.tipoimp_id,0) = 0 then
         --
         vn_fase := 2.3;
         --
         gv_mensagem_log := '"Tipo de Imposto da Nota Fiscal" está inválido ('||en_cd_imp||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      else
         --
         vn_fase := 2.4;
         --
         vv_Sigla := pk_csf.fkg_Tipo_Imposto_Sigla ( en_cd => en_cd_imp );
         --
      end if;
      --
   else
      --
      vn_fase := 2.5;
      --
      gv_mensagem_log := '"Tipo de Imposto da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if nvl(en_cd_imp,0) = 1 -- ICMS
      and ev_cod_st = '40' -- Isenta
      and nvl(gt_row_Item_Nota_Fiscal.dm_mot_des_icms,0) <= 0
      then
      --
      est_row_Imp_ItemNf.vl_imp_trib := 0;
      --
      --
      gv_mensagem_log := 'Zerado o valor de impostos de ICMS, para CST 40-Isenta, não existindo "Motivo de Desoneração de ICMS".';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => INFORMACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Recupera o código de tributação
   if ev_cod_st is not null and nvl(est_row_Imp_ItemNf.tipoimp_id,0) > 0 then
      --
      vn_fase := 4.1;
      --
      -- Conforme o imposto, restorna o ID do código da tributação
      est_row_Imp_ItemNf.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => ev_cod_st
                                                          , en_tipoimp_id  => est_row_Imp_ItemNf.tipoimp_id );
      --
   end if;
   --
   vn_fase := 5;
   -- Valida se o Código da Situação Tributária deveria ser obrigatório
   -- Se não tem CST e o imposto é 1-Icms, 3-IPI, 4-PIS ou 5-Cofins
   if nvl(est_row_Imp_ItemNf.codst_id,0) <= 0
      and est_row_Imp_ItemNf.dm_tipo = 0 -- IMposto
      and en_cd_imp in ( case when gt_row_Nota_Fiscal_Emit.dm_reg_trib = 3 then 1 else 10 end -- Se o Regime tributário for 3-Normal, valida o 1-ICMS senão valida 10-SN - Simples Nacional
                       , 3, 4, 5, 10 ) -- 3-IPI, 4-PIS, 5-COFINS, 10-SN
      then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Não foi informado o Código de Situação Tributária para o tipo de imposto '||vv_Sigla||'.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   if nvl(est_row_Imp_ItemNf.codst_id,0) <= 0
      and en_cd_imp in ( case when gt_row_Nota_Fiscal_Emit.dm_reg_trib = 3 then 1 else 10 end -- Se o Regime tributário for 3-Normal, valida o ICMS
                       , 3, 4, 5, 10 )
      and trim(ev_cod_st) is not null 
      then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := 'Código de Situação Tributária está inválido ('||ev_cod_st||') para o tipo de imposto '||vv_Sigla||'.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   -- Valida informação do campo dm_tipo se é Imposto ou Retenção
   if est_row_Imp_ItemNf.dm_tipo not in (0, 1) then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Tipo de Impostos da Nota Fiscal" ('||est_row_Imp_ItemNf.dm_tipo||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   --
   vn_fase := 8;
   --
   -- Validações de números negativos
   --
   if nvl(est_row_Imp_ItemNf.vl_base_calc,0) < 0 then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Valor da Base de Cálculo de '||vv_Sigla||'" ('||est_row_Imp_ItemNf.vl_base_calc||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   if nvl(est_row_Imp_ItemNf.aliq_apli,0) < 0 then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := '"Alíquota de Imposto de '||vv_Sigla||'" ('||est_row_Imp_ItemNf.aliq_apli||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 10;
   --
   if nvl(est_row_Imp_ItemNf.vl_imp_trib,0) < 0 then
      --
      vn_fase := 10.1;
      --
      gv_mensagem_log := '"Valor do Imposto Tributado de '||vv_Sigla||'" ('||est_row_Imp_ItemNf.vl_imp_trib||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_Imp_ItemNf.vl_imp_trib,0)>= 0 then
      --
      vn_fase := 10.2;
      --
      vv_cod_mod:= pk_csf.fkg_cod_mod_id(en_modfiscal_id => gt_row_nota_fiscal.modfiscal_id);
      ---
      vb_gera_log:= false;
      --
      if ((vv_cod_mod = '99') /*Servico*/
        or (vv_cod_mod = '55' and gt_row_item_nota_fiscal.cd_lista_serv is not null))
        and gt_row_nota_fiscal.dm_ind_emit = 1 /*(Terceiros)*/
        then 
        --
        vv_cd_tipo_imposto:= null;
        vv_cd_tipo_imposto:= pk_csf.fkg_Tipo_Imposto_cd(en_tipoimp_id =>  est_row_Imp_ItemNf.Tipoimp_Id);
        --
        vn_fase := 10.3;
        --
        if est_row_Imp_ItemNf.dm_tipo = 1 -- retencao
          and vv_cd_tipo_imposto = 13 -- INSS
          then 
          ---
          vn_fase := 10.31;
          --		  
          -- Função retorna o valor de tolerância para os valores de documentos fiscais (nf) e caso não exista manter 0.03
          vn_vl_toler_nf := pk_csf.fkg_vlr_toler_empresa ( en_empresa_id => vn_empresa_id
                                                         , ev_opcao      => 'NF' );
          --
          vn_vl_imp_trib := 0;
          vn_vl_imp_trib := trunc(est_row_Imp_ItemNf.VL_BASE_CALC * (est_row_Imp_ItemNf.ALIQ_APLI/100),2);
          --
          vn_dif_valor := nvl(est_row_Imp_ItemNf.vl_imp_trib,0) - nvl(vn_vl_imp_trib,0);			 
          --			 
          if nvl(est_row_Imp_ItemNf.vl_imp_trib,0) <> nvl(vn_vl_imp_trib,0) and
             ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then			 
             --
             gv_mensagem_log := '"Valor do Imposto Tributado de '||vv_Sigla||'" ('||est_row_Imp_ItemNf.vl_imp_trib||') esta diferente se calculado a partir dos valores de "Valor da Base de Cálculo de '||vv_Sigla||'" e "Alíquota de Imposto de '||vv_Sigla||'".';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
        end if;
        --
      end if;
      --  
   end if;
   --
   vn_fase := 11;
   --
   if nvl(est_row_Imp_ItemNf.perc_reduc,0) < 0 then
      --
      vn_fase := 11.1;
      --
      est_row_Imp_ItemNf.perc_reduc := 0;
      --
   end if;
   --
   vn_fase := 12;
   --
   if nvl(est_row_Imp_ItemNf.perc_adic,0) < 0 then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := '"Percentual Adicional de Imposto de '||vv_Sigla||'" ('||est_row_Imp_ItemNf.perc_adic||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_Imp_ItemNf.perc_adic,0) = 0 then
      --   
      vn_fase := 12.2;
      --	  
      begin
         select inf.dm_mod_base_calc_st
           into vn_dm_mod_base_calc_st			
           from item_nota_fiscal inf
          where inf.id = est_row_Imp_ItemNf.itemnf_id;			  
      exception
         when others then
            vn_dm_mod_base_calc_st := null;			
      end;		 
      --	 
      if nvl(vn_dm_mod_base_calc_st,4) in (0, 1, 2, 3, 4, 5) and 
         ev_cod_st in ('10', '30', '60', '70', '90') and
         en_cd_imp IN (1,2) then -- ICMS  / ICMS-ST 			
         --			
         est_row_Imp_ItemNf.perc_adic := null;  -- colocado para não ocorrer erro no XML
         --			
      end if;
      --
   end if;
   --
   vn_fase := 13;
   --
   if nvl(est_row_Imp_ItemNf.qtde_base_calc_prod,0) < 0 then
      --
      vn_fase := 13.1;
      --
      gv_mensagem_log := '"Base de Cálculo por quantidade vendida de '||vv_Sigla||'" ('||est_row_Imp_ItemNf.qtde_base_calc_prod||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_Imp_ItemNf.vl_aliq_prod,0) < 0 then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := '"Alíquota de Imposto (em reais) de '||vv_Sigla||'" ('||est_row_Imp_ItemNf.vl_aliq_prod||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 15;
   --
   if nvl(gt_row_nota_fiscal.dm_ind_emit,0) = 0 then -- Não pode executar para Notas Fiscais Mercantis de Terceiros
      --
      vn_fase := 15.1;
      --
      -- Não Atribui valores zerados para não ocorrer erro de XML
      if nvl(est_row_Imp_ItemNf.vl_base_calc,0) > 0 or nvl(est_row_Imp_ItemNf.aliq_apli,0) > 0 then
         --
         est_row_Imp_ItemNf.vl_base_calc := nvl(est_row_Imp_ItemNf.vl_base_calc,0);
         est_row_Imp_ItemNf.aliq_apli := nvl(est_row_Imp_ItemNf.aliq_apli,0);
         est_row_Imp_ItemNf.qtde_base_calc_prod := null;
         est_row_Imp_ItemNf.vl_aliq_prod := null;
         --
      elsif nvl(est_row_Imp_ItemNf.qtde_base_calc_prod,0) > 0 or nvl(est_row_Imp_ItemNf.vl_aliq_prod,0) > 0 then
         --
         est_row_Imp_ItemNf.qtde_base_calc_prod := nvl(est_row_Imp_ItemNf.qtde_base_calc_prod,0);
         est_row_Imp_ItemNf.vl_aliq_prod := nvl(est_row_Imp_ItemNf.vl_aliq_prod,0);
         est_row_Imp_ItemNf.vl_base_calc := null;
         est_row_Imp_ItemNf.aliq_apli := null;
         --
      else
         --
         est_row_Imp_ItemNf.vl_base_calc := 0;
         est_row_Imp_ItemNf.aliq_apli := 0;
         est_row_Imp_ItemNf.qtde_base_calc_prod := null;
         est_row_Imp_ItemNf.vl_aliq_prod := null;
         --
      end if;
      --
   end if;
   --
   vn_fase := 16;
   --
   if nvl(est_row_Imp_ItemNf.vl_bc_st_ret,0) < 0 then
      --
      vn_fase := 16.1;
      --
      gv_mensagem_log := '"Valor da BC do ICMS ST retido de '||vv_Sigla||'" ('||est_row_Imp_ItemNf.vl_bc_st_ret||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(est_row_Imp_ItemNf.vl_icmsst_ret,0) < 0 then
      --
      vn_fase := 17.1;
      --
      gv_mensagem_log := '"Valor do ICMS ST retido de '||vv_Sigla||'" ('||est_row_Imp_ItemNf.vl_icmsst_ret||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 18;
   --
   if nvl(est_row_Imp_ItemNf.perc_bc_oper_prop,0) < 0 then
      --
      vn_fase := 18.1;
      --
      gv_mensagem_log := '"Percentual da BC operação própria de '||vv_Sigla||'" ('||est_row_Imp_ItemNf.perc_bc_oper_prop||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 19;
   -- Se a UF foi informada, busca seu ID
   if trim(ev_sigla_estado) is not null then
      --
      vn_fase := 19.1;
      --
      est_row_Imp_ItemNf.estado_id := pk_csf.fkg_Estado_id ( ev_sigla_estado => trim(ev_sigla_estado) );
      --
      vn_fase := 19.2;
      --
      if nvl(est_row_Imp_ItemNf.estado_id,0) <= 0 then
         --
         vn_fase := 19.3;
         --
         gv_mensagem_log := '"UF para qual é devido o ICMS ST" ('||ev_sigla_estado||') está inválida!';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 19.4;
      --
      if nvl(est_row_Imp_ItemNf.estado_id,0) > 0 and nvl(est_row_Imp_ItemNf.perc_bc_oper_prop,0) <= 0 then
         --
         est_row_Imp_ItemNf.perc_bc_oper_prop := null;
         --
      end if;
      --
   end if;
   --
   vn_fase := 20;
   --
   if nvl(est_row_Imp_ItemNf.vl_bc_st_dest,0) < 0 then
      --
      vn_fase := 20.1;
      --
      gv_mensagem_log := '"Valor da BC do ICMS ST da UF destino" ('||est_row_Imp_ItemNf.vl_bc_st_dest||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 21;
   --
   if nvl(est_row_Imp_ItemNf.vl_icmsst_dest,0) < 0 then
      --
      vn_fase := 21.1;
      --
      gv_mensagem_log := '"Valor do ICMS ST da UF destino" ('||est_row_Imp_ItemNf.vl_icmsst_dest||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 21.2;
   --
   if en_cd_imp = 1        -- ICMS
      and ev_cod_st = '51' -- Diferimento
      and est_row_Imp_ItemNf.percent_difer is not null
      and est_row_Imp_ItemNf.percent_difer <= 0 then
      --
      vn_fase := 21.3;
      --
      gv_mensagem_log := '"Valor do percentual do diferimento " ('||est_row_Imp_ItemNf.percent_difer||') não pode ser negativo ou zero para o imposto de ICMS com CST 51.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 22;
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (Valida e insere)
   -- então realiza a condição de inserir o imposto
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = ( select it.notafiscal_id from item_nota_fiscal it
                     where it.id = est_row_Imp_ItemNf.itemnf_id );
      --
   end if;
   --
   vn_fase := 23;
   --
   est_row_Imp_ItemNf.vl_imp_trib := nvl(est_row_Imp_ItemNf.vl_imp_trib,0);
   --
   vn_fase := 24;
   --
   begin
      --
      select dm_rateia_ii_vl_item
        into vn_dm_rateia_ii_vl_item
        from empresa
       where id = gt_row_Nota_Fiscal.empresa_id;
      --
   exception
      when others then
         vn_dm_rateia_ii_vl_item := 0;
   end;
   --
   vn_fase := 25;
   --
   if en_cd_imp = 7 -- Imposto de importação
      and nvl(est_row_Imp_ItemNf.vl_imp_trib,0) > 0
      and nvl(vn_dm_rateia_ii_vl_item,0) = 1
      then -- Adidas
      --
      declare
         --
         vn_vl_unit item_nota_fiscal.vl_unit_comerc%type := 0;
         vn_ii_unit item_nota_fiscal.vl_unit_comerc%type := 0; -- imposto de importação unitário
         vn_vl_item_bruto item_nota_fiscal.vl_item_bruto%type := 0;
         --
      begin
         --
         vn_fase := 25.1;
         --
         if nvl(est_row_Imp_ItemNf.vl_imp_trib,0) > 0 then
            --
            vn_fase := 25.2;
            --
            vn_ii_unit := round( ( nvl(est_row_Imp_ItemNf.vl_imp_trib,0) / nvl(gt_row_Item_Nota_Fiscal.qtde_comerc,0) ), 10);
            vn_vl_unit := nvl(gt_row_Item_Nota_Fiscal.vl_unit_comerc,0) - nvl(vn_ii_unit,0);
            vn_vl_item_bruto := round( ( nvl(gt_row_Item_Nota_Fiscal.qtde_comerc,0) * nvl(vn_vl_unit,0) ), 2);
            --
            vn_fase := 25.3;
            --
            update item_nota_fiscal set VL_UNIT_COMERC = vn_vl_unit
                                      , VL_ITEM_BRUTO = vn_vl_item_bruto
                                      , VL_UNIT_TRIB = vn_vl_unit
             where id = est_row_Imp_ItemNf.itemnf_id;
            --
         end if;
         --
      end;
      --
   end if;
   --
   vn_fase := 26;
   --
   if en_cd_imp = 1 and     -- ICMS
      ev_cod_st = '51' then -- Diferimento
      est_row_Imp_ItemNf.vl_icms_oper  := nvl(est_row_Imp_ItemNf.vl_icms_oper,0);
      est_row_Imp_ItemNf.vl_icms_difer := nvl(est_row_Imp_ItemNf.vl_icms_difer,0);
   end if;
   --
   vn_fase := 27;
   --
   if nvl(est_row_Imp_ItemNf.itemnf_id,0) > 0
      and nvl(est_row_Imp_ItemNf.tipoimp_id,0) > 0
      and est_row_Imp_ItemNf.dm_tipo           in (0, 1) then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 27.1;
         --
         select impitemnf_seq.nextval
           into est_row_Imp_ItemNf.id
           from dual;
         --
         vn_fase := 27.2;
         --
         insert into Imp_ItemNf ( id
                                , itemnf_id
                                , tipoimp_id
                                , dm_tipo
                                , codst_id
                                , vl_base_calc
                                , aliq_apli
                                , vl_imp_trib
                                , perc_reduc
                                , perc_adic
                                , qtde_base_calc_prod
                                , vl_aliq_prod
                                , vl_bc_st_ret
                                , vl_icmsst_ret
                                , perc_bc_oper_prop
                                , estado_id
                                , vl_bc_st_dest
                                , vl_icmsst_dest
                                , vl_icms_oper
                                , vl_icms_difer
                                )
                         values ( est_row_Imp_ItemNf.id
                                , est_row_Imp_ItemNf.itemnf_id
                                , est_row_Imp_ItemNf.tipoimp_id
                                , est_row_Imp_ItemNf.dm_tipo
                                , est_row_Imp_ItemNf.codst_id
                                , est_row_Imp_ItemNf.vl_base_calc
                                , est_row_Imp_ItemNf.aliq_apli
                                , est_row_Imp_ItemNf.vl_imp_trib
                                , est_row_Imp_ItemNf.perc_reduc
                                , est_row_Imp_ItemNf.perc_adic
                                , est_row_Imp_ItemNf.qtde_base_calc_prod
                                , est_row_Imp_ItemNf.vl_aliq_prod
                                , est_row_Imp_ItemNf.vl_bc_st_ret
                                , est_row_Imp_ItemNf.vl_icmsst_ret
                                , est_row_Imp_ItemNf.perc_bc_oper_prop
                                , est_row_Imp_ItemNf.estado_id
                                , est_row_Imp_ItemNf.vl_bc_st_dest
                                , est_row_Imp_ItemNf.vl_icmsst_dest
                                , est_row_Imp_ItemNf.vl_icms_oper
                                , est_row_Imp_ItemNf.vl_icms_difer
                                );
         --
      else
         --
         vn_fase := 27.3;
         --
         update Imp_ItemNf set tipoimp_id           = est_row_Imp_ItemNf.tipoimp_id
                             , dm_tipo              = est_row_Imp_ItemNf.dm_tipo
                             , codst_id             = est_row_Imp_ItemNf.codst_id
                             , vl_base_calc         = est_row_Imp_ItemNf.vl_base_calc
                             , aliq_apli            = est_row_Imp_ItemNf.aliq_apli
                             , vl_imp_trib          = est_row_Imp_ItemNf.vl_imp_trib
                             , perc_reduc           = est_row_Imp_ItemNf.perc_reduc
                             , perc_adic            = est_row_Imp_ItemNf.perc_adic
                             , qtde_base_calc_prod  = est_row_Imp_ItemNf.qtde_base_calc_prod
                             , vl_aliq_prod         = est_row_Imp_ItemNf.vl_aliq_prod
                             , vl_bc_st_ret         = est_row_Imp_ItemNf.vl_bc_st_ret
                             , vl_icmsst_ret        = est_row_Imp_ItemNf.vl_icmsst_ret
                             , perc_bc_oper_prop    = est_row_Imp_ItemNf.perc_bc_oper_prop
                             , estado_id            = est_row_Imp_ItemNf.estado_id
                             , vl_bc_st_dest        = est_row_Imp_ItemNf.vl_bc_st_dest
                             , vl_icmsst_dest       = est_row_Imp_ItemNf.vl_icmsst_dest
                             , vl_icms_oper         = est_row_Imp_ItemNf.vl_icms_oper
                             , vl_icms_difer        = est_row_Imp_ItemNf.vl_icms_difer
          where id = est_row_Imp_ItemNf.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Imp_ItemNf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_IMP_ITEMNF;

-----------------------------------------------------------------
-- Integra as informações Complementares do Item da NFe
-----------------------------------------------------------------

procedure pkb_integr_itemnf_compl_serv ( est_log_generico_nf       in out nocopy dbms_sql.number_table
                                       , est_row_itemnf_compl_serv in out        itemnf_compl_serv%rowtype
                                       , en_notafiscal_id          in            nota_fiscal.id%type
                                       , ev_cod_trib_municipio     in            cod_trib_municipio.cod_trib_municipio%type
                                       , en_cod_siscomex           in            pais.cod_siscomex%type
                                       , ev_cod_mun                in            cidade.ibge_cidade%type
                                       )
IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_cidade_id      number;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_itemnf_compl_serv.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o ITEM da Nota Fiscal para registro da Informação do complementar de serviço.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if nvl(est_row_itemnf_compl_serv.vl_deducao, 0) < 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Valor da dedução para redução da Base de Cálculo não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if nvl(est_row_itemnf_compl_serv.vl_outra_ret, 0) < 0 then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Valor de outras retenções não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_itemnf_compl_serv.vl_desc_incondicionado, 0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'Valor de desconto incondicionado não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_itemnf_compl_serv.vl_desc_condicionado, 0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Valor desconto condicionado não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   -- Emissão Própria, valida o "código de tributação do município"
   if gt_row_nota_fiscal.dm_ind_emit = 0 
      and trim(ev_cod_trib_municipio) is not null
      then
      --
      vn_fase := 6.1;
      --
      begin
         --
         select p.cidade_id
           into vn_cidade_id
           from empresa  e
              , pessoa   p
          where e.id     = gt_row_nota_fiscal.empresa_id
            and p.id     = e.pessoa_id;
         --
      exception
         when others then
            vn_cidade_id := null;
      end;
      --
      vn_fase := 6.2;
      --
      est_row_itemnf_compl_serv.codtribmunicipio_id := pk_csf.fkg_codtribmunicipio_id ( ev_codtribmunicipio_cd  => trim(ev_cod_trib_municipio)
                                                                                      , en_cidade_id            => vn_cidade_id
                                                                                      );
      --
   end if;
   --
   vn_fase := 7;
   --
   if nvl(en_cod_siscomex,0) > 0 then
      --
      est_row_itemnf_compl_serv.pais_id := pk_csf.fkg_Pais_siscomex_id ( ev_cod_siscomex => en_cod_siscomex );
      --
   end if;
   --
   vn_fase := 8;
   --
   if nvl(est_row_itemnf_compl_serv.dm_ind_incentivo, 0) not in (0, 1, 2) then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Indicador de incentivo Fiscal" deve ser 1 - Sim ou 2 - Não.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   if nvl(est_row_itemnf_compl_serv.dm_ind_incentivo, 0) = 0 then
      --
      est_row_itemnf_compl_serv.dm_ind_incentivo := 2;
      --
   end if;
   --
   vn_fase := 9;
   --
   est_row_itemnf_compl_serv.cidade_id := pk_csf.fkg_Cidade_ibge_id ( ev_ibge_cidade => ev_cod_mun );
   --
   vn_fase := 10;
   --
   if nvl(est_row_itemnf_compl_serv.cidade_id, 0) = 0 
      and ev_cod_mun is not null then
      --
      vn_fase := 10.1;
      --
      gv_mensagem_log := '"Código do Município de incidência do imposto" ('|| ev_cod_mun ||') está incorreto.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 11;
   --
   if nvl(est_row_itemnf_compl_serv.itemnf_id,0) > 0
      and nvl(est_row_itemnf_compl_serv.dm_ind_incentivo, 0) in (1, 2)
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 11.1;
         --
         insert into itemnf_compl_serv ( itemnf_id
                                       , dm_loc_exe_serv
                                       , codtribmunicipio_id
                                       , vl_desc_incondicionado
                                       , vl_desc_condicionado
                                       , vl_deducao
                                       , vl_outra_ret
                                       , pais_id
                                       , nro_proc
                                       , dm_ind_incentivo
                                       , cidade_id
                                       , centrocusto_id
                                       )
                                values ( est_row_itemnf_compl_serv.itemnf_id
                                       , 0 -- dm_loc_exe_serv
                                       , est_row_itemnf_compl_serv.codtribmunicipio_id -- codtribmunicipio_id
                                       , est_row_itemnf_compl_serv.vl_desc_incondicionado -- vl_desc_incondicionado
                                       , est_row_itemnf_compl_serv.vl_desc_condicionado -- vl_desc_condicionado
                                       , est_row_itemnf_compl_serv.vl_deducao -- vl_deducao
                                       , est_row_itemnf_compl_serv.vl_outra_ret -- vl_outra_ret
                                       , est_row_itemnf_compl_serv.pais_id -- pais_id
                                       , est_row_itemnf_compl_serv.nro_proc -- nro_proc
                                       , est_row_itemnf_compl_serv.dm_ind_incentivo -- dm_ind_incentivo
                                       , est_row_itemnf_compl_serv.cidade_id -- cidade_id
                                       , est_row_itemnf_compl_serv.centrocusto_id -- centrocusto_id
                                       );
         --
      else
         --
         vn_fase := 11.2;
         --
         update itemnf_compl_serv set codtribmunicipio_id    = est_row_itemnf_compl_serv.codtribmunicipio_id
                                    , vl_desc_incondicionado = est_row_itemnf_compl_serv.vl_desc_incondicionado
                                    , vl_desc_condicionado   = est_row_itemnf_compl_serv.vl_desc_condicionado
                                    , vl_deducao             = est_row_itemnf_compl_serv.vl_deducao
                                    , vl_outra_ret           = est_row_itemnf_compl_serv.vl_outra_ret
                                    , pais_id                = est_row_itemnf_compl_serv.pais_id
                                    , nro_proc               = est_row_itemnf_compl_serv.nro_proc
                                    , dm_ind_incentivo       = est_row_itemnf_compl_serv.dm_ind_incentivo
                                    , cidade_id              = est_row_itemnf_compl_serv.cidade_id
                                    , centrocusto_id         = est_row_itemnf_compl_serv.centrocusto_id
          where itemnf_id = est_row_itemnf_compl_serv.itemnf_id;
         --
      end if;
      --
   end if;   
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_itemnf_compl_serv fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END pkb_integr_itemnf_compl_serv;

--------------------------------------------------------
-- Integra as informações de Rastreabilidade de produto --
--------------------------------------------------------

PROCEDURE pkb_integr_itemnf_rastreab ( est_log_generico_nf      in out nocopy dbms_sql.number_table
                                     , est_row_itemnf_rastreab  in out        itemnf_rastreab%rowtype
                                     , en_notafiscal_id         in            nota_fiscal.id%type
                                     )
IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde_rastreab   number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_itemnf_rastreab.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o ITEM da Nota Fiscal para registro da Rastreabilidade de produto.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if nvl(est_row_itemnf_rastreab.itemnf_id,0) > 0 then
      --
      vn_fase := 2.1;
      --
      begin
         --
         select count(1)
           into vn_qtde_rastreab
           from itemnf_rastreab
          where itemnf_id = est_row_itemnf_rastreab.itemnf_id;
         --
      exception
         when others then
         vn_qtde_rastreab := 0;
      end;
      --
      if nvl(vn_qtde_rastreab,0) > 500
         then
         --
         vn_fase := 2.2;
         --
         gv_mensagem_log := 'Não é possível ter mais de 500 códigos de Rastreabilidade por item.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );

         --
      end if;
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(est_row_itemnf_rastreab.nro_lote) is null then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Número do Lote do produto de Rastreabilidade, deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_itemnf_rastreab.qtde_lote,0) <= 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'Quantidade de produto no Lote de Rastreabilidade, não pode ser zero ou negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   if est_row_itemnf_rastreab.dt_fabr is null then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Data de fabricação/ Produção de Rastreabilidade, não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   if est_row_itemnf_rastreab.dt_valid is null then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := 'Data de validade de Rastreabilidade, não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   if est_row_itemnf_rastreab.dt_fabr > est_row_itemnf_rastreab.dt_valid
      then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := 'Data de fabricação/ Produção de Rastreabilidade (' || to_char(est_row_itemnf_rastreab.dt_fabr, 'dd/mm/rrrr')
                         || ') não pode ser maior que a Data de validade (' || to_char(est_row_itemnf_rastreab.dt_valid, 'dd/mm/rrrr') || ').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.1;
   --
   est_row_itemnf_rastreab.nro_lote := trim(est_row_itemnf_rastreab.nro_lote);
   est_row_itemnf_rastreab.cod_agreg := trim(est_row_itemnf_rastreab.cod_agreg);
   --
   if nvl(est_row_itemnf_rastreab.itemnf_id,0) > 0
      and est_row_itemnf_rastreab.nro_lote is not null
      and nvl(est_row_itemnf_rastreab.qtde_lote,0) >= 0.001
      and est_row_itemnf_rastreab.dt_fabr is not null
      and est_row_itemnf_rastreab.dt_valid is not null
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         select itemnfrastreab_seq.nextval
           into est_row_itemnf_rastreab.id
           from dual;
         --
         vn_fase := 99.2;
         --
         insert into itemnf_rastreab ( id
                                     , itemnf_id
                                     , nro_lote
                                     , qtde_lote
                                     , dt_fabr
                                     , dt_valid
                                     , cod_agreg
                                     )
                              values ( est_row_itemnf_rastreab.id
                                     , est_row_itemnf_rastreab.itemnf_id
                                     , est_row_itemnf_rastreab.nro_lote
                                     , est_row_itemnf_rastreab.qtde_lote
                                     , est_row_itemnf_rastreab.dt_fabr
                                     , est_row_itemnf_rastreab.dt_valid
                                     , est_row_itemnf_rastreab.cod_agreg
                                     );
         --
      else
         --
         vn_fase := 99.3;
         --
         update itemnf_rastreab set nro_lote   = est_row_itemnf_rastreab.nro_lote
                                  , qtde_lote  = est_row_itemnf_rastreab.qtde_lote
                                  , dt_fabr    = est_row_itemnf_rastreab.dt_fabr
                                  , dt_valid   = est_row_itemnf_rastreab.dt_valid
                                  , cod_agreg  = est_row_itemnf_rastreab.cod_agreg
          where id = est_row_itemnf_rastreab.id;
         --
      end if;
      --
   end if;   
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_itemnf_rastreab fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END pkb_integr_itemnf_rastreab;

--------------------------------------------------------
-- Integra as informações do detalhamento do NCM: NVE --
--------------------------------------------------------

PROCEDURE pkb_integr_itemnf_nve ( est_log_generico_nf   in out nocopy dbms_sql.number_table
                                , est_row_itemnf_nve in out        itemnf_nve%rowtype
                                , en_notafiscal_id   in            nota_fiscal.id%type
                                ) 
IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde_nve       number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_itemnf_nve.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o ITEM da Nota Fiscal para registro da Informação do NVE.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if nvl(est_row_itemnf_nve.itemnf_id,0) > 0 then
      --
      vn_fase := 2.1;
      --
      begin
         --
         select count(*)
           into vn_qtde_nve
           from itemnf_nve
          where itemnf_id = est_row_itemnf_nve.itemnf_id;
         --
      exception
         when others then
         vn_qtde_nve := 0;
      end;
      --
      if (nvl(vn_qtde_nve,0) = 8 
         and nvl(gn_tipo_integr,0) = 1) 
         or (nvl(vn_qtde_nve,0) > 8)
         and nvl(est_log_generico_nf.count,0) = 0 then
         --
         vn_fase := 2.2;
         --
         gv_mensagem_log := 'Não é possível ter mais de 8 códigos de NVE por item.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );

         --
      end if;
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(est_row_itemnf_nve.nve) is null then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'O código do NVE é obrigatório, deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   est_row_itemnf_nve.nve := trim(est_row_itemnf_nve.nve);
   --
   vn_fase := 4;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_itemnf_nve.itemnf_id,0) > 0
      and est_row_itemnf_nve.nve is not null
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         select itemnfnve_seq.nextval
           into est_row_itemnf_nve.id
           from dual;
         --
         vn_fase := 5.1;
         --
         insert into itemnf_nve ( id
                                , itemnf_id
                                , nve
                                )
                         values ( est_row_itemnf_nve.id
                                , est_row_itemnf_nve.itemnf_id
                                , est_row_itemnf_nve.nve
                                );
         --
      else
         --
         vn_fase := 5.2;
         --
         update itemnf_nve set nve = est_row_itemnf_nve.nve
          where id = est_row_itemnf_nve.id;
         --
      end if;
      --
   end if;   
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_itemnf_nve fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END pkb_integr_itemnf_nve;

-----------------------------------------------------------------------------------------------------
-- Procedimento de validação referente ao complemento da informação de exportação do item da NFe
procedure pkb_integr_info_export_compl ( est_log_generico_nf         in out nocopy dbms_sql.number_table
                                       , est_row_itemnf_export_compl in out itemnf_export_compl%rowtype
                                       ) is
   --
     vn_fase                  number := 0;
      vc_chv_nfe_export       varchar2(44);
      vn_qtde_export          number(15,4);
      vn_num_reg_export       number(12);
   vn_loggenericonf_id log_generico_nf.id%type;
   --
   vn_existe number;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(est_row_itemnf_export_compl.itemnfexport_id, 0) = 0 then
      --
      gv_mensagem_log := 'Campo informado não pode ser nulo. Valor informado: '||est_row_itemnf_export_compl.itemnfexport_id||'.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia
                          );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if est_row_itemnf_export_compl.dm_ind_doc is null then
      --
      gv_mensagem_log := 'Tipo de documento informado não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia
                          );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
   else
      --
      if est_row_itemnf_export_compl.dm_ind_doc not in(0,1,2) then
         --
         gv_mensagem_log := 'Tipo de documento ('|| est_row_itemnf_export_compl.dm_ind_doc|| '), '||
                            'inválido. Valores válidos: '||
                            '0-Declaração de Exportação, '||
                            '1-Declaração Simplificada de Exportação ou '||
                            '2-Declaração Unica de exportação.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_cabec_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia
                             );
         --
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 3;
   --
   if est_row_itemnf_export_compl.nro_de is null then
       --
      gv_mensagem_log := 'Número da declaração do documento não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia
                          );
       --
       -- Armazena o "loggenerico_id" na memória
       pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
       --
   end if;
   --
   vn_fase := 4;
   --
   if est_row_itemnf_export_compl.dt_de is null then
      --
      gv_mensagem_log := 'Data da declaração pode ser nula.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia
                          );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   if est_row_itemnf_export_compl.dm_nat_exp is null then
      --
      gv_mensagem_log := 'Tipo de natureza de expotação não pode ser nulo.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia
                          );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      if est_row_itemnf_export_compl.dm_nat_exp not in(0,1) then
         --
         gv_mensagem_log := 'Tipo de natureza de expotação( '||est_row_itemnf_export_compl.dm_nat_exp||'), inválido. Valores válidos: 0-Exportação Direta ou 1-Exportação Indireta.';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_cabec_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia
                             );
         --
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 6;
   --
   if est_row_itemnf_export_compl.dt_avb is null then
      --
      gv_mensagem_log := 'Data da averbação da declaração de exportação não pode ser nula.';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia
                          );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   if est_row_itemnf_export_compl.dm_tp_chc is null then
      --
      gv_mensagem_log := 'Informação do tipo de conhecimento de embarque não pode ser nulo. Valor informado: '||est_row_itemnf_export_compl.dm_tp_chc;
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia
                          );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      if est_row_itemnf_export_compl.dm_tp_chc not in ('01', '02', '03', '04', '06', '07', '08', '09', '10',
                                                       '11', '12', '13', '14', '16', '15', '18', '19', '20',
                                                       '91', '92', '93', '99') then
         --
         gv_mensagem_log := 'Valor do campo não atende aos códigos cadastrados. Valores válidos: ';
         gv_mensagem_log := gv_mensagem_log || '01, 02, 03, 04, 06, 07, 08, 09, 10, 11, 12, 13, 14, 16, 15, 18, 19, 20, 91, 92, 93, 99.';
         gv_mensagem_log := gv_mensagem_log || ' Valor informado: '||est_row_itemnf_export_compl.dm_tp_chc;
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_cabec_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia
                             );
         --
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 6.1;
   --
   if est_row_itemnf_export_compl.itemnfexport_id is not null
    and est_row_itemnf_export_compl.dm_ind_doc    in(0,1,2)
    and est_row_itemnf_export_compl.nro_de        is not null
    and est_row_itemnf_export_compl.dt_de         is not null
    and est_row_itemnf_export_compl.dt_avb        is not null
    and est_row_itemnf_export_compl.dm_tp_chc     in ('01', '02', '03', '04', '06', '07', '08', '09', '10',
                                                       '11', '12', '13', '14', '16', '15', '18', '19', '20',
                                                       '91', '92', '93', '99')
    then
      --
      vn_fase := 7;
      --
      begin
         --
         select 1 into vn_existe
           from itemnf_export_compl
          where id = est_row_itemnf_export_compl.id;
         --
      exception
         when others then
            --
            vn_existe := 0;
            --
      end;
      --
      vn_fase := 8;
      --
      if vn_existe = 0 then -- não existe, insere o novo regitro.
         --
         select itemnfexportcompl_seq.nextval
           into est_row_itemnf_export_compl.id
           from dual;
         --           
         vn_fase := 9;
         --
         insert into itemnf_export_compl ( id
                                         , itemnfexport_id
                                         , dm_ind_doc
                                         , nro_de
                                         , dt_de
                                         , dm_nat_exp
                                         , nro_re
                                         , dt_re
                                         , chc_emb
                                         , dt_chc
                                         , dt_avb
                                         , dm_tp_chc
                                         , nr_memo
                                         )
                                  values ( est_row_itemnf_export_compl.id
                                         , est_row_itemnf_export_compl.itemnfexport_id
                                         , est_row_itemnf_export_compl.dm_ind_doc
                                         , est_row_itemnf_export_compl.nro_de
                                         , est_row_itemnf_export_compl.dt_de
                                         , est_row_itemnf_export_compl.dm_nat_exp
                                         , est_row_itemnf_export_compl.nro_re
                                         , est_row_itemnf_export_compl.dt_re
                                         , est_row_itemnf_export_compl.chc_emb
                                         , est_row_itemnf_export_compl.dt_chc
                                         , est_row_itemnf_export_compl.dt_avb
                                         , est_row_itemnf_export_compl.dm_tp_chc
                                         , est_row_itemnf_export_compl.nr_memo
                                         );
         --
      else -- existe o registro, atualiza o mesmo.
         --
         vn_fase := 10;
         --
         update itemnf_export_compl
            set itemnfexport_id = est_row_itemnf_export_compl.itemnfexport_id
              , dm_ind_doc      = est_row_itemnf_export_compl.dm_ind_doc
              , nro_de          = est_row_itemnf_export_compl.nro_de
              , dt_de           = est_row_itemnf_export_compl.dt_de
              , dm_nat_exp      = est_row_itemnf_export_compl.dm_nat_exp
              , nro_re          = est_row_itemnf_export_compl.nro_re
              , dt_re           = est_row_itemnf_export_compl.dt_re
              , chc_emb         = est_row_itemnf_export_compl.chc_emb
              , dt_chc          = est_row_itemnf_export_compl.dt_chc
              , dt_avb          = est_row_itemnf_export_compl.dt_avb
              , dm_tp_chc       = est_row_itemnf_export_compl.dm_tp_chc
              , nr_memo         = est_row_itemnf_export_compl.nr_memo
          where id = est_row_itemnf_export_compl.id;
         --
      end if;
      --
       vn_fase := 11;
      --
              if est_row_itemnf_export_compl.dm_ind_doc IN (1,2) then
                update itemnf_export 
                     set  num_reg_export = 0
                   where id = est_row_itemnf_export_compl.itemnfexport_id
                   and num_reg_export is null;
              end if;         
         -- 
 
       --
       vn_fase := 12;
      --  
begin
     SELECT chv_nfe_export, qtde_export, num_reg_export
       into vc_chv_nfe_export, vn_qtde_export , vn_num_reg_export
       FROM ITEMNF_EXPORT
      WHERE 1 = 1
        and id = est_row_itemnf_export_compl.itemnfexport_id;                  
   exception
     when no_data_found then
       null;
   end;

      --
       vn_fase := 13;
      --

   if est_row_itemnf_export_compl.dm_ind_doc is null then
      est_row_itemnf_export_compl.dm_ind_doc :=3;
      end IF;
      --
 if  ( est_row_itemnf_export_compl.dm_ind_doc <> 3 and (( vc_chv_nfe_export is null and nvl(vn_qtde_export,0) = 0) or
        (vc_chv_nfe_export is not null and nvl(vn_qtde_export,0) = 0)))
        then
         --
          gv_mensagem_log := 'No caso de um campo de exportação indireta ser informado, todos os outros também deverão ser informados. '
                          || 'Campos que fazem parte do grupo de exportação indireta: "Número do Registro de Exportação", '
                          || '"Chave de Acesso da NF-e recebida para exportação" e '
                          || '"Quantidade do item efetivamente exportado"';

          --
          vn_loggenericonf_id := null;
          
          --
          pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                              , ev_mensagem         => gv_cabec_log
                              , ev_resumo           => gv_mensagem_log
                              , en_tipo_log         => erro_de_validacao
                              , en_referencia_id    => gn_referencia_id
                              , ev_obj_referencia   => gv_obj_referencia );
          -- Armazena o "loggenerico_id" na memória
          pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                 , est_log_generico_nf => est_log_generico_nf );
   end if;
   --

      vn_fase := 14;
  --
       IF est_row_itemnf_export_compl.dm_ind_doc = 0 AND NVL(vn_num_reg_export,0) = 0 THEN
          gv_mensagem_log := 'Erro, indicador de origem do documento igual a zero e não existe o número de registro de exportação';
            --
            declare
               vn_loggenericonf_id  log_generico_nf.id%type;
            begin
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                  , est_log_generico_nf => est_log_generico_nf );
             exception
             when others then
                  null;
             end;

       END IF;      
      
      
      --
   end if;
  --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_info_export_compl fase(' || vn_fase || '). '|| sqlerrm;
      --
      declare
         vn_loggenericonf_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
 /**/




end pkb_integr_info_export_compl;

---------------------------------------------------------------
-- Integra as informações do Controle de Exportação por Item --
---------------------------------------------------------------

PROCEDURE pkb_integr_itemnf_export ( est_log_generico_nf   in out nocopy dbms_sql.number_table
                                    , est_row_itemnf_export in out        itemnf_export%rowtype
                                    , en_notafiscal_id   in            nota_fiscal.id%type
                                    )
IS
   --
   vn_fase           number := 0;
   vn_dm_ind_doc_ic  number;
   vn_loggenerico_id log_generico_nf.id%type;
   ev_nro_chave_nfe est_row_itemnf_export.chv_nfe_export%type;
   vn_dig_verif_chave nota_fiscal.dig_verif_chave%type;
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_itemnf_export.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o ITEM da Nota Fiscal para Controle de Exportação por Item.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   ev_nro_chave_nfe := est_row_itemnf_export.chv_nfe_export;
   --
   if trim(ev_nro_chave_nfe) is not null then
      --
      -- Valida tamanho da Chave de Acesso
      vn_fase := 2.1;
      --
      if length(trim(ev_nro_chave_nfe)) <> 44 then
         --
         vn_fase := 2.2;
         --
         gv_mensagem_log := 'Chave de acesso para exportação informada está inválida ('||ev_nro_chave_nfe||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 2.3;
      --
      vn_dig_verif_chave := pk_csf.fkg_mod_11 ( ev_codigo => substr(trim(ev_nro_chave_nfe), 1,43) );
      --
      vn_fase := 2.4;
      --
      if nvl(vn_dig_verif_chave,0) <> to_number( substr(trim(ev_nro_chave_nfe), 44,1) ) then
         --
         vn_fase := 2.5;
         --
         gv_mensagem_log := 'Chave de acesso para exportação informada está inválida ('||ev_nro_chave_nfe|| '), pois o dígito verificador ('||
                            substr(trim(ev_nro_chave_nfe), 44,1)||') está diferente do "dígito verificador calculado" ('||vn_dig_verif_chave||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
   --
   end if;
   --
   est_row_itemnf_export.chv_nfe_export := trim(est_row_itemnf_export.chv_nfe_export);
   --
   vn_fase := 3;
   --
   vn_fase := 4;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_itemnf_export.itemnf_id,0) > 0
      and nvl(est_row_itemnf_export.num_acdraw,0) >= 0
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 6;
         --
         select itemnfexport_seq.nextval
           into est_row_itemnf_export.id
           from dual;
         --
         vn_fase := 7;
         --
         insert into itemnf_export ( id
                                , itemnf_id
                                , num_acdraw
                                , num_reg_export
                                , chv_nfe_export
                                , qtde_export
                                )
                         values ( est_row_itemnf_export.id
                                , est_row_itemnf_export.itemnf_id
                                , est_row_itemnf_export.num_acdraw
                                , est_row_itemnf_export.num_reg_export
                                , est_row_itemnf_export.chv_nfe_export
                                , est_row_itemnf_export.qtde_export
                                );

        else
         --
             vn_fase := 8;
             --

                     update itemnf_export set NUM_ACDRAW = est_row_itemnf_export.num_acdraw
                    , num_reg_export = est_row_itemnf_export.num_reg_export
                    , chv_nfe_export = est_row_itemnf_export.chv_nfe_export
                    , qtde_export = est_row_itemnf_export.qtde_export
                    where id = est_row_itemnf_export.id;

             end if;
         --
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_itemnf_export fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END pkb_integr_itemnf_export;

/*
PROCEDURE pkb_integr_itemnf_export ( est_log_generico_nf   in out nocopy dbms_sql.number_table
                                    , est_row_itemnf_export in out        itemnf_export%rowtype
                                    , en_notafiscal_id   in            nota_fiscal.id%type
                                    )
IS
   --
   vn_fase           number := 0;
   vn_dm_ind_doc_ic  number;
   vn_loggenerico_id log_generico_nf.id%type;
   ev_nro_chave_nfe est_row_itemnf_export.chv_nfe_export%type;
   vn_dig_verif_chave nota_fiscal.dig_verif_chave%type;
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_itemnf_export.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o ITEM da Nota Fiscal para Controle de Exportação por Item.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   ev_nro_chave_nfe := est_row_itemnf_export.chv_nfe_export;
   --
   -- Procedimento para Validar ou Validar e Criar NRO_CHAVE_NFE da Nota Fiscal
   if trim(ev_nro_chave_nfe) is not null then
      --
      pkb_valida_cria_nro_chave_nfe ( est_log_generico_nf  => est_log_generico_nf
                                    , en_notafiscal_id     => en_notafiscal_id
                                    , ev_nro_chave_nfe_new => trim(ev_nro_chave_nfe)
                                    --, en_cria_chave        => 0 -- 0 - Não / 1- Sim
                                    , ev_rotina_orig       => 'pk_csf_api.pkb_integr_itemnf_export'
                                    );
      --
      end if;
      --
   est_row_itemnf_export.chv_nfe_export := trim(est_row_itemnf_export.chv_nfe_export);
   --
   vn_fase := 3;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_itemnf_export.itemnf_id,0) > 0
      and nvl(est_row_itemnf_export.num_acdraw,0) >= 0
      then
      --    
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 5;
         --
         select itemnfexport_seq.nextval
           into est_row_itemnf_export.id
           from dual;
         --
         vn_fase := 6;
         --          
         insert into itemnf_export ( id
                                , itemnf_id
                                , num_acdraw
                                , num_reg_export
                                , chv_nfe_export
                                , qtde_export
                                )
                         values ( est_row_itemnf_export.id
                                , est_row_itemnf_export.itemnf_id
                                , est_row_itemnf_export.num_acdraw
                                , est_row_itemnf_export.num_reg_export
                                , est_row_itemnf_export.chv_nfe_export
                                , est_row_itemnf_export.qtde_export
                                );

        else
         --
             vn_fase := 7;
             --
           
                     update itemnf_export set NUM_ACDRAW = est_row_itemnf_export.num_acdraw
                    , num_reg_export = est_row_itemnf_export.num_reg_export
                    , chv_nfe_export = est_row_itemnf_export.chv_nfe_export
                    , qtde_export = est_row_itemnf_export.qtde_export
                    where id = est_row_itemnf_export.id;
                
             end if;
         --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_itemnf_export fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END pkb_integr_itemnf_export;
*/
--------------------------------------------------------------------------------
-- Integra as informações de combustíveis ( Análisar com o Chico NFE X SPED ) --
--------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_ITEMNF_COMB ( EST_LOG_GENERICO_NF      IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                 , EST_ROW_ITEMNF_COMB   IN OUT NOCOPY  ITEMNF_COMB%ROWTYPE
                                 , EV_UF_EMIT            IN             ESTADO.SIGLA_ESTADO%TYPE
                                 , EN_NOTAFISCAL_ID      IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_dm_obrig_codif Estado.dm_obrig_codif%TYPE;
   vv_cod_st         Cod_ST.cod_st%TYPE := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_ItemNF_Comb.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o ITEM da Nota Fiscal para registro da Informação do Combustível.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   -- Valida a informação da BC da CIDE em quantidade
   if nvl(est_row_ItemNF_Comb.qtde_BC_Cide,0) < 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Base de Cálculo da CIDE em quantidade" ('||est_row_ItemNF_Comb.vl_aliq_Prod_Cide||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   -- Valida a informação da Valor da alíquota da CIDE em reais
   if nvl(est_row_ItemNF_Comb.vl_aliq_Prod_Cide,0) < 0 then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Valor da alíquota da CIDE em reais" ('||est_row_ItemNF_Comb.vl_aliq_Prod_Cide||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   -- Valida a informação do Valor da CIDE
   if nvl(est_row_ItemNF_Comb.vl_CIDE,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Valor da CIDE" ('||est_row_ItemNF_Comb.vl_CIDE||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   -- Valida informação do CIDE
   -- Se tem CIDE, deve ter os campos qBCprod, vAliqProd e vCIDE informados
   --
   vn_fase := 5;
   -- Valida a informação da BC do ICMS da operação própria
   if nvl(est_row_ItemNF_Comb.vl_base_Calc_ICMS,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Base de Cálculo do ICMS nas operação de Combustíveis" ('||est_row_ItemNF_Comb.vl_base_Calc_ICMS||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   -- Valida a informação da Valor do ICMS
   if nvl(est_row_ItemNF_Comb.vl_icms,0) < 0 then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Valor do ICMS nas operação de Combustíveis" ('||est_row_ItemNF_Comb.vl_icms||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   -- Valida a informação da BC do ICMS ST retido
   if nvl(est_row_ItemNF_Comb.vl_base_Calc_Icms_st,0) < 0 then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Base de Cálculo do ICMS ST retido de Combustíveis" ('||est_row_ItemNF_Comb.vl_base_Calc_Icms_st||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   -- Valida a informação da Valor do ICMS ST retido
   if nvl(est_row_ItemNF_Comb.vl_icms_st,0) < 0 then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Valor do ICMS ST retido de Combustíveis" ('||est_row_ItemNF_Comb.vl_icms_st||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   -- Valida a informação da BC do ICMS ST da UF de destino
   if nvl(est_row_ItemNF_Comb.vl_BC_Icms_St_Dest,0) < 0 then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := '"Base de Cálculo do ICMS ST da UF de destino de Combustíveis" ('||est_row_ItemNF_Comb.vl_BC_Icms_St_Dest||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 10;
   -- Valida a informação da Valor do ICMS ST da UF de destino
   if nvl(est_row_ItemNF_Comb.vl_Icms_St_Dest,0) < 0 then
      --
      vn_fase := 10.1;
      --
      gv_mensagem_log := '"Valor do ICMS ST da UF de destino de Combustíveis" ('||est_row_ItemNF_Comb.vl_Icms_St_Dest||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11;
   -- Valida a informação da BC do ICMS ST da UF de consumo
   if nvl(est_row_ItemNF_Comb.vl_BC_Icms_St_cons,0) < 0 then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := '"Base de Cálculo do ICMS ST da UF de consumo de Combustíveis" ('||est_row_ItemNF_Comb.vl_BC_Icms_St_cons||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12;
   -- Valida a informação da Valor do ICMS ST da UF de consumo
   if nvl(est_row_ItemNF_Comb.vl_Icms_St_cons,0) < 0 then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := '"Valor do ICMS ST da UF de consumo de Combustíveis" ('||est_row_ItemNF_Comb.vl_Icms_St_cons||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   -- Valida a informação da Sigla da UF de consumo do combustível
   if est_row_ItemNF_Comb.UF_Cons is not null then
      --
      vn_fase := 13.1;
      --
      if pk_csf.fkg_uf_valida ( ev_sigla_estado => est_row_ItemNF_Comb.UF_Cons ) = false then
         --
         vn_fase := 13.2;
         --
         gv_mensagem_log := '"Sigla da UF de consumo do combustível"('||est_row_ItemNF_Comb.UF_Cons||') está inválida.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 13.3;
      --| Se o CFOP for do grupo 3 ou 7, e UF de consumo diferente de EX
      if substr(pk_csf_api.gt_row_Item_Nota_Fiscal.cfop, 1, 1) in ('3', '7')
         and est_row_ItemNF_Comb.UF_Cons <> 'EX' then
         --
         vn_fase := 13.4;
         --
         gv_mensagem_log := '"Sigla da UF de consumo do combustível"('||est_row_ItemNF_Comb.UF_Cons||') está inválida para CFOP com operação no exterior.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 13.5;
      --
      if substr(pk_csf_api.gt_row_Item_Nota_Fiscal.cfop, 1, 1) in ('1', '5')
         and est_row_ItemNF_Comb.UF_Cons <> pk_csf_api.gt_row_Nota_Fiscal_Emit.uf
         then
         --
         vn_fase := 13.6;
         --
         gv_mensagem_log := '"Sigla da UF de consumo do combustível"('||est_row_ItemNF_Comb.UF_Cons||') diferente da "Sigla do UF do emitente" ('||
                            pk_csf_api.gt_row_Nota_Fiscal_Emit.uf||') para operações com CFOP do grupo '||substr(pk_csf_api.gt_row_Item_Nota_Fiscal.cfop,1,1);
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   -- Valida informação do Código de produto da ANP
   if nvl(est_row_ItemNF_Comb.codProdAnp,0) <= 0 then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := '"Código de produto da ANP" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 15;
   -- Se a BC do ICMS ST da UF de consumo for maior que zero,
   -- verificar se foi informado a "Sigla da UF de consumo"
   if nvl(est_row_ItemNF_Comb.vl_BC_Icms_St_cons,0) > 0 then
      --
      vn_fase := 15.1;
      --
      if est_row_ItemNF_Comb.UF_Cons is null then
         --
         vn_fase := 15.2;
         --
         gv_mensagem_log := '"Sigla da UF de consumo do combustível" não foi informada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 16;
   -- Verifica se o CODIF é Obrigatório no Estado do Emitente, e não foi informado
   vn_dm_obrig_codif := pk_csf.fkg_Estado_Obrig_Codif ( ev_sigla_estado => ev_uf_emit );
   --
   if vn_dm_obrig_codif = 1 and nvl(est_row_ItemNF_Comb.codif,0) <= 0 then
      --
      vn_fase := 16.1;
      --
      gv_mensagem_log := 'Estado do emitente da Nota Fiscal ('||ev_uf_emit||') obriga o CODIF e o mesmo não foi informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 17;
   -- Valida informações da CIDE
   if nvl(est_row_ItemNF_Comb.qtde_BC_Cide,0) > 0
      or nvl(est_row_ItemNF_Comb.vl_aliq_Prod_Cide,0) > 0
      or nvl(est_row_ItemNF_Comb.vl_CIDE,0) > 0 then
      --
      vn_fase := 17.1;
      --
      if nvl(est_row_ItemNF_Comb.qtde_BC_Cide,0) <= 0 then
         --
         vn_fase := 17.2;
         --
         gv_mensagem_log := '"Base de Cálculo da CIDE em quantidade" deve ser informada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 17.3;
      -- Valida a informação da Valor da alíquota da CIDE em reais
      if nvl(est_row_ItemNF_Comb.vl_aliq_Prod_Cide,0) <= 0 then
         --
         vn_fase := 17.4;
         --
         gv_mensagem_log := '"Valor da alíquota da CIDE em reais" deve ser informada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 17.5;
      -- Valida a informação do Valor da CIDE
      if nvl(est_row_ItemNF_Comb.vl_CIDE,0) <= 0 then
         --
         vn_fase := 17.6;
         --
         gv_mensagem_log := '"Valor da CIDE" deve ser informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 18;
   -- TAG de grupo do ICMSST de operação interestadual
   --
   if nvl(est_row_ItemNF_Comb.vl_BC_Icms_St_Dest,0) > 0
      or nvl(est_row_ItemNF_Comb.vl_Icms_St_Dest,0) > 0 then
      --
      vn_fase := 18.1;
      -- Valida a informação da BC do ICMS ST da UF de destino
      if nvl(est_row_ItemNF_Comb.vl_BC_Icms_St_Dest,0) <= 0 then
         --
         vn_fase := 18.2;
         --
         gv_mensagem_log := '"Base de Cálculo do ICMS ST da UF de destino de Combustíveis" deve ser informada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 18.3;
      -- Valida a informação da Valor do ICMS ST da UF de destino
      if nvl(est_row_ItemNF_Comb.vl_Icms_St_Dest,0) <= 0 then
         --
         vn_fase := 18.4;
         --
         gv_mensagem_log := '"Valor do ICMS ST da UF de destino de Combustíveis" deve ser informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 19;
   --  TAG de ICMS para consumo em UF diversa da UF de localização do destinatário do produto
   if nvl(est_row_ItemNF_Comb.vl_BC_Icms_St_cons,0) > 0
      or nvl(est_row_ItemNF_Comb.vl_Icms_St_cons,0) > 0
      or trim( est_row_ItemNF_Comb.UF_Cons ) is not null
      then
      --
      vn_fase := 19.1;
      -- se o imposto ICMS for CST = 30 ou 70 é obrigatório ter valor
      begin
         --
         select cst.cod_st
           into vv_cod_st
           from imp_itemnf    imp
              , tipo_imposto  ti
              , cod_st        cst
          where imp.itemnf_id  = est_row_ItemNF_Comb.itemnf_id
            and imp.dm_tipo    = 0  -- Imposto
            and ti.id          = imp.tipoimp_id
            and ti.cd          = 1  -- ICMS
            and cst.id         = imp.codst_id;
         --
      exception
         when no_data_found then
            vv_cod_st := null;
      end;
      --
      vn_fase := 19.2;
      --
      if vv_cod_st in ('30', '70') then
         --
         vn_fase := 19.3;
         -- Valida a informação da BC do ICMS ST da UF de consumo
         if nvl(est_row_ItemNF_Comb.vl_BC_Icms_St_cons,0) <= 0 then
            --
            vn_fase := 19.4;
            --
            gv_mensagem_log := '"Base de Cálculo do ICMS ST da UF de consumo de Combustíveis" deve ser informada.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 19.5;
         -- Valida a informação da Valor do ICMS ST da UF de consumo
         if nvl(est_row_ItemNF_Comb.vl_Icms_St_cons,0) <= 0 then
            --
            vn_fase := 19.6;
            --
            gv_mensagem_log := '"Valor do ICMS ST da UF de consumo de Combustíveis" ('||est_row_ItemNF_Comb.vl_Icms_St_cons||') não pode ser negativo.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 19.7;
         -- Valida a informação da Sigla da UF de consumo do combustível
         if est_row_ItemNF_Comb.UF_Cons is null then
            --
            vn_fase := 19.8;
            --
            gv_mensagem_log := '"Sigla da UF de consumo do combustível" deve ser informada.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 20;
   --
   if nvl(est_row_ItemNF_Comb.vl_base_Calc_ICMS,0) > 0
      or nvl(est_row_ItemNF_Comb.vl_icms,0) > 0 then
      --
      vn_fase := 21;
      -- Valida a informação da BC do ICMS da operação própria
      if nvl(est_row_ItemNF_Comb.vl_base_Calc_ICMS,0) <= 0 then
         --
         vn_fase := 21.1;
         --
         gv_mensagem_log := '"Base de Cálculo do ICMS da operação própria de Combustíveis" deve ser informada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 21.2;
      -- Valida a informação da Valor do ICMS
      if nvl(est_row_ItemNF_Comb.vl_icms,0) <= 0 then
         --
         vn_fase := 21.3;
         --
         gv_mensagem_log := '"Valor do ICMS da operação própria de Combustíveis" deve ser informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 22;
   --
   if nvl(est_row_ItemNF_Comb.vl_base_Calc_Icms_st,0) > 0
      or nvl(est_row_ItemNF_Comb.vl_icms_st,0) > 0 then
      --
      vn_fase := 22.1;
      -- Valida a informação da BC do ICMS ST retido
      if nvl(est_row_ItemNF_Comb.vl_base_Calc_Icms_st,0) <= 0 then
         --
         vn_fase := 22.2;
         --
         gv_mensagem_log := '"Base de Cálculo do ICMS ST retido de Combustíveis" deve ser informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 22.3;
      -- Valida a informação da Valor do ICMS ST retido
      if nvl(est_row_ItemNF_Comb.vl_icms_st,0) <= 0 then
         --
         vn_fase := 22.4;
         --
         gv_mensagem_log := '"Valor do ICMS ST retido de Combustíveis" deve ser informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 23;
   -- Se for "zero", atribui nulo, assim evita erro de XML
   if est_row_ItemNF_Comb.qtde_Temp = 0 then
      est_row_ItemNF_Comb.qtde_Temp := null;
   end if;
   --
   vn_fase := 24;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   -- então insere a informação de combustível
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = ( select it.notafiscal_id from item_nota_fiscal it
                     where it.id = est_row_ItemNf_Comb.itemnf_id );
      --
   end if;
   --
   vn_fase := 25;
   --
   est_row_ItemNF_Comb.vl_base_Calc_ICMS    := nvl(est_row_ItemNF_Comb.vl_base_Calc_ICMS,0);
   est_row_ItemNF_Comb.vl_icms              := nvl(est_row_ItemNF_Comb.vl_icms,0);
   est_row_ItemNF_Comb.vl_base_Calc_Icms_st := nvl(est_row_ItemNF_Comb.vl_base_Calc_Icms_st,0);
   est_row_ItemNF_Comb.vl_icms_st           := nvl(est_row_ItemNF_Comb.vl_icms_st,0);
   --
   vn_fase := 26;
   --
   if nvl(est_row_ItemNF_Comb.itemnf_id,0) > 0 then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 27;
         --
         select itnfcomb_seq.nextval
           into est_row_ItemNF_Comb.id
           from dual;
         --
         vn_fase := 28;
         --
         insert into ItemNF_Comb ( id
                                 , itemnf_id
                                 , codProdAnp
                                 , codif
                                 , qtde_Temp
                                 , qtde_BC_Cide
                                 , vl_aliq_Prod_Cide
                                 , vl_CIDE
                                 , vl_base_Calc_ICMS
                                 , vl_icms
                                 , vl_base_Calc_Icms_st
                                 , vl_icms_st
                                 , vl_BC_Icms_St_Dest
                                 , vl_Icms_St_Dest
                                 , vl_BC_Icms_St_cons
                                 , vl_Icms_St_cons
                                 , UF_Cons
                                 , nro_passe )
                          values ( est_row_ItemNF_Comb.id
                                 , est_row_ItemNF_Comb.itemnf_id
                                 , est_row_ItemNF_Comb.codProdAnp
                                 , est_row_ItemNF_Comb.codif
                                 , est_row_ItemNF_Comb.qtde_Temp
                                 , est_row_ItemNF_Comb.qtde_BC_Cide
                                 , est_row_ItemNF_Comb.vl_aliq_Prod_Cide
                                 , est_row_ItemNF_Comb.vl_CIDE
                                 , est_row_ItemNF_Comb.vl_base_Calc_ICMS
                                 , est_row_ItemNF_Comb.vl_icms
                                 , est_row_ItemNF_Comb.vl_base_Calc_Icms_st
                                 , est_row_ItemNF_Comb.vl_icms_st
                                 , est_row_ItemNF_Comb.vl_BC_Icms_St_Dest
                                 , est_row_ItemNF_Comb.vl_Icms_St_Dest
                                 , est_row_ItemNF_Comb.vl_BC_Icms_St_cons
                                 , est_row_ItemNF_Comb.vl_Icms_St_cons
                                 , est_row_ItemNF_Comb.UF_Cons
                                 , est_row_ItemNF_Comb.nro_passe );
         --
      else
         --
         vn_fase := 29;
         --
         update ItemNF_Comb set codProdAnp            = est_row_ItemNF_Comb.codProdAnp
                              , codif                 = est_row_ItemNF_Comb.codif
                              , qtde_Temp             = est_row_ItemNF_Comb.qtde_Temp
                              , qtde_BC_Cide          = est_row_ItemNF_Comb.qtde_BC_Cide
                              , vl_aliq_Prod_Cide     = est_row_ItemNF_Comb.vl_aliq_Prod_Cide
                              , vl_CIDE               = est_row_ItemNF_Comb.vl_CIDE
                              , vl_base_Calc_ICMS     = est_row_ItemNF_Comb.vl_base_Calc_ICMS
                              , vl_icms               = est_row_ItemNF_Comb.vl_icms
                              , vl_base_Calc_Icms_st  = est_row_ItemNF_Comb.vl_base_Calc_Icms_st
                              , vl_icms_st            = est_row_ItemNF_Comb.vl_icms_st
                              , vl_BC_Icms_St_Dest    = est_row_ItemNF_Comb.vl_BC_Icms_St_Dest
                              , vl_Icms_St_Dest       = est_row_ItemNF_Comb.vl_Icms_St_Dest
                              , vl_BC_Icms_St_cons    = est_row_ItemNF_Comb.vl_BC_Icms_St_cons
                              , vl_Icms_St_cons       = est_row_ItemNF_Comb.vl_Icms_St_cons
                              , UF_Cons               = est_row_ItemNF_Comb.UF_Cons
                              , nro_passe             = est_row_ItemNF_Comb.nro_passe
          where id = est_row_ItemNF_Comb.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_ItemNF_Comb fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNF_COMB;

---------------------------------------------------------------------------------------------
-- Integra as informações de combustíveis ( Análisar com o Chico NFE X SPED ) - Flex Field --
---------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_ITEMNF_COMB_FF ( EST_LOG_GENERICO_NF IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                    , EN_NOTAFISCAL_ID    IN             NOTA_FISCAL.ID%TYPE
                                    , EN_ITEMNFCOMB_ID    IN             ITEMNF_COMB.ID%TYPE
                                    , EV_ATRIBUTO         IN             VARCHAR2
                                    , EV_VALOR            IN             VARCHAR2 ) IS
   --
   vn_fase             number := 0;
   vn_loggenerico_id   log_generico_nf.id%type;
   vn_dmtipocampo      ff_obj_util_integr.dm_tipo_campo%type;
   vv_mensagem         varchar2(1000) := null;
   vn_nf_id            nota_fiscal.id%type;
   vn_p_mix_gn         itemnf_comb.p_mix_gn%type;
   vn_nro_bico         itemnf_comb.nro_bico%type;
   vn_nro_bomba        itemnf_comb.nro_bomba%type;
   vn_nro_tanque       itemnf_comb.nro_tanque%type;
   vn_vl_enc_ini       itemnf_comb.vl_enc_ini%type;
   vn_vl_enc_fin       itemnf_comb.vl_enc_fin%type;
   --
   vv_descr_anp        itemnf_comb.descr_anp%type;
   vn_perc_glp         itemnf_comb.perc_glp%type;
   vn_perc_gnn         itemnf_comb.perc_gnn%type;
   vn_perc_gni         itemnf_comb.perc_gni%type;
   vn_vl_part          itemnf_comb.vl_part%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Informações de Combustível da Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Informações de Combustível da Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'P_MIX_GN' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 11;
               --
               vn_p_mix_gn := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                           , ev_atributo => trim(ev_atributo)
                                                           , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 12;
               --
               gv_mensagem_log := 'O valor do campo "Percentual de Gás Natural" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'NRO_BICO' then
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 13;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = numérico
                  --
                  vn_fase := 14;
                  --
                  vn_nro_bico := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                             , ev_atributo => trim(ev_atributo)
                                                             , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 15;
                  --
                  gv_mensagem_log := 'O valor do campo "Número de identificação do bico utilizado no abastecimento" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'NRO_BOMBA' then
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 16;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = numérico
                  --
                  vn_fase := 17;
                  --
                  vn_nro_bomba := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                              , ev_atributo => trim(ev_atributo)
                                                              , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 18;
                  --
                  gv_mensagem_log := 'O valor do campo "Número de identificação da bomba ao qual o bico está interligado" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'NRO_TANQUE' then
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 19;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = numérico
                  --
                  vn_fase := 20;
                  --
                  vn_nro_tanque := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 21;
                  --
                  gv_mensagem_log := 'O valor do campo "Número de identificação do tanque ao qual o bico está interligado" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_ENC_INI' then
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 22;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = numérico
                  --
                  vn_fase := 23;
                  --
                  vn_vl_enc_ini := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 24;
                  --
                  gv_mensagem_log := 'O valor do campo "Valor do Encerrante no início do abastecimento" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_ENC_FIN' then
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 25;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = numérico
                  --
                  vn_fase := 26;
                  --
                  vn_vl_enc_fin := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 27;
                  --
                  gv_mensagem_log := 'O valor do campo "Valor do Encerrante no final do abastecimento" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'DESCR_ANP' then
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 30;
               --
               if vn_dmtipocampo = 2 then -- tipo de campo = caractere
                  --
                  vn_fase := 30.1;
                  --
                  vv_descr_anp := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                                      , ev_atributo => trim(ev_atributo)
                                                                      , ev_valor    => trim(ev_valor) ) );
                  --
               else
                  --
                  vn_fase := 30.2;
                  --
                  gv_mensagem_log := 'O valor do campo "Descrição do produto conforme ANP" informado não confere com o tipo de campo, deveria ser CARACTERE.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'PERC_GLP' then
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 31.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = numérico
                  --
                  vn_fase := 31.2;
                  --
                  vn_perc_glp := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 31.3;
                  --
                  gv_mensagem_log := 'O valor do campo "Percentual do GLP derivado do petróleo no produto GLP (cProdANP=210203001)" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'PERC_GNN' then
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 31.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = numérico
                  --
                  vn_fase := 31.2;
                  --
                  vn_perc_gnn := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 31.3;
                  --
                  gv_mensagem_log := 'O valor do campo "Percentual de Gás Natural Nacional - GLGNn para o produto GLP (cProdANP=210203001)" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'PERC_GNI' then
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 31.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = numérico
                  --
                  vn_fase := 31.2;
                  --
                  vn_perc_gni := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 31.3;
                  --
                  gv_mensagem_log := 'O valor do campo "Percentual de Gás Natural Importado - GLGNi para o produto GLP (cProdANP=210203001)" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_PART' then
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 31.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = numérico
                  --
                  vn_fase := 31.2;
                  --
                  vn_vl_part := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_COMB_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 31.3;
                  --
                  gv_mensagem_log := 'O valor do campo "Valor de partida (cProdANP=210203001)" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      else
         vn_fase := 28;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 29;
   --
   if nvl(en_notafiscal_id, 0) = 0 then
      --
      vn_fase := 30;
      --
      gv_mensagem_log := 'Identificador da nota fiscal não informado - Integra as informações de combustíveis - Campos Flex-Field.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (valida e insere)
   -- então realiza a condição de inserir o imposto
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_itemnfcomb_id, 0) > 0 and
      ev_atributo = 'P_MIX_GN' and
      nvl(vn_p_mix_gn,-1) >= 0 and
      vv_mensagem is null then
      --
      vn_fase := 99.21;
      --
      update itemnf_comb ic
         set ic.p_mix_gn = vn_p_mix_gn
       where ic.id = en_itemnfcomb_id;
      --

   elsif nvl(en_itemnfcomb_id, 0) > 0 and
         ev_atributo = 'NRO_BICO' and
         nvl(vn_nro_bico,-1) >= 0 and
         vv_mensagem is null then
         --
         vn_fase := 99.22;
         --
         update itemnf_comb ic
            set ic.nro_bico = vn_nro_bico
          where ic.id = en_itemnfcomb_id;
         --
   elsif nvl(en_itemnfcomb_id, 0) > 0 and
         ev_atributo = 'NRO_BOMBA' and
         nvl(vn_nro_bomba,-1) >= 0 and
         vv_mensagem is null then
         --
         vn_fase := 99.23;
         --
         update itemnf_comb ic
            set ic.nro_bomba = vn_nro_bomba
          where ic.id = en_itemnfcomb_id;
         --
   elsif nvl(en_itemnfcomb_id, 0) > 0 and
         ev_atributo = 'NRO_TANQUE' and
         nvl(vn_nro_tanque,-1) >= 0 and
         vv_mensagem is null then
         --
         vn_fase := 99.24;
         --
         update itemnf_comb ic
            set ic.nro_tanque = vn_nro_tanque
          where ic.id = en_itemnfcomb_id;
         --
   elsif nvl(en_itemnfcomb_id, 0) > 0 and
         ev_atributo = 'VL_ENC_INI' and
         nvl(vn_vl_enc_ini,-1) >= 0 and
         vv_mensagem is null then
         --
         vn_fase := 99.25;
         --
         update itemnf_comb ic
            set ic.vl_enc_ini = vn_vl_enc_ini
          where ic.id = en_itemnfcomb_id;
         --
   elsif nvl(en_itemnfcomb_id, 0) > 0 and
         ev_atributo = 'VL_ENC_FIN' and
         nvl(vn_vl_enc_fin,-1) >= 0 and
         vv_mensagem is null then
         --
         vn_fase := 99.26;
         --
         update itemnf_comb ic
            set ic.vl_enc_fin = vn_vl_enc_fin
          where ic.id = en_itemnfcomb_id;
         --
   elsif nvl(en_itemnfcomb_id, 0) > 0 and
         ev_atributo = 'DESCR_ANP' and
         trim(vv_descr_anp) is not null and
         vv_mensagem is null then
         --
         vn_fase := 99.27;
         --
         update itemnf_comb ic
            set ic.descr_anp = vv_descr_anp
          where ic.id = en_itemnfcomb_id;
         --
   elsif nvl(en_itemnfcomb_id, 0) > 0 and
         ev_atributo = 'PERC_GLP' and
         nvl(vn_perc_glp,-1) >= 0 and
         vv_mensagem is null then
         --
         vn_fase := 99.28;
         --
         update itemnf_comb ic
            set ic.perc_glp = vn_perc_glp
          where ic.id = en_itemnfcomb_id;
         --
   elsif nvl(en_itemnfcomb_id, 0) > 0 and
         ev_atributo = 'PERC_GNN' and
         nvl(vn_perc_gnn,-1) >= 0 and
         vv_mensagem is null then
         --
         vn_fase := 99.29;
         --
         update itemnf_comb ic
            set ic.perc_gnn = vn_perc_gnn
          where ic.id = en_itemnfcomb_id;
         --
   elsif nvl(en_itemnfcomb_id, 0) > 0 and
         ev_atributo = 'PERC_GNI' and
         nvl(vn_perc_gni,-1) >= 0 and
         vv_mensagem is null then
         --
         vn_fase := 99.30;
         --
         update itemnf_comb ic
            set ic.perc_gni = vn_perc_gni
          where ic.id = en_itemnfcomb_id;
         --
   elsif nvl(en_itemnfcomb_id, 0) > 0 and
         ev_atributo = 'VL_PART' and
         nvl(vn_vl_part,-1) >= 0 and
         vv_mensagem is null then
         --
         vn_fase := 99.31;
         --
         update itemnf_comb ic
            set ic.vl_part = vn_vl_part
          where ic.id = en_itemnfcomb_id;
         --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_INTEGR_ITEMNF_COMB_FF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNF_COMB_FF;

-------------------------------------
-- Integra as informações de armas --
-------------------------------------
PROCEDURE PKB_INTEGR_ITEMNF_ARMA ( EST_LOG_GENERICO_NF      IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                 , EST_ROW_ITEMNF_ARMA   IN OUT NOCOPY  ITEMNF_ARMA%ROWTYPE
                                 , EN_NOTAFISCAL_ID      IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_ItemNF_Arma.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o ITEM da Nota Fiscal para registro da Informação do Armamento.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   -- Valida informação do Indicador do tipo de arma de fogo
   if est_row_ItemNF_Arma.dm_ind_arm not in (0, 1) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Indicador do tipo de arma de fogo" ('||est_row_ItemNF_Arma.dm_ind_arm||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   -- Valida a informação do Número de série da arma
   if nvl(est_row_ItemNF_Arma.nro_serie,0) = 0 then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Número de série da arma" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   -- Valida a informação do Número de série do cano
   if nvl(est_row_ItemNF_Arma.nro_cano,0) = 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Número de série do cano da arma" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   -- Valida a informação da Descrição da arma
   if trim(est_row_ItemNF_Arma.descr_compl) is null then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Descrição da arma" não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   -- Se não tem registro de Log e o Tipo de Integração é 1 (valida e insere)
   -- então insere a informação da arma
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = ( select it.notafiscal_id from item_nota_fiscal it
                     where it.id = est_row_itemnf_arma.itemnf_id );
      --
   end if;
   --
   vn_fase := 7;
   --
   est_row_ItemNF_Arma.nro_serie   := nvl(est_row_ItemNF_Arma.nro_serie,0);
   est_row_ItemNF_Arma.nro_cano    := nvl(est_row_ItemNF_Arma.nro_cano,0);
   est_row_ItemNF_Arma.descr_compl := trim( pk_csf.fkg_converte ( est_row_ItemNF_Arma.descr_compl ) );
   --
   vn_fase := 8;
   --
   if nvl(est_row_ItemNF_Arma.itemnf_id,0) > 0
      and est_row_ItemNF_Arma.dm_ind_arm in (0,1)
      and est_row_ItemNF_Arma.descr_compl is not null
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 9;
         --
         select itnfarma_seq.nextval
           into est_row_ItemNF_Arma.id
           from dual;
         --
         vn_fase := 10;
         --
         insert into ItemNF_Arma ( id
                                 , itemnf_id
                                 , dm_ind_arm
                                 , nro_serie
                                 , nro_cano
                                 , descr_compl )
                          values ( est_row_ItemNF_Arma.id
                                 , est_row_ItemNF_Arma.itemnf_id
                                 , est_row_ItemNF_Arma.dm_ind_arm
                                 , est_row_ItemNF_Arma.nro_serie
                                 , est_row_ItemNF_Arma.nro_cano
                                 , est_row_ItemNF_Arma.descr_compl
                                 );
         --
      else
         --
         vn_fase := 11;
         --
         update ItemNF_Arma set dm_ind_arm   = est_row_ItemNF_Arma.dm_ind_arm
                              , nro_serie    = est_row_ItemNF_Arma.nro_serie
                              , nro_cano     = est_row_ItemNF_Arma.nro_cano
                              , descr_compl  = est_row_ItemNF_Arma.descr_compl
          where id = est_row_ItemNF_Arma.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_ItemNF_Arma fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNF_ARMA;

---------------------------------------------------------------------------------------------
-- Integra as informações de medicamentos - Flex Field --
---------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_ITEMNF_MED_FF ( EST_LOG_GENERICO_NF IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                   , EN_NOTAFISCAL_ID    IN             NOTA_FISCAL.ID%TYPE
                                   , EN_ITEMNFMED_ID     IN             ITEMNF_MED.ID%TYPE
                                   , EV_ATRIBUTO         IN             VARCHAR2
                                   , EV_VALOR            IN             VARCHAR2
                                   )
IS
   --
   vn_fase             number := 0;
   vn_loggenerico_id   log_generico_nf.id%type;
   vn_dmtipocampo      ff_obj_util_integr.dm_tipo_campo%type;
   vv_mensagem         varchar2(1000) := null;
   vv_cod_anvisa       itemnf_med.cod_anvisa%type;
   vv_mot_isen_anvisa  itemnf_med.mot_isen_anvisa%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Informações de Medicamento da Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Informações de Medicamento da Nota Fiscal: "VALOR" referente ao atributo deve ser informado (atributo = ' || ev_atributo || ').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_ITEMNF_MED_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_ITEMNF_MED_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'COD_ANVISA' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = Caractere
               --
               vn_fase := 10.1;
               --
               vv_cod_anvisa := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEMNF_MED_FF'
                                                                    , ev_atributo => trim(ev_atributo)
                                                                    , ev_valor    => trim(ev_valor) ) );
               --
            else
               --
               vn_fase := 10.2;
               --
               gv_mensagem_log := 'O valor do campo "Código de Produto da ANVISA para medicamento" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'MOT_ISEN_ANVISA' then
         --
         vn_fase := 11;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 11.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = Caractere
               --
               vn_fase := 11.2;
               --
               vv_mot_isen_anvisa := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEMNF_MED_FF'
                                                                         , ev_atributo => trim(ev_atributo)
                                                                         , ev_valor    => trim(ev_valor) ) );
               --
            else
               --
               vn_fase := 11.3;
               --
               gv_mensagem_log := 'O valor do campo "Motivo da isenção da ANVISA - Tag (xMotivoIsencao)" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      else
         --
         vn_fase := 11.4;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 29;
   --
   if nvl(en_notafiscal_id, 0) = 0 then
      --
      vn_fase := 30;
      --
      gv_mensagem_log := 'Identificador da nota fiscal não informado - Integra as informações de combustíveis - Campos Flex-Field.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (valida e insere)
   -- então realiza a condição de inserir o imposto
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_itemnfmed_id, 0) > 0 and
      ev_atributo = 'COD_ANVISA' and
      trim(vv_cod_anvisa) is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.3;
      --
      update itemnf_med ic
         set ic.cod_anvisa = vv_cod_anvisa
       where ic.id = en_itemnfmed_id;
      --
   end if;
   --
   if nvl(en_itemnfmed_id, 0)  > 0 and
      ev_atributo              = 'MOT_ISEN_ANVISA' and
      trim(vv_mot_isen_anvisa) is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.4;
      --
      update itemnf_med ic
         set ic.mot_isen_anvisa = vv_mot_isen_anvisa
       where ic.id = en_itemnfmed_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_INTEGR_ITEMNF_MED_FF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNF_MED_FF;

--------------------------------------------
-- Integra as informações de medicamentos --
--------------------------------------------
PROCEDURE PKB_INTEGR_ITEMNF_MED ( EST_LOG_GENERICO_NF     IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                , EST_ROW_ITEMNF_MED   IN OUT NOCOPY  ITEMNF_MED%ROWTYPE
                                , EN_NOTAFISCAL_ID     IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_ItemNF_med.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado o ITEM da Nota Fiscal para registro da Informação de Medicamento.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida a informação do Tipo de Produto do Medicamento
   if est_row_ItemNF_med.dm_tp_prod not in (0, 1, 2) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Tipo de Produto do Medicamento" ('||est_row_ItemNF_med.dm_tp_prod||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   -- Valida a informação do Indicador de tipo de referência da base de cálculo do ICMS (ST) do produto farmacêutico
   if est_row_ItemNF_med.dm_ind_med not in (0, 1, 2, 3, 4) then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Indicador de tipo de referência da base de cálculo do ICMS (ST) do produto farmacêutico" ('||est_row_ItemNF_med.dm_ind_med||
                         ') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   -- Valida a informação do Número do Lote do medicamento
   if trim( est_row_ItemNF_med.nro_lote ) is null then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Número do Lote do medicamento" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   -- Valida a informação do Quantidade de produto no Lote do medicamento
   if nvl(est_row_ItemNF_med.qtde_Lote,0) <= 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Quantidade de produto no Lote do medicamento" ('||est_row_ItemNF_med.qtde_Lote||') não pode ser zero ou negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   -- Valida a informação da Data de fabricação
   if est_row_ItemNF_med.dt_fabr is null then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Data de fabricação do medicamento" não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6.2;
   -- Valida a informação da Data de fabricação tem que ser menor ou igual.
   -- Leva-se em consideração que um medicamento não pode ter o ano de fabricação menor de 2000 e maior que 2009
   if est_row_ItemNF_med.dt_fabr is not null
      and to_char(est_row_ItemNF_med.dt_fabr, 'YYYY') not between '2000' and '2099' then
      --
      vn_fase := 6.3;
      --
      gv_mensagem_log := 'A "Data de fabricação do medicamento" ('||est_row_ItemNF_med.dt_fabr||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   -- Valida a informação da Data de validade
   if est_row_ItemNF_med.dt_valid is null then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Data de validade do medicamento" não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7.2;
   -- Valida a informação da Data de validade
   if est_row_ItemNF_med.dt_valid is not null
      and to_char(est_row_ItemNF_med.dt_valid, 'YYYY') not between '2000' and '2099' then
      --
      vn_fase := 7.3;
      --
      gv_mensagem_log := 'A "Data de validade do medicamento" ('||est_row_ItemNF_med.dt_valid||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   -- Valida a informação do Preço máximo consumidor
   if nvl(est_row_ItemNF_med.vl_tab_max,0) < 0 then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Preço máximo consumidor do medicamento" ('||est_row_ItemNF_med.vl_tab_max||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   -- Se existe registro de Log e o Tipo de validação é 1 (valida e insere)
   -- então registra a informação do Medicamento
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = ( select it.notafiscal_id from item_nota_fiscal it
                     where it.id = est_row_itemnf_med.itemnf_id );
      --
   end if;
   --
   vn_fase := 10;
   --
   est_row_ItemNF_med.nro_lote   := trim ( est_row_ItemNF_med.nro_lote );
   est_row_ItemNF_med.qtde_Lote  := nvl(est_row_ItemNF_med.qtde_Lote,0);
   est_row_ItemNF_med.vl_tab_max := nvl(est_row_ItemNF_med.vl_tab_max,0);
   --
   vn_fase := 11;
   --
   if nvl(est_row_ItemNF_med.itemnf_id,0) > 0
      and est_row_ItemNF_med.dm_tp_prod in (0, 1, 2)
      and est_row_ItemNF_med.dm_ind_med in (0, 1, 2, 3, 4)
      and trim ( est_row_ItemNF_med.nro_lote ) is not null
      and est_row_ItemNF_med.dt_fabr is not null
      and est_row_ItemNF_med.dt_valid is not null
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 12;
         --
         select itnfmed_seq.nextval
           into est_row_ItemNF_med.id
           from dual;
         --
         vn_fase := 13;
         --
         insert into ItemNF_Med ( id
                                , itemnf_id
                                , dm_tp_prod
                                , dm_ind_med
                                , nro_lote
                                , qtde_Lote
                                , dt_fabr
                                , dt_valid
                                , vl_tab_max
                                )
                         values ( est_row_ItemNF_med.id
                                , est_row_ItemNF_med.itemnf_id
                                , est_row_ItemNF_med.dm_tp_prod
                                , est_row_ItemNF_med.dm_ind_med
                                , est_row_ItemNF_med.nro_lote
                                , est_row_ItemNF_med.qtde_Lote
                                , est_row_ItemNF_med.dt_fabr
                                , est_row_ItemNF_med.dt_valid
                                , est_row_ItemNF_med.vl_tab_max
                                );
         --
      else
         --
         vn_fase := 14;
         --
         update ItemNF_Med set dm_tp_prod  = est_row_ItemNF_med.dm_tp_prod
                             , dm_ind_med  = est_row_ItemNF_med.dm_ind_med
                             , nro_lote    = est_row_ItemNF_med.nro_lote
                             , qtde_Lote   = est_row_ItemNF_med.qtde_Lote
                             , dt_fabr     = est_row_ItemNF_med.dt_fabr
                             , dt_valid    = est_row_ItemNF_med.dt_valid
                             , vl_tab_max  = est_row_ItemNF_med.vl_tab_max
          where id = est_row_ItemNF_med.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_ItemNF_Med fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNF_MED;

----------------------------------------
-- Integra as informações de veículos --
----------------------------------------
PROCEDURE PKB_INTEGR_ITEMNF_VEIC ( EST_LOG_GENERICO_NF      IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                 , EST_ROW_ITEMNF_VEIC   IN OUT NOCOPY  ITEMNF_VEIC%ROWTYPE
                                 , EN_NOTAFISCAL_ID      IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   est_row_ItemNF_Veic.chassi           := trim( pk_csf.fkg_converte ( est_row_ItemNF_Veic.chassi ) );
   est_row_ItemNF_Veic.descr_cor        := trim( pk_csf.fkg_converte ( est_row_ItemNF_Veic.descr_cor ) );
   est_row_ItemNF_Veic.nro_motor        := trim( pk_csf.fkg_converte ( est_row_ItemNF_Veic.nro_motor ) );
   est_row_ItemNF_Veic.ano_Mod          := nvl(est_row_ItemNF_Veic.ano_Mod,0);
   est_row_ItemNF_Veic.ano_Fabr         := nvl(est_row_ItemNF_Veic.ano_Fabr,0);
   est_row_ItemNF_Veic.tp_veiculo       := nvl(est_row_ItemNF_Veic.tp_veiculo,0);
   est_row_ItemNF_Veic.esp_veiculo      := nvl(est_row_ItemNF_Veic.esp_veiculo,0);
   est_row_ItemNF_Veic.dm_cond_Veic     := nvl(est_row_ItemNF_Veic.dm_cond_Veic,0);
   est_row_ItemNF_Veic.cod_marca_modelo := nvl(est_row_ItemNF_Veic.cod_marca_modelo,0);
   est_row_ItemNF_Veic.cilin            := trim(est_row_ItemNF_Veic.cilin);
   est_row_itemnf_veic.tp_comb          := trim(est_row_itemnf_veic.tp_comb);
   est_row_itemnf_veic.cod_cor_detran   := trim(est_row_itemnf_veic.cod_cor_detran);
   est_row_itemnf_veic.cap_max_lotacao  := trim(est_row_itemnf_veic.cap_max_lotacao);
   --
   vn_fase := 1.1;
   --
   if nvl(est_row_ItemNF_Veic.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.2;
      --
      gv_mensagem_log := 'Não informado o ITEM da Nota Fiscal para registro da Informação do Veículo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida informações do campo dm_tp_Oper
   if est_row_ItemNF_Veic.dm_tp_Oper not in (0, 1, 2, 3) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Tipo da operação do veículo da Nota Fiscal" ('||est_row_ItemNF_Veic.dm_tp_Oper||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   -- Valida informações do campo dm_ind_veic_oper
   if est_row_ItemNF_Veic.dm_ind_veic_oper not in (0, 1, 2, 3, 9) then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Tipo da operação do veículo SPED da Nota Fiscal" ('||est_row_ItemNF_Veic.dm_ind_veic_oper||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Valida informação do chassi
   est_row_ItemNF_Veic.chassi := trim(est_row_ItemNF_Veic.chassi);
   --
   if est_row_ItemNF_Veic.chassi is null then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Chassi do veículo da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4.2;
   --
   if length(est_row_ItemNF_Veic.chassi) <> 17 then
      --
      vn_fase := 4.3;
      --
      gv_mensagem_log := '"Chassi do veículo da Nota Fiscal" obrigatóriamente deve ter 17 digitos('||est_row_ItemNF_Veic.chassi||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   -- Valida informação do código da Cor
   if est_row_ItemNF_Veic.cod_cor is null then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Código da cor do veículo da Nota Fiscal" não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   -- Valida informação da descrição da cor
   if est_row_ItemNF_Veic.descr_cor is null then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Descrição da cor do veículo da Nota Fiscal" não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   -- Valida informação da Potência Motor
   if est_row_ItemNF_Veic.potencia_motor is null then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Potência Motor do veículo da Nota Fiscal" não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   -- Valida informação da CM3 (Potência)
   if est_row_ItemNF_Veic.cm3 is null then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"CM3 (Potência) do veículo da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   -- Valida informação do Peso Líquido
   if est_row_ItemNF_Veic.peso_liq is null then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := '"Peso Líquido do veículo da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 10;
   -- Valida informação do Peso Bruto
   if est_row_ItemNF_Veic.peso_bruto is null then
      --
      vn_fase := 10.1;
      --
      gv_mensagem_log := '"Peso Bruto do veículo da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11;
   -- Valida informação do Serial (série)
   if est_row_ItemNF_Veic.nro_serie is null then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := '"Serial (número de série) do veículo da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12;
   -- Valida informação do Número de Motor
   if est_row_ItemNF_Veic.nro_motor is null then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := '"Número de Motor do veículo da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   -- Valida informação do CMKG
   if est_row_ItemNF_Veic.cmkg is null then
      --
      vn_fase := 13.1;
      --
      gv_mensagem_log := '"CMKG do veículo da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14;
   -- Valida informação da Distância entre eixos
   if est_row_ItemNF_Veic.dist_entre_eixo is null then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := '"Distância entre eixos do veículo da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 15;

   -- Valida informação da Ano Modelo de Fabricação
   if nvl(est_row_ItemNF_Veic.ano_Mod,0) <= 0 then
      --
      vn_fase := 15.1;
      --
      gv_mensagem_log := '"Ano Modelo de Fabricação do Veículo da Nota Fiscal" ('||est_row_ItemNF_Veic.ano_Mod||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 16;
   -- Valida informação do Ano de Fabricação
   if nvl(est_row_ItemNF_Veic.ano_Fabr,0) <= 0 then
      --
      vn_fase := 16.1;
      --
      gv_mensagem_log := '"Ano de Fabricação do Veículo da Nota Fiscal" ('||est_row_ItemNF_Veic.ano_Fabr||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 17;
   -- Valida informação do Tipo de Pintura
   if est_row_ItemNF_Veic.tp_pintura is null then
      --
      vn_fase := 17.1;
      --
      gv_mensagem_log := '"Tipo de Pintura do veículo da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 18;
   -- Valida informação do Tipo de Veículo
   if nvl(est_row_ItemNF_Veic.tp_veiculo,0) <= 0 then
      --
      vn_fase := 18.1;
      --
      gv_mensagem_log := '"Tipo de Veículo da Nota Fiscal" ('||est_row_ItemNF_Veic.tp_veiculo||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 19;
   -- Valida informação da Espécie de Veículo
   if nvl(est_row_ItemNF_Veic.esp_veiculo,0) <= 0 then
      --
      vn_fase := 19.1;
      --
      gv_mensagem_log := '"Espécie de Veículo da Nota Fiscal" ('||est_row_ItemNF_Veic.esp_veiculo||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 20;
   -- Valida informação do Condição do VIN
   if est_row_ItemNF_Veic.vin is null then
      --
      vn_fase := 20.1;
      --
      gv_mensagem_log := '"Condição do VIN (Vehicle Identification Number) do veículo da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   if est_row_ItemNF_Veic.vin <> 'R'
      and est_row_ItemNF_Veic.vin <> 'N' then
      --
      vn_fase := 20.2;
      --
      gv_mensagem_log := '"Condição do VIN (Vehicle Identification Number) do veículo da Nota Fiscal" ('||est_row_ItemNF_Veic.vin||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
   end if;
   --
   vn_fase := 21;
   --
   -- Valida informações do campo dm_cond_Veic
   if est_row_ItemNF_Veic.dm_cond_Veic not in (1, 2, 3) then
      --
      vn_fase := 21.1;
      --
      gv_mensagem_log := '"Condição do Veículo da Nota Fiscal" ('||est_row_ItemNF_Veic.dm_cond_Veic||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 22;
   --
   -- Valida informação do Código Marca Modelo
   if nvl(est_row_ItemNF_Veic.cod_marca_modelo,0) <= 0 then
      --
      vn_fase := 22.1;
      --
      gv_mensagem_log := '"Código Marca Modelo do Veículo da Nota Fiscal" ('||est_row_ItemNF_Veic.cod_marca_modelo||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 23;
   --
   if trim(est_row_ItemNF_Veic.cilin) is null then
      --
      vn_fase := 23.1;
      --
      gv_mensagem_log := '"Cilindradas do Veículo da Nota Fiscal" deve ser informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 24;
   --
   if trim(est_row_itemnf_veic.tp_comb) is null then
      --
      vn_fase := 24.1;
      --
      gv_mensagem_log := '"Tipo de combustível do Veículo da Nota Fiscal" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 25;
   --
   if trim(est_row_itemnf_veic.cmt) is null then
      --
      vn_fase := 25.1;
      --
      gv_mensagem_log := '"Capacidade Máxima de Tração do Veículo da Nota Fiscal" deve ser informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 26;
   --
   if trim(est_row_itemnf_veic.cod_cor_detran) is null then
      --
      vn_fase := 26.1;
      --
      gv_mensagem_log := '"Código da Cor "DETRAN" do Veículo da Nota Fiscal" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   if not pk_csf.fkg_is_numerico( est_row_itemnf_veic.cod_cor_detran ) then
      --
      vn_fase := 26.2;
      --
      gv_mensagem_log := 'O código da cor do veículo deve conter apenas números.('||est_row_itemnf_veic.cod_cor_detran||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 27;
   --
   if nvl(est_row_itemnf_veic.cap_max_lotacao,0) <= 0 then
      --
      vn_fase := 27.1;
      --
      gv_mensagem_log := '"Capacidade máxima de lotação do Veículo da Nota Fiscal" ('||est_row_itemnf_veic.cap_max_lotacao||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 28;
   --
   if est_row_itemnf_veic.dm_tp_restricao not in (0, 1, 2, 3, 4, 9) then
      --
      vn_fase := 28.1;
      --
      gv_mensagem_log := '"Tipo de Restrição do Veículo da Nota Fiscal" está inválida ('||est_row_itemnf_veic.dm_tp_restricao||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 29;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = ( select it.notafiscal_id from item_nota_fiscal it
                     where it.id = est_row_itemnf_veic.itemnf_id );
      --
   end if;
   --
   vn_fase := 30;
   --
   if nvl(est_row_ItemNF_Veic.itemnf_id,0) > 0
      and est_row_ItemNF_Veic.dm_tp_Oper in (0, 1, 2, 3)
      and est_row_ItemNF_Veic.dm_ind_veic_oper in (0, 1, 2, 3, 9)
      and est_row_ItemNF_Veic.chassi is not null
      and est_row_ItemNF_Veic.cod_cor is not null
      and est_row_ItemNF_Veic.descr_cor is not null
      and est_row_ItemNF_Veic.potencia_motor is not null
      and est_row_ItemNF_Veic.cm3 is not null
      and est_row_ItemNF_Veic.peso_liq is not null
      and est_row_ItemNF_Veic.peso_bruto is not null
      and est_row_ItemNF_Veic.nro_serie is not null
      and est_row_ItemNF_Veic.tipo_combust is not null
      and est_row_ItemNF_Veic.nro_motor is not null
      and est_row_ItemNF_Veic.cmkg is not null
      and est_row_ItemNF_Veic.dist_entre_eixo is not null
      and est_row_ItemNF_Veic.ano_Mod > 0
      and est_row_ItemNF_Veic.ano_Fabr > 0
      and est_row_ItemNF_Veic.tp_pintura  is not null
      and est_row_ItemNF_Veic.tp_veiculo > 0
      and est_row_ItemNF_Veic.esp_veiculo > 0
      and est_row_ItemNF_Veic.vin  is not null
      and est_row_ItemNF_Veic.dm_cond_Veic > 0
      and est_row_ItemNF_Veic.cod_marca_modelo > 0
      and est_row_ItemNF_Veic.cilin is not null
      and est_row_itemnf_veic.tp_comb is not null
      and est_row_itemnf_veic.cod_cor_detran is not null
      and est_row_itemnf_veic.cap_max_lotacao is not null
      and est_row_itemnf_veic.dm_tp_restricao in (0, 1, 2, 3, 4, 9)
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 31;
         --
         select itnfveic_seq.nextval
           into est_row_ItemNF_Veic.id
           from dual;
         --
         vn_fase := 32;
         --
         insert into ItemNF_Veic ( id
                                 , itemnf_id
                                 , dm_tp_oper
                                 , dm_ind_veic_oper
                                 , chassi
                                 , cod_cor
                                 , descr_cor
                                 , potencia_motor
                                 , cm3
                                 , peso_liq
                                 , peso_bruto
                                 , nro_serie
                                 , tipo_combust
                                 , nro_motor
                                 , cmkg
                                 , dist_entre_eixo
                                 , renavam
                                 , ano_mod
                                 , ano_fabr
                                 , tp_pintura
                                 , tp_veiculo
                                 , esp_veiculo
                                 , vin
                                 , dm_cond_veic
                                 , cod_marca_modelo
                                 , cnpj_conces
                                 , uf_conces
                                 , cilin
                                 , tp_comb
                                 , cmt
                                 , cod_cor_detran
                                 , cap_max_lotacao
                                 , dm_tp_restricao
                                 )
                          values ( est_row_itemnf_veic.id
                                 , est_row_itemnf_veic.itemnf_id
                                 , est_row_itemnf_veic.dm_tp_oper
                                 , est_row_itemnf_veic.dm_ind_veic_oper
                                 , est_row_itemnf_veic.chassi
                                 , est_row_itemnf_veic.cod_cor
                                 , est_row_itemnf_veic.descr_cor
                                 , est_row_itemnf_veic.potencia_motor
                                 , est_row_itemnf_veic.cm3
                                 , est_row_itemnf_veic.peso_liq
                                 , est_row_itemnf_veic.peso_bruto
                                 , est_row_itemnf_veic.nro_serie
                                 , est_row_itemnf_veic.tipo_combust
                                 , est_row_itemnf_veic.nro_motor
                                 , est_row_itemnf_veic.cmkg
                                 , est_row_itemnf_veic.dist_entre_eixo
                                 , est_row_itemnf_veic.renavam
                                 , est_row_itemnf_veic.ano_mod
                                 , est_row_itemnf_veic.ano_fabr
                                 , est_row_itemnf_veic.tp_pintura
                                 , est_row_itemnf_veic.tp_veiculo
                                 , est_row_itemnf_veic.esp_veiculo
                                 , est_row_itemnf_veic.vin
                                 , est_row_itemnf_veic.dm_cond_veic
                                 , est_row_itemnf_veic.cod_marca_modelo
                                 , est_row_itemnf_veic.cnpj_conces
                                 , est_row_itemnf_veic.uf_conces
                                 , est_row_itemnf_veic.cilin
                                 , est_row_itemnf_veic.tp_comb
                                 , est_row_itemnf_veic.cmt
                                 , est_row_itemnf_veic.cod_cor_detran
                                 , est_row_itemnf_veic.cap_max_lotacao
                                 , est_row_itemnf_veic.dm_tp_restricao
                                 );
         --
      else
         --
         vn_fase := 33;
         --
         update ItemNF_Veic set dm_tp_oper        = est_row_itemnf_veic.dm_tp_oper
                              , dm_ind_veic_oper  = est_row_itemnf_veic.dm_ind_veic_oper
                              , chassi            = est_row_itemnf_veic.chassi
                              , cod_cor           = est_row_itemnf_veic.cod_cor
                              , descr_cor         = est_row_itemnf_veic.descr_cor
                              , potencia_motor    = est_row_itemnf_veic.potencia_motor
                              , cm3               = est_row_itemnf_veic.cm3
                              , peso_liq          = est_row_itemnf_veic.peso_liq
                              , peso_bruto        = est_row_itemnf_veic.peso_bruto
                              , nro_serie         = est_row_itemnf_veic.nro_serie
                              , tipo_combust      = est_row_itemnf_veic.tipo_combust
                              , nro_motor         = est_row_itemnf_veic.nro_motor
                              , cmkg              = est_row_itemnf_veic.cmkg
                              , dist_entre_eixo   = est_row_itemnf_veic.dist_entre_eixo
                              , renavam           = est_row_itemnf_veic.renavam
                              , ano_mod           = est_row_itemnf_veic.ano_mod
                              , ano_fabr          = est_row_itemnf_veic.ano_fabr
                              , tp_pintura        = est_row_itemnf_veic.tp_pintura
                              , tp_veiculo        = est_row_itemnf_veic.tp_veiculo
                              , esp_veiculo       = est_row_itemnf_veic.esp_veiculo
                              , vin               = est_row_itemnf_veic.vin
                              , dm_cond_veic      = est_row_itemnf_veic.dm_cond_veic
                              , cod_marca_modelo  = est_row_itemnf_veic.cod_marca_modelo
                              , cnpj_conces       = est_row_itemnf_veic.cnpj_conces
                              , uf_conces         = est_row_itemnf_veic.uf_conces
                              , cilin             = est_row_itemnf_veic.cilin
                              , tp_comb           = est_row_itemnf_veic.tp_comb
                              , cmt               = est_row_itemnf_veic.cmt
                              , cod_cor_detran    = est_row_itemnf_veic.cod_cor_detran
                              , cap_max_lotacao   = est_row_itemnf_veic.cap_max_lotacao
                              , dm_tp_restricao   = est_row_itemnf_veic.dm_tp_restricao
          where id = est_row_ItemNF_Veic.ID;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_ItemNF_Veic fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                           , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNF_VEIC;

-------------------------------------------------------------------
-- Integra as informações das Adições da Declaração de Exortação --
-------------------------------------------------------------------
PROCEDURE PKB_INTEGR_ITEMNFDI_ADIC ( EST_LOG_GENERICO_NF        IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                   , EST_ROW_ITEMNFDI_ADIC   IN OUT NOCOPY  ITEMNFDI_ADIC%ROWTYPE
                                   , EN_NOTAFISCAL_ID        IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   -- 
   if nvl(gn_dm_legado,0) = 0 then  -- Não é Legado 
      --   
      if nvl(est_row_ItemNFDI_Adic.itemnfdi_id,0) = 0
         and nvl(est_log_generico_nf.count,0) = 0 then
         --
         vn_fase := 1.1;
         --
         gv_mensagem_log := 'Não informado a Declaração de Importação para registro da Adição.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia);
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 2;
      --
      -- Valida a informação do número da Adição
      if nvl(est_row_ItemNFDI_Adic.nro_adicao,0) <= 0 then
         --
         vn_fase := 2.1;
         --
         gv_mensagem_log := '"Numero da adição da Declaração de Importação da Nota Fiscal" não informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia);
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 3;
      --
      if nvl(est_row_ItemNFDI_Adic.nro_seq_adic,0) <= 0 then
         --
         vn_fase := 3.1;
         --
         gv_mensagem_log := '"Numero seqüencial do item dentro da adição da Declaração de Importação da Nota Fiscal" não informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia);
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 4;
      -- Valida informação do Valor do Desconto da DI
      if nvl(est_row_ItemNFDI_Adic.vl_desc_di,0) < 0  then
         --
         vn_fase := 4.1;
         --
         gv_mensagem_log := 'Valor do desconto do item da DI  adição ('||est_row_ItemNFDI_Adic.vl_desc_di||') não por ser negativo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia);
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 5;
      --
      if trim( pk_csf.fkg_converte ( est_row_ItemNFDI_Adic.cod_fabricante ) ) is null then
         --
         vn_fase := 5.1;
         --
         gv_mensagem_log := '"Código do fabricante estrangeiro" não informado na Declaração de importação.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia); 
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;   
   --
   vn_fase := 6;
   --
   -- Se não existe registro de Log e o Tipo e validação é 1 (valida e insere)
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 7;
   --
   est_row_ItemNFDI_Adic.nro_adicao     := nvl(est_row_ItemNFDI_Adic.nro_adicao, 0);
   est_row_ItemNFDI_Adic.nro_seq_adic   := nvl(est_row_ItemNFDI_Adic.nro_seq_adic, 0);
   est_row_ItemNFDI_Adic.cod_fabricante := trim( pk_csf.fkg_converte ( est_row_ItemNFDI_Adic.cod_fabricante ) );
   est_row_ItemNFDI_Adic.vl_desc_di     := nvl(est_row_ItemNFDI_Adic.vl_desc_di,0);
   --
   vn_fase := 8;
   --
   if nvl(est_row_ItemNFDI_Adic.itemnfdi_id, 0) > 0 then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 9;
         --
         select itnfdiadic_seq.nextval
           into est_row_ItemNFDI_Adic.id
           from dual;
         --
         vn_fase := 10;
         --
         insert into ItemNFDI_Adic ( id
                                   , itemnfdi_id
                                   , nro_adicao
                                   , nro_seq_adic
                                   , cod_fabricante
                                   , vl_desc_di
                                   )
                            values ( est_row_ItemNFDI_Adic.id
                                   , est_row_ItemNFDI_Adic.itemnfdi_id
                                   , est_row_ItemNFDI_Adic.nro_adicao
                                   , est_row_ItemNFDI_Adic.nro_seq_adic
                                   , est_row_ItemNFDI_Adic.cod_fabricante
                                   , est_row_ItemNFDI_Adic.vl_desc_di
                                   );
      else
         --
         vn_fase := 11;
         --
         update ItemNFDI_Adic set nro_adicao      = est_row_ItemNFDI_Adic.nro_adicao
                                , nro_seq_adic    = est_row_ItemNFDI_Adic.nro_seq_adic
                                , cod_fabricante  = est_row_ItemNFDI_Adic.cod_fabricante
                                , vl_desc_di      = est_row_ItemNFDI_Adic.vl_desc_di
          where id = est_row_ItemNFDI_Adic.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_ItemNFDI_Adic fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia);
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                           , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNFDI_ADIC;

---------------------------------------------------------------------------------------------
-- Integra as informações das Adições da Declaração de Exortação - Flex Field --
---------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_ITEMNFDI_ADIC_FF ( EST_LOG_GENERICO_NF      IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                      , EN_NOTAFISCAL_ID      IN             NOTA_FISCAL.ID%TYPE
                                      , EN_ITEMNFDIADIC_ID    IN             ITEMNFDI_ADIC.ID%TYPE
                                      , EV_ATRIBUTO           IN             VARCHAR2
                                      , EV_VALOR              IN             VARCHAR2 ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_dmtipocampo     ff_obj_util_integr.dm_tipo_campo%type;
   vv_mensagem        varchar2(1000) := null;
   vn_num_acdraw      itemnfdi_adic.num_acdraw%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Adições da Declaração de Exortação da Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Adições da Declaração de Exortação da Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_ITEMNFDI_ADIC_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_ITEMNFDI_ADIC_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --

      if trim(ev_atributo) = 'NUM_ACDRAW' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 11;
               --
               vn_num_acdraw := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNFDI_ADIC_FF'
                                                            , ev_atributo => trim(ev_atributo)
                                                            , ev_valor    => trim(ev_valor) );

            else
               --
               vn_fase := 12;
               --
               gv_mensagem_log := 'O valor do campo "Número do ato concessório de Drawback" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      else
         vn_fase := 13;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(en_notafiscal_id, 0) = 0 then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := 'Identificador da nota fiscal não informado - Integra as informações das Adições da Declaração de Exortação - Campos Flex-Field.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (valida e insere)
   -- então realiza a condição de inserir o imposto
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_itemnfdiadic_id, 0) > 0 and
      ev_atributo = 'NUM_ACDRAW' and
      nvl(vn_num_acdraw,-1) >= 0 and
      vv_mensagem is null then
      --
      vn_fase := 99.3;
      --
      update itemnfdi_adic
         set num_acdraw = vn_num_acdraw
       where id = en_itemnfdiadic_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_itemnfdi_adic_ff fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNFDI_ADIC_FF;

---------------------------------------------------------------
-- Integra as informações da Declaração de Impotação do Item --
---------------------------------------------------------------
PROCEDURE PKB_INTEGR_ITEMNF_DEC_IMPOR ( EST_LOG_GENERICO_NF          IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                      , EST_ROW_ITEMNF_DEC_IMPOR  IN OUT NOCOPY  ITEMNF_DEC_IMPOR%ROWTYPE
                                      , EN_NOTAFISCAL_ID          IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_ItemNF_Dec_Impor.itemnf_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado ITEM da Nota Fiscal para registro da Declaração da Importação.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia);
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida a informação do tipo de declaração de importação
   if est_row_ItemNF_Dec_Impor.dm_cod_doc_imp is not null
      and est_row_ItemNF_Dec_Impor.dm_cod_doc_imp not in (0, 1, 2) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Tipo da Declaração de importação da Nota Fiscal" ('||est_row_ItemNF_Dec_Impor.dm_cod_doc_imp||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia);
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   -- Valida informação do campo nro_di
   if trim( est_row_ItemNF_Dec_Impor.nro_di ) is null then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Número da Declaração de Importação da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia);
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Valida informação do campo dt_di
   if est_row_ItemNF_Dec_Impor.dt_di is null then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Data de Registro da Declaração de Importação da Nota Fiscal" não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia);
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   -- Valida informação do campo local_Desemb
   if trim ( est_row_ItemNF_Dec_Impor.local_Desemb ) is null then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Local de desembaraço da Declaração de Importação da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia);
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   -- Valida informação do campo uf_Desemb, não pode ser EX - Exterior
   if pk_csf.fkg_uf_valida ( ev_sigla_estado => est_row_ItemNF_Dec_Impor.uf_Desemb ) = false
      or est_row_ItemNF_Dec_Impor.uf_Desemb = 'EX'
      then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Sigla da UF onde ocorreu o Desembaraço Aduaneiro da Declaração de Importação da Nota Fiscal" ('||
                         est_row_ItemNF_Dec_Impor.uf_Desemb||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia);
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 7;

   -- Valida informação do campo dt_desemb
   if est_row_ItemNF_Dec_Impor.dt_desemb is null then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Data do Desembaraço Aduaneiro da Declaração de Importação da Nota Fiscal" não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia);
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 7.2;

   -- Valida informação do campo dt_desemb, se é maior que 1 ano adiante
   if est_row_ItemNF_Dec_Impor.dt_desemb > (sysdate + 365) then
      --
      vn_fase := 7.3;
      --
      gv_mensagem_log := '"Data do Desembaraço Aduaneiro da Declaração de Importação da Nota Fiscal" está inválida ('||
                         to_char(est_row_ItemNF_Dec_Impor.dt_desemb,'dd/mm/rrrr')||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia);
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7.4;
   --
   if trim( pk_csf.fkg_converte ( est_row_ItemNF_Dec_Impor.cod_part_export ) ) is null then
      --
      gv_mensagem_log := '"Código do Exportador na DI" não foi informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia);
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   -- então insere a informação da Declaração de importação
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 9;
   --
   est_row_ItemNF_Dec_Impor.nro_di       := trim(est_row_ItemNF_Dec_Impor.nro_di);
   est_row_ItemNF_Dec_Impor.local_Desemb := trim( pk_csf.fkg_converte ( est_row_ItemNF_Dec_Impor.local_Desemb ) );
   est_row_ItemNF_Dec_Impor.uf_Desemb    := trim( est_row_ItemNF_Dec_Impor.uf_Desemb );
   est_row_ItemNF_Dec_Impor.cod_part_export    := trim( pk_csf.fkg_converte ( est_row_ItemNF_Dec_Impor.cod_part_export ) );
   --
   vn_fase := 10;
   --
   if nvl(est_row_ItemNF_Dec_Impor.itemnf_id, 0) > 0
      and est_row_ItemNF_Dec_Impor.nro_di is not null
      and est_row_ItemNF_Dec_Impor.dt_di is not null
      and est_row_ItemNF_Dec_Impor.local_Desemb is not null
      and est_row_ItemNF_Dec_Impor.uf_Desemb is not null
      and est_row_ItemNF_Dec_Impor.dt_desemb is not null
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 11;
         --
         select itemnfdi_seq.nextval
           into est_row_ItemNF_Dec_Impor.id
           from dual;
         --
         vn_fase := 12;
         --
         insert into ItemNF_Dec_Impor ( id
                                      , itemnf_id
                                      , nro_di
                                      , dt_di
                                      , local_Desemb
                                      , uf_Desemb
                                      , dt_desemb
                                      , cod_part_export
                                      , dm_cod_doc_imp
                                      , NUM_ACDRAW
                                      , DM_TP_VIA_TRANSP
                                      , VAFRMM
                                      , DM_TP_INTERMEDIO
                                      , CNPJ
                                      , UF_TERCEIRO
                                      )
                               values ( est_row_ItemNF_Dec_Impor.id
                                      , est_row_ItemNF_Dec_Impor.itemnf_id
                                      , est_row_ItemNF_Dec_Impor.nro_di
                                      , est_row_ItemNF_Dec_Impor.dt_di
                                      , est_row_ItemNF_Dec_Impor.local_Desemb
                                      , est_row_ItemNF_Dec_Impor.uf_Desemb
                                      , est_row_ItemNF_Dec_Impor.dt_desemb
                                      , est_row_ItemNF_Dec_Impor.cod_part_export
                                      , est_row_ItemNF_Dec_Impor.dm_cod_doc_imp
                                      , est_row_ItemNF_Dec_Impor.NUM_ACDRAW
                                      , est_row_ItemNF_Dec_Impor.DM_TP_VIA_TRANSP
                                      , est_row_ItemNF_Dec_Impor.VAFRMM
                                      , est_row_ItemNF_Dec_Impor.DM_TP_INTERMEDIO
                                      , est_row_ItemNF_Dec_Impor.CNPJ
                                      , est_row_ItemNF_Dec_Impor.UF_TERCEIRO
                                      );
      --
      else
         --
         vn_fase := 13;
         --
         update ItemNF_Dec_Impor set nro_di           = est_row_ItemNF_Dec_Impor.nro_di
                                   , dt_di            = est_row_ItemNF_Dec_Impor.dt_di
                                   , local_Desemb     = est_row_ItemNF_Dec_Impor.local_Desemb
                                   , uf_Desemb        = est_row_ItemNF_Dec_Impor.uf_Desemb
                                   , dt_desemb        = est_row_ItemNF_Dec_Impor.dt_desemb
                                   , cod_part_export  = est_row_ItemNF_Dec_Impor.cod_part_export
                                   , dm_cod_doc_imp   = est_row_ItemNF_Dec_Impor.dm_cod_doc_imp
                                   , NUM_ACDRAW       = est_row_ItemNF_Dec_Impor.NUM_ACDRAW
                                   , DM_TP_VIA_TRANSP = est_row_ItemNF_Dec_Impor.DM_TP_VIA_TRANSP
                                   , VAFRMM           = est_row_ItemNF_Dec_Impor.VAFRMM
                                   , DM_TP_INTERMEDIO = est_row_ItemNF_Dec_Impor.DM_TP_INTERMEDIO
                                   , CNPJ             = est_row_ItemNF_Dec_Impor.CNPJ
                                   , UF_TERCEIRO      = est_row_ItemNF_Dec_Impor.UF_TERCEIRO
          where id = est_row_ItemNF_Dec_Impor.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_ItemNF_Dec_Impor fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia);
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNF_DEC_IMPOR;

----------------------------------------------------------------------------
-- Integra as informações da Declaração de Impotação do Item - Flex Field --
----------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_ITEMNF_DEC_IMPOR_FF ( EST_LOG_GENERICO_NF          IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                         , EN_NOTAFISCAL_ID          IN             NOTA_FISCAL.ID%TYPE
                                         , EN_ITEMNFDI_ID            IN             ITEMNF_DEC_IMPOR.ID%TYPE 
                                         , EV_ATRIBUTO               IN             VARCHAR2
                                         , EV_VALOR                  IN             VARCHAR2) IS
   --
   vn_fase                          number := 0;
   vn_loggenerico_id                log_generico_nf.id%type;
   vn_dmtipocampo                   ff_obj_util_integr.dm_tipo_campo%type;
   vv_mensagem                      varchar2(1000) := null;
   --
   vn_dm_tp_via_transp              itemnf_dec_impor.dm_tp_via_transp%type;
   vn_vafrmm                        itemnf_dec_impor.vafrmm%type;
   vn_dm_tp_intermedio              itemnf_dec_impor.dm_tp_intermedio%type;
   vv_cnpj                          itemnf_dec_impor.cnpj%type;
   vv_uf_terceiro                   itemnf_dec_impor.uf_terceiro%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Declaração de Impotação do Item da Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Declaração de Impotação do Item da Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_ITEMNF_DEC_IMPOR_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_ITEMNF_DEC_IMPOR_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'DM_TP_VIA_TRANSP' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 11;
               --
               if ev_valor in ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12') then
                  --
                  vn_dm_tp_via_transp := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_DEC_IMPOR_FF'
                                                                     , ev_atributo => trim(ev_atributo)
                                                                     , ev_valor    => trim(ev_valor) );
                  --
                  vn_fase := 12;
                  --
               else
                  --
                  vn_fase := 12.1;
                  --
                  gv_mensagem_log := 'O valor do campo "Via de transporte internacional" informado ('||ev_valor||') não é valido, de ser: 1-Marítima, '||
                                     '2-Fluvial, 3-Lacustre, 4-Aérea, 5-Postal, 6-Ferroviária, 7-Rodoviária, 8-Conduto/Rede Transmissão, 9-Meios Próprios, '||
                                     '10-Entrada/Saída ficta, 11-Courier, 12-Handcarry.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem       => gv_cabec_log
                                      , ev_resumo         => gv_mensagem_log
                                      , en_tipo_log       => erro_de_validacao
                                      , en_referencia_id  => gn_referencia_id
                                      , ev_obj_referencia => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 13;
               --
               gv_mensagem_log := 'O valor do campo "Via de transporte internacional" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'VAFRMM' then
         --
         vn_fase := 14;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 15;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 15.1;
               --
               vn_vafrmm := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_DEC_IMPOR_FF'
                                                          , ev_atributo => trim(ev_atributo)
                                                          , ev_valor    => trim(ev_valor) );
               --
               vn_fase := 15.2;
               --
            else
               --
               vn_fase := 15.3;
               --
               gv_mensagem_log := 'O valor do campo "VAFRMM" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_TP_INTERMEDIO' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 16;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 16.1;
               --
               if ev_valor in ('1', '2', '3') then
                  --
                  vn_dm_tp_intermedio := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEMNF_DEC_IMPOR_FF'
                                                                       , ev_atributo => trim(ev_atributo)
                                                                       , ev_valor    => trim(ev_valor) );
                  --
               else
                 --
                 vn_fase := 16.2;
                 --
                 gv_mensagem_log := 'O valor do campo "Forma de importação quanto a intermediação" informado ('||ev_valor||') não é valido, deve ser: 1 - Importação por conta própria, 2 - Importação por conta e ordem, 3 - Importação por encomenda.';
                 --
                 vn_loggenerico_id := null;
                 --
                 pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem       => gv_cabec_log
                                     , ev_resumo         => gv_mensagem_log
                                     , en_tipo_log       => erro_de_validacao
                                     , en_referencia_id  => gn_referencia_id
                                     , ev_obj_referencia => gv_obj_referencia );
                 -- Armazena o "loggenerico_id" na memória
                 pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                     , est_log_generico_nf => est_log_generico_nf );
                 --
               end if;
               --
            else
            --
               vn_fase := 16.3;
               --
               gv_mensagem_log := 'O valor do campo "Forma de importação quanto a intermediação" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'CNPJ' then
         --
         vn_fase := 17;
         --
         if vn_dmtipocampo = 2 then -- tipo de campo = caractere
            --
            vn_fase := 17.1;
            --
            vv_cnpj := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_ITEMNF_DEC_IMPOR_FF'
                                                     , ev_atributo => trim(ev_atributo)
                                                     , ev_valor    => trim(ev_valor) );
            --
         else
             --
             vn_fase := 17.2;
             --
             gv_mensagem_log := 'O valor do campo "CNPJ" informado não confere com o tipo de campo, deveria ser CARACTERE.';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem       => gv_cabec_log
                                 , ev_resumo         => gv_mensagem_log
                                 , en_tipo_log       => erro_de_validacao
                                 , en_referencia_id  => gn_referencia_id
                                 , ev_obj_referencia => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                 , est_log_generico_nf => est_log_generico_nf );
             --
         end if;
         --
      elsif trim(ev_atributo) = 'UF_TERCEIRO' then
         --
         vn_fase := 18;
         --
         if vn_dmtipocampo = 2 then -- tipo de campo = caractere
            --
            vn_fase := 18.1;
            --
            vv_uf_terceiro := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_ITEMNF_DEC_IMPOR_FF'
                                                            , ev_atributo => trim(ev_atributo)
                                                            , ev_valor    => trim(ev_valor) );
            --
         else
            --
            vn_fase := 18.2;
            --
            gv_mensagem_log := 'O valor do campo "Sigla da UF do adquirente" informado não confere com o tipo de campo, deveria ser CARACTERE.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem       => gv_cabec_log
                                , ev_resumo         => gv_mensagem_log
                                , en_tipo_log       => erro_de_validacao
                                , en_referencia_id  => gn_referencia_id
                                , ev_obj_referencia => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      else
         --
         vn_fase := 19;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 20;
   --
   if nvl(en_notafiscal_id, 0) = 0 then
      --
      vn_fase := 20.1;
      --
      gv_mensagem_log := 'Identificador da nota fiscal não informado - Integra as informações da Declaração de Impotação do Item - Campos Flex-Field.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_itemnfdi_id,0) > 0 and
      ev_atributo = 'DM_TP_VIA_TRANSP' and
      vn_dm_tp_via_transp in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) and
      vv_mensagem is null then
      --
      vn_fase := 99.3;
      --
      update itemnf_dec_impor nfdi
         set nfdi.dm_tp_via_transp = vn_dm_tp_via_transp
       where nfdi.id = en_itemnfdi_id;
      --
   end if;
   --
   vn_fase := 99.4;
   --
   if nvl(en_itemnfdi_id,0) > 0 and
      ev_atributo = 'VAFRMM' and
      nvl(vn_vafrmm, -1) >= 0 and
      vv_mensagem is null then
      --
      vn_fase := 99.5;
      --
      update itemnf_dec_impor nfdi
         set nfdi.VAFRMM = vn_vafrmm
       where nfdi.id = en_itemnfdi_id;
      --
   end if;
   --
   vn_fase := 99.6;
   --
   if nvl(en_itemnfdi_id,0) > 0 and
      ev_atributo = 'DM_TP_INTERMEDIO' and
      vn_dm_tp_intermedio in (1, 2, 3) and
      vv_mensagem is null then
      --
      vn_fase := 99.7;
      --
      update itemnf_dec_impor nfdi
         set nfdi.DM_TP_INTERMEDIO = vn_dm_tp_intermedio
       where nfdi.id = en_itemnfdi_id;
      --
   end if;
   --
   vn_fase := 99.8;
   --
   if nvl(en_itemnfdi_id,0) > 0 and
      ev_atributo = 'CNPJ' and
      vv_cnpj is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.9;
      --
      update itemnf_dec_impor nfdi
         set nfdi.CNPJ = vv_cnpj
       where nfdi.id = en_itemnfdi_id;
      --
   end if;
   --
   vn_fase := 99.10;
   --
   if nvl(en_itemnfdi_id,0) > 0 and
      ev_atributo = 'UF_TERCEIRO' and
      vv_uf_terceiro is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.11;
      --
      update itemnf_dec_impor nfdi
         set nfdi.UF_TERCEIRO = vv_uf_terceiro
       where nfdi.id = en_itemnfdi_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_INTEGR_ITEMNF_DEC_IMPOR_FF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEMNF_DEC_IMPOR_FF;

-------------------------------------------------------------------------
-- Integra as informações dos itens da nota fiscal - campos flex field --
-------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_ITEM_NOTA_FISCAL_FF ( EST_LOG_GENERICO_NF  IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                         , EN_NOTAFISCAL_ID     IN            NOTA_FISCAL.ID%TYPE
                                         , EN_ITEMNOTAFISCAL_ID IN            ITEM_NOTA_FISCAL.ID%TYPE
                                         , EV_ATRIBUTO          IN            VARCHAR2
                                         , EV_VALOR             IN            VARCHAR2 ) IS
   --
   vn_fase                number := 0;
   vn_loggenerico_id      log_generico_nf.id%type;
   vv_mensagem            varchar2(1000) := null;
   vn_dmtipocampo         ff_obj_util_integr.dm_tipo_campo%type;
   vv_nro_fci             item_nota_fiscal.nro_fci%type := null;
   vv_nro_recopi          item_nota_fiscal.nro_recopi%type := null;
   vn_percent_devol       item_nota_fiscal.percent_devol%type := null;
   vn_vl_ipi_devol        item_nota_fiscal.vl_ipi_devol%type := null;
   vv_cod_cest            item_nota_fiscal.cod_cest%type := null;
   vn_cest_id             cest.id%type;
   vv_dm_ind_esc_rel      item_nota_fiscal.dm_ind_esc_rel%type;
   vv_cnpj_fab_merc       item_nota_fiscal.cnpj_fab_merc%type;
   vv_codocorajicms_cd    cod_ocor_aj_icms.cod_aj%type;
   vn_codocorajicms_id    cod_ocor_aj_icms.id%type;
   vn_cdtpservreinf_id    item_nota_fiscal.tiposervreinf_id%type;
   vv_cdtpservreinf_cd    tipo_serv_reinf.cd%type;
   vv_dm_ind_cprb         item_nota_fiscal.dm_ind_cprb%type;
   vn_dm_mat_prop_terc    item_nota_fiscal.dm_mat_prop_terc%type;
   vv_inf_cpl_imp_item    item_nota_fiscal.inf_cpl_imp_item%type;
   vn_dm_ind_emit         nota_fiscal.dm_ind_emit%type;
   vv_cod_mod             mod_fiscal.cod_mod%TYPE;
   vn_vl_abat_nt          item_nota_fiscal.vl_abat_nt%type;
   vn_cod_inf_adic_vlr_decl cod_inf_adic_vlr_decl.id%type;-- #69348
   vv_cod_inf_adic_vlr_decl cod_inf_adic_vlr_decl.cod_inf_adic%type; --#72354
  --
BEGIN
   --
   vn_fase := 1;
   --
   gv_mensagem_log := null;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Itens da Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Itens da Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;       
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'NRO_FCI' then
         --
         vn_fase := 10;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 10.2;
               --
               if trim(ev_atributo) = 'NRO_FCI' then
                  --
                  vn_fase := 10.3;
                  --
                  vv_nro_fci := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                              , ev_atributo => trim(ev_atributo)
                                                              , ev_valor    => trim(ev_valor) );
                  --
               end if;
               --
               vn_fase := 10.4;
               --
               if pk_csf.fkg_nro_fci_valido ( ev_nro_fci => vv_nro_fci ) = false then
                  --
                  vn_fase := 10.5;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR ('||ev_valor||') informado está inválido.'
                    || ' O tamanho do número deve ter 36 caracteres, contendo caracteres/letras de "A" a "F", caracteres/números de "0" a "9", os hífens '
                    || 'nas posições corretas (9,14,19,24) e ainda, caracteres/letras maiúsculas.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 10.6;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Caractere.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         else
            --
            vn_fase := 10.7;
            --
            gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR não pode ser nulo.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      elsif trim(ev_atributo) = 'NRO_RECOPI' then
         --
         vn_fase := 11;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 11.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 11.2;
               --
               vv_nro_recopi := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                              , ev_atributo => trim(ev_atributo)
                                                              , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 11.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'PERCENT_DEVOL' then
         --
         vn_fase := 12;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 12.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 12.2;
               --
               vn_percent_devol := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
               --
               if nvl(vn_percent_devol,0) > 100 then
                  --
                  gv_mensagem_log := '"Percentual da mercadoria devolvida" não pode ser maior que 100%.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 12.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'VL_IPI_DEVOL' then
         --
         vn_fase := 13;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 13.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 13.2;
               --
               vn_vl_ipi_devol := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                              , ev_atributo => trim(ev_atributo)
                                                              , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 13.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'COD_CEST' then
         --
         vn_fase := 14;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 14.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 14.2;
               --
               vv_cod_cest := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                            , ev_atributo => trim(ev_atributo)
                                                            , ev_valor    => trim(ev_valor) );
               --
               vn_fase := 14.21;
               --
               vn_cest_id := pk_csf.fkg_id_cest_cd ( ev_cest_cd => trim(vv_cod_cest) );
               --
               if nvl(vn_cest_id,0) <= 0 then
                  --
                  gv_mensagem_log := 'Código do CEST informado ('|| vv_cod_cest ||'), esta inválido.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia
                                      );
                  --
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 14.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Caractere.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_IND_ESC_REL' then
         --
         vn_fase := 15;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 15.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 15.2;
               --
               vv_dm_ind_esc_rel := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                                        , ev_atributo => trim(ev_atributo)
                                                                        , ev_valor    => trim(ev_valor) ) );
               --
               vn_fase := 15.21;
               --
               if trim(vv_dm_ind_esc_rel) is not null 
                  and vv_dm_ind_esc_rel not in ('S', 'N') 
                  then
                  --
                  gv_mensagem_log := 'Indicador de Produção em escala relevante, conforme Cláusula 23 do Convenio ICMS 52/2017 ('|| vv_dm_ind_esc_rel ||'), esta inválido.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia
                                      );
                  --
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 15.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Caractere.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'CNPJ_FAB_MERC' then
         --
         vn_fase := 16;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 16.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 16.2;
               --
               vv_cnpj_fab_merc := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                                       , ev_atributo => trim(ev_atributo)
                                                                       , ev_valor    => trim(ev_valor) ) );
               --
               vn_fase := 16.21;
               --
               if trim(vv_cnpj_fab_merc) is not null
                  and pk_valida_docto.fkg_valida_cpf_cgc(vv_cnpj_fab_merc) = 0
                  then
                  --
                  gv_mensagem_log := 'CNPJ do Fabricante da Mercadoria ('|| vv_cnpj_fab_merc ||'), esta inválido.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia
                                      );
                  --
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 16.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Caractere.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'COD_OCOR_AJ_ICMS' then
         --
         vn_fase := 17;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 17.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               -- #72544 nova regra de validacao 
               if length(trim(ev_valor)) = 8 then
                 --
                 vn_fase := 17.2;
                 --
                 vv_codocorajicms_cd := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                                            , ev_atributo => trim(ev_atributo)
                                                                            , ev_valor    => trim(ev_valor) ) );
                 --busca da tabela nova COD_INF_ADIC_VLR_DECL 
                 vn_codocorajicms_id := pk_csf_efd.fkg_cod_inf_adic_id ( ev_cod_inf => trim(ev_valor) 
                                                                       , ed_dt_ini => pk_csf.fkg_dt_emiss_nf(en_notafiscal_id => en_notafiscal_id)
                                                                       , ed_dt_fin => pk_csf.fkg_dt_emiss_nf(en_notafiscal_id => en_notafiscal_id) );
                 --
               elsif length(trim(ev_valor)) = 10 then  
                 --
                 vn_fase := 17.3;
                 --
                 vv_codocorajicms_cd := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                                            , ev_atributo => trim(ev_atributo)
                                                                            , ev_valor    => trim(ev_valor) ) );
                 --busca da tabela original COD_OCOR_AJ_ICMS
                 vn_codocorajicms_id := pk_csf_efd.fkg_cod_ocor_aj_icms_id ( ev_cod_aj => vv_codocorajicms_cd
                                                                           , ed_dt_ini => pk_csf.fkg_dt_emiss_nf(en_notafiscal_id => en_notafiscal_id)
                                                                           , ed_dt_fin => pk_csf.fkg_dt_emiss_nf(en_notafiscal_id => en_notafiscal_id) );
                 --
               end if;
               --
               if trim(vv_codocorajicms_cd) is not null
                  and nvl(vn_codocorajicms_id,0) <= 0 then
                  --
                  vn_fase := 17.22;
                     --
                     gv_mensagem_log := 'Verifique o cadastro do "Código de Ocorrência de Ajuste de ICMS" '||
                                        ' ou do "Código de informação adicional da apuracão, valores declaratorios (registro E115 do Sped Fiscal)".'||
                                        ' O código enviado é inválido ('||vv_codocorajicms_cd||').';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => erro_de_validacao
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                     --
                  else
                     --
                     vn_fase := 17.23;
                     --
                     if nvl( pk_csf_efd.fkg_cod_ocor_aj_icms_tp_apur ( en_id  => vn_codocorajicms_id ),-1) = 0 and -- Operação Própria
                        trim( substr(vv_codocorajicms_cd, 1, 2) ) <> pk_csf.fkg_uf_notafiscalemit ( en_notafiscal_id => en_notafiscal_id ) then
                        --
                        gv_mensagem_log := 'Para nota fiscal de emissão própria a UF do Código de Benefício Fiscal tem que ser a mesma do emitente. Verifique o código enviado. (Código: '|| vv_codocorajicms_cd ||').';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => erro_de_validacao
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            );
                        --
                        -- Armazena o "loggenerico_id" na memória
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => est_log_generico_nf );
                        --
                     elsif nvl( pk_csf_efd.fkg_cod_ocor_aj_icms_tp_apur ( en_id  => vn_codocorajicms_id ),-1) <> 0 and -- Diferente de Operação Própria
                           trim( substr(vv_codocorajicms_cd, 1, 2) ) <> pk_csf.fkg_uf_notafiscalemit ( en_notafiscal_id => en_notafiscal_id ) and
                           trim( substr(vv_codocorajicms_cd, 1, 2) ) <> pk_csf.fkg_uf_notafiscaldest ( en_notafiscal_id => en_notafiscal_id ) then
                        --
                        gv_mensagem_log := 'A UF do Código de Benefício Fiscal não corresponde a UF do emitente e nem do destinatário da nota fiscal. Verifique o código enviado. (Código: '|| vv_codocorajicms_cd ||').';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => erro_de_validacao
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                           );
                        --
                        -- Armazena o "loggenerico_id" na memória
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => est_log_generico_nf );
                        --
                     end if;
                   --
                end if;
                --
            else
               --
               vn_fase := 17.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Caractere.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'CD_TP_SERV_REINF' then
         --
         vn_fase := 18;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 18.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 18.2;
               --
               vv_cdtpservreinf_cd := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                                          , ev_atributo => trim(ev_atributo)
                                                                          , ev_valor    => trim(ev_valor) ) );
               --
               vn_fase := 18.21;
               --
               vn_cdtpservreinf_id := pk_csf_reinf.fkg_tipo_serv_reinf_id ( ev_cd => vv_cdtpservreinf_cd );
               --
               if trim(vv_cdtpservreinf_cd) is not null
                  and nvl(vn_cdtpservreinf_id,0) <= 0
                  then
                  --
                  gv_mensagem_log := 'Código identificador da classificação do serviço do Reinf ('|| vv_cdtpservreinf_cd ||'), está inválido.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia
                                      );
                  --
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 18.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Caractere.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_IND_CPRB' then
         --
         vn_fase := 19;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 19.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 19.2;
               --
               vv_dm_ind_cprb := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                                     , ev_atributo => trim(ev_atributo)
                                                                     , ev_valor    => trim(ev_valor) ) );
               --
               vn_fase := 19.21;
               --
               if trim(vv_dm_ind_cprb) is not null
                  and vv_dm_ind_cprb not in ('0', '1')
                  then
                  --
                  gv_mensagem_log := 'Indicador de CPRB ('|| vv_dm_ind_cprb ||'), está inválido.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia
                                      );
                  --
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 19.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Caractere.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_MAT_PROP_TERC' then
         --
         vn_fase := 20;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 20.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 20.2;
               --
               vn_dm_mat_prop_terc := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                                          , ev_atributo => trim(ev_atributo)
                                                                          , ev_valor    => trim(ev_valor) ) );
               --
               vn_fase := 20.21;
               --
               if trim(vn_dm_mat_prop_terc) is not null
                  and vn_dm_mat_prop_terc not in (0, 1)
                  then
                  --
                  gv_mensagem_log := 'Indicador do Material utilizado ('|| vn_dm_mat_prop_terc ||'), está inválido. Valores válidos: 0-Próprio, 1-Terceiro.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia
                                      );
                  --
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 20.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Numérico.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'INF_CPL_IMP_ITEM' then
         --
         vn_fase := 21;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 21.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --          			   
               vv_inf_cpl_imp_item := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                                          , ev_atributo => trim(ev_atributo)
                                                                          , ev_valor    => trim(ev_valor) ) );
               --			   
            else
               --
               vn_fase := 21.2;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Caractere.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'VL_ABAT_NT' then
         --
         vn_fase := 22;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 22.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_vl_abat_nt := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                                    , ev_atributo => trim(ev_atributo)
                                                                    , ev_valor    => trim(ev_valor) ) );
               --			   
            else
               --
               vn_fase := 22.2;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Caractere.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
         -- #69348 Inclusao atributo novo
       elsif trim(ev_atributo) = 'COD_INF_ADIC_VLR_DECL' then
         --
         vn_fase := 23;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 23.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 23.2;
               --
               -- #72354 incluida validacao de caracter
               vv_cod_inf_adic_vlr_decl := trim(pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_ITEM_NOTA_FISCAL_FF'
                                                                               , ev_atributo => trim(ev_atributo)
                                                                               , ev_valor    => trim(ev_valor) ) );
               
               --
               --recupera o id do item
               vn_cod_inf_adic_vlr_decl := pk_csf_efd.fkg_cod_inf_adic_id ( ev_cod_inf => trim(ev_valor) 
                                                                          , ed_dt_ini => pk_csf.fkg_dt_emiss_nf(en_notafiscal_id => en_notafiscal_id)
                                                                          , ed_dt_fin => pk_csf.fkg_dt_emiss_nf(en_notafiscal_id => en_notafiscal_id) );
               --valida se encontrou o id
               if trim(vv_cod_inf_adic_vlr_decl) is not null
                 and nvl(vn_cod_inf_adic_vlr_decl,0) <= 0  then
                 --
                 gv_mensagem_log := 'Valor inválido do Código de informação adicional da apuracão, valores declaratorios (registro E115 do Sped Fiscal) - "'||
                                      vv_cod_inf_adic_vlr_decl ||'" . Verifique o cadastro deste codigo na tabela COD_INF_ADIC_VLR_DECL.';
                 --
                 vn_loggenerico_id := null;
                 --
                 pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => erro_de_validacao
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia
                                     );
                 --
                 -- Armazena o "loggenerico_id" na memória
                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                        , est_log_generico_nf => est_log_generico_nf );
                 --
               end if;
            else
               --
               vn_fase := 23.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser Caracter.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         -- 
      else
         --
         vn_fase := 99;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 16;
   --
   if nvl(en_itemnotafiscal_id,0) = 0 then
      --
      vn_fase := 17;
      --
      gv_mensagem_log := 'Identificador do item da nota fiscal não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf
         set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_itemnotafiscal_id,0) > 0 and
      trim(ev_atributo) = 'NRO_FCI' and
      vv_nro_fci is not null and
      gv_mensagem_log is null then
      --
      vn_fase := 99.3;
      --
      update item_nota_fiscal i
         set i.nro_fci = vv_nro_fci
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   vn_fase := 99.4;
   --
   if nvl(en_itemnotafiscal_id,0) > 0 and
      trim(ev_atributo) = 'NRO_RECOPI' and
      vv_nro_recopi is not null and
      gv_mensagem_log is null then
      --
      vn_fase := 99.5;
      --
      update item_nota_fiscal i
         set i.nro_recopi = vv_nro_recopi
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   vn_fase := 99.6;
   --
   if nvl(en_itemnotafiscal_id,0) > 0 and
      trim(ev_atributo) = 'PERCENT_DEVOL' and
      nvl(vn_percent_devol, -1) > 0 and
      gv_mensagem_log is null then
      --
      vn_fase := 99.7;
      --
      update item_nota_fiscal i
         set i.percent_devol = vn_percent_devol
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   vn_fase := 99.8;
   --
   if nvl(en_itemnotafiscal_id,0) > 0 and
      trim(ev_atributo) = 'VL_IPI_DEVOL' and
      nvl(vn_vl_ipi_devol, -1) > 0 and
      gv_mensagem_log is null then
      --
      vn_fase := 99.9;
      --
      update item_nota_fiscal i
         set i.vl_ipi_devol = vn_vl_ipi_devol
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   vn_fase := 99.10;
   --
   if nvl(en_itemnotafiscal_id,0) > 0 and
      trim(ev_atributo) = 'COD_CEST' and
      vv_cod_cest is not null and
      gv_mensagem_log is null then
      --
      vn_fase := 99.11;
      --
      update item_nota_fiscal i
         set i.cod_cest = vv_cod_cest
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   vn_fase := 99.12;
   --
   if vv_dm_ind_esc_rel is not null
      and trim(ev_atributo) = 'DM_IND_ESC_REL'
      and vv_dm_ind_esc_rel in ('S', 'N')
      and gv_mensagem_log is null then
      --
      vn_fase := 99.13;
      --
      update item_nota_fiscal i
         set i.dm_ind_esc_rel = vv_dm_ind_esc_rel
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   vn_fase := 99.14;
   --
   if vv_cnpj_fab_merc is not null
      and trim(ev_atributo) = 'CNPJ_FAB_MERC'
      and gv_mensagem_log is null then
      --
      vn_fase := 99.15;
      --
      update item_nota_fiscal i
         set i.cnpj_fab_merc = vv_cnpj_fab_merc
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   vn_fase := 99.16;
   --
   if nvl(vn_codocorajicms_id,0) > 0
      and trim(ev_atributo) = 'COD_OCOR_AJ_ICMS'
      and gv_mensagem_log is null then
      --
      -- #72544 se tiver 8 carcteres 
      if length(trim(ev_valor)) = 8 then      
        --
        vn_fase := 99.17;
        -- grava na coluna nova 
        update item_nota_fiscal i
           set i.codinfadicvlrdecl_id = vn_codocorajicms_id
         where i.id = en_itemnotafiscal_id;
        --
      elsif length(trim(ev_valor)) = 10 then
        -- senao grava ana antiga 
        vn_fase := 99.18;
        --
        update item_nota_fiscal i
           set i.codocorajicms_id = vn_codocorajicms_id
         where i.id = en_itemnotafiscal_id;
        --
      end if;
      --
   end if;
   --
   vn_fase := 99.18;
   --
   if nvl(vn_cdtpservreinf_id,0) > 0
      and trim(ev_atributo) = 'CD_TP_SERV_REINF'
      and gv_mensagem_log is null then
      --
      vn_fase := 99.19;
      --
      update item_nota_fiscal i
         set i.tiposervreinf_id = vn_cdtpservreinf_id
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   vn_fase := 99.20;
   --
   if trim(vv_dm_ind_cprb) is not null
      and trim(ev_atributo) = 'DM_IND_CPRB'
      and vv_dm_ind_cprb in ('0', '1')
      and gv_mensagem_log is null then
      --
      vn_fase := 99.21;
      --
      update item_nota_fiscal i
         set i.dm_ind_cprb = vv_dm_ind_cprb
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   vn_fase := 99.22;
   --
   if vn_dm_mat_prop_terc is not null
      and trim(ev_atributo) = 'DM_MAT_PROP_TERC'
      and vn_dm_mat_prop_terc in (0, 1)
      and gv_mensagem_log is null then
      --
      vn_fase := 99.23;
      --
      update item_nota_fiscal i
         set i.dm_mat_prop_terc = vn_dm_mat_prop_terc
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   --
   vn_fase := 99.24;
   --
   if vv_inf_cpl_imp_item is not null
      and trim(ev_atributo) = 'INF_CPL_IMP_ITEM'
      and gv_mensagem_log is null then
      --
      vn_fase := 99.25;
      --
	  begin
        select nf.dm_ind_emit
             , mf.cod_mod
          into vn_dm_ind_emit
             , vv_cod_mod   	 
          from nota_fiscal nf
             , mod_fiscal mf
         where nf.id = en_notafiscal_id
           and mf.id = nf.modfiscal_id;    
      exception
         when others then
           vn_dm_ind_emit := null;		 
           vv_cod_mod     := null;	  
      end;	  
      --
      vn_fase := 99.26;	  
      --
      if nvl(vn_dm_ind_emit,-1) = 0    and    -- Emissão propria
         vv_cod_mod             = '55' then   -- Modelo
         --		 
         update item_nota_fiscal i
            set i.inf_cpl_imp_item = vv_inf_cpl_imp_item
          where i.id = en_itemnotafiscal_id;
         --		  
      end if;		  
      --
   end if;
   --   
   vn_fase := 99.27;
   --
   if vn_vl_abat_nt is not null
      and trim(ev_atributo) = 'VL_ABAT_NT'
      and gv_mensagem_log is null then      
       --
       update item_nota_fiscal i
          set i.vl_abat_nt = vn_vl_abat_nt
        where i.id = en_itemnotafiscal_id;
       --
   end if;
   --
   vn_fase := 99.28;
   --
   -- #69348 Inclusao validacao novo atributo 
   -- #72354 alteracao da variavel de vn_cod_inf_adic_vlr_decl para vv_cod_inf_adic_vlr_decl
   --
   if nvl(en_itemnotafiscal_id,0) > 0 and
      trim(ev_atributo) = 'COD_INF_ADIC_VLR_DECL' and
      nvl(vn_cod_inf_adic_vlr_decl,0) > 0 and
      gv_mensagem_log is null then
      --
      vn_fase := 99.29;
      --
      update item_nota_fiscal i
         set i.codinfadicvlrdecl_id = vn_cod_inf_adic_vlr_decl
       where i.id = en_itemnotafiscal_id;
      --
   end if;
   --
   vn_fase := 99.30;
   --
   commit;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_item_nota_fiscal_ff fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEM_NOTA_FISCAL_FF;

-----------------------------------------------------
-- Integra as informações dos itens da nota fiscal --
-----------------------------------------------------
PROCEDURE PKB_INTEGR_ITEM_NOTA_FISCAL ( EST_LOG_GENERICO_NF          IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                      , EST_ROW_ITEM_NOTA_FISCAL  IN OUT NOCOPY  ITEM_NOTA_FISCAL%ROWTYPE
                                      , EN_MULTORG_ID             IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase              number := 0;
   vn_loggenerico_id    log_generico_nf.id%type;
   vn_dm_valid_unid_med empresa.dm_valid_unid_med%type := null;
   vn_unidade_id_com    Unidade.id%TYPE;
   vn_unidade_id_trib   Unidade.id%TYPE;
   vn_dm_integr_item    empresa.dm_integr_item%type := null;
   vn_empresa_id        empresa.id%type;
   vv_ncmitemnf         item_nota_fiscal.cod_ncm%type;
   vv_codncm            ncm.cod_ncm%type;
   vn_ncmemp            empresa.dm_val_ncm_item%type;
   vn_ncm_id            ncm.id%type;
   vn_dm_util_unidsefaz_conf_ncm empresa.dm_util_unidsefaz_conf_ncm%type;
   vv_sigla_unid_sefaz  unidade_sefaz.sigla_unid%type;
   --
   vv_cd_sitdocto       sit_docto.cd%type; --#70852
   vv_vlr_parametro     csf_own.param_geral_sistema.vlr_param%type; --Variável que recebe o valor do parâmetro #72372
   --
BEGIN
   --
   vn_fase := 1;
   --
   gv_cabec_log_item := 'Nro: ' || est_row_Item_Nota_Fiscal.nro_item
                        || ' Item: ' || est_row_Item_Nota_Fiscal.cod_item
                        || ' - ' || est_row_Item_Nota_Fiscal.descr_item || chr(10);
   --
   if nvl(est_row_Item_Nota_Fiscal.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para registro dos Produtos e Serviços.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 1.2;
   vn_empresa_id := pk_csf.fkg_empresa_notafiscal ( en_notafiscal_id => est_row_Item_Nota_Fiscal.notafiscal_id );
   --
   vn_fase := 1.3;
   vn_dm_valid_unid_med := pk_csf.fkg_empresa_valid_unid_med ( en_empresa_id => vn_empresa_id );
   --
   vn_fase := 1.4;
   vn_dm_util_unidsefaz_conf_ncm := pk_csf.fkg_util_unidsefaz_conf_ncm ( en_empresa_id => vn_empresa_id );
   --
   vn_fase := 2;
   --
   -- Valida campo dm_ind_mov
   if est_row_Item_Nota_Fiscal.dm_ind_mov not in (0, 1) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Indicador Movimentação física do ITEM/PRODUTO da Nota Fiscal" ('||est_row_Item_Nota_Fiscal.dm_ind_mov||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   -- Validar o campo dm_mod_base_calc
   if nvl(est_row_Item_Nota_Fiscal.dm_mod_base_calc,0) not in (0, 1, 2, 3) then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Modalidade de determinação da BC do ICMS ITEM/PRODUTO da Nota Fiscal" ('||est_row_Item_Nota_Fiscal.dm_mod_base_calc||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Valida a informação do campo dm_mod_base_calc_st
   if est_row_Item_Nota_Fiscal.dm_mod_base_calc_st not in (0, 1, 2, 3, 4, 5, 6) then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Modalidade de determinação da BC do ICMS ST ITEM/PRODUTO da Nota Fiscal" ('||
                         est_row_Item_Nota_Fiscal.dm_mod_base_calc_st||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   -- Valida o campo nro_item
   if nvl(est_row_Item_Nota_Fiscal.nro_item,0) <= 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Número do ITEM da Nota Fiscal" ('||nvl(est_row_Item_Nota_Fiscal.nro_item,0)||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   est_row_Item_Nota_Fiscal.cod_item := upper(est_row_Item_Nota_Fiscal.cod_item);
   -- Valida o campo cod_item
   if trim( est_row_Item_Nota_Fiscal.cod_item ) is null then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Código do produto ou serviço da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 6.2;
      -- com o "código do item" recupera do item_id
      est_row_Item_Nota_Fiscal.item_id := pk_csf.fkg_Item_id_conf_empr ( en_empresa_id  => pk_csf.fkg_empresa_notafiscal ( en_notafiscal_id => est_row_Item_Nota_Fiscal.notafiscal_id )
                                                                       , ev_cod_item    => trim(est_row_Item_Nota_Fiscal.cod_item) );
      --
   end if;
   --
   vn_fase := 6.3;
   -- Valida o EAN
   if length( trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.CEAN ) ) ) not in (0, 8, 12, 13, 14) then
      --
      vn_fase := 6.4;
      --
      gv_mensagem_log := '"GTIN (Global Trade Item Number) do produto, antigo código EAN ou código de barras" inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6.5;
   -- Valida o EAN
   if length( trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.CEAN_TRIB ) ) ) not in (0, 8, 12, 13, 14) then
      --
      vn_fase := 6.6;
      --
      gv_mensagem_log := '"GTIN (Global Trade Item Number) da unidade tributável, antigo código EAN ou código de barras" inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6.7;
   --
   if nvl(gt_row_nota_fiscal.dm_ind_emit,0) = 0 then
     --
     if nvl(gt_row_nota_fiscal.dm_legado,0) = 0 then /*dm_legado: 0 - Não é Legado*/
       --
        vn_fase := 6.8;
        --       
       if est_row_Item_Nota_Fiscal.CEAN is null and  est_row_Item_Nota_Fiscal.CEAN_TRIB is null then
        --
        vn_fase := 6.9;
        --
        gv_mensagem_log := '"GTIN (Global Trade Item Number) do produto, antigo código EAN ou código de barras" e "GTIN (Global Trade Item Number) da unidade tributável, antigo código EAN ou código de barras" não foram informados. Estes dois campos devem ser preenchidos com "SEM GTIN".';
        --
        vn_loggenerico_id := null;
        --
        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                            , ev_resumo           => gv_mensagem_log
                            , en_tipo_log         => erro_de_validacao
                            , en_referencia_id    => gn_referencia_id
                            , ev_obj_referencia   => gv_obj_referencia );
        -- Armazena o "loggenerico_id" na memória
        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                               , est_log_generico_nf => est_log_generico_nf );
        --
       end if;
       --
     end if;
     --     
   end if;
   --
   vn_fase := 7;
   --
   -- Valida se o campo item_id é válido (Produto/Serviço)
   if nvl(est_row_Item_Nota_Fiscal.item_id,0) > 0
      and pk_csf.fkg_item_id_valido ( en_item_id => est_row_Item_Nota_Fiscal.item_id ) = false then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Código do produto ou serviço da Nota Fiscal" inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   --
   -- Valida o campo descr_item
   if trim ( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.descr_item,0,1,3,1,1,1 ) ) is null then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Descrição do produto ou serviço da Nota Fiscal" deve ser informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   -- Valida informação do campo cod_ncm se não for nulo e somente Nfe de emissão própria
   if nvl(gt_row_Nota_Fiscal.dm_ind_emit,0) = 0 then
      --
      vn_fase := 9.1;
      --
      if trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.cod_ncm ) ) is null
         and nvl(est_row_Item_Nota_Fiscal.genero,0) > 0
         then
         --
         est_row_Item_Nota_Fiscal.cod_ncm := lpad(est_row_Item_Nota_Fiscal.genero, 2, '0');
         --
      end if;
      --
      vn_fase := 9.2;
      --
      if trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.cod_ncm ) ) is null then
         --
         vn_fase := 9.3;
         --
         gv_mensagem_log := '"Código NCM do produto ou serviço da Nota Fiscal" deve ser informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      else
         --
         vn_fase := 9.4;
         -- Verifica se o NCM tem menos que 8 caracteres, não é analitico
         if length( trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.cod_ncm ) ) ) <> 8
            and length( trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.cod_ncm ) ) ) <> 2
            then
            --
            vn_fase := 9.5;
            --
            gv_mensagem_log := '"Código NCM do produto ou serviço da Nota Fiscal" está inválido está diferente de 8 (oito) e 2 (dois) caracteres.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
      if trim(pk_csf.fkg_converte(est_row_Item_Nota_Fiscal.cod_ncm)) is not null then
         --
         if nvl(est_row_Item_Nota_Fiscal.item_id, 0) > 0 then
            --
            vn_fase := 9.6;
            --
            vv_ncmitemnf := trim(pk_csf.fkg_converte(est_row_Item_Nota_Fiscal.cod_ncm));
            --
            vn_fase := 9.7;
            --
            vn_ncmemp := pk_csf.fkg_dmvalncm_empid(en_empresa_id => pk_csf.fkg_empresa_notafiscal(en_notafiscal_id => est_row_Item_Nota_Fiscal.notafiscal_id));
            --
            vn_fase := 9.8;
            --
            vv_codncm := pk_csf.fkg_cod_ncm_id(en_ncm_id => pk_csf.fkg_ncm_id_item(en_item_id => est_row_Item_Nota_Fiscal.item_id));
            --
            vn_fase := 9.9;
            --
            if trim(vv_codncm) is not null then
               --
               if trim(vv_codncm) <> trim(vv_ncmitemnf) then
                  --
                  if nvl(vn_ncmemp, -1) = 0 then
                     --
                     vn_fase := 9.10;
                     --
                     gv_mensagem_log := 'Codigo NCM do item da Nota Fiscal ( '|| vv_ncmitemnf ||' ) é diferente do Codigo NCM do cadastro do Produto ( '|| vv_codncm ||' ) .';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem          => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo            => gv_mensagem_log
                                         , en_tipo_log          => INFORMACAO
                                         , en_referencia_id     => gn_referencia_id
                                         , ev_obj_referencia    => gv_obj_referencia );
                  else
                     --
                     vn_fase := 9.11;
                     --
                     gv_mensagem_log := 'Codigo NCM do item da Nota Fiscal ( '|| vv_ncmitemnf ||' ) é diferente do Codigo NCM do cadastro do Produto ( '|| vv_codncm ||' ) .';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem          => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo            => gv_mensagem_log
                                         , en_tipo_log          => erro_de_validacao
                                         , en_referencia_id     => gn_referencia_id
                                         , ev_obj_referencia    => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf    => est_log_generico_nf );
                     --
                  end if;
                  --
               end if;
               --
            end if;
            --
         end if;
         --
      end if;
      --
      vn_fase := 10;
      --
      if trim(est_row_Item_Nota_Fiscal.cod_ext_ipi) = '0' then
         --
         est_row_Item_Nota_Fiscal.cod_ext_ipi := null;
         --
      end if;
      --
      vn_fase := 11;
      -- Valida informação do campo cod_ext_ipi
      if est_row_Item_Nota_Fiscal.cod_ext_ipi is not null then
         --
         vn_fase := 11.1;
         --
         if length(est_row_Item_Nota_Fiscal.cod_ext_ipi) not in (2,3) then
            --
            vn_fase := 11.2;
            --
            gv_mensagem_log := '"EX_TIPI do produto ou serviço da Nota Fiscal" ('||
                               est_row_Item_Nota_Fiscal.cod_ext_ipi||') deve ter o tamanho de 2 ou 3 caracteres.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 12;
   --
   -- Valida informação do campo cfop
   est_row_Item_Nota_Fiscal.cfop_id := pk_csf.fkg_cfop_id ( en_cd => est_row_Item_Nota_Fiscal.cfop );
   --
   vn_fase := 12.1;
   --
   if nvl(est_row_Item_Nota_Fiscal.cfop_id,0) = 0 then
      --
      vn_fase := 12.2;
      --
      gv_mensagem_log := '"CFOP do produto ou serviço da Nota Fiscal" está inválido ('||est_row_Item_Nota_Fiscal.cfop||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   --
/*
   if nvl(est_row_Item_Nota_Fiscal.cfop_id,0) > 0 and -- Foi informado CFOP válida
      est_row_Item_Nota_Fiscal.cfop in (1411, 1604, 5601, 5602, 5206, 6206) and
      trim(est_row_Item_Nota_Fiscal.cod_ncm) = '00000000' then
      -- Nota Fiscal de transferência de saldo não possui Item com Código NCM, e o mesmo deve ser informado com 8 zeros (00000000)
      vn_fase := 13.1;
      --
   else
      --
      vn_fase := 13.3;
      --
      if nvl( pk_csf.fkg_Ncm_id ( ev_cod_ncm => trim( est_row_Item_Nota_Fiscal.cod_ncm ) ), 0) = 0 then
         --
         vn_fase := 13.4;
         --
         gv_mensagem_log := '"Código NCM do produto ou serviço da Nota Fiscal" ('||est_row_Item_Nota_Fiscal.cod_ncm||'), cfop ('
                            || est_row_Item_Nota_Fiscal.cfop || ') está inválido. Caso a CFOP seja '||
                            '(1411, 1604, 5601, 5602, 5206, 6206), informar "00000000" para o NCM (8 zeros).';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
*/
   --
   vn_fase := 14;
   -- Valida informação do campo orig
   if est_row_Item_Nota_Fiscal.orig not in (0, 1, 2, 3, 4, 5, 6, 7, 8) then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := '"Origem da mercadoria da Nota Fiscal" ('||est_row_Item_Nota_Fiscal.orig||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 15;
   --
   -- Valida informação do campo cd_lista_serv
   if nvl(est_row_Item_Nota_Fiscal.cd_lista_serv,0) > 0 then
      --
      vn_fase := 15.1;
      --
      est_row_Item_Nota_Fiscal.cd_lista_serv := replace(est_row_Item_Nota_Fiscal.cd_lista_serv, '.', '');
      --
      if nvl(pk_csf.fkg_Tipo_Servico_id ( ev_cod_lst => est_row_Item_Nota_Fiscal.cd_lista_serv ),0) = 0 then
         --
         vn_fase := 15.2;
         --
         gv_mensagem_log := '"Código do Serviço do Item da Nota Fiscal" ('||est_row_Item_Nota_Fiscal.cd_lista_serv||') está inválido.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   ELSE
      --
      est_row_Item_Nota_Fiscal.cd_lista_serv := null;
      --
   end if;
   --
   vn_fase := 16;
   -- Valida a informação do campo cidade_ibge "Código do município de ocorrência do fato gerador do ISSQN"
   if nvl(est_row_Item_Nota_Fiscal.cidade_ibge,0) > 0 then
      --
      vn_fase := 16.1;
      --
      if pk_csf.fkg_ibge_cidade( ev_ibge_cidade => est_row_Item_Nota_Fiscal.cidade_ibge ) = false then
         --
         vn_fase := 16.2;
         --
         gv_mensagem_log := '"Código do município de ocorrência do fato gerador do ISSQN" ('||est_row_Item_Nota_Fiscal.cidade_ibge||') está inválido.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 17;
   -- Valida o código do Selo do IPI
   if est_row_Item_Nota_Fiscal.cod_selo_ipi is not null then
      --
      vn_fase := 17.1;
      --
      est_row_Item_Nota_Fiscal.selocontripi_id := pk_csf.fkg_Selo_Contr_IPI_id ( est_row_Item_Nota_Fiscal.cod_selo_ipi );
      --
      vn_fase := 17.2;
      --
      if nvl(est_row_Item_Nota_Fiscal.selocontripi_id,0) = 0 then
            --
         vn_fase := 17.3;
         --
         gv_mensagem_log := '"Código do Selo do IPI" ('||est_row_Item_Nota_Fiscal.cod_selo_ipi||') está inválido.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 18;
   -- Código de Enquadramento Legal do IPI
   if trim ( est_row_Item_Nota_Fiscal.cod_enq_ipi ) is null then
      --
      est_row_Item_Nota_Fiscal.cod_enq_ipi := '999'; -- informar 999 enquanto a tabela não for criada, pela RFB
      --
   end if;
   --
   vn_fase := 19;
   --
   -- Valida informação de Quantidade Comercial
   if nvl(est_row_Item_Nota_Fiscal.qtde_Comerc,0) < 0 then
      --
      vn_fase := 19.1;
      --
      gv_mensagem_log := '"Quantidade Comercial" ('||est_row_Item_Nota_Fiscal.qtde_Comerc||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 20;
   -- Valida informação de Quantidade Comercial no caso de "Terceiro" não pode ser zero
   if nvl(est_row_Item_Nota_Fiscal.qtde_Comerc,0) <= 0
      and gt_row_nota_fiscal.dm_ind_emit          = 1   -- terceiros
      and gt_row_nota_fiscal.dm_fin_nfe           <> 02 -- NF-e complementar 
      and est_row_Item_Nota_Fiscal.cfop  not in ( '1600', '1601', '1602'
                                               , '1603', '1605', '2600'
                                               , '2603', '5600', '5601'
                                               , '5602', '5603', '5605'
                                               , '5606', '6600', '6603' )
      then
      --
      vn_fase := 20.1;
      --
      gv_mensagem_log := 'Para NFe de terceiro, que não é de transferência de saldo, a "Quantidade Comercial" ('||est_row_Item_Nota_Fiscal.qtde_Comerc||') não pode ser negativa ou zero(0).';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 21;
   --
   -- Valida informação de Valor Unitário de comercialização
   if nvl(est_row_Item_Nota_Fiscal.vl_Unit_Comerc,0) < 0 then
      --
      vn_fase := 21.1;
      --
      gv_mensagem_log := '"Valor Unitário de comercialização" ('||est_row_Item_Nota_Fiscal.vl_Unit_Comerc||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 22;
   --
   -- Valida a informação de Valor Total Bruto dos Produtos ou Serviços
   if nvl(est_row_Item_Nota_Fiscal.vl_Item_Bruto,0) < 0 then
      --
      vn_fase := 22.1;
      --
      gv_mensagem_log := '"Valor Total Bruto dos Produtos ou Serviços" ('||est_row_Item_Nota_Fiscal.vl_Item_Bruto||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 23;
   --
   -- Valida a informação de Quantidade Tributável no caso de "Terceiro" não pode ser zero
   if nvl(est_row_Item_Nota_Fiscal.qtde_Trib,0) <= 0
      and gt_row_nota_fiscal.dm_ind_emit        = 1 --Terceiros
      and gt_row_nota_fiscal.dm_fin_nfe         <> 02 -- NF-e complementar
      and est_row_Item_Nota_Fiscal.cfop not in ( '1600', '1601', '1602'
                                               , '1603', '1605', '2600'
                                               , '2603', '5600', '5601'
                                               , '5602', '5603', '5605'
                                               , '5606', '6600', '6603' )
      then
      --
      vn_fase := 23.1;
      --
      gv_mensagem_log := 'Para NFe de terceiro, que não é de transferência de saldo, a "Quantidade Tributável" ('||est_row_Item_Nota_Fiscal.qtde_Trib||') não pode ser negativa ou zero(0).';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 24;
   -- Valida a informação de Quantidade Tributável
   if nvl(est_row_Item_Nota_Fiscal.qtde_Trib,0) < 0 then
      --
      vn_fase := 24.1;
      --
      gv_mensagem_log := '"Quantidade Tributável" ('||est_row_Item_Nota_Fiscal.qtde_Trib||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 25;
   -- Valida a informação de Valor Unitário de tributação
   if nvl(est_row_Item_Nota_Fiscal.vl_Unit_Trib,0) < 0 then
      --
      vn_fase := 25.1;
      --
      gv_mensagem_log := '"Valor Unitário de tributação" ('||est_row_Item_Nota_Fiscal.vl_Unit_Trib||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 26;
   -- Valida a informação de Valor Total do Frete
   if nvl(est_row_Item_Nota_Fiscal.vl_Frete,0) < 0 then
      --
      vn_fase := 26.1;
      --
      gv_mensagem_log := '"Valor Total do Frete" ('||est_row_Item_Nota_Fiscal.vl_Frete||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 27;
   -- Valida a informação de Valor Total do Seguro
   if nvl(est_row_Item_Nota_Fiscal.vl_Seguro,0) < 0 then
      --
      vn_fase := 27.1;
      --
      gv_mensagem_log := '"Valor Total do Seguro" ('||est_row_Item_Nota_Fiscal.vl_Seguro||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 28;
   --
   -- Valida a informação de Valor do Desconto
   if nvl(est_row_Item_Nota_Fiscal.vl_Desc,0) < 0 then
      --
      vn_fase := 28.1;
      --
      gv_mensagem_log := '"Valor do Desconto" ('||est_row_Item_Nota_Fiscal.vl_Desc||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 29;
   -- Valida se a informação de Valor Total Bruto dos Produtos ou Serviços é maior ou igual a informação de Valor do Desconto
   if nvl(est_row_item_nota_fiscal.vl_item_bruto,0) < nvl(est_row_item_nota_fiscal.vl_desc,0) then
      --
      vn_fase := 29.1;
      --
      gv_mensagem_log := '"Valor Total Bruto dos Produtos ou Serviços" ('||est_row_item_nota_fiscal.vl_item_bruto||') não pode ser menor que o "Valor do '||
                         'Desconto" ('||est_row_item_nota_fiscal.vl_desc||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   --#70852 
   vn_fase := 29.2;
   --
   -- recupera o sitdoc da nf
   begin    
      select pk_csf.fkg_Sit_Docto_cd(nf.sitdocto_id)   
        into vv_cd_sitdocto
        from nota_fiscal nf
       where nf.id =  est_row_item_nota_fiscal.notafiscal_id ;
   exception
     when others then
       vv_cd_sitdocto := null; 
   end;
   --
	vn_fase := 29.21;
   --
   -- Recupera valor do parâmetro para a empresa. #72372
   begin
      select prm.vlr_param
             into vv_vlr_parametro
        from csf_own.param_geral_sistema prm
       where prm.empresa_id =  vn_empresa_id
         and prm.modulo_id = (select id
                                from csf_own.modulo_sistema
                               where UPPER(cod_modulo) = UPPER('EMISSAO_DOC'))
         and prm.grupo_id  = (select id
                                from csf_own.grupo_sistema
                               where UPPER(cod_grupo) = UPPER('VALIDACAO')
                                 and modulo_id = (select id
                                                    from csf_own.modulo_sistema
                                                   where UPPER(cod_modulo) = UPPER('EMISSAO_DOC')))
         and UPPER(prm.param_name) = UPPER('VALIDA_UNIT_X_QTD');
   exception
     when others then
       vv_vlr_parametro:= null;
   end;
   --
   vn_fase := 29.3;
   --
   -- valida somente se a NF nao for complementar .
   if (vv_cd_sitdocto is not null and vv_cd_sitdocto not in ('06','07','08'))  then
     --
     vn_fase := 29.4;
     --
	 -- Verifica se o parâmetro está habilitado para a empresa, para validação o parâmetro precisa ser '1'. #72372
     if (vv_vlr_parametro is not null and vv_vlr_parametro = '1') then
        --
        vn_fase := 29.41;
        --
        -- Valida a informação de Valor Total Bruto dos Produtos ou Serviços
        if (nvl(est_row_Item_Nota_Fiscal.vl_Item_Bruto,0) NOT BETWEEN ((nvl(est_row_Item_Nota_Fiscal.qtde_Comerc,0) * nvl(est_row_Item_Nota_Fiscal.vl_Unit_Comerc,0)) - .01)
                                                                  AND ((nvl(est_row_Item_Nota_Fiscal.qtde_Comerc,0) * nvl(est_row_Item_Nota_Fiscal.vl_Unit_Comerc,0)) + .01)
            ) then
            --
            vn_fase := 29.5;
            --
            gv_mensagem_log := '"Valor Total Bruto dos Produtos ou Serviços" ('||est_row_Item_Nota_Fiscal.vl_Item_Bruto||
                                 ') não corresponde a (qtde_Comerc('||est_row_Item_Nota_Fiscal.qtde_Comerc||
                                 ') * vl_Unit_Comerc('||est_row_Item_Nota_Fiscal.vl_Unit_Comerc||
                                 ')). Ajuste o Valor Total Bruto.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao --#74238
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
	    end if;
        --
     end if;
     --
   end if;
   --
   vn_fase := 30;
   --
   -- Valida a informação de Valor das despesas aduaneiras
   if nvl(est_row_Item_Nota_Fiscal.vl_desp_adu,0) < 0 then
      --
      vn_fase := 30.1;
      --
      gv_mensagem_log := '"Valor das despesas aduaneiras" ('||est_row_Item_Nota_Fiscal.vl_desp_adu||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_Item_Nota_Fiscal.vl_desp_adu,0) <= 0 then
      est_row_Item_Nota_Fiscal.vl_desp_adu := 0;
   end if;
   --
   vn_fase := 31;
   -- Valida a informação de Valor do Imposto sobre Operações Financeiras
   if nvl(est_row_Item_Nota_Fiscal.vl_iof,0) < 0 then
      --
      vn_fase := 31.1;
      --
      gv_mensagem_log := '"Valor do Imposto sobre Operações Financeiras" ('||est_row_Item_Nota_Fiscal.vl_iof||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_Item_Nota_Fiscal.vl_iof,0) <= 0 then
      est_row_Item_Nota_Fiscal.vl_iof := 0;
   end if;
   --
   vn_fase := 32;
   --
   -- Valida informação do Indicador de Apuração do IPI
   --
   if nvl(est_row_Item_Nota_Fiscal.dm_ind_apur_ipi,0) > -1
      and est_row_Item_Nota_Fiscal.dm_ind_apur_ipi not in (0, 1) then
         --
      vn_fase := 32.1;
      --
      gv_mensagem_log := '"Indicador de Apuração do IPI" ('||est_row_Item_Nota_Fiscal.dm_ind_apur_ipi||') do Item da Nota Fiscal está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 33;
   --
   est_row_Item_Nota_Fiscal.unid_com := trim(pk_csf.fkg_converte(est_row_Item_Nota_Fiscal.unid_com));
   --
   -- Valida informação da Unidade Comercial
   if trim(est_row_Item_Nota_Fiscal.unid_com) is null then
      --
      vn_fase := 33.1;
      --
      gv_mensagem_log := '"Unidade Comercial" não foi informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 34;
   --
   est_row_Item_Nota_Fiscal.unid_trib := trim(pk_csf.fkg_converte(est_row_Item_Nota_Fiscal.unid_trib));
   --
   -- Valida informação da Unidade Comercial
   if trim(est_row_Item_Nota_Fiscal.unid_trib) is null then
      --
      vn_fase := 34.1;
      --
      gv_mensagem_log := '"Unidade Tributável" não foi informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 34.2;
   --
   if nvl(vn_dm_util_unidsefaz_conf_ncm,0) = 1 then -- Utiliza Unidade de Medida da Sefaz Conforme NCM - Sim
      --
      vn_fase := 34.3;
      --
      vn_ncm_id := pk_csf.fkg_Ncm_id ( ev_cod_ncm => est_row_Item_Nota_Fiscal.cod_ncm );
      --
      vn_fase := 34.4;
      if nvl(vn_ncm_id,0) > 0 then
         --
         vn_fase := 34.5;
         --
         vv_sigla_unid_sefaz := pk_csf.fkg_unidsefaz_conf_ncm ( en_ncm_id     => vn_ncm_id
                                                              , ed_dt_ref     => gt_row_nota_fiscal.dt_emiss
                                                              );
         --
         vn_fase := 34.6;
         --
         if trim(vv_sigla_unid_sefaz) is not null then
            --
            est_row_Item_Nota_Fiscal.unid_trib := trim(vv_sigla_unid_sefaz);
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 35;
   -- Verifica se a empresa valida unidade de medida, com o cadastro do Compliance
   if nvl(vn_dm_valid_unid_med,0) = 1 then -- Sim
      --
      vn_fase := 35.1;
      -- valida unidade comercial
      vn_unidade_id_com := pk_csf.fkg_Unidade_id ( en_multorg_id => en_multorg_id
                                                 , ev_sigla_unid => trim(est_row_Item_Nota_Fiscal.unid_com) );
      --
      vn_fase := 35.2;
      --
      if nvl(vn_unidade_id_com,0) <= 0 then
         --
         vn_fase := 35.3;
         --
         gv_mensagem_log := '"Unidade Comercial" não está cadastrada ('||trim(est_row_Item_Nota_Fiscal.unid_com)||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 35.4;
      -- valida unidade tributável
      vn_unidade_id_trib := pk_csf.fkg_Unidade_id ( en_multorg_id => en_multorg_id
                                                  , ev_sigla_unid => trim(est_row_Item_Nota_Fiscal.unid_trib) );
      --
      vn_fase := 35.5;
      --
      if nvl(vn_unidade_id_trib,0) <= 0 then
         --
         vn_fase := 35.6;
         --
         gv_mensagem_log := '"Unidade Tributável" não está cadastrada ('||trim(est_row_Item_Nota_Fiscal.unid_trib)||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 36;
   --
   if nvl(est_row_Item_Nota_Fiscal.vl_outro,0) < 0 then
      --
      vn_fase := 36.1;
      --
      gv_mensagem_log := '"Outras despesas acessórias" não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 37;
   --
   if nvl(est_row_Item_Nota_Fiscal.dm_ind_tot,0) not in (0, 1) then
      --
      vn_fase := 37.1;
      --
      gv_mensagem_log := '"Indicador se valor do Item entra no valor total da NF-e" informado está inválido ('||est_row_Item_Nota_Fiscal.dm_ind_tot||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 38;
   --
   if nvl(est_row_Item_Nota_Fiscal.dm_mot_des_icms,0) > 0
      and est_row_Item_Nota_Fiscal.dm_mot_des_icms not in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 90) then
      --
      vn_fase := 38.1;
      --
      gv_mensagem_log := '"Motivo da desoneração do ICMS" informado está inválido ('||est_row_Item_Nota_Fiscal.dm_mot_des_icms||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 39;
   -- Valor Aproximado dos Tributos
   if nvl(est_row_Item_Nota_Fiscal.vl_tot_trib_item,0) < 0 then
      --
      vn_fase := 39.1;
      --
      gv_mensagem_log := '"Valor Aproximado dos Tributos" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 40;
   --
   if est_row_Item_Nota_Fiscal.vl_tot_trib_item = 0 then
      est_row_Item_Nota_Fiscal.vl_tot_trib_item := null;
   end if;
   --
   vn_fase := 41;
/*
   -- Se informado motDesICMS = 7 CFOP não for 6109 ou 6110, limpa a desoneração
   if nvl(est_row_Item_Nota_Fiscal.dm_mot_des_icms,0) = 7
      and est_row_Item_Nota_Fiscal.cfop not in (6109, 6110)
      then
      --
      est_row_Item_Nota_Fiscal.dm_mot_des_icms := null;
      --
      gv_mensagem_log := 'O CFOP informado não é 6109 ou 6110, então o Motivo de Desoneração do ICMS foi descartado.';
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => INFORMACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
   end if;
*/
   --
   vn_fase := 42;
   --
   if est_row_Item_Nota_Fiscal.dm_cod_trib_issqn is not null
      and est_row_Item_Nota_Fiscal.dm_cod_trib_issqn not in ('N', 'R', 'S', 'I') then
      --
      vn_fase := 42.1;
      --
      gv_mensagem_log := '"Código de Tributação do ISSQN" informado está inválido ('||est_row_Item_Nota_Fiscal.dm_cod_trib_issqn||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 43;
   --
   if nvl(est_row_Item_Nota_Fiscal.item_id,0) <= 0 then
      --
      vn_fase := 43.1;
      --
      -- verifica se a empresa integra o item, quando não existir no cadastro
      vn_dm_integr_item := pk_csf.fkg_integritem_conf_empresa ( en_empresa_id => vn_empresa_id );
      --
      if nvl(vn_dm_integr_item,0) = 1 then -- ira integrar o item
         --
         vn_fase := 43.2;
         vn_unidade_id_com := pk_csf.fkg_Unidade_id ( en_multorg_id => en_multorg_id
                                                    , ev_sigla_unid => trim(est_row_Item_Nota_Fiscal.unid_com) );
         --
         vn_fase := 43.3;
         if nvl(vn_unidade_id_com,0) <= 0 then
            --
            vn_fase := 43.31;
            pk_csf_api_cad.gt_row_unidade:= null;
            --
            pk_csf_api_cad.gt_row_unidade.SIGLA_UNID := trim(est_row_Item_Nota_Fiscal.unid_com);
            pk_csf_api_cad.gt_row_unidade.DESCR      := 'Unidade: ' || trim(est_row_Item_Nota_Fiscal.unid_com);
            pk_csf_api_cad.gt_row_unidade.MULTORG_ID := en_multorg_id;
            pk_csf_api_cad.gt_row_unidade.DM_ST_PROC := 0;
            --
            vn_fase := 43.32;
            pk_csf_api_cad.pkb_integr_unid_med ( est_log_generico    => est_log_generico_nf
                                               , est_unidade         => pk_csf_api_cad.gt_row_unidade
                                               , en_empresa_id       => gt_row_nota_fiscal.empresa_id
                                               );
            --
         end if;
         --
         vn_fase := 43.4;
         pk_csf_api_cad.gt_row_item := null;
         pk_csf_api_cad.gt_row_item.cod_item      := trim(upper(est_row_Item_Nota_Fiscal.cod_item));
         pk_csf_api_cad.gt_row_item.descr_item    := trim(substr(est_row_Item_Nota_Fiscal.descr_item, 1, 120));
         pk_csf_api_cad.gt_row_item.dm_orig_merc  := est_row_Item_Nota_Fiscal.orig;
         pk_csf_api_cad.gt_row_item.cod_barra     := est_row_Item_Nota_Fiscal.cean;
         pk_csf_api_cad.gt_row_item.cod_ant_item  := null;
         pk_csf_api_cad.gt_row_item.aliq_icms     := 0;
         --
         vn_fase := 43.5;
         --
         pk_csf_api_cad.pkb_integr_item ( est_log_generico    => est_log_generico_nf
                                        , est_item            => pk_csf_api_cad.gt_row_item
                                        , en_multorg_id       => pk_csf.fkg_multorg_id_empresa ( en_empresa_id => vn_empresa_id )
                                        , ev_cpf_cnpj         => pk_csf.fkg_cnpj_ou_cpf_empresa ( en_empresa_id => pk_csf.fkg_empresa_id_matriz ( en_empresa_id => vn_empresa_id ) )
                                        , ev_sigla_unid       => est_row_Item_Nota_Fiscal.unid_com
                                        , ev_tipo_item        => '00'
                                        , ev_cod_ncm          => est_row_Item_Nota_Fiscal.cod_ncm
                                        , ev_cod_ex_tipi      => null
                                        , ev_tipo_servico     => null
                                        , ev_cest_cd          => est_row_Item_Nota_Fiscal.cod_cest
                                        );
         --
         vn_fase := 43.6;
         --
         if nvl(pk_csf_api_cad.gt_row_item.id,0) > 0
            and pk_csf.fkg_item_id_valido ( en_item_id => pk_csf_api_cad.gt_row_item.id ) = false
            then
            est_row_Item_Nota_Fiscal.item_id := null;
         else
            est_row_Item_Nota_Fiscal.item_id := pk_csf_api_cad.gt_row_item.id;
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 44;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e integra)
   -- então registra a informação do Item da Nota Fiscal
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_Item_Nota_Fiscal.notafiscal_id;
      --
   end if;
   --
   vn_fase := 45;
   --
   est_row_Item_Nota_Fiscal.cod_item         := trim( est_row_Item_Nota_Fiscal.cod_item );
   est_row_Item_Nota_Fiscal.cean             := trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.cean ) );
   est_row_Item_Nota_Fiscal.descr_item       := trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.descr_item,0,1,3,1,1,1 ) );
   est_row_Item_Nota_Fiscal.cod_ncm          := trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.cod_ncm ) );
   est_row_Item_Nota_Fiscal.genero           := trim( est_row_Item_Nota_Fiscal.genero );
   est_row_Item_Nota_Fiscal.cod_ext_ipi      := trim(est_row_Item_Nota_Fiscal.cod_ext_ipi);
   est_row_Item_Nota_Fiscal.Unid_Com         := trim( est_row_Item_Nota_Fiscal.Unid_Com );
   est_row_Item_Nota_Fiscal.qtde_Comerc      := nvl(est_row_Item_Nota_Fiscal.qtde_Comerc,0);
   est_row_Item_Nota_Fiscal.vl_Unit_Comerc   := nvl(est_row_Item_Nota_Fiscal.vl_Unit_Comerc,0);
   est_row_Item_Nota_Fiscal.vl_Item_Bruto    := nvl(est_row_Item_Nota_Fiscal.vl_Item_Bruto,0);
   est_row_Item_Nota_Fiscal.cean_Trib        := trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.cean_Trib ) );
   est_row_Item_Nota_Fiscal.Unid_Trib        := trim( est_row_Item_Nota_Fiscal.Unid_Trib );
   est_row_Item_Nota_Fiscal.qtde_Trib        := nvl(est_row_Item_Nota_Fiscal.qtde_Trib,0);
   est_row_Item_Nota_Fiscal.vl_Unit_Trib     := nvl(est_row_Item_Nota_Fiscal.vl_Unit_Trib,0);
   est_row_Item_Nota_Fiscal.vl_Frete         := nvl(est_row_Item_Nota_Fiscal.vl_Frete,0);
   est_row_Item_Nota_Fiscal.vl_Seguro        := nvl(est_row_Item_Nota_Fiscal.vl_Seguro,0);
   est_row_Item_Nota_Fiscal.vl_Desc          := nvl(est_row_Item_Nota_Fiscal.vl_Desc,0);
   --
   --est_row_Item_Nota_Fiscal.infAdProd        := trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.infAdProd ) );
   --est_row_Item_Nota_Fiscal.infAdProd        := trim( pk_csf.fkg_converte ( ev_string => est_row_Item_Nota_Fiscal.infAdProd, en_ret_underline => 0 ) );
   est_row_Item_Nota_Fiscal.infAdProd        := trim( pk_csf.fkg_limpa_acento2 ( est_row_Item_Nota_Fiscal.infAdProd ) );
   --
   est_row_Item_Nota_Fiscal.dm_mod_base_calc := nvl(est_row_Item_Nota_Fiscal.dm_mod_base_calc,0);
   est_row_Item_Nota_Fiscal.cnpj_produtor    := lpad(trim( est_row_Item_Nota_Fiscal.cnpj_produtor ), 14, '0');
   est_row_Item_Nota_Fiscal.cl_enq_ipi       := trim( est_row_Item_Nota_Fiscal.cl_enq_ipi );
   est_row_Item_Nota_Fiscal.cod_selo_ipi     := trim( est_row_Item_Nota_Fiscal.cod_selo_ipi );
   est_row_Item_Nota_Fiscal.cod_enq_ipi      := trim( est_row_Item_Nota_Fiscal.cod_enq_ipi );
   est_row_Item_Nota_Fiscal.cd_lista_serv    := trim( est_row_Item_Nota_Fiscal.cd_lista_serv );
   est_row_Item_Nota_Fiscal.cod_cta          := trim( est_row_Item_Nota_Fiscal.cod_cta );
   est_row_Item_Nota_Fiscal.dm_ind_tot       := nvl(est_row_Item_Nota_Fiscal.dm_ind_tot, 1);
   est_row_Item_Nota_Fiscal.pedido_compra    := trim( pk_csf.fkg_converte ( replace(replace(est_row_Item_Nota_Fiscal.pedido_compra, '/', ''), '\', '' ), 0, 1, 2, 1, 0 ) );
   est_row_Item_Nota_Fiscal.item_pedido_compra := trim( pk_csf.fkg_converte ( replace(replace(est_row_Item_Nota_Fiscal.item_pedido_compra, '/', ''), '\', '' ), 0, 1, 2, 1, 0 ) );
   est_row_Item_Nota_Fiscal.cfop             := nvl(est_row_Item_Nota_Fiscal.cfop,0);
   --
   /* Esse teste será efetuado na rotina pkb_consistem_nf.pkb_valida_item_nota_devol
   if nvl(est_row_item_nota_fiscal.percent_devol,0) <= 0 then
      est_row_item_nota_fiscal.percent_devol := case gt_row_Nota_Fiscal.Dm_Fin_Nfe when 4 then 0.00 else null end; -- se for 4 Devolução de mercadoria, jogar valor zero para não dar erro no XML
   end if;
   --
   if nvl(est_row_item_nota_fiscal.vl_ipi_devol,0) <= 0 then
      est_row_item_nota_fiscal.vl_ipi_devol := case gt_row_Nota_Fiscal.Dm_Fin_Nfe when 4 then 0.00 else null end; -- se for 4 Devolução de mercadoria, jogar valor zero para não dar erro no XML
   end if;
   */
   --
   vn_fase := 46;
   --
   if nvl(est_row_Item_Nota_Fiscal.notafiscal_id,0) > 0
      and nvl(est_row_Item_Nota_Fiscal.nro_item, 0) > 0
      and trim( est_row_Item_Nota_Fiscal.cod_item ) is not null
      and est_row_Item_Nota_Fiscal.dm_ind_mov in (0, 1)
      and trim( pk_csf.fkg_converte ( est_row_Item_Nota_Fiscal.descr_item,0,1,3,1,1,1 ) ) is not null
      and nvl(est_row_Item_Nota_Fiscal.cfop_id,0) > 0
      -- and nvl(est_row_Item_Nota_Fiscal.cfop,0) > 0 -- Redmine #5420 - Nota não integra os itens
      and nvl(est_row_Item_Nota_Fiscal.dm_ind_tot,0) in (0, 1)
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 47;
         --
         select itemnf_seq.nextval
           into est_row_Item_Nota_Fiscal.id
           from dual;
         --
         vn_fase := 48;
         --
         insert into Item_Nota_Fiscal ( id
                                      , notafiscal_id
                                      , item_id
                                      , nro_item
                                      , cod_item
                                      , dm_ind_mov
                                      , cean
                                      , descr_item
                                      , cod_ncm
                                      , genero
                                      , cod_ext_ipi
                                      , cfop_id
                                      , cfop
                                      , Unid_Com
                                      , qtde_Comerc
                                      , vl_Unit_Comerc
                                      , vl_Item_Bruto
                                      , cean_Trib
                                      , Unid_Trib
                                      , qtde_Trib
                                      , vl_Unit_Trib
                                      , vl_Frete
                                      , vl_Seguro
                                      , vl_Desc
                                      , infAdProd
                                      , orig
                                      , dm_mod_base_calc
                                      , dm_mod_base_calc_st
                                      , cnpj_produtor
                                      , qtde_selo_ipi
                                      , vl_desp_adu
                                      , vl_iof
                                      , classenqipi_id
                                      , cl_enq_ipi
                                      , selocontripi_id
                                      , cod_selo_ipi
                                      , cod_enq_ipi
                                      , cidade_ibge
                                      , cd_lista_serv
                                      , dm_ind_apur_ipi
                                      , cod_cta
                                      , vl_outro
                                      , dm_ind_tot
                                      , pedido_compra
                                      , item_pedido_compra
                                      , dm_mot_des_icms
                                      , dm_cod_trib_issqn
                                      , VL_TOT_TRIB_ITEM
                                      , percent_devol
                                      , vl_ipi_devol
                                      )
                               values ( est_row_Item_Nota_Fiscal.id
                                      , est_row_Item_Nota_Fiscal.notafiscal_id
                                      , est_row_Item_Nota_Fiscal.item_id
                                      , est_row_Item_Nota_Fiscal.nro_item
                                      , est_row_Item_Nota_Fiscal.cod_item
                                      , est_row_Item_Nota_Fiscal.dm_ind_mov
                                      , est_row_Item_Nota_Fiscal.cean
                                      , est_row_Item_Nota_Fiscal.descr_item
                                      , est_row_Item_Nota_Fiscal.cod_ncm
                                      , est_row_Item_Nota_Fiscal.genero
                                      , est_row_Item_Nota_Fiscal.cod_ext_ipi
                                      , est_row_Item_Nota_Fiscal.cfop_id
                                      , est_row_Item_Nota_Fiscal.cfop
                                      , est_row_Item_Nota_Fiscal.Unid_Com
                                      , est_row_Item_Nota_Fiscal.qtde_Comerc
                                      , est_row_Item_Nota_Fiscal.vl_Unit_Comerc
                                      , est_row_Item_Nota_Fiscal.vl_Item_Bruto
                                      , est_row_Item_Nota_Fiscal.cean_Trib
                                      , est_row_Item_Nota_Fiscal.Unid_Trib
                                      , est_row_Item_Nota_Fiscal.qtde_Trib
                                      , est_row_Item_Nota_Fiscal.vl_Unit_Trib
                                      , est_row_Item_Nota_Fiscal.vl_Frete
                                      , est_row_Item_Nota_Fiscal.vl_Seguro
                                      , est_row_Item_Nota_Fiscal.vl_Desc
                                      , est_row_Item_Nota_Fiscal.infAdProd
                                      , est_row_Item_Nota_Fiscal.orig
                                      , est_row_Item_Nota_Fiscal.dm_mod_base_calc
                                      , est_row_Item_Nota_Fiscal.dm_mod_base_calc_st
                                      , est_row_Item_Nota_Fiscal.cnpj_produtor
                                      , est_row_Item_Nota_Fiscal.qtde_selo_ipi
                                      , est_row_Item_Nota_Fiscal.vl_desp_adu
                                      , est_row_Item_Nota_Fiscal.vl_iof
                                      , est_row_Item_Nota_Fiscal.classenqipi_id
                                      , est_row_Item_Nota_Fiscal.cl_enq_ipi
                                      , est_row_Item_Nota_Fiscal.selocontripi_id
                                      , est_row_Item_Nota_Fiscal.cod_selo_ipi
                                      , est_row_Item_Nota_Fiscal.cod_enq_ipi
                                      , est_row_Item_Nota_Fiscal.cidade_ibge
                                      , est_row_Item_Nota_Fiscal.cd_lista_serv
                                      , est_row_Item_Nota_Fiscal.dm_ind_apur_ipi
                                      , est_row_Item_Nota_Fiscal.cod_cta
                                      , est_row_Item_Nota_Fiscal.vl_outro
                                      , est_row_Item_Nota_Fiscal.dm_ind_tot
                                      , est_row_Item_Nota_Fiscal.pedido_compra
                                      , est_row_Item_Nota_Fiscal.item_pedido_compra
                                      , est_row_Item_Nota_Fiscal.dm_mot_des_icms
                                      , est_row_Item_Nota_Fiscal.dm_cod_trib_issqn
                                      , est_row_Item_Nota_Fiscal.VL_TOT_TRIB_ITEM
                                      , est_row_item_nota_fiscal.percent_devol
                                      , est_row_item_nota_fiscal.vl_ipi_devol
                                      );
         --
      else
         --
         vn_fase := 49;
         --
         update Item_Nota_Fiscal set item_id              = est_row_Item_Nota_Fiscal.item_id
                                   , nro_item             = est_row_Item_Nota_Fiscal.nro_item
                                   , cod_item             = est_row_Item_Nota_Fiscal.cod_item
                                   , dm_ind_mov           = est_row_Item_Nota_Fiscal.dm_ind_mov
                                   , cean                 = est_row_Item_Nota_Fiscal.cean
                                   , descr_item           = est_row_Item_Nota_Fiscal.descr_item
                                   , cod_ncm              = est_row_Item_Nota_Fiscal.cod_ncm
                                   , genero               = est_row_Item_Nota_Fiscal.genero
                                   , cod_ext_ipi          = est_row_Item_Nota_Fiscal.cod_ext_ipi
                                   , cfop_id              = est_row_Item_Nota_Fiscal.cfop_id
                                   , cfop                 = est_row_Item_Nota_Fiscal.cfop
                                   , Unid_Com             = est_row_Item_Nota_Fiscal.Unid_Com
                                   , qtde_Comerc          = est_row_Item_Nota_Fiscal.qtde_Comerc
                                   , vl_Unit_Comerc       = est_row_Item_Nota_Fiscal.vl_Unit_Comerc
                                   , vl_Item_Bruto        = est_row_Item_Nota_Fiscal.vl_Item_Bruto
                                   , cean_Trib            = est_row_Item_Nota_Fiscal.cean_Trib
                                   , Unid_Trib            = est_row_Item_Nota_Fiscal.Unid_Trib
                                   , qtde_Trib            = est_row_Item_Nota_Fiscal.qtde_Trib
                                   , vl_Unit_Trib         = est_row_Item_Nota_Fiscal.vl_Unit_Trib
                                   , vl_Frete             = est_row_Item_Nota_Fiscal.vl_Frete
                                   , vl_Seguro            = est_row_Item_Nota_Fiscal.vl_Seguro
                                   , vl_Desc              = est_row_Item_Nota_Fiscal.vl_Desc
                                   , infAdProd            = est_row_Item_Nota_Fiscal.infAdProd
                                   , orig                 = est_row_Item_Nota_Fiscal.orig
                                   , dm_mod_base_calc     = est_row_Item_Nota_Fiscal.dm_mod_base_calc
                                   , dm_mod_base_calc_st  = est_row_Item_Nota_Fiscal.dm_mod_base_calc_st
                                   , cnpj_produtor        = est_row_Item_Nota_Fiscal.cnpj_produtor
                                   , qtde_selo_ipi        = est_row_Item_Nota_Fiscal.qtde_selo_ipi
                                   , vl_desp_adu          = est_row_Item_Nota_Fiscal.vl_desp_adu
                                   , vl_iof               = est_row_Item_Nota_Fiscal.vl_iof
                                   , classenqipi_id       = est_row_Item_Nota_Fiscal.classenqipi_id
                                   , cl_enq_ipi           = est_row_Item_Nota_Fiscal.cl_enq_ipi
                                   , selocontripi_id      = est_row_Item_Nota_Fiscal.selocontripi_id
                                   , cod_selo_ipi         = est_row_Item_Nota_Fiscal.cod_selo_ipi
                                   , cod_enq_ipi          = est_row_Item_Nota_Fiscal.cod_enq_ipi
                                   , cidade_ibge          = est_row_Item_Nota_Fiscal.cidade_ibge
                                   , cd_lista_serv        = est_row_Item_Nota_Fiscal.cd_lista_serv
                                   , dm_ind_apur_ipi      = est_row_Item_Nota_Fiscal.dm_ind_apur_ipi
                                   , cod_cta              = est_row_Item_Nota_Fiscal.cod_cta
                                   , vl_outro             = est_row_Item_Nota_Fiscal.vl_outro
                                   , dm_ind_tot           = est_row_Item_Nota_Fiscal.dm_ind_tot
                                   , pedido_compra        = est_row_Item_Nota_Fiscal.pedido_compra
                                   , item_pedido_compra   = est_row_Item_Nota_Fiscal.item_pedido_compra
                                   , dm_mot_des_icms      = est_row_Item_Nota_Fiscal.dm_mot_des_icms
                                   , dm_cod_trib_issqn    = est_row_Item_Nota_Fiscal.dm_cod_trib_issqn
                                   , vl_tot_trib_item     = est_row_item_nota_fiscal.vl_tot_trib_item
                                   , percent_devol        = est_row_item_nota_fiscal.percent_devol
                                   , vl_ipi_devol         = est_row_item_nota_fiscal.vl_ipi_devol
          where id = est_row_Item_Nota_Fiscal.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Item_Nota_Fiscal fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_ITEM_NOTA_FISCAL;

-----------------------------------------------------------------------------
-- Procedimento para complemento da operação de COFINS - Campos Flex Field --
-----------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NFCOMPLOPERCOF_FF ( EST_LOG_GENERICO_NF        IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                       , EN_NFCOMPLOPERCOFINS_ID IN             NF_COMPL_OPER_COFINS.ID%TYPE
                                       , EV_ATRIBUTO             IN             VARCHAR2
                                       , EV_VALOR                IN             VARCHAR2
                                       , EN_MULTORG_ID           IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase             number := 0;
   vn_loggenerico_id   log_generico_nf.id%type;
   vv_mensagem         varchar2(1000) := null;
   vn_dmtipocampo      ff_obj_util_integr.dm_tipo_campo%type;
   vn_cod_nat_rec_pc   nat_rec_pc.cod%type := 0;
   vn_codst_id         cod_st.id%type := 0;
   vn_natrecpc_id      nat_rec_pc.id%type := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Complemento da Operação de COFINS: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => erro_de_validacao
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                     , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Complemento da Operação de COFINS: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => erro_de_validacao
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                        , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_NFCOMPLOPERCOFINS_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => erro_de_validacao
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                        , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_NFCOMPLOPERCOFINS_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'COD_NAT_REC_PC' then
         --
         vn_fase := 10;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 11;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 12;
               --
               if trim(ev_atributo) = 'COD_NAT_REC_PC' then
                  --
                  vn_fase := 13;
                  --
                  begin
                     vn_cod_nat_rec_pc := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NFCOMPLOPERCOFINS_FF'
                                                                      , ev_atributo => trim(ev_atributo)
                                                                      , ev_valor    => trim(ev_valor) );
                  exception
                     when others then
                        vn_cod_nat_rec_pc := null;
                  end;
                  --
                  vn_fase := 14;
                  --
                  begin
                     select nc.codst_id
                       into vn_codst_id
                       from nf_compl_oper_cofins nc
                      where nc.id = en_nfcomplopercofins_id;
                  exception
                     when others then
                        vn_codst_id := 0;
                  end;
                  --
                  vn_fase := 15;
                  --
                  begin
                     vn_natrecpc_id := pk_csf_efd_pc.fkg_codst_id_nat_rec_pc ( en_multorg_id        => en_multorg_id
                                                                             , en_natrecpc_codst_id => vn_codst_id
                                                                             , en_natrecpc_cod      => vn_cod_nat_rec_pc );
                  exception
                     when others then
                        vn_natrecpc_id := null;
                  end;
                  --
               end if;
               --
               vn_fase := 16;
               --
               if trim(ev_atributo) = 'COD_NAT_REC_PC' and
                  nvl(vn_natrecpc_id,0) <= 0 then
                  --
                  vn_fase := 17;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR ('||ev_valor||') informado está inválido.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                 , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                                 , ev_resumo         => gv_mensagem_log
                                                 , en_tipo_log       => erro_de_validacao
                                                 , en_referencia_id  => gn_referencia_id
                                                 , ev_obj_referencia => gv_obj_referencia );
                  --
                  -- Armazena o "loggenerico_id" na memória
                  pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                                 , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 18;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                              , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                              , ev_resumo         => gv_mensagem_log
                                              , en_tipo_log       => erro_de_validacao
                                              , en_referencia_id  => gn_referencia_id
                                              , ev_obj_referencia => gv_obj_referencia );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                              , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         else
            --
            vn_fase := 19;
            --
            gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR deve ser maior do que zero (0).';
            --
            vn_loggenerico_id := null;
            --
            pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                           , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                           , ev_resumo         => gv_mensagem_log
                                           , en_tipo_log       => erro_de_validacao
                                           , en_referencia_id  => gn_referencia_id
                                           , ev_obj_referencia => gv_obj_referencia );
            --
            -- Armazena o "loggenerico_id" na memória
            pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                           , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
      else
         --
         vn_fase := 20;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                        , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                        , ev_resumo           => gv_mensagem_log
                                        , en_tipo_log         => erro_de_validacao
                                        , en_referencia_id    => gn_referencia_id
                                        , ev_obj_referencia   => gv_obj_referencia );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                           , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 21;
   --
   if nvl(en_nfcomplopercofins_id,0) = 0 then
      --
      vn_fase := 22;
      --
      gv_mensagem_log := 'Identificador do complemento da operação de COFINS não informado.';
      --
      vn_loggenerico_id := null;
      --
      pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => erro_de_validacao
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                        , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(en_nfcomplopercofins_id,0) > 0 and
      ev_atributo = 'COD_NAT_REC_PC' and
      vn_natrecpc_id is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.1;
      --
      update nf_compl_oper_cofins nc
         set nc.natrecpc_id = vn_natrecpc_id
       where nc.id = en_nfcomplopercofins_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nfcomplopercof_ff fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFCOMPLOPERCOF_FF;

---------------------------------------------------------
-- Procedimento para complemento da operação de COFINS --
---------------------------------------------------------
PROCEDURE PKB_INTEGR_NFCOMPL_OPERCOFINS ( EST_LOG_GENERICO_NF           IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                        , EST_ROW_NFCOMPL_OPERCOFINS IN OUT NOCOPY  NF_COMPL_OPER_COFINS%ROWTYPE
                                        , EV_CPF_CNPJ_EMIT           IN             VARCHAR2
                                        , EV_COD_ST                  IN             COD_ST.COD_ST%TYPE
                                        , EV_COD_BC_CRED_PC          IN             BASE_CALC_CRED_PC.CD%TYPE
                                        , EV_COD_CTA                 IN             PLANO_CONTA.COD_CTA%TYPE
                                        , EN_MULTORG_ID              IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_empresa_id     empresa.id%type;
   vv_codmodfiscal   mod_fiscal.cod_mod%type;
   vn_dm_valida_cofins   empresa.dm_valida_cofins%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_nfcompl_opercofins.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para complemento de operação de COFINS.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if (ev_cod_st not between 50 and 56) and
      (ev_cod_st not between 60 and 66) and
      (ev_cod_st not between 70 and 75) and
      (ev_cod_st not between 98 and 99) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Código da Situação Tributária de COFINS" ('||ev_cod_st||') deve estar entre 50 e 56, ou 60 e 66, ou 70 e 75, ou 98 e 99.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   -- Recupera o Código da Situação tributária de COFINS
   est_row_nfcompl_opercofins.codst_id := pk_csf.fkg_cod_st_id ( ev_cod_st     => ev_cod_st
                                                               , en_tipoimp_id => pk_csf.fkg_tipo_imposto_id ( en_cd => 5 ) ); -- COFINS
   --
   vn_fase := 4;
   --
   if nvl(est_row_nfcompl_opercofins.codst_id,0) <= 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Código da Situação Tributária de COFINS" está inválido ('||ev_cod_st||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   -- Recuperar o código do modelo fiscal da nota fiscal em questão
   vv_codmodfiscal := pk_csf.fkg_cod_mod_id (en_modfiscal_id => pk_csf.fkg_recup_modfisc_id_nf (en_notafiscal_id => est_row_nfcompl_opercofins.notafiscal_id));
   --
   vn_fase := 6;
   --
   if (ev_cod_st between 50 and 56) or
      (ev_cod_st between 60 and 66) then
      --
      vn_fase := 6.1;
      --
      -- Recupera se valida ou não cofins 
      if pk_csf.fkg_dmindemit_notafiscal ( en_notafiscal_id => est_row_nfcompl_opercofins.notafiscal_id ) = 0 then -- emissão própria
         --
         vn_dm_valida_cofins := pk_csf.fkg_empresa_dmvalcofins_emis ( en_empresa_id => vn_empresa_id );
         --
      elsif pk_csf.fkg_dmindemit_notafiscal ( en_notafiscal_id => est_row_nfcompl_opercofins.notafiscal_id  ) = 1 then -- terceiros
         --
         vn_dm_valida_cofins := pk_csf.fkg_empresa_dmvalcofins_terc ( en_empresa_id => vn_empresa_id );
         --
      else
         --
         vn_dm_valida_cofins := 1; -- sim
         --
      end if;   
      --   
      if ev_cod_bc_cred_pc is null and
         vn_dm_valida_cofins = 1 and  -- valida cofins
         nvl(est_row_nfcompl_opercofins.vl_bc_cofins,0) > 0 and
         nvl(est_row_nfcompl_opercofins.aliq_cofins,0) > 0 then
         --
         vn_fase := 6.2;
         --
         gv_mensagem_log := '"Código da Base de Cálculo do Crédito" para COFINS não informado e existe base e aliquota para a nota fiscal.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      if vv_codmodfiscal in ('06', '28', '29') and -- código do modelo fiscal da nota fiscal em questão
         ev_cod_bc_cred_pc not in ('01', '02', '04', '13') then
         --
         vn_fase := 6.3;
         --
         gv_mensagem_log := '"Código da Base de Cálculo do Crédito" para COFINS deve ser 01, 02, 04 ou 13, devido ao modelo fiscal da nota fiscal ser '||
                            '"06", "28" ou "29".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      elsif vv_codmodfiscal in ('21', '22') and -- código do modelo fiscal da nota fiscal em questão
            ev_cod_bc_cred_pc not in ('03', '13') then
            --
            vn_fase := 6.4;
            --
            gv_mensagem_log := '"Código da Base de Cálculo do Crédito" para COFINS deve ser 03 ou 13, devido ao modelo fiscal da nota fiscal ser "21" ou "22".';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
      elsif vv_codmodfiscal not in ('06', '21', '22', '28', '29') and -- código do modelo fiscal da nota fiscal em questão
            ev_cod_bc_cred_pc not between 01 and 04 then
            --
            vn_fase := 6.5;
            --
            gv_mensagem_log := '"Código da Base de Cálculo do Crédito" para COFINS deve estar entre 01 e 04.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
      end if;
      --
   end if;
   --
   vn_fase := 7;
   --
   -- Recuperar o identificador da base de cálculo de crédito.
   est_row_nfcompl_opercofins.basecalccredpc_id := pk_csf_efd_pc.fkg_base_calc_cred_pc_id ( ev_cd => ev_cod_bc_cred_pc );
   --
   vn_fase := 8;
   --
   if nvl(est_row_nfcompl_opercofins.basecalccredpc_id,0) <= 0 and trim(ev_cod_bc_cred_pc) is not null then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Código da Base de Cálculo do Crédito" para COFINS está inválido ('||ev_cod_bc_cred_pc||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   -- Recuperar o identificador da empresa da nota fiscal.
   vn_empresa_id := pk_csf.fkg_empresa_id_pelo_cpf_cnpj ( en_multorg_id => en_multorg_id
                                                        , ev_cpf_cnpj   => ev_cpf_cnpj_emit );
   --
   vn_fase := 10;
   --
   -- Recuperar o identificador do plano de conta.
   est_row_nfcompl_opercofins.planoconta_id := pk_csf.fkg_plano_conta_id ( ev_cod_cta    => ev_cod_cta
                                                                         , en_empresa_id => vn_empresa_id );
   --
   vn_fase := 11;
   --
   if nvl(est_row_nfcompl_opercofins.planoconta_id,0) <= 0 and trim(ev_cod_cta) is not null then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := '"Código da conta analítica contábil debitada/creditada" para COFINS está inválido ('||ev_cod_cta||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12;
   --
   if nvl(est_row_nfcompl_opercofins.vl_item,0) < 0 then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := '"Valor total dos itens" para COFINS não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   --
   if nvl(est_row_nfcompl_opercofins.vl_bc_cofins,0) < 0 then
      --
      vn_fase := 13.1;
      --
      gv_mensagem_log := '"Valor da base de cálculo da COFINS" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_nfcompl_opercofins.aliq_cofins,0) < 0 then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := '"Alíquota da COFINS (em percentual)" não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 15;
   --
   if nvl(est_row_nfcompl_opercofins.vl_cofins,0) < 0 then
      --
      vn_fase := 15.1;
      --
      gv_mensagem_log := '"Valor da COFINS" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_nfcompl_opercofins.notafiscal_id,0) > 0 and
      nvl(est_row_nfcompl_opercofins.codst_id,0) > 0 and
      nvl(est_row_nfcompl_opercofins.vl_item,0) >= 0 and
      nvl(est_row_nfcompl_opercofins.vl_bc_cofins,0) >= 0 and
      nvl(est_row_nfcompl_opercofins.aliq_cofins,0) >= 0 and
      nvl(est_row_nfcompl_opercofins.vl_cofins,0) >= 0 then
      --
      vn_fase := 99.1;
      -- Se for 1 insere se for 0 só valida e atualiza
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.2;
         --
         select nfcomplopercofins_seq.nextval
           into est_row_nfcompl_opercofins.id
           from dual;
         --
         --
         vn_fase := 99.3;
         --
         insert into nf_compl_oper_cofins ( id
                                          , notafiscal_id
                                          , codst_id
                                          , vl_item
                                          , basecalccredpc_id
                                          , vl_bc_cofins
                                          , aliq_cofins
                                          , vl_cofins
                                          , planoconta_id )
                                   values ( est_row_nfcompl_opercofins.id
                                          , est_row_nfcompl_opercofins.notafiscal_id
                                          , est_row_nfcompl_opercofins.codst_id
                                          , est_row_nfcompl_opercofins.vl_item
                                          , est_row_nfcompl_opercofins.basecalccredpc_id
                                          , est_row_nfcompl_opercofins.vl_bc_cofins
                                          , est_row_nfcompl_opercofins.aliq_cofins
                                          , est_row_nfcompl_opercofins.vl_cofins
                                          , est_row_nfcompl_opercofins.planoconta_id );
         --
      else
         --
         vn_fase := 99.4;
         --
         update nf_compl_oper_cofins set codst_id          =  est_row_nfcompl_opercofins.codst_id
                                       , vl_item           =  est_row_nfcompl_opercofins.vl_item
                                       , basecalccredpc_id =  est_row_nfcompl_opercofins.basecalccredpc_id
                                       , vl_bc_cofins      =  est_row_nfcompl_opercofins.vl_bc_cofins
                                       , aliq_cofins       =  est_row_nfcompl_opercofins.aliq_cofins
                                       , vl_cofins         =  est_row_nfcompl_opercofins.vl_cofins
                                       , planoconta_id     =  est_row_nfcompl_opercofins.planoconta_id
          where id = est_row_nfcompl_opercofins.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nfcompl_opercofins fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFCOMPL_OPERCOFINS;

--------------------------------------------------------------------------------
-- Procedimento para complemento da operação de PIS/PASEP - Campos Flex Field --
--------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NFCOMPLOPERPIS_FF ( EST_LOG_GENERICO_NF     IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                       , EN_NFCOMPLOPERPIS_ID IN             NF_COMPL_OPER_PIS.ID%TYPE
                                       , EV_ATRIBUTO          IN             VARCHAR2
                                       , EV_VALOR             IN             VARCHAR2
                                       , EN_MULTORG_ID        IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase             number := 0;
   vn_loggenerico_id   log_generico_nf.id%type;
   vv_mensagem         varchar2(1000) := null;
   vn_dmtipocampo      ff_obj_util_integr.dm_tipo_campo%type;
   vn_cod_nat_rec_pc   nat_rec_pc.cod%type := 0;
   vn_codst_id         cod_st.id%type := 0;
   vn_natrecpc_id      nat_rec_pc.id%type := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Complemento da Operação de PIS/PASEP: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => erro_de_validacao
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                     , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Complemento da Operação de PIS/PASEP: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => erro_de_validacao
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                        , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_NFCOMPLOPERPIS_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => erro_de_validacao
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                        , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_NFCOMPLOPERPIS_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'COD_NAT_REC_PC' then
         --
         vn_fase := 10;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 11;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 12;
               --
               if trim(ev_atributo) = 'COD_NAT_REC_PC' then
                  --
                  vn_fase := 13;
                  --
                  begin
                     vn_cod_nat_rec_pc := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NFCOMPLOPERPIS_FF'
                                                                      , ev_atributo => trim(ev_atributo)
                                                                      , ev_valor    => trim(ev_valor) );
                  exception
                     when others then
                        vn_cod_nat_rec_pc := null;
                  end;
                  --
                  vn_fase := 14;
                  --
                  begin
                     select nc.codst_id
                       into vn_codst_id
                       from nf_compl_oper_pis nc
                      where nc.id = en_nfcomploperpis_id;
                  exception
                     when others then
                        vn_codst_id := 0;
                  end;
                  --
                  vn_fase := 15;
                  --
                  begin
                     vn_natrecpc_id := pk_csf_efd_pc.fkg_codst_id_nat_rec_pc ( en_multorg_id        => en_multorg_id
                                                                             , en_natrecpc_codst_id => vn_codst_id
                                                                             , en_natrecpc_cod      => vn_cod_nat_rec_pc );
                  exception
                     when others then
                        vn_natrecpc_id := null;
                  end;
                  --
               end if;
               --
               vn_fase := 16;
               --
               if trim(ev_atributo) = 'COD_NAT_REC_PC' and
                  nvl(vn_natrecpc_id,0) <= 0 then
                  --
                  vn_fase := 17;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR ('||ev_valor||') informado está inválido.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                 , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                                 , ev_resumo         => gv_mensagem_log
                                                 , en_tipo_log       => erro_de_validacao
                                                 , en_referencia_id  => gn_referencia_id
                                                 , ev_obj_referencia => gv_obj_referencia );
                  --
                  -- Armazena o "loggenerico_id" na memória
                  pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                                 , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 18;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                              , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                              , ev_resumo         => gv_mensagem_log
                                              , en_tipo_log       => erro_de_validacao
                                              , en_referencia_id  => gn_referencia_id
                                              , ev_obj_referencia => gv_obj_referencia );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                              , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         else
            --
            vn_fase := 19;
            --
            gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR deve ser maior do que zero (0).';
            --
            vn_loggenerico_id := null;
            --
            pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                           , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                           , ev_resumo         => gv_mensagem_log
                                           , en_tipo_log       => erro_de_validacao
                                           , en_referencia_id  => gn_referencia_id
                                           , ev_obj_referencia => gv_obj_referencia );
            --
            -- Armazena o "loggenerico_id" na memória
            pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                           , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
      else
         --
         vn_fase := 20;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                        , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                        , ev_resumo           => gv_mensagem_log
                                        , en_tipo_log         => erro_de_validacao
                                        , en_referencia_id    => gn_referencia_id
                                        , ev_obj_referencia   => gv_obj_referencia );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                           , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 21;
   --
   if nvl(en_nfcomploperpis_id,0) = 0 then
      --
      vn_fase := 22;
      --
      gv_mensagem_log := 'Identificador do complemento da operação de PIS não informado.';
      --
      vn_loggenerico_id := null;
      --
      pk_csf_api.pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => erro_de_validacao
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pk_csf_api.pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                        , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(en_nfcomploperpis_id,0) > 0 and
      ev_atributo = 'COD_NAT_REC_PC' and
      vn_natrecpc_id is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.1;
      --
      update nf_compl_oper_pis nc
         set nc.natrecpc_id = vn_natrecpc_id
       where nc.id = en_nfcomploperpis_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nfcomploperpis_ff fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFCOMPLOPERPIS_FF;

------------------------------------------------------
-- Procedimento para complemento da operação de PIS --
------------------------------------------------------
PROCEDURE PKB_INTEGR_NFCOMPL_OPERPIS ( EST_LOG_GENERICO_NF          IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                     , EST_ROW_NFCOMPL_OPERPIS   IN OUT NOCOPY  NF_COMPL_OPER_PIS%ROWTYPE
                                     , EV_CPF_CNPJ_EMIT          IN             VARCHAR2
                                     , EV_COD_ST                 IN             COD_ST.COD_ST%TYPE
                                     , EV_COD_BC_CRED_PC         IN             BASE_CALC_CRED_PC.CD%TYPE
                                     , EV_COD_CTA                IN             PLANO_CONTA.COD_CTA%TYPE
                                     , EN_MULTORG_ID             IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_empresa_id     empresa.id%type;
   vv_codmodfiscal   mod_fiscal.cod_mod%type;
   vn_dm_valida_pis  empresa.dm_valida_pis%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_nfcompl_operpis.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para complemento de operação de PIS.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if (ev_cod_st not between 50 and 56) and
      (ev_cod_st not between 60 and 66) and
      (ev_cod_st not between 70 and 75) and
      (ev_cod_st not between 98 and 99) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Código da Situação Tributária de PIS" inválido ('||ev_cod_st||') deve estar entre 50 e 56, ou 60 e 66, ou 70 e 75, ou 98 e 99.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   -- Recupera o Código da Situação tributária de PIS
   est_row_nfcompl_operpis.codst_id := pk_csf.fkg_cod_st_id ( ev_cod_st      => ev_cod_st
                                                            , en_tipoimp_id  => pk_csf.fkg_tipo_imposto_id ( en_cd => 4 ) ); -- PIS
   --
   vn_fase := 4;
   --
   if nvl(est_row_nfcompl_operpis.codst_id,0) <= 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Código da Situação Tributária de PIS" está inválido ('||ev_cod_st||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   -- Recuperar o código do modelo fiscal da nota fiscal em questão
   vv_codmodfiscal := pk_csf.fkg_cod_mod_id (en_modfiscal_id => pk_csf.fkg_recup_modfisc_id_nf (en_notafiscal_id => est_row_nfcompl_operpis.notafiscal_id));
   --
   vn_fase := 6;
   --
   if (ev_cod_st between 50 and 56) or
      (ev_cod_st between 60 and 66) then
      --
      vn_fase := 6.1;
      --
      -- Recupera se valida ou não pis                        
      if pk_csf.fkg_dmindemit_notafiscal ( en_notafiscal_id => est_row_nfcompl_operpis.notafiscal_id ) = 0 then -- emissão própria
         --
         vn_dm_valida_pis := pk_csf.fkg_empresa_dmvalpis_emis ( en_empresa_id => vn_empresa_id );
         --
      elsif pk_csf.fkg_dmindemit_notafiscal ( en_notafiscal_id => est_row_nfcompl_operpis.notafiscal_id  ) = 1 then -- terceiros
         --
         vn_dm_valida_pis := pk_csf.fkg_empresa_dmvalpis_terc ( en_empresa_id => vn_empresa_id );
         --
      else
         --
         vn_dm_valida_pis := 1; -- sim
         --
      end if;      
      --
      if ev_cod_bc_cred_pc is null and
         vn_dm_valida_pis = 1 and  -- valida pis
         nvl(est_row_nfcompl_operpis.vl_bc_pis,0) > 0 and
         nvl(est_row_nfcompl_operpis.aliq_pis,0) > 0 then
         --
         vn_fase := 6.2;
         --
         gv_mensagem_log := '"Código da Base de Cálculo do Crédito" para PIS não informado e existe base e aliquota para a nota fiscal.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;      
      --
      if vv_codmodfiscal in ('06', '28', '29') and -- código do modelo fiscal da nota fiscal em questão
         ev_cod_bc_cred_pc not in ('01', '02', '04', '13') then
         --
         vn_fase := 6.3;
         --
         gv_mensagem_log := '"Código da Base de Cálculo do Crédito" para PIS deve ser 01, 02, 04 ou 13, devido ao modelo fiscal da nota fiscal ser '||
                            '"06", "28" ou "29".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      elsif vv_codmodfiscal in ('21', '22') and -- código do modelo fiscal da nota fiscal em questão
            ev_cod_bc_cred_pc not in ('03', '13') then
            --
            vn_fase := 6.4;
            --
            gv_mensagem_log := '"Código da Base de Cálculo do Crédito" para PIS deve ser 03 ou 13, devido ao modelo fiscal da nota fiscal ser "21" ou "22".';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
      elsif vv_codmodfiscal not in ('06', '21', '22', '28', '29') and -- código do modelo fiscal da nota fiscal em questão
            ev_cod_bc_cred_pc not between 01 and 04 then
            --
            vn_fase := 6.5;
            --
            gv_mensagem_log := '"Código da Base de Cálculo do Crédito" para PIS deve estar entre 01 e 04.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
      end if;
      --
   end if;
   --
   vn_fase := 7;
   --
   -- Recuperar o identificador da base de cálculo de crédito.
   est_row_nfcompl_operpis.basecalccredpc_id := pk_csf_efd_pc.fkg_base_calc_cred_pc_id ( ev_cd => ev_cod_bc_cred_pc );
   --
   vn_fase := 8;
   --
   if nvl(est_row_nfcompl_operpis.basecalccredpc_id,0) <= 0 and trim(ev_cod_bc_cred_pc) is not null then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Código da Base de Cálculo do Crédito" para PIS está inválido ('||ev_cod_bc_cred_pc||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   -- Recuperar o identificador da empresa da nota fiscal.
   vn_empresa_id := pk_csf.fkg_empresa_id_pelo_cpf_cnpj ( en_multorg_id => en_multorg_id
                                                        , ev_cpf_cnpj   => ev_cpf_cnpj_emit );
   --
   vn_fase := 10;
   --
   -- Recuperar o identificador do plano de conta.
   est_row_nfcompl_operpis.planoconta_id := pk_csf.fkg_plano_conta_id ( ev_cod_cta    => ev_cod_cta
                                                                      , en_empresa_id => vn_empresa_id );
   --
   vn_fase := 11;
   --
   if nvl(est_row_nfcompl_operpis.planoconta_id,0) <= 0 and trim(ev_cod_cta) is not null then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := '"Código da conta analítica contábil debitada/creditada" para PIS está inválido ('||ev_cod_cta||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12;
   --
   if nvl(est_row_nfcompl_operpis.vl_item,0) < 0 then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := '"Valor total dos itens" para PIS não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   --
   if nvl(est_row_nfcompl_operpis.vl_bc_pis,0) < 0 then
      --
      vn_fase := 13.1;
      --
      gv_mensagem_log := '"Valor da base de cálculo do PIS" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_nfcompl_operpis.aliq_pis,0) < 0 then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := '"Alíquota do PIS (em percentual)" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 15;
   --
   if nvl(est_row_nfcompl_operpis.vl_pis,0) < 0 then
      --
      vn_fase := 15.1;
      --
      gv_mensagem_log := '"Valor do PIS" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_row_nfcompl_operpis.notafiscal_id,0) > 0 and
      nvl(est_row_nfcompl_operpis.codst_id,0) > 0 and
      nvl(est_row_nfcompl_operpis.vl_item,0) >= 0 and
      nvl(est_row_nfcompl_operpis.vl_bc_pis,0) >= 0 and
      nvl(est_row_nfcompl_operpis.aliq_pis,0) >= 0 and
      nvl(est_row_nfcompl_operpis.vl_pis,0) >= 0 then
      --
      vn_fase := 99.1;
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.2;
         --
         select nfcomploperpis_seq.nextval
           into est_row_nfcompl_operpis.id
           from dual;
         --
         vn_fase := 99.3;
         --
         insert into nf_compl_oper_pis ( id
                                       , notafiscal_id
                                       , codst_id
                                       , vl_item
                                       , basecalccredpc_id
                                       , vl_bc_pis
                                       , aliq_pis
                                       , vl_pis
                                       , planoconta_id )
                                values ( est_row_nfcompl_operpis.id
                                       , est_row_nfcompl_operpis.notafiscal_id
                                       , est_row_nfcompl_operpis.codst_id
                                       , est_row_nfcompl_operpis.vl_item
                                       , est_row_nfcompl_operpis.basecalccredpc_id
                                       , est_row_nfcompl_operpis.vl_bc_pis
                                       , est_row_nfcompl_operpis.aliq_pis
                                       , est_row_nfcompl_operpis.vl_pis
                                       , est_row_nfcompl_operpis.planoconta_id );
         --
      else
         --
         vn_fase := 99.4;
         --
         update nf_compl_oper_pis set codst_id          = est_row_nfcompl_operpis.codst_id
                                    , vl_item           = est_row_nfcompl_operpis.vl_item
                                    , basecalccredpc_id = est_row_nfcompl_operpis.basecalccredpc_id
                                    , vl_bc_pis         = est_row_nfcompl_operpis.vl_bc_pis
                                    , aliq_pis          = est_row_nfcompl_operpis.aliq_pis
                                    , vl_pis            = est_row_nfcompl_operpis.vl_pis
                                    , planoconta_id     = est_row_nfcompl_operpis.planoconta_id
          where id = est_row_nfcompl_operpis.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nfcompl_operpis fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFCOMPL_OPERPIS;

-----------------------------------------------------------------------------------------
-- Integra as informações do resumo de impostos  - nfregist_analit - Campos Flex Field --
-----------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NFREGIST_ANALIT_FF ( EST_LOG_GENERICO_NF     IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                        , EN_NFREGISTANALIT_ID IN             NFREGIST_ANALIT.ID%TYPE
                                        , EV_ATRIBUTO          IN             VARCHAR2
                                        , EV_VALOR             IN             VARCHAR2 ) IS
   --
   vn_fase             number := 0;
   vn_loggenerico_id   log_generico_nf.id%type;
   vv_mensagem         varchar2(1000) := null;
   vn_dmtipocampo      ff_obj_util_integr.dm_tipo_campo%type;
   vn_vl_base_outro    nfregist_analit.vl_base_outro%type := 0;
   vn_vl_imp_outro     nfregist_analit.vl_imp_outro%type := 0;
   vn_vl_base_isenta   nfregist_analit.vl_base_isenta%type := 0;
   vn_aliq_aplic_outro nfregist_analit.aliq_aplic_outro%type := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Registro Analitico do Documento (Nota Fiscal): "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Registro Analitico do Documento (Nota Fiscal): "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_REG_NF_SERV_CONT_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_REG_NF_SERV_CONT_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'VL_BASE_OUTRO' or
         trim(ev_atributo) = 'VL_IMP_OUTRO' or
         trim(ev_atributo) = 'VL_BASE_ISENTA' or
         trim(ev_atributo) = 'ALIQ_APLIC_OUTRO' then
         --
         vn_fase := 10;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 11;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 12;
               --
               if trim(ev_atributo) = 'VL_BASE_OUTRO' then
                  --
                  vn_fase := 13;
                  --
                  vn_vl_base_outro := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_REG_NF_SERV_CONT_FF'
                                                                  , ev_atributo => trim(ev_atributo)
                                                                  , ev_valor    => trim(ev_valor) );
                  --
               elsif trim(ev_atributo) = 'VL_IMP_OUTRO' then
                     --
                     vn_fase := 14;
                     --
                     vn_vl_imp_outro := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_REG_NF_SERV_CONT_FF'
                                                                    , ev_atributo => trim(ev_atributo)
                                                                    , ev_valor    => trim(ev_valor) );
                     --
               elsif trim(ev_atributo) = 'VL_BASE_ISENTA' then
                     --
                     vn_fase := 15;
                     --
                     vn_vl_base_isenta := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_REG_NF_SERV_CONT_FF'
                                                                      , ev_atributo => trim(ev_atributo)
                                                                      , ev_valor    => trim(ev_valor) );
                     --
               elsif trim(ev_atributo) = 'ALIQ_APLIC_OUTRO' then
                     --
                     vn_fase := 16;
                     --
                     vn_aliq_aplic_outro := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_REG_NF_SERV_CONT_FF'
                                                                        , ev_atributo => trim(ev_atributo)
                                                                        , ev_valor    => trim(ev_valor) );
                     --
               end if;
               --
               vn_fase := 17;
               --
               if nvl(vn_vl_base_outro,0) < 0 or
                  nvl(vn_vl_imp_outro,0) < 0 or
                  nvl(vn_vl_base_isenta,0) < 0 or
                  nvl(vn_aliq_aplic_outro,0) < 0 then
                  --
                  vn_fase := 18;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR ('||ev_valor||') informado não pode ser negativo.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem       => gv_cabec_log
                                      , ev_resumo         => gv_mensagem_log
                                      , en_tipo_log       => erro_de_validacao
                                      , en_referencia_id  => gn_referencia_id
                                      , ev_obj_referencia => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 19;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         else
            --
            vn_fase := 20;
            --
            gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR deve ser maior do que zero (0).';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem       => gv_cabec_log
                                , ev_resumo         => gv_mensagem_log
                                , en_tipo_log       => erro_de_validacao
                                , en_referencia_id  => gn_referencia_id
                                , ev_obj_referencia => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
      else
         --
         vn_fase := 21;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 22;
   --
   if nvl(en_nfregistanalit_id,0) = 0 then
      --
      vn_fase := 23;
      --
      gv_mensagem_log := 'Identificador do imposto do item da nota fiscal de serviço contínuo não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(en_nfregistanalit_id,0) > 0 and
      ev_atributo = 'VL_BASE_OUTRO' and
      vn_vl_base_outro is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.1;
      --
      update nfregist_analit na
         set na.vl_base_outro = vn_vl_base_outro
       where na.id = en_nfregistanalit_id;
      --
   elsif nvl(en_nfregistanalit_id,0) > 0 and
         ev_atributo = 'VL_IMP_OUTRO' and
         vn_vl_imp_outro is not null and
         vv_mensagem is null then
         --
         vn_fase := 99.2;
         --
         update nfregist_analit na
            set na.vl_imp_outro = vn_vl_imp_outro
          where na.id = en_nfregistanalit_id;
         --
   elsif nvl(en_nfregistanalit_id,0) > 0 and
         ev_atributo = 'VL_BASE_ISENTA' and
         vn_vl_base_isenta is not null and
         vv_mensagem is null then
         --
         vn_fase := 99.3;
         --
         update nfregist_analit na
            set na.vl_base_isenta = vn_vl_base_isenta
          where na.id = en_nfregistanalit_id;
         --
   elsif nvl(en_nfregistanalit_id,0) > 0 and
         ev_atributo = 'ALIQ_APLIC_OUTRO' and
         vn_aliq_aplic_outro is not null and
         vv_mensagem is null then
         --
         vn_fase := 99.4;
         --
         update nfregist_analit na
            set na.aliq_aplic_outro = vn_aliq_aplic_outro
          where na.id = en_nfregistanalit_id;
         --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nfregist_analit_ff fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFREGIST_ANALIT_FF;

---------------------------------------------------------------------
-- Integra as informações do resumo de impostos  - nfregist_analit --
---------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NFREGIST_ANALIT ( EST_LOG_GENERICO_NF         IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                     , EST_ROW_NFREGIST_ANALIT  IN OUT NOCOPY  NFREGIST_ANALIT%ROWTYPE
                                     , EV_COD_ST                IN             COD_ST.COD_ST%TYPE
                                     , EN_CFOP                  IN             CFOP.CD%TYPE
                                     , EV_COD_OBS               IN             OBS_LANCTO_FISCAL.COD_OBS%TYPE
                                     , EN_MULTORG_ID            IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_nfregist_analit.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para registro analitico de impostos.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   -- Recupera o Código da Situação tributária de ICMS
   est_row_nfregist_analit.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => ev_cod_st
                                                            , en_tipoimp_id  => pk_csf.fkg_Tipo_Imposto_id ( en_cd => 1 ) );
   --
   if nvl(est_row_nfregist_analit.codst_id,0) <= 0 then
      --
      -- Recupera o Código da Situação tributária de ICMS
      est_row_nfregist_analit.codst_id := pk_csf.fkg_Cod_ST_id ( ev_cod_st      => ev_cod_st
                                                               , en_tipoimp_id  => pk_csf.fkg_Tipo_Imposto_id ( en_cd => 10 ) );
      --
   end if;
   --
   vn_fase := 2.1;
   --
   if nvl(est_row_nfregist_analit.codst_id,0) <= 0 and trim(ev_cod_st) is not null then
      --
      vn_fase := 2.2;
      --
      gv_mensagem_log := '"Código da Situação Tributária de ICMS" está inválido ('||ev_cod_st||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   -- Recupera o CFOP
   est_row_nfregist_analit.cfop_id := pk_csf.fkg_cfop_id ( en_cd => en_cfop );
   --
   vn_fase := 3.1;
   --
   if nvl(est_row_nfregist_analit.cfop_id,0) <= 0 then
      --
      vn_fase := 3.2;
      --
      gv_mensagem_log := '"CFOP" informado está inválido ('||en_cfop||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_nfregist_analit.aliq_icms,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Alíquota de ICMS" não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_nfregist_analit.vl_operacao,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Valor da operação de ICMS" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   if nvl(est_row_nfregist_analit.vl_bc_icms,0) < 0 then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Valor da base de cálculo do ICMS" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   if nvl(est_row_nfregist_analit.vl_icms,0) < 0 then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Valor do ICMS" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_nfregist_analit.vl_icms,0) = 0 and nvl(est_row_nfregist_analit.vl_fcp_icms,0) > 0 then
      --
      vn_fase := 7.2;
      --
      gv_mensagem_log := 'A Nota Fiscal não possui valor de ICMS e foi gerado valor para FCP. Verifique!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => informacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
   end if;
   --
   vn_fase := 8;
   --
   if nvl(est_row_nfregist_analit.vl_bc_icms_st,0) < 0 then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Valor da base de cálculo do ICMS ST" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   if nvl(est_row_nfregist_analit.vl_icms_st,0) < 0 then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := '"Valor do ICMS ST" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 10;
   --
   if nvl(est_row_nfregist_analit.vl_red_bc_icms,0) < 0 then
      --
      est_row_nfregist_analit.vl_red_bc_icms := 0;
      --
   end if;
   --
   vn_fase := 11;
   --
   if nvl(est_row_nfregist_analit.vl_ipi,0) < 0 then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := '"Valor do IPI" não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12;
   --
   est_row_nfregist_analit.obslanctofiscal_id := pk_csf.fkg_id_obs_lancto_fiscal ( en_multorg_id => en_multorg_id
                                                                                 , ev_cod_obs    => ev_cod_obs );
   --
   vn_fase := 13;
   --
   if nvl(est_row_nfregist_analit.obslanctofiscal_id,0) <= 0 and trim(ev_cod_obs) is not null then
      --
      vn_fase := 13.1;
      --
      gv_mensagem_log := '"Código da observação do lançamento fiscal" está inválido ('||ev_cod_obs||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14;
   --
   if nvl(est_row_nfregist_analit.dm_orig_merc, -1) not in (0, 1, 2, 3, 4, 5, 6, 7, 8) then
      --
      gv_mensagem_log := '"Origem da Mercadoria do Resumo de Impostos" está inválida ('||est_row_nfregist_analit.dm_orig_merc||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 15;
   --
   est_row_nfregist_analit.vl_operacao    := nvl(est_row_nfregist_analit.vl_operacao,0);
   est_row_nfregist_analit.vl_bc_icms     := nvl(est_row_nfregist_analit.vl_bc_icms,0);
   est_row_nfregist_analit.vl_icms        := nvl(est_row_nfregist_analit.vl_icms,0);
   est_row_nfregist_analit.vl_bc_icms_st  := nvl(est_row_nfregist_analit.vl_bc_icms_st,0);
   est_row_nfregist_analit.vl_icms_st     := nvl(est_row_nfregist_analit.vl_icms_st,0);
   est_row_nfregist_analit.vl_red_bc_icms := nvl(est_row_nfregist_analit.vl_red_bc_icms,0);
   est_row_nfregist_analit.vl_ipi         := nvl(est_row_nfregist_analit.vl_ipi,0);
   --
   vn_fase := 16;
   --
   if nvl(est_row_nfregist_analit.notafiscal_id,0) > 0
      and nvl(est_row_nfregist_analit.codst_id,0) > 0
      and nvl(est_row_nfregist_analit.cfop_id,0) > 0
      and nvl(est_row_nfregist_analit.dm_orig_merc, -1) in (0, 1, 2, 3, 4, 5, 6, 7, 8)
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 17;
         --
         select nfregistanalit_seq.nextval
           into est_row_nfregist_analit.id
           from dual;
         --
         vn_fase := 18;
         --
         insert into nfregist_analit ( id
                                     , notafiscal_id
                                     , codst_id
                                     , cfop_id
                                     , aliq_icms
                                     , vl_operacao
                                     , vl_bc_icms
                                     , vl_icms
                                     , vl_bc_icms_st
                                     , vl_icms_st
                                     , vl_red_bc_icms
                                     , vl_ipi
                                     , obslanctofiscal_id
                                     , dm_orig_merc
                                     , vl_base_outro
                                     , vl_imp_outro
                                     , vl_base_isenta
                                     , aliq_aplic_outro
                                     , vl_fcp_icms
                                     , vl_fcp_icmsst
                                     , Aliq_Fcp_Icms
                                     )
                              values ( est_row_nfregist_analit.id
                                     , est_row_nfregist_analit.notafiscal_id
                                     , est_row_nfregist_analit.codst_id
                                     , est_row_nfregist_analit.cfop_id
                                     , est_row_nfregist_analit.aliq_icms
                                     , est_row_nfregist_analit.vl_operacao
                                     , est_row_nfregist_analit.vl_bc_icms
                                     , est_row_nfregist_analit.vl_icms
                                     , est_row_nfregist_analit.vl_bc_icms_st
                                     , est_row_nfregist_analit.vl_icms_st
                                     , est_row_nfregist_analit.vl_red_bc_icms
                                     , est_row_nfregist_analit.vl_ipi
                                     , est_row_nfregist_analit.obslanctofiscal_id
                                     , est_row_nfregist_analit.dm_orig_merc
                                     , est_row_nfregist_analit.vl_base_outro    -- para NF Mercantil esses valores ficam nulos
                                     , est_row_nfregist_analit.vl_imp_outro     -- para NF Mercantil esses valores ficam nulos
                                     , est_row_nfregist_analit.vl_base_isenta   -- para NF Mercantil esses valores ficam nulos
                                     , est_row_nfregist_analit.aliq_aplic_outro -- para NF Mercantil esses valores ficam nulos
                                     , est_row_nfregist_analit.vl_fcp_icms
                                     , est_row_nfregist_analit.vl_fcp_icmsst
                                     , est_row_nfregist_analit.aliq_fcP_ICMS
                                     );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nfregist_analit fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFREGIST_ANALIT;

-----------------------------------------------------
-- Integra as informações de Totais de Nota Fiscal --
-----------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_TOTAL ( EST_LOG_GENERICO_NF        IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                       , EST_ROW_NOTA_FISCAL_TOTAL  IN OUT NOCOPY  NOTA_FISCAL_TOTAL%ROWTYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_Nota_Fiscal_Total.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para registro dos Totais.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   -- Valida informação da Base de Cálculo do ICMS
   if nvl(est_row_Nota_Fiscal_Total.vl_base_calc_icms,0) < 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Base de Cálculo do ICMS" da Nota Fiscal não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   -- Valida informação do Valor Total do ICMS
   if nvl(est_row_Nota_Fiscal_Total.vl_imp_trib_icms,0) < 0 then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Valor Total do ICMS" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(est_row_Nota_Fiscal_Total.vl_imp_trib_icms,0) = 0 and nvl(est_row_Nota_Fiscal_Total.vl_fcp,0) > 0 then
      --
      vn_fase := 3.2;
      --
      gv_mensagem_log := 'A Nota Fiscal não possui valor de ICMS e foi gerado valor para FCP. Verifique!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => informacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
   end if;
   --
   vn_fase := 4;
   -- Valida informação da Base de Cálculo do ICMS ST
   if nvl(est_row_Nota_Fiscal_Total.vl_base_calc_st,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Base de Cálculo do ICMS ST" da Nota Fiscal não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   -- Valida informação do Valor Total do ICMS ST
   if nvl(est_row_Nota_Fiscal_Total.vl_imp_trib_st,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Valor Total do ICMS ST" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   -- Valida informação do Valor Total dos produtos e serviços
   if nvl(est_row_Nota_Fiscal_Total.vl_total_item,0) < 0 then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Valor Total dos produtos e serviços" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   -- Valida informação do Valor Total do Frete
   if nvl(est_row_Nota_Fiscal_Total.vl_frete,0) < 0 then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Valor Total do Frete" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   -- Valida informação do Valor Total do Seguro
   if nvl(est_row_Nota_Fiscal_Total.vl_seguro,0) < 0 then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Valor Total do Seguro" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   -- Valida informação do Valor Total do II
   if nvl(est_row_Nota_Fiscal_Total.vl_imp_trib_ii,0) < 0 then
      --
      vn_fase := 10;
      --
      gv_mensagem_log := '"Valor Total do II" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11;
   -- Valida informação do Valor Total do IPI
   if nvl(est_row_Nota_Fiscal_Total.vl_imp_trib_ipi,0) < 0 then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := '"Valor Total do IPI" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12;
   -- Valida informação do Valor do PIS
   if nvl(est_row_Nota_Fiscal_Total.vl_imp_trib_pis,0) < 0 then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := '"Valor do PIS" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   -- Valida informação do Valor do COFINS
   if nvl(est_row_Nota_Fiscal_Total.vl_imp_trib_cofins,0) < 0 then
      --
      vn_fase := 13.1;
      --
      gv_mensagem_log := '"Valor do COFINS" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14;
   -- Valida informação de Outras Despesas acessórias
   if nvl(est_row_Nota_Fiscal_Total.vl_outra_despesas,0) < 0 then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := '"Outras Despesas acessórias" da Nota Fiscal não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 15;
   -- Valida informação do Valor Total da Nota Fiscal
   if nvl(est_row_Nota_Fiscal_Total.vl_total_nf,0) < 0 then
      --
      vn_fase := 15.1;
      --
      gv_mensagem_log := '"Valor Total da Nota Fiscal" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 16;
   -- Valida informação do Valor Total dos Serviços sob não incidência ou não tributados pelo ICMS
   if nvl(est_row_Nota_Fiscal_Total.vl_serv_nao_trib,0) < 0 then
      --
      vn_fase := 16.1;
      --
      gv_mensagem_log := '"Valor Total dos Serviços sob não incidência ou não tributados pelo ICMS" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 17;
   -- Valida informação da Base de Cálculo do ISS
   if nvl(est_row_Nota_Fiscal_Total.vl_base_calc_iss,0) < 0 then
      --
      vn_fase := 17.1;
      --
      gv_mensagem_log := '"Base de Cálculo do ISS" da Nota Fiscal não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 18;
   -- Valida informação do Valor Total do ISS
   if nvl(est_row_Nota_Fiscal_Total.vl_imp_trib_iss,0) < 0 then
      --
      vn_fase := 18.1;
      --
      gv_mensagem_log := '"Valor Total do ISS" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 19;
   -- Valida informação do Valor do PIS sobre serviços
   if nvl(est_row_Nota_Fiscal_Total.vl_pis_iss,0) < 0 then
      --
      vn_fase := 19.1;
      --
      gv_mensagem_log := '"Valor do PIS sobre serviços" da Nota Fiscal não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 20;
   -- Valida informação do Valor do COFINS sobre serviços
   if nvl(est_row_Nota_Fiscal_Total.vl_cofins_iss,0) < 0 then
      --
      vn_fase := 20.1;
      --
      gv_mensagem_log := '"Valor do COFINS sobre serviços" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 21;
   -- Valida informação do Valor Retido de PIS
   if nvl(est_row_Nota_Fiscal_Total.vl_ret_pis,0) < 0 then
      --
      vn_fase := 21.1;
      --
      gv_mensagem_log := '"Valor Retido de PIS" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 22;
   -- Valida informação do Valor Retido de COFINS
   if nvl(est_row_Nota_Fiscal_Total.vl_ret_cofins,0) < 0 then
      --
      vn_fase := 22.1;
      --
      gv_mensagem_log := '"Valor Retido de COFINS" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 23;
   -- Valida informação do Valor Retido de CSLL
   if nvl(est_row_Nota_Fiscal_Total.vl_ret_csll,0) < 0 then
      --
      vn_fase := 23.1;
      --
      gv_mensagem_log := '"Valor Retido de CSLL" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 24;
   -- Valida informação do Base de Cálculo do IRRF
   if nvl(est_row_Nota_Fiscal_Total.vl_base_calc_irrf,0) < 0 then
      --
      vn_fase := 24.1;
      --
      gv_mensagem_log := '"Base de Cálculo do IRRF" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 25;
   -- Valida informação do Valor Retido do IRRF
   if nvl(est_row_Nota_Fiscal_Total.vl_ret_irrf,0) < 0 then
      --
      vn_fase := 25.1;
      --
      gv_mensagem_log := '"Valor Retido do IRRF" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 26;
   -- Valida informação do Base de Cálculo da Retenção da Previdência Social
   if nvl(est_row_Nota_Fiscal_Total.vl_base_calc_ret_prev,0) < 0 then
      --
      vn_fase := 26.1;
      --
      gv_mensagem_log := '"Base de Cálculo da Retenção da Previdência Social" da Nota Fiscal não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 27;
   -- Valida informação do Valor da Retenção da Previdência Social
   if nvl(est_row_Nota_Fiscal_Total.vl_ret_prev,0) < 0 then
      --
      vn_fase := 27.1;
      --
      gv_mensagem_log := '"Valor da Retenção da Previdência Social" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 28;
   -- Valida informado do Total de Serviços
   if nvl(est_row_Nota_Fiscal_Total.vl_total_serv,0) < 0 then
      --
      vn_fase := 28.1;
      --
      gv_mensagem_log := '"Total de Serviços" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 29;

   if nvl(est_row_Nota_Fiscal_Total.vl_abat_nt,0) < 0 then
      --
      vn_fase := 29.1;
      --
      gv_mensagem_log := '"Valor Abatimento Não Tributado" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 30;

   if nvl(est_row_Nota_Fiscal_Total.vl_forn,0) < 0 then
      --
      vn_fase := 30.1;
      --
      gv_mensagem_log := '"Valor total fornecido/consumido" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 31;

   if nvl(est_row_Nota_Fiscal_Total.vl_terc,0) < 0 then
      --
      vn_fase := 31.1;
      --
      gv_mensagem_log := '"Valor total cobrado em nome de terceiros" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 32;

   if nvl(est_row_Nota_Fiscal_Total.vl_servico,0) < 0 then
      --
      vn_fase := 32.1;
      --
      gv_mensagem_log := '"Valor dos Serviços" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 32.2;
   -- Valor Aproximado dos Tributos
   if nvl(est_row_Nota_Fiscal_Total.vl_tot_trib,0) < 0 then
      --
      vn_fase := 32.3;
      --
      gv_mensagem_log := '"ValorTotal Aproximado dos Tributos" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 32.4;
   --
   if nvl(est_row_Nota_Fiscal_Total.vl_pis_st,0) < 0 then
      --
      vn_fase := 32.5;
      --
      gv_mensagem_log := '"Valor Total do PIS retido por Situação Tributária" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 32.6;

   if nvl(est_row_Nota_Fiscal_Total.vl_cofins_st,0) < 0 then
      --
      vn_fase := 32.7;
      --
      gv_mensagem_log := '"Valor Total do COFINS  retido por Situação Tributária" da Nota Fiscal não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 33;
   --
   if est_row_Nota_Fiscal_Total.vl_serv_nao_trib = 0 then
      est_row_Nota_Fiscal_Total.vl_serv_nao_trib := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_base_calc_iss = 0 then
      est_row_Nota_Fiscal_Total.vl_base_calc_iss := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_imp_trib_iss = 0 then
      est_row_Nota_Fiscal_Total.vl_imp_trib_iss := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_pis_iss = 0 then
      est_row_Nota_Fiscal_Total.vl_pis_iss := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_cofins_iss = 0 then
      est_row_Nota_Fiscal_Total.vl_cofins_iss := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_ret_pis = 0 then
      est_row_Nota_Fiscal_Total.vl_ret_pis := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_ret_cofins = 0 then
      est_row_Nota_Fiscal_Total.vl_ret_cofins := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_ret_csll = 0 then
      est_row_Nota_Fiscal_Total.vl_ret_csll := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_base_calc_irrf = 0 then
      est_row_Nota_Fiscal_Total.vl_base_calc_irrf := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_ret_irrf = 0 then
      est_row_Nota_Fiscal_Total.vl_ret_irrf := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_base_calc_ret_prev = 0 then
      est_row_Nota_Fiscal_Total.vl_base_calc_ret_prev := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_ret_prev = 0 then
      est_row_Nota_Fiscal_Total.vl_ret_prev := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_total_serv = 0 then
      est_row_Nota_Fiscal_Total.vl_total_serv := null;
   end if;
   --
   if est_row_Nota_Fiscal_Total.vl_tot_trib = 0 then
      est_row_Nota_Fiscal_Total.vl_tot_trib := null;
   end if;
   --
   vn_fase := 34;
   --
   -- Se não exite registro de Log e o Tipo de Integração é 1 (valida e insere)
   -- então registra a informação do Total da Nota Fiscal
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_Nota_Fiscal_Total.notafiscal_id;
      --
   end if;
   --
   vn_fase := 35;
   --
   est_row_Nota_Fiscal_Total.vl_base_calc_icms  := nvl( est_row_Nota_Fiscal_Total.vl_base_calc_icms,0);
   est_row_Nota_Fiscal_Total.vl_imp_trib_icms   := nvl( est_row_Nota_Fiscal_Total.vl_imp_trib_icms,0);
   est_row_Nota_Fiscal_Total.vl_base_calc_st    := nvl( est_row_Nota_Fiscal_Total.vl_base_calc_st,0);
   est_row_Nota_Fiscal_Total.vl_imp_trib_st     := nvl( est_row_Nota_Fiscal_Total.vl_imp_trib_st,0);
   est_row_Nota_Fiscal_Total.vl_total_item      := nvl( est_row_Nota_Fiscal_Total.vl_total_item,0);
   est_row_Nota_Fiscal_Total.vl_frete           := nvl( est_row_Nota_Fiscal_Total.vl_frete,0);
   est_row_Nota_Fiscal_Total.vl_seguro          := nvl( est_row_Nota_Fiscal_Total.vl_seguro,0);
   est_row_Nota_Fiscal_Total.vl_desconto        := nvl( est_row_Nota_Fiscal_Total.vl_desconto,0);
   est_row_Nota_Fiscal_Total.vl_imp_trib_ii     := nvl( est_row_Nota_Fiscal_Total.vl_imp_trib_ii,0);
   est_row_Nota_Fiscal_Total.vl_imp_trib_ipi    := nvl( est_row_Nota_Fiscal_Total.vl_imp_trib_ipi,0);
   est_row_Nota_Fiscal_Total.vl_imp_trib_pis    := nvl( est_row_Nota_Fiscal_Total.vl_imp_trib_pis,0);
   est_row_Nota_Fiscal_Total.vl_imp_trib_cofins := nvl( est_row_Nota_Fiscal_Total.vl_imp_trib_cofins,0);
   est_row_Nota_Fiscal_Total.vl_outra_despesas  := nvl( est_row_Nota_Fiscal_Total.vl_outra_despesas,0);
   est_row_Nota_Fiscal_Total.vl_total_nf        := nvl( est_row_Nota_Fiscal_Total.vl_total_nf,0);
   est_row_Nota_Fiscal_Total.vl_fcp             := nvl( est_row_Nota_Fiscal_Total.vl_fcp,0);
   est_row_Nota_Fiscal_Total.vl_fcp_st          := nvl( est_row_Nota_Fiscal_Total.vl_fcp_st,0);
   est_row_Nota_Fiscal_Total.vl_fcp_st_ret      := nvl( est_row_Nota_Fiscal_Total.vl_fcp_st_ret,0);
   est_row_Nota_Fiscal_Total.vl_ipi_devol       := nvl( est_row_Nota_Fiscal_Total.vl_ipi_devol,0);
   est_row_Nota_Fiscal_Total.vl_pis_st          := nvl( est_row_Nota_Fiscal_Total.vl_pis_st,0);
   est_row_Nota_Fiscal_Total.vl_cofins_st       := nvl( est_row_Nota_Fiscal_Total.vl_cofins_st,0);
   --
   vn_fase := 36;
   --
   if nvl(est_row_Nota_Fiscal_Total.notafiscal_id,0) > 0 then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 37;
         --
         begin
            select max(nt.id)
              into est_row_nota_fiscal_total.id
              from nota_fiscal_total nt
             where nt.notafiscal_id = est_row_nota_fiscal_total.notafiscal_id;
         exception
            when others then
               est_row_nota_fiscal_total.id := null;
         end;
         --
         vn_fase := 38;
         --
         if nvl(est_row_nota_fiscal_total.id,0) = 0 then
            --
            vn_fase := 39;
            --
            select notafiscaltotal_seq.nextval
              into est_row_Nota_Fiscal_Total.id
              from dual;
            --
            vn_fase := 40;
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
            pk_csf_api.gv_objeto := 'pk_csf_api.pkb_integr_Nota_Fiscal_Total';
            pk_csf_api.gn_fase   := vn_fase;
            --
            insert into Nota_Fiscal_Total ( id
                                          , notafiscal_id
                                          , vl_base_calc_icms
                                          , vl_imp_trib_icms
                                          , vl_base_calc_st
                                          , vl_imp_trib_st
                                          , vl_total_item
                                          , vl_frete
                                          , vl_seguro
                                          , vl_desconto
                                          , vl_imp_trib_ii
                                          , vl_imp_trib_ipi
                                          , vl_imp_trib_pis
                                          , vl_imp_trib_cofins
                                          , vl_outra_despesas
                                          , vl_total_nf
                                          , vl_serv_nao_trib
                                          , vl_base_calc_iss
                                          , vl_imp_trib_iss
                                          , vl_pis_iss
                                          , vl_cofins_iss
                                          , vl_ret_pis
                                          , vl_ret_cofins
                                          , vl_ret_csll
                                          , vl_base_calc_irrf
                                          , vl_ret_irrf
                                          , vl_base_calc_ret_prev
                                          , vl_ret_prev
                                          , vl_total_serv
                                          , vl_abat_nt
                                          , vl_forn
                                          , vl_terc
                                          , vl_servico
                                          , vl_tot_trib
                                          , vl_fcp
                                          , vl_fcp_st
                                          , vl_fcp_st_ret
                                          , vl_ipi_devol
                                          , vl_pis_st
                                          , vl_cofins_st
                                          )
                                   values ( est_row_Nota_Fiscal_Total.id
                                          , est_row_Nota_Fiscal_Total.notafiscal_id
                                          , est_row_Nota_Fiscal_Total.vl_base_calc_icms
                                          , est_row_Nota_Fiscal_Total.vl_imp_trib_icms
                                          , est_row_Nota_Fiscal_Total.vl_base_calc_st
                                          , est_row_Nota_Fiscal_Total.vl_imp_trib_st
                                          , est_row_Nota_Fiscal_Total.vl_total_item
                                          , est_row_Nota_Fiscal_Total.vl_frete
                                          , est_row_Nota_Fiscal_Total.vl_seguro
                                          , est_row_Nota_Fiscal_Total.vl_desconto
                                          , est_row_Nota_Fiscal_Total.vl_imp_trib_ii
                                          , est_row_Nota_Fiscal_Total.vl_imp_trib_ipi
                                          , est_row_Nota_Fiscal_Total.vl_imp_trib_pis
                                          , est_row_Nota_Fiscal_Total.vl_imp_trib_cofins
                                          , est_row_Nota_Fiscal_Total.vl_outra_despesas
                                          , est_row_Nota_Fiscal_Total.vl_total_nf
                                          , est_row_Nota_Fiscal_Total.vl_serv_nao_trib
                                          , est_row_Nota_Fiscal_Total.vl_base_calc_iss
                                          , est_row_Nota_Fiscal_Total.vl_imp_trib_iss
                                          , est_row_Nota_Fiscal_Total.vl_pis_iss
                                          , est_row_Nota_Fiscal_Total.vl_cofins_iss
                                          , est_row_Nota_Fiscal_Total.vl_ret_pis
                                          , est_row_Nota_Fiscal_Total.vl_ret_cofins
                                          , est_row_Nota_Fiscal_Total.vl_ret_csll
                                          , est_row_Nota_Fiscal_Total.vl_base_calc_irrf
                                          , est_row_Nota_Fiscal_Total.vl_ret_irrf
                                          , est_row_Nota_Fiscal_Total.vl_base_calc_ret_prev
                                          , est_row_Nota_Fiscal_Total.vl_ret_prev
                                          , est_row_Nota_Fiscal_Total.vl_total_serv
                                          , est_row_Nota_Fiscal_Total.vl_abat_nt
                                          , est_row_Nota_Fiscal_Total.vl_forn
                                          , est_row_Nota_Fiscal_Total.vl_terc
                                          , est_row_Nota_Fiscal_Total.vl_servico
                                          , est_row_Nota_Fiscal_Total.vl_tot_trib
                                          , est_row_Nota_Fiscal_Total.vl_fcp
                                          , est_row_Nota_Fiscal_Total.vl_fcp_st
                                          , est_row_Nota_Fiscal_Total.vl_fcp_st_ret
                                          , est_row_Nota_Fiscal_Total.vl_ipi_devol
                                          , est_row_Nota_Fiscal_Total.vl_pis_st
                                          , est_row_Nota_Fiscal_Total.vl_cofins_st
                                          );
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
            pk_csf_api.gv_objeto := 'pk_csf_api';
            pk_csf_api.gn_fase   := null;
            --
         else
            --
            vn_fase := 41;
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
            pk_csf_api.gv_objeto := 'pk_csf_api.pkb_integr_Nota_Fiscal_Total';
            pk_csf_api.gn_fase   := vn_fase;
            --
            update Nota_Fiscal_Total set vl_base_calc_icms      = est_row_Nota_Fiscal_Total.vl_base_calc_icms
                                       , vl_imp_trib_icms       = est_row_Nota_Fiscal_Total.vl_imp_trib_icms
                                       , vl_base_calc_st        = est_row_Nota_Fiscal_Total.vl_base_calc_st
                                       , vl_imp_trib_st         = est_row_Nota_Fiscal_Total.vl_imp_trib_st
                                       , vl_total_item          = est_row_Nota_Fiscal_Total.vl_total_item
                                       , vl_frete               = est_row_Nota_Fiscal_Total.vl_frete
                                       , vl_seguro              = est_row_Nota_Fiscal_Total.vl_seguro
                                       , vl_desconto            = est_row_Nota_Fiscal_Total.vl_desconto
                                       , vl_imp_trib_ii         = est_row_Nota_Fiscal_Total.vl_imp_trib_ii
                                       , vl_imp_trib_ipi        = est_row_Nota_Fiscal_Total.vl_imp_trib_ipi
                                       , vl_imp_trib_pis        = est_row_Nota_Fiscal_Total.vl_imp_trib_pis
                                       , vl_imp_trib_cofins     = est_row_Nota_Fiscal_Total.vl_imp_trib_cofins
                                       , vl_outra_despesas      = est_row_Nota_Fiscal_Total.vl_outra_despesas
                                       , vl_total_nf            = est_row_Nota_Fiscal_Total.vl_total_nf
                                       , vl_serv_nao_trib       = est_row_Nota_Fiscal_Total.vl_serv_nao_trib
                                       , vl_base_calc_iss       = est_row_Nota_Fiscal_Total.vl_base_calc_iss
                                       , vl_imp_trib_iss        = est_row_Nota_Fiscal_Total.vl_imp_trib_iss
                                       , vl_pis_iss             = est_row_Nota_Fiscal_Total.vl_pis_iss
                                       , vl_cofins_iss          = est_row_Nota_Fiscal_Total.vl_cofins_iss
                                       , vl_ret_pis             = est_row_Nota_Fiscal_Total.vl_ret_pis
                                       , vl_ret_cofins          = est_row_Nota_Fiscal_Total.vl_ret_cofins
                                       , vl_ret_csll            = est_row_Nota_Fiscal_Total.vl_ret_csll
                                       , vl_base_calc_irrf      = est_row_Nota_Fiscal_Total.vl_base_calc_irrf
                                       , vl_ret_irrf            = est_row_Nota_Fiscal_Total.vl_ret_irrf
                                       , vl_base_calc_ret_prev  = est_row_Nota_Fiscal_Total.vl_base_calc_ret_prev
                                       , vl_ret_prev            = est_row_Nota_Fiscal_Total.vl_ret_prev
                                       , vl_total_serv          = est_row_Nota_Fiscal_Total.vl_total_serv
                                       , vl_abat_nt             = est_row_Nota_Fiscal_Total.vl_abat_nt
                                       , vl_forn                = est_row_Nota_Fiscal_Total.vl_forn
                                       , vl_terc                = est_row_Nota_Fiscal_Total.vl_terc
                                       , vl_servico             = est_row_Nota_Fiscal_Total.vl_servico
                                       , vl_tot_trib            = est_row_Nota_Fiscal_Total.vl_tot_trib
                                       , vl_fcp                 = est_row_Nota_Fiscal_Total.vl_fcp
                                       , vl_fcp_st              = est_row_Nota_Fiscal_Total.vl_fcp_st
                                       , vl_fcp_st_ret          = est_row_Nota_Fiscal_Total.vl_fcp_st_ret
                                       , vl_ipi_devol           = est_row_Nota_Fiscal_Total.vl_ipi_devol
                                       , vl_pis_st              = est_row_Nota_Fiscal_Total.vl_pis_st
                                       , vl_cofins_st           = est_row_Nota_Fiscal_Total.vl_cofins_st
             where id = est_row_nota_fiscal_total.id;
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
            pk_csf_api.gv_objeto := 'pk_csf_api';
            pk_csf_api.gn_fase   := null;
            --
         end if;
         --
      else
         --
         vn_fase := 42;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.pkb_integr_Nota_Fiscal_Total';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update Nota_Fiscal_Total set vl_base_calc_icms      = est_row_Nota_Fiscal_Total.vl_base_calc_icms
                                    , vl_imp_trib_icms       = est_row_Nota_Fiscal_Total.vl_imp_trib_icms
                                    , vl_base_calc_st        = est_row_Nota_Fiscal_Total.vl_base_calc_st
                                    , vl_imp_trib_st         = est_row_Nota_Fiscal_Total.vl_imp_trib_st
                                    , vl_total_item          = est_row_Nota_Fiscal_Total.vl_total_item
                                    , vl_frete               = est_row_Nota_Fiscal_Total.vl_frete
                                    , vl_seguro              = est_row_Nota_Fiscal_Total.vl_seguro
                                    , vl_desconto            = est_row_Nota_Fiscal_Total.vl_desconto
                                    , vl_imp_trib_ii         = est_row_Nota_Fiscal_Total.vl_imp_trib_ii
                                    , vl_imp_trib_ipi        = est_row_Nota_Fiscal_Total.vl_imp_trib_ipi
                                    , vl_imp_trib_pis        = est_row_Nota_Fiscal_Total.vl_imp_trib_pis
                                    , vl_imp_trib_cofins     = est_row_Nota_Fiscal_Total.vl_imp_trib_cofins
                                    , vl_outra_despesas      = est_row_Nota_Fiscal_Total.vl_outra_despesas
                                    , vl_total_nf            = est_row_Nota_Fiscal_Total.vl_total_nf
                                    , vl_serv_nao_trib       = est_row_Nota_Fiscal_Total.vl_serv_nao_trib
                                    , vl_base_calc_iss       = est_row_Nota_Fiscal_Total.vl_base_calc_iss
                                    , vl_imp_trib_iss        = est_row_Nota_Fiscal_Total.vl_imp_trib_iss
                                    , vl_pis_iss             = est_row_Nota_Fiscal_Total.vl_pis_iss
                                    , vl_cofins_iss          = est_row_Nota_Fiscal_Total.vl_cofins_iss
                                    , vl_ret_pis             = est_row_Nota_Fiscal_Total.vl_ret_pis
                                    , vl_ret_cofins          = est_row_Nota_Fiscal_Total.vl_ret_cofins
                                    , vl_ret_csll            = est_row_Nota_Fiscal_Total.vl_ret_csll
                                    , vl_base_calc_irrf      = est_row_Nota_Fiscal_Total.vl_base_calc_irrf
                                    , vl_ret_irrf            = est_row_Nota_Fiscal_Total.vl_ret_irrf
                                    , vl_base_calc_ret_prev  = est_row_Nota_Fiscal_Total.vl_base_calc_ret_prev
                                    , vl_ret_prev            = est_row_Nota_Fiscal_Total.vl_ret_prev
                                    , vl_total_serv          = est_row_Nota_Fiscal_Total.vl_total_serv
                                    , vl_abat_nt             = est_row_Nota_Fiscal_Total.vl_abat_nt
                                    , vl_forn                = est_row_Nota_Fiscal_Total.vl_forn
                                    , vl_terc                = est_row_Nota_Fiscal_Total.vl_terc
                                    , vl_servico             = est_row_Nota_Fiscal_Total.vl_servico
                                    , vl_tot_trib            = est_row_Nota_Fiscal_Total.vl_tot_trib
                                    , vl_fcp                 = est_row_Nota_Fiscal_Total.vl_fcp
                                    , vl_fcp_st              = est_row_Nota_Fiscal_Total.vl_fcp_st
                                    , vl_fcp_st_ret          = est_row_Nota_Fiscal_Total.vl_fcp_st_ret
                                    , vl_ipi_devol           = est_row_Nota_Fiscal_Total.vl_ipi_devol
                                    , vl_pis_st              = est_row_Nota_Fiscal_Total.vl_pis_st
                                    , vl_cofins_st           = est_row_Nota_Fiscal_Total.vl_cofins_st
          where id = est_row_Nota_Fiscal_Total.id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Nota_Fiscal_Total fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_TOTAL;

------------------------------------------------------------------
-- Integra as informações de Totais de Nota Fiscal - Flex Field --
------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTAFISCAL_TOTAL_FF ( EST_LOG_GENERICO_NF   IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                         , EN_NOTAFISCAL_ID      IN            NOTA_FISCAL.ID%TYPE
                                         , EN_NOTAFISCALTOTAL_ID IN            NOTA_FISCAL_TOTAL.ID%TYPE
                                         , EV_ATRIBUTO           IN            VARCHAR2
                                         , EV_VALOR              IN            VARCHAR2 ) IS
   --
   vn_fase                 number := 0;
   vn_loggenerico_id       log_generico_nf.id%type;
   vv_mensagem             varchar2(1000) := null;
   vn_dmtipocampo          ff_obj_util_integr.dm_tipo_campo%type;
   vn_nf_id                nota_fiscal_total.notafiscal_id%type;
   vn_vl_icms_deson        nota_fiscal_total.vl_icms_deson%type;
   vn_vl_deducao           nota_fiscal_total.vl_deducao%type;
   vn_vl_outras_ret        nota_fiscal_total.vl_outras_ret%type;
   vn_vl_desc_incond       nota_fiscal_total.vl_desc_incond%type;
   vn_vl_desc_cond         nota_fiscal_total.vl_desc_cond%type;
   vn_vl_icms_uf_dest      nota_fiscal_total.vl_icms_uf_dest%type;
   vn_vl_icms_uf_remet     nota_fiscal_total.vl_icms_uf_remet%type;
   vn_vl_comb_pobr_uf_dest nota_fiscal_total.vl_comb_pobr_uf_dest%type;
   vn_vl_ret_iss           nota_fiscal_total.vl_ret_iss%type;
   vn_vl_fcp               nota_fiscal_total.vl_fcp%type;
   vn_vl_fcp_st            nota_fiscal_total.vl_fcp_st%type;
   vn_vl_fcp_st_ret        nota_fiscal_total.vl_fcp_st_ret%type;
   vn_vl_ipi_devol         nota_fiscal_total.vl_ipi_devol%type;
   vn_vl_abat_nt           nota_fiscal_total.vl_abat_nt%type;
   vn_vl_pis_st            nota_fiscal_total.vl_pis_st%type;
   vn_vl_cofins_st         nota_fiscal_total.vl_cofins_st%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   gv_mensagem_log := null;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Totais de Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Totais de Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'VL_ICMS_DESON' then
         --
         vn_fase := 10;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
               --
               vn_fase := 10.2;
               --
               vn_vl_icms_deson := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 10.3;
               --
               gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'VL_DEDUCAO' then
            --
            vn_fase := 11;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 11.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 11.2;
                  --
                  vn_vl_deducao := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 11.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_OUTRAS_RET' then
            --
            vn_fase := 12;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 12.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 12.2;
                  --
                  vn_vl_outras_ret := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                  , ev_atributo => trim(ev_atributo)
                                                                  , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 12.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_DESC_INCOND' then
            --
            vn_fase := 13;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 13.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 13.2;
                  --
                  vn_vl_desc_incond := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                   , ev_atributo => trim(ev_atributo)
                                                                   , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 13.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_DESC_COND' then
            --
            vn_fase := 14;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 14.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 14.2;
                  --
                  vn_vl_desc_cond := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                 , ev_atributo => trim(ev_atributo)
                                                                 , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 14.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_ICMS_UF_DEST' then
            --
            vn_fase := 15;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 15.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 15.2;
                  --
                  vn_vl_icms_uf_dest := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                    , ev_atributo => trim(ev_atributo)
                                                                    , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 15.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_ICMS_UF_REMET' then
            --
            vn_fase := 16;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 16.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 16.2;
                  --
                  vn_vl_icms_uf_remet := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                     , ev_atributo => trim(ev_atributo)
                                                                     , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 16.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_COMB_POBR_UF_DEST' then
            --
            vn_fase := 17;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 17.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 17.2;
                  --
                  vn_vl_comb_pobr_uf_dest := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                         , ev_atributo => trim(ev_atributo)
                                                                         , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 17.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --

            end if;
            --
      elsif trim(ev_atributo) = 'VL_RET_ISS' then
            --
            vn_fase := 17;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 17.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 17.2;
                  --
                  vn_vl_ret_iss := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                , ev_atributo => trim(ev_atributo)
                                                                , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 17.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --

            end if;
            --
      elsif trim(ev_atributo) = 'VL_FCP' then
            --
            vn_fase := 18;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 18.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 18.2;
                  --
                  vn_vl_fcp := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                , ev_atributo => trim(ev_atributo)
                                                                , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 18.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --

            end if;
            --
      elsif trim(ev_atributo) = 'VL_FCP_ST' then
            --
            vn_fase := 19;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 19.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 19.2;
                  --
                  vn_vl_fcp_st := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                , ev_atributo => trim(ev_atributo)
                                                                , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 19.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --

            end if;
            --
      elsif trim(ev_atributo) = 'VL_FCP_ST_RET' then
            --
            vn_fase := 20;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 20.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 20.2;
                  --
                  vn_vl_fcp_st_ret := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                , ev_atributo => trim(ev_atributo)
                                                                , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 20.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --

            end if;
            --
      elsif trim(ev_atributo) = 'VL_IPI_DEVOL' then
            --
            vn_fase := 21;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 21.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 21.2;
                  --
                  vn_vl_ipi_devol := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                , ev_atributo => trim(ev_atributo)
                                                                , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 21.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --

            end if;
            --
      elsif trim(ev_atributo) = 'VL_ABAT_NT' then
            --
            vn_fase := 22;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 22.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 22.2;
                  --
                  vn_vl_abat_nt := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                , ev_atributo => trim(ev_atributo)
                                                                , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 22.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_PIS_ST' then
            --
            vn_fase := 23;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 23.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 23.2;
                  --
                  vn_vl_pis_st := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
      else
         --
                  vn_fase := 23.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      elsif trim(ev_atributo) = 'VL_COFINS_ST' then
            --
            vn_fase := 24;
            --
            if trim(ev_valor) is not null then
               --
               vn_fase := 24.1;
               --
               if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
                  --
                  vn_fase := 24.2;
                  --
                  vn_vl_cofins_st := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_TOTAL_FF'
                                                                  , ev_atributo => trim(ev_atributo)
                                                                  , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  vn_fase := 24.3;
                  --
                  gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
      else
         --
         vn_fase := 23;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 24;
   --
   if nvl(en_notafiscal_id,0) = 0 then
      --
      vn_fase := 25;
      --
      gv_mensagem_log := 'Identificador da nota fiscal não informado - Integra as informações de Totais de Nota Fiscal - Campos Flex-Field.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf
         set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_notafiscaltotal_id,0) > 0 and
      trim(ev_atributo) = 'VL_ICMS_DESON' and
      nvl(vn_vl_icms_deson, -1) >= 0 and
      gv_mensagem_log is null then
      --
      vn_fase := 99.3;
      --
      -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
      pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
      pk_csf_api.gn_fase   := vn_fase;
      --
      update nota_fiscal_total nft
         set nft.vl_icms_deson = vn_vl_icms_deson
       where nft.id = en_notafiscaltotal_id;
      --
      -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
      pk_csf_api.gv_objeto := 'pk_csf_api';
      pk_csf_api.gn_fase   := null;
      --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_DEDUCAO' and
         nvl(vn_vl_deducao, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.4;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_deducao = vn_vl_deducao
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_OUTRAS_RET' and
         nvl(vn_vl_outras_ret, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.5;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_outras_ret = vn_vl_outras_ret
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_DESC_INCOND' and
         nvl(vn_vl_desc_incond, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.6;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_desc_incond = vn_vl_desc_incond
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_DESC_COND' and
         nvl(vn_vl_desc_cond, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.7;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_desc_cond = vn_vl_desc_cond
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_ICMS_UF_DEST' and
         nvl(vn_vl_icms_uf_dest, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.8;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.pkb_integr_Nota_Fiscal_Total';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_icms_uf_dest = vn_vl_icms_uf_dest
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_ICMS_UF_REMET' and
         nvl(vn_vl_icms_uf_remet, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.9;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_icms_uf_remet = vn_vl_icms_uf_remet
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_COMB_POBR_UF_DEST' and
         nvl(vn_vl_comb_pobr_uf_dest, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.10;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_comb_pobr_uf_dest = vn_vl_comb_pobr_uf_dest
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_RET_ISS' and
         nvl(vn_vl_ret_iss, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.11;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_ret_iss = vn_vl_ret_iss
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_FCP' and
         nvl(vn_vl_fcp, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.12;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.VL_FCP = vn_vl_fcp
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_FCP_ST' and
         nvl(vn_vl_fcp_st, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.13;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.VL_FCP_ST = vn_vl_fcp_st
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_FCP_ST_RET' and
         nvl(vn_vl_fcp_st_ret, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.14;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.VL_FCP_ST_RET = vn_vl_fcp_st_ret
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_IPI_DEVOL' and
         nvl(vn_vl_ipi_devol, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.15;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.VL_IPI_DEVOL = vn_vl_ipi_devol
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo) = 'VL_ABAT_NT' and
         nvl(vn_vl_abat_nt, -1) >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.16;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_abat_nt = vn_vl_abat_nt
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo)            = 'VL_PIS_ST' and
         nvl(vn_vl_pis_st, -1)        >= 0 and
         gv_mensagem_log is null then
         --
         vn_fase := 99.16;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api_nfce.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_pis_st = vn_vl_pis_st
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := null;
         pk_csf_api.gn_fase   := null;
         --
   elsif nvl(en_notafiscaltotal_id,0) > 0 and
         trim(ev_atributo)            = 'VL_COFINS_ST' and
         nvl(vn_vl_cofins_st, -1)     >= 0 and
         gv_mensagem_log              is null then
         --
         vn_fase := 99.16;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api_nfce.PKB_INTEGR_NOTAFISCAL_TOTAL_FF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nft
            set nft.vl_cofins_st = vn_vl_cofins_st
          where nft.id = en_notafiscaltotal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := null;
         pk_csf_api.gn_fase   := null;
         --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_INTEGR_NOTA_FISCAL_TOTAL_FF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTAFISCAL_TOTAL_FF;

------------------------------------------------------
-- Integra as informações adicionais da Nota Fiscal --
------------------------------------------------------
PROCEDURE PKB_INTEGR_NFINFOR_FISCAL ( EST_LOG_GENERICO_NF         IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                    , EST_ROW_NFINFOR_FISCAL   IN OUT NOCOPY  NFINFOR_FISCAL%ROWTYPE
                                    , EV_CD_OBS                IN OBS_LANCTO_FISCAL.COD_OBS%TYPE DEFAULT NULL
                                    , EN_MULTORG_ID            IN MULT_ORG.ID%TYPE ) IS
   --
   vn_fase             number := 0;
   vn_loggenerico_id   log_generico_nf.id%type;
   vn_NfinforFiscal_id Nfinfor_Fiscal.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_NFInfor_Fiscal.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para relacionar as Informações Fiscais.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Busca chave do lancamento fiscal.
   est_row_NFInfor_Fiscal.obslanctofiscal_id := pk_csf.fkg_id_obs_lancto_fiscal ( en_multorg_id => en_multorg_id
                                                                                , ev_cod_obs    => ev_cd_obs );
   --
   if nvl(est_row_NFInfor_Fiscal.obslanctofiscal_id, 0) = 0  then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"O Código da Observação do Lançamento Fiscal" ('||ev_cd_obs||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   -- "Limpa" caractere do campo texto complementar
   if trim(est_row_NFInfor_Fiscal.txt_compl) is not null then
      --
      vn_fase := 3.1;
      --
      est_row_NFInfor_Fiscal.txt_compl := trim( pk_csf.fkg_converte ( est_row_NFInfor_Fiscal.txt_compl ) );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Se não existe registro de Log e o Tipo de INtegração é 1 (valida e insere)
   -- então registra a Informações Fiscais
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_NFInfor_Fiscal.notafiscal_id;
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_NFInfor_Fiscal.notafiscal_id,0) > 0
      and nvl(est_row_NFInfor_Fiscal.obslanctofiscal_id,0) > 0
      then
      --
      vn_fase := 6;
      --
      -- Verifica se já existe o registro
      begin
         select id
           into vn_NfinforFiscal_id
           from Nfinfor_Fiscal
          where notafiscal_id          = est_row_NFInfor_Fiscal.notafiscal_id
            and obslanctofiscal_id     = est_row_NFInfor_Fiscal.obslanctofiscal_id
            and nvl(trim(txt_compl),0) = nvl(trim(est_row_NFInfor_Fiscal.txt_compl),0);
      exception
         when too_many_rows then
            vn_NfinforFiscal_id := 1;
         when others then
            vn_NfinforFiscal_id := null;
      end;
      --
      if nvl(gn_tipo_integr,0) = 0 or nvl(vn_NfinforFiscal_id,0) > 0 then
         --
         vn_fase := 7;
         --
         update Nfinfor_Fiscal set obslanctofiscal_id = est_row_NFInfor_Fiscal.obslanctofiscal_id
                                 , txt_compl          = est_row_NFInfor_Fiscal.txt_compl
          where id = est_row_NFInfor_Fiscal.id;
         --
      elsif nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 8;
         --
         select nfinforfiscal_seq.nextval
           into est_row_NFInfor_Fiscal.id
           from dual;
         --
         vn_fase := 9;
         --
         insert into Nfinfor_Fiscal ( id
                                    , notafiscal_id
                                    , obslanctofiscal_id
                                    , txt_compl
                                    )
                             values ( est_row_NFInfor_Fiscal.id
                                    , est_row_NFInfor_Fiscal.notafiscal_id
                                    , est_row_NFInfor_Fiscal.obslanctofiscal_id
                                    , est_row_NFInfor_Fiscal.txt_compl
                                    );
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_NFInfor_Fiscal fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFINFOR_FISCAL;

------------------------------------------------------
-- Integra as informações adicionais da Nota Fiscal --
------------------------------------------------------
PROCEDURE PKB_INTEGR_NFINFOR_ADIC ( EST_LOG_GENERICO_NF       IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                  , EST_ROW_NFINFOR_ADIC   IN OUT NOCOPY  NFINFOR_ADIC%ROWTYPE
                                  , EN_CD_ORIG_PROC        IN             ORIG_PROC.CD%TYPE DEFAULT NULL ) IS
   --
   vn_fase               number := 0;
   vn_loggenerico_id     log_generico_nf.id%type;
   vn_dm_limpa_inf_compl number := 0;
   vn_NFInforAdic_id     NFInfor_Adic.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_NFInfor_Adic.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para relacionar as Informações Adicionais.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if est_row_NFInfor_Adic.dm_tipo not in (0, 1, 2) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Indicador do emitente da Informação Complementar da Nota Fiscal" ('||est_row_NFInfor_Adic.dm_tipo||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 2.2;
      --
      gv_dominio := null;
      --
      gv_dominio := pk_csf.fkg_dominio ( ev_dominio   => 'NFINFOR_ADIC.DM_TIPO'
                                       , ev_vl        => est_row_NFInfor_Adic.dm_tipo );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(est_row_NFInfor_Adic.campo) = '0' then
      --
      est_row_NFInfor_Adic.campo := null;
      --
   end if;
   --
   vn_fase := 4;
   -- Contribuinte
   if est_row_NFInfor_Adic.dm_tipo = 0 then -- Contribuinte
      --
      vn_fase := 4.1;
      --
      if trim( est_row_NFInfor_Adic.campo ) is null then
         --
         vn_fase := 4.2;
         --
         if nvl(length( trim(pk_csf.fkg_converte ( est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 )) ),0) > 4000 then
            --
            vn_fase := 4.3;
            --
            gv_mensagem_log := 'Informações Complementares de interesse do Contribuinte ('||gv_dominio||') não pode ser maiores que 4000 caracteres.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         elsif trim( pk_csf.fkg_converte ( est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 ) ) is null then
            --
            vn_fase := 4.4;
            --
            gv_mensagem_log := '"Informações Complementares da NF-e" de interesse do Contribuinte ('||est_row_NFInfor_Adic.conteudo||
                               ') não foi informada. Exemplo: Pedido de Venda, Observação da nota, Dispositivo legal, etc.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      elsif trim ( est_row_NFInfor_Adic.campo ) is not null then
         --
         vn_fase := 4.6;
         --
         if nvl(length(est_row_NFInfor_Adic.campo),0) > 20 then
            --
            vn_fase := 4.7;
            --
            gv_mensagem_log := '"Identificação do campo ('||gv_dominio||') não pode ser maior que 20 caracteres.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 4.8;
         --
         if nvl(length(trim(pk_csf.fkg_converte (est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 )) ),0) > 60 then
            --
            vn_fase := 4.9;
            --
            gv_mensagem_log := '"Conteúdo do campo ('||gv_dominio||') não pode ser maior que 60 caracteres.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         elsif trim( trim(pk_csf.fkg_converte (est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 )) ) is null then
            --
            vn_fase := 4.10;
            --
            gv_mensagem_log := '"Conteúdo do campo ('||gv_dominio||') não pode ser nulo.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   elsif est_row_NFInfor_Adic.dm_tipo = 1 then -- Fisco
      --
      vn_fase := 5.1;
      --
      if trim( est_row_NFInfor_Adic.campo ) is null then
         --
         vn_fase := 5.2;
         --
         if nvl(length( trim(pk_csf.fkg_converte (est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 )) ),0) > 2000 then
            --
            vn_fase := 5.3;
            --
            gv_mensagem_log := '"Informações Complementares de interesse do Fisco não podem ser maiores que 2000 caracteres.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         elsif trim( trim(pk_csf.fkg_converte (est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 )) ) is null then
            --
            vn_fase := 5.4;
            --
            gv_mensagem_log := 'Informações Complementares de interesse do Fisco não foram informadas.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      elsif trim ( est_row_NFInfor_Adic.campo ) is not null then
         --
         vn_fase := 5.5;
         --
         if nvl(length(est_row_NFInfor_Adic.campo),0) > 20 then
            --
            vn_fase := 5.6;
            --
            gv_mensagem_log := '"Identificação do campo ('||gv_dominio||') não pode ser maior que 20 caracteres.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 5.7;
         --
         if nvl(length( trim(pk_csf.fkg_converte (est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 )) ),0) > 60 then
            --
            vn_fase := 5.8;
            --
            gv_mensagem_log := '"Conteúdo do campo ('||gv_dominio||') não pode ser maior que 60 caracteres.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         elsif trim( trim(pk_csf.fkg_converte (est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 )) ) is null then
            --
            vn_fase := 5.9;
            --
            gv_mensagem_log := '"Conteúdo do campo ('||gv_dominio||') não pode ser nulo.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   elsif est_row_NFInfor_Adic.dm_tipo = 2 then -- Processo
      --
      vn_fase := 6.1;
      --
      est_row_NFInfor_Adic.origproc_id := pk_csf.fkg_Orig_Proc_id ( en_cd => en_cd_orig_proc );
      --
      vn_fase := 6.2;
      -- Valida a informação da origem do processo
      if nvl(est_row_NFInfor_Adic.origproc_id,0) = 0 then
         --
         vn_fase := 6.3;
         --
         gv_mensagem_log := 'Código da Origem do Processo ('||en_cd_orig_proc||') está inválido.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 6.4;
      --
      if nvl(length( trim(pk_csf.fkg_converte (est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 )) ),0) > 60 then
         --
         vn_fase := 6.5;
         --
         gv_mensagem_log := 'Número do processo não pode ser maior que 60 caracteres.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      elsif trim( trim(pk_csf.fkg_converte (est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 )) ) is null then
         --
         vn_fase := 6.6;
         --
         gv_mensagem_log := 'Número do processo não pode ser nulo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 7;
   --
   -- Se não existe registro de Log e o Tipo de INtegração é 1 (valida e insere)
   -- então registra a Informação Adicional da Nota Fiscal
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_NFInfor_Adic.notafiscal_id;
      --
   end if;
   --
   vn_fase := 8;
   --
   est_row_NFInfor_Adic.campo    := trim( pk_csf.fkg_converte ( est_row_NFInfor_Adic.campo ) );
   --
   begin
      --
      select e.dm_limpa_inf_compl
        into vn_dm_limpa_inf_compl
        from empresa e
       where e.id = gt_row_nota_fiscal.empresa_id;
      --
   exception
      when others then
      --
      vn_dm_limpa_inf_compl := 0;
      --
   end;
   --
   if vn_dm_limpa_inf_compl = 1 then -- SIM
      --
      est_row_NFInfor_Adic.conteudo := trim(pk_csf.fkg_converte ( est_row_NFInfor_Adic.conteudo, 0, 1, 2, 1, 1 ));
      --
   else
      --
      --est_row_NFInfor_Adic.conteudo := trim( pk_csf.fkg_converte ( ev_string            => est_row_NFInfor_Adic.conteudo
      --                                                           , en_remove_spc_extra  => 0 ) );
      --
      est_row_NFInfor_Adic.conteudo := trim(pk_csf.fkg_limpa_acento2 ( est_row_NFInfor_Adic.conteudo ));
      --
   end if;
   --
   vn_fase := 9;
   --
   if nvl(est_row_NFInfor_Adic.notafiscal_id,0) > 0
      and est_row_NFInfor_Adic.dm_tipo in (0, 1, 2)
      then
      --
      vn_fase := 10;
      --
      -- Verifica se já existe o registro
      begin
         select id
           into vn_NFInforAdic_id
           from NFInfor_Adic
          where notafiscal_id      = est_row_NFInfor_Adic.notafiscal_id
            and dm_tipo            = est_row_NFInfor_Adic.dm_tipo
            and nvl(trim(campo),0) = nvl(trim(est_row_NFInfor_Adic.campo),0);
      exception
         when too_many_rows then
            vn_NFInforAdic_id := 1;
         when others then
            vn_NFInforAdic_id := null;
      end;
      --
      if nvl(gn_tipo_integr,0) = 0 or nvl(vn_NFInforAdic_id,0) > 0 then
         --
         vn_fase := 11;
         --
         update NFInfor_Adic set infcompdctofis_id  = est_row_NFInfor_Adic.infcompdctofis_id
                               , conteudo           = est_row_NFInfor_Adic.conteudo
                               , origproc_id        = est_row_NFInfor_Adic.origproc_id
          where id = est_row_NFInfor_Adic.id;
         --
      elsif nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 12;
         --
         select NFInforAdic_seq.nextval
           into est_row_NFInfor_Adic.id
           from dual;
         --
         vn_fase := 13;
         --
         insert into NFInfor_Adic ( id
                                  , notafiscal_id
                                  , dm_tipo
                                  , infcompdctofis_id
                                  , campo
                                  , conteudo
                                  , origproc_id 
                                  )
                           values ( est_row_NFInfor_Adic.id
                                  , est_row_NFInfor_Adic.notafiscal_id
                                  , est_row_NFInfor_Adic.dm_tipo
                                  , est_row_NFInfor_Adic.infcompdctofis_id
                                  , est_row_NFInfor_Adic.campo
                                  , est_row_NFInfor_Adic.conteudo
                                  , est_row_NFInfor_Adic.origproc_id 
                                  );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_NFInfor_Adic fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFINFOR_ADIC;

--------------------------------------
-- Integra informações que do Fisco --
--------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_FISCO ( EST_LOG_GENERICO_NF           IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                       , EST_ROW_NOTA_FISCAL_FISCO  IN OUT NOCOPY  NOTA_FISCAL_FISCO%ROWTYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_Nota_Fiscal_Fisco.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0  then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para relacionar as Informações do Fisco.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   gv_dominio := null;
   -- Valida informação do modelo de documento de arrecadação
   if est_row_Nota_Fiscal_Fisco.dm_cod_mod_da not in (0, 1) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Modelo de documento de arrecadação ('||est_row_Nota_Fiscal_Fisco.dm_cod_mod_da||') está incorreto.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 2.2;
      --
      gv_dominio := pk_csf.fkg_dominio ( ev_dominio  => 'NOTA_FISCAL_FISCO.DM_COD_MOD_DA'
                                       , ev_vl       => est_row_Nota_Fiscal_Fisco.dm_cod_mod_da );
      --
   end if;
   --
   vn_fase := 3;
   --
   -- Valida informação do Órgão emitente
   if trim( est_row_Nota_Fiscal_Fisco.orgao_emit ) is null then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Órgão emitente do Modelo de documento de arrecadação ('||gv_dominio||') deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Valida informação do CNPJ
   if trim( est_row_Nota_Fiscal_Fisco.cnpj ) is null then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'CNPJ do Órgão emitente do Modelo de documento de arrecadação ('||gv_dominio||') deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   -- Valida informação da Matrícula do agente
   if trim( est_row_Nota_Fiscal_Fisco.matr_agente ) is null then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Matrícula do agente do Modelo de documento de arrecadação ('||gv_dominio||') deve ser informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   -- Valida informação do Nome do agente
   if trim( est_row_Nota_Fiscal_Fisco.nome_agente ) is null then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := 'Nome do agente do Modelo de documento de arrecadação ('||gv_dominio||') deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   /*
   -- Valida informação do Telefone
   if trim ( est_row_Nota_Fiscal_Fisco.fone ) is null then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := 'Telefone do Modelo de documento de arrecadação ('||gv_dominio||') deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   */
   --
   vn_fase := 8;
   --
   -- Valida informação da Sigla da UF
   if pk_csf.fkg_uf_valida ( ev_sigla_estado => est_row_Nota_Fiscal_Fisco.uf ) = false then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := 'Sigla da UF do Modelo de documento de arrecadação ('||gv_dominio||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   /*
   -- Valida informação do Número do Documento de Arrecadação de Receita
   if trim( est_row_Nota_Fiscal_Fisco.nro_dar ) is null then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := 'Número do Documento de Arrecadação de Receita ('||gv_dominio||') deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   */
   --
   vn_fase := 10;
   --
   /*
   -- Valida informação da Data de emissão do Documento de Arrecadação
   if est_row_Nota_Fiscal_Fisco.dt_emiss is null then
      --
      vn_fase := 10.1;
      --
      gv_mensagem_log := 'Data de emissão do Documento de Arrecadação de Receita ('||gv_dominio||') deve ser informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   */
   --
   vn_fase := 11;
   --
   /*
   -- Valida informação do Valor Total constante no Documento de arrecadação de Receita
   if nvl(est_row_Nota_Fiscal_Fisco.vl_dar,0) < 0 then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := 'Valor Total constante no Documento de arrecadação de Receita ('||gv_dominio||
                         ') não pode ser negativo ('||est_row_Nota_Fiscal_Fisco.vl_dar||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   */
   --
   vn_fase := 12;
   --
   -- Valida informação do Repartição Fiscal emitente
   if trim( est_row_Nota_Fiscal_Fisco.repart_emit ) is null then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := 'Repartição Fiscal emitente do Documento de Arrecadação de Receita ('||gv_dominio||') deve ser informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_Nota_Fiscal_Fisco.notafiscal_id;
      --
   end if;
   --
   vn_fase := 14;
   --
   est_row_Nota_Fiscal_Fisco.orgao_emit   := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Fisco.orgao_emit ) );
   est_row_Nota_Fiscal_Fisco.cnpj         := lpad(trim( est_row_Nota_Fiscal_Fisco.cnpj ), 14, '0');
   est_row_Nota_Fiscal_Fisco.matr_agente  := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Fisco.matr_agente ) );
   est_row_Nota_Fiscal_Fisco.nome_agente  := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Fisco.nome_agente ) );
   est_row_Nota_Fiscal_Fisco.fone         := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Fisco.fone ) );
   est_row_Nota_Fiscal_Fisco.uf           := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Fisco.uf ) );
   est_row_Nota_Fiscal_Fisco.nro_dar      := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Fisco.nro_dar ) );
   est_row_Nota_Fiscal_Fisco.repart_emit  := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Fisco.repart_emit ) );
   est_row_Nota_Fiscal_Fisco.cod_aut_banc := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Fisco.cod_aut_banc ) );
   est_row_Nota_Fiscal_Fisco.vl_dar       := nvl(est_row_Nota_Fiscal_Fisco.vl_dar, 0);
   --
   vn_fase := 15;
   --
   if nvl(est_row_Nota_Fiscal_Fisco.notafiscal_id,0) > 0
      and est_row_Nota_Fiscal_Fisco.dm_cod_mod_da in (0, 1)
      and est_row_Nota_Fiscal_Fisco.orgao_emit is not null
      and est_row_Nota_Fiscal_Fisco.cnpj is not null
      and est_row_Nota_Fiscal_Fisco.matr_agente is not null
      and est_row_Nota_Fiscal_Fisco.nome_agente is not null
      --and est_row_Nota_Fiscal_Fisco.fone is not null
      and est_row_Nota_Fiscal_Fisco.uf is not null
      --and est_row_Nota_Fiscal_Fisco.nro_dar is not null
      --and est_row_Nota_Fiscal_Fisco.dt_emiss is not null
      and est_row_Nota_Fiscal_Fisco.repart_emit is not null
      and est_row_Nota_Fiscal_Fisco.dt_pagto is not null 
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 16;
         --
         select notafiscalfisco_seq.nextval
           into est_row_Nota_Fiscal_Fisco.ID
           from dual;
         --
         vn_fase := 17;
         --
         insert into Nota_Fiscal_Fisco ( ID
                                       , notafiscal_id
                                       , dm_cod_mod_da
                                       , orgao_emit
                                       , cnpj
                                       , matr_agente
                                       , nome_agente
                                       , fone
                                       , uf
                                       , nro_dar
                                       , dt_emiss
                                       , vl_dar
                                       , repart_emit
                                       , dt_pagto
                                       , cod_aut_banc )
                                values ( est_row_Nota_Fiscal_Fisco.ID
                                       , est_row_Nota_Fiscal_Fisco.notafiscal_id
                                       , est_row_Nota_Fiscal_Fisco.dm_cod_mod_da
                                       , est_row_Nota_Fiscal_Fisco.orgao_emit
                                       , est_row_Nota_Fiscal_Fisco.cnpj
                                       , est_row_Nota_Fiscal_Fisco.matr_agente
                                       , est_row_Nota_Fiscal_Fisco.nome_agente
                                       , est_row_Nota_Fiscal_Fisco.fone
                                       , est_row_Nota_Fiscal_Fisco.uf
                                       , est_row_Nota_Fiscal_Fisco.nro_dar
                                       , est_row_Nota_Fiscal_Fisco.dt_emiss
                                       , est_row_Nota_Fiscal_Fisco.vl_dar
                                       , est_row_Nota_Fiscal_Fisco.repart_emit
                                       , est_row_Nota_Fiscal_Fisco.dt_pagto
                                       , est_row_Nota_Fiscal_Fisco.cod_aut_banc
                                       );
         --
      else
         --
         vn_fase := 18;
         --
         update Nota_Fiscal_Fisco set dm_cod_mod_da  = est_row_Nota_Fiscal_Fisco.dm_cod_mod_da
                                    , orgao_emit     = est_row_Nota_Fiscal_Fisco.orgao_emit
                                    , cnpj           = est_row_Nota_Fiscal_Fisco.cnpj
                                    , matr_agente    = est_row_Nota_Fiscal_Fisco.matr_agente
                                    , nome_agente    = est_row_Nota_Fiscal_Fisco.nome_agente
                                    , fone           = est_row_Nota_Fiscal_Fisco.fone
                                    , uf             = est_row_Nota_Fiscal_Fisco.uf
                                    , nro_dar        = est_row_Nota_Fiscal_Fisco.nro_dar
                                    , dt_emiss       = est_row_Nota_Fiscal_Fisco.dt_emiss
                                    , vl_dar         = est_row_Nota_Fiscal_Fisco.vl_dar
                                    , repart_emit    = est_row_Nota_Fiscal_Fisco.repart_emit
                                    , dt_pagto       = est_row_Nota_Fiscal_Fisco.dt_pagto
                                    , cod_aut_banc   = est_row_Nota_Fiscal_Fisco.cod_aut_banc
          where id = est_row_Nota_Fiscal_Fisco.ID;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Nota_Fiscal_Fisco fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_FISCO;

--------------------------------------------------
-- Integra informações da Duplicata de cobrança --
--------------------------------------------------
PROCEDURE PKB_INTEGR_NFCOBR_DUP ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                , EST_ROW_NFCOBR_DUP   IN OUT NOCOPY  NFCOBR_DUP%ROWTYPE
                                , EN_NOTAFISCAL_ID     IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_nfcobrdup_id   nfcobr_dup.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_NFCobr_Dup.nfcobr_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não existe Dados da Cobrança para a Duplicata.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   -- Valida Informação do Número da Parcela
   if trim( est_row_NFCobr_Dup.nro_parc ) is null then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := 'Número da Parcela da Duplicata não foi informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   -- Valida informação do vencimento da Duplicata
   if est_row_NFCobr_Dup.dt_vencto is null then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Data de vencimento da Parcela da Duplicata não foi informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif to_number(to_char(est_row_NFCobr_Dup.dt_vencto, 'RRRR')) > 2099 then
      --
      vn_fase := 3.2;
      --
      gv_mensagem_log := 'Data de vencimento da Parcela da Duplicata ('||to_char(est_row_NFCobr_Dup.dt_vencto,'dd/mm/rrrr')||
                         ') não pode ultrapassar o ano de 2099.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   -- Quando o indicador do emitente for "terceiros", a data do vencimento não pode ser menor que a data da Entrada ou Emissão
   if est_row_NFCobr_Dup.dt_vencto is null then
      --
      if pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 1 -- terceiros
         and est_row_NFCobr_Dup.dt_vencto < nvl(pk_csf_api.gt_row_Nota_Fiscal.dt_sai_ent, pk_csf_api.gt_row_Nota_Fiscal.dt_emiss)
         then
         --
         vn_fase := 4.1;
         --
         gv_mensagem_log := 'Data de vencimento da Parcela da Duplicata ('||to_char(est_row_NFCobr_Dup.dt_vencto,'dd/mm/rrrr')||
                            ') não pode ser menor que a data de Entrada ou Emissão ('||
                            to_char(nvl(pk_csf_api.gt_row_Nota_Fiscal.dt_sai_ent, pk_csf_api.gt_row_Nota_Fiscal.dt_emiss), 'dd/mm/rrrr')||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 5;
   --
   -- Valida informação do Valor da Duplicata
   if nvl(est_row_NFCobr_Dup.vl_dup,0) <= 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Valor da Parcela da Duplicata não pode ser zero ou negativo ('|| nvl(est_row_NFCobr_Dup.vl_dup,0) ||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   -- Se o valor for zero, atribui nulo
   --if est_row_NFCobr_Dup.vl_dup = 0 then
   --   est_row_NFCobr_Dup.vl_dup := null; -- COmentado, porque se for "nulo" gera erro de XML
   --end if;
   --
   vn_fase := 7;
   --
   -- Se não existe registro de log e o Tipo de Validação é 1 (valida e insere)
   -- então registra a Duplicata da Nota Fiscal
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 8;
   --
   if nvl(est_row_NFCobr_Dup.nfcobr_id,0) > 0
      and trim( pk_csf.fkg_converte ( est_row_NFCobr_Dup.nro_parc ) ) is not null
      and est_row_NFCobr_Dup.dt_vencto is not null 
      then
      --
      vn_fase := 9;
      --
      -- Verifica se já existe o registro
      begin
         select id
           into vn_nfcobrdup_id
           from nfcobr_dup nd
          where nd.nfcobr_id = est_row_NFCobr_Dup.nfcobr_id
            and nvl(trim(nro_parc),0) = nvl(trim(est_row_NFCobr_Dup.nro_parc),0);
      exception
         when too_many_rows then
            vn_nfcobrdup_id := 1;
         when others then
            vn_nfcobrdup_id := null;
      end;
      --
      if nvl(gn_tipo_integr,0) = 0 or nvl(vn_nfcobrdup_id,0) > 0 then
         --
         vn_fase := 10;
         --
         update NFCobr_Dup set nro_parc   = trim( pk_csf.fkg_converte ( est_row_NFCobr_Dup.nro_parc ) )
                             , dt_vencto  = est_row_NFCobr_Dup.dt_vencto
                             , vl_dup     = est_row_NFCobr_Dup.vl_dup
          where id = est_row_NFCobr_Dup.id;
         --
      elsif nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 11;
         --
         select nfcobrdup_seq.nextval
           into est_row_NFCobr_Dup.id
           from dual;
         --
         vn_fase := 12;
         --
         insert into NFCobr_Dup ( id
                                , nfcobr_id
                                , nro_parc
                                , dt_vencto
                                , vl_dup )
                         values ( est_row_NFCobr_Dup.id
                                , est_row_NFCobr_Dup.nfcobr_id
                                , trim( pk_csf.fkg_converte ( est_row_NFCobr_Dup.nro_parc ) )
                                , est_row_NFCobr_Dup.dt_vencto
                                , est_row_NFCobr_Dup.vl_dup );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_NFCobr_Dup fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFCOBR_DUP;

----------------------------------------------------
-- Integra informações da cobrança da Nota Fiscal --
----------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_COBR ( EST_LOG_GENERICO_NF       IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                      , EST_ROW_NOTA_FISCAL_COBR  IN OUT NOCOPY  NOTA_FISCAL_COBR%ROWTYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_nfcobr_id      nota_fiscal_cobr.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_Nota_Fiscal_Cobr.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informada a Nota Fiscal para relacionar aos Dados da Cobrança.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 2;

   -- Valida o emitente do título
   if est_row_Nota_Fiscal_Cobr.dm_ind_emit not in (0, 1) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Indicador do emitente de Dados da Cobrança da Nota Fiscal" ('||est_row_Nota_Fiscal_Cobr.dm_ind_emit||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 3;

   -- Valida o tipo de título
   if est_row_Nota_Fiscal_Cobr.dm_ind_tit not in ('00', '01', '02', '03', '99') then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Tipo de Título de Dados da Cobrança da Nota Fiscal" ('||est_row_Nota_Fiscal_Cobr.dm_ind_tit||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Valida informações do Valor Original da Fatura
   if nvl(est_row_Nota_Fiscal_Cobr.vl_orig,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Valor Original da Fatura da Cobrança da Nota Fiscal" não pode ser negativo ('||est_row_Nota_Fiscal_Cobr.vl_orig||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      -- se for zero ocorre erro de XML
      vn_fase := 4.2;
      --
      if est_row_Nota_Fiscal_Cobr.vl_orig = 0 then
         est_row_Nota_Fiscal_Cobr.vl_orig := null;
      end if;
      --
   end if;
   --
   vn_fase := 5;
   --
   -- Valida informações do Valor do Desconto da Fatura
   if nvl(est_row_Nota_Fiscal_Cobr.vl_desc,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Valor do Desconto da Fatura da Cobrança da Nota Fiscal" não pode ser negativo ('||est_row_Nota_Fiscal_Cobr.vl_desc||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      -- Manter o que estiver sido enviado - Nova Regra NFe 4.0
      -- Será tratado na montagem do XML a versão da Nota Fiscal, para enviar com Nulo se for Versão diferente de 4.0
      null;
      /*
      -- se for zero ocorre erro de XML
      vn_fase := 5.2;
      if est_row_Nota_Fiscal_Cobr.vl_desc = 0 then
         --
         est_row_Nota_Fiscal_Cobr.vl_desc := null;
         --
      end if;
      */
      --
   end if;
   --
   vn_fase := 6;
   --
   -- Valida informações do Valor Líquido da Fatura
   if nvl(est_row_Nota_Fiscal_Cobr.vl_liq,0) < 0 then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Valor Líquido da Fatura da Cobrança da Nota Fiscal" não pode ser negativo ('||est_row_Nota_Fiscal_Cobr.vl_liq||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      -- Manter o que estiver sido enviado - Nova Regra NFe 4.0
      -- Será tratado na montagem do XML a versão da Nota Fiscal, para enviar com Nulo se for Versão diferente de 4.0
      null;
      /*
      -- se for zero ocorre erro de XML
      vn_fase := 5.2;
      if est_row_Nota_Fiscal_Cobr.vl_liq = 0 then
         --
         est_row_Nota_Fiscal_Cobr.vl_liq := null;
         --
      end if;
      --
      */
   end if;
   --
   vn_fase := 7;
   --
   if trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Cobr.descr_tit ) ) is null
      and est_row_Nota_Fiscal_Cobr.dm_ind_tit = '99' then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Descrição complementar do título de crédito" torna-se obrigatória quando o Tipo de Título é igual a 99-Outros.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   -- então registra a informação da Fatura da Nota Fiscal
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 9;
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_Nota_Fiscal_Cobr.notafiscal_id;
      --
   end if;
   --
   vn_fase:= 10;
   --
   est_row_Nota_Fiscal_Cobr.nro_fat   := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Cobr.nro_fat ) );
   est_row_Nota_Fiscal_Cobr.descr_tit := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Cobr.descr_tit ) );
   est_row_Nota_Fiscal_Cobr.vl_orig   := est_row_Nota_Fiscal_Cobr.vl_orig;
   est_row_Nota_Fiscal_Cobr.vl_liq    := est_row_Nota_Fiscal_Cobr.vl_liq;
   --
   vn_fase := 11;
   --
   if nvl(est_row_Nota_Fiscal_Cobr.notafiscal_id,0) > 0
      and est_row_Nota_Fiscal_Cobr.dm_ind_emit in (0, 1)
      and est_row_Nota_Fiscal_Cobr.dm_ind_tit is not null
      and est_row_Nota_Fiscal_Cobr.nro_fat is not null
      and ( nvl(est_row_Nota_Fiscal_Cobr.vl_orig,0) > 0 or nvl(est_row_Nota_Fiscal_Cobr.vl_liq,0) > 0 )
      then
      --
      vn_fase := 12;
      -- Verifica se já existe o registro
      begin
         select id
           into vn_nfcobr_id
           from Nota_Fiscal_Cobr
          where notafiscal_id = est_row_Nota_Fiscal_Cobr.notafiscal_id
            and nro_fat       = trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Cobr.nro_fat ) );
      exception
         when too_many_rows then
            vn_nfcobr_id := 1;
         when others then
            vn_nfcobr_id := null;
      end;
      --
      if nvl(gn_tipo_integr,0) = 0 or nvl(vn_nfcobr_id,0) > 0 then
         --
         vn_fase := 12.1;
         --
         update Nota_Fiscal_Cobr set dm_ind_emit  = est_row_Nota_Fiscal_Cobr.dm_ind_emit
                                   , dm_ind_tit   = est_row_Nota_Fiscal_Cobr.dm_ind_tit
                                   , nro_fat      = est_row_Nota_Fiscal_Cobr.nro_fat
                                   , vl_orig      = est_row_Nota_Fiscal_Cobr.vl_orig
                                   , vl_desc      = est_row_Nota_Fiscal_Cobr.vl_desc
                                   , vl_liq       = est_row_Nota_Fiscal_Cobr.vl_liq
                                   , descr_tit    = est_row_Nota_Fiscal_Cobr.descr_tit
          where id = est_row_Nota_Fiscal_Cobr.id;

         --
      elsif nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 12.2;
         --
         select nfcobr_seq.nextval
           into est_row_Nota_Fiscal_Cobr.id
           from dual;
         --
         vn_fase := 12.3;
         --
         insert into Nota_Fiscal_Cobr ( id
                                      , notafiscal_id
                                      , dm_ind_emit
                                      , dm_ind_tit
                                      , nro_fat
                                      , vl_orig
                                      , vl_desc
                                      , vl_liq
                                      , descr_tit )
                               values ( est_row_Nota_Fiscal_Cobr.id
                                      , est_row_Nota_Fiscal_Cobr.notafiscal_id
                                      , est_row_Nota_Fiscal_Cobr.dm_ind_emit
                                      , est_row_Nota_Fiscal_Cobr.dm_ind_tit
                                      , trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Cobr.nro_fat ) )
                                      , est_row_Nota_Fiscal_Cobr.vl_orig
                                      , est_row_Nota_Fiscal_Cobr.vl_desc
                                      , est_row_Nota_Fiscal_Cobr.vl_liq
                                      , trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Cobr.descr_tit ) )
                                      );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Nota_Fiscal_Cobr fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_COBR;

---------------------------------------------------------------
-- Integra informações dos veículos utilizados no transporte --
---------------------------------------------------------------
PROCEDURE PKB_INTEGR_NFTRANSP_VEIC ( EST_LOG_GENERICO_NF        IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                   , EST_ROW_NFTRANSP_VEIC   IN OUT NOCOPY  NFTRANSP_VEIC%ROWTYPE
                                   , EN_NOTAFISCAL_ID        IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   i                  pls_integer;
   vn_erro            number;
   vn_nftranspveic_id nftransp_veic.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_NFTransp_Veic.nftransp_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado Transporte para relacionar ao Veículo/Reboque.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida informações do tipo de veículo
   if est_row_NFTransp_Veic.dm_tipo not in (0, 1) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Tipo do Veículo de Transporte da Nota Fiscal" ('||est_row_NFTransp_Veic.dm_tipo||') inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   gv_dominio := pk_csf.fkg_dominio ( ev_dominio   => 'NFTRANSP_VEIC.DM_TIPO'
                                    , ev_vl        => est_row_NFTransp_Veic.dm_tipo );
   --
   vn_fase := 4;
   --
   -- Valida informações do UF
   if trim( est_row_NFTransp_Veic.uf ) is null then
      --
      if gt_row_nota_fiscal.dm_ind_emit = 0  -- Emissão Própria
         then
         --
         vn_fase := 4.1;
         --
         gv_mensagem_log := '"UF da Placa do '||gv_dominio||' de Transporte da Nota Fiscal" não informada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   else
      --
      vn_fase := 4.2;
      -- verifica se a UF é inválida
      if pk_csf.fkg_uf_valida ( ev_sigla_estado => est_row_NFTransp_Veic.uf ) = false then
         --
         vn_fase := 4.3;
         --
         gv_mensagem_log := '"UF da Placa do '||gv_dominio||' de Transporte da Nota Fiscal" ('||est_row_NFTransp_Veic.uf||') está inválida.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 5;
   --
   if trim( est_row_NFTransp_Veic.uf ) <> 'EX' then
      --
      -- Valida informações da placa
      if trim( est_row_NFTransp_Veic.placa ) is null then
         --
         vn_fase := 5.1;
         --
         gv_mensagem_log := '"Placa do '||gv_dominio||' de Transporte da Nota Fiscal" não informada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 5.2;
      -- remove caracteres da placa
      est_row_NFTransp_Veic.placa := upper(trim( pk_csf.fkg_converte ( replace(replace(replace(est_row_NFTransp_Veic.placa, '.', ''), ',', ''), '-', '')) ) );
      --
      /*
      vn_fase := 5.3;
      --
      vv_placa_prefixo  := substr(est_row_NFTransp_Veic.placa, 1, 3);
      vv_placa_sufixo   := substr(est_row_NFTransp_Veic.placa, 4, 4);
      --
      vn_fase := 5.4;
      -- valida o prefixo e sufixo da placa do veículo
      i := 1;
      while i <= 3 loop
         --
         vn_fase := 5.5;
         --
         if pk_csf.fkg_is_numerico( substr(vv_placa_prefixo, i, i) ) then
            vn_erro := 1;
         end if;
         --
         i := i + 1;
         --
      end loop;
      --
      vn_fase := 5.6;
      --
      if nvl(vn_erro,0) = 1 then
         --
         vn_fase := 5.7;
         --
         gv_mensagem_log := 'A placa do veículo ('||est_row_NFTransp_Veic.placa||') deve conter apenas letras no prefixo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 5.8;
      --
      if not pk_csf.fkg_is_numerico( vv_placa_sufixo ) then
         --
         vn_fase := 5.9;
         --
         gv_mensagem_log := 'A placa do veículo ('||est_row_NFTransp_Veic.placa||') deve conter apenas número no sufixo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      */
      --
   end if;
   --
   vn_fase := 6;
   --
   if length(est_row_NFTransp_Veic.placa) not in (6,7) then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := 'Formato da placa do veículo ('||est_row_NFTransp_Veic.placa||') esta incorreto.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   -- então registra a informação do Veículo de Transporte da Nota Fiscal
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.1;
   --
   est_row_NFTransp_Veic.placa := upper(trim( pk_csf.fkg_converte ( replace(est_row_NFTransp_Veic.placa, ' ', '') ) ) );
   est_row_NFTransp_Veic.uf    := trim( pk_csf.fkg_converte ( est_row_NFTransp_Veic.uf ) );
   est_row_NFTransp_Veic.rntc  := trim( pk_csf.fkg_converte ( est_row_NFTransp_Veic.rntc ) );
   est_row_NFTransp_Veic.vagao := trim( pk_csf.fkg_converte ( est_row_NFTransp_Veic.vagao ) );
   est_row_NFTransp_Veic.balsa := trim( pk_csf.fkg_converte ( est_row_NFTransp_Veic.balsa ) );
   --
   if nvl(est_row_NFTransp_Veic.nftransp_id, 0) > 0
      and est_row_NFTransp_Veic.dm_tipo        in (0, 1)
      and est_row_NFTransp_Veic.placa          is not null
      then
      --
      vn_fase := 99.2;
      --
      -- Verifica se já existe o registro
      begin
         select id
           into vn_nftranspveic_id
           from nftransp_veic
          where nftransp_id     = est_row_NFTransp_Veic.nftransp_id
            and dm_tipo         = est_row_NFTransp_Veic.dm_tipo
            and placa           = est_row_NFTransp_Veic.placa
            and nvl(trim(uf),0) = nvl(trim(est_row_NFTransp_Veic.uf),0);
      exception
         when too_many_rows then
            vn_nftranspveic_id := 1;
         when others then
            vn_nftranspveic_id := null;
      end;
      --
      if nvl(gn_tipo_integr,0) = 0 or nvl(vn_nftranspveic_id,0) > 0 then
         --
         vn_fase := 99.3;
         --
         update NFTransp_Veic set dm_tipo  = est_row_NFTransp_Veic.dm_tipo
                                , placa    = est_row_NFTransp_Veic.placa
                                , uf       = est_row_NFTransp_Veic.uf
                                , rntc     = est_row_NFTransp_Veic.rntc
                                , vagao    = est_row_NFTransp_Veic.vagao
                                , balsa    = est_row_NFTransp_Veic.balsa
          where id = est_row_NFTransp_Veic.id;
         --
     elsif nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.4;
         --
         select nftrveic_seq.nextval
           into est_row_NFTransp_Veic.id
           from dual;
         --
         vn_fase := 99.5;
         --
         insert into NFTransp_Veic ( id
                                   , nftransp_id
                                   , dm_tipo
                                   , placa
                                   , uf
                                   , rntc
                                   , vagao
                                   , balsa )
                            values ( est_row_NFTransp_Veic.id
                                   , est_row_NFTransp_Veic.nftransp_id
                                   , est_row_NFTransp_Veic.dm_tipo
                                   , est_row_NFTransp_Veic.placa
                                   , est_row_NFTransp_Veic.uf
                                   , est_row_NFTransp_Veic.rntc
                                   , est_row_NFTransp_Veic.vagao
                                   , est_row_NFTransp_Veic.balsa
                                   );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_NFTransp_Veic fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFTRANSP_VEIC;

--------------------------------------------------------------
-- Integra informações dos lacres dos volumes transportados --
--------------------------------------------------------------
PROCEDURE PKB_INTEGR_NFTRANSPVOL_LACRE ( EST_LOG_GENERICO_NF           IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                       , EST_ROW_NFTRANSPVOL_LACRE  IN OUT NOCOPY  NFTRANSPVOL_LACRE%ROWTYPE
                                       , EN_NOTAFISCAL_ID           IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_NFTranspVol_Lacre.nftrvol_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não foi informado o Volume para relacionar ao Lacre.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   if trim( est_row_NFTranspVol_Lacre.nro_lacre ) is null then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Número do lacre do Volume da Nota Fiscal" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não existe registro do Tipo de Log e o Tipo de Integração é 1 (valida e insere)
   -- então registra o Lacre do Volume da NF
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   est_row_NFTranspVol_Lacre.nro_lacre := trim( pk_csf.fkg_converte ( est_row_NFTranspVol_Lacre.nro_lacre ) );
   --
   if nvl(est_row_NFTranspVol_Lacre.nftrvol_id,0) > 0
      and est_row_NFTranspVol_Lacre.nro_lacre is not null
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.1;
         --
         select nftrvlacre_seq.nextval
           into est_row_NFTranspVol_Lacre.id
           from dual;
         --
         vn_fase := 99.2;
         --
         insert into NFTranspVol_Lacre ( id
                                       , nftrvol_id
                                       , nro_lacre )
                                values ( est_row_NFTranspVol_Lacre.id
                                       , est_row_NFTranspVol_Lacre.nftrvol_id
                                       , est_row_NFTranspVol_Lacre.nro_lacre
                                       );
      --
      else
         --
         vn_fase := 99.3;
         --
         update NFTranspVol_Lacre set nro_lacre = est_row_NFTranspVol_Lacre.nro_lacre
          where id = est_row_NFTranspVol_Lacre.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_NFTranspVol_Lacre fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFTRANSPVOL_LACRE;

---------------------------------------------------
-- Integra informações dos volumes transportados --
---------------------------------------------------
PROCEDURE PKB_INTEGR_NFTRANSP_VOL ( EST_LOG_GENERICO_NF       IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                  , EST_ROW_NFTRANSP_VOL   IN OUT NOCOPY  NFTRANSP_VOL%ROWTYPE
                                  , EN_NOTAFISCAL_ID       IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_nftranspvol_id nftransp_vol.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_NFTransp_Vol.nftransp_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado Transporte para relacionar ao Volume.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida a informação de Quantidade de volumes transportados
   if nvl(est_row_NFTransp_Vol.qtdeVol,0) < 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Quantidade de volumes transportados" não pode ser negativa ('||est_row_NFTransp_Vol.qtdeVol||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   -- Valida a informação de Peso Líquido (em kg)
   if nvl(est_row_NFTransp_Vol.peso_liq,0) < 0 then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Peso Líquido (em kg) dos Volumes" não pode ser negativo ('||est_row_NFTransp_Vol.peso_liq||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Valida a informação de Peso Bruto (em kg)
   if nvl(est_row_NFTransp_Vol.peso_bruto,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Peso Bruto (em kg) dos Volumes" não pode ser negativo ('||est_row_NFTransp_Vol.peso_bruto||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não existe registro de Log e o Tipo de  Integração é 1 (valida e insere)
   -- então registra o Volume de Transp. da NF
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.1;
   --
   est_row_NFTransp_Vol.especie := trim( pk_csf.fkg_converte ( est_row_NFTransp_Vol.especie ) );
   est_row_NFTransp_Vol.marca   := trim( pk_csf.fkg_converte ( est_row_NFTransp_Vol.marca ) );
   est_row_NFTransp_Vol.nro_vol := trim( pk_csf.fkg_converte ( est_row_NFTransp_Vol.nro_vol ) );
   est_row_NFTransp_Vol.qtdeVol := nvl(est_row_NFTransp_Vol.qtdeVol,0);
   --
   if nvl(est_row_NFTransp_Vol.nftransp_id,0) > 0 then
      --
      vn_fase := 99.2;
      --
      -- Verifica se já existe o registro
      begin
         select id
           into vn_nftranspvol_id
           from nftransp_vol nv
          where nv.nftransp_id       = est_row_NFTransp_Vol.nftransp_id
            and nvl(trim(especie),0) = nvl(trim(est_row_NFTransp_Vol.especie),0)
            and nvl(trim(marca),0)   = nvl(trim(est_row_NFTransp_Vol.marca),0)
            and nvl(qtdevol,0)       = nvl(est_row_NFTransp_Vol.qtdevol,0)
            and nvl(trim(nro_vol),0) = nvl(trim(est_row_NFTransp_Vol.nro_vol),0);
      exception
         when too_many_rows then
            vn_nftranspvol_id := 1;
         when others then
            vn_nftranspvol_id := null;
      end;
      --
      if nvl(gn_tipo_integr,0) = 0 or nvl(vn_nftranspvol_id,0) > 0 then
         --
         vn_fase := 99.3;
         --
         update NFTransp_Vol set qtdeVol     = est_row_NFTransp_Vol.qtdeVol
                               , especie     = est_row_NFTransp_Vol.especie
                               , marca       = est_row_NFTransp_Vol.marca
                               , nro_vol     = est_row_NFTransp_Vol.nro_vol
                               , peso_bruto  = est_row_NFTransp_Vol.peso_bruto
                               , peso_liq    = est_row_NFTransp_Vol.peso_liq
          where id = est_row_NFTransp_Vol.id;
         --
      elsif nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.4;
         --
         select nftrvol_seq.nextval
           into est_row_NFTransp_Vol.id
           from dual;
         --
         vn_fase := 99.5;
         --
         insert into NFTransp_Vol ( id
                                  , nftransp_id
                                  , qtdeVol
                                  , especie
                                  , marca
                                  , nro_vol
                                  , peso_bruto
                                  , peso_liq )
                           values ( est_row_NFTransp_Vol.id
                                  , est_row_NFTransp_Vol.nftransp_id
                                  , est_row_NFTransp_Vol.qtdeVol
                                  , est_row_NFTransp_Vol.especie
                                  , est_row_NFTransp_Vol.marca
                                  , est_row_NFTransp_Vol.nro_vol
                                  , est_row_NFTransp_Vol.peso_bruto
                                  , est_row_NFTransp_Vol.peso_liq
                                  );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_NFTransp_Vol fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFTRANSP_VOL;

----------------------------------------------------------------
-- Integra informações referênte ao transporte da Nota Fiscal --
----------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_TRANSP ( EST_LOG_GENERICO_NF            IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                        , EST_ROW_NOTA_FISCAL_TRANSP  IN OUT NOCOPY  NOTA_FISCAL_TRANSP%ROWTYPE
                                        , EN_MULTORG_ID               IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_Nota_Fiscal_Transp.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para relacionar ao Transporte.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida a modalidade do frete
   if est_row_Nota_Fiscal_Transp.dm_mod_frete not in (0, 1, 2, 3, 4, 9) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Modalidade do frete da Informação do Transporte da Nota Fiscal" ('||est_row_Nota_Fiscal_Transp.dm_mod_frete||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim( est_row_Nota_Fiscal_Transp.uf ) is not null then
      --
      vn_fase := 3.1;
      -- verifica se a UF é inválida
      if pk_csf.fkg_uf_valida ( ev_sigla_estado => est_row_Nota_Fiscal_Transp.uf ) = false then
         --
         vn_fase := 3.2;
         --
         gv_mensagem_log := '"Sigla da UF da informação de TRANSPORTE" inválida ('||est_row_Nota_Fiscal_Transp.uf||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 4;
   --
   -- Valida o campo cidade_ibge
   if est_row_Nota_Fiscal_Transp.cidade_ibge <> '9999999' then
      --
      vn_fase := 4.1;
      --
      if pk_csf.fkg_ibge_cidade ( ev_ibge_cidade => est_row_Nota_Fiscal_Transp.cidade_ibge ) = false then
         --
         vn_fase := 4.2;
         --
         gv_mensagem_log := '"Código do município de ocorrência do fato gerador do ICMS do TRANSPORTE" ('||est_row_Nota_Fiscal_Transp.cidade_ibge||') está inválido.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 5;
   --
   -- Valida informações de valores do Transporte
   if nvl(est_row_Nota_Fiscal_Transp.vl_serv,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Valor do Serviço da Informação do Transporte da Nota Fiscal" ('||est_row_Nota_Fiscal_Transp.vl_serv||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 5.2;
      --
      if est_row_Nota_Fiscal_Transp.vl_serv = 0 then
         --
         est_row_Nota_Fiscal_Transp.vl_serv := null;
         --
      end if;
      --
   end if;
   --
   vn_fase := 6;
   --
   -- Valida informação da BC da Retenção do ICMS
   if nvl(est_row_Nota_Fiscal_Transp.vl_basecalc_ret,0) < 0 then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Valor da BC da Retenção do ICMS da Informação do Transporte da Nota Fiscal" ('||est_row_Nota_Fiscal_Transp.vl_basecalc_ret||
                         ') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 6.2;
      --
      if est_row_Nota_Fiscal_Transp.vl_basecalc_ret = 0 then
         --
         est_row_Nota_Fiscal_Transp.vl_basecalc_ret := null;
         --
      end if;
      --
   end if;
   --
   vn_fase := 7;
   --
   -- Valida informação da Alíquota da Retenção
   if nvl(est_row_Nota_Fiscal_Transp.aliqicms_ret,0) < 0 then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Alíquota da Retenção da Informação do Transporte da Nota Fiscal" ('||est_row_Nota_Fiscal_Transp.aliqicms_ret||') não pode ser negativa.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 7.2;
      --
      if est_row_Nota_Fiscal_Transp.aliqicms_ret = 0 then
         --
         est_row_Nota_Fiscal_Transp.aliqicms_ret := null;
         --
      end if;
      --
   end if;
   --
   vn_fase := 8;
   --
   -- Valida informação do Valor do ICMS Retido
   if nvl(est_row_Nota_Fiscal_Transp.vl_icms_ret,0) < 0 then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := '"Valor do ICMS Retido da Informação do Transporte da Nota Fiscal" ('||est_row_Nota_Fiscal_Transp.vl_icms_ret||') não pode ser negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8.2;
      --
      if est_row_Nota_Fiscal_Transp.vl_icms_ret = 0 then
         --
         est_row_Nota_Fiscal_Transp.vl_icms_ret := null;
         --
      end if;
      --
   end if;
   --
   vn_fase := 9;
   --
   -- Valida informação do CFOP do Transporte
   est_row_Nota_Fiscal_Transp.cfop_id := pk_csf.fkg_cfop_id ( en_cd => est_row_Nota_Fiscal_Transp.cfop );

   if nvl(est_row_Nota_Fiscal_Transp.cfop,0) > 0
      and nvl(est_row_Nota_Fiscal_Transp.cfop_id,0) = 0 then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := '"CFOP da Informação do Transporte da Nota Fiscal" está inválido ('||est_row_Nota_Fiscal_Transp.cfop||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   -- Não pode ser zero, senão ocorre erro de XML
   if est_row_Nota_Fiscal_Transp.cfop = 0 then
      --
      est_row_Nota_Fiscal_Transp.cfop := null;
      --
   end if;
   --
   vn_fase := 10;
   --
   -- Valida a informação da pessoa
   if nvl(est_row_Nota_Fiscal_Transp.pessoa_id,0) > 0 then
      --
      vn_fase := 10.1;
      --
      if pk_csf.fkg_Pessoa_id_valido ( en_pessoa_id => est_row_Nota_Fiscal_Transp.pessoa_id ) = false then
         --
         vn_fase := 10.2;
         --
         gv_mensagem_log := '"Código da pessoa para o Transporte" ('||est_row_Nota_Fiscal_Transp.pessoa_id||') está inválido.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 11;
   --
   if est_row_Nota_Fiscal_Transp.cnpj_cpf is not null then
      --
      est_row_Nota_Fiscal_Transp.cnpj_cpf := trim(replace(replace(replace(est_row_Nota_Fiscal_Transp.cnpj_cpf, '.', ''), '-', ''), '/', ''));
      --
   end if;
   --
   vn_fase := 11.1;
   -- Tenta lozalizar a pessoa pelo CPF/CNPJ
   if est_row_Nota_Fiscal_Transp.cnpj_cpf is not null
      and nvl(est_row_Nota_Fiscal_Transp.pessoa_id,0) <= 0 then
      --
      vn_fase := 11.2;
      -- substituído para recuperar o cadastro mais recente de pessoa_id de acordo com a UF enviada na integração.
      -- est_row_Nota_Fiscal_Transp.pessoa_id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_cpf_cnpj => est_row_Nota_Fiscal_Transp.cnpj_cpf );
      est_row_nota_fiscal_transp.pessoa_id := pk_csf.fkg_pessoa_id_cpf_cnpj_uf( en_multorg_id => en_multorg_id
                                                                              , en_cpf_cnpj   => est_row_nota_fiscal_transp.cnpj_cpf
                                                                              , ev_uf         => trim(est_row_nota_fiscal_transp.uf) );
      --
   end if;
   --
   vn_fase := 12;
   -- valida se CNPJ é númerico caso ele seja informado.
   if trim(est_row_Nota_Fiscal_Transp.cnpj_cpf) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Transp.cnpj_cpf ) = false then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := 'O "CNPJ ou CPF do Transportador da Nota Fiscal" ('||est_row_Nota_Fiscal_Transp.cnpj_cpf||
                         ') deve conter somente números considerando os zeros à esquerda.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12.2;
   --
   -- Valida CNPJ
   if trim(est_row_Nota_Fiscal_Transp.cnpj_cpf) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Transp.cnpj_cpf ) = true
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_Nota_Fiscal_Transp.cnpj_cpf), 0) = 0 then
      --
      vn_fase := 12.3;
      --
      gv_mensagem_log := 'O "CNPJ ou CPF do Transportador da Nota Fiscal" ('||est_row_Nota_Fiscal_Transp.cnpj_cpf||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   --
   est_row_Nota_Fiscal_Transp.ie       := trim( replace(replace(replace(pk_csf.fkg_converte ( est_row_Nota_Fiscal_Transp.ie ), '.', ''), '-', ''), '/', '') );

   -- Valida Inscrição Estadual
   if trim(est_row_Nota_Fiscal_Transp.ie) is not null
      and trim(est_row_Nota_Fiscal_Transp.uf) is not null
      and nvl(pk_valida_docto.fkg_valida_ie( ev_inscr_est => est_row_Nota_Fiscal_Transp.ie
                                           , ev_estado    => est_row_Nota_Fiscal_Transp.uf ), 0) = 0 then
      --
      vn_fase := 13.1;
      --
      gv_mensagem_log := 'A "Inscrição Estadual do Transportador da Nota Fiscal" ('||est_row_Nota_Fiscal_Transp.ie||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14;
   --
   if trim(est_row_Nota_Fiscal_Transp.ie) like 'ISENT%' then
      --
      est_row_Nota_Fiscal_Transp.ie := 'ISENTO';
      --
   end if;
   --
   vn_fase := 15;
   -- Trabalha valores de transporte
   if nvl(est_row_Nota_Fiscal_Transp.vl_serv,0) > 0
      or nvl(est_row_Nota_Fiscal_Transp.vl_basecalc_ret,0) > 0
      or nvl(est_row_Nota_Fiscal_Transp.aliqicms_ret,0) > 0
      or nvl(est_row_Nota_Fiscal_Transp.vl_icms_ret,0) > 0 then
      --
      if nvl(est_row_Nota_Fiscal_Transp.vl_serv,0) <= 0 then
         --
         est_row_Nota_Fiscal_Transp.vl_serv := 0;
         --
      end if;
      --
      if nvl(est_row_Nota_Fiscal_Transp.vl_basecalc_ret,0) <= 0 then
         --
         est_row_Nota_Fiscal_Transp.vl_basecalc_ret := 0;
         --
      end if;
      --
      if nvl(est_row_Nota_Fiscal_Transp.aliqicms_ret,0) <= 0 then
         --
         est_row_Nota_Fiscal_Transp.aliqicms_ret := 0;
         --
      end if;
      --
      if nvl(est_row_Nota_Fiscal_Transp.vl_icms_ret,0) <= 0 then
         --
         est_row_Nota_Fiscal_Transp.vl_icms_ret := 0;
         --
      end if;
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não existe registro do Log e o Tipo de Integração é 1 (valida e insere)
   -- então registra o Transporte da NF
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_Nota_Fiscal_Transp.notafiscal_id;
      --
   end if;
   --
   est_row_Nota_Fiscal_Transp.cnpj_cpf := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Transp.cnpj_cpf ) );
   est_row_Nota_Fiscal_Transp.nome     := pk_csf.fkg_converte ( est_row_Nota_Fiscal_Transp.nome );
   est_row_Nota_Fiscal_Transp.ender    := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Transp.ender ) );
   est_row_Nota_Fiscal_Transp.cidade   := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Transp.cidade ) );
   est_row_Nota_Fiscal_Transp.nome_mot := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Transp.nome_mot ) );
   --
   if nvl(est_row_Nota_Fiscal_Transp.notafiscal_id, 0) > 0
      and est_row_Nota_Fiscal_Transp.dm_mod_frete in (0, 1, 2, 3, 4, 9) then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.1;
         --
         select nftransp_seq.nextval
           into est_row_Nota_Fiscal_Transp.id
           from dual;
         --
         vn_fase := 99.2;
         --
         insert into Nota_Fiscal_Transp ( id
                                        , notafiscal_id
                                        , dm_mod_frete
                                        , cnpj_cpf
                                        , pessoa_id
                                        , nome
                                        , ie
                                        , ender
                                        , cidade
                                        , cidade_ibge
                                        , uf
                                        , vl_serv
                                        , vl_basecalc_ret
                                        , aliqicms_ret
                                        , vl_icms_ret
                                        , cfop_id
                                        , cfop
                                        , cpf_mot
                                        , nome_mot )
                                 values ( est_row_Nota_Fiscal_Transp.id
                                        , est_row_Nota_Fiscal_Transp.notafiscal_id
                                        , est_row_Nota_Fiscal_Transp.dm_mod_frete
                                        , est_row_Nota_Fiscal_Transp.cnpj_cpf
                                        , est_row_Nota_Fiscal_Transp.pessoa_id
                                        , est_row_Nota_Fiscal_Transp.nome
                                        , est_row_Nota_Fiscal_Transp.ie
                                        , est_row_Nota_Fiscal_Transp.ender
                                        , est_row_Nota_Fiscal_Transp.cidade
                                        , est_row_Nota_Fiscal_Transp.cidade_ibge
                                        , est_row_Nota_Fiscal_Transp.uf
                                        , est_row_Nota_Fiscal_Transp.vl_serv
                                        , est_row_Nota_Fiscal_Transp.vl_basecalc_ret
                                        , est_row_Nota_Fiscal_Transp.aliqicms_ret
                                        , est_row_Nota_Fiscal_Transp.vl_icms_ret
                                        , est_row_Nota_Fiscal_Transp.cfop_id
                                        , est_row_Nota_Fiscal_Transp.cfop
                                        , est_row_Nota_Fiscal_Transp.cpf_mot
                                        , est_row_Nota_Fiscal_Transp.nome_mot
                                        );
      --
      else 
         --
         vn_fase := 99.3;
         --
         update Nota_Fiscal_Transp set dm_mod_frete     = est_row_Nota_Fiscal_Transp.dm_mod_frete
                                     , cnpj_cpf         = est_row_Nota_Fiscal_Transp.cnpj_cpf
                                     , pessoa_id        = est_row_Nota_Fiscal_Transp.pessoa_id
                                     , nome             = est_row_Nota_Fiscal_Transp.nome
                                     , ie               = est_row_Nota_Fiscal_Transp.ie
                                     , ender            = est_row_Nota_Fiscal_Transp.ender
                                     , cidade           = est_row_Nota_Fiscal_Transp.cidade
                                     , cidade_ibge      = est_row_Nota_Fiscal_Transp.cidade_ibge
                                     , uf               = est_row_Nota_Fiscal_Transp.uf
                                     , vl_serv          = est_row_Nota_Fiscal_Transp.vl_serv
                                     , vl_basecalc_ret  = est_row_Nota_Fiscal_Transp.vl_basecalc_ret
                                     , aliqicms_ret     = est_row_Nota_Fiscal_Transp.aliqicms_ret
                                     , vl_icms_ret      = est_row_Nota_Fiscal_Transp.vl_icms_ret
                                     , cfop_id          = est_row_Nota_Fiscal_Transp.cfop_id
                                     , cfop             = est_row_Nota_Fiscal_Transp.cfop
                                     , cpf_mot          = est_row_Nota_Fiscal_Transp.cpf_mot
                                     , nome_mot         = est_row_Nota_Fiscal_Transp.nome_mot
          where id = est_row_Nota_Fiscal_Transp.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Nota_Fiscal_Transp fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_TRANSP;
-- 
-- ================================================================================================================== --
-- Integra informações do Local de Retirada/Entrega de mercadorias - campos flex field --
--
PROCEDURE PKB_INTEGR_NOTA_FISCAL_LOCALFF ( EST_LOG_GENERICO_NF      IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                         , EN_NOTAFISCAL_ID         IN             NOTA_FISCAL.ID%TYPE
                                         , EN_NOTAFISCALLOCAL_ID    IN             NOTA_FISCAL_LOCAL.ID%TYPE
                                         , EV_ATRIBUTO              IN             VARCHAR2
                                         , EV_VALOR                 IN             VARCHAR2
                                         ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_dmtipocampo     ff_obj_util_integr.dm_tipo_campo%type;
   vn_dm_tp_amb       nota_fiscal.dm_tp_amb%type;
   vv_mensagem        varchar2(1000) := null;
   vv_nome            nota_fiscal_local.nome%type;
   vn_cep             nota_fiscal_local.cep%type;
   vn_cod_pais        nota_fiscal_local.cod_pais%type;
   vv_desc_pais       nota_fiscal_local.desc_pais%type;
   vn_fone            nota_fiscal_local.fone%type;
   vv_email           nota_fiscal_local.email%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Destinatário da Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Destinatário da Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_NOTA_FISCAL_LOCAL_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_NOTA_FISCAL_LOCAL_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'NOME' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 11;
               --
               vv_nome := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_LOCAL_FF'
                                                        , ev_atributo => trim(ev_atributo)
                                                        , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 12;
               --
               gv_mensagem_log := 'O valor do campo "Nome" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf    => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'CEP' then
         --
         vn_fase := 13;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 14;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = number
               --
               vn_fase := 14.1;
               --
               vn_cep := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_LOCAL_FF'
                                                       , ev_atributo => trim(ev_atributo)
                                                       , ev_valor    => trim(ev_valor) );
               --
               vn_fase := 14.2;
               --
            else
               --
               vn_fase := 14.3;
               --
               gv_mensagem_log := 'O valor do campo "CEP" informado não confere com o tipo de campo, deveria ser NUMBER.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf    => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'COD_PAIS' then
         --
         vn_fase := 15;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 15.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = number
               --
               vn_fase := 15.2;
               --
               vn_cod_pais := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_LOCAL_FF'
                                                       , ev_atributo => trim(ev_atributo)
                                                       , ev_valor    => trim(ev_valor) );
               --
               vn_fase := 15.3;
               --
            else
               --
               vn_fase := 15.4;
               --
               gv_mensagem_log := 'O valor do campo "COD_PAIS" informado não confere com o tipo de campo, deveria ser NUMBER.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf    => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DESC_PAIS' then
         --
         vn_fase := 16;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 16.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 16.2;
               --
               vv_desc_pais := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_LOCAL_FF'
                                                       , ev_atributo => trim(ev_atributo)
                                                       , ev_valor    => trim(ev_valor) );
               --
               vn_fase := 16.3;
               --
            else
               --
               vn_fase := 16.4;
               --
               gv_mensagem_log := 'O valor do campo "DESC_PAIS" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf    => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'FONE' then
         --
         vn_fase := 17;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 17.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = number
               --
               vn_fase := 17.2;
               --
               vn_fone := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_LOCAL_FF'
                                                        , ev_atributo => trim(ev_atributo)
                                                        , ev_valor    => trim(ev_valor) );
               --
               vn_fase := 17.3;
               --
            else
               --
               vn_fase := 17.4;
               --
               gv_mensagem_log := 'O valor do campo "FONE" informado não confere com o tipo de campo, deveria ser NUMBER.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf    => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'EMAIL' then
         --
         vn_fase := 18;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 18.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 18.2;
               --
               vv_email := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_LOCAL_FF'
                                                         , ev_atributo => trim(ev_atributo)
                                                         , ev_valor    => trim(ev_valor) );
               --
               vn_fase := 18.3;
               --
            else
               --
               vn_fase := 18.4;
               --
               gv_mensagem_log := 'O valor do campo "EMAIL" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf    => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      else
         --
         vn_fase := 19;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 20;
   --
   if nvl(en_notafiscal_id,0) = 0 then
      --
      vn_fase := 21;
      --
      gv_mensagem_log := 'Identificador da nota fiscal referenciada não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   vn_dm_tp_amb := pk_csf.fkg_dm_tp_amb_nf( en_notafiscal_id => en_notafiscal_id );
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (valida e insere)
   -- então realiza a condição de inserir os dados do local da nf
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_notafiscallocal_id,0) > 0 and
      trim(ev_atributo) = 'NOME' and
      vv_NOME     is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.3;
      --
      update nota_fiscal_local nfl
         set nfl.NOME = vv_NOME
       where nfl.id = en_notafiscallocal_id;
      --
   end if;
   --
   vn_fase := 99.4;
   --
   if nvl(en_notafiscallocal_id,0) > 0 and
      trim(ev_atributo) = 'CEP' and
      vn_CEP is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.5;
      --
      update nota_fiscal_local nfl
         set nfl.CEP = vn_CEP
       where nfl.id = en_notafiscallocal_id;
      --
   end if;
   --
   vn_fase := 99.6;
   --
   if nvl(en_notafiscallocal_id,0) > 0 and
      trim(ev_atributo) = 'COD_PAIS' and
      vn_COD_PAIS is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.7;
      --
      update nota_fiscal_local nfl
         set nfl.COD_PAIS = vn_COD_PAIS
       where nfl.id = en_notafiscallocal_id;
      --
   end if;
   --
   vn_fase := 99.8;
   --
   if nvl(en_notafiscallocal_id,0) > 0 and
      trim(ev_atributo) = 'DESC_PAIS' and
      vv_DESC_PAIS is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.9;
      --
      update nota_fiscal_local nfl
         set nfl.DESC_PAIS = vv_DESC_PAIS
       where nfl.id = en_notafiscallocal_id;
      --
   end if;
   --
   vn_fase := 99.10;
   --
   if nvl(en_notafiscallocal_id,0) > 0 and
      trim(ev_atributo) = 'FONE' and
      vn_FONE is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.11;
      --
      update nota_fiscal_local nfl
         set nfl.FONE = vn_FONE
       where nfl.id = en_notafiscallocal_id;
      --
   end if;
   vn_fase := 99.12;
   --
   if nvl(en_notafiscallocal_id,0) > 0 and
      trim(ev_atributo) = 'EMAIL' and
      vv_EMAIL is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.13;
      --
      update nota_fiscal_local nfl
         set nfl.EMAIL = vv_EMAIL
       where nfl.id = en_notafiscallocal_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_INTEGR_NOTA_FISCAL_LOCALFF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_LOCALFF;
--
-- ================================================================================================================== --
--
-- Integra informações do Local de Retirada/Entrega de mercadorias --
--
PROCEDURE PKB_INTEGR_NOTA_FISCAL_LOCAL ( EST_LOG_GENERICO_NF       IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                       , EST_ROW_NOTA_FISCAL_LOCAL IN OUT NOCOPY  NOTA_FISCAL_LOCAL%ROWTYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_nflocal_id     nota_fiscal_local.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_Nota_Fiscal_Local.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para relacionar ao Local Retirada/Entrega.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida dados do local de Retirada/Entrega
   if est_row_Nota_Fiscal_Local.dm_tipo_local not in (0, 1) then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Tipo de local de Retirada/Entrega da Nota Fiscal" ('||est_row_Nota_Fiscal_Local.dm_tipo_local||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   gv_dominio := pk_csf.fkg_dominio ( ev_dominio   => 'NOTA_FISCAL_LOCAL.DM_TIPO_LOCAL'
                                    , ev_vl        => est_row_Nota_Fiscal_Local.dm_tipo_local );
   --
   vn_fase := 4;
   -- Valida indicador do tipo de transporte da carga
   if est_row_Nota_Fiscal_Local.dm_ind_carga not in (0, 1, 2, 3, 4, 5, 9) then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := 'Local: '||gv_dominio||' "Indicador do tipo de transporte da carga da Nota Fiscal" ('||
                         est_row_Nota_Fiscal_Local.dm_ind_carga||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   -- Valida se o campo logradouro tem menos que 2 caracteres
   if nvl(length( trim(est_row_Nota_Fiscal_Local.lograd) ),0) < 2 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Local: '||gv_dominio||' "Logradouro" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Local.lograd||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   -- Valida se o campo bairro tem menos que 2 caracteres
   if nvl(length( trim(est_row_Nota_Fiscal_Local.bairro) ),0) < 2 then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := 'Local: '||gv_dominio||' "Bairro" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Local.bairro||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   -- Valida se o campo cidade tem menos que 2 caracteres
   if nvl(length( trim(est_row_Nota_Fiscal_Local.cidade) ),0) < 2 then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := 'Local: '||gv_dominio||' "Cidade" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Local.cidade||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 8;
   --
   -- verifica se a UF é inválida
   if pk_csf.fkg_uf_valida ( ev_sigla_estado => est_row_Nota_Fiscal_Local.uf ) = false then
      --
      vn_fase := 8.1;
      --
      gv_mensagem_log := 'Local: '||gv_dominio||' "Sigla da UF" inválida ('||est_row_Nota_Fiscal_Local.uf||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   --
   -- Se o campo UF = 'EX' atribui Exterior para cidade
   if est_row_Nota_Fiscal_Local.uf = 'EX' then
      --
      vn_fase := 9.1;
      --
      est_row_Nota_Fiscal_Local.cidade       := 'EXTERIOR';
      est_row_Nota_Fiscal_Local.cidade_ibge  := 9999999;
      --
   end if;
   --
   vn_fase := 10;
   --
   -- Valida o campo cidade_ibge
   if est_row_Nota_Fiscal_Local.cidade_ibge <> 9999999 then
      --
      vn_fase := 10.1;
      --
      if pk_csf.fkg_ibge_cidade ( ev_ibge_cidade => est_row_Nota_Fiscal_Local.cidade_ibge ) = false then
         --
         vn_fase := 10.2;
         --
         gv_mensagem_log := 'Local: '||gv_dominio||' "Código IBGE da cidade" inválido ('||est_row_Nota_Fiscal_Local.cidade_ibge||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 10.3;
   --
   if est_row_Nota_Fiscal_Local.uf <> 'EX'
      and pk_csf.fkg_compara_ibge_com_sigla_uf ( ev_ibge_estado   => substr(est_row_Nota_Fiscal_Local.cidade_ibge, 1, 2)
                                               , ev_sigla_estado  => est_row_Nota_Fiscal_Local.uf ) = false then
      --
      vn_fase := 10.4;
      --
      gv_mensagem_log := 'Código do IBGE da cidade ('||est_row_Nota_Fiscal_Local.cidade_ibge||') não pertence ao estado ('||est_row_Nota_Fiscal_Local.uf||
                         ') informado no local de '||gv_dominio||'.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11;
   --
   /*
   -- Valida se CNPJ ou CPF foram informados
   if trim( est_row_Nota_Fiscal_Local.cnpj ) is null
      and trim( est_row_Nota_Fiscal_Local.cpf ) is null
      then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := 'Local: '||gv_dominio||' "CPF ou CNPJ" não informado. É obrigatória a informação de algum desses campos.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;*/
   --
   vn_fase := 12;
   --
   -- Valida campo Nro do logradouro
   if trim( est_row_Nota_Fiscal_Local.nro ) is null then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := 'Local: '||gv_dominio||' "Número do logradouro" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   -- valida se CNPJ é númerico caso ele seja informado.
   if trim(est_row_Nota_Fiscal_Local.cnpj) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Local.cnpj ) = false then
      --
      vn_fase := 13.1;
      --
      gv_mensagem_log := 'O CNPJ do contribuinte do local '||gv_dominio||' ('||est_row_Nota_Fiscal_Local.cnpj||
                         ') deve conter somente números considerando os zeros à esquerda.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13.2;
   --
   -- Valida CNPJ
   if trim( est_row_Nota_Fiscal_Local.cnpj ) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Local.cnpj ) = true
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_Nota_Fiscal_Local.cnpj), 0) = 0 then
      --
      vn_fase := 13.3;
      --
      gv_mensagem_log := 'O CNPJ do contribuinte do local '||gv_dominio||' ('||est_row_Nota_Fiscal_Local.cnpj||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14;
   -- valida se CNPJ é númerico caso ele seja informado.
   if trim(est_row_Nota_Fiscal_Local.cpf) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Local.cpf ) = false then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := 'O CPF do local '||gv_dominio||' ('||est_row_Nota_Fiscal_Local.cpf||') deve conter somente números considerando os zeros à esquerda.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14.2;
   --
   -- Valida CPF
   if trim( est_row_Nota_Fiscal_Local.cpf ) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Local.cpf ) = true
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_Nota_Fiscal_Local.cpf), 0) = 0 then
      --
      vn_fase := 14.3;
      --
      gv_mensagem_log := 'O CPF do contribuinte do local '||gv_dominio||' ('||est_row_Nota_Fiscal_Local.cpf||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   --
   vn_fase := 15;
   --
   -- Valida Inscrição Estadual
   if trim( est_row_Nota_Fiscal_Local.ie ) is not null
      and trim( est_row_Nota_Fiscal_Local.uf ) is not null
      and nvl(pk_valida_docto.fkg_valida_ie( ev_inscr_est => est_row_Nota_Fiscal_Local.ie
                                           , ev_estado    => est_row_Nota_Fiscal_Local.uf ), 0) = 0 then
      --
      vn_fase := 15.1;
      --
      gv_mensagem_log := 'A Inscrição Estadual do contribuinte do local '||gv_dominio||' ('||est_row_Nota_Fiscal_Local.ie||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 16;
   --
   if trim( upper(est_row_Nota_Fiscal_Local.ie) ) like 'ISENT%' then
      --
      est_row_Nota_Fiscal_Local.ie := 'ISENTO';
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   -- então registra o local de coleta/entrega da NF
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_Nota_Fiscal_Local.notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.1;
   --
   est_row_Nota_Fiscal_Local.cnpj           := lpad(trim( pk_csf.fkg_converte ( replace(replace(replace(est_row_Nota_Fiscal_Local.cnpj, '.', ''), '/', ''), '-', '') ) ), 14, '0');
   est_row_Nota_Fiscal_Local.lograd         := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Local.lograd ) );
   est_row_Nota_Fiscal_Local.nro            := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Local.nro ) );
   est_row_Nota_Fiscal_Local.compl          := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Local.compl ) );
   est_row_Nota_Fiscal_Local.bairro         := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Local.bairro ) );
   est_row_Nota_Fiscal_Local.cidade         := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Local.cidade ) );
   est_row_Nota_Fiscal_Local.cpf            := trim( pk_csf.fkg_converte ( replace(replace(replace(est_row_Nota_Fiscal_Local.cpf, '.', ''), '/', ''), '-', '') ) );
   est_row_Nota_Fiscal_Local.ie             := trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Local.ie ) );
   --
   if nvl(est_row_Nota_Fiscal_Local.notafiscal_id, 0) > 0
      and est_row_Nota_Fiscal_Local.dm_tipo_local in (0, 1)
     -- and (est_row_Nota_Fiscal_Local.cnpj is not null or est_row_Nota_Fiscal_Local.cpf is not null )
      and est_row_Nota_Fiscal_Local.lograd is not null
      and est_row_Nota_Fiscal_Local.nro is not null
      and est_row_Nota_Fiscal_Local.bairro is not null
      and est_row_Nota_Fiscal_Local.cidade is not null
      and nvl(est_row_Nota_Fiscal_Local.cidade_ibge, 0) > 0
      and est_row_Nota_Fiscal_Local.uf is not null
      and est_row_Nota_Fiscal_Local.dm_ind_carga in (0, 1, 2, 3, 4, 5, 9)
      then
      --
      vn_fase := 99.2;
      --
      -- Verifica se já existe o registro
      begin
         select id
           into vn_nflocal_id
           from nota_fiscal_local
          where notafiscal_id = est_row_Nota_Fiscal_Local.notafiscal_id
            and dm_tipo_local = est_row_Nota_Fiscal_Local.dm_tipo_local;
      exception
         when too_many_rows then
            vn_nflocal_id := 1;
         when others then
            vn_nflocal_id := null;
      end;
      --
      if nvl(gn_tipo_integr,0) = 0 or nvl(vn_nflocal_id,0) > 0 then
         --
         vn_fase := 99.3;
         --
         update Nota_Fiscal_Local set cnpj           = est_row_Nota_Fiscal_Local.cnpj
                                    , lograd         = est_row_Nota_Fiscal_Local.lograd
                                    , nro            = est_row_Nota_Fiscal_Local.nro
                                    , compl          = est_row_Nota_Fiscal_Local.compl
                                    , bairro         = est_row_Nota_Fiscal_Local.bairro
                                    , cidade         = est_row_Nota_Fiscal_Local.cidade
                                    , cidade_ibge    = est_row_Nota_Fiscal_Local.cidade_ibge
                                    , uf             = est_row_Nota_Fiscal_Local.uf
                                    , dm_ind_carga   = est_row_Nota_Fiscal_Local.dm_ind_carga
                                    , cpf            = est_row_Nota_Fiscal_Local.cpf
                                    , ie             = est_row_Nota_Fiscal_Local.ie
                                    , dm_tipo_local  = est_row_Nota_Fiscal_Local.dm_tipo_local
          where id = est_row_Nota_Fiscal_Local.id;
         --
      elsif nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.4;
         --
         select nflocal_seq.nextval
           into est_row_Nota_Fiscal_Local.id
           from dual;
         --
         vn_fase := 99.5;
         --
         insert into Nota_Fiscal_Local ( id
                                       , notafiscal_id
                                       , dm_tipo_local
                                       , cnpj
                                       , lograd
                                       , nro
                                       , compl
                                       , bairro
                                       , cidade
                                       , cidade_ibge
                                       , uf
                                       , dm_ind_carga
                                       , cpf
                                       , ie )
                                values ( est_row_Nota_Fiscal_Local.id
                                       , est_row_Nota_Fiscal_Local.notafiscal_id
                                       , est_row_Nota_Fiscal_Local.dm_tipo_local
                                       , est_row_Nota_Fiscal_Local.cnpj
                                       , est_row_Nota_Fiscal_Local.lograd
                                       , est_row_Nota_Fiscal_Local.nro
                                       , est_row_Nota_Fiscal_Local.compl
                                       , est_row_Nota_Fiscal_Local.bairro
                                       , est_row_Nota_Fiscal_Local.cidade
                                       , est_row_Nota_Fiscal_Local.cidade_ibge
                                       , est_row_Nota_Fiscal_Local.uf
                                       , est_row_Nota_Fiscal_Local.dm_ind_carga
                                       , est_row_Nota_Fiscal_Local.cpf
                                       , est_row_Nota_Fiscal_Local.ie
                                       );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Nota_Fiscal_Local fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_LOCAL;

----------------------------------------------------
-- Integra informações de email por tipo de anexo --
----------------------------------------------------
PROCEDURE PKB_INTEGR_NFDEST_EMAIL ( EST_LOG_GENERICO_NF      IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                  , EST_ROW_NFDEST_EMAIL  IN OUT NOCOPY  NFDEST_EMAIL%ROWTYPE
                                  , EN_NOTAFISCAL_ID      IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_nfdest_email.notafiscaldest_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para relacionar ao email por tipo de anexo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   est_row_nfdest_email.email := trim ( replace(est_row_nfdest_email.email, ',', ';') );
   --
   vn_fase := 2.1;
   --
   if est_row_nfdest_email.email is null then
      --
      vn_fase := 2.2;
      --
      gv_mensagem_log := 'Não informado o e-mail do destinatário conforme o tipo de anexo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if nvl(est_row_nfdest_email.dm_tipo_anexo,0) not in (1, 2, 3) then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := 'Tipo de anexo do e-mail está inválido ('||nvl(est_row_nfdest_email.dm_tipo_anexo,0)||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   -- então registra o local de coleta/entrega da NF
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.1;
   --
   if nvl(est_row_nfdest_email.notafiscaldest_id,0) > 0
      and est_row_nfdest_email.email is not null
      and nvl(est_row_nfdest_email.dm_tipo_anexo,0) in (1, 2, 3) then
      --
      vn_fase := 99.2;
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.3;
         --
         select NFDESTEMAIL_SEQ.nextval
           into est_row_nfdest_email.id
           from dual;
         --
         vn_fase := 99.4;
         --
         insert into nfdest_email ( id
                                  , notafiscaldest_id
                                  , email
                                  , dm_tipo_anexo
                                  , dm_st_email
                                  )
                           values ( est_row_nfdest_email.id
                                  , est_row_nfdest_email.notafiscaldest_id
                                  , est_row_nfdest_email.email
                                  , est_row_nfdest_email.dm_tipo_anexo
                                  , 0 -- Não enviado
                                  );
         --
      else
         --
         vn_fase := 99.5;
         --
         update nfdest_email set notafiscaldest_id  = est_row_nfdest_email.notafiscaldest_id
                               , email              = est_row_nfdest_email.email
                               , dm_tipo_anexo      = est_row_nfdest_email.dm_tipo_anexo
                               , dm_st_email        = 0 -- Não enviado
          where id = est_row_nfdest_email.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nfdest_email fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFDEST_EMAIL;

--------------------------------------------------------------------
-- Procedimento de registro da pessoa destinatário da Nota Fiscal --
--------------------------------------------------------------------
PROCEDURE PKB_VERIF_PESSOAS_RESTRICAO ( EST_LOG_GENERICO_NF   IN  OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                      , EV_CPF_CNPJ        IN  CTRL_RESTR_PESSOA.CPF_CNPJ%TYPE
                                      , EN_MULTORG_ID      IN  CTRL_RESTR_PESSOA.MULTORG_ID%TYPE DEFAULT 0
                                      ) IS
   --
   vn_fase             number := null;
   vn_loggenerico_id   log_generico_nf.id%type;
   vn_multorg_id       mult_org.id%type;
   --
   cursor c_restricao ( en_multorg_id number ) is
   select crp.*
     from ctrl_restr_pessoa crp
    where crp.cpf_cnpj = ev_cpf_cnpj
      and crp.dm_situacao = 1 -- Ativo
      and pk_csf_api.gt_row_Nota_Fiscal.dt_emiss between crp.dt_ini and nvl(crp.dt_fin, sysdate)
      and crp.multorg_id = en_multorg_id
    order by crp.id;
   --
BEGIN
   --
   if nvl(en_multorg_id,0) = 0 then
      --
      vn_multorg_id := pk_csf.fkg_multorg_id ( ev_multorg_cd => '1' );
      --
   else
      --
      vn_multorg_id := en_multorg_id;
      --
   end if;
   --
   vn_fase := 1;
   --
   if trim(ev_cpf_cnpj) is not null
      and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 2;
      --
      for rec in c_restricao (vn_multorg_id) loop
         --
         vn_fase := 3;
         --
         gv_mensagem_log := 'Destinatário da nota fiscal está com a restrição: '||rec.mensagem||' no período de '||rec.dt_ini||' até '||rec.dt_fin||'.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_verif_pessoas_restricao fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VERIF_PESSOAS_RESTRICAO;

--------------------------------------------------------------------
-- Procedimento de registro da pessoa destinatário da Nota Fiscal --
--------------------------------------------------------------------
PROCEDURE PKB_REG_PESSOA_DEST_NF ( EST_LOG_GENERICO_NF         IN  OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                 , ET_ROW_NOTA_FISCAL_DEST  IN  NOTA_FISCAL_DEST%ROWTYPE
                                 , EV_COD_PART              IN  PESSOA.COD_PART%TYPE
                                 , EV_CNPJ                  IN  NOTA_FISCAL_DEST.CNPJ%TYPE
                                 , EV_CPF                   IN  NOTA_FISCAL_DEST.CPF%TYPE
                                 , EV_IE                    IN  NOTA_FISCAL_DEST.IE%TYPE ) IS
   --
   vt_log_generico_nf   dbms_sql.number_table;
   vn_dm_atual_part  empresa.dm_atual_part%type;
   vn_fase           number := 0;
   vv_cod_part       pessoa.cod_part%type;
   vn_dm_tipo_incl   pessoa.dm_tipo_incl%type;
   vn_multorg_id     empresa.multorg_id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   vt_log_generico_nf.delete;
   -- verifica se a empresa que emitiu a nota atualiza o cadastro do participante
   -- somente para notas de emissão própria
   begin
      --
      select em.dm_atual_part
           , em.multorg_id
        into vn_dm_atual_part
           , vn_multorg_id
        from empresa em
       where em.id = gt_row_nota_fiscal.empresa_id;
      --
   exception
      when others then
         vn_dm_atual_part := 0;
         vn_multorg_id    := null;
   end;
   --
   vn_fase := 2;
   --
   if nvl(vn_dm_atual_part,0) = 1
      and gt_row_nota_fiscal.dm_ind_emit = 0
      then
      --
      vn_fase := 3;
      --
      vv_cod_part := trim(ev_cod_part);
      --
      if trim(vv_cod_part) is null then
         --
         if trim(ev_cnpj) is not null then
            --
            vv_cod_part := et_row_Nota_Fiscal_Dest.uf || trim(ev_cnpj);
            --
         elsif trim(ev_cpf) is not null then
            --
            vv_cod_part := et_row_Nota_Fiscal_Dest.uf || trim(ev_cpf);
            --
         else
            --
            vv_cod_part := et_row_Nota_Fiscal_Dest.notafiscal_id;
            --
         end if;
         --
      end if;
      --
      if trim(vv_cod_part) is not null then
         --
         vn_fase := 4;
         --
         pk_csf_api_cad.gt_row_pessoa := null;
         --
         pk_csf_api_cad.gt_row_pessoa.dm_tipo_incl  := 1; -- Externo, cadastrado na importação dos dados
         pk_csf_api_cad.gt_row_pessoa.cod_part      := vv_cod_part;
         pk_csf_api_cad.gt_row_pessoa.nome          := substr(et_row_Nota_Fiscal_Dest.nome,1,60);
         pk_csf_api_cad.gt_row_pessoa.lograd        := substr(et_row_Nota_Fiscal_Dest.lograd,1,60);
         --
         vn_fase := 4.1;
         --
         pk_csf_api_cad.gt_row_pessoa.nro           := substr(et_row_Nota_Fiscal_Dest.nro, 1, 10);
         pk_csf_api_cad.gt_row_pessoa.cx_postal     := null;
         pk_csf_api_cad.gt_row_pessoa.compl         := et_row_Nota_Fiscal_Dest.compl;
         pk_csf_api_cad.gt_row_pessoa.bairro        := et_row_Nota_Fiscal_Dest.bairro;
         --
         vn_fase := 4.2;
         --
         if nvl(et_row_Nota_Fiscal_Dest.cidade_ibge,0) > 0 then
            pk_csf_api_cad.gt_row_pessoa.cidade_id     := pk_csf.fkg_Cidade_ibge_id ( ev_ibge_cidade => et_row_Nota_Fiscal_Dest.cidade_ibge );
         else
            pk_csf_api_cad.gt_row_pessoa.cidade_id     := pk_csf.fkg_Cidade_ibge_id ( ev_ibge_cidade => 9999999 );
         end if;
         --
         vn_fase := 4.3;
         --
         pk_csf_api_cad.gt_row_pessoa.cep           := et_row_Nota_Fiscal_Dest.cep;
         pk_csf_api_cad.gt_row_pessoa.fone          := et_row_Nota_Fiscal_Dest.fone;  --substr(et_row_Nota_Fiscal_Dest.fone, 1, 10);
         pk_csf_api_cad.gt_row_pessoa.fax           := null;
         pk_csf_api_cad.gt_row_pessoa.pais_id       := pk_csf.fkg_Pais_siscomex_id ( ev_cod_siscomex => et_row_Nota_Fiscal_Dest.cod_pais );
         pk_csf_api_cad.gt_row_pessoa.multorg_id    := vn_multorg_id;
         --
         vn_fase := 5;
         --
         if trim(ev_cnpj) is null
            and trim(ev_cpf) is null then
            --
            pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa := 2; -- EXTERIOR
            --
         elsif trim(ev_cnpj) is not null then
            --
            pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa := 1; -- JURIDICA
            --
         elsif trim(ev_cpf) is not null then
            --
            pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa := 0; -- FÍSICA
            --
         end if;
         --
         vn_fase := 6;
         --
         -- Procura pelo CPF/CNPJ
         if nvl(pk_csf_api_cad.gt_row_pessoa.id,0) <= 0 then
            --
            vn_fase := 6.1;
            -- Verifica se existe o participante no Compliance NFe (procura pelo Código do participante e se não achar, pelo CPF/CNPJ)
            pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id => vn_multorg_id
                                                                             , ev_cod_part   => vv_cod_part );
            --
            vn_fase := 6.2;
            --
            if nvl(pk_csf_api_cad.gt_row_pessoa.id,0) <= 0 then
               --
               vn_fase := 6.3;
               --
               if trim(ev_cnpj) is not null then
                  --
                  -- substituído para que recupere o cadastro mais recente de pessoa com a mesma sigla de estado do destinatário
                  -- pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_cpf_cnpj => trim(ev_cnpj) );
                  --
                  vn_fase := 6.4;
                  pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_pessoa_id_cpf_cnpj_uf ( en_multorg_id => vn_multorg_id
                                                                                      , en_cpf_cnpj   => trim(ev_cnpj)
                                                                                      , ev_uf         => et_row_nota_fiscal_dest.uf
                                                                                      );
                  --
               elsif trim(ev_cpf) is not null then
                     --
                     -- substituído para que recupere o cadastro mais recente de pessoa com a mesma sigla de estado do destinatário
                     -- pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_cpf_cnpj => trim(ev_cpf) );
                     --
                     vn_fase := 6.5;
                     pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_Pessoa_id_cpf_cnpj_uf ( en_multorg_id => vn_multorg_id
                                                                                         , en_cpf_cnpj   => trim(ev_cpf)
                                                                                         , ev_uf         => et_row_nota_fiscal_dest.uf
                                                                                         );
                     --
               end if;
               --
            end if;
            --
         end if;
         --
         if nvl(pk_csf_api_cad.gt_row_pessoa.id,0) > 0 then
            --
            vn_dm_tipo_incl := pk_csf.fkg_pessoa_id_dm_tipo_incl ( en_pessoa_id => pk_csf_api_cad.gt_row_pessoa.id );
            --
         else
            vn_dm_tipo_incl := 1;
         end if;
         --
         vn_fase := 7;
         --
         if nvl(pk_csf_api_cad.gt_row_pessoa.id,0) > 0 then
            --
            update nota_fiscal nf
               set nf.pessoa_id = pk_csf_api_cad.gt_row_pessoa.id
             where nf.id          = et_row_nota_fiscal_dest.notafiscal_id
               and nf.dm_ind_emit = 0 -- emissão própria
               and nf.pessoa_id  <= 0;
            --
         end if;
         --
         vn_fase := 8;
         -- Somente atualiza pessoas incluidas por meio de integração
         if vn_dm_tipo_incl = 1 then
            --
            vn_fase := 9;
            -- Valida se o participante não está cadastrado como empresa
            if pk_csf.fkg_valida_part_empresa ( en_multorg_id => pk_csf_api_cad.gt_row_pessoa.multorg_id
                                              , ev_cod_part   => pk_csf_api_cad.gt_row_pessoa.cod_part ) = FALSE then
               -- chama procedimento de resgitro da pessoa
               pk_csf_api_cad.pkb_ins_atual_pessoa ( est_log_generico => vt_log_generico_nf
                                                   , est_pessoa       => pk_csf_api_cad.gt_row_pessoa
                                                   , en_empresa_id    => gt_row_nota_fiscal.empresa_id
                                                   );
               --
            end if;
            --
            vn_fase := 10;
            --
            if nvl(pk_csf_api_cad.gt_row_pessoa.id,0) > 0 then
               --
               vn_fase := 11;
               -- Faz o Registro de pessoa física/jurídica
               if pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa = 0 then -- Física
                  --
                  vn_fase := 12;
                  --
                  pk_csf_api_cad.gt_row_fisica := null;
                  --
                  pk_csf_api_cad.gt_row_fisica.pessoa_id  := pk_csf_api_cad.gt_row_pessoa.id;
                  --
                  vn_fase := 13;
                  --
                  begin
                     --
                     pk_csf_api_cad.gt_row_fisica.num_cpf    := to_number(substr(ev_cpf, 1, 9));
                     pk_csf_api_cad.gt_row_fisica.dig_cpf    := to_number(substr(ev_cpf, 10, 2));
                     pk_csf_api_cad.gt_row_fisica.inscr_prod := EV_IE;
                     --
                  exception
                     when others then
                        --
                        gv_mensagem_log := 'Erro inconsistência no CPF do destinatário da NFe (fase: '||vn_fase||' - pkb_reg_pessoa_dest_nf): '||sqlerrm;
                        --
                        declare
                           vn_loggenerico_id  log_generico_nf.id%type;
                        begin
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => erro_de_validacao
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia );
                           -- Armazena o "loggenerico_id" na memória
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => est_log_generico_nf );
                        exception
                           when others then
                              null;
                        end;
                        --
                  end;
                  --
                  vn_fase := 14;
                  --
                  pk_csf_api_cad.gt_row_fisica.rg := null;
                  --
                  pk_csf_api_cad.pkb_ins_atual_fisica ( est_log_generico => vt_log_generico_nf
                                                      , est_fisica => pk_csf_api_cad.gt_row_fisica 
                                                      , en_empresa_id    => gt_row_nota_fiscal.empresa_id
                                                      );
                  --
               elsif pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa = 1 then -- Jurídica
                  --
                  vn_fase := 15;
                  --
                  pk_csf_api_cad.gt_row_juridica := null;
                  --
                  pk_csf_api_cad.gt_row_juridica.pessoa_id     := pk_csf_api_cad.gt_row_pessoa.id;
                  --
                  vn_fase := 16;
                  --
                  begin
                     --
                     pk_csf_api_cad.gt_row_juridica.num_cnpj      := to_number(substr(ev_cnpj, 1, 8));
                     pk_csf_api_cad.gt_row_juridica.num_filial    := to_number(substr(ev_cnpj, 9, 4));
                     pk_csf_api_cad.gt_row_juridica.dig_cnpj      := to_number(substr(ev_cnpj, 13, 2));
                     --
                  exception
                     when others then
                        --
                        gv_mensagem_log := 'Erro inconsistência no CNPJ do destinatário da NFe (fase: '||vn_fase||' - pkb_reg_pessoa_dest_nf): '||sqlerrm;
                        --
                        declare
                           vn_loggenerico_id  log_generico_nf.id%type;
                        begin
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => erro_de_validacao
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia );
                           -- Armazena o "loggenerico_id" na memória
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => est_log_generico_nf );
                        exception
                           when others then
                              null;
                         end;
                        --
                   end;
                  --
                  vn_fase := 17;
                  --
                  pk_csf_api_cad.gt_row_juridica.ie            := ev_ie;
                  pk_csf_api_cad.gt_row_juridica.iest          := null;
                  pk_csf_api_cad.gt_row_juridica.im            := null;
                  pk_csf_api_cad.gt_row_juridica.cnae          := null;
                  pk_csf_api_cad.gt_row_juridica.suframa       := et_row_Nota_Fiscal_Dest.suframa;
                  --
                  vn_fase := 18;
                  --
                  pk_csf_api_cad.pkb_ins_atual_juridica ( est_log_generico => vt_log_generico_nf
                                                        , est_juridica => pk_csf_api_cad.gt_row_juridica 
                                                        , en_empresa_id    => gt_row_nota_fiscal.empresa_id
                                                        );
                  --
               end if;
               --
            end if;
            --
         end if;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_reg_pessoa_dest_nf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_REG_PESSOA_DEST_NF;

---------------------------------------------------------------------------------------------------------------------------------------
-- Integra as informações do Destinatário da Nota Fiscal                                                                             --
-- A API de integração do destinatário da NFe, irá verificar se houve algum erro de integração com os dados informados               --
-- do destinatário, caso exista erro, verifica se a empresa "Utiliza o Endereço de Faturamento do Destinatário para emissão de NFe", --
-- se utiliza, o endereço errado será substituido pelo registrado no Compliance NFe (Cadastro de Pessoas)                            --
---------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_DEST ( EST_LOG_GENERICO_NF          IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                      , EST_ROW_NOTA_FISCAL_DEST  IN OUT NOCOPY  NOTA_FISCAL_DEST%ROWTYPE
                                      , EV_COD_PART               IN             PESSOA.COD_PART%TYPE
                                      , EN_MULTORG_ID             IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase                number := 0;
   vn_loggenerico_id      log_generico_nf.id%type;
   vn_dm_util_end_fat_nfe empresa.dm_util_end_fat_nfe%type := 0;
   vn_indice              number := 0;
   vn_pessoa_id           Pessoa.id%type;
   vt_log_generico_nf        dbms_sql.number_table;
   vn_atualiza_erro       number := 1; -- 0-Não; 1-Sim
   vb_integr_edi          boolean := false;
   vv_email_usuario       neo_usuario.email%type := null;
   vv_cod_mod             mod_fiscal.cod_mod%type;
   vv_cnpj                nota_fiscal_dest.cnpj%type;
   vv_cpf                 nota_fiscal_dest.cpf%type;
   vv_ie                  nota_fiscal_dest.ie%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   vt_log_generico_nf.delete;
   --
   vn_fase := 1.1;
   --
   vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => gt_row_nota_fiscal.modfiscal_id );
   --
   -- Verifica se a nota fiscal não foi informada
   if nvl(est_row_Nota_Fiscal_Dest.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.2;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para relacionar ao Destinatário.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida se o campo nome tem menos que 2 caracteres
   if nvl(length( trim(pk_csf.fkg_converte(est_row_Nota_Fiscal_Dest.nome)) ),0) < 2
      and vv_cod_mod <> '65' then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Nome do destinatário da Nota Fiscal" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Dest.nome||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --   
   if nvl(length( trim(pk_csf.fkg_converte(est_row_Nota_Fiscal_Dest.nome)) ),0) > 60
      and vv_cod_mod <> '65' then
      --
      vn_fase := 2.2;
      --
      gv_mensagem_log := '"Nome do destinatário da Nota Fiscal" deve ter no maximo sessenta caracteres ('||est_row_Nota_Fiscal_Dest.nome||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --   
   vn_fase := 3;
   -- Valida informação do número do endereço do emitente
   if trim( pk_csf.fkg_converte(est_row_Nota_Fiscal_Dest.nro) ) is null
      and vv_cod_mod <> '65' then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Número do endereço" destinatário da Nota Fiscal não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;

   vn_fase := 4;

   -- Valida se o campo logradouro tem menos que 2 caracteres
   if nvl(length( trim(pk_csf.fkg_converte(est_row_Nota_Fiscal_Dest.lograd)) ),0) < 2
      and vv_cod_mod <> '65'
      and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- Emissão Propria
      then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Logradouro do destinatário da Nota Fiscal" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Dest.lograd||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   if nvl(length( trim(pk_csf.fkg_converte(est_row_Nota_Fiscal_Dest.lograd)) ),0) > 60
      and vv_cod_mod <> '65'
      and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- Emissão Propria
      then
      --
      vn_fase := 4.21;
      --
      gv_mensagem_log := '"Logradouro do destinatário da Nota Fiscal" deve ter no maximo sessenta caracteres ('||est_row_Nota_Fiscal_Dest.lograd||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if; 
   
   vn_fase := 5;

   -- Valida se o campo bairro tem menos que 2 caracteres
   if nvl(length( trim(pk_csf.fkg_converte(est_row_Nota_Fiscal_Dest.bairro)) ),0) < 2
      and vv_cod_mod <> '65'
      and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- Emissão Propria
      then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Bairro do destinatário da Nota Fiscal" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Dest.bairro||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;

   vn_fase := 6;

   -- Valida se o campo cidade tem menos que 2 caracteres
   if nvl(length( trim(pk_csf.fkg_converte(est_row_Nota_Fiscal_Dest.cidade)) ),0) < 2
      and vv_cod_mod <> '65'
      and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- Emissão Propria
      then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Cidade do destinatário da Nota Fiscal" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Dest.cidade||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   if est_row_Nota_Fiscal_Dest.uf is null
      and vv_cod_mod <> '65' then
      --
      gv_mensagem_log := '"Sigla da UF do destinatário da Nota Fiscal" é obrigatória.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
     --
     if est_row_Nota_Fiscal_Dest.uf is not null then
        -- verifica se a UF é inválida
        if pk_csf.fkg_uf_valida ( ev_sigla_estado => est_row_Nota_Fiscal_Dest.uf ) = false then
           --
           vn_fase := 7.1;
           --
           gv_mensagem_log := '"Sigla da UF do destinatário da Nota Fiscal" inválida ('||est_row_Nota_Fiscal_Dest.uf||').';
           --
           vn_loggenerico_id := null;
           --
           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                               , ev_mensagem         => gv_cabec_log
                               , ev_resumo           => gv_mensagem_log
                               , en_tipo_log         => erro_de_validacao
                               , en_referencia_id    => gn_referencia_id
                               , ev_obj_referencia   => gv_obj_referencia );
           -- Armazena o "loggenerico_id" na memória
           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                  , est_log_generico_nf => vt_log_generico_nf );
           --
        end if;
        --
     end if;
     --
     vn_fase := 8;
     -- Se o campo UF = 'EX' atribui Exterior para cidade
     if est_row_Nota_Fiscal_Dest.uf = 'EX' then
        --
        vn_fase := 8.1;
        --
        est_row_Nota_Fiscal_Dest.cidade       := 'EXTERIOR';
        est_row_Nota_Fiscal_Dest.cidade_ibge  := 9999999;
        --
     end if;

     vn_fase := 9;
     -- Valida o campo cidade_ibge
     if nvl(est_row_Nota_Fiscal_Dest.cidade_ibge, 0) <> 9999999
        and est_row_Nota_Fiscal_Dest.cidade_ibge is not null
        then
      --
      vn_fase := 9.1;
      --
      if pk_csf.fkg_ibge_cidade ( ev_ibge_cidade => est_row_Nota_Fiscal_Dest.cidade_ibge ) = false then
         --
         vn_fase := 9.2;
         --
         gv_mensagem_log := '"Código IBGE da cidade do destinatário da Nota Fiscal" inválido ('||est_row_Nota_Fiscal_Dest.cidade_ibge||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => vt_log_generico_nf );
         --
      end if;
      --
      vn_fase := 9.3;
      -- Valida se o IBGE da cidade pertence a sigla da UF
      if pk_csf.fkg_ibge_cidade_por_sigla_uf ( en_ibge_cidade   => est_row_Nota_Fiscal_Dest.cidade_ibge
                                             , ev_sigla_estado  => est_row_Nota_Fiscal_Dest.uf
                                             ) = false then
         --
         vn_fase := 9.4;
         --
         gv_mensagem_log := '"Código IBGE da cidade do destinatário da Nota Fiscal" ('||
                            est_row_Nota_Fiscal_Dest.cidade_ibge||') não pertence a sigla do estado ('||est_row_Nota_Fiscal_Dest.uf||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => vt_log_generico_nf );
         --
      end if;
      --
      vn_fase := 9.5;
      --
      if trim(est_row_Nota_Fiscal_Dest.cidade) is null
         and est_row_Nota_Fiscal_Dest.cidade_ibge is not null
         then
         -- Busca o nome da cidade conforme IBGE
         est_row_Nota_Fiscal_Dest.cidade := pk_csf.fkg_descr_cidade_conf_ibge ( ev_ibge_cidade => est_row_Nota_Fiscal_Dest.cidade_ibge );
         --
      end if;
      --
      if trim(est_row_Nota_Fiscal_Dest.cidade) is null
         and vv_cod_mod <> '65' then
         est_row_Nota_Fiscal_Dest.cidade := 'NI';
      end if;
      --
   end if;
   --
   vn_fase := 9.6;
   --
   if trim(est_row_Nota_Fiscal_Dest.uf) <> 'EX'
      and est_row_Nota_Fiscal_Dest.cidade_ibge = 9999999 then
      --
      gv_mensagem_log := 'Código IBGE do município do destinatário 9999999 não pertence ao estado '||trim(est_row_Nota_Fiscal_Dest.uf)||'.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 10;
   -- Se o código do país for nulo, atribui 1058-Brasil
   if nvl(est_row_Nota_Fiscal_Dest.cod_pais,0) <= 0 then
      --
      est_row_Nota_Fiscal_Dest.cod_pais := 1058;
      --
   end if;
   --
   vn_fase := 10.1;
   --
   if est_row_Nota_Fiscal_Dest.cod_pais <> 1058
      and est_row_Nota_Fiscal_Dest.uf <> 'EX'
      and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- somente emissão propria
      then
      --
      gv_mensagem_log := '"Código do país do destinatário da Nota Fiscal ' || est_row_Nota_Fiscal_Dest.cod_pais || '-'
                         || pk_csf.fkg_Descr_Pais_siscomex ( ev_cod_siscomex => trim(est_row_Nota_Fiscal_Dest.cod_pais) )
                         || '" e sigla do estado está inválida ('||est_row_Nota_Fiscal_Dest.uf||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 10.2;
   -- Valida o campo "cod_pais"
   if pk_csf.fkg_codpais_siscomex_valido ( en_cod_siscomex => est_row_Nota_Fiscal_Dest.cod_pais ) = false then
      --
      vn_fase := 10.3;
      --
      gv_mensagem_log := '"Código do país do destinatário da Nota Fiscal" inválido ('||est_row_Nota_Fiscal_Dest.cod_pais||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 10.31;
   --
   est_row_Nota_Fiscal_Dest.pais := pk_csf.fkg_Descr_Pais_siscomex ( ev_cod_siscomex => trim(est_row_Nota_Fiscal_Dest.cod_pais) );
   --
   vn_fase := 10.4;
   --
   if trim( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.pais ) ) is null then
      --
      est_row_Nota_Fiscal_Dest.pais := 'Brasil';
      --
   end if;
   --   --
   vn_fase := 10.5;
   --
   -- Valida se o Parâmetro que habilita a emissão da Nota Fiscal Eletrônica para Exportação está setado para 0 = Não
   --
   if nvl(pk_csf.fkg_perm_exp_pais_id ( en_pais_id => pk_csf.fkg_Pais_siscomex_id( ev_cod_siscomex => est_row_Nota_Fiscal_Dest.cod_pais )), 1) = 0 then
      --
      vn_fase := 10.6;
      --
      gv_mensagem_log := 'O "Código do País do Destinatário" ('||est_row_Nota_Fiscal_Dest.cod_pais||') não permite exportação.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11;

   est_row_Nota_Fiscal_Dest.ie := trim ( replace(replace(replace(replace(upper(est_row_Nota_Fiscal_Dest.ie), ' ', ''), '.', ''), '-', ''), '/', '') );
   -- Valida se a inscrição estadual de produtor de Minas Gerais
   if trim(est_row_Nota_Fiscal_Dest.ie) is not null and est_row_Nota_Fiscal_Dest.uf = 'MG' then
      --
      -- PR9999 a PR99999999 para destinatários produtores rurais de MG.
      vn_fase := 11.1;

      if upper(substr(trim(est_row_Nota_Fiscal_Dest.ie), 1, 2)) = 'PR'
         and to_number(substr(trim(est_row_Nota_Fiscal_Dest.ie), 3, 12)) not between 9999 and 99999999 then
         --
         gv_mensagem_log := '"Inscrição estadual de produtor para Minas Gerais do destinatário da Nota Fiscal"('||
                            trim(est_row_Nota_Fiscal_Dest.ie)||') está inválida.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => vt_log_generico_nf );
         --
      end if;

   end if;
   --
   vn_fase := 11.2;
   --
   if trim(est_row_Nota_Fiscal_Dest.cnpj) = '00000000000000' or trim(est_row_Nota_Fiscal_Dest.cnpj) = '0' then
      est_row_Nota_Fiscal_Dest.cnpj := null;
   end if;
   --
   vn_fase := 11.3;
   --
   if trim(est_row_Nota_Fiscal_Dest.cpf) = '00000000000' or trim(est_row_Nota_Fiscal_Dest.cpf) = '0' then
      est_row_Nota_Fiscal_Dest.cpf := null;
   end if;
   --
   -- Se o estado for EX, então limpa o CNPJ e IE
   if est_row_Nota_Fiscal_Dest.uf = 'EX' then
      --
      est_row_Nota_Fiscal_Dest.cnpj := null;
      est_row_Nota_Fiscal_Dest.cpf := null;
      est_row_Nota_Fiscal_Dest.ie := null;
      --
   end if;
   --
   vn_fase := 12;
   -- valida se CNPJ é numerico caso ele seja informado.
   if trim(est_row_Nota_Fiscal_Dest.cnpj) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Dest.cnpj ) = false then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := 'O "CNPJ do destinatário da Nota Fiscal" ('||est_row_Nota_Fiscal_Dest.cnpj||
                         ') deve conter somente números considerando os zeros à esquerda.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12.2;
   --
   -- Valida o CNPJ
   if trim(est_row_Nota_Fiscal_Dest.cnpj) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Dest.cnpj ) = true
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_Nota_Fiscal_Dest.cnpj), 0) = 0 then
      --
      vn_fase := 12.3;
      --
      gv_mensagem_log := 'O "CNPJ do destinatário da Nota Fiscal" ('||est_row_Nota_Fiscal_Dest.cnpj||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   -- valida se CNPJ é numerico caso ele seja informado.
   if trim(est_row_Nota_Fiscal_Dest.cpf) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Dest.cpf ) = false then
      --
      vn_fase := 13.1;
      --
      gv_mensagem_log := 'O "CPF do destinatário da Nota Fiscal" ('||est_row_Nota_Fiscal_Dest.cpf||
                         ') deve conter somente números considerando os zeros à esquerda.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13.2;
   --
   -- Valida o CPF
   if trim(est_row_Nota_Fiscal_Dest.cpf) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Dest.cpf ) = true
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_Nota_Fiscal_Dest.cpf), 0) = 0
      then
      --
      vn_fase := 13.3;
      --
      gv_mensagem_log := 'O "CPF do destinatário da Nota Fiscal" ('||est_row_Nota_Fiscal_Dest.cpf||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14;
   --
   -- Valida Inscrição Estadual
   if trim(est_row_Nota_Fiscal_Dest.ie) is not null
      and trim(est_row_Nota_Fiscal_Dest.cnpj) is not null
      and trim(est_row_Nota_Fiscal_Dest.uf) is not null
      and nvl(pk_valida_docto.fkg_valida_ie( ev_inscr_est => est_row_Nota_Fiscal_Dest.ie
                                           , ev_estado    => est_row_Nota_Fiscal_Dest.uf ), 0) = 0
      then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := 'A "Inscrição Estadual do destinatário da Nota Fiscal" ('||est_row_Nota_Fiscal_Dest.ie||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14.2;
   --
   if trim(est_row_Nota_Fiscal_Dest.ie) like 'ISENT%' then
      --
      --est_row_Nota_Fiscal_Dest.ie := 'ISENTO';
      est_row_Nota_Fiscal_Dest.ie := null; -- Mudança de regra para NFe 3.10
      --
   end if;
   --
   vn_fase := 15;
   --
   if trim(est_row_Nota_Fiscal_Dest.cnpj) = 'EXTERIOR' then
      est_row_Nota_Fiscal_Dest.cnpj := null;
   elsif trim(est_row_Nota_Fiscal_Dest.cnpj) is not null then
      est_row_Nota_Fiscal_Dest.cnpj := lpad(trim(est_row_Nota_Fiscal_Dest.cnpj), 14, '0');
   end if;
   --
   vn_fase := 16;
   --
   if trim(est_row_Nota_Fiscal_Dest.cpf) = 'EXTERIOR' then
      est_row_Nota_Fiscal_Dest.cpf := null;
   elsif trim(est_row_Nota_Fiscal_Dest.cpf) is not null then
      est_row_Nota_Fiscal_Dest.cpf := lpad(trim(est_row_Nota_Fiscal_Dest.cpf), 11, '0');
   end if;
   --
   -- Se o destinatário é uma pessoa física o campo "IE" não pode ter os VALORES ISENTO ou ISENTA
   vn_fase := 17;
   --
   if trim(est_row_Nota_Fiscal_Dest.cpf) is not null
      and trim(upper(est_row_Nota_Fiscal_Dest.ie)) in ('ISENTO', 'ISENTA') then
      --
      est_row_Nota_Fiscal_Dest.ie := null;
      --
   end if;
   --
   vn_fase := 18;
   -- retira ponto e barra do telefone
   est_row_Nota_Fiscal_Dest.fone := replace(replace(replace(replace(replace(replace(est_row_Nota_Fiscal_Dest.fone, '.', ''), '-', ''), '*', ''), '(', ''), ')', ''), ' ', '');
   --
   vn_fase := 18.1;
   --
   if trim(est_row_Nota_Fiscal_Dest.fone) is not null
      and not length(trim(est_row_Nota_Fiscal_Dest.fone)) between 6 and 14
      then
      --
      vn_fase := 18.2;
      --
      gv_mensagem_log := 'O tamanho do "fone" ('||est_row_Nota_Fiscal_Dest.fone||') do destintário deve estar entre 6 a 14 caracteres.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 18.3;
   --
   if trim(est_row_Nota_Fiscal_Dest.fone) is not null
      and pk_csf.fkg_is_numerico ( ev_valor => est_row_Nota_Fiscal_Dest.fone ) = false then
      --
      vn_fase := 18.4;
      --
      gv_mensagem_log := 'O "Telefone do Destinatário" ('||est_row_Nota_Fiscal_Dest.fone||') deve ser composto de apenas números.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 18.5;
   --
   -- Valida se o cnpj e o cpf está sendo informado em operações nacionais
   if trim(est_row_Nota_Fiscal_Dest.uf) <> 'EX'
      and trim(est_row_Nota_Fiscal_Dest.cnpj) is null
      and trim(est_row_Nota_Fiscal_Dest.cpf) is null
      and gt_row_Nota_Fiscal.dm_ind_emit = 0 -- emissão própria
      and vv_cod_mod <> '65'
      then
      --
      vn_fase := 18.6;
      --
      gv_mensagem_log := 'O "CNPJ ou CPF do destinatário" é obrigatório em operações nacionais ('||est_row_Nota_Fiscal_Dest.uf||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => vt_log_generico_nf );
      --
   end if;
   --
   vn_fase := 19;
   -- Verifica se foram encontrados erros no cadastro do destinatário da NFe
   if nvl(vt_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 19.1;
      --
      vn_dm_util_end_fat_nfe := pk_csf.fkg_empresa_util_end_fat_nfe ( en_empresa_id => gt_row_Nota_Fiscal.empresa_id );
      --
      vn_fase := 19.2;
      --
      if nvl(vn_dm_util_end_fat_nfe,0) = 1 then -- Sim utiliza
         --
         vn_fase := 19.3;
         --
         -- Verifica se existe pessoa id fechando nos dados de integração (CNPJ/CPF, uf e cidade_ibge
         if trim(est_row_Nota_Fiscal_Dest.cnpj) is not null then
            --
            begin
               --
               vn_fase := 19.4;
               --
               select max(pe.id)
                 into vn_pessoa_id
                 from juridica ju
                    , pessoa   pe
                    , cidade   ci
                    , estado   es
                where ju.num_cnpj     = to_number( substr(est_row_Nota_Fiscal_Dest.cnpj,  1, 8) )
                  and ju.num_filial   = to_number( substr(est_row_Nota_Fiscal_Dest.cnpj,  9, 4) )
                  and ju.dig_cnpj     = to_number( substr(est_row_Nota_Fiscal_Dest.cnpj, 13, 2) )
                  and pe.id           = ju.pessoa_id
                  and pe.multorg_id   = en_multorg_id
                  and ci.id           = pe.cidade_id
                  and es.id           = ci.estado_id
                  and es.sigla_estado = est_row_Nota_Fiscal_Dest.uf
                  and ci.ibge_cidade  = est_row_Nota_Fiscal_Dest.cidade_ibge;
               --
            exception
               when no_data_found then
                  vn_pessoa_id := null;
            end;
            --
         elsif trim(est_row_Nota_Fiscal_Dest.cpf) is not null then
            --
            begin
               --
               vn_fase := 19.5;
               --
               select max(pe.id)
                 into vn_pessoa_id
                 from fisica fi
                    , pessoa pe
                    , cidade ci
                    , estado es
                where fi.num_cpf      = to_number( substr(est_row_Nota_Fiscal_Dest.cpf,  1, 9) )
                  and fi.dig_cpf      = to_number( substr(est_row_Nota_Fiscal_Dest.cpf, 10, 2) )
                  and pe.id           = fi.pessoa_id
                  and pe.multorg_id   = en_multorg_id
                  and ci.id           = pe.cidade_id
                  and es.id           = ci.estado_id
                  and es.sigla_estado = est_row_Nota_Fiscal_Dest.uf
                  and ci.ibge_cidade  = est_row_Nota_Fiscal_Dest.cidade_ibge;
               --
            exception
               when no_data_found then
                  vn_pessoa_id := null;
            end;
            --
         end if;
         --
         -- Se não encontrou o pessoa_id busca nas functions abaixo
         if nvl(vn_pessoa_id,0) <= 0 then
            --
            if trim(est_row_Nota_Fiscal_Dest.cnpj) is not null then
               vn_fase := 19.6;
               vn_pessoa_id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_multorg_id => en_multorg_id
                                                             , en_cpf_cnpj   => trim(est_row_Nota_Fiscal_Dest.cnpj) );
            elsif trim(est_row_Nota_Fiscal_Dest.cpf) is not null then
               vn_fase := 19.7;
               vn_pessoa_id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_multorg_id => en_multorg_id
                                                             , en_cpf_cnpj   => trim(est_row_Nota_Fiscal_Dest.cpf) );
            end if;
            --
         end if ;
         --
         vn_fase := 19.8;
         -- Se não achou um cadastro de PESSOA INTERNA, então pega por integração
         if nvl(vn_pessoa_id,0) <= 0 then
            --
            if trim(est_row_Nota_Fiscal_Dest.cnpj) is not null then
               vn_pessoa_id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_multorg_id => en_multorg_id
                                                             , en_cpf_cnpj   => trim(est_row_Nota_Fiscal_Dest.cnpj) );
            elsif trim(est_row_Nota_Fiscal_Dest.cpf) is not null then
               vn_pessoa_id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_multorg_id => en_multorg_id
                                                             , en_cpf_cnpj   => trim(est_row_Nota_Fiscal_Dest.cpf) );
            end if;
            --
         end if;
         --
         vn_fase := 19.9;
         -- Procura pelo CPF/CNPJ
         if nvl(vn_pessoa_id,0) <= 0 then
            -- Verifica se existe o participante no Compliance NFe (procura pelo Código do participante e se não achar, pelo CPF/CNPJ)
            vn_pessoa_id := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id => en_multorg_id
                                                          , ev_cod_part   => ev_cod_part );
            --
         end if;
         --
         vn_fase := 19.10;
         -- Se exite participante, recupera os dados para o destinatário, caso os dados não estejam completos, registra ERRO DE VALIDACAO
         if nvl(vn_pessoa_id,0) <= 0 then
            --
            vn_fase := 19.11;
            --
            gv_mensagem_log := 'Não existe o registro do participante no Compliance, favor cadastrar e reenviar a Nota Fiscal.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         else
            -- Recupera os dados e valida se os mesmos estão corretos
            -- busca somente se o tipo de inclusão for 0-Interno, que foi cadastrado na solução fiscal
            vn_fase := 19.12;
            --
            begin
               --
               select p.nome
                    , p.lograd
                    , p.nro
                    , p.compl
                    , p.bairro
                    , c.descr
                    , c.ibge_cidade
                    , e.sigla_estado
                    , p.cep
                    , pa.cod_siscomex
                    , pa.descr
                    , p.fone
                 into est_row_Nota_Fiscal_Dest.NOME
                    , est_row_Nota_Fiscal_Dest.LOGRAD
                    , est_row_Nota_Fiscal_Dest.NRO
                    , est_row_Nota_Fiscal_Dest.COMPL
                    , est_row_Nota_Fiscal_Dest.BAIRRO
                    , est_row_Nota_Fiscal_Dest.CIDADE
                    , est_row_Nota_Fiscal_Dest.CIDADE_IBGE
                    , est_row_Nota_Fiscal_Dest.UF
                    , est_row_Nota_Fiscal_Dest.CEP
                    , est_row_Nota_Fiscal_Dest.COD_PAIS
                    , est_row_Nota_Fiscal_Dest.PAIS
                    , est_row_Nota_Fiscal_Dest.FONE
                 from pessoa p
                    , cidade c
                    , estado e
                    , pais   pa
                where p.id   = vn_pessoa_id
                  and c.id   = p.cidade_id
                  and e.id   = c.estado_id
                  and pa.id  = p.pais_id;
               --
            exception
               when others then
                  null;
            end;
            --
            vn_fase := 19.13;
            --
            if (trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.nome ) ) is null
               or trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.lograd ) ) is null
               or trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.nro ) ) is null
               or trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.bairro ) ) is null
               or trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.cidade ) ) is null
               or nvl(est_row_Nota_Fiscal_Dest.cidade_ibge, 0) <= 0
               or trim ( est_row_Nota_Fiscal_Dest.uf ) is null)
               and vv_cod_mod <> '65'
               then
               --
               vn_fase := 19.14;
               --
               gv_mensagem_log := 'Participante com o cadastro incompleto no Compliance NFe! Por favor corrija e re-envie e Nota Fiscal.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            else
               --
               vn_fase := 19.15;
               --
               vn_atualiza_erro := 0; -- Não atualiza os erros!
               --
               gv_mensagem_log := 'Participante da Nota Fiscal atualizado conforme cadastro de Pessoa do Compliance.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => NOTA_FISCAL_INTEGRADA
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               --
            end if;
            --
         end if;
         --
      end if;
      --
      vn_fase := 20;
      --
      if nvl(vn_atualiza_erro,0) = 1 then -- Sim, atualiza os erros
         --
         vn_indice := nvl(vt_log_generico_nf.first,0);
         --
         vn_fase := 20.1;
         --
         loop
            --
            vn_fase := 20.2;
            --
            if vn_indice = 0 then
               exit;
            end if;
            --
            vn_fase := 20.3;
            --
            vn_loggenerico_id := vt_log_generico_nf(vn_indice);
            --
            vn_fase := 20.4;
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
            vn_fase := 20.5;
            --
            if vn_indice = vt_log_generico_nf.last then
               exit;
            else
               vn_indice := vt_log_generico_nf.next(vn_indice);
            end if;
            --
         end loop;
         --
      end if;
      --
   end if;
   --
   vn_fase := 21;
   -- Bloqueio de pessoas com algum tipo de restrição
   --
   if trim(est_row_Nota_Fiscal_Dest.cnpj) is not null then
      --
      pkb_verif_pessoas_restricao ( est_log_generico_nf   => est_log_generico_nf
                                  , ev_cpf_cnpj        => trim(est_row_Nota_Fiscal_Dest.cnpj)
                                  , en_multorg_id      => en_multorg_id
                                  );
      --
   elsif trim(est_row_Nota_Fiscal_Dest.cpf) is not null then
      --
      pkb_verif_pessoas_restricao ( est_log_generico_nf   => est_log_generico_nf
                                  , ev_cpf_cnpj        => trim(est_row_Nota_Fiscal_Dest.cpf)
                                  , en_multorg_id      => en_multorg_id
                                  );
      --
   end if;
   --
   vn_fase := 22;
   --
   if trim(est_row_Nota_Fiscal_Dest.cnpj) is not null then
      -- trata a integração por EDI
      vb_integr_edi := pk_csf.fkg_integr_edi ( en_multorg_id => en_multorg_id
                                             , ev_cpf_cnpj   => trim(est_row_Nota_Fiscal_Dest.cnpj)
                                             , en_dm_tipo    => 1 ); -- NFe
   elsif trim(est_row_Nota_Fiscal_Dest.cpf) is not null then
      -- trata a integração por EDI
      vb_integr_edi := pk_csf.fkg_integr_edi ( en_multorg_id => en_multorg_id
                                             , ev_cpf_cnpj   => trim(est_row_Nota_Fiscal_Dest.cpf)
                                             , en_dm_tipo    => 1 ); -- NFe
   else
      vb_integr_edi := false;
   end if;
   --
   vn_fase := 23;
   --
   if vb_integr_edi then
      est_row_nota_fiscal_dest.dm_integr_edi := 0; -- Não integrado por EDI
   else
      est_row_nota_fiscal_dest.dm_integr_edi := 2; -- sem efeito
   end if;
   --
   vn_fase := 99;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (insere e valida)
   -- então registra a informação do Destinário da NF
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_Nota_Fiscal_Dest.notafiscal_id;
      --
   end if;
   --
   est_row_Nota_Fiscal_Dest.nome         := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.nome ) );
   est_row_Nota_Fiscal_Dest.lograd       := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.lograd ) );
   est_row_Nota_Fiscal_Dest.nro          := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.nro ) );
   est_row_Nota_Fiscal_Dest.compl        := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.compl ) );
   est_row_Nota_Fiscal_Dest.bairro       := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.bairro ) );
   est_row_Nota_Fiscal_Dest.cidade       := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.cidade ) );
   est_row_Nota_Fiscal_Dest.cidade_ibge  := nvl(est_row_Nota_Fiscal_Dest.cidade_ibge,0);
   est_row_Nota_Fiscal_Dest.uf           := trim ( est_row_Nota_Fiscal_Dest.uf );
   est_row_Nota_Fiscal_Dest.pais         := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.pais ) );
   est_row_Nota_Fiscal_Dest.fone         := replace(trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Dest.fone ) ), ' ', '');
   est_row_Nota_Fiscal_Dest.suframa      := trim ( est_row_Nota_Fiscal_Dest.suframa );
   est_row_Nota_Fiscal_Dest.email        := trim ( replace(replace(replace( est_row_Nota_Fiscal_Dest.email , ',', ';'), ' ;', ''), ' ', '') );
   est_row_Nota_Fiscal_Dest.email        := trim( replace(est_row_Nota_Fiscal_Dest.email, '@.com', '') );
   --
   -- limpa acentos de e-mail
   est_row_Nota_Fiscal_Dest.email        := pk_csf.fkg_limpa_acento ( ev_string => est_row_Nota_Fiscal_Dest.email );
   --
   if instr(est_row_Nota_Fiscal_Dest.email, '@') = 0 then
      est_row_Nota_Fiscal_Dest.email := null;
   end if;
   --
   if trim(est_row_Nota_Fiscal_Dest.email) = '@' then
      est_row_Nota_Fiscal_Dest.email := null;
   end if;
   --
   if trim(est_row_Nota_Fiscal_Dest.email) is null then
      --
      update nota_fiscal set dm_st_email = 3
       where id = est_row_Nota_Fiscal_Dest.notafiscal_id;
      --
   end if;	  
   --
   vv_cnpj  := est_row_Nota_Fiscal_Dest.cnpj;
   vv_cpf   := est_row_Nota_Fiscal_Dest.cpf;
   vv_ie    := est_row_Nota_Fiscal_Dest.ie;
   --
   -- Se for emissão própria e homologação, alterar dados do destinatário, conforme nota técnica 2011.2
   if gt_row_Nota_Fiscal.dm_ind_emit = 0 -- emissão própria
      and gt_row_Nota_Fiscal.dm_tp_amb = 2 -- homologação
      then
      --
      est_row_Nota_Fiscal_Dest.nome             := 'NF-E EMITIDA EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL';
--      est_row_Nota_Fiscal_Dest.cnpj             := '99999999000191';
--      est_row_Nota_Fiscal_Dest.cpf              := null;
--      est_row_Nota_Fiscal_Dest.ie               := null;
--      est_row_Nota_Fiscal_Dest.dm_ind_ie_dest   := 9;
      --
   end if;
   --
   -- Se o estado for EX, então limpa o CNPJ e IE
   if est_row_Nota_Fiscal_Dest.uf = 'EX' then
      --
      est_row_Nota_Fiscal_Dest.cnpj := null;
      est_row_Nota_Fiscal_Dest.cpf := null;
      est_row_Nota_Fiscal_Dest.ie := null;
      --
   end if;
   --
   if nvl(est_row_Nota_Fiscal_Dest.notafiscal_id, 0) > 0
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.1;
         --
         select notafiscaldest_seq.nextval
           into est_row_Nota_Fiscal_Dest.id
           from dual;
         --
         vn_fase := 99.2;
         --
         begin
            insert into Nota_Fiscal_Dest ( id
                                         , notafiscal_id
                                         , cnpj
                                         , cpf
                                         , nome
                                         , lograd
                                         , nro
                                         , compl
                                         , bairro
                                         , cidade
                                         , cidade_ibge
                                         , uf
                                         , cep
                                         , cod_pais
                                         , pais
                                         , fone
                                         , ie
                                         , suframa
                                         , email
                                         , dm_integr_edi
                                         , dm_ind_ie_dest
                                         )
                                  values ( est_row_Nota_Fiscal_Dest.id
                                         , est_row_Nota_Fiscal_Dest.notafiscal_id
                                         , est_row_Nota_Fiscal_Dest.cnpj
                                         , est_row_Nota_Fiscal_Dest.cpf
                                         , est_row_Nota_Fiscal_Dest.nome
                                         , est_row_Nota_Fiscal_Dest.lograd
                                         , est_row_Nota_Fiscal_Dest.nro
                                         , est_row_Nota_Fiscal_Dest.compl
                                         , est_row_Nota_Fiscal_Dest.bairro
                                         , est_row_Nota_Fiscal_Dest.cidade
                                         , est_row_Nota_Fiscal_Dest.cidade_ibge
                                         , est_row_Nota_Fiscal_Dest.uf
                                         , est_row_Nota_Fiscal_Dest.cep
                                         , est_row_Nota_Fiscal_Dest.cod_pais
                                         , est_row_Nota_Fiscal_Dest.pais
                                         , est_row_Nota_Fiscal_Dest.fone
                                         , est_row_Nota_Fiscal_Dest.ie
                                         , est_row_Nota_Fiscal_Dest.suframa
                                         , est_row_Nota_Fiscal_Dest.email
                                         , est_row_nota_fiscal_dest.dm_integr_edi
                                         , est_row_Nota_Fiscal_Dest.dm_ind_ie_dest
                                         );
         exception
            when dup_val_on_index then
               --
               vn_fase := 99.3;
               --
               update Nota_Fiscal_Dest set cnpj           = est_row_Nota_Fiscal_Dest.cnpj
                                         , cpf            = est_row_Nota_Fiscal_Dest.cpf
                                         , nome           = est_row_Nota_Fiscal_Dest.nome
                                         , lograd         = est_row_Nota_Fiscal_Dest.lograd
                                         , nro            = est_row_Nota_Fiscal_Dest.nro
                                         , compl          = est_row_Nota_Fiscal_Dest.compl
                                         , bairro         = est_row_Nota_Fiscal_Dest.bairro
                                         , cidade         = est_row_Nota_Fiscal_Dest.cidade
                                         , cidade_ibge    = est_row_Nota_Fiscal_Dest.cidade_ibge
                                         , uf             = est_row_Nota_Fiscal_Dest.uf
                                         , cep            = est_row_Nota_Fiscal_Dest.cep
                                         , cod_pais       = est_row_Nota_Fiscal_Dest.cod_pais
                                         , pais           = est_row_Nota_Fiscal_Dest.pais
                                         , fone           = est_row_Nota_Fiscal_Dest.fone
                                         , ie             = est_row_Nota_Fiscal_Dest.ie
                                         , suframa        = est_row_Nota_Fiscal_Dest.suframa
                                         , email          = est_row_Nota_Fiscal_Dest.email
                                         , dm_integr_edi  = est_row_nota_fiscal_dest.dm_integr_edi
                                         , dm_ind_ie_dest = est_row_Nota_Fiscal_Dest.dm_ind_ie_dest
                where id = est_row_Nota_Fiscal_Dest.id;
               --
            when others then
               --
               gv_mensagem_log := 'Erro ao atualizar - chave duplicada fase('||vn_fase||'): '||sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico_nf.id%type;
               begin
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
               exception
                  when others then
                     null;
               end;
               --
         end;
         --
      else
         --
         vn_fase := 99.4;
         --
         update Nota_Fiscal_Dest set cnpj           = est_row_Nota_Fiscal_Dest.cnpj
                                   , cpf            = est_row_Nota_Fiscal_Dest.cpf
                                   , nome           = est_row_Nota_Fiscal_Dest.nome
                                   , lograd         = est_row_Nota_Fiscal_Dest.lograd
                                   , nro            = est_row_Nota_Fiscal_Dest.nro
                                   , compl          = est_row_Nota_Fiscal_Dest.compl
                                   , bairro         = est_row_Nota_Fiscal_Dest.bairro
                                   , cidade         = est_row_Nota_Fiscal_Dest.cidade
                                   , cidade_ibge    = est_row_Nota_Fiscal_Dest.cidade_ibge
                                   , uf             = est_row_Nota_Fiscal_Dest.uf
                                   , cep            = est_row_Nota_Fiscal_Dest.cep
                                   , cod_pais       = est_row_Nota_Fiscal_Dest.cod_pais
                                   , pais           = est_row_Nota_Fiscal_Dest.pais
                                   , fone           = est_row_Nota_Fiscal_Dest.fone
                                   , ie             = est_row_Nota_Fiscal_Dest.ie
                                   , suframa        = est_row_Nota_Fiscal_Dest.suframa
                                   , email          = est_row_Nota_Fiscal_Dest.email
                                   , dm_integr_edi  = est_row_nota_fiscal_dest.dm_integr_edi
                                   , dm_ind_ie_dest = est_row_Nota_Fiscal_Dest.dm_ind_ie_dest
          where id = est_row_Nota_Fiscal_Dest.id;
         --
      end if;
      --
      vn_fase := 99.5;
      --
      vv_email_usuario := pk_csf.fkg_usuario_email_conf_erp ( en_multorg_id => en_multorg_id
                                                            , ev_id_erp     => trim ( gt_row_nota_fiscal.id_usuario_erp ) );
      --
      vn_fase := 99.6;
      --
      gt_row_nfdest_email := null;
      --
      gt_row_nfdest_email.notafiscaldest_id := est_row_Nota_Fiscal_Dest.id;
      gt_row_nfdest_email.email             := vv_email_usuario;
      gt_row_nfdest_email.dm_tipo_anexo     := 3; -- DANFE/XML
      gt_row_nfdest_email.dm_st_email       := 0; -- Não enviado
      --
      if trim(vv_email_usuario) is not null then
         --
         pkb_integr_nfdest_email ( est_log_generico_nf  => est_log_generico_nf
                                 , est_row_nfdest_email => gt_row_nfdest_email
                                 , en_notafiscal_id     => est_row_Nota_Fiscal_Dest.notafiscal_id );
         --
      end if;
      --
      --
      if nvl(vt_log_generico_nf.count,0) <= 0
         and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- Somente emissão própria
         then
         --
         -- chama procedimento de registro da pessoa destinatário da Nota Fiscal
         pkb_reg_pessoa_dest_nf ( est_log_generico_nf      => est_log_generico_nf
                                , et_row_Nota_Fiscal_Dest  => est_row_Nota_Fiscal_Dest
                                , ev_cod_part              => ev_cod_part
                                , ev_cnpj                  => vv_cnpj
                                , ev_cpf                   => vv_cpf
                                , ev_ie                    => vv_ie );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Nota_Fiscal_Dest fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_DEST;

---------------------------------------------------------------------------------------------------------------------------------------
-- Integra as informações do Destinatário da Nota Fiscal - Flex Field                                                    --
---------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_DEST_FF ( EST_LOG_GENERICO_NF          IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                         , EN_NOTAFISCAL_ID          IN             NOTA_FISCAL.ID%TYPE
                                         , EN_NOTAFISCALDEST_ID      IN             NOTA_FISCAL_DEST.ID%TYPE
                                         , EV_ATRIBUTO               IN             VARCHAR2
                                         , EV_VALOR                  IN             VARCHAR2
                                         ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_dmtipocampo     ff_obj_util_integr.dm_tipo_campo%type;
   vv_mensagem        varchar2(1000) := null;
   vn_dest            nota_fiscal.dm_id_dest%type;
   vv_cod_mod         mod_fiscal.cod_mod%type;
   vv_id_estrangeiro  nota_fiscal_dest.id_estrangeiro%type;
   vn_dm_ind_ie_dest  nota_fiscal_dest.dm_ind_ie_dest%type;
   vv_im              nota_fiscal_dest.im%type;
   vn_dm_reg_trib     nota_fiscal_dest.dm_reg_trib%type;
   vn_dm_tp_amb       nota_fiscal.dm_tp_amb%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Destinatário da Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Destinatário da Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_NOTA_FISCAL_DEST_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_NOTA_FISCAL_DEST_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'ID_ESTRANGEIRO' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 11;
               --
               vv_id_estrangeiro := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_DEST_FF'
                                                                    , ev_atributo => trim(ev_atributo)
                                                                    , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 12;
               --
               gv_mensagem_log := 'O valor do campo "Identificação do destinatário" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'IM' then
         --
         vn_fase := 13;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 14;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 14.1;
               --
               vv_im := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_DEST_FF'
                                                        , ev_atributo => trim(ev_atributo)
                                                        , ev_valor    => trim(ev_valor) );
               --
               vn_fase := 14.2;
               --
            else
               --
               vn_fase := 14.3;
               --
               gv_mensagem_log := 'O valor do campo "Incrição Municipal" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_IND_IE_DEST' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 15;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 15.1;
               --
               if trim(ev_valor) in ('1', '2', '9') then
                  --
                  vn_dm_ind_ie_dest := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_DEST_FF'
                                                                   , ev_atributo => trim(ev_atributo)
                                                                   , ev_valor    => trim(ev_valor) );               
                  --
               else
                  --
                   gv_mensagem_log := 'O valor do campo "Indicador da IE do Destinatário" informado ('||ev_valor||') não é válido, deve ser 1 - Contribuinte ICMS, ';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 15.2;
               --
               gv_mensagem_log := 'O valor do campo "Indicador da IE do Destinatário" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_REG_TRIB' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 15;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 15.1;
               --
               if trim(ev_valor) in ('1', '2', '3') then
                  --
                  vn_dm_reg_trib := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_DEST_FF'
                                                                   , ev_atributo => trim(ev_atributo)
                                                                   , ev_valor    => trim(ev_valor) );               
                  --
               else
                  --
                   gv_mensagem_log := 'O valor do campo "Regime Tributário" informado ('||ev_valor||') não é válido, deve ser 1 -  Simples Nacional, 2- Simples Nacional, excesso sublimite de receita bruta; 3- Regime Normal; ';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 15.2;
               --
               gv_mensagem_log := 'O valor do campo "Regime Tributário" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      else
         --
         vn_fase := 16;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(en_notafiscal_id,0) = 0 then
      --
      vn_fase := 18;
      --
      gv_mensagem_log := 'Identificador da nota fiscal referenciada não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   vn_dm_tp_amb := pk_csf.fkg_dm_tp_amb_nf( en_notafiscal_id => en_notafiscal_id );
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (valida e insere)
   -- então realiza a condição de inserir o imposto
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_notafiscaldest_id,0) > 0 and
      trim(ev_atributo) = 'ID_ESTRANGEIRO' and
      vv_id_estrangeiro is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.3;
      --
      update nota_fiscal_dest nfd
         set nfd.ID_ESTRANGEIRO = vv_id_estrangeiro
       where nfd.id = en_notafiscaldest_id;
      --
   end if;
   --
   vn_fase := 99.4;
   --
   if nvl(en_notafiscaldest_id,0) > 0 and
      trim(ev_atributo) = 'IM' and
      vv_im is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.5;
      --
      update nota_fiscal_dest nfd
         set nfd.IM = vv_im
       where nfd.id = en_notafiscaldest_id;
      --
   end if;
   --
   vn_fase := 99.6;
   --
   if nvl(en_notafiscaldest_id,0) > 0 and
      trim(ev_atributo) = 'DM_IND_IE_DEST' and
      nvl(vn_dm_ind_ie_dest, 0) in (1, 2, 9) and
      vv_mensagem is null then
      --
      vn_fase := 99.7;
      --
      update nota_fiscal_dest nfd
         set nfd.DM_IND_IE_DEST = vn_dm_ind_ie_dest
       where nfd.id = en_notafiscaldest_id;
      --
   end if;
   --
   vn_fase := 99.8;
   --
   if nvl(en_notafiscaldest_id,0) > 0 and
      trim(ev_atributo) = 'DM_REG_TRIB' and
      nvl(vn_dm_reg_trib, 0) in (1, 2, 3) and
      vv_mensagem is null then
      --
      vn_fase := 99.9;
      --
      update nota_fiscal_dest nfd
         set nfd.dm_reg_trib = vn_dm_reg_trib
       where nfd.id = en_notafiscaldest_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_INTEGR_NOTA_FISCAL_DEST_FF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_DEST_FF;

------------------------------------------------------------------------------------
-- Integra as informações do emitente da Nota Fiscal quando emitida por terceiros --
------------------------------------------------------------------------------------
PROCEDURE PKB_REG_PESSOA_EMIT_NF ( EST_LOG_GENERICO_NF     IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                 , ET_ROW_NOTA_FISCAL_EMIT IN OUT NOCOPY NOTA_FISCAL_EMIT%ROWTYPE
                                 , EV_COD_PART             IN            PESSOA.COD_PART%TYPE ) IS
   --
   vt_log_generico_nf   dbms_sql.number_table;
   vn_dm_atual_part  empresa.dm_atual_part%type;
   vn_fase           number := null;
   vv_cod_part       pessoa.cod_part%type;
   vn_dm_tipo_incl   pessoa.dm_tipo_incl%type;
   vn_multorg_id     empresa.multorg_id%type;
   vn_pessoa_id      pessoa.id%type;
   vv_cpf_cnpj       varchar2(14);
   --
BEGIN
   --
   vt_log_generico_nf.delete;
   --
   vn_fase := 1;
   -- verifica se a empresa que emitiu a nota atualiza o cadastro do participante
   -- somente para notas de emitidas por Terceiro
   begin
      --
      select em.dm_atual_part
           , em.multorg_id
        into vn_dm_atual_part
           , vn_multorg_id
        from empresa em
       where em.id = gt_row_nota_fiscal.empresa_id;
      --
   exception
      when others then
         vn_dm_atual_part := 0;
   end;
   --
   vn_fase := 2;
   --
   if nvl(vn_dm_atual_part,0) = 1
      and gt_row_nota_fiscal.dm_ind_emit = 1
      then
      --
      vn_fase := 3;
      --
      vv_cod_part := trim(ev_cod_part);
      --
      if trim(vv_cod_part) is null then
         --
         if trim(et_row_Nota_Fiscal_Emit.cnpj) is not null then
            --
            vv_cod_part := et_row_Nota_Fiscal_Emit.uf || trim(et_row_Nota_Fiscal_Emit.cnpj);
            --
         elsif trim(et_row_Nota_Fiscal_Emit.cpf) is not null then
            --
            vv_cod_part := et_row_Nota_Fiscal_Emit.uf || trim(et_row_Nota_Fiscal_Emit.cpf);
            --
         else
            --
            vv_cod_part := et_row_Nota_Fiscal_Emit.notafiscal_id;
            --
         end if;
         --
      else
         --
         vn_pessoa_id := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id  => vn_multorg_id
                                                       , ev_cod_part    => vv_cod_part
                                                       );
         --
         vv_cpf_cnpj := trim(pk_csf.fkg_cnpjcpf_pessoa_id ( en_pessoa_id => vn_pessoa_id ));
         --
         if length(vv_cpf_cnpj) = 14 then
            et_row_Nota_Fiscal_Emit.cnpj := vv_cpf_cnpj;
         elsif length(vv_cpf_cnpj) = 11 then
            et_row_Nota_Fiscal_Emit.cpf := vv_cpf_cnpj;
         end if;
         --
      end if;
      --
      if trim(vv_cod_part) is not null then
         --
         vn_fase := 4;
         --
         pk_csf_api_cad.gt_row_pessoa := null;
         --
         vn_fase := 4.1;
         --
         pk_csf_api_cad.gt_row_pessoa.dm_tipo_incl  := 1; -- Externo, cadastrado na importação dos dados
         pk_csf_api_cad.gt_row_pessoa.cod_part      := vv_cod_part;
         pk_csf_api_cad.gt_row_pessoa.nome          := et_row_Nota_Fiscal_Emit.nome;
         pk_csf_api_cad.gt_row_pessoa.fantasia      := et_row_Nota_Fiscal_Emit.fantasia;
         pk_csf_api_cad.gt_row_pessoa.lograd        := et_row_Nota_Fiscal_Emit.lograd;
         pk_csf_api_cad.gt_row_pessoa.nro           := et_row_Nota_Fiscal_Emit.nro;
         pk_csf_api_cad.gt_row_pessoa.cx_postal     := null;
         pk_csf_api_cad.gt_row_pessoa.compl         := et_row_Nota_Fiscal_Emit.compl;
         pk_csf_api_cad.gt_row_pessoa.bairro        := et_row_Nota_Fiscal_Emit.bairro;
         --
         vn_fase := 4.2;
         --
         if nvl(et_row_Nota_Fiscal_Emit.cidade_ibge,0) > 0 then
            pk_csf_api_cad.gt_row_pessoa.cidade_id     := pk_csf.fkg_Cidade_ibge_id ( ev_ibge_cidade => et_row_Nota_Fiscal_Emit.cidade_ibge );
         else
            pk_csf_api_cad.gt_row_pessoa.cidade_id     := pk_csf.fkg_Cidade_ibge_id ( ev_ibge_cidade => 9999999 );
         end if;
         --
         pk_csf_api_cad.gt_row_pessoa.cep           := et_row_Nota_Fiscal_Emit.cep;
         pk_csf_api_cad.gt_row_pessoa.fone          := et_row_Nota_Fiscal_Emit.fone;
         pk_csf_api_cad.gt_row_pessoa.fax           := null;
         --
         vn_fase := 4.3;
         --
         pk_csf_api_cad.gt_row_pessoa.pais_id       := pk_csf.fkg_Pais_siscomex_id ( ev_cod_siscomex => 1058 );
         pk_csf_api_cad.gt_row_pessoa.multorg_id    := vn_multorg_id;
         --
         vn_fase := 4.4;
         --
         /*
         if trim(et_row_Nota_Fiscal_Emit.cnpj) is null
            and trim(et_row_Nota_Fiscal_Emit.cpf) is null then
            --
            pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa := 2; -- EXTERIOR
            --
         elsif trim(et_row_Nota_Fiscal_Emit.cnpj) is not null
               and trim(et_row_Nota_Fiscal_Emit.cpf) is null then
            --
            pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa := 1; -- JURIDICA
            --
         elsif trim(et_row_Nota_Fiscal_Emit.cnpj) is null
               and trim(et_row_Nota_Fiscal_Emit.cpf) is not null then
            --
            pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa := 0; -- FÍSICA
            --
         end if;*/
         --
         -- Sendo Emissão de Terceiro, sempre atribui Juridica
         pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa := 1; -- JURIDICA
         --
         vn_fase := 4.5;
         --
         -- Procura pelo CPF/CNPJ
         if nvl(pk_csf_api_cad.gt_row_pessoa.id,0) <= 0 then
            --
            vn_fase := 4.6;
            -- Verifica se existe o participante no Compliance NFe (procura pelo Código do participante e se não achar, pelo CPF/CNPJ)
            pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id => vn_multorg_id
                                                                             , ev_cod_part   => ev_cod_part );
            --
            if nvl(pk_csf_api_cad.gt_row_pessoa.id,0) <= 0 then
               --
               if trim(et_row_nota_fiscal_emit.cnpj) is not null then
                  --
                  -- substituído para que recupere o cadastro mais recente de pessoa com a mesma sigla de estado do destinatário
                  -- pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_cpf_cnpj => trim(et_row_Nota_Fiscal_Emit.cnpj) );
                  --
                  vn_fase := 4.7;
                  pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_pessoa_id_cpf_cnpj_uf ( en_multorg_id => vn_multorg_id
                                                                                      , en_cpf_cnpj   => trim(et_row_nota_fiscal_emit.cnpj)
                                                                                      , ev_uf         => trim(et_row_nota_fiscal_emit.uf)
                                                                                      );
                  --
               elsif trim(et_row_nota_fiscal_emit.cpf) is not null then
                     --
                     -- substituído pelo cursor, para que recupere um cadastro de pessoa com a mesma sigla de estado do destinatário
                     -- pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_cpf_cnpj => trim(et_row_Nota_Fiscal_Emit.cpf) );
                     --
                     vn_fase := 4.8;
                     pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_pessoa_id_cpf_cnpj_uf ( en_multorg_id => vn_multorg_id
                                                                                         , en_cpf_cnpj   => trim(et_row_nota_fiscal_emit.cpf)
                                                                                         , ev_uf         => trim(et_row_nota_fiscal_emit.uf)
                                                                                         );
                     --
               end if;
               --
            end if;
            --
         end if;
         --
         if nvl(pk_csf_api_cad.gt_row_pessoa.id,0) > 0 then
            --
            vn_dm_tipo_incl := pk_csf.fkg_pessoa_id_dm_tipo_incl ( en_pessoa_id => pk_csf_api_cad.gt_row_pessoa.id );
            --
         else
            vn_dm_tipo_incl := 1;
         end if;
         --
         vn_fase := 4.8;
         -- Somente atualiza pessoas incluidas por meio de integração
         if vn_dm_tipo_incl = 1 then
            -- Valida se o participante não está cadastrado como empresa
            if pk_csf.fkg_valida_part_empresa ( en_multorg_id => pk_csf_api_cad.gt_row_pessoa.multorg_id
                                              , ev_cod_part   => pk_csf_api_cad.gt_row_pessoa.cod_part ) = FALSE then
               -- chama procedimento de resgitro da pessoa
               pk_csf_api_cad.pkb_ins_atual_pessoa ( est_log_generico => vt_log_generico_nf
                                                   , est_pessoa       => pk_csf_api_cad.gt_row_pessoa
                                                   , en_empresa_id    => gt_row_nota_fiscal.empresa_id
                                                   );
               --
            end if;
            --
            vn_fase := 4.9;
            --
            if nvl(pk_csf_api_cad.gt_row_pessoa.id,0) > 0 then
               --
               vn_fase := 5;
               -- Faz o Registro de pessoa física/jurídica
               if pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa = 0 then -- Física
                  --
                  vn_fase := 6;
                  --
                  pk_csf_api_cad.gt_row_fisica := null;
                  --
                  pk_csf_api_cad.gt_row_fisica.pessoa_id  := pk_csf_api_cad.gt_row_pessoa.id;
                  --
                  vn_fase := 6.1;
                  --
                  begin
                     --
                     pk_csf_api_cad.gt_row_fisica.num_cpf := to_number(substr(et_row_Nota_Fiscal_Emit.cpf, 1, 9));
                     pk_csf_api_cad.gt_row_fisica.dig_cpf := to_number(substr(et_row_Nota_Fiscal_Emit.cpf, 10, 2));
                     --
                  exception
                     when others then
                        --
                        gv_mensagem_log := 'Erro inconsistência no CPF do emitente da NFe (fase: '||vn_fase||' - pkb_reg_pessoa_emit_nf): '||sqlerrm;
                        --
                        declare
                           vn_loggenerico_id  log_generico_nf.id%type;
                        begin
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => erro_de_validacao
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia );
                           -- Armazena o "loggenerico_id" na memória
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => est_log_generico_nf );
                        exception
                           when others then
                              null;
                        end;
                        --
                  end;
                  --
                  vn_fase := 6.2;
                  --
                  pk_csf_api_cad.gt_row_fisica.rg := null;
                  vn_fase := 6.3;
                  --
                  pk_csf_api_cad.pkb_ins_atual_fisica ( est_log_generico => vt_log_generico_nf
                                                      , est_fisica => pk_csf_api_cad.gt_row_fisica
                                                      , en_empresa_id    => gt_row_nota_fiscal.empresa_id
                                                      );
                  --
               elsif pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa = 1 then -- Jurídica
                  --
                  vn_fase := 7;
                  --
                  pk_csf_api_cad.gt_row_juridica := null;
                  --
                  pk_csf_api_cad.gt_row_juridica.pessoa_id     := pk_csf_api_cad.gt_row_pessoa.id;
                  --
                  vn_fase := 7.1;
                  --
                  begin
                     --
                     pk_csf_api_cad.gt_row_juridica.num_cnpj      := to_number(substr(et_row_Nota_Fiscal_Emit.cnpj, 1, 8));
                     pk_csf_api_cad.gt_row_juridica.num_filial    := to_number(substr(et_row_Nota_Fiscal_Emit.cnpj, 9, 4));
                     pk_csf_api_cad.gt_row_juridica.dig_cnpj      := to_number(substr(et_row_Nota_Fiscal_Emit.cnpj, 13, 2));
                     --
                  exception
                     when others then
                        --
                        gv_mensagem_log := 'Erro inconsistência no CNPJ do emitente da NFe (fase: '||vn_fase||' - pkb_reg_pessoa_emit_nf): '||sqlerrm;
                        --
                        declare
                           vn_loggenerico_id  log_generico_nf.id%type;
                        begin
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => erro_de_validacao
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia );
                           -- Armazena o "loggenerico_id" na memória
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => est_log_generico_nf );
                        exception
                           when others then
                              null;
                        end;
                        --
                  end;
                  --
                  vn_fase := 7.2;
                  --
                  pk_csf_api_cad.gt_row_juridica.ie            := et_row_Nota_Fiscal_Emit.ie;
                  pk_csf_api_cad.gt_row_juridica.iest          := null;
                  pk_csf_api_cad.gt_row_juridica.im            := null;
                  pk_csf_api_cad.gt_row_juridica.cnae          := null;
                  pk_csf_api_cad.gt_row_juridica.suframa       := null;
                  pk_csf_api_cad.gt_row_juridica.codentref_id  := null;
                  pk_csf_api_cad.gt_row_juridica.nire          := null;
                  pk_csf_api_cad.gt_row_juridica.dt_arq        := null;
                  pk_csf_api_cad.gt_row_juridica.dt_arq_conv   := null;
                  --
                  vn_fase := 7.3;
                  --
                  pk_csf_api_cad.pkb_ins_atual_juridica ( est_log_generico => vt_log_generico_nf
                                                        , est_juridica     => pk_csf_api_cad.gt_row_juridica
                                                        , en_empresa_id    => gt_row_nota_fiscal.empresa_id
                                                        );
                  --
               end if;
               --
               vn_fase := 7.4;
               --
               update nota_fiscal nf
                  set nf.pessoa_id = pk_csf_api_cad.gt_row_pessoa.id
                where nf.id                = et_row_nota_fiscal_emit.notafiscal_id
                  and nf.dm_ind_emit       = 1 -- terceiro
                  and nvl(nf.pessoa_id,0) <= 0;
               --
            end if;
            --
         end if;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_reg_pessoa_emit_nf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_REG_PESSOA_EMIT_NF;

---------------------------------------------------------------------------------------------------------------------------------------
-- Integra as informações do Emitente da Nota Fiscal - Flex Field                                                    --
---------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_EMIT_FF ( EST_LOG_GENERICO_NF       IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                         , EN_NOTAFISCAL_ID          IN             NOTA_FISCAL.ID%TYPE
                                         , EN_NOTAFISCALEMIT_ID      IN             NOTA_FISCAL_EMIT.ID%TYPE
                                         , EV_ATRIBUTO               IN             VARCHAR2
                                         , EV_VALOR                  IN             VARCHAR2
                                         ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_dmtipocampo     ff_obj_util_integr.dm_tipo_campo%type;
   vv_mensagem        varchar2(1000) := null;
   --
   vv_cnpj            nota_fiscal_emit.cnpj%type;
   vv_cpf             nota_fiscal_emit.cpf%type;
   vn_dm_ind_ie_emit  nota_fiscal_emit.dm_ind_ie_emit%type;
   vv_suframa         nota_fiscal_emit.suframa%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Emitente da Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Emitente da Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_NOTA_FISCAL_EMIT_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_NOTA_FISCAL_EMIT_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'CNPJ' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 11;
               --
               vv_cnpj := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_EMIT_FF'
                                                                    , ev_atributo => trim(ev_atributo)
                                                                    , ev_valor    => trim(ev_valor) 
                                                                    );
               --
            else
               --
               vn_fase := 12;
               --
               gv_mensagem_log := 'O valor do campo "CNPJ no emitente" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'CPF' then
         --
         vn_fase := 13;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 14;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 14.1;
               --
               vv_cpf := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_EMIT_FF'
                                                        , ev_atributo => trim(ev_atributo)
                                                        , ev_valor    => trim(ev_valor) 
                                                        );
               --
               vn_fase := 14.2;
               --
            else
               --
               vn_fase := 14.3;
               --
               gv_mensagem_log := 'O valor do campo "CPF do emitente" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_IND_IE_EMIT' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 15;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 15.1;
               --
               if trim(ev_valor) in ('1', '2', '9') then
                  --
                  vn_dm_ind_ie_emit := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_EMIT_FF'
                                                                   , ev_atributo => trim(ev_atributo)
                                                                   , ev_valor    => trim(ev_valor) );               
                  --
               else
                  --
                   gv_mensagem_log := 'O valor do campo "Indicador da IE do Emitente" informado ('||ev_valor||') não é válido, deve ser 1 - Contribuinte ICMS, ';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 15.2;
               --
               gv_mensagem_log := 'O valor do campo "Indicador da IE do Emitente" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
      elsif trim(ev_atributo) = 'SUFRAMA' then
         --
         vn_fase := 13;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 14;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 14.1;
               --
               vv_suframa := pk_csf.fkg_ff_ret_vlr_caracter ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_EMIT_FF'
                                                            , ev_atributo => trim(ev_atributo)
                                                            , ev_valor    => trim(ev_valor)
                                                            );
               --
               vn_fase := 14.2;
               --
            else
               --
               vn_fase := 14.3;
               --
               gv_mensagem_log := 'O valor do campo "Inscrição na SUFRAMA do Emitente" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      else
         --
         vn_fase := 16;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(en_notafiscal_id,0) = 0 then
      --
      vn_fase := 18;
      --
      gv_mensagem_log := 'Identificador da nota fiscal referenciada não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (valida e insere)
   -- então realiza a condição de inserir o imposto
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_notafiscalemit_id,0) > 0 and
      trim(ev_atributo) = 'CNPJ' and
      vv_cnpj is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.3;
      --
      update nota_fiscal_emit nfe
         set nfe.cnpj = vv_cnpj
       where nfe.id = en_notafiscalemit_id;
      --
   end if;
   --
   vn_fase := 99.4;
   --
   if nvl(en_notafiscalemit_id,0) > 0 and
      trim(ev_atributo) = 'CPF' and
      vv_cpf is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.5;
      --
      update nota_fiscal_emit nfd
         set nfd.cpf = vv_cpf
       where nfd.id = en_notafiscalemit_id;
      --
   end if;
   --
   vn_fase := 99.6;
   --
   if nvl(en_notafiscalemit_id,0) > 0 and
      trim(ev_atributo) = 'DM_IND_IE_EMIT' and
      nvl(vn_dm_ind_ie_emit, 0) in (1, 2, 9) and
      vv_mensagem is null then
      --
      vn_fase := 99.7;
      --
      update nota_fiscal_emit nfd
         set nfd.dm_ind_ie_emit = vn_dm_ind_ie_emit
       where nfd.id = en_notafiscalemit_id;
      --
   end if;
   --
   vn_fase := 99.8;
   --
   if nvl(en_notafiscalemit_id,0) > 0 and
      trim(ev_atributo) = 'SUFRAMA' and
      vv_suframa is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.9;
      --
      update nota_fiscal_emit nfd
         set nfd.suframa = vv_suframa
       where nfd.id = en_notafiscalemit_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_INTEGR_NOTA_FISCAL_EMIT_FF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_EMIT_FF;

-------------------------------------------------------------------
-- Procedimento integra as informação do emitente da Nota Fiscal --
-------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_EMIT ( EST_LOG_GENERICO_NF       IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                      , EST_ROW_NOTA_FISCAL_EMIT  IN OUT NOCOPY  NOTA_FISCAL_EMIT%ROWTYPE
                                      , EN_EMPRESA_ID             IN             EMPRESA.ID%TYPE
                                      , EN_DM_IND_EMIT            IN             NOTA_FISCAL.DM_IND_EMIT%TYPE
                                      , EV_COD_PART               IN             PESSOA.COD_PART%TYPE DEFAULT NULL ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vv_cnpj_cpf       varchar2(14) := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   -- Verifica se a nota fiscal não foi informada
   if nvl(est_row_Nota_Fiscal_Emit.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para relacionar ao Emitente.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 2;

   -- Valida se o campo nome tem menos que 2 caracteres
   if nvl(length( trim(pk_csf.fkg_converte(est_row_Nota_Fiscal_Emit.nome,0,1,4,1,1,1)) ),0) < 2
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Nome do emitente da Nota Fiscal" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Emit.nome||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 3;

   -- Valida se o campo logradouro tem menos que 2 caracteres
   if nvl(length( trim(pk_csf.fkg_converte(est_row_Nota_Fiscal_Emit.lograd,0,1,4,1,1,1)) ),0) < 2
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Logradouro do emitente da Nota Fiscal" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Emit.lograd||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 3.2;

   -- Valida informação do número do endereço do emitente
   if trim( pk_csf.fkg_converte(est_row_Nota_Fiscal_Emit.nro) ) is null
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 3.3;
      --
      gv_mensagem_log := '"Número do endereço" emitente da Nota Fiscal não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 4;

   -- Valida se o campo bairro tem menos que 2 caracteres
   if nvl(length( trim(pk_csf.fkg_converte(est_row_Nota_Fiscal_Emit.bairro)) ),0) < 2
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Bairro do emitente da Nota Fiscal" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Emit.bairro||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 5;

   -- Valida se o campo cidade tem menos que 2 caracteres
   if nvl(length( trim(pk_csf.fkg_converte(est_row_Nota_Fiscal_Emit.cidade)) ),0) < 2
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Cidade do emitente da Nota Fiscal" deve ter no mínimo dois caracteres ('||est_row_Nota_Fiscal_Emit.cidade||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 6;

   -- verifica se a UF é inválida
   if pk_csf.fkg_uf_valida ( ev_sigla_estado => est_row_Nota_Fiscal_Emit.uf ) = false
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Sigla da UF do emitente da Nota Fiscal" inválida ('||est_row_Nota_Fiscal_Emit.uf||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 7;
   -- Se o campo UF = 'EX' atribui Exterior para cidade
   if trim( est_row_Nota_Fiscal_Emit.uf ) = 'EX'
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := '"Sigla da UF do emitente da Nota Fiscal" inválida ('||est_row_Nota_Fiscal_Emit.uf||'), o emitente não pode ser do EXTERIOR.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

   vn_fase := 8;
   -- Valida o campo cidade_ibge
   if est_row_Nota_Fiscal_Emit.cidade_ibge <> 9999999
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 8.1;
      --
      if pk_csf.fkg_ibge_cidade ( ev_ibge_cidade => est_row_Nota_Fiscal_Emit.cidade_ibge ) = false then
         --
         vn_fase := 8.2;
         --
         gv_mensagem_log := '"Código IBGE da cidade do emitente da Nota Fiscal" inválido ('||est_row_Nota_Fiscal_Emit.cidade_ibge||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 8.3;
      -- Valida se o IBGE da cidade pertence a sigla da UF
      if pk_csf.fkg_ibge_cidade_por_sigla_uf ( en_ibge_cidade   => est_row_Nota_Fiscal_Emit.cidade_ibge
                                             , ev_sigla_estado  => est_row_Nota_Fiscal_Emit.uf
                                             ) = false then
         --
         vn_fase := 8.4;
         --
         gv_mensagem_log := '"Código IBGE da cidade do emitente da Nota Fiscal" ('||
                            est_row_Nota_Fiscal_Emit.cidade_ibge||') não pertence a sigla do estado ('||est_row_Nota_Fiscal_Emit.uf||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   else
      --
      vn_fase := 8.5;
      -- Se for emissão própria, valida o código
      if en_dm_ind_emit = 0 then
         --
         gv_mensagem_log := '"Código IBGE da cidade do emitente da Nota Fiscal" inválida ('||est_row_Nota_Fiscal_Emit.cidade_ibge||
                            '), o emitente não pode ser do EXTERIOR.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      elsif en_dm_ind_emit = 1 then -- se for nota de terceiro
            --
            if est_row_Nota_Fiscal_Emit.uf = 'EX' then
               --
               est_row_Nota_Fiscal_Emit.cidade_ibge := 9999999;
               --
            elsif est_row_Nota_Fiscal_Emit.cidade_ibge <> 9999999 and
                  pk_csf.fkg_ibge_cidade ( ev_ibge_cidade => est_row_Nota_Fiscal_Emit.cidade_ibge ) = false then
                  --
                  gv_mensagem_log := '"Código IBGE da cidade do emitente da Nota Fiscal" inválida ('||est_row_Nota_Fiscal_Emit.cidade_ibge||
                                     '), o código deve ser informado.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
            end if;
            --
      end if;
      --
   end if;
   --
   vn_fase := 9;
   --
   if est_row_nota_fiscal_emit.cep is null then
      --
      vn_fase := 9.1;
      --
      begin
         select pe.cep
           into est_row_nota_fiscal_emit.cep
           from nota_fiscal nf
              , empresa     em
              , pessoa      pe
          where nf.id         = est_row_nota_fiscal_emit.notafiscal_id
            and nf.dm_st_proc = 0 -- 0-Não Validada
            and nf.dm_legado  = 0 -- 0-Não legado
            and em.id         = nf.empresa_id
            and pe.id         = em.pessoa_id;
      exception
         when others then
            est_row_nota_fiscal_emit.cep := null;
      end;
      --
   end if;
   --
   vn_fase := 10;
   --
   if en_dm_ind_emit = 0 then -- Se for emissão própria
      --
      est_row_Nota_Fiscal_Emit.cod_pais := 1058;
      est_row_Nota_Fiscal_Emit.pais     := 'BRASIL';
      --
   end if;
   --
   vn_fase := 10.1;
   -- Valida o campo "cod_pais"
   if pk_csf.fkg_codpais_siscomex_valido ( en_cod_siscomex => est_row_Nota_Fiscal_Emit.cod_pais ) = false
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 10.2;
      --
      gv_mensagem_log := '"Código do país do emitente da Nota Fiscal" inválido ('||est_row_Nota_Fiscal_Emit.cod_pais||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11;
   --
   if upper( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Emit.pais ) ) <> 'BRASIL'
      and en_dm_ind_emit = 0 -- Se for emissão própria
      then
      --
      vn_fase := 11.1;
      --
        gv_mensagem_log := '"Nome do País" do emitente da nota fiscal ('||est_row_Nota_Fiscal_Emit.cod_pais||') diferente de Brasil.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12;
   --
   if trim(est_row_Nota_Fiscal_Emit.cnpj) = '00000000000000'
      or trim(est_row_Nota_Fiscal_Emit.cnpj) = '0'
      then
      est_row_Nota_Fiscal_Emit.cnpj := null;
   end if;
   --
   if trim(est_row_Nota_Fiscal_Emit.cpf) = '00000000000'
      or trim(est_row_Nota_Fiscal_Emit.cpf) = '0'
      then
      est_row_Nota_Fiscal_Emit.cpf := null;
   end if;
   --
   vn_fase := 13;
   --
   est_row_Nota_Fiscal_Emit.ie := trim ( replace(replace(replace(replace(upper(est_row_Nota_Fiscal_Emit.ie), ' ', ''), '.', ''), '-', ''), '/', '') );
   --
   vn_fase := 14;
   -- Busca se existe inscrição estadual cadastrada para a empresa
   if nvl(gn_tipo_integr,0) = 1 and en_dm_ind_emit = 0 then -- Se for emissão própria
      --
      est_row_Nota_Fiscal_Emit.ie := pk_csf.fkg_inscr_est_empresa ( en_empresa_id => en_empresa_id );
      --
      vn_fase := 14.1;
      -- Busca o CNPJ/CPF da empresa
      vv_cnpj_cpf := pk_csf.fkg_cnpj_ou_cpf_empresa ( en_empresa_id => en_empresa_id );
      --
      vn_fase := 14.2;
      --
      if trim(est_row_Nota_Fiscal_Emit.cnpj) is null or trim(est_row_Nota_Fiscal_Emit.cpf) is null then
         --
         vn_fase := 14.3;
         -- Verifica em qual campo deve ser armazenado
         if length(vv_cnpj_cpf) = 14 then -- CNPJ
            --
            vn_fase := 14.4;
            --
            est_row_Nota_Fiscal_Emit.cnpj := vv_cnpj_cpf;
            est_row_Nota_Fiscal_Emit.cpf := null;
            --
         else
            --
            vn_fase := 14.5;
            --
            est_row_Nota_Fiscal_Emit.cnpj := null;
            est_row_Nota_Fiscal_Emit.cpf := vv_cnpj_cpf;
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 15;
   -- Valida se a inscrição estadual não foi informada
   if trim( est_row_Nota_Fiscal_Emit.ie ) is null and est_row_Nota_Fiscal_Emit.cnpj is not null
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 15.1;
      --
      gv_mensagem_log := '"Inscrição estadual do emitente da Nota Fiscal" não foi informada. Para notas fiscais de emissão própria o IE '||
                         'usado é o do cadastro da empresa. Verifique o cadastro!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 16;
   -- Valida o CNAE, se informado IM o CNAE deve ser informado
   if trim( est_row_Nota_Fiscal_Emit.im ) is not null
      and trim( est_row_Nota_Fiscal_Emit.cnae ) is null
      and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 16.1;
      --
      gv_mensagem_log := '"CNAE fiscal" não foi informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 16.2;
   --
   if trim(est_row_Nota_Fiscal_Emit.ie) like 'ISENT%' then
      --
      est_row_Nota_Fiscal_Emit.ie := 'ISENTO';
      --
   end if;
   --
   vn_fase := 17;
   -- Se a incrição municipal não foi informada, o CNAE não pode ser informado
   -- pois se for informado causa erro de XML
   if trim( est_row_Nota_Fiscal_Emit.im ) is null
      and trim( est_row_Nota_Fiscal_Emit.cnae ) is not null
      and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 17.1;
      --
      gv_mensagem_log := '"Inscrição Municipal" não foi informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 18;
   -- Valida a informação do Codigo do Regime Tributário da Empresa
   if nvl(est_row_Nota_Fiscal_Emit.dm_reg_trib, -1) not in (1, 2, 3) then
      --
      vn_fase := 18.1;
      --
      gv_mensagem_log := '"Código de Regime Tributário" informado ('||est_row_Nota_Fiscal_Emit.dm_reg_trib||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 19;
   -- valida se CNPJ é númerico caso ele seja informado.
   if trim(est_row_Nota_Fiscal_Emit.cnpj) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Emit.cnpj ) = false then
      --
      vn_fase := 19.1;
      --
      gv_mensagem_log := 'O "CNPJ do Emitente da Nota Fiscal" ('||est_row_Nota_Fiscal_Emit.cnpj||') deve contem somente números considerando os zeros à esquerda.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 19.2;
   -- Valida o CNPJ do Emitente
   if trim(est_row_Nota_Fiscal_Emit.cnpj) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Emit.cnpj ) = true
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_Nota_Fiscal_Emit.cnpj), 0) = 0 then
      --
      vn_fase := 19.3;
      --
      gv_mensagem_log := 'O "CNPJ do Emitente da Nota Fiscal" ('||est_row_Nota_Fiscal_Emit.cnpj||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 20;
   -- valida se CNPJ é númerico caso ele seja informado.
   if trim(est_row_Nota_Fiscal_Emit.cpf) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Emit.cpf ) = false then
      --
      vn_fase := 20.1;
      --
      gv_mensagem_log := 'O "CPF do Emitente da Nota Fiscal" ('||est_row_Nota_Fiscal_Emit.cpf||') deve contem somente números considerando os zeros à esquerda.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 20.2;
   -- Valida o CPF do Emitente
   if trim(est_row_Nota_Fiscal_Emit.cpf) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_Nota_Fiscal_Emit.cpf ) = true
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_Nota_Fiscal_Emit.cpf), 0) = 0 then
      --
      vn_fase := 20.3;
      --
      gv_mensagem_log := 'O "CPF do Emitente da Nota Fiscal" ('||est_row_Nota_Fiscal_Emit.cpf||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 21;
   -- Valida a Inscrição Estadual do Emitente
   if trim(est_row_Nota_Fiscal_Emit.ie) is not null
      and trim(est_row_Nota_Fiscal_Emit.uf) is not null
      and en_dm_ind_emit = 0 -- Emissão própria
      and nvl(pk_valida_docto.fkg_valida_ie( ev_inscr_est => est_row_Nota_Fiscal_Emit.ie
                                            , ev_estado   => est_row_Nota_Fiscal_Emit.uf ), 0) = 0 then
      --
      vn_fase := 21.1;
      --
      gv_mensagem_log := 'A "Inscrição Estadual do Emitente da Nota Fiscal" ('||est_row_Nota_Fiscal_Emit.ie||') está inválida.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 22;
   -- retira ponto e barra do telefone
   est_row_Nota_Fiscal_Emit.fone := replace(replace(replace(replace(replace(replace(est_row_Nota_Fiscal_Emit.fone, '.', ''), '-', ''), '*', ''), '(', ''), ')', ''), ' ', '');
   --
   vn_fase := 22.1;
   --
   if trim(est_row_Nota_Fiscal_Emit.fone) is not null
      and not length(est_row_Nota_Fiscal_Emit.fone) between 6 and 14
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 22.2;
      --
      gv_mensagem_log := 'Tamanho do campo "fone" ('||est_row_Nota_Fiscal_Emit.fone||'). O Tamanho deve estar entre 6 a 14 caracteres.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 23;
   --
   if trim(est_row_Nota_Fiscal_Emit.fone) is not null
      and pk_csf.fkg_is_numerico ( ev_valor => est_row_Nota_Fiscal_Emit.fone ) = false
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 23.1;
      --
      gv_mensagem_log := 'O "Telefone do Emitente" ('||est_row_Nota_Fiscal_Emit.fone||') deve ser composto apenas por números.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 24;
   --
   if trim(est_row_Nota_Fiscal_Emit.iest) is not null
      and not length(est_row_Nota_Fiscal_Emit.iest) between 2 and 14
      and en_dm_ind_emit = 0 -- Emissão própria
      then
      --
      vn_fase := 24.1;
      --
      gv_mensagem_log := 'Tamanho do campo "IEST" ('||est_row_Nota_Fiscal_Emit.iest||'), inválido. O Tamanho deve estar entre 2 a 14 caracteres para emissão própria.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 25;
   -- Se não existe registro do Log e o Tipo de Integração é (valida e insere)
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_Nota_Fiscal_Emit.notafiscal_id;
      --
   end if;
   --
   vn_fase := 26;
   --
   est_row_Nota_Fiscal_Emit.nome         := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Emit.nome,0,1,4,1,1,1 ) );
   est_row_Nota_Fiscal_Emit.fantasia     := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Emit.fantasia,0,1,4,1,1,1 ) );
   est_row_Nota_Fiscal_Emit.lograd       := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Emit.lograd,0,1,4,1,1,1 ) );
   --
   vn_fase := 27;
   --
   est_row_Nota_Fiscal_Emit.nro          := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Emit.nro ) );
   est_row_Nota_Fiscal_Emit.compl        := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Emit.compl ) );
   est_row_Nota_Fiscal_Emit.bairro       := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Emit.bairro ) );
   --
   vn_fase := 28;
   --
   est_row_Nota_Fiscal_Emit.cidade       := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Emit.cidade ) );
   est_row_Nota_Fiscal_Emit.pais         := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Emit.pais ) );
   --
   vn_fase := 29;
   --
   est_row_Nota_Fiscal_Emit.fone         := trim ( replace( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Emit.fone ), ' ', '') );
   --
   vn_fase := 30;
   --
   est_row_Nota_Fiscal_Emit.ie           := trim( est_row_Nota_Fiscal_Emit.ie );
   est_row_Nota_Fiscal_Emit.iest         := trim( est_row_Nota_Fiscal_Emit.iest );
   --
   vn_fase := 31;
   --
   est_row_Nota_Fiscal_Emit.im           := trim( est_row_Nota_Fiscal_Emit.im );
   est_row_Nota_Fiscal_Emit.cnae         := trim( est_row_Nota_Fiscal_Emit.cnae );
   est_row_Nota_Fiscal_Emit.dm_reg_trib  := nvl(est_row_Nota_Fiscal_Emit.dm_reg_trib,3);
   --
   vn_fase := 99;
   --
   --
   if nvl(est_row_Nota_Fiscal_Emit.notafiscal_id, 0) > 0
      and est_row_Nota_Fiscal_Emit.nome is not null
      and est_row_Nota_Fiscal_Emit.lograd is not null
      and nvl(est_row_Nota_Fiscal_Emit.cidade_ibge, 0) > 0
      and est_row_Nota_Fiscal_Emit.uf is not null 
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.1;
         --
         select notafiscalemit_seq.nextval
           into est_row_Nota_Fiscal_Emit.id
           from dual;
         --
         vn_fase := 99.2;
         --
         insert into Nota_Fiscal_Emit ( id
                                      , notafiscal_id
                                      , nome
                                      , fantasia
                                      , lograd
                                      , nro
                                      , compl
                                      , bairro
                                      , cidade
                                      , cidade_ibge
                                      , uf
                                      , cep
                                      , cod_pais
                                      , pais
                                      , fone
                                      , ie
                                      , iest
                                      , im
                                      , cnae
                                      , cnpj
                                      , cpf
                                      , dm_reg_trib )
                               values ( est_row_Nota_Fiscal_Emit.id
                                      , est_row_Nota_Fiscal_Emit.notafiscal_id
                                      , est_row_Nota_Fiscal_Emit.nome
                                      , est_row_Nota_Fiscal_Emit.fantasia
                                      , est_row_Nota_Fiscal_Emit.lograd
                                      , est_row_Nota_Fiscal_Emit.nro
                                      , est_row_Nota_Fiscal_Emit.compl
                                      , est_row_Nota_Fiscal_Emit.bairro
                                      , est_row_Nota_Fiscal_Emit.cidade
                                      , est_row_Nota_Fiscal_Emit.cidade_ibge
                                      , est_row_Nota_Fiscal_Emit.uf
                                      , est_row_Nota_Fiscal_Emit.cep
                                      , est_row_Nota_Fiscal_Emit.cod_pais
                                      , est_row_Nota_Fiscal_Emit.pais
                                      , est_row_Nota_Fiscal_Emit.fone
                                      , est_row_Nota_Fiscal_Emit.ie
                                      , est_row_Nota_Fiscal_Emit.iest
                                      , est_row_Nota_Fiscal_Emit.im
                                      , est_row_Nota_Fiscal_Emit.cnae
                                      , est_row_Nota_Fiscal_Emit.cnpj
                                      , est_row_Nota_Fiscal_Emit.cpf
                                      , est_row_Nota_Fiscal_Emit.dm_reg_trib
                                      );
         --
      else
         --
         vn_fase := 99.3;
         --
         update Nota_Fiscal_Emit set nome         = est_row_Nota_Fiscal_Emit.nome
                                   , fantasia     = est_row_Nota_Fiscal_Emit.fantasia
                                   , lograd       = est_row_Nota_Fiscal_Emit.lograd
                                   , nro          = est_row_Nota_Fiscal_Emit.nro
                                   , compl        = est_row_Nota_Fiscal_Emit.compl
                                   , bairro       = est_row_Nota_Fiscal_Emit.bairro
                                   , cidade       = est_row_Nota_Fiscal_Emit.cidade
                                   , cidade_ibge  = est_row_Nota_Fiscal_Emit.cidade_ibge
                                   , uf           = est_row_Nota_Fiscal_Emit.uf
                                   , cep          = est_row_Nota_Fiscal_Emit.cep
                                   , cod_pais     = est_row_Nota_Fiscal_Emit.cod_pais
                                   , pais         = est_row_Nota_Fiscal_Emit.pais
                                   , fone         = est_row_Nota_Fiscal_Emit.fone
                                   , ie           = est_row_Nota_Fiscal_Emit.ie
                                   , iest         = est_row_Nota_Fiscal_Emit.iest
                                   , im           = est_row_Nota_Fiscal_Emit.im
                                   , cnae         = est_row_Nota_Fiscal_Emit.cnae
                                   , cnpj         = est_row_Nota_Fiscal_Emit.cnpj
                                   , cpf          = est_row_Nota_Fiscal_Emit.cpf
                                   , dm_reg_trib  = est_row_Nota_Fiscal_Emit.dm_reg_trib
          where id = est_row_Nota_Fiscal_Emit.id;
         --
      end if;
      --
      vn_fase := 99.4;
      -- Somente atualiza o participante se for terceiro
      if nvl(en_dm_ind_emit,0) = 1 then
         --
         vn_fase := 99.5;
         --
         pkb_reg_pessoa_emit_nf ( est_log_generico_nf      => est_log_generico_nf
                                , et_row_Nota_Fiscal_Emit  => est_row_Nota_Fiscal_Emit
                                , ev_cod_part              => ev_cod_part );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Nota_Fiscal_Emit fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_EMIT;

-------------------------------------------------------
-- Autoriza Acesso ao XML                            --
-------------------------------------------------------

-- Procedimento integra as informações da Autorização de acesso ao XML da Nota Fiscal
PROCEDURE pkb_integr_nf_aut_xml ( est_log_generico_nf     in out nocopy  dbms_sql.number_table
                                , est_row_nf_aut_xml   in out nocopy  nf_aut_xml%rowtype
                                ) IS
   --
   vn_fase           number := 0;
   vn_qtde           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   -- Verifica se a nota fiscal não foi informada
   if nvl(est_row_nf_aut_xml.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para relacionar ao Emitente.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
  --
   vn_fase := 2;
   -- Valida informações do CNPJ
   --
   if trim(est_row_nf_aut_xml.cnpj) = '00000000000000'
      or trim(est_row_nf_aut_xml.cnpj) = '0'
      or trim(est_row_nf_aut_xml.cnpj) = 'EXTERIOR'
      then
      est_row_nf_aut_xml.cnpj := null;
   end if;
   --
   vn_fase := 2.1;
   -- valida se CNPJ é numerico caso ele seja informado.
   if trim(est_row_nf_aut_xml.cnpj) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_nf_aut_xml.cnpj ) = false then
      --
      gv_mensagem_log := 'O "CNPJ do Participante para download na Sefaz" ('||est_row_nf_aut_xml.cnpj||
                         ') deve conter somente números considerando os zeros à esquerda.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => ERRO_DE_VALIDACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2.2;
   --
   -- Valida o CNPJ
   if trim(est_row_nf_aut_xml.cnpj) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_nf_aut_xml.cnpj ) = true
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_nf_aut_xml.cnpj), 0) = 0 then
      --
      gv_mensagem_log := 'O "CNPJ do Participante para download na Sefaz" ('||est_row_nf_aut_xml.cnpj||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => ERRO_DE_VALIDACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
    --
   vn_fase := 3;
   -- Valida Informações do CPF
   --
   if trim(est_row_nf_aut_xml.cpf) = '00000000000'
      or trim(est_row_nf_aut_xml.cpf) = '0'
      or trim(est_row_nf_aut_xml.cpf) = 'EXTERIOR'
      then
      est_row_nf_aut_xml.cpf := null;
   end if;
   --
   vn_fase := 3.1;
   --
   -- valida se CPF é numerico caso ele seja informado.
   if trim(est_row_nf_aut_xml.cpf) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_nf_aut_xml.cpf ) = false then
      --
      gv_mensagem_log := 'O "CPF do Participante para download na Sefaz" ('||est_row_nf_aut_xml.cpf||
                         ') deve conter somente números considerando os zeros à esquerda.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => ERRO_DE_VALIDACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3.2;
   --
   -- Valida o CPF
   if trim(est_row_nf_aut_xml.cpf) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_nf_aut_xml.cpf ) = true
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_nf_aut_xml.cpf), 0) = 0 then
      --
      gv_mensagem_log := 'O "CPF do Participante para download na Sefaz" ('||est_row_nf_aut_xml.cpf||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => ERRO_DE_VALIDACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;

   --
   vn_fase := 99;
   --
   -- Se não tem registro de Log e o Tipo de Integração é 1 (valida e insere)
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_nf_aut_xml.notafiscal_id;
      --
   end if;
   --
   est_row_nf_aut_xml.cnpj  := trim(est_row_nf_aut_xml.cnpj);
   est_row_nf_aut_xml.cpf   := trim(est_row_nf_aut_xml.cpf);
   --
   vn_fase := 99.1;
   --
   if nvl(est_row_nf_aut_xml.notafiscal_id,0) > 0
      then
      --
      if nvl(gn_tipo_integr,0) = 1 then -- Insere
         --
         vn_fase := 99.2;
         --
         begin
            select count(*)
              into vn_qtde
              from nf_aut_xml na
             where na.notafiscal_id = est_row_nf_aut_xml.notafiscal_id
               and nvl(na.cnpj,' ') = nvl(est_row_nf_aut_xml.cnpj,' ')
               and nvl(na.cpf,' ')  = nvl(est_row_nf_aut_xml.cpf,' ');
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 99.3;
         --
         if nvl(vn_qtde,0) = 0 then
            --
            vn_fase := 99.4;
            --
            select nfautxml_seq.Nextval
              into est_row_nf_aut_xml.id
              from dual;
            --
            insert into nf_aut_xml ( id
                                   , notafiscal_id
                                   , cnpj
                                   , cpf
                                   )
                            values ( est_row_nf_aut_xml.id
                                   , est_row_nf_aut_xml.notafiscal_id
                                   , est_row_nf_aut_xml.cnpj
                                   , est_row_nf_aut_xml.cpf
                                   );
            --
         end if;
         --
      else
         -- atualiza
         vn_fase := 99.5;
         --
         update nf_aut_xml set cnpj  = est_row_nf_aut_xml.cnpj
                             , cpf   = est_row_nf_aut_xml.cpf
          where id = est_row_nf_aut_xml.id;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_nf_aut_xml fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_cabec_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia);
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END pkb_integr_nf_aut_xml;

----------------------------------------------------------------
-- Procedimento integra as informações de Formas de Pagamento --
----------------------------------------------------------------
PROCEDURE pkb_integr_nf_forma_pgto ( est_log_generico_nf     in out nocopy  dbms_sql.number_table
                                   , est_row_nf_forma_pgto   in out nocopy  nf_forma_pgto%rowtype
                                   ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_nfformapgto_id  nf_forma_pgto.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   -- Verifica se a nota fiscal não foi informada
   if nvl(est_row_nf_forma_pgto.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal para relacionar a Forma de Pagamento.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
  --
   vn_fase := 2;
   -- Valida informações do CNPJ
   --
   if trim(est_row_nf_forma_pgto.cnpj) = '00000000000000'
      or trim(est_row_nf_forma_pgto.cnpj) = '0'
      or trim(est_row_nf_forma_pgto.cnpj) = 'EXTERIOR'
      then
      est_row_nf_forma_pgto.cnpj := null;
   end if;
   --
   vn_fase := 2.1;
   -- valida se CNPJ é numerico caso ele seja informado.
   if trim(est_row_nf_forma_pgto.cnpj) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_nf_forma_pgto.cnpj ) = false then
      --
      gv_mensagem_log := 'O "CNPJ do Participante para download na Sefaz" ('||est_row_nf_forma_pgto.cnpj||
                         ') deve conter somente números considerando os zeros à esquerda.';

      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => ERRO_DE_VALIDACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2.2;
   --
   -- Valida o CNPJ
   if trim(est_row_nf_forma_pgto.cnpj) is not null
      and pk_csf.fkg_is_numerico ( ev_valor =>  est_row_nf_forma_pgto.cnpj ) = true
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_nf_forma_pgto.cnpj), 0) = 0 then
      --
      gv_mensagem_log := 'O "CNPJ do Participante para download na Sefaz" ('||est_row_nf_forma_pgto.cnpj||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => ERRO_DE_VALIDACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   --Valida DM_TP_PAG
   if est_row_nf_forma_pgto.dm_tp_pag not in ('01', '02', '03', '04', '05', '10', '11', '12', '13', '14', '15', '90', '99')
      or est_row_nf_forma_pgto.dm_tp_pag is null
      then
      --
      gv_mensagem_log := 'A "Forma de Pagamento" escolhida ('||est_row_nf_forma_pgto.dm_tp_pag||'), está inválida. Valores válidos: '||
                         '"01", "02", "03", "04", "05", "10", "11", "12", "13", "14", "15", "90", "99".';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => ERRO_DE_VALIDACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3.1;
   --
   /* Esse teste está sendo feito na validação do campo DM_TP_INTEGRA - FlexField - pkb_consistem_nf
   if est_row_nf_forma_pgto.dm_tp_pag in ('03', '04') then
      --
      vn_fase := 3.2;
      --
      if est_row_nf_forma_pgto.cnpj is null or
         est_row_nf_forma_pgto.dm_tp_band is null or
         est_row_nf_forma_pgto.nro_aut is null then
         --
         gv_mensagem_log := 'Para tipos de pagamento ("03-Cartão de credito", "04-Cartão de debito"), devem ser informados CNPJ, Tipo de Bandeira e Numero '||
                            'de autorização.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => ERRO_DE_VALIDACAO
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         --
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   els*/
   if est_row_nf_forma_pgto.dm_tp_pag in ('14') then
      --
      vn_fase := 3.3;
      --
      gv_mensagem_log := 'O tipo de pagamento 14=Duplicata Mercantil a partir da versão NT_2016_002 não é mais aceita. Verifique!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => INFORMACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
   else
      --
      vn_fase := 3.4;
      --
      if est_row_nf_forma_pgto.dm_tp_pag in ('01', '02', '05', '10', '11', '12', '13', '99') then
         --
         if est_row_nf_forma_pgto.cnpj is not null or
            est_row_nf_forma_pgto.dm_tp_band is not null or
            est_row_nf_forma_pgto.nro_aut is not null then
            --
            gv_mensagem_log := 'Para tipos de pagamento diferente de "03-Cartão de crédito" e "04-Cartão de débito", não devem ser informados CNPJ, Tipo de '||
                               'Bandeira e Número de autorização.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => ERRO_DE_VALIDACAO
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 4;
   --
   --Valida VL_PGTO
   if est_row_nf_forma_pgto.vl_pgto < 0 or est_row_nf_forma_pgto.vl_pgto is null then
      --
      gv_mensagem_log := 'O "Valor do pagamento" ('||est_row_nf_forma_pgto.vl_pgto||') deve ser maior ou igual a zero.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => ERRO_DE_VALIDACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   --Valida DM_TP_PAG e VL_PGTO
   if est_row_nf_forma_pgto.dm_tp_pag = '90' and -- 90-Sem pagamento
      nvl(est_row_nf_forma_pgto.vl_pgto,0) <> 0 then
      --
      gv_mensagem_log := 'Para a "Forma de Pagamento" escolhida ('||est_row_nf_forma_pgto.dm_tp_pag||'), não deve ser informado Valor de Pagamento.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => ERRO_DE_VALIDACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   --Valida DM_TP_BAND
   if est_row_nf_forma_pgto.dm_tp_band not in ('01', '02', '03', '04', '05', '06', '07', '08', '09', '99') and
      est_row_nf_forma_pgto.dm_tp_band is not null then
      --
      gv_mensagem_log := 'A "Bandeira da operadora de cartão de crédito e/ou débito" ('||est_row_nf_forma_pgto.dm_tp_band||'), está inválida. Valores '||
                         'válidos: NULO, ou, "01", "02", "03", "04", "05", "06", "07", "08", "09", "99".';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => ERRO_DE_VALIDACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   vn_fase := 99;
   --
   -- Se não tem registro de Log e o Tipo de Integração é 1 (valida e insere)
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_nf_forma_pgto.notafiscal_id;
      --
   end if;
   --
   est_row_nf_forma_pgto.cnpj  := trim(est_row_nf_forma_pgto.cnpj);
   --
   vn_fase := 99.1;
   --
   if nvl(est_row_nf_forma_pgto.notafiscal_id,0) > 0
      and (est_row_nf_forma_pgto.dm_tp_band in ('01', '02', '03', '04', '05', '06', '07', '08', '09', '99') or est_row_nf_forma_pgto.dm_tp_band is null)
      and est_row_nf_forma_pgto.dm_tp_pag in ('01', '02', '03', '04', '05', '10', '11', '12', '13', '14', '15', '90', '99')
      and nvl(est_row_nf_forma_pgto.vl_pgto,0)    >= 0
      then
      --
      vn_fase := 99.2;
      --
      -- Verifica se já existe o registro
      begin
        select id
          into vn_nfformapgto_id
          from nf_forma_pgto
         where notafiscal_id           = est_row_nf_forma_pgto.notafiscal_id
           and nvl(trim(dm_tp_pag),0)  = nvl(trim(est_row_nf_forma_pgto.dm_tp_pag),0)
           and vl_pgto                 = est_row_nf_forma_pgto.vl_pgto
           and nvl(trim(cnpj),0)       = nvl(trim(est_row_nf_forma_pgto.cnpj),0)
           and nvl(trim(dm_tp_band),0) = nvl(trim(est_row_nf_forma_pgto.dm_tp_band),0)
           and nvl(trim(nro_aut),0)    = nvl(trim(est_row_nf_forma_pgto.nro_aut),0);
      exception
         when too_many_rows then
            vn_nfformapgto_id := 1;
         when others then
            vn_nfformapgto_id := null;
      end;
      --
      if nvl(gn_tipo_integr,0) = 0 or nvl(vn_nfformapgto_id,0) > 0 then
         --
         -- atualiza
         vn_fase := 99.3;
         --
         update nf_forma_pgto
            set dm_tp_pag  = est_row_nf_forma_pgto.dm_tp_pag
              , vl_pgto    = est_row_nf_forma_pgto.vl_pgto
              , cnpj       = est_row_nf_forma_pgto.cnpj
              , dm_tp_band = est_row_nf_forma_pgto.dm_tp_band
              , nro_aut    = est_row_nf_forma_pgto.nro_aut
          where id         = est_row_nf_forma_pgto.id;
         --
      elsif nvl(gn_tipo_integr,0) = 1 then -- Insere
         --
         vn_fase := 99.4;
         --
         select nfformapgto_seq.Nextval
           into est_row_nf_forma_pgto.id
           from dual;
         --
         insert into nf_forma_pgto ( id
                                    , notafiscal_id
                                    , dm_tp_pag
                                    , vl_pgto
                                    , cnpj
                                    , dm_tp_band
                                    , nro_aut
                                    )
                             values ( est_row_nf_forma_pgto.id
                                    , est_row_nf_forma_pgto.notafiscal_id
                                    , est_row_nf_forma_pgto.dm_tp_pag
                                    , est_row_nf_forma_pgto.vl_pgto
                                    , est_row_nf_forma_pgto.cnpj
                                    , est_row_nf_forma_pgto.dm_tp_band
                                    , est_row_nf_forma_pgto.nro_aut
                                    );
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_integr_nf_forma_pgto fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_cabec_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia);
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END pkb_integr_nf_forma_pgto;

------------------------------------------------------------------------------------
-- Procedimento integra as informações de Formas de Pagamento - Campos Flex Field --
------------------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NF_FORMA_PGTO_FF ( EST_LOG_GENERICO_NF IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                      , EN_NOTAFISCAL_ID    IN             NOTA_FISCAL.ID%TYPE
                                      , EN_NFFORMAPGTO_ID   IN             NF_FORMA_PGTO.ID%TYPE
                                      , EV_ATRIBUTO         IN             VARCHAR2
                                      , EV_VALOR            IN             VARCHAR2 ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_dmtipocampo     ff_obj_util_integr.dm_tipo_campo%type;
   vv_mensagem        varchar2(1000) := null;
   vn_nf_id           nota_fiscal.id%type;
   vn_dm_tp_integra   nf_forma_pgto.dm_tp_integra%type;
   vn_vl_troco        nf_forma_pgto.vl_troco%type;
   vn_dm_ind_pag      nf_forma_pgto.dm_ind_pag%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Formas de Pagamento - NF: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Formas de Pagamento - NF: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_NF_FORMA_PGTO_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_NF_FORMA_PGTO_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'DM_TP_INTEGRA' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 11;
               --
               if ev_valor in ('1', '2') then
                  --
                  vn_dm_tp_integra := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NF_FORMA_PGTO_FF'
                                                                  , ev_atributo => trim(ev_atributo)
                                                                  , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  gv_mensagem_log := 'O valor do campo "Tipo de Integração para pagamento" informado ('||ev_valor||') não é valido, de ser:  1-Pagamento integrado com o sistema de automação da empresa, 2-Pagamento não integrado com o sistema de automação da empresa.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 12;
               --
               gv_mensagem_log := 'O valor do campo "Tipo de Integração para pagamento" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'VL_TROCO' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 13;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 14;
                  --
                  vn_vl_troco := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NF_FORMA_PGTO_FF'
                                                                  , ev_atributo => trim(ev_atributo)
                                                                  , ev_valor    => trim(ev_valor) );
                  --
               --
            else
               --
               vn_fase := 15;
               --
               gv_mensagem_log := 'O valor do campo "Valor do troco para pagamento" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_IND_PAG' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 16;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 17;
               --
               if ev_valor in ('0', '1') then
                  --
                  vn_dm_ind_pag := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NF_FORMA_PGTO_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
               else
                  --
                  gv_mensagem_log := 'O valor do campo "Indicador da forma de pagamento" informado ('||ev_valor||') não é valido, deve ser:  0-Pagamento à Vista ou 1-Pagamento à Prazo.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 18;
               --
               gv_mensagem_log := 'O valor do campo "Indicador da forma de pagamento" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      else
         vn_fase := 19;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 20;
   --
   if nvl(en_notafiscal_id, 0) = 0 then
      --
      vn_fase := 21.1;
      --
      gv_mensagem_log := 'Identificador da nota fiscal não informado - Integra as informações de Formas de Pagamento - Campos Flex-Field.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (valida e insere)
   -- então realiza a condição de inserir o imposto
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_nfformapgto_id, 0) > 0 and
      ev_atributo = 'DM_TP_INTEGRA' and
      nvl(vn_dm_tp_integra,-1) >= 0 and
      vv_mensagem is null then
      --
      vn_fase := 99.3;
      --
      update nf_forma_pgto nf
         set nf.dm_tp_integra = vn_dm_tp_integra
       where nf.id = en_nfformapgto_id;
      --
   elsif nvl(en_nfformapgto_id, 0) > 0 and
      ev_atributo = 'VL_TROCO' and
      nvl(vn_vl_troco,-1) >= 0 and
      vv_mensagem is null then
      --
      vn_fase := 99.4;
      --
      update nf_forma_pgto nf
         set nf.vl_troco = vn_vl_troco
       where nf.id = en_nfformapgto_id;
      --
   elsif nvl(en_nfformapgto_id, 0) > 0 and
      ev_atributo                  = 'DM_IND_PAG' and
      nvl(vn_dm_ind_pag,-1)        >= 0 and
      vv_mensagem                  is null then
      --
      vn_fase := 99.5;
      --
      update nf_forma_pgto nf
         set nf.dm_ind_pag = vn_dm_ind_pag
       where nf.id = en_nfformapgto_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nf_forma_pgto_ff fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NF_FORMA_PGTO_FF;

-------------------------------------------------------
-- Procedimento integra os cupum fiscal referenciado --
-------------------------------------------------------
PROCEDURE PKB_INTEGR_CF_REF ( EST_LOG_GENERICO_NF IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                            , EST_ROW_CF_REF      IN OUT NOCOPY  CUPOM_FISCAL_REF%ROWTYPE
                            , EV_COD_MOD          IN             MOD_FISCAL.COD_MOD%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_cumpomfiscal_id cupom_fiscal_ref.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_cf_ref.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal Pai para criar o relacionamento entre cupom fiscal referênciado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   -- recupera o ID do Modelo de documento Fiscal
   est_row_cf_ref.modfsical_id := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => ev_cod_mod );
   --
   if nvl(est_row_cf_ref.modfsical_id,0) <= 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Modelo do Documento Fiscal" está inválido('||ev_cod_mod||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2.2;
   -- valida se o modelo de documento pode ser referênciado
   if pk_csf.fkg_cod_mod_id(est_row_cf_ref.modfsical_id) not in ('2D') then
      --
      vn_fase := 2.3;
      --
      gv_mensagem_log := '"Modelo do Documento Fiscal" ('||ev_cod_mod||'), não permite que ele seja referenciado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(pk_csf.fkg_converte(est_row_cf_ref.ecf_fab)) is null
      and gt_row_nota_fiscal.dm_ind_emit = 1 -- Terceiro
      then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Número de série de fabricação do ECF" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_cf_ref.ecf_cx,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Número do caixa atribuído ao ECF" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_cf_ref.num_doc,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Número do documento fiscal, contador ordem de operação (COO)" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   if est_row_cf_ref.dt_doc is null
      and gt_row_nota_fiscal.dm_ind_emit = 1 -- Terceiro
      then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Data da emissão do documento fiscal" não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_cf_ref.notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.1;
   --
   est_row_cf_ref.ecf_fab := trim(pk_csf.fkg_converte(est_row_cf_ref.ecf_fab));
   est_row_cf_ref.ecf_cx := nvl(est_row_cf_ref.ecf_cx,0);
   est_row_cf_ref.num_doc := nvl(est_row_cf_ref.num_doc,0);
   --
   vn_fase := 99.2;
   --
   if nvl(est_row_cf_ref.notafiscal_id, 0) > 0
      and nvl(est_row_cf_ref.modfsical_id,0) > 0
      and est_row_cf_ref.ecf_fab is not null
      and est_row_cf_ref.ecf_cx > 0
      and est_row_cf_ref.num_doc > 0
      and est_row_cf_ref.dt_doc is not null
      then
      --
      vn_fase := 99.3;
      --
      -- Verifica se já existe o registro
      begin
         select id
           into vn_cumpomfiscal_id
           from cupom_fiscal_ref
          where notafiscal_id = est_row_cf_ref.notafiscal_id;
      exception
         when too_many_rows then
            vn_cumpomfiscal_id := 1;
         when others then
            vn_cumpomfiscal_id := null;
      end;
      --
      if nvl(gn_tipo_integr,0) = 0 or nvl(vn_cumpomfiscal_id,0) > 0 then
         --
         vn_fase := 99.4;
         --
         update cupom_fiscal_ref set modfsical_id  = est_row_cf_ref.modfsical_id
                                   , ecf_fab       = est_row_cf_ref.ecf_fab
                                   , ecf_cx        = est_row_cf_ref.ecf_cx
                                   , num_doc       = est_row_cf_ref.num_doc
                                   , dt_doc        = est_row_cf_ref.dt_doc
          where id = est_row_cf_ref.id;
         --

      elsif nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.5;
         --
         select cupomfiscalref_seq.nextval
           into est_row_cf_ref.id
           from dual;
         --
         vn_fase := 99.6;
         --
         insert into cupom_fiscal_ref ( id
                                      , notafiscal_id
                                      , modfsical_id
                                      , ecf_fab
                                      , ecf_cx
                                      , num_doc
                                      , dt_doc )
                               values ( est_row_cf_ref.id
                                      , est_row_cf_ref.notafiscal_id
                                      , est_row_cf_ref.modfsical_id
                                      , est_row_cf_ref.ecf_fab
                                      , est_row_cf_ref.ecf_cx
                                      , est_row_cf_ref.num_doc
                                      , est_row_cf_ref.dt_doc 
                                      );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_cf_ref fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_cabec_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia);
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_CF_REF;

------------------------------------------------------------------
-- Procedimento integra os cupum fiscal eletronico referenciado --
------------------------------------------------------------------
PROCEDURE PKB_INTEGR_CFE_REF ( EST_LOG_GENERICO_NF   IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                             , EST_ROW_CFE_REF    IN OUT NOCOPY  CFE_REF%ROWTYPE
                             , EV_COD_MOD         IN             MOD_FISCAL.COD_MOD%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_cfe_ref.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal Pai para criar o relacionamento entre cupom fiscal referênciado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   -- recupera o ID do Modelo de documento Fiscal
   --
   est_row_cfe_ref.modfiscal_id := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => ev_cod_mod );
   --
   if nvl(est_row_cfe_ref.modfiscal_id,0) <= 0 then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Modelo do Documento Fiscal" está inválido('||ev_cod_mod||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2.2;
   -- valida se o modelo de documento pode ser referênciado
   --
   if pk_csf.fkg_cod_mod_id(est_row_cfe_ref.modfiscal_id) not in ('59') then
      --
      vn_fase := 2.3;
      --
      gv_mensagem_log := '"Modelo do Documento Fiscal" ('||ev_cod_mod||'), não permite que ele seja referênciado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(pk_csf.fkg_converte(est_row_cfe_ref.nr_sat)) is null then
      --
      vn_fase := 3.1;
      --
      gv_mensagem_log := '"Número de Série do equipamento SAT" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   if nvl(est_row_cfe_ref.chv_cfe,0) < 0 then
      --
      vn_fase := 4.1;
      --
      gv_mensagem_log := '"Chave do Cupom Fiscal Eletrônico" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   if nvl(est_row_cfe_ref.num_cfe,0) < 0 then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := '"Número do documento fiscal, contador ordem de operação (COO)" não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 6;
   --
   if est_row_cfe_ref.dt_doc is null then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := '"Data da emissão do documento fiscal" não informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_cfe_ref.notafiscal_id;
      --
      commit;
      --
   end if;
   --
   est_row_cfe_ref.nr_sat := nvl(est_row_cfe_ref.nr_sat,0);
   est_row_cfe_ref.chv_cfe := trim(est_row_cfe_ref.chv_cfe);
   est_row_cfe_ref.num_cfe := nvl(est_row_cfe_ref.num_cfe,0);
   --
   --
   if nvl(est_row_cfe_ref.notafiscal_id, 0) > 0
      and nvl(est_row_cfe_ref.modfiscal_id,0) > 0
      and est_row_cfe_ref.nr_sat > 0
      and est_row_cfe_ref.chv_cfe is not null
      and est_row_cfe_ref.num_cfe > 0
      and est_row_cfe_ref.dt_doc is not null
      then
      --
      --
      if nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 99.1;
         --
         select cferef_seq.nextval
           into est_row_cfe_ref.id
           from dual;
         --
         vn_fase := 99.2;
         --
         insert into cfe_ref ( id
                             , notafiscal_id
                             , modfiscal_id
                             , nr_sat
                             , chv_cfe
                             , num_cfe
                             , dt_doc
                             )
                      values ( est_row_cfe_ref.id
                             , est_row_cfe_ref.notafiscal_id
                             , est_row_cfe_ref.modfiscal_id
                             , est_row_cfe_ref.nr_sat
                             , est_row_cfe_ref.chv_cfe
                             , est_row_cfe_ref.num_cfe
                             , est_row_cfe_ref.dt_doc
                             );
         --
         commit;
      else
         --
         vn_fase := 99.3;
         --
         update cfe_ref set modfiscal_id  = est_row_cfe_ref.modfiscal_id
                          , nr_sat        = est_row_cfe_ref.nr_sat
                          , chv_cfe       = est_row_cfe_ref.chv_cfe
                          , num_cfe       = est_row_cfe_ref.num_cfe
                          , dt_doc        = est_row_cfe_ref.dt_doc
          where id = est_row_cfe_ref.id;
         --
         commit;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_cfe_ref fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_cabec_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia);
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_CFE_REF;

-----------------------------------------------------------------------------
-- Procedimento integra as notas fiscais referenciadas - campos flex field --
-----------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NF_REFEREN_FF ( EST_LOG_GENERICO_NF        IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                   , EN_NOTAFISCALREFEREN_ID IN             NOTA_FISCAL_REFEREN.ID%TYPE
                                   , EV_COD_MOD_REF          IN             VARCHAR2
                                   , EV_ATRIBUTO             IN             VARCHAR2
                                   , EV_VALOR                IN             VARCHAR2 ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_dmtipocampo    ff_obj_util_integr.dm_tipo_campo%type;
   vv_ie_ref         nota_fiscal_referen.ie%type;
   vv_mensagem       varchar2(1000) := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Notas Fiscais Referenciadas: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Notas Fiscais Referenciadas: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_NOTA_FISCAL_REFEREN_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_NOTA_FISCAL_REFEREN_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'IE_REF' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 11;
               --
               vv_ie_ref := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_REFEREN_FF'
                                                          , ev_atributo => trim(ev_atributo)
                                                          , ev_valor    => trim(ev_valor) );
               --
               vn_fase := 12;
               --
               if trim(vv_ie_ref) like 'ISENT%' then
                  --
                  vn_fase := 13;
                  vv_ie_ref := 'ISENTO';
                  --
               end if;
               --
            else
               --
               vn_fase := 14;
               --
               gv_mensagem_log := 'Para o atributo IE_REF, o VALOR informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         elsif ev_cod_mod_ref = '04' then -- nota fiscal de produtor rural
               --
               vn_fase := 15;
               --
               gv_mensagem_log := 'Para o atributo IE_REF, o VALOR deve ser informado devido ao modelo de nota fiscal ser 04-Produtor Rural.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
         end if;
      else
         --
         vn_fase := 16;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 17;
   --
   if nvl(en_notafiscalreferen_id,0) = 0 then
      --
      vn_fase := 18;
      --
      gv_mensagem_log := 'Identificador da nota fiscal referenciada não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (valida e insere)
   -- então realiza a condição de inserir o imposto
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf set nf.dm_st_proc = 10
       where nf.id = ( select nr.notafiscal_id from nota_fiscal_referen nr
                        where nr.id = en_notafiscalreferen_id );
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_notafiscalreferen_id,0) > 0 and
      trim(ev_atributo) = 'IE_REF' and
      vv_ie_ref is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.3;
      --
      update nota_fiscal_referen nr
         set nr.ie = trim(vv_ie_ref)
       where nr.id = en_notafiscalreferen_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nf_referen_ff fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NF_REFEREN_FF;

---------------------------------------------------------
-- Procedimento integra as notas fiscais referenciadas --
---------------------------------------------------------
PROCEDURE PKB_INTEGR_NF_REFEREN ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                , EST_ROW_NF_REFEREN   IN OUT NOCOPY  NOTA_FISCAL_REFEREN%ROWTYPE
                                , EV_COD_MOD           IN             MOD_FISCAL.COD_MOD%TYPE
                                , EV_COD_PART          IN             PESSOA.COD_PART%TYPE
                                , EN_MULTORG_ID        IN             MULT_ORG.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_NFReferen_id   nota_fiscal_referen.id%type;
   vn_dm_tipo_pessoa pessoa.dm_tipo_pessoa%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(est_row_nf_referen.notafiscal_id,0) = 0
      and nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 1.1;
      --
      gv_mensagem_log := 'Não informado a Nota Fiscal Pai para criar o relacionamento entre notas fiscais referênciadas.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2;
   -- recupera o ID do Modelo de documento Fiscal
   est_row_nf_referen.modfiscal_id := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => lpad(trim(ev_cod_mod), 2, '0') );
   --
   vn_fase := 3;
   -- recupera o ID da Pessoa caso a Chave de acesso referenciada seja nula, caso contrario o ID será recuperado
   -- no processo de tratamento da chave.
   if trim( pk_csf.fkg_converte( est_row_nf_referen.nro_chave_nfe ) ) is null and
      nvl(est_row_nf_referen.pessoa_id,0) <= 0 then
      --
      est_row_nf_referen.pessoa_id := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id => en_multorg_id
                                                                    , ev_cod_part   => ev_cod_part );
      --
   end if;
   --
   vn_fase := 3.1;
   -- valida se CNPJ é númerico caso ele seja informado.
   if trim( pk_csf.fkg_converte( est_row_nf_referen.cnpj_emit ) ) is not null
      and pk_csf.fkg_is_numerico ( ev_valor => est_row_nf_referen.cnpj_emit ) = false then
      --
      vn_fase := 3.2;
      --
      gv_mensagem_log := 'O "CNPJ/CPF do emitente da NF-e Referenciada" ('||est_row_nf_referen.cnpj_emit||
                         ') deve conter somente números considerando os zeros à esquerda.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3.3;
   --
   if trim( pk_csf.fkg_converte( est_row_nf_referen.cnpj_emit ) ) is not null
      and pk_csf.fkg_is_numerico ( ev_valor => est_row_nf_referen.cnpj_emit ) = True
      and nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => est_row_nf_referen.cnpj_emit ), 0) = 0 then
      --
      vn_fase := 3.4;
      --
      gv_mensagem_log := 'O "CNPJ/CPF do emitente da NF-e Referenciada" ('||est_row_nf_referen.cnpj_emit||') está inválido.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   -- Valida informação da Chave Referenciada
   if trim( pk_csf.fkg_converte( est_row_nf_referen.nro_chave_nfe ) ) is not null then
      --
      vn_fase := 5;
      --
      if length( trim( pk_csf.fkg_converte( est_row_nf_referen.nro_chave_nfe ) ) ) <> 44 then
         --
         vn_fase := 5.1;
         --
         gv_mensagem_log := '"Chave de Acesso da NF-e Referenciada" está incorreta ('||est_row_nf_referen.nro_chave_nfe||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   else
      --
      vn_fase := 6;
      --
      if trim( pk_csf.fkg_converte( est_row_nf_referen.ibge_estado_emit ) ) is null then
         --
         vn_fase := 6.1;
         --
         gv_mensagem_log := '"Código da UF do emitente do Documento Fiscal Referenciado" está incorreta ('||est_row_nf_referen.ibge_estado_emit||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 6.2;
      --
      if est_row_nf_referen.dt_emiss is null then
         --
         vn_fase := 6.3;
         --
         gv_mensagem_log := '"Data da Emissão da Nota Fiscal Referenciada" está incorreta ('||est_row_nf_referen.dt_emiss||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 6.4;
      --
      if trim( pk_csf.fkg_converte( est_row_nf_referen.cnpj_emit ) ) is null then
         --
         vn_dm_tipo_pessoa := null;
         --
         if nvl(est_row_nf_referen.pessoa_id,0) > 0 then
            --
            vn_fase := 6.5;
            --
            begin
               --
               select p.dm_tipo_pessoa
                 into vn_dm_tipo_pessoa
                 from pessoa p
                where p.id = est_row_nf_referen.pessoa_id;
               --
            exception
               when others then
                  vn_dm_tipo_pessoa := null;
            end;
            --
         end if;
         --
         if nvl(vn_dm_tipo_pessoa,0) <> 2 then  -- 2-Exterior
            --
            vn_fase := 6.51;
            --
            gv_mensagem_log := '"CPF/CNPJ do emitente da Nota Fiscal Referenciada" não informado.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
      vn_fase := 6.6;
      --
      if nvl(est_row_nf_referen.modfiscal_id,0) <= 0 then
         --
         vn_fase := 6.7;
         --
         gv_mensagem_log := '"Modelo Fiscal da Nota Fiscal Referenciada" está incorreto ('||ev_cod_mod||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 6.8;
      -- Valida o modelo do documento fiscal permite ser referênciado
      if pk_csf.fkg_cod_mod_id(est_row_nf_referen.modfiscal_id) not in ('01', '02', '04', '55', '65') then
         --
         vn_fase := 6.9;
         --
         gv_mensagem_log := '"Modelo Fiscal da Nota Fiscal Referenciada" ('||ev_cod_mod||'), não permite que ele seja referênciado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 6.10;
      --
      if trim( pk_csf.fkg_converte( est_row_nf_referen.serie ) ) is null then
         --
         vn_fase := 6.11;
         --
         gv_mensagem_log := '"Série da Nota Fiscal Referenciada" está incorreta ('||est_row_nf_referen.serie||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 6.12;
      --
      if nvl(est_row_nf_referen.nro_nf,0) <= 0 then
         --
         vn_fase := 6.13;
         --
         gv_mensagem_log := '"Número da Nota Fiscal Referenciada" está incorreta ('||est_row_nf_referen.nro_nf||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      else
         --
         if length(trim(est_row_nf_referen.nro_nf)) > 9 then
            --
            vn_fase := 6.131;
            --
            gv_mensagem_log := '"Número da Nota Fiscal Referenciada" ('||est_row_nf_referen.nro_nf||'), não pode ser maior que 9 dígitos.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
      vn_fase := 6.14;
      --
      if trim(ev_cod_mod) in ('55', '65') and trim( pk_csf.fkg_converte( est_row_nf_referen.nro_chave_nfe ) ) is null
         and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- Emissão própria
         then
         --
         vn_fase := 6.15;
         --
         gv_mensagem_log := '"Chave de Acesso da NFe/NFCe Referênciada" deve ser informanda quando o modelo for 55-Nota Fiscal Eletrônica/65- Nota Fiscal de Consumidor Eletrônica.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 8;
   -- Trata dados da Chave de acesso referenciada
   if trim( pk_csf.fkg_converte( est_row_nf_referen.nro_chave_nfe ) ) is not null then
      --
      vn_fase := 8.1;
      --
      -- Verifica se a nota referenciada atraves da chave_nfe existe no Complince e carrega os dados.
      begin
         --
         select nf.uf_ibge_emit
              , nf.dt_emiss
              , nf.modfiscal_id
              , nf.nro_nf
              , nf.serie
              , pe.id pessoa_id
              , nf.dm_ind_oper
              , nf.dm_ind_emit
              , case when ju.num_cnpj is not null
                  then trim(to_char(ju.num_cnpj, '00000000'))||
                       trim(to_char(ju.num_filial, '0000'))||
                       trim(to_char(ju.dig_cnpj, '00'))
                  else null
                end cnpj_emit
              , ju.ie
           into est_row_nf_referen.ibge_estado_emit
              , est_row_nf_referen.dt_emiss
              , est_row_nf_referen.modfiscal_id
              , est_row_nf_referen.nro_nf
              , est_row_nf_referen.serie
              , est_row_nf_referen.pessoa_id
              , est_row_nf_referen.dm_ind_oper
              , est_row_nf_referen.dm_ind_emit
              , est_row_nf_referen.cnpj_emit
              , est_row_nf_referen.ie
          from nota_fiscal nf
             , pessoa      pe
             , juridica    ju
         where nf.nro_chave_nfe = trim(est_row_nf_referen.nro_chave_nfe)
           and nf.id              = est_row_nf_referen.notafiscal_id
           and nf.dm_arm_nfe_terc = 0  -- 0-não armazena xml, 1-sim armazena xml
           and nf.dm_st_proc      = 4  -- autorizada
           and pe.id              = nf.pessoa_id
           and ju.pessoa_id   (+) = pe.id;
         --
      exception
           when no_data_found then
            --
            gv_mensagem_log := 'Não encontrada nf escriturada no compliance para a Nro_Chave_NF = '||est_row_nf_referen.nro_chave_nfe||'  Fase '||vn_fase||' ';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => informacao/*erro_de_validacao*/
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            /*pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );*/
            --
           when others then
            --
            gv_mensagem_log := 'Falha na execução da query  '||est_row_nf_referen.nro_chave_nfe||' Fase '||vn_fase||' Erro = '||sqlerrm||'.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
             end;
      --
      vn_fase := 8.2;
      --
      if trim(est_row_nf_referen.ibge_estado_emit) is null then
         --
         est_row_nf_referen.ibge_estado_emit := substr(est_row_nf_referen.nro_chave_nfe, 1, 2);
         --
      end if;
      --
      vn_fase := 8.3;
      --
      if trim(est_row_nf_referen.cnpj_emit) is null then
         --
         est_row_nf_referen.cnpj_emit := substr(est_row_nf_referen.nro_chave_nfe, 7, 14);
         --
      end if;
      --
      vn_fase := 8.4;
      --
      if est_row_nf_referen.dt_emiss is null then
         --
         est_row_nf_referen.dt_emiss := to_date('01/' || substr(est_row_nf_referen.nro_chave_nfe, 5, 2) || '/20' || substr(est_row_nf_referen.nro_chave_nfe, 3, 2), 'dd/mm/rrrr');
         --
      end if;
      --
      vn_fase := 8.5;
      --
      if nvl(est_row_nf_referen.modfiscal_id,0) <= 0 then
         --
         est_row_nf_referen.modfiscal_id := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => substr(est_row_nf_referen.nro_chave_nfe, 21, 2) );
         --
      end if;
      --
      vn_fase := 8.6;
      --
      if nvl(est_row_nf_referen.nro_nf,0) <= 0 then
         --
         est_row_nf_referen.nro_nf := to_number( substr(est_row_nf_referen.nro_chave_nfe, 26, 9) );
         --
      end if;
      --
      vn_fase := 8.7;
      --
      if trim(est_row_nf_referen.serie) is null then
         --
         est_row_nf_referen.serie := substr(est_row_nf_referen.nro_chave_nfe, 23, 3);
         --
      end if;
      --
      vn_fase := 8.8;
      --
      if nvl(est_row_nf_referen.pessoa_id,0) <= 0 then
         --
         -- verifica se o CNPJ da empresa_id é o mesmo do emitente
         if trim( pk_csf.fkg_cnpj_ou_cpf_empresa ( en_empresa_id => gn_empresa_id ) ) = est_row_nf_referen.cnpj_emit then
            --
            begin
               --
               select pe.id
                 into est_row_nf_referen.pessoa_id
                 from nota_fiscal nf
                    , empresa     em
                    , pessoa      pe
                where nf.id = est_row_nf_referen.notafiscal_id
                  and em.id = nf.empresa_id
                  and pe.id = em.pessoa_id;
               --
            exception
               when others then
                  null;
            end;
            --
         else
            --
            est_row_nf_referen.pessoa_id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_multorg_id  => EN_MULTORG_ID
                                                                          , en_cpf_cnpj    => est_row_nf_referen.cnpj_emit
                                                                          );
         end if;
         --
      end if;
      --
      vn_fase := 8.9;
      --
      if nvl(est_row_nf_referen.dm_ind_oper, -1) < 0 then
         est_row_nf_referen.dm_ind_oper := 0;
      end if;
      --
      vn_fase := 8.10;
      --
      if nvl(est_row_nf_referen.dm_ind_emit, -1) < 0 then
         --
         -- verifica se o CNPJ da empresa_id é o mesmo do emitente
         if trim( pk_csf.fkg_cnpj_ou_cpf_empresa ( en_empresa_id => gn_empresa_id ) ) = est_row_nf_referen.cnpj_emit then
            est_row_nf_referen.dm_ind_emit := 0;
         else
            est_row_nf_referen.dm_ind_emit := 1;
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 9;
   --
   if nvl(est_row_nf_referen.pessoa_id,0) = 0 and -- código do participante da nota referenciada não informado
      pk_csf.fkg_sit_docto_cd(pk_csf.fkg_sitdoc_id_nf(est_row_nf_referen.notafiscal_id)) in ('06','07') then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := '"Código do participante da NFe/NFCe Referenciada" deve ser informanda quando a situação do documento for: 06-Documento Fiscal '||
                         'Complementar, ou, 07-Documento Fiscal Complementar extemporâneo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 10;
   --
   -- Se não existe registro de Log e o Tipo de Integração é 1 (valida e insere)
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      update nota_fiscal set dm_st_proc = 10
       where id = est_row_nf_referen.notafiscal_id;
      --
   end if;
   --
   vn_fase := 11;
   --
   est_row_nf_referen.nro_chave_nfe     := trim( pk_csf.fkg_converte( est_row_nf_referen.nro_chave_nfe ) );
   est_row_nf_referen.ibge_estado_emit  := trim( pk_csf.fkg_converte( est_row_nf_referen.ibge_estado_emit ) );
   est_row_nf_referen.serie             := trim( pk_csf.fkg_converte( est_row_nf_referen.serie ) );
   est_row_nf_referen.ie                := trim( pk_csf.fkg_converte( est_row_nf_referen.ie ) );
   --
   if nvl(est_row_nf_referen.notafiscal_id, 0) > 0 then
      --
      vn_fase := 12;
      --
      -- Verifica se já existe o registro
      begin
         select id
           into vn_NFReferen_id
           from nota_fiscal_referen
          where notafiscal_id = est_row_nf_referen.notafiscal_id;
      exception
         when too_many_rows then
            vn_NFReferen_id := 1;
         when others then
            vn_NFReferen_id := null;
      end;
      --
      if nvl(gn_tipo_integr,0) = 0 and nvl(vn_NFReferen_id,0) > 0 then
         --
         vn_fase := 13;
         --
         update nota_fiscal_referen set nro_chave_nfe     = est_row_nf_referen.nro_chave_nfe
                                      , ibge_estado_emit  = est_row_nf_referen.ibge_estado_emit
                                      , cnpj_emit         = est_row_nf_referen.cnpj_emit
                                      , dt_emiss          = est_row_nf_referen.dt_emiss
                                      , modfiscal_id      = est_row_nf_referen.modfiscal_id
                                      , nro_nf            = est_row_nf_referen.nro_nf
                                      , serie             = est_row_nf_referen.serie
                                      , subserie          = est_row_nf_referen.subserie
                                      , pessoa_id         = est_row_nf_referen.pessoa_id
                                      , dm_ind_oper       = est_row_nf_referen.dm_ind_oper
                                      , dm_ind_emit       = est_row_nf_referen.dm_ind_emit
                                      , ie                = est_row_nf_referen.ie
          where id = est_row_nf_referen.id;
         --
      elsif nvl(gn_tipo_integr,0) = 1 then
         --
         vn_fase := 14;
         --
         select nfreferen_seq.nextval
           into est_row_nf_referen.id
           from dual;
         --
         vn_fase := 15;
         --
         insert into nota_fiscal_referen ( id
                                         , notafiscal_id
                                         , nro_chave_nfe
                                         , ibge_estado_emit
                                         , cnpj_emit
                                         , dt_emiss
                                         , modfiscal_id
                                         , nro_nf
                                         , serie
                                         , subserie
                                         , pessoa_id
                                         , dm_ind_oper
                                         , dm_ind_emit
                                         , ie
                                         )
                                  values ( est_row_nf_referen.id
                                         , est_row_nf_referen.notafiscal_id
                                         , est_row_nf_referen.nro_chave_nfe
                                         , est_row_nf_referen.ibge_estado_emit
                                         , est_row_nf_referen.cnpj_emit
                                         , est_row_nf_referen.dt_emiss
                                         , est_row_nf_referen.modfiscal_id
                                         , est_row_nf_referen.nro_nf
                                         , est_row_nf_referen.serie
                                         , est_row_nf_referen.subserie
                                         , est_row_nf_referen.pessoa_id
                                         , est_row_nf_referen.dm_ind_oper
                                         , est_row_nf_referen.dm_ind_emit
                                         , est_row_nf_referen.ie
                                         );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_nf_referen fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_cabec_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NF_REFEREN;

-----------------------------------------------------------------
-- Procedimento que faz a integração as Notas Fiscais Cancelas --
-----------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_CANC ( EST_LOG_GENERICO_NF       IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                      , EST_ROW_NOTA_FISCAL_CANC  IN OUT NOCOPY  NOTA_FISCAL_CANC%ROWTYPE 
                                      , EN_LOTEINTWS_ID           IN     LOTE_INT_WS.ID%TYPE default 0 ) IS
   --
   vn_fase              number := 0;
   vd_dt_emiss          Nota_Fiscal.dt_emiss%TYPE;
   vd_dt_aut_sefaz      Nota_Fiscal.dt_aut_sefaz%TYPE;
   vn_dif_dias          number;
   vn_dif_horas         number;
   vn_dm_st_proc        Nota_Fiscal.dm_st_proc%TYPE;
   vn_loggenerico_id    log_generico_nf.id%type;
   vn_empresa_id        Empresa.id%TYPE          := null;
   vn_nro_nf            Nota_Fiscal.nro_nf%TYPE  := null;
   vv_serie             Nota_Fiscal.serie%TYPE   := null;
   vv_cod_mod           Mod_Fiscal.cod_mod%TYPE  := null;
   vn_dm_tp_amb         empresa.dm_tp_amb%type;
   vv_ibge_estado       estado.ibge_estado%type := null;
   vv_cnpj              varchar2(14) := null;
   vn_inutilizanf_id    nota_fiscal.inutilizanf_id%type;
   vn_modfiscal_id      nota_fiscal.modfiscal_id%type;
   vv_id_inut           inutiliza_nota_fiscal.id_inut%type;
   vv_cd_versaowsdl_nfe versao_wsdl.cd%type;
   vn_nro_protocolo     nota_fiscal.nro_protocolo%type;
   vn_lim_hora_canc_nfe estado.lim_hora_canc_nfe%type;
   vn_dm_st_integra     number := 0;
   vv_cpf_cnpj          param_integr_edi.cpf_cnpj%type := null;
   vb_integr_edi        boolean := false;
   vn_dm_integr_edi     nota_fiscal_dest.dm_integr_edi%type := 2;
   vn_nf_canc           number := 0;
   vn_dm_tipo_integr    empresa.dm_tipo_integr%type := null;
   vv_usuario_nome      neo_usuario.nome%type := null;
   vn_inutilizanf_st    inutiliza_nota_fiscal.dm_situacao%type;
   vn_multorg_id        mult_org.id%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   -- Busca dadaos da Nota Fiscal
   begin
      select nf.empresa_id
           , nf.nro_nf
           , nf.serie
           , mf.cod_mod
           , nf.dt_emiss
           , nf.dm_st_proc
           , nvl(nf.dt_aut_sefaz,nf.dt_emiss)
           , nf.nro_protocolo
           , es.lim_hora_canc_nfe
           , nvl(nfd.cnpj, nfd.cpf)
           , e.dm_tipo_integr
           , e.multorg_id
        into vn_empresa_id
           , vn_nro_nf
           , vv_serie
           , vv_cod_mod
           , vd_dt_emiss
           , vn_dm_st_proc
           , vd_dt_aut_sefaz
           , vn_nro_protocolo
           , vn_lim_hora_canc_nfe
           , vv_cpf_cnpj
           , vn_dm_tipo_integr
           , vn_multorg_id
        from Nota_Fiscal nf
           , nota_fiscal_dest nfd
           , Mod_Fiscal  mf
           , empresa     e
           , pessoa      p
           , cidade      c
           , estado      es
       where nf.id                 = est_row_Nota_Fiscal_Canc.notafiscal_id
         and nfd.notafiscal_id(+)  = nf.id
         and mf.id                 = nf.modfiscal_id
         and e.id                  = nf.empresa_id
         and p.id                  = e.pessoa_id
         and c.id                  = p.cidade_id
         and es.id                 = c.estado_id;
   exception
      when others then
         vn_empresa_id     := null;
         vn_nro_nf         := null;
         vv_serie          := null;
         vv_cod_mod        := null;
         vd_dt_emiss       := null;
         vn_dm_st_proc     := null;
         vd_dt_aut_sefaz   := null;
         vn_nro_protocolo  := null;
         vn_lim_hora_canc_nfe := 0;
         vv_cpf_cnpj       := null;
         vn_dm_tipo_integr := null;
         vn_multorg_id     := null;
   end;
   -- Monta cabeçalho do Log Genérico
   gv_cabec_log := null;
   gn_referencia_id := est_row_Nota_Fiscal_Canc.notafiscal_id;
   --
   vn_fase := 2;
   --
   if nvl(vn_empresa_id,0) > 0 then
      --
      vn_fase := 2.1;
      --
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa( en_empresa_id => vn_empresa_id );
      --
      gv_cabec_log := pk_csf_api.gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 3;
   --
   if nvl(vn_nro_nf,0) > 0 then
      --
      gv_cabec_log := gv_cabec_log||'Número: '||vn_nro_nf;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 4;
   --
   if vv_serie is not null then
      --
      gv_cabec_log := gv_cabec_log||'Série: '||vv_serie;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 5;
   --
   if vv_cod_mod is not null then
      --
      gv_cabec_log := gv_cabec_log||'Modelo: '||vv_cod_mod;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 6;
   --
   if vd_dt_emiss is not null then
      --
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(vd_dt_emiss, 'dd/mm/yyyy');
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   if nvl(en_loteintws_id,0) > 0 then
      --
      gv_cabec_log := gv_cabec_log || 'Lote WS: ' || en_loteintws_id;
      --
      gv_cabec_log := gv_cabec_log || chr(10);
      --
   end if;
   --
   vn_fase := 7;
   -- Verifica se a nota já tem registro de cancelamento
   begin
      --
      select distinct 1
        into vn_nf_canc
        from Nota_Fiscal_Canc
       where notafiscal_id = est_row_Nota_Fiscal_Canc.notafiscal_id;
      --
   exception
      when no_data_found then
         vn_nf_canc := 0;
   end;
   --
   vn_fase := 8;
   -- Se a situação da Nota Fiscal não for "7-Cancelada" e tem protocolo de autorização, então cancela
   if nvl(vn_dm_st_proc,0) in (0, 4) and nvl(vn_nro_protocolo,0) > 0 then
      --
      vn_fase  := 8.1;
      -- Verifica se teve nota fiscal informada
      if nvl(est_row_Nota_Fiscal_Canc.notafiscal_id,0) = 0
         and nvl(est_log_generico_nf.count,0) = 0 then
         --
         vn_fase := 8.2;
         --
         gv_mensagem_log := 'Não informada a Nota Fiscal para ser cancelada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia
                             , en_empresa_id       => vn_empresa_id );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase  := 8.3;
      --
      -- Verifica se a data de cancelamento é nula
      if est_row_Nota_Fiscal_Canc.dt_canc is null then
         --
         est_row_Nota_Fiscal_Canc.dt_canc := sysdate;
         --
      end if;
      --
      if nvl(est_row_Nota_Fiscal_Canc.DM_CANC_EXTEMP,-1) not in (0, 1) then
         est_row_Nota_Fiscal_Canc.DM_CANC_EXTEMP := 0;
      end if;
      --
      vn_fase := 8.4;
      --
      if trunc(est_row_Nota_Fiscal_Canc.dt_canc) < trunc(vd_dt_emiss)
         or trunc(est_row_Nota_Fiscal_Canc.dt_canc) < trunc(sysdate)
         then
         --
         est_row_Nota_Fiscal_Canc.dt_canc := sysdate;
         --
      end if;
      --
      vn_fase := 8.5;
      --
      -- Verifica se não foi informada a juntificativa de cancelamento
      if trim( est_row_Nota_Fiscal_Canc.justif ) is null then
         --
         vn_fase := 8.6;
         --
         gv_mensagem_log := 'Não foi informada a justificativa do cancelamento da nota fiscal.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia
                             , en_empresa_id       => vn_empresa_id  );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      else
         --
         vn_fase := 8.7;
         --
         if length(trim( est_row_Nota_Fiscal_Canc.justif )) < 15 then
            --
            vn_fase := 8.8;
            --
            gv_mensagem_log := 'Justificativa do cancelamento deve possuir no mínimo 15 caracteres.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia
                                , en_empresa_id       => vn_empresa_id  );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
	 end if;
	 --
      end if;
      --
      vn_fase := 8.9;
      -- Verifica se a nota foi emitida a mais de sete dias, se foi não pode cancelar
      if vd_dt_aut_sefaz is not null then
         --
         -- para não der erro no cancelamento por evento, altera a data da solicitação do cancelamento
         if est_row_Nota_Fiscal_Canc.dt_canc < vd_dt_aut_sefaz then
            est_row_Nota_Fiscal_Canc.dt_canc := sysdate;
         end if;
         --
         vn_fase := 8.10;
         -- calcula a diferença de dias
         vn_dif_dias := est_row_Nota_Fiscal_Canc.dt_canc - vd_dt_aut_sefaz;
         vn_dif_horas := vn_dif_dias * 24;
         --
         vn_fase := 8.11;
         -- Verifica se a ser cancelada ultrapassou o limite de tempo do estado
         if nvl(vn_dif_horas,0) > vn_lim_hora_canc_nfe
            and est_row_Nota_Fiscal_Canc.DM_CANC_EXTEMP = 0 -- Não é Cancelamento Extemporâneo
            then
            --
            vn_fase := 8.12;
            --
            gv_mensagem_log := 'Nota Fiscal não pode ser cancelada, pois já foi emitida a mais de '||vn_lim_hora_canc_nfe||' horas.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia
                                , en_empresa_id       => vn_empresa_id );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      else
         --
         vn_fase := 8.13;
         --
         gv_mensagem_log := 'Não foi recuperada a data de emissão da Nota Fiscal para ser cancelada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia
                             , en_empresa_id       => vn_empresa_id );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 8.14;
      -- Valida se a "Situação do Processo" da Nota Fiscal permite ser cancelada
      --
      if nvl(vn_dm_st_proc,0) not in (0, 4) then
         --
         vn_fase := 8.15;
         --
         gv_mensagem_log := 'Situação do processo da Nota Fiscal não permite que ela seja cancelada ('||vn_dm_st_proc||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia
                             , en_empresa_id       => vn_empresa_id );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 9;
      --
      if nvl(est_row_Nota_Fiscal_Canc.notafiscal_id, 0) > 0
         and est_row_Nota_Fiscal_Canc.dt_canc is not null
         and est_row_Nota_Fiscal_Canc.justif is not null then
         --
         est_row_Nota_Fiscal_Canc.justif         := trim( pk_csf.fkg_converte( est_row_Nota_Fiscal_Canc.justif ) );
         est_row_Nota_Fiscal_Canc.dm_st_integra  := nvl(est_row_Nota_Fiscal_Canc.dm_st_integra,0);
         --
         vn_fase := 9.1;
         --
         if nvl(vn_dm_tipo_integr,0) = 3
            and est_row_Nota_Fiscal_Canc.dm_st_integra not in (2, 3, 4, 10, 11, 12, 13)
            then -- Integração Table/View
            est_row_Nota_Fiscal_Canc.dm_st_integra  := 8;
         else
            if est_row_Nota_Fiscal_Canc.dm_st_integra in (10, 11) then --SAP
               est_row_Nota_Fiscal_Canc.dm_st_integra := 10;
            elsif est_row_Nota_Fiscal_Canc.dm_st_integra in (12, 13) then --SOFtWAy
               est_row_Nota_Fiscal_Canc.dm_st_integra := 12;
            else
               est_row_Nota_Fiscal_Canc.dm_st_integra  := nvl(est_row_Nota_Fiscal_Canc.dm_st_integra,0);
            end if;
         end if;
         -- Se não existe registro de log e o Tipo de Integração é 1 (valida e insere)
         -- então registra o Cancelamento da NF
         if nvl(est_log_generico_nf.count,0) <= 0 then
            --
            vn_fase := 9.2;
            --
            if nvl(vn_nf_canc,0) <= 0 then
               --
               vn_fase := 9.3;
               --
               select notafiscalcanc_seq.nextval
                 into est_row_Nota_Fiscal_Canc.id
                 from dual;
               --
               vn_fase := 9.4;
               --
               insert into Nota_Fiscal_Canc ( id
                                            , notafiscal_id
                                            , dt_canc
                                            , justif
                                            , dm_st_integra
                                            , DM_CANC_EXTEMP
                                            )
                                     values ( est_row_Nota_Fiscal_Canc.id
                                            , est_row_Nota_Fiscal_Canc.notafiscal_id
                                            , est_row_Nota_Fiscal_Canc.dt_canc
                                            , est_row_Nota_Fiscal_Canc.justif
                                            , est_row_Nota_Fiscal_Canc.dm_st_integra
                                            , est_row_Nota_Fiscal_Canc.DM_CANC_EXTEMP
                                            );
               --
            else
               --
               vn_fase := 9.5;
               --
               update Nota_Fiscal_Canc set dt_canc        = est_row_Nota_Fiscal_Canc.dt_canc
                                         , justif         = est_row_Nota_Fiscal_Canc.justif
                                         , dm_st_integra  = est_row_Nota_Fiscal_Canc.dm_st_integra
                                         , DM_CANC_EXTEMP = est_row_Nota_Fiscal_Canc.DM_CANC_EXTEMP
                where notafiscal_id = est_row_Nota_Fiscal_Canc.notafiscal_id;
               --
            end if;
            --
            vn_fase := 9.6;
            --
            -- Variavel global usada em logs de triggers (carrega)
            gv_objeto := 'pk_csf_api.pkb_integr_nota_fiscal_canc'; 
            gn_fase   := vn_fase;
            --
            -- Atualiza a Situação do processo da Nota Fiscal para 1-Não Processada. Aguardando Processamento
            -- e indica que não foi atualizado no ERP
            update Nota_Fiscal set dm_st_proc   = 1
                                 , dt_st_proc   = sysdate
                                 , dm_st_email  = 0 -- Não enviado
                                 , dm_st_integra  = est_row_Nota_Fiscal_Canc.dm_st_integra
             where id = est_row_Nota_Fiscal_Canc.notafiscal_id;
            --
            -- Variavel global usada em logs de triggers (limpa)
            gv_objeto := 'pk_csf_api';
            gn_fase   := null;
            --
            vn_fase := 9.7;
            --
            gv_mensagem_log := 'Inicio do processo de cancelamento.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => info_canc_nfe
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia
                                , en_empresa_id       => vn_empresa_id
                                , en_dm_impressa      => 1 );
            --
            vn_fase := 9.8;
            --
            if nvl(est_row_Nota_Fiscal_Canc.usuario_id,0) > 0 then
               vv_usuario_nome := pk_csf.fkg_usuario_nome ( en_usuario_id => est_row_Nota_Fiscal_Canc.usuario_id );
            else
               vv_usuario_nome := 'Integração';
            end if;
            --
            vn_fase := 9.9;
            --
            gv_mensagem_log := 'Usuário que solicitou o cancelamento: '||vv_usuario_nome||'.';
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => info_canc_nfe
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia
                                , en_empresa_id       => vn_empresa_id
                                , en_dm_impressa      => 1 );
            --
            --
            vn_fase := 9.10;
            -- inicio do processo de integração EDI
            vb_integr_edi := pk_csf.fkg_integr_edi ( en_multorg_id => vn_multorg_id
                                                   , ev_cpf_cnpj   => vv_cpf_cnpj
                                                   , en_dm_tipo    => 1 ); -- NFe
            --
            vn_fase := 9.11;
            --
            if vb_integr_edi then
               vn_dm_integr_edi := 0; -- Integra EDI
            else
               vn_dm_integr_edi := 2; -- Sem efeito
            end if;
            --
            vn_fase := 9.12;
            --
            update nota_fiscal_dest set dm_integr_edi = vn_dm_integr_edi
             where notafiscal_id = est_row_Nota_Fiscal_Canc.notafiscal_id;
            --
            -- Integra a Nota Fiscal ao CTMS
            pkb_integr_ctms ( est_log_generico_nf => est_log_generico_nf
                            , en_notafiscal_id => est_row_Nota_Fiscal_Canc.notafiscal_id
                            , en_dm_tipo       => 2 ); -- Cancelamento de NFe
            --
         end if;
         --
      end if;
      --
   else
      --
      vn_fase := 10;
      --
      --| Se não é uma nota autoriza, então cria o processo de inutilização
      --
      if nvl(vn_dm_st_proc,0) not in (1, 2, 3, 4, 6, 7, 8) then
         --
         vn_fase := 10.1;
         --
         begin
            --
            select nf.dm_tp_amb
                 , es.ibge_estado
                 , (lpad(j.num_cnpj, 8, '0') || lpad(j.num_filial, 4, '0') || lpad(j.dig_cnpj, 2, '0')) cnpj
                 , nf.modfiscal_id
                 , nf.serie
                 , nf.nro_nf
                 , nf.inutilizanf_id
                 , e.dm_tipo_integr
              into vn_dm_tp_amb
                 , vv_ibge_estado
                 , vv_cnpj
                 , vn_modfiscal_id
                 , vv_serie
                 , vn_nro_nf
                 , vn_inutilizanf_id
                 , vn_dm_tipo_integr
              from nota_fiscal nf
                 , empresa     e
                 , pessoa      p
                 , juridica    j
                 , cidade      c
                 , estado      es
             where nf.id       = est_row_Nota_Fiscal_Canc.notafiscal_id
               and e.id        = nf.empresa_id
               and p.id        = e.pessoa_id
               and j.pessoa_id = p.id
               and c.id        = p.cidade_id
               and es.id       = c.estado_id;
               --
         exception
            when others then
               vn_dm_tp_amb        := null;
               vv_ibge_estado      := null;
               vv_cnpj             := null;
               vn_modfiscal_id     := null;
               vv_serie            := null;
               vn_nro_nf           := null;
               vn_inutilizanf_id   := null;
               vn_dm_tipo_integr   := null;
         end;
         --
         vn_fase := 10.2;
         --
         vv_cd_versaowsdl_nfe := pk_csf.fkg_versaowsdl_nfe_estado ( en_estado_id => pk_csf.fkg_Estado_ibge_id ( ev_ibge_estado => vv_ibge_estado ) );
         --
         vn_fase := 10.3;
         --
         if vv_cd_versaowsdl_nfe = '1.10' then
            vv_id_inut := ('ID' || vv_ibge_estado || vv_cnpj || vv_cod_mod || lpad(vv_serie, 3, '0') || lpad(vn_nro_nf, 9, '0') || lpad(vn_nro_nf, 9, '0'));
         else
            vv_id_inut := ('ID' || vv_ibge_estado || substr(to_number(to_char(sysdate, 'RRRR')), 3, 2) || vv_cnpj || vv_cod_mod || lpad(vv_serie, 3, '0') || lpad(vn_nro_nf, 9, '0') || lpad(vn_nro_nf, 9, '0'));
         end if;
         --
         vn_fase := 10.4;
         --
         if nvl(vn_dm_tipo_integr,0) = 3 then -- Integração Table/View
            vn_dm_st_integra := 7;
         else
            vn_dm_st_integra := nvl(est_row_Nota_Fiscal_Canc.dm_st_integra,5);
         end if;
         --
         vn_fase := 10.5;
         --
         if nvl(vn_empresa_id,0) > 0 then
            --
            begin
               --
               select max(id)
                 into vn_inutilizanf_id
                 from Inutiliza_Nota_Fiscal  inf
                where inf.empresa_id = vn_empresa_id
                  and inf.serie      = vv_serie
                  and vn_nro_nf between inf.nro_ini and inf.nro_fim
                  and inf.modfiscal_id = vn_modfiscal_id;
               --
            exception
               when others then
                  vn_inutilizanf_id   := null;
            end;
            --
            vn_fase := 10.6;
            --
            if nvl(vn_inutilizanf_id,0) > 0 then
               --
               vn_fase := 10.7;
               --
               begin
                  --
                  select dm_situacao 
                    into vn_inutilizanf_st
                    from inutiliza_nota_fiscal
                   where id = vn_inutilizanf_id;
                  --
               exception
                  when others then
                     vn_inutilizanf_st := 0;
               end;
               --
               if nvl(vn_inutilizanf_st,0) not in (0, 1, 2, 5) then
                  --
                  update inutiliza_nota_fiscal set empresa_id      = vn_empresa_id
                                                 , dm_situacao     = 5
                                                 , dm_tp_amb       = vn_dm_tp_amb
                                                 , dm_forma_emiss  = 1
                                                 , dt_inut         = sysdate
                                                 , uf_ibge         = vv_ibge_estado
                                                 , ano             = to_number(to_char(sysdate, 'RRRR'))
                                                 , cnpj            = vv_cnpj
                                                 , modfiscal_id    = vn_modfiscal_id
                                                 , serie           = vv_serie
                                                 , nro_ini         = vn_nro_nf
                                                 , nro_fim         = vn_nro_nf
                                                 , justif          = trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Canc.justif ) )
                                                 , id_inut         = vv_id_inut
                                                 , dm_st_integra   = vn_dm_st_integra
                                                 , dm_integr_nf    = 0
                   where id = vn_inutilizanf_id;
                  --
               else
                  --
                  update inutiliza_nota_fiscal set dm_integr_nf    = 0
                   where id = vn_inutilizanf_id;
                  --
               end if;
               --
            else
               --
               vn_fase := 10.8;
               --
               select inutilizanf_seq.nextval
                 into vn_inutilizanf_id
                 from dual;
               --
               vn_fase := 10.9;
               --
               insert into inutiliza_nota_fiscal ( id
                                                 , empresa_id
                                                 , dm_situacao
                                                 , dm_tp_amb
                                                 , dm_forma_emiss
                                                 , dt_inut
                                                 , uf_ibge
                                                 , ano
                                                 , cnpj
                                                 , modfiscal_id
                                                 , serie
                                                 , nro_ini
                                                 , nro_fim
                                                 , justif
                                                 , id_inut
                                                 , dm_st_integra
                                                 , dm_integr_nf
                                                 )
                                          values ( vn_inutilizanf_id
                                                 , vn_empresa_id
                                                 , 5 -- dm_situacao
                                                 , vn_dm_tp_amb
                                                 , 1
                                                 , sysdate
                                                 , vv_ibge_estado
                                                 , to_number(to_char(sysdate, 'RRRR'))
                                                 , vv_cnpj
                                                 , vn_modfiscal_id
                                                 , vv_serie
                                                 , vn_nro_nf
                                                 , vn_nro_nf
                                                 , trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal_Canc.justif ) )
                                                 , vv_id_inut
                                                 , vn_dm_st_integra
                                                 , 0 -- sem nota fiscal
                                                 );
               --
            end if;
            --
            vn_fase := 10.10;
            --
            update Nota_Fiscal set dm_st_proc = 10
                                 , lote_id = null
             where id = est_row_Nota_Fiscal_Canc.notafiscal_id;
            --
            vn_fase := 10.11;
            --
         end if;
         --
      end if;
      --
   end if; -- nvl(vn_dm_st_proc,0) <> 7
   --
   <<sair_integr>>
   null;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_Nota_Fiscal_Canc fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia
                             , en_empresa_id       => vn_empresa_id );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_CANC;
--
-------------------------------------------------
-- Procedimento integra a Chave da Nota Fiscal --
-------------------------------------------------
PROCEDURE PKB_INTEGR_NFCHAVE_REFER ( EST_LOG_GENERICO_NF     IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                   , EN_EMPRESA_ID        IN             EMPRESA.ID%TYPE
                                   , EN_NOTAFISCAL_ID     IN             NOTA_FISCAL.ID%TYPE
                                   , ED_DT_EMISS          IN             NOTA_FISCAL.DT_EMISS%TYPE
                                   , EV_COD_MOD           IN             MOD_FISCAL.COD_MOD%TYPE
                                   , EN_SERIE             IN             NOTA_FISCAL.SERIE%TYPE
                                   , EN_NRO_NF            IN             NOTA_FISCAL.NRO_NF%TYPE
                                   , EN_DM_FORMA_EMISS    IN             NOTA_FISCAL.DM_FORMA_EMISS%TYPE
                                   , ESN_CNF_NFE          IN OUT NOCOPY  NOTA_FISCAL.CNF_NFE%TYPE
                                   , SN_DIG_VERIF_CHAVE   OUT            NOTA_FISCAL.DIG_VERIF_CHAVE%TYPE
                                   , SV_NRO_CHAVE_NFE         OUT            NOTA_FISCAL.NRO_CHAVE_NFE%TYPE
                                   , SN_DM_NRO_CHAVE_NFE_ORIG OUT            NOTA_FISCAL.DM_NRO_CHAVE_NFE_ORIG%TYPE ) IS
   --
   vn_fase              number := 0;
   vv_cnpj              varchar2(14) := null;
   vv_uf_ibge           varchar2(2)  := null;
   vn_loggenerico_id    log_generico_nf.id%type;
   vn_numero            number := null;
   vv_cd_versaowsdl_nfe versao_wsdl.cd%type;
   vn_cNF_nfe           Nota_Fiscal.cNF_nfe%TYPE := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_nro_nf,0) > 0 and ev_cod_mod in ('55', '57', '65') then
      --
      vn_fase := 2;
      --
      sv_nro_chave_nfe := pk_csf.fkg_chave_nf ( en_notafiscal_id => en_notafiscal_id );
      --
      vn_fase := 3;
      -- recupera dados da Empresa
      begin
         --
         select lpad( es.ibge_estado, 2, '0' )
              , ( lpad(j.num_cnpj, 8, '0') || lpad(j.num_filial, 4, '0') || lpad(j.dig_cnpj, 2, '0') ) cnpj
           into vv_uf_ibge
              , vv_cnpj
           from Empresa            e
              , Pessoa             p
              , cidade             c
              , estado             es
              , Juridica           j
          where e.id               = en_empresa_id
            and p.id               = e.pessoa_id
            and c.id               = p.cidade_id
            and es.id              = c.estado_id
            and j.pessoa_id        = p.id;
         --
      exception
         when others then
            --
            gv_mensagem_log := 'Erro ao recuperar os dados da Empresa para criar a Chave de Acesso.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
      end;
      --
      vn_fase := 3;
      --
      if nvl(en_notafiscal_id,0) > 0 then
         vn_numero := to_number(substr(en_notafiscal_id, 2, 8));
      else
         vn_numero := en_nro_nf;
      end if;
      --
      vn_fase := 4;
      --
      -- verifica a versão ativa do WSDL
      vv_cd_versaowsdl_nfe := pk_csf.fkg_versaowsdl_nfe_estado ( en_estado_id => pk_csf.fkg_Estado_ibge_id ( ev_ibge_estado => vv_uf_ibge ) );
      --
      vn_fase := 5;
      --
      if vv_cd_versaowsdl_nfe = '1.10' then
         vn_cNF_nfe := esn_cNF_nfe;
      else
         vn_cNF_nfe := en_dm_forma_emiss || lpad ( esn_cNF_nfe, 8, '0' );
      end if;
      --
      vn_fase := 6;
      -- Monta a Chave antes de calcular o dígito
      sv_nro_chave_nfe := vv_uf_ibge || to_char(ed_dt_emiss, 'YYMM') || vv_cnpj || ev_cod_mod || lpad( en_serie, 3, '0' ) || lpad( en_nro_nf, 9, '0' ) || lpad ( vn_cNF_nfe, 9, '0' );
      --
      vn_fase := 7;
      --
      -- Cálculo do digito verificador ao modulo 11
      sn_dig_verif_chave :=  pk_csf.fkg_mod_11 ( ev_codigo => sv_nro_chave_nfe );
      --
      sv_nro_chave_nfe   := to_char(sv_nro_chave_nfe || sn_dig_verif_chave);
      --
      sn_dm_nro_chave_nfe_orig := 1; -- 1-Chave Criada pela Compliance
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_NFChave_Refer fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NFCHAVE_REFER;
--
----------------------------------------------------------
-- Procedimento valida a chave de acesso da Nota Fiscal --
----------------------------------------------------------
PROCEDURE PKB_VALIDA_CHAVE_ACESSO ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                  , EV_NRO_CHAVE_NFE     IN             NOTA_FISCAL.NRO_CHAVE_NFE%TYPE
                                  , EN_UF_IBGE           IN             NOTA_FISCAL.UF_IBGE_EMIT%TYPE
                                  , EV_CNPJ              IN             varchar2
                                  , ED_DT_EMISS          IN             NOTA_FISCAL.DT_EMISS%TYPE
                                  , EV_COD_MOD           IN             MOD_FISCAL.COD_MOD%TYPE
                                  , EN_SERIE             IN             NOTA_FISCAL.SERIE%TYPE
                                  , EN_NRO_NF            IN             NOTA_FISCAL.NRO_NF%TYPE
                                  , EN_DM_FORMA_EMISS    IN             NOTA_FISCAL.DM_FORMA_EMISS%TYPE
                                  , EN_DM_NRO_CHAVE_NFE_ORIG IN             NOTA_FISCAL.DM_NRO_CHAVE_NFE_ORIG%TYPE
                                  , SN_CNF_NFE           OUT            NOTA_FISCAL.CNF_NFE%TYPE
                                  , SN_DIG_VERIF_CHAVE   OUT            NOTA_FISCAL.DIG_VERIF_CHAVE%TYPE
                                  , SN_QTDE_ERRO         OUT            NUMBER 
                                  ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   -- Informações da Chave de Acesso
   vv_uf_ibge_chave   varchar2(2)  := null;
   vv_emissao_chave   varchar2(4)  := null;
   vv_cnpj_chave      varchar2(14) := null;
   vv_cod_mod_chave   varchar2(2)  := null;
   vv_serie_chave     varchar2(3)  := null;
   vv_nro_nf_chave    varchar2(9)  := null;
   vv_dm_forma_emiss  varchar2(1)  := null;
   -- Informações usadas para comprar com a Chave de Acesso
   vv_cnpj            varchar2(14) := null;
   vv_uf_ibge         varchar2(2)  := null;
   vn_dig_verif_chave Nota_Fiscal.dig_verif_chave%TYPE := null;
   vn_cd_cfop         cfop.cd%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_nro_nf,0) > 0 and ev_cod_mod in ('55', '57', '65') then
      --
      vn_fase := 2;
      --
      if ev_nro_chave_nfe is not null then
         --
         -- Valida a informação da Chave informada no ERP
         sn_qtde_erro := 0;
         --
         vn_fase := 3;
         -- Armaxena o valor do código do ibge da chave
         vv_uf_ibge_chave := trim( substr(ev_nro_chave_nfe, 1, 2) );
         --
         vn_fase := 4;
         --  Armazena o valor da emissão da Chave
         vv_emissao_chave := trim( substr(ev_nro_chave_nfe, 3, 4) );
         --
         vn_fase := 5;
         -- Armazena o valor do cnpj da chave
         vv_cnpj_chave := trim( substr(ev_nro_chave_nfe, 7, 14) );
         --
         vn_fase := 6;
         -- Armazena o valor do modelo de docto da chave
         vv_cod_mod_chave := trim( substr(ev_nro_chave_nfe, 21, 2) );
         --
         vn_fase := 7;
         -- Armazena do valor da série da nota fiscal da chave
         vv_serie_chave := trim( substr(ev_nro_chave_nfe, 23, 3) );
         --
         vn_fase := 8;
         -- Armazena o valor do número da nota fiscal
         vv_nro_nf_chave := trim( substr(ev_nro_chave_nfe, 26, 9) );
         --
         vn_fase := 9;
         -- Armazena a Forma de Emissão
         vv_dm_forma_emiss := trim( substr(ev_nro_chave_nfe, 35, 1) );
         --
         vn_fase := 10;
         -- Armazena o valor do número aleatório
         sn_cNF_nfe := trim( substr(ev_nro_chave_nfe, 36, 8) );
         --
         vn_fase := 11;
         -- Armazena o digito do chave
         sn_dig_verif_chave := to_number( substr(ev_nro_chave_nfe, 44, 1) );
         --
         vn_fase := 12;
         --
         -- Inicia a validação dos dados da chave de acesso com os dados informados da Nota Fiscal
         --
         vn_fase := 13;
         -- Valida a informação do "Código da UF do emitente do Documento Fiscal"
         if en_uf_ibge is not null
            and to_char(en_uf_ibge) <> vv_uf_ibge_chave then
            --
            vn_fase := 13.1;
            --
            begin
               select distinct(substr(cf.cd,1,1))
                 into vn_cd_cfop
                 from item_nota_fiscal it
                    , cfop             cf
                where it.notafiscal_id = pk_csf.fkg_notafiscal_id_pela_chave(ev_nro_chave_nfe)
                  and cf.id            = it.cfop_id;
            exception
               when others then
                  vn_cd_cfop := 0;
            end;
            --
            vn_fase := 13.2;
            --
            if vn_cd_cfop not in (3,7) then -- Para os Grupos de Importação não deverá ser feita a validação
               --
               vn_fase := 13.3;
               --
               gv_mensagem_log := '"Código da UF do emitente" informado na Nota Fiscal ('||EN_UF_IBGE||
                                  ') está diferente do "Código da UF do emitente" da chave de acesso('||vv_uf_ibge_chave||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               --
               sn_qtde_erro := nvl(sn_qtde_erro,0) + 1;
               --
            end if;
            --
         end if;
         --
         vn_fase := 14;
         -- Valida a informação do "Ano e Mês de emissão da NF-e"
         if ed_dt_emiss is not null
            and to_char(ed_dt_emiss, 'YYMM') <> vv_emissao_chave then
            --
            vn_fase := 14.1;
            --
            gv_mensagem_log := '"Ano e Mês de emissão" informado na Nota Fiscal ('||to_char(ed_dt_emiss,'YYMM')||
                               ') está diferente do "Ano e Mês de emissão" da chave de acesso('||vv_emissao_chave||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --
            sn_qtde_erro := nvl(sn_qtde_erro,0) + 1;
            --
         end if;
         --
         vn_fase := 15;
         -- Valida a informação do "CNPJ do emitente"
         if ev_cnpj is not null
            and lpad(ev_cnpj, 14, '0') <> vv_cnpj_chave
            and EN_SERIE not between 890 and 899
            then
            --
            vn_fase := 15.1;
            --
            gv_mensagem_log := '"CNPJ do emitente" informado na Nota Fiscal ('||ev_cnpj||
                               ') está diferente do "CNPJ do emitente" da chave de acesso('||vv_cnpj_chave||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --
            sn_qtde_erro := nvl(sn_qtde_erro,0) + 1;
            --
         end if;
         --
         vn_fase := 16;
         -- Valida a informação do Modelo do Documento Fiscal
         if ev_cod_mod is not null
            and ev_cod_mod <> vv_cod_mod_chave then
            --
            vn_fase := 16.1;
            --
            gv_mensagem_log := '"Modelo do Documento Fiscal" informado na Nota Fiscal ('||ev_cod_mod||
                               ') está diferente do "Modelo do Documento Fiscal" da chave de acesso('||vv_cod_mod_chave||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --
            sn_qtde_erro := nvl(sn_qtde_erro,0) + 1;
            --
         end if;
         --
         vn_fase := 17;
         --
         -- Valida a informação da Série do Documento Fiscal
         if en_serie is not null
            and lpad( en_serie, 3, '0' ) <> vv_serie_chave then
            --
            vn_fase := 17.1;
            --
            gv_mensagem_log := '"Série do Documento Fiscal" informado na Nota Fiscal ('||lpad(en_serie,3,'0')||
                               ') está diferente do "Série do Documento Fiscal" da chave de acesso('||vv_serie_chave||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --
            sn_qtde_erro := nvl(sn_qtde_erro,0) + 1;
            --
         end if;
         --
         vn_fase := 18;
         -- Valida a informação do Número do Documento Fiscal
         if en_nro_nf is not null
            and lpad( en_nro_nf, 9, '0' ) <> vv_nro_nf_chave then
            --
            vn_fase := 18.1;
            --
            gv_mensagem_log := '"Número do Documento Fiscal" informado na Nota Fiscal ('||lpad(en_nro_nf,9,'0')||
                               ') está diferente do "Número do Documento Fiscal" da chave de acesso('||vv_nro_nf_chave||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --
            sn_qtde_erro := nvl(sn_qtde_erro,0) + 1;
            --
         end if;
         --
         vn_fase := 18.2;
         -- valida a forma de emissão e gera erro somente se o nro_chave_nfe foi criado pela Compliance
         if to_char(en_dm_forma_emiss)       <> vv_dm_forma_emiss and
            nvl(en_dm_nro_chave_nfe_orig,0)   = 1                 then
            --
            vn_fase := 18.3;
            --
            gv_mensagem_log := '"Forma de emissão" informado na Nota Fiscal ('||lpad(en_dm_forma_emiss,9,'0')||
                               ') está diferente do "Forma de emissão" da chave de acesso('||vv_dm_forma_emiss||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --
            sn_qtde_erro := nvl(sn_qtde_erro,0) + 1;
            --
         end if;
         --
         vn_fase := 19;
         -- calcula o digito da chave
         vn_dig_verif_chave := pk_csf.fkg_mod_11 ( ev_codigo => substr(ev_nro_chave_nfe, 1, 43) );
         --
         vn_fase := 20;
         -- Verifica se o digito da chave é diferente do digito calculado
         if vn_dig_verif_chave <> nvl(sn_dig_verif_chave, -1) then
            --
            vn_fase := 20.1;
            --
            gv_mensagem_log := 'Dígito verificador da Chave de Acesso calculado ('||vn_dig_verif_chave||
                               ') está diferente do Dígito da chave de acesso('||sn_dig_verif_chave||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --
            sn_qtde_erro := nvl(sn_qtde_erro,0) + 1;
            --
         end if;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_chave_acesso fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END pkb_valida_chave_acesso;
--
-------------------------------------------------------------------
-- Procedimento que faz validações na Nota Fiscal e grava na CSF --
-------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL ( EST_LOG_GENERICO_NF        IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                 , EST_ROW_NOTA_FISCAL        IN OUT NOCOPY  NOTA_FISCAL%ROWTYPE
                                 , EV_COD_MOD                 IN             MOD_FISCAL.COD_MOD%TYPE
                                 , EV_COD_MATRIZ              IN             EMPRESA.COD_MATRIZ%TYPE  DEFAULT NULL
                                 , EV_COD_FILIAL              IN             EMPRESA.COD_FILIAL%TYPE  DEFAULT NULL
                                 , EV_EMPRESA_CPF_CNPJ        IN             VARCHAR2                 DEFAULT NULL -- CPF/CNPJ DA EMPRESA
                                 , EV_COD_PART                IN             PESSOA.COD_PART%TYPE     DEFAULT NULL
                                 , EV_COD_NAT                 IN             NAT_OPER.COD_NAT%TYPE    DEFAULT NULL
                                 , EV_CD_SITDOCTO             IN             SIT_DOCTO.CD%TYPE        DEFAULT NULL
                                 , EV_COD_INFOR               IN             INFOR_COMP_DCTO_FISCAL.COD_INFOR%TYPE  DEFAULT NULL
                                 , EV_SIST_ORIG               IN             SIST_ORIG.SIGLA%TYPE     DEFAULT NULL
                                 , EV_COD_UNID_ORG            IN             UNID_ORG.CD%TYPE         DEFAULT NULL
                                 , EN_MULTORG_ID              IN             MULT_ORG.ID%TYPE
                                 , EN_EMPRESAINTEGRBANCO_ID   IN             EMPRESA_INTEGR_BANCO.ID%TYPE DEFAULT NULL
                                 , EN_LOTEINTWS_ID            IN             LOTE_INT_WS.ID%TYPE DEFAULT 0
                                 ) IS
   --
   vn_fase             number := 0;
   vn_loggenerico_id   log_generico_nf.id%type;
   vn_dm_st_proc       Nota_Fiscal.dm_st_proc%TYPE := null;
   vn_qtde_nf          number := 0;
   vn_qtde_erro_chave  number := null;
   vv_nro_proc         ret_evento_epec.nro_proc%type;
   vv_cod_stat         ret_evento_epec.cod_stat%type;
   vn_lim_emiss_nfe    estado.lim_emiss_nfe%type;
   vv_cnpj             varchar2(14);
   vn_id_encontrado    nota_fiscal.id%type;
   --
BEGIN
   --
   -- INFORMAÇÃO
   -- ============================================================================================================================ --
   -- A validação do nro_chave_nfe é feito pela PKB_INTEGR_NOTA_FISCAL_COMPL e pela PKB_CONSISTEM_NF.pkb_valida_cria_nro_chave_nfe
   -- Não inclua a validação da nro_chave_nfe aqui pq dará problema na integração OPENINTERFACE
   -- ============================================================================================================================ --
   --
   vn_fase := 1;
   --
   -- Monta cabeçalho do Log Genérico
   --
   gv_cabec_log := null;
   --
   if nvl(est_row_Nota_Fiscal.empresa_id,0) <= 0 then
      --
      est_row_Nota_Fiscal.empresa_id := pk_csf.fkg_empresa_id2 ( en_multorg_id       => en_multorg_id
                                                               , ev_cod_matriz       => ev_cod_matriz
                                                               , ev_cod_filial       => ev_cod_filial
                                                               , ev_empresa_cpf_cnpj => ev_empresa_cpf_cnpj );
      --
   end if;
   --
   vn_fase := 1.1;
   --
   if nvl(est_row_Nota_Fiscal.empresa_id,0) > 0 or
      (ev_cod_matriz is not null and ev_cod_filial is not null) then
      --
      vn_fase := 1.2;
      --
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa( en_empresa_id => est_row_Nota_Fiscal.empresa_id );
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 1.3;
   --
   if nvl(est_row_Nota_Fiscal.nro_nf,0) > 0 then
      --
      gv_cabec_log := gv_cabec_log||'Número: '||est_row_Nota_Fiscal.nro_nf;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 1.4;
   --
   if pk_csf.fkg_is_numerico(trim(est_row_Nota_Fiscal.serie))
      then
      --
      est_row_Nota_Fiscal.serie := to_number(nvl(trim(est_row_Nota_Fiscal.serie), '0'));
      --
   end if;
   --
   if est_row_Nota_Fiscal.serie is not null then
      --
      gv_cabec_log := gv_cabec_log||'Série: '||est_row_Nota_Fiscal.serie;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 1.5;
   --
   if trim ( ev_cod_mod ) is not null then
      --
      gv_cabec_log := gv_cabec_log||'Modelo: '||ev_cod_mod;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 1.6;
   --
   if est_row_Nota_Fiscal.dt_emiss is not null then
      --
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(est_row_Nota_Fiscal.dt_emiss, 'dd/mm/yyyy');
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   gv_cabec_log := gv_cabec_log||'Operação: '||pk_csf.fkg_dominio( ev_dominio => 'NOTA_FISCAL.DM_IND_OPER'
                                                                 , ev_vl      => est_row_Nota_Fiscal.dm_ind_oper );
   --
   gv_cabec_log := gv_cabec_log||chr(10);
   --
   gv_cabec_log := gv_cabec_log||'Indicador do Emitente: '||pk_csf.fkg_dominio( ev_dominio => 'NOTA_FISCAL.DM_IND_EMIT'
                                                                              , ev_vl      => est_row_Nota_Fiscal.dm_ind_emit );
   --
   gv_cabec_log := gv_cabec_log||chr(10);
   --
   if nvl(en_loteintws_id,0) > 0 then
      --
      gv_cabec_log := gv_cabec_log || 'Lote WS: ' || en_loteintws_id;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   -- Atribui a empresa para registro no log
   gn_empresa_id := est_row_Nota_Fiscal.empresa_id;
   --
   vn_fase    := 1.7;
   --
   vn_qtde_nf := 0;
   --
   -- Verifica se a Nota Fiscal já existe no sistema
   if nvl(est_row_Nota_Fiscal.id,0) <= 0 then
      --
      vn_fase := 1.8;
      --
      if ev_cod_mod in ('06','21','22','29','28') then
         --
         -- 06-Nota Fiscal/Conta de Energia Elétrica
         -- 21-Nota Fiscal de Serviço de Comunicação
         -- 22-Nota Fiscal de Serviço de Telecomunicação
         -- 28-Nota Fiscal/Conta de Fornecimento de Gás Canalizado
         -- 29-Nota Fiscal/Conta de Fornecimento de Água Canalizada
         --
         vn_fase := 1.9;
         --
         est_row_Nota_Fiscal.id := pk_csf.fkg_busca_notafiscal_id ( en_multorg_id      => en_multorg_id
                                                                  , en_empresa_id      => est_row_Nota_Fiscal.empresa_id
                                                                  , ev_cod_mod         => ev_cod_mod
                                                                  , ev_serie           => est_row_Nota_Fiscal.serie
                                                                  , en_nro_nf          => est_row_Nota_Fiscal.nro_nf
                                                                  , en_dm_ind_oper     => est_row_Nota_Fiscal.dm_ind_oper
                                                                  , en_dm_ind_emit     => est_row_Nota_Fiscal.dm_ind_emit
                                                                  , ev_cod_part        => ev_cod_part
                                                                  , en_dm_arm_nfe_terc => est_row_Nota_Fiscal.dm_arm_nfe_terc
                                                                  , ed_dt_emiss        => est_row_Nota_Fiscal.dt_emiss );
         --
      else
         --
         vn_fase := 1.10;
         --
         est_row_Nota_Fiscal.id := pk_csf.fkg_busca_notafiscal_id ( en_multorg_id      => en_multorg_id
                                                                  , en_empresa_id      => est_row_Nota_Fiscal.empresa_id
                                                                  , ev_cod_mod         => ev_cod_mod
                                                                  , ev_serie           => est_row_Nota_Fiscal.serie
                                                                  , en_nro_nf          => est_row_Nota_Fiscal.nro_nf
                                                                  , en_dm_ind_oper     => est_row_Nota_Fiscal.dm_ind_oper
                                                                  , en_dm_ind_emit     => est_row_Nota_Fiscal.dm_ind_emit
                                                                  , ev_cod_part        => ev_cod_part
                                                                  , en_dm_arm_nfe_terc => est_row_Nota_Fiscal.dm_arm_nfe_terc );
         --
      end if;
      --
   else
      --
      vn_fase := 1.11;
      -- Verifica se existe mais de uma nota para empresa, modelo, série, nro, operação, emitente e participante
      -- Se existir traz o último ID inserido
      begin
         --
         select max(nf.id)
           into vn_id_encontrado
           from Nota_Fiscal     nf
              , Mod_Fiscal      mf
          where nf.empresa_id      = est_row_Nota_Fiscal.empresa_id
            and nf.dm_ind_emit     = est_row_Nota_Fiscal.dm_ind_emit
            and (nf.dm_ind_emit    = 0 or nf.dm_ind_oper = est_row_Nota_Fiscal.dm_ind_oper)
            and nf.serie           = est_row_Nota_Fiscal.serie
            and nf.nro_nf          = est_row_Nota_Fiscal.nro_nf
            and nf.dm_arm_nfe_terc = 0 -- Não é de somente armazenamento
            and mf.id              = nf.modfiscal_id
            and mf.cod_mod         = ev_cod_mod
            and ( nf.dm_ind_emit = 0 or ( nf.dm_ind_emit = 1 and exists ( select 1
                                                                            from Pessoa p
                                                                           where p.cod_part = trim(ev_cod_part)
                                                                             and p.id       = nf.pessoa_id ) ) );
         --
      exception
         when others then
            vn_id_encontrado := 0;
         --
      end;
      -- 
      -- Se os IDs forem iguais indica que a Nota está sendo validada novamente
      -- se forem diferentes indica q foi feito uma nova integração da mesma nota porém com ID diferente (Integração WEBSERVICE)
      if nvl(vn_id_encontrado,0) > 0 and vn_id_encontrado <> est_row_Nota_Fiscal.id then
         --
         vn_fase := 1.12;
         --
         gv_mensagem_log := 'Foi verificado que a nota fiscal a ser integrada já existe na base de dados com o ID: '||est_row_Nota_Fiscal.id||
                            '. A Nota Fiscal em questão NÃO será integrada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => est_row_Nota_Fiscal.id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
         est_row_Nota_Fiscal := null;
         goto sair_integr;
         --
      else
         --
         vn_fase := 1.13;
         --
         vn_fase := 1.14;
         --
         gv_mensagem_log := 'Nota Fiscal já integrada, realizada a validação dos dados.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => informacao
                             , en_referencia_id    => est_row_Nota_Fiscal.id
                             , ev_obj_referencia   => gv_obj_referencia );
         --
      end if;
      --
   end if;
   --
   vn_fase := 1.15;
   --
   -- Se a nota não existe, já atribui o ID
   if nvl(est_row_Nota_Fiscal.id,0) <= 0 then
      --
      vn_fase := 1.16;
      --
      select notafiscal_seq.nextval
        into est_row_Nota_Fiscal.id
        from dual;
      --
      vn_fase := 1.17;
      -- Se a nota fiscal já existe com o ID que acaba de ser recuperado, é possível que a Sequence no Banco de Dados esteja incorreta.
      if pk_csf.fkg_existe_nf ( en_nota_fiscal => est_row_Nota_Fiscal.id ) = true then
         --
         vn_fase := 1.18;
         --
         gv_mensagem_log := 'Foi verificado que a nota fiscal a ser integrada não foi integrada através dos campos que fazem parte da Chave Única da '||
                            'tabela NOTA_FISCAL, com isso recuperamos um novo Indentificador para Nota Fiscal através da Sequence do Banco de Dados (sequence='||
                            est_row_Nota_Fiscal.id||'). Porém, esse novo Indentificador está sendo utilizado em outra nota fiscal já integrada, e que não '||
                            'possui a mesma Chave Única. Verificar com Administrador do Banco o processo de SEQUENCE para a tabela de NOTA_FISCAL. É possível '||
                            'que a Sequence esteja divergente dos Registros da Tabela de Notas Fiscais. A Nota Fiscal em questão NÃO será integrada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => est_row_Nota_Fiscal.id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
         est_row_Nota_Fiscal := null;
         goto sair_integr;
         --
      end if;
      --
   end if;
   --
   vn_fase := 1.19;
   --| Seta o ID de referencia da Nota Fiscal
   pkb_seta_referencia_id ( en_id => est_row_Nota_Fiscal.id );
   --
   vn_fase := 1.20;
   -- remove os logs anteriores
   delete from log_generico_nf
    where referencia_id = gn_referencia_id
      and obj_referencia = gv_obj_referencia;
   --
-------------------------------------------------------------------------------------------------------
   --
   vn_fase := 1.21;
   -- Valida se a empresa esta ativa
   if pk_csf.fkg_empresa_id_situacao ( en_empresa_id => est_row_Nota_Fiscal.empresa_id ) = 0 then
      --
      vn_fase := 1.22;
      --
      gv_mensagem_log := '"Empresa" ('||pk_csf.fkg_cod_nome_empresa_id(en_empresa_id => est_row_nota_fiscal.empresa_id)||') está inativa no sistema.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      --
   end if;
   --
   --
   vn_fase := 1.23;
   -- Valida se os dados do certificado estão ok
   if est_row_Nota_Fiscal.dm_ind_emit = 0
      and ev_cod_mod in ('55', '65')
      and pk_csf.fkg_empresa_id_certificado_ok ( en_empresa_id => est_row_Nota_Fiscal.empresa_id ) = false
      and est_row_Nota_Fiscal.dm_st_proc = 0
      then
      --
      vn_fase := 1.24;
      --
      gv_mensagem_log := '"Empresa" ('||est_row_Nota_Fiscal.empresa_id||') está com os dados de certificado digital inválidos.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 1.25;
   -- Validar data de vencimento do certificado da empresa
   if est_row_Nota_Fiscal.dm_ind_emit = 0 -- 0-emissão própria, 1-terceiro
      and ev_cod_mod in ('55', '65') -- modelos fiscais de nota fiscal eletrônica
      and pk_csf.fkg_empr_dt_venc_cert_ok ( en_empresa_id => est_row_nota_fiscal.empresa_id ) = false
      and est_row_Nota_Fiscal.dm_st_proc = 0
      then
      --
      vn_fase := 1.26;
      --
      gv_mensagem_log := '"Empresa" ('||pk_csf.fkg_codpart_empresaid(en_empresa_id => est_row_nota_fiscal.empresa_id)||' - '||
                         pk_csf.fkg_nome_empresa(en_empresa_id => est_row_nota_fiscal.empresa_id)||'), está com data de vencimento do certificado digital '||
                         'vencida ('||pk_csf.fkg_empr_dt_venc_cert(en_empresa_id => est_row_nota_fiscal.empresa_id)||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
-------------------------------------------------------------------------------------------------------
   --| Valida a informação da empresa
   vn_fase := 2;
   --
   -- Valida se a empresa é valida
   if pk_csf.fkg_empresa_id_valido ( en_empresa_id => est_row_Nota_Fiscal.empresa_id ) = false then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Empresa" ('||est_row_Nota_Fiscal.empresa_id||') está incorreta.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
-------------------------------------------------------------------------------------------------------

   vn_fase := 2.2;
   --
   if nvl(est_row_Nota_Fiscal.nro_nf,0) <= 0 then
      --
      vn_fase := 2.3;
      --
      gv_mensagem_log := '"Número da Nota Fiscal" ('||nvl(est_row_Nota_Fiscal.nro_nf,0)||') não pode ser zero ou negativo.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      if length(trim(est_row_Nota_Fiscal.nro_nf)) > 9 then
         --
         vn_fase := 2.4;
         --
         gv_mensagem_log := '"Número da Nota Fiscal" ('||nvl(est_row_Nota_Fiscal.nro_nf,0)||') não pode ter mais do que 9 dígitos.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --  	  
   end if;
   --
-------------------------------------------------------------------------------------------------------
   --
   vn_fase := 3;

   vn_dm_st_proc := pk_csf.fkg_st_proc_nf ( en_notafiscal_id => est_row_Nota_Fiscal.id );

   vn_fase := 3.1;

   -- Verifica se a nota está inutilizada
   if pk_csf.fkg_nf_inutiliza ( en_empresa_id  => est_row_Nota_Fiscal.empresa_id
                              , ev_cod_mod     => ev_cod_mod
                              , en_serie       => est_row_Nota_Fiscal.serie
                              , en_nro_nf      => est_row_Nota_Fiscal.nro_nf
                              ) = 1
      and est_row_Nota_Fiscal.dm_ind_emit = 0
      and ev_cod_mod in ('55', '65')
      then
      --
      vn_fase := 3.2;
      --
      gv_mensagem_log := 'Nota Fiscal está inutilizada no sistema.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      vn_fase := 3.3;
      --
      update inutiliza_nota_fiscal inf set dm_integr_nf = 0
       where inf.empresa_id = est_row_Nota_Fiscal.empresa_id
         and inf.serie      = est_row_Nota_Fiscal.serie
         and est_row_nota_fiscal.nro_nf between inf.nro_ini and inf.nro_fim;
      --
      commit;
      --
      -- As rotinas que utilizarem esse processo deverão verificar no seu retorno se a variável possue informações.
      -- Essa anulação foi feita devido a pk_integr_nfe, pois as notas estão sendo recuperadas novamente, e gerando mais registros filhos da nota.
      -- Os itens e os outros dados, passavam a ser incluídos a mais cada vez que a nota passava por esse processo.
      est_row_Nota_Fiscal := null;
      goto sair_integr;
      --
   elsif vn_dm_st_proc in ( 1, 2, 3, 4, 6, 7, 8, 14, 17, 19, 21 ) and est_row_Nota_Fiscal.dm_ind_emit = 0 and ev_cod_mod in ('55', '65') then
      -- se dm_st_proc for: 1-Não Processada. Aguardando Processamento, 2-Processada. Aguardando Envio, 3-Enviada ao SEFAZ. Aguardando Retorno,
      -- 4-Autorizada, 6-Denegada, 7-Cancelada, 8-Inutilizada, 14-Sefaz em contingência, 17-Aguardando consulta na Sefaz,
      -- 19-Processada e 21-Aguardando Liberacao
      vn_fase := 3.4;
      --
      gv_dominio := null;
      --
      gv_dominio := pk_csf.fkg_dominio ( ev_dominio   => 'NOTA_FISCAL.DM_ST_PROC'
                                       , ev_vl        => vn_dm_st_proc );
      --
      gv_mensagem_log := 'Nota Fiscal está com a situação '||gv_dominio||' não pode ser integrada novamente.';
      --
      vn_loggenerico_id := null;
      --
      /*
      -- Comentado o registro do Log, para a mensagem não seja exibida no retorno de dados seja WebService ou TXT
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      */
      --
      vn_fase := 3.5;
      --
      -- As rotinas que utilizarem esse processo deverão verificar no seu retorno se a variável possue informações.
      -- Essa anulação foi feita devido a pk_integr_nfe, pois as notas estão sendo recuperadas novamente, e gerando mais registros filhos da nota.
      -- Os itens e os outros dados, passavam a ser incluídos a mais cada vez que a nota passava por esse processo.
      est_row_Nota_Fiscal := null;
      goto sair_integr;
      --
   else
      --
      vn_fase := 3.6;
      --
      -- Se o Tipo de Integração é 1 (valida e insere)
      if nvl(gn_tipo_integr,0) = 1 then
         --
         pkb_excluir_dados_nf ( en_notafiscal_id => est_row_Nota_Fiscal.id );
         --
      end if;
      --
   end if;
-------------------------------------------------------------------------------------------------------
   --| Valida informação do participante
   --
   vn_fase := 4;
   --
   if trim ( ev_cod_part ) is not null and
    ( trim ( ev_cod_part ) <> trim(EV_EMPRESA_CPF_CNPJ) ) -- Verifica se ainda é diferente do CNPJ da empresa
      then
      --
      vn_fase := 4.1;
      -- Pessoa_id do PARTICIPANTE DA NOTA (COD_PART)
      est_row_Nota_Fiscal.pessoa_id := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id => en_multorg_id
                                                                     , ev_cod_part   => ev_cod_part );
      --
   end if;
   --
   vn_fase := 4.2;
   --
   -- Valida a informação da pessoa
   if nvl(est_row_Nota_Fiscal.pessoa_id,0) > 0 then
      --
      vn_fase := 4.3;
      --
      if pk_csf.fkg_Pessoa_id_valido ( en_pessoa_id => est_row_Nota_Fiscal.pessoa_id ) = false then
         --
         vn_fase := 4.4;
         --
         gv_mensagem_log := '"Código do participante da nota fiscal" ('|| ev_cod_part ||') está incorreto.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 5;
   -- Se for NOta Fiscal de Emissão de Terceiros, obrigar a informação da PESSOA_ID
   if nvl(est_row_Nota_Fiscal.pessoa_id,0) <= 0
      and est_row_Nota_Fiscal.dm_ind_emit = 1 -- Terceiros
      and est_row_nota_fiscal.dm_arm_nfe_terc = 0 -- Não é de armazenamento Fiscal
      then
      --
      vn_fase := 5.1;
      --
      gv_mensagem_log := 'Favor informar o Participante da Nota Fiscal (Cliente, Fornecedor, Transportadora, etc.).';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
-------------------------------------------------------------------------------------------------------
   --| Valida informação da situação do documento

   vn_fase := 6;
   --
   if est_row_Nota_Fiscal.dm_st_proc = 8 then -- Inutilizada
      --
      est_row_Nota_Fiscal.sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => '05' ); -- NF-e ou CT-e : Numeração inutilizada
      --
   elsif est_row_Nota_Fiscal.dm_st_proc = 7 then -- Cancelada
         --
         est_row_Nota_Fiscal.sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => '02' ); -- Documento cancelado
         --
   elsif est_row_Nota_Fiscal.dm_st_proc = 6 then -- Denegada
         --
         est_row_Nota_Fiscal.sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => '04' ); -- NF-e ou CT-e denegado
         --
   else
      --
      if est_row_Nota_Fiscal.dm_fin_nfe = 2 then -- NF-e complementar
         --
         if ev_cd_sitdocto in ('06','07') then -- 06-Documento Fiscal Complementar, 07-Documento Fiscal Complementar extemporâneo.
            --
            est_row_Nota_Fiscal.sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => ev_cd_sitdocto );
            --
         else
            --
            est_row_Nota_Fiscal.sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => '06' ); -- Documento Fiscal Complementar
            --
         end if;
         --
      else
         --
         if (ev_cd_sitdocto in ('00','08') or (ev_cd_sitdocto in ('01') and vn_dm_st_proc = 10 )) then -- 00-Documento regular, 08-Documento Fiscal emitido com base em Regime Especial ou Norma Específica
            --
            est_row_Nota_Fiscal.sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => ev_cd_sitdocto );
            --
         else
            --
            est_row_Nota_Fiscal.sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => '00' ); -- Documento regular
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 6.1;
   -- valida a informação da situação do documento fiscal
   if nvl(est_row_Nota_Fiscal.sitdocto_id,0) <= 0 then
      --
      vn_fase := 6.2;
      --
      gv_mensagem_log := '"Situação do Documento Fiscal" ('||ev_cd_sitdocto||') está incorreta.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => '00' );
      --
   end if;
   --
   vn_fase := 6.3;
   --
   -- Valida se indicador da forma de pagamento está correto
   if est_row_Nota_Fiscal.dm_ind_Pag not in (0, 1, 2, 9) then
      --
      vn_fase := 6.4;
      --
      gv_mensagem_log := '"Indicador da forma de pagamento" ('||est_row_Nota_Fiscal.dm_ind_Pag||') está incorreto.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.dm_ind_Pag := 0;
      --
   end if;

-------------------------------------------------------------------------------------------------------
   --| Valida informação do campo natoper_id
   --
   vn_fase := 7;
   --
   -- Se informou valor no ev_cod_nat valida a natureza da operação
   if trim ( ev_cod_nat ) is not null then
      --
      vn_fase := 7.1;
      --
      pk_csf.pkb_cria_nat_oper( ev_cod_nat    => ev_cod_nat
                              , ev_descr_nat  => trim(est_row_Nota_Fiscal.nat_Oper)
                              , en_multorg_id => en_multorg_id );
      --
      vn_fase := 7.2;
      --
      est_row_Nota_Fiscal.natoper_id := pk_csf.fkg_natoper_id_cod_nat ( ev_cod_nat    => ev_cod_nat
                                                                      , en_multorg_id => en_multorg_id );
      --
   end if;
   --
   vn_fase := 7.3;
   --
   if trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal.nat_Oper, 0, 1, 2, 1, 1 ) ) is null then
      --
      vn_fase := 7.4;
      --
      gv_mensagem_log := '"Descrição da Natureza da Operação" não foi informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
-------------------------------------------------------------------------------------------------------
   --| Valida informação do campo modfical_id

   vn_fase := 8;
   --
   est_row_Nota_Fiscal.modfiscal_id   := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => trim ( ev_cod_mod ) );
   --
   vn_fase := 8.1;
   --
   -- Valida a informação do modelo fiscal
   if nvl(est_row_Nota_Fiscal.modfiscal_id,0) <= 0 then
      --
      vn_fase := 8.2;
      --
      gv_mensagem_log := '"Modelo do documento fiscal" ('||ev_cod_mod||') está incorreto.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.modfiscal_id   := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => '55' );
      --
   end if;
-------------------------------------------------------------------------------------------------------
   --| Valida informação do campo dm_ind_emit
   --
   vn_fase := 9;
   --
   -- Valida se o Indicador da Emissão está correto
   if est_row_Nota_Fiscal.dm_ind_emit not in (0, 1) then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := '"Indicador do emitente da Nota Fiscal" ('||est_row_Nota_Fiscal.dm_ind_emit||') está incorreto.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.dm_ind_emit := 0;
      --
   end if;

-------------------------------------------------------------------------------------------------------
   --| Valida informação do campo dm_ind_oper

   vn_fase := 10;

   -- Valida se o indicador da operação está correto
   if est_row_Nota_Fiscal.dm_ind_oper not in (0, 1) then
      --
      vn_fase := 10.1;
      --
      gv_mensagem_log := '"Indicador do tipo de operação da Nota Fiscal" ('||est_row_Nota_Fiscal.dm_ind_oper||') está incorreto.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.dm_ind_oper := 0;
      --
   end if;
   --
   vn_fase := 10.2;
   --
   -- Valida se o tipo da nota é "Saída" não pode ser emitida por terceiros
   if est_row_Nota_Fiscal.dm_ind_oper = 1 and est_row_Nota_Fiscal.dm_ind_emit = 1 then
      --
      vn_fase := 10.3;
      --
      gv_mensagem_log := 'Nota Fiscal é do tipo saída e registrada como emitida por "terceiros".';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

-------------------------------------------------------------------------------------------------------
   --| Valida a informação do campo dt_emiss
   --
   vn_fase := 11;
   --
   if est_row_Nota_Fiscal.dt_emiss is null then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := '"Data de emissão da Nota Fiscal" deve ser informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.dt_emiss := sysdate;
      --
   end if;
   --
   if to_char((est_row_Nota_Fiscal.dt_emiss), 'hh24:mi:ss') = '00:00:00' then
      --
      est_row_Nota_Fiscal.dt_emiss := to_date(to_char(est_row_Nota_Fiscal.dt_emiss, 'dd/mm/rrrr') || ' ' || to_char(sysdate, 'hh24:mi:ss'), 'dd/mm/rrrr hh24:mi:ss');
      --
   end if;
   --
   vn_fase := 11.2;
   --
   -- Valida a data de emissão, verif. se não é maior que a data atual
   if trunc(est_row_Nota_Fiscal.dt_emiss) > sysdate then
      --
      vn_fase := 11.3;
      --
      gv_mensagem_log := 'Data de emissão('||to_char(est_row_Nota_Fiscal.dt_emiss,'dd/mm/rrrr hh24:mi')||') está maior que a data atual.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11.4;
   -- Valida a data de entrada e saida é menor que a data de emissão em notas de emissão própria e operação de saída
   if est_row_Nota_Fiscal.dm_ind_emit = 0
      and est_row_Nota_Fiscal.dm_ind_oper = 1
      and est_row_Nota_Fiscal.dt_sai_ent is not null
      and est_row_Nota_Fiscal.dt_sai_ent < est_row_Nota_Fiscal.dt_emiss
      then
      --
      vn_fase := 11.5;
      --
      est_row_Nota_Fiscal.dt_sai_ent := est_row_Nota_Fiscal.dt_emiss;
      --
   end if;
   --
   vn_fase := 11.6;
   --
   if est_row_Nota_Fiscal.dm_ind_emit = 0 and
      est_row_Nota_Fiscal.dm_ind_oper = 0 and
      est_row_Nota_Fiscal.dt_sai_ent is not null then
      --
      vn_fase := 11.7;
      --
      if to_date((to_char(est_row_Nota_Fiscal.dt_sai_ent, 'DD/MM/RRRR')|| ' '||est_row_Nota_Fiscal.hora_sai_ent),'dd/mm/rrrr hh24:mi:ss') < est_row_Nota_Fiscal.dt_emiss then
         --
         vn_fase := 11.8;
         est_row_Nota_Fiscal.dt_sai_ent := est_row_Nota_Fiscal.dt_emiss;
         --
      else
         --
         vn_fase := 11.9;
         est_row_Nota_Fiscal.dt_sai_ent := to_date((to_char(est_row_Nota_Fiscal.dt_sai_ent, 'DD/MM/RRRR')|| ' '||est_row_Nota_Fiscal.hora_sai_ent),'dd/mm/rrrr hh24:mi:ss');
         --
      end if;
      --
   end if;
   --
   vn_fase := 11.10;
   --
   vn_lim_emiss_nfe := pk_csf.fkg_estado_lim_emiss_nfe ( en_empresa_id => est_row_Nota_Fiscal.empresa_id );
   --
   vn_fase := 11.11;
   --
   if est_row_Nota_Fiscal.dm_ind_emit = 0 -- 0-emissão própria
      and (trunc(sysdate)-trunc(est_row_Nota_Fiscal.dt_emiss)) > nvl(vn_lim_emiss_nfe,0)
      and est_row_Nota_Fiscal.dm_st_proc = 0 -- 0-não validada
      and nvl(est_row_Nota_Fiscal.dm_legado,0) = 0 -- 0-não é legado
      then
      --
      vn_fase := 11.12;
      --
      gv_mensagem_log := 'Data de emissão fora do limite estabelecido ('|| vn_lim_emiss_nfe ||' dias).';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
-------------------------------------------------------------------------------------------------------
   --| Valida informação da serie e número da Nota Fiscal
   --
   vn_fase := 12;
   --
   -- Valida se a séria não foi informada
   if trim( est_row_Nota_Fiscal.serie ) is null then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := 'Série da Nota Fiscal deve ser informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.serie := '0';
      --
   end if;
   --
   vn_fase := 12.4;
   -- valida se a série da NFe é numérica (Teste anti-burro)
   if ev_cod_mod in ('55', '65') and pk_csf.fkg_is_numerico ( ev_valor => est_row_Nota_Fiscal.serie ) = false then
      --
      vn_fase := 12.5;
      --
      gv_mensagem_log := 'Série da NF-e informada ('||est_row_Nota_Fiscal.serie||') deve ser do tipo numérica.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12.6;
   --
   -- Valida a se o nro_nf foi informado
   if nvl(est_row_Nota_Fiscal.nro_nf,0) <= 0 and ev_cod_mod <> '99' then
      --
      vn_fase := 12.7;
      --
      gv_mensagem_log := 'Número da Nota Fiscal deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
-------------------------------------------------------------------------------------------------------
   --| Valida informações do comércio exterior
   --
   vn_fase := 13;
   --
   if est_row_Nota_Fiscal.dm_ind_emit = 0 then -- Emissão Propria
      --
      -- Valida se as informações de comercio exterior foram informadas
      if trim( est_row_Nota_Fiscal.UF_Embarq ) is not null and trim( est_row_Nota_Fiscal.Local_Embarq ) is null then
         --
         vn_fase := 13.1;
         --
         gv_mensagem_log := 'Informado a "Sigla da UF onde ocorrerá o Embarque dos produtos", mas não informado o "Local onde ocorrerá o Embarque dos produtos".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      elsif trim( est_row_Nota_Fiscal.UF_Embarq ) is null and trim( est_row_Nota_Fiscal.Local_Embarq ) is not null then
         --
         vn_fase := 13.2;
         --
         gv_mensagem_log := 'Informado o "Local onde ocorrerá o Embarque dos produtos", mas não informado o "Sigla da UF onde ocorrerá o Embarque dos produtos".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 13.3;
      --
      --Veririca se a UF do local de embarque é valida
      if trim ( est_row_Nota_Fiscal.UF_Embarq ) is not null
         and pk_csf.fkg_uf_valida ( ev_sigla_estado => est_row_Nota_Fiscal.UF_Embarq ) = false then
         --
         gv_mensagem_log := 'Informado o "Sigla da UF onde ocorrerá o Embarque dos produtos" ('||est_row_Nota_Fiscal.UF_Embarq||') não é valida!';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 13.4;
      --Veririca se a UF do local de embarque é valida
      if trim ( est_row_Nota_Fiscal.UF_Embarq ) is not null
         and est_row_Nota_Fiscal.UF_Embarq = 'EX' then
         --

         --
         gv_mensagem_log := 'Informado o "Sigla da UF onde ocorrerá o Embarque dos produtos" ('||est_row_Nota_Fiscal.UF_Embarq||') não é valida!';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;

-------------------------------------------------------------------------------------------------------
   --| Valida informação do campo dm_st_proc

   vn_fase := 14;
   --
   -- Valida se a situação do processo está correta
   if est_row_Nota_Fiscal.dm_st_proc not in (0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 99) then
      --
      vn_fase := 14.1;
      --
      gv_mensagem_log := '"Situação do processo da Nota Fiscal" ('||est_row_Nota_Fiscal.dm_st_proc||') está incorreta.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.dm_st_proc := 10;
      --
   end if;
   --
   vn_fase := 14.2;
   --
   -- Valida informação do campo dt_st_proc
   if est_row_Nota_Fiscal.dt_st_proc is null then
      --
      est_row_Nota_Fiscal.dt_st_proc := sysdate;
      --
   end if;
   --
   vn_fase := 14.3;
   --
   if nvl(est_row_Nota_Fiscal.id,0) > 0 then
      --
      vv_nro_proc := pk_csf.fkg_ret_evento_epec_proc_id ( en_notafiscal_id => est_row_Nota_Fiscal.id );
      vv_cod_stat := pk_csf.fkg_ret_evento_epec_stat_id ( en_notafiscal_id => est_row_Nota_Fiscal.id );
      --
      vn_fase := 14.4;
      --
      if vv_nro_proc is not null
         or vv_cod_stat = '485' -- Rejeicao: Duplicidade de numeracao do EPEC (Modelo, CNPJ, Serie e Numero)
         then
         --
         vn_fase := 14.5;
         --
         est_row_Nota_Fiscal.dm_forma_emiss := 4;
         --
         gv_mensagem_log := '"Forma de Emissão da Nota Fiscal" não pode ser alterada, pois foi emitida em EPEC.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => informacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         --
      end if;
      --
   end if;
   --
   vn_fase := 14.6;
   --
   if est_row_Nota_Fiscal.dm_ind_emit = 0 and
      pk_csf.fkg_is_numerico ( ev_valor => est_row_Nota_Fiscal.serie ) = true then
      --
      if to_number(est_row_Nota_Fiscal.serie) >= 900 then
         --
         est_row_Nota_Fiscal.dm_forma_emiss := 3;   
	 --
      end if;
      --
   end if;
   --
   --| Valida informação do campo dm_forma_emiss
   --
   vn_fase := 15;
   -- Busca a forma de emissão habilitada para a Empresa
   if nvl(est_row_Nota_Fiscal.dm_forma_emiss,0) <= 0 then
      --
      est_row_Nota_Fiscal.dm_forma_emiss := pk_csf.fkg_forma_emiss_empresa ( en_empresa_id => est_row_Nota_Fiscal.empresa_id );
      --
   end if;
   --
   vn_fase := 15.1;
   -- Valida a Forma de Emissão da Nota Fiscal
   if est_row_Nota_Fiscal.dm_forma_emiss not in (1, 2, 3, 4, 5, 6, 7, 8, 9) then
      --
      vn_fase := 15.2;
      --
      gv_mensagem_log := '"Forma de Emissão da Nota Fiscal" ('||est_row_Nota_Fiscal.dm_forma_emiss||') está incorreta.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.dm_forma_emiss := 1;
      --
   end if;
   --
   vn_fase := 15.3;
   --
   if est_row_Nota_Fiscal.dm_ind_emit = 0
      and pk_csf.fkg_is_numerico ( ev_valor => est_row_Nota_Fiscal.serie ) = true
      then
      --
      vn_fase := 15.4;
      -- Valida série para emissão de NFe normal
      if to_number(est_row_Nota_Fiscal.serie) >= 890 and est_row_Nota_Fiscal.dm_forma_emiss in (1, 2, 4, 5, 6, 7, 8, 9) then
         --
         vn_fase := 15.5;
         --
         gv_mensagem_log := 'Série ('||est_row_Nota_Fiscal.serie||') da NFe não permitida para emissão em modo '||
                            pk_csf.fkg_dominio( ev_dominio => 'NOTA_FISCAL.DM_FORMA_EMISS'
                                              , ev_vl      => est_row_Nota_Fiscal.dm_forma_emiss )||'.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 15.6;
      -- Valida série para emissão de NFe em modo SCAN
      if to_number(est_row_Nota_Fiscal.serie) < 900 and est_row_Nota_Fiscal.dm_forma_emiss in (3) then
         --
         vn_fase := 15.7;
         --
         gv_mensagem_log := 'Série ('||est_row_Nota_Fiscal.serie||') da NFe não permitida para emissão em modo SCAN.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 15.8;
      --
      if est_row_Nota_Fiscal.dm_proc_emiss = 2 -- Emissão de NF-e avulsa, pelo contribuinte com seu certificado digital, através do site do Fisco
         and (to_number(est_row_Nota_Fiscal.serie) < 890 and to_number(est_row_Nota_Fiscal.serie) > 899)
         then
         --
         vn_fase := 15.9;
         --
         gv_mensagem_log := 'Série ('||est_row_Nota_Fiscal.serie||
                            ') da NFe não permitida para Emissão de NF-e avulsa, pelo contribuinte com seu certificado digital, através do site do Fisco.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
-------------------------------------------------------------------------------------------------------
   --
   vn_fase := 16;
   --
   if ev_cod_mod in ('55', '65') then -- Somente NFe
      --
      if est_row_Nota_Fiscal.dm_ind_emit = 0 then -- Emissão própria sempre imprime
         est_row_Nota_Fiscal.dm_impressa := 0; -- Não impressa
      else
         if est_row_Nota_Fiscal.dm_arm_nfe_terc = 1 then -- Armazena NFe/XML de Terceiro sempre imprimi
            est_row_Nota_Fiscal.dm_impressa := 0; -- Não impressa
         else
            est_row_Nota_Fiscal.dm_impressa := 1; -- Impressa
         end if;
      end if;
      --
   else
      est_row_Nota_Fiscal.dm_impressa := 1; -- Impressa
   end if;
   --| Valida informação do campo dm_impressa
   --
   vn_fase := 16.1;
   --
   -- Valida informação do campo
   if est_row_Nota_Fiscal.dm_impressa not in (0, 1, 2, 3) then
      --
      vn_fase := 16.2;
      --
      gv_mensagem_log := '"Situação da Impressão da Nota Fiscal" ('||est_row_Nota_Fiscal.dm_impressa||') está incorreta.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;

-------------------------------------------------------------------------------------------------------
   --| Valida informação do campo dm_tp_impr

   vn_fase := 17;
   --
   -- Função retorna o tipo de ambiente parâmetrizado para a empresa
   est_row_Nota_Fiscal.dm_tp_impr := pk_csf.fkg_tp_impr_empresa ( en_empresa_id => est_row_Nota_Fiscal.empresa_id );
   --
   vn_fase := 17.1;
   --
   -- Formato de Impressão do DANFE
   if est_row_Nota_Fiscal.dm_tp_impr not in (0, 1, 2, 3, 4 , 5) then
      --
      vn_fase := 17.2;
      --
      gv_mensagem_log := '"Formato de Impressão do DANFE" ('||est_row_Nota_Fiscal.dm_tp_impr||') está incorreto.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.dm_tp_impr := 1;
      --
   end if;

-------------------------------------------------------------------------------------------------------
   --| Valida informação do campo dm_tp_amb
   --
   vn_fase := 18;
   --
   -- Função retorna o tipo de ambiente parâmetrizado para a empresa
   est_row_Nota_Fiscal.dm_tp_amb := pk_csf.fkg_tp_amb_empresa ( en_empresa_id => est_row_Nota_Fiscal.empresa_id );
   --
   vn_fase := 18.1;
   --
   --| Valida Identificação do Ambiente
   if est_row_Nota_Fiscal.dm_tp_amb not in (1, 2) then
      --
      vn_fase := 18.2;
      --
      gv_mensagem_log := '"Identificação do Ambiente" ('||est_row_Nota_Fiscal.dm_tp_amb||') está incorreto.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.dm_tp_amb := 2;
      --
   end if;

-------------------------------------------------------------------------------------------------------
   --| Valida informação do campo dm_fin_nfe

   vn_fase := 19;

   -- Valida a Finalidade de emissão da Nota Fiscal
   if nvl(est_row_Nota_Fiscal.dm_fin_nfe,-1) not in (1, 2, 3, 4) then
      --
      vn_fase := 19.1;
      --
      gv_mensagem_log := '"Finalidade de emissão da Nota Fiscal" ('||est_row_Nota_Fiscal.dm_fin_nfe||') está incorreta.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.dm_fin_nfe := 1;
      --
   end if;
   --
   --| Valida informação do campo dm_proc_emiss
   vn_fase := 20;
   est_row_Nota_Fiscal.dm_proc_emiss := 0;
   --
   --| Valida informação da versão do processo
   vn_fase := 21;
   -- informa a versão do compliance
   est_row_Nota_Fiscal.vers_Proc := pk_csf.fkg_ultima_versao_sistema;
   --
   --| Valida informação da autorização do SEFAZ
   vn_fase := 22;
   -- Se não tem valor ou inconsistente, atribui que não foi aprovada
   if est_row_Nota_Fiscal.dm_aut_sefaz not in (0, 1) or nvl(est_row_Nota_Fiscal.dm_aut_sefaz,0) = 0 then
      est_row_Nota_Fiscal.dm_aut_sefaz := 0;
   end if;
   --
   --| Valida informação do código do IBGE da cidade
   vn_fase := 23;
   -- Valida o código IBGE da Cidade
   if pk_csf.fkg_ibge_cidade ( ev_ibge_cidade => est_row_Nota_Fiscal.cidade_ibge_emit ) = false
      and est_row_Nota_Fiscal.dm_ind_emit = 0 -- Somente emissão própria
      then
      --
      vn_fase := 23.1;
      --
      est_row_Nota_Fiscal.cidade_ibge_emit := 1111111;
      --
      gv_mensagem_log := '"Código do Município de Ocorrência do Fato Gerador" ('||est_row_Nota_Fiscal.cidade_ibge_emit||') não informado ou inválido!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
--   elsif est_row_Nota_Fiscal.cidade_ibge_emit is null
   elsif nvl(est_row_Nota_Fiscal.cidade_ibge_emit,0) <= 0
         then
         --
         vn_fase := 23.2;
         --
         est_row_Nota_Fiscal.cidade_ibge_emit := 1111111;
         --
   end if;
   --
   --| Valida informação do código do IBGE do Estado
   vn_fase := 24;
   -- Valida o código IBGE do UF
   if pk_csf.fkg_ibge_uf_valida ( ev_ibge_estado => est_row_Nota_Fiscal.uf_ibge_emit ) = false
      and est_row_Nota_Fiscal.dm_ind_emit = 0 -- emissão própria
      then
      --
      vn_fase := 24.1;
      --
      est_row_Nota_Fiscal.uf_ibge_emit := 11;
      --
      gv_mensagem_log := '"Código da UF do emitente do Documento Fiscal" ('||est_row_Nota_Fiscal.uf_ibge_emit||') não informado ou inválido!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
--   elsif est_row_Nota_Fiscal.uf_ibge_emit is null
   elsif nvl(est_row_Nota_Fiscal.uf_ibge_emit,0) <= 0
         then
         --
         vn_fase := 24.2;
         --
         est_row_Nota_Fiscal.uf_ibge_emit := 11;
         --
   end if;
   --
   vn_fase := 24.3;
   --
   if est_row_Nota_Fiscal.dm_ind_emit = 0 -- Somente emissão própria
      and ev_cod_mod in ('55', '65')
      and pk_csf.fkg_uf_ibge_igual_empresa ( en_empresa_id   => est_row_Nota_Fiscal.empresa_id
                                           , ev_ibge_estado  => est_row_Nota_Fiscal.uf_ibge_emit ) = false then
      --
      vn_fase := 24.4;
      --
      gv_mensagem_log := 'Erro de integração: "Código da UF do emitente do Documento Fiscal" ('||est_row_Nota_Fiscal.uf_ibge_emit||
                         ') não é a mesma da empresa/unidade organizacional.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   -- Registra a data da entrada da Nota Fiscal no Sistema
   vn_fase := 25;
   --
   if est_row_Nota_Fiscal.dt_hr_ent_sist is null then
      --
      est_row_Nota_Fiscal.dt_hr_ent_sist := sysdate;
      --
   end if;
   --
   vn_fase := 26;
   --
   -- Valida o campo dm_st_email
   if est_row_Nota_Fiscal.dm_st_email not in (0, 1, 2, 3, 4) then
      --
      vn_fase := 27;
      --
      gv_mensagem_log := '"Situação de envio de e-mail da Nota Fiscal" ('||est_row_Nota_Fiscal.dm_st_email||') está inválida!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
      est_row_Nota_Fiscal.dm_st_email := 0;
      --
   else
      --
      vn_fase := 27.2;
      --
      est_row_Nota_Fiscal.dm_st_email := 0;
      --
   end if;
   --
   vn_fase := 28;
   --
   if nvl(est_row_Nota_Fiscal.dm_tp_assinante,0) not in (1, 2, 3, 4, 5, 6) then
      est_row_Nota_Fiscal.dm_tp_assinante := 1;
   end if;
   --
   vn_fase := 29;
   --
   est_row_Nota_Fiscal.inforcompdctofiscal_id := pk_csf.fkg_Infor_Comp_Dcto_Fiscal_id ( en_multorg_id => en_multorg_id
                                                                                      , en_cod_infor  => ev_cod_infor );
   --
   if nvl(est_row_Nota_Fiscal.inforcompdctofiscal_id,0) <= 0 and trim(ev_cod_infor) is not null then
      --
      vn_fase := 29.1;
      --
      gv_mensagem_log := '"Cód. da Infor. Documento Fiscal" ('||ev_cod_infor||') está inválido!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 30;
   -- Sistema de Origem
   est_row_Nota_Fiscal.sistorig_id := pk_csf.fkg_sist_orig_id ( en_multorg_id => en_multorg_id
                                                              , ev_sigla      => trim(ev_sist_orig) );
   --
   vn_fase := 30.1;
   -- verifica se o sistema de origem não foi encontrado
   if nvl(est_row_Nota_Fiscal.sistorig_id,0) <= 0 and trim(ev_sist_orig) is not null then
      --
      vn_fase := 30.2;
      --
      gv_mensagem_log := '"Sistema de Origem" ('||ev_sist_orig||') não está informado nas parâmetrizações do Compliance!';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 31;
   -- Unidade Organizacional
   est_row_Nota_Fiscal.unidorg_id := pk_csf.fkg_unig_org_id ( en_empresa_id    => est_row_Nota_Fiscal.empresa_id
                                                            , ev_cod_unid_org  => trim(ev_cod_unid_org) );
   --
   vn_fase := 31.1;
   --
   if nvl(est_row_Nota_Fiscal.unidorg_id,0) <= 0 and trim(ev_cod_unid_org) is not null then
      --
      vn_fase := 31.2;
      --
      gv_mensagem_log := '"Unidade Organizacional" ('||ev_cod_unid_org||') não está relacionada a empresa ('||
                         pk_csf.fkg_cnpj_ou_cpf_empresa ( en_empresa_id => est_row_Nota_Fiscal.empresa_id )||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 32;
   -- valida o formato do campo "Hora de Saída/Entrada" se for informado
   if est_row_Nota_Fiscal.hora_sai_ent is not null then
      --
      vn_fase := 32.1;
      --
      if length(trim(est_row_Nota_Fiscal.hora_sai_ent)) <> 8 then
         --
         est_row_Nota_Fiscal.hora_sai_ent := 0 || trim(est_row_Nota_Fiscal.hora_sai_ent);
         --
      end if;
      --
      vn_fase := 32.2;
      -- valida formato da hora
      if trim(pk_csf.fkg_vld_formato_hora(est_row_Nota_Fiscal.hora_sai_ent, 'hh24:mi:ss')) is null then
         --
         vn_fase := 32.3;
         --
         gv_mensagem_log := '"Hora de Saída/Entrada" está com o formato inválido ('||est_row_Nota_Fiscal.hora_sai_ent||'), o correto é "HH:MM:SS".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 32.4;
      --
      if est_row_Nota_Fiscal.dt_sai_ent is null then
         --
         vn_fase := 32.5;
         --
         gv_mensagem_log := 'Informar a "Data de Saída/Entrada" quando for informada a "Hora de Saída/Entrada".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 33;
   --
   if est_row_Nota_Fiscal.nro_chave_cte_ref is not null then
      --
      vn_fase := 33.1;
      --
      if length(est_row_Nota_Fiscal.nro_chave_cte_ref) <> 44 then
         --
         gv_mensagem_log := '"Chave de acesso do CT-e referenciada" está inválida ('||est_row_Nota_Fiscal.nro_chave_cte_ref||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 33.2;
      --
      if substr(trim(est_row_Nota_Fiscal.nro_chave_cte_ref), 21, 2) <> '57' then
         --
         gv_mensagem_log := 'Modelo do CT-e referenciado diferente de 57. ('||est_row_Nota_Fiscal.nro_chave_cte_ref||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 34;
   -- Caso a forma de emissão seja contingência, informar Data e Justificativa de contingência
   if nvl(est_row_Nota_Fiscal.dm_forma_emiss,0) <> 1 then
      --
      if pk_csf.fkg_dt_cont_nf ( en_notafiscal_id => est_row_Nota_Fiscal.id ) is null then
         est_row_Nota_Fiscal.dt_cont    := sysdate;
      end if;
      --
      if nvl(est_row_Nota_Fiscal.dm_forma_emiss,0) in (2, 5, 9) then -- 2-Contigência FS ou 5-Contigência FS-DA
         est_row_Nota_Fiscal.just_cont  := 'Sem comunicacao de internet com a Sefaz';
      elsif nvl(est_row_Nota_Fiscal.dm_forma_emiss,0) in (3) then -- 3-Contingência SCAN
         est_row_Nota_Fiscal.just_cont  := 'Sefaz fora do ar';
      elsif nvl(est_row_Nota_Fiscal.dm_forma_emiss,0) in (4) then -- 4-Contigência DPEC
         est_row_Nota_Fiscal.just_cont  := 'DANFE impresso em contingencia - DPEC regularmente recebida pela Receita Federal do Brasil';
      elsif nvl(est_row_Nota_Fiscal.dm_forma_emiss,0) in (6) then -- 6-Contigência SVC-AN
         est_row_Nota_Fiscal.just_cont  := 'DANFE impresso em contingencia SVC-AN regularmente recebida pela Receita Federal do Brasil';
      elsif nvl(est_row_Nota_Fiscal.dm_forma_emiss,0) in (7) then -- 7-Contigência SVC-RS
         est_row_Nota_Fiscal.just_cont  := 'DANFE impresso em contingencia SVC-RS regularmente recebida pela Receita Federal do Brasil';
      end if;
      --
   end if;
   --
   vn_fase := 35;
   -- verifica usuário do ERP
   if trim ( est_row_Nota_Fiscal.id_usuario_erp ) is not null then
      --
      vn_fase := 35.1;
      --
      est_row_Nota_Fiscal.usuario_id := pk_csf.fkg_neo_usuario_id_conf_erp ( en_multorg_id => en_multorg_id
                                                                           , ev_id_erp     => trim ( est_row_Nota_Fiscal.id_usuario_erp ) );
      --
      vn_fase := 35.2;
      --
      if nvl(est_row_Nota_Fiscal.usuario_id,0) <= 0 then
         --
         est_row_Nota_Fiscal.id_usuario_erp := null;
         --
      else
         --
         gt_row_nota_fiscal.usuario_id := est_row_Nota_Fiscal.usuario_id;
         --
      end if;
      --
      vn_fase := 35.3;
      --
   end if;
   --
   -------------------------------------------------------------------------------------------------------
   --| Valida informação do campo modelodanfe_id
   --
   -- #71745 inclusao de validacao da coluna nova modelodanfe_id
   vn_fase := 36 ;
   --
   if nvl(est_row_Nota_Fiscal.modelodanfe_id,0) <= 0 then
     --
     --se for emissao propria
     if est_row_Nota_Fiscal.dm_ind_emit = 0 then
       --
       vn_fase := 36.1 ;
       --
       -- recupera modelodanfe_id da tabela empresa_param_serie
       begin
         select e.modelodanfe_id
           into est_row_Nota_Fiscal.modelodanfe_id
           from empresa_param_serie e
          where e.empresa_id   = est_row_Nota_Fiscal.empresa_id
            and e.modfiscal_id = est_row_Nota_Fiscal.modfiscal_id
            and e.serie        = est_row_Nota_Fiscal.serie
              ;
       exception
         when others then
            --
            vn_fase := 36.3 ;
            --
            gv_mensagem_log := '"Erro ao localizar o Modelo de danfe para esta Nota Fiscal na tabela EMPRESA_PARAM_SERIE, e será utilizado o modelo padrão. '
                            || 'Caso pretenda utilizar um modelo especifico, favor verificar o cadastro de modelo_danfe para a empresa '||est_row_Nota_Fiscal.empresa_id
                            ||' nas tabelas MODELO_DANFE , EMPRESA_PARAM_SERIE.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                              , ev_mensagem         => gv_cabec_log
                              , ev_resumo           => gv_mensagem_log
                              , en_tipo_log         => informacao
                              , en_referencia_id    => gn_referencia_id
                              , ev_obj_referencia   => gv_obj_referencia );
                              --
       end;
       -- #73193
       if est_row_Nota_Fiscal.modelodanfe_id is null then
         --
         --se ainda nao encontrar, recupera da tabela empresa
         begin
           select emp.modelodanfe_id
             into est_row_Nota_Fiscal.modelodanfe_id
             from empresa emp
            where emp.id = est_row_Nota_Fiscal.empresa_id
                ;
         exception
          when others then
            --
            vn_fase := 36.2 ;
            --
            gv_mensagem_log := '"Erro ao localizar o Modelo de danfe para esta Nota Fiscal na tabela EMPRESA, e será utilizado o modelo padrão. '
                            || 'Caso pretenda utilizar um modelo especifico, favor verificar o cadastro de modelo_danfe para a empresa '||est_row_Nota_Fiscal.empresa_id
                            ||' nas tabelas MODELO_DANFE , EMPRESA';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                              , ev_mensagem         => gv_cabec_log
                              , ev_resumo           => gv_mensagem_log
                              , en_tipo_log         => informacao
                              , en_referencia_id    => gn_referencia_id
                              , ev_obj_referencia   => gv_obj_referencia );
            --
         end;
         --
       end if;
       --
     elsif est_row_Nota_Fiscal.dm_ind_emit = 1 -- se for Terceiro 
         and est_row_Nota_Fiscal.dm_arm_nfe_terc = 1 then
        -- 
        vn_fase := 36.4 ;
        --
        --recupera modelodanfe_id da tabela empresa
        begin
           select emp.modelodanfe_id
             into est_row_Nota_Fiscal.modelodanfe_id
             from empresa emp
            where emp.id        = est_row_Nota_Fiscal.empresa_id
                ;
        exception
          when others then
              --
              vn_fase := 36.5 ;
              --
              gv_mensagem_log := '"Erro ao localizar o Modelo de danfe para esta Nota Fiscal na tabela EMPRESA, e será utilizado o modelo padrão. '
                              || 'Caso pretenda utilizar um modelo especifico, favor verificar o cadastro de modelo_danfe para a empresa '||est_row_Nota_Fiscal.empresa_id
                              ||' nas tabelas MODELO_DANFE , EMPRESA.';
              --
              vn_loggenerico_id := null;
              --
              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => informacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
                                --
        end;
        --
     end if;
   --
   end if;
   --
   vn_fase := 36.6 ;
   --
   -- #71745
   -- se valor nao foi encontrado, gera erro
   if nvl(est_row_Nota_Fiscal.modelodanfe_id,0) <= 0 then
      --
      est_row_Nota_Fiscal.modelodanfe_id := null ;-- #73193
      --
      vn_fase := 36.7 ;
      --
      gv_mensagem_log := '"Não foi encontrado um MODELO de DANFE à ser impresso e será utilizado o modelo padrão. '
                      || 'Caso pretenda utilizar um modelo especifico, favor verificar o cadastro de modelo_danfe para a empresa '||est_row_Nota_Fiscal.empresa_id
                      ||' nas tabelas MODELO_DANFE , EMPRESA ou EMPRESA_PARAM_SERIE.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => informacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
                          --
   end if;
   --
   est_row_Nota_Fiscal.versao := null;
   --
-------------------------------------------------------------------------------------------------------
   vn_fase := 99;

   -- Se não teve erro na validação, integra a nota fiscal
   -- Se não existe registro de Log e o Tipo de integração é 1 (valida e insere)
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      est_row_Nota_Fiscal.dm_st_proc := 10;
      --
   /*
   -- Venceram, vamos tirar isso, existe ambientes de cliente que geram problema
   else
      --
      if est_row_Nota_Fiscal.dm_st_proc = 0 then
         est_row_Nota_Fiscal.dm_st_proc := 21; -- Aguardando Liberacao
      end if;*/
      --
   end if;
   --
   if est_row_nota_fiscal.dm_legado is null then
      --
      if est_row_nota_fiscal.dm_st_proc = 4 then -- Autorizada
         est_row_nota_fiscal.dm_legado := 1; -- Legado Autorizado
      elsif est_row_nota_fiscal.dm_st_proc = 6 then -- Denegada
            est_row_nota_fiscal.dm_legado := 2; -- Legado Denegado
      elsif est_row_nota_fiscal.dm_st_proc = 7 then -- Cancelada
            est_row_nota_fiscal.dm_legado := 3; -- Legado Cancelado
      elsif est_row_nota_fiscal.dm_st_proc = 8 then -- Inutilizada
            est_row_nota_fiscal.dm_legado := 4; -- Legado Inutilizado
      else
         est_row_nota_fiscal.dm_legado := 0; -- Não é Legado
      end if;
      --
   end if;
   --
   gn_dm_legado := est_row_nota_fiscal.dm_legado;
   --   
   if est_row_Nota_Fiscal.dm_ind_emit = 0 then -- emissão propria
      --
      if to_char((est_row_Nota_Fiscal.dt_emiss), 'hh24:mi:ss') = '00:00:00'
         then
         --
         est_row_Nota_Fiscal.dt_emiss := to_date(to_char(est_row_Nota_Fiscal.dt_emiss, 'dd/mm/rrrr') || ' ' || to_char(sysdate, 'hh24:mi:ss'), 'dd/mm/rrrr hh24:mi:ss');
         --
      end if;
      --
   else
      --
      est_row_Nota_Fiscal.dt_emiss := trunc(est_row_Nota_Fiscal.dt_emiss);
      --
   end if;
   --
   if nvl(est_row_Nota_Fiscal.empresa_id, 0) > 0
      and nvl(est_row_Nota_Fiscal.sitdocto_id, 0) > 0
      and est_row_Nota_Fiscal.dm_ind_Pag in (0, 1, 2, 9)
      and nvl(est_row_Nota_Fiscal.modfiscal_id, 0) > 0
      and est_row_Nota_Fiscal.dm_ind_emit in (0, 1)
      and est_row_Nota_Fiscal.dm_ind_oper in (0, 1)
      and est_row_Nota_Fiscal.dt_emiss is not null
      and est_row_Nota_Fiscal.serie is not null
      and est_row_Nota_Fiscal.dm_fin_nfe in (1, 2, 3, 4)
      and est_row_Nota_Fiscal.dm_proc_emiss in (0, 1, 2, 3)
      and trim( est_row_Nota_Fiscal.vers_Proc ) is not null
      and est_row_Nota_Fiscal.dm_aut_sefaz in (0, 1)
      and nvl(est_row_Nota_Fiscal.cidade_ibge_emit, 0) > 0
      and nvl(est_row_Nota_Fiscal.uf_ibge_emit, 0) > 0
      and est_row_Nota_Fiscal.dt_hr_ent_sist is not null
      and est_row_Nota_Fiscal.dm_st_email in (0, 1, 2, 3) then
      --
      vn_fase := 99.1;
      --
      -- Calcula a quantidade de registros Totais integrados para ser
      -- mostrado na tela de agendamento.
      --
      if ev_cod_mod in ('06', '21', '22', '28', '29') then
         --
         gv_cd_obj := '5'; -- Notas Fiscais de Serviços Contínuos (Água, Luz, etc.)
         --
      elsif ev_cod_mod in ('55', '04', '01', '1B', '65') then
         --
         gv_cd_obj := '6' ; -- Notas Fiscais Mercantis
         --
      elsif ev_cod_mod = '99' then
         --
         gv_cd_obj :=  '7'; -- Notas Fiscais de Serviços EFD
         --
      end if;
      --
      begin
         pk_agend_integr.gvtn_qtd_total(gv_cd_obj) := nvl(pk_agend_integr.gvtn_qtd_total(gv_cd_obj),0) + 1;
      exception
         when others then
         null;
      end;
      --
      vn_fase := 99.2;
         --
      est_row_Nota_Fiscal.pk_nitem               := trim( est_row_Nota_Fiscal.pk_nitem );
      est_row_Nota_Fiscal.nat_Oper               := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal.nat_Oper, 0, 1, 2, 1, 0 ) );
      est_row_Nota_Fiscal.Local_Embarq           := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal.Local_Embarq ) );
      est_row_Nota_Fiscal.nf_empenho             := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal.nf_empenho ) );
      est_row_Nota_Fiscal.pedido_compra          := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal.pedido_compra, 0, 1, 2, 1, 0 ) );
      est_row_Nota_Fiscal.contrato_compra        := trim ( pk_csf.fkg_converte ( est_row_Nota_Fiscal.contrato_compra ) );
      est_row_Nota_Fiscal.vers_Proc              := trim( est_row_Nota_Fiscal.vers_Proc );
      est_row_Nota_Fiscal.id_usuario_erp         := trim ( est_row_Nota_Fiscal.id_usuario_erp );
      est_row_Nota_Fiscal.cod_cta                := trim(est_row_Nota_Fiscal.cod_cta);
      est_row_Nota_Fiscal.nro_ord_emb            := trim ( est_row_Nota_Fiscal.nro_ord_emb);
      est_row_Nota_Fiscal.dm_st_integra          := nvl(est_row_Nota_Fiscal.dm_st_integra,0);
      est_row_Nota_Fiscal.vias_danfe_custom      := nvl(est_row_Nota_Fiscal.vias_danfe_custom,0);
      --
      -- Os campos nro_chave_nfe, id_tag_nfe, cNF_nfe e dig_verif_chave SOMENTE serão VALIDADOS nas rotinas
      -- pkb_integr_nota_fiscal_compl que integra os dados da view vw_csf_nota_fiscal_compl e na pkb_consistem_nf(pkb_valida_cria_nro_chave_nfe)
      --
      est_row_Nota_Fiscal.nro_chave_nfe          := trim( est_row_Nota_Fiscal.nro_chave_nfe );
      -- Se o valor nro_chave_nfe for nulo não pode concatenar com NFe q ficará errado o a tag da nfe
      if trim(est_row_Nota_Fiscal.nro_chave_nfe) is not null then
         --
         est_row_Nota_Fiscal.id_tag_nfe := 'NFe' || trim( est_row_Nota_Fiscal.nro_chave_nfe );
         --
      end if;
      --
      -- Se a nota fiscal já existe, só faz a atualização dos dados
      if pk_csf.fkg_existe_nf ( en_nota_fiscal => est_row_Nota_Fiscal.id ) = true then
         --
         vn_fase := 99.2;
         --
         -- Variavel global usada em logs de triggers (carrega)
         gv_objeto := 'pk_csf_api.pkb_integr_nota_fiscal'; 
         gn_fase   := vn_fase;
         --
         update Nota_Fiscal
            set empresa_id             = est_row_Nota_Fiscal.empresa_id
              , pessoa_id              = est_row_Nota_Fiscal.pessoa_id
              , sitdocto_id            = est_row_Nota_Fiscal.sitdocto_id
              , natoper_id             = est_row_Nota_Fiscal.natoper_id
              , lote_id                = null
              , versao                 = est_row_Nota_Fiscal.versao
              , id_tag_nfe             = est_row_Nota_Fiscal.id_tag_nfe
              , pk_nitem               = est_row_Nota_Fiscal.pk_nitem
              , nat_Oper               = est_row_Nota_Fiscal.nat_Oper
              , dm_ind_Pag             = est_row_Nota_Fiscal.dm_ind_Pag
              , modfiscal_id           = est_row_Nota_Fiscal.modfiscal_id
              , dm_ind_emit            = est_row_Nota_Fiscal.dm_ind_emit
              , dm_ind_oper            = est_row_Nota_Fiscal.dm_ind_oper
              , dt_sai_ent             = est_row_Nota_Fiscal.dt_sai_ent
              , dt_emiss               = est_row_Nota_Fiscal.dt_emiss
              , nro_nf                 = est_row_Nota_Fiscal.nro_nf
              , serie                  = est_row_Nota_Fiscal.serie
              , UF_Embarq              = est_row_Nota_Fiscal.UF_Embarq
              , Local_Embarq           = est_row_Nota_Fiscal.Local_Embarq
              , nf_empenho             = est_row_Nota_Fiscal.nf_empenho
              , pedido_compra          = est_row_Nota_Fiscal.pedido_compra
              , contrato_compra        = est_row_Nota_Fiscal.contrato_compra
              , dm_st_proc             = est_row_Nota_Fiscal.dm_st_proc
              , dt_st_proc             = est_row_Nota_Fiscal.dt_st_proc
              , dm_forma_emiss         = est_row_Nota_Fiscal.dm_forma_emiss
              , dm_impressa            = est_row_Nota_Fiscal.dm_impressa
              , dm_tp_impr             = est_row_Nota_Fiscal.dm_tp_impr
              , dm_tp_amb              = est_row_Nota_Fiscal.dm_tp_amb
              , dm_fin_nfe             = est_row_Nota_Fiscal.dm_fin_nfe
              , dm_proc_emiss          = est_row_Nota_Fiscal.dm_proc_emiss
              , vers_Proc              = est_row_Nota_Fiscal.vers_Proc
              , dt_aut_sefaz           = est_row_Nota_Fiscal.dt_aut_sefaz
              , dm_aut_sefaz           = est_row_Nota_Fiscal.dm_aut_sefaz
              , cidade_ibge_emit       = est_row_Nota_Fiscal.cidade_ibge_emit
              , uf_ibge_emit           = est_row_Nota_Fiscal.uf_ibge_emit
              , dt_hr_ent_sist         = est_row_Nota_Fiscal.dt_hr_ent_sist
              , nro_chave_nfe          = est_row_Nota_Fiscal.nro_chave_nfe
              , cNF_nfe                = est_row_Nota_Fiscal.cNF_nfe
              , dig_verif_chave        = est_row_Nota_Fiscal.dig_verif_chave
              , dm_st_email            = est_row_Nota_Fiscal.dm_st_email
              , id_usuario_erp         = est_row_Nota_Fiscal.id_usuario_erp
              , impressora_id          = est_row_Nota_Fiscal.impressora_id
              , usuario_id             = est_row_Nota_Fiscal.usuario_id
              , sub_serie              = est_row_Nota_Fiscal.sub_serie
              , inforcompdctofiscal_id = est_row_Nota_Fiscal.inforcompdctofiscal_id
              , cod_cta                = est_row_Nota_Fiscal.cod_cta
              , dm_tp_assinante        = est_row_Nota_Fiscal.dm_tp_assinante
              , dm_st_integra          = est_row_Nota_Fiscal.dm_st_integra
              , sistorig_id            = est_row_nota_fiscal.sistorig_id
              , unidorg_id             = est_row_nota_fiscal.unidorg_id
              , hora_sai_ent           = est_row_nota_fiscal.hora_sai_ent
              , nro_chave_cte_ref      = est_row_nota_fiscal.nro_chave_cte_ref
              , dt_cont                = est_row_nota_fiscal.dt_cont
              , just_cont              = est_row_nota_fiscal.just_cont
              , vias_danfe_custom      = est_row_Nota_Fiscal.vias_danfe_custom
              , nro_ord_emb            = est_row_Nota_Fiscal.nro_ord_emb
              , seq_nro_ord_emb        = est_row_Nota_Fiscal.seq_nro_ord_emb
              , empresaintegrbanco_id  = en_empresaintegrbanco_id
              , dm_legado              = est_row_nota_fiscal.dm_legado
              , modelodanfe_id         = est_row_nota_fiscal.modelodanfe_id --#71745  
          where id = est_row_Nota_Fiscal.id;
         --
         -- Variavel global usada em logs de triggers (limpa)
         gv_objeto := 'pk_csf_api';
         gn_fase   := null;
         --
      else
         --
         vn_fase := 99.3;
         --
         if nvl(est_row_Nota_Fiscal.id,0) = 0 then
            --
            select notafiscal_seq.nextval
              into est_row_Nota_Fiscal.id
              from dual;
            --
         end if;
         --
         vn_fase := 99.4;
         --
         -- Variavel global usada em logs de triggers (carrega)
         gv_objeto := 'pk_csf_api.pkb_integr_nota_fiscal'; 
         gn_fase   := vn_fase;
         --
         insert into Nota_Fiscal ( id
                                 , empresa_id
                                 , pessoa_id
                                 , sitdocto_id
                                 , natoper_id
                                 , lote_id
                                 , versao
                                 , id_tag_nfe
                                 , pk_nitem
                                 , nat_Oper
                                 , dm_ind_Pag
                                 , modfiscal_id
                                 , dm_ind_emit
                                 , dm_ind_oper
                                 , dt_sai_ent
                                 , dt_emiss
                                 , nro_nf
                                 , serie
                                 , UF_Embarq
                                 , Local_Embarq
                                 , nf_empenho
                                 , pedido_compra
                                 , contrato_compra
                                 , dm_st_proc
                                 , dt_st_proc
                                 , dm_forma_emiss
                                 , dm_impressa
                                 , dm_tp_impr
                                 , dm_tp_amb
                                 , dm_fin_nfe
                                 , dm_proc_emiss
                                 , vers_Proc
                                 , dt_aut_sefaz
                                 , dm_aut_sefaz
                                 , cidade_ibge_emit
                                 , uf_ibge_emit
                                 , dt_hr_ent_sist
                                 , nro_chave_nfe
                                 , cNF_nfe
                                 , dig_verif_chave
                                 , dm_st_email
                                 , id_usuario_erp
                                 , impressora_id
                                 , usuario_id
                                 , dm_st_integra
                                 , vias_danfe_custom
                                 , sub_serie
                                 , inforcompdctofiscal_id
                                 , cod_cta
                                 , dm_tp_assinante
                                 , sistorig_id
                                 , unidorg_id
                                 , hora_sai_ent
                                 , nro_chave_cte_ref
                                 , dt_cont
                                 , just_cont
                                 , seq_nro_ord_emb
                                 , nro_ord_emb
                                 , empresaintegrbanco_id
                                 , dm_legado
                                 , modelodanfe_id --#71745  
                                 )
                          values ( est_row_Nota_Fiscal.id
                                 , est_row_Nota_Fiscal.empresa_id
                                 , est_row_Nota_Fiscal.pessoa_id
                                 , est_row_Nota_Fiscal.sitdocto_id
                                 , est_row_Nota_Fiscal.natoper_id
                                 , est_row_Nota_Fiscal.lote_id
                                 , est_row_Nota_Fiscal.versao
                                 , est_row_Nota_Fiscal.id_tag_nfe
                                 , est_row_Nota_Fiscal.pk_nitem
                                 , est_row_Nota_Fiscal.nat_Oper
                                 , est_row_Nota_Fiscal.dm_ind_Pag
                                 , est_row_Nota_Fiscal.modfiscal_id
                                 , est_row_Nota_Fiscal.dm_ind_emit
                                 , est_row_Nota_Fiscal.dm_ind_oper
                                 , est_row_Nota_Fiscal.dt_sai_ent
                                 , est_row_Nota_Fiscal.dt_emiss
                                 , est_row_Nota_Fiscal.nro_nf
                                 , est_row_Nota_Fiscal.serie
                                 , est_row_Nota_Fiscal.UF_Embarq
                                 , est_row_Nota_Fiscal.Local_Embarq
                                 , est_row_Nota_Fiscal.nf_empenho
                                 , est_row_Nota_Fiscal.pedido_compra
                                 , est_row_Nota_Fiscal.contrato_compra
                                 , est_row_Nota_Fiscal.dm_st_proc
                                 , est_row_Nota_Fiscal.dt_st_proc
                                 , est_row_Nota_Fiscal.dm_forma_emiss
                                 , est_row_Nota_Fiscal.dm_impressa
                                 , est_row_Nota_Fiscal.dm_tp_impr
                                 , est_row_Nota_Fiscal.dm_tp_amb
                                 , est_row_Nota_Fiscal.dm_fin_nfe
                                 , est_row_Nota_Fiscal.dm_proc_emiss
                                 , est_row_Nota_Fiscal.vers_Proc
                                 , est_row_Nota_Fiscal.dt_aut_sefaz
                                 , est_row_Nota_Fiscal.dm_aut_sefaz
                                 , est_row_Nota_Fiscal.cidade_ibge_emit
                                 , est_row_Nota_Fiscal.uf_ibge_emit
                                 , est_row_Nota_Fiscal.dt_hr_ent_sist
                                 , est_row_Nota_Fiscal.nro_chave_nfe
                                 , est_row_Nota_Fiscal.cNF_nfe
                                 , est_row_Nota_Fiscal.dig_verif_chave
                                 , est_row_Nota_Fiscal.dm_st_email
                                 , est_row_Nota_Fiscal.id_usuario_erp
                                 , est_row_Nota_Fiscal.impressora_id
                                 , est_row_Nota_Fiscal.usuario_id
                                 , est_row_Nota_Fiscal.dm_st_integra
                                 , est_row_Nota_Fiscal.vias_danfe_custom
                                 , est_row_Nota_Fiscal.sub_serie
                                 , est_row_Nota_Fiscal.inforcompdctofiscal_id
                                 , est_row_Nota_Fiscal.cod_cta
                                 , est_row_Nota_Fiscal.dm_tp_assinante
                                 , est_row_Nota_Fiscal.sistorig_id
                                 , est_row_Nota_Fiscal.unidorg_id
                                 , est_row_Nota_Fiscal.hora_sai_ent
                                 , est_row_Nota_Fiscal.nro_chave_cte_ref
                                 , est_row_Nota_Fiscal.dt_cont
                                 , est_row_Nota_Fiscal.just_cont
                                 , est_row_Nota_Fiscal.seq_nro_ord_emb
                                 , est_row_Nota_Fiscal.nro_ord_emb
                                 , en_empresaintegrbanco_id
                                 , est_row_nota_fiscal.dm_legado
								 , est_row_nota_fiscal.modelodanfe_id --#71745
                                 );
         --
         -- Variavel global usada em logs de triggers (limpa)
         gv_objeto := 'pk_csf_api';
         gn_fase   := null;
         --
      end if;
      --
      commit;
      --
   end if; -- campos obrigatórios
   --
   <<sair_integr>>
   null;
   --
EXCEPTION
   when others then
      --
      if sqlcode = -1 then
         --
         est_row_Nota_Fiscal.id := pk_csf.fkg_busca_notafiscal_id ( en_multorg_id      => en_multorg_id
                                                                  , en_empresa_id      => est_row_Nota_Fiscal.empresa_id
                                                                  , ev_cod_mod         => ev_cod_mod
                                                                  , ev_serie           => est_row_Nota_Fiscal.serie
                                                                  , en_nro_nf          => est_row_Nota_Fiscal.nro_nf
                                                                  , en_dm_ind_oper     => est_row_Nota_Fiscal.dm_ind_oper
                                                                  , en_dm_ind_emit     => est_row_Nota_Fiscal.dm_ind_emit
                                                                  , ev_cod_part        => ev_cod_part
                                                                  , en_dm_arm_nfe_terc => est_row_Nota_Fiscal.dm_arm_nfe_terc );
         --
         gv_mensagem_log := 'Aviso: Nota Fiscal já existe no sistema, não será re-integrada novamente!';
         --
         declare
            vn_loggenerico_id  log_generico_nf.id%type;
         begin
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
         exception
            when others then
               null;
         end;
         --
         est_row_Nota_Fiscal.id := null;
         --
      else
         --
         gv_mensagem_log := 'Erro na pkb_integr_Nota_Fiscal fase('||vn_fase||'): '||sqlerrm;
         --
         declare
            vn_loggenerico_id  log_generico_nf.id%type;
         begin
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
         exception
            when others then
               null;
         end;
         --
      end if;
      --
END PKB_INTEGR_NOTA_FISCAL;

-----------------------------------------------------------------------------
-- Procedimento que faz validações na Nota Fiscal e grava na CSF - campos flex field --
-----------------------------------------------------------------------------
PROCEDURE PKB_INTEGR_NOTA_FISCAL_FF ( EST_LOG_GENERICO_NF     IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                    , EN_NOTAFISCAL_ID        IN             NOTA_FISCAL.ID%TYPE
                                    , EV_ATRIBUTO             IN             VARCHAR2
                                    , EV_VALOR                IN             VARCHAR2
                                    ) IS
   --
   vn_fase                number := 0;
   vn_loggenerico_id      log_generico_nf.id%type;
   vn_dmtipocampo         ff_obj_util_integr.dm_tipo_campo%type;
   vv_mensagem            varchar2(1000) := null;
   --
   vn_dm_id_dest            nota_fiscal.dm_id_dest%type;
   vn_dm_ind_final          nota_fiscal.dm_ind_final%type;
   vn_dm_ind_pres           nota_fiscal.dm_ind_pres%type;
   vv_local_despacho        nota_fiscal.local_despacho%type;
   vn_dm_nat_oper           nf_compl_serv.dm_nat_oper%type;
   vn_dm_reg_trib           nf_compl_serv.dm_reg_trib%type;
   vd_dt_exe_serv           nf_compl_serv.dt_exe_serv%type;
   vn_nro_protocolo         nota_fiscal.nro_protocolo%type;
   vd_dt_aut_sefaz          date;
   vn_qtde_nf               number;
   vv_qr_code               nota_fiscal.qr_code%type;
   vn_dm_legado             nota_fiscal.dm_legado%type;
   vn_dm_ind_ativ_part      nota_fiscal.dm_ind_ativ_part%type;
   vn_dm_mot_des_icms_part  nota_fiscal.dm_mot_des_icms_part%type;
   vn_dm_calc_icmsst_part   nota_fiscal.dm_calc_icmsst_part%type;
   vv_url_chave             nota_fiscal.url_chave%type;
   vn_cod_mensagem          nota_fiscal.cod_mensagem%type;
   vv_msg_sefaz             nota_fiscal.msg_sefaz%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 2;
      --
      gv_mensagem_log := 'Nota Fiscal: "Atributo" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Nota Fiscal: "VALOR" referente ao atributo deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 6;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 7;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   else
      --
      vn_fase := 8;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 9;
      --
      if trim(ev_atributo) = 'DM_ID_DEST' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 10;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 11;
               --
               if trim(ev_valor) in ('1', '2', '3') then
                  --
                  vn_fase := 12;
                  --
                  vn_dm_id_dest := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                  --
               else
                   --
                   vn_fase := 13;
                   --
                   gv_mensagem_log := 'O valor do campo "Identificador de local de destino da operação" informado ('||ev_valor||') não é válido, deve ser 1 - Operação interna, 2 - Operação interestadual ou 3 - Operação com exterior.';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                   --
               end if;
            else
               --
               vn_fase := 14;
               --
               gv_mensagem_log := 'O valor do campo "Identificador de local de destino da operação" informado, não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_IND_FINAL' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 15;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 15.1;
               --
               if trim(ev_valor) in ('0', '1', '2', '3', '4', '5', '6', '7') then
                 --
                 vn_fase := 15.2;
                 --
                 vn_dm_ind_final := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                                , ev_atributo => trim(ev_atributo)
                                                                , ev_valor    => trim(ev_valor) );
                 --
                 vn_fase := 15.3;
                 --
               else
                   --
                   gv_mensagem_log := 'O valor do campo "Indicador da operação com Consumidor final" informado ('||ev_valor||') não é válido, deve ser 0 - Normal ou 1 - Consumidor final.';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                   --
               end if;
            else
               --
               vn_fase := 15.4;
               --
               gv_mensagem_log := 'O valor do campo "Indicador da operação com Consumidor final" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_IND_PRES' then
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 16;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 16.1;
               --
               if trim(ev_valor) in ('0', '1', '2', '3', '4', '5', '9') then
                  --
                  vn_fase := 16.2;
                  --
                  vn_dm_ind_pres := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                                , ev_atributo => trim(ev_atributo)
                                                                , ev_valor    => trim(ev_valor) );
                  --
                  vn_fase := 16.3;
                  --
               else
                  --
                  vn_fase := 16.4;
                  --
                  gv_mensagem_log := 'O valor do campo "Indicador de presença do comprador" informado ('||ev_valor||') não é válido, deve ser 0 - Não se aplica, 1 - Operação presencial, 2 - Operação pela Internet,  3 - Teleatendimento, 4 - NFC-e em operação com entrega a domicílio ou 9 - Outros.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem       => gv_cabec_log
                                      , ev_resumo         => gv_mensagem_log
                                      , en_tipo_log       => erro_de_validacao
                                      , en_referencia_id  => gn_referencia_id
                                      , ev_obj_referencia => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
            else
               --
               vn_fase := 16.5;
               --
               gv_mensagem_log := 'O valor do campo "Indicador de presença do comprador" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'LOCAL_DESPACHO' then
         --
         vn_fase := 17;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 17.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 17.2;
               --
               vv_local_despacho := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                                  , ev_atributo => trim(ev_atributo)
                                                                  , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 17.3;
               --
               gv_mensagem_log := 'O valor do campo "Descrição do local de despacho" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DT_EXE_SERV' then
         --
         vn_fase := 18;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 18.1;
            --
            if vn_dmtipocampo = 0 then -- tipo de campo = data
               --
               vn_fase := 18.2;
               --
               vd_dt_exe_serv := pk_csf.fkg_ff_ret_vlr_data( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                           , ev_atributo => trim(ev_atributo)
                                                           , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 18.3;
               --
               gv_mensagem_log := 'O valor do campo "Data da prestação do serviço" informado não confere com o tipo de campo, deveria ser DATA.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_NAT_OPER' then
         --
         vn_fase := 19;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 19.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 19.2;
               --
               if trim(ev_valor) in ('1', '2', '3', '4', '5', '6', '7', '8') then
                 --
                 vn_fase := 19.3;
                 --
                 vn_dm_nat_oper := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor) );
                 --
               else
                   --
                   vn_fase := 19.4;
                   --
                   gv_mensagem_log := 'O valor do campo "Indicador da exigibilidade do ISS" informado ('||ev_valor||') não é válido, deve ser 1, 2, 3, 4, 5, 6 ou 7';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                   --
               end if;
            else
               --
               vn_fase := 19.5;
               --
               gv_mensagem_log := 'O valor do campo "Indicador da exigibilidade do ISS" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_REG_TRIB' then
         --
         vn_fase := 20;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 20.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 20.2;
               --
               if trim(ev_valor) in ('1', '2', '3', '4', '5', '6') then
                 --
                 vn_fase := 20.3;
                 --
                 vn_dm_reg_trib := pk_csf.fkg_ff_ret_vlr_number( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                            , ev_atributo => trim(ev_atributo)
                                                            , ev_valor    => trim(ev_valor) );
                 --
               else
                   --
                   vn_fase := 20.4;
                   --
                   gv_mensagem_log := 'O valor do campo "Código do Regime Especial de Tributação" informado ('||ev_valor||') não é válido, deve ser 1 - Microempresa Municipal, 2 - Estimativa, 3 - Sociedade de Profissionais, 4 - Cooperativa, 5 - Microempresário Individual (MEI) ou 6 - Microempresário e Empresa de Pequeno Porte (ME/EPP)';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                   --
               end if;
               --

            else
               --
               vn_fase := 20.5;
               --
               gv_mensagem_log := 'O valor do campo "Código do Regime Especial de Tributação" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'NRO_PROTOCOLO' then
         --
         vn_fase := 20;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 20.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 20.2;
               --
               begin
                  --
                  vn_nro_protocolo := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                                   , ev_atributo => trim(ev_atributo)
                                                                   , ev_valor    => trim(ev_valor)
                                                                   );
                  --
               exception
                  when others then
                     vn_nro_protocolo := 0;
               end;
               --
               if nvl(vn_nro_protocolo,0) <= 0 then
                   --
                   vn_fase := 20.4;
                   --
                   gv_mensagem_log := 'O valor do campo "Número do Protocolo da NF-e" informado ('||ev_valor||') não é válido.';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                   --
               end if;
               --

            else
               --
               vn_fase := 20.5;
               --
               gv_mensagem_log := 'O valor do campo "Número do Protocolo da NF-e" informado não confere com o tipo de campo, deveria ser DATA.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DT_AUT_SEFAZ' then
         --
         vn_fase := 20;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 20.1;
            --
            if vn_dmtipocampo = 0 then -- tipo de campo = data
               --
               vn_fase := 20.2;
               --
               begin
                  --
                  vd_dt_aut_sefaz := pk_csf.fkg_ff_ret_vlr_data ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                                , ev_atributo => trim(ev_atributo)
                                                                , ev_valor    => trim(ev_valor)
                                                                );
                  --
               exception
                  when others then
                     vd_dt_aut_sefaz := null;
               end;
               --
               if vd_dt_aut_sefaz is null then
                   --
                   vn_fase := 20.4;
                   --
                   gv_mensagem_log := 'O valor do campo "Data de autorização da NF-e na Sefaz" informado ('||ev_valor||') não é válido.';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                   --
               end if;
               --

            else
               --
               vn_fase := 20.5;
               --
               gv_mensagem_log := 'O valor do campo "Data de autorização da NF-e na Sefaz" informado não confere com o tipo de campo, deveria ser DATA.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'QR_CODE' then
         --
         vn_fase := 21;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 21.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 21.2;
               --
               vv_qr_code := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                           , ev_atributo => trim(ev_atributo)
                                                           , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 21.3;
               --
               gv_mensagem_log := 'O valor do campo "Texto com o QR-Code impresso no DANFE NFC-e" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'URL_CHAVE' then
         --
         vn_fase := 21;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 21.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 21.2;
               --
               vv_url_chave := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                           , ev_atributo => trim(ev_atributo)
                                                           , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 21.3;
               --
               gv_mensagem_log := 'O valor do campo "Texto com a URL de consulta por chave de acesso a ser impressa no DANFE NFC-e" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_LEGADO' then
         --
         vn_fase := 20;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 20.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 20.2;
               --
               if trim(ev_valor) in ('0', '1', '2', '3', '4') then
                 --
                 vn_fase := 20.3;
                 --
                 vn_dm_legado := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                              , ev_atributo => trim(ev_atributo)
                                                              , ev_valor    => trim(ev_valor)
                                                              );
                 --
               else
                   --
                   vn_fase := 20.4;
                   --
                   gv_mensagem_log := 'O valor do campo "NFe de Legado" informado ('||ev_valor||') não é válido, deve ser 0-Não é Legado; 1-Legado Autorizado; 2-Legado Denegado; 3-Legado Cancelado; 4-Legado Inutilizado';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                   --
               end if;
               --
            else
               --
               vn_fase := 20.5;
               --
               gv_mensagem_log := 'O valor do campo "NFe de Legado" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_IND_ATIV_PART' then
         --
         vn_fase := 20;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 20.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 20.2;
               --
               if trim(ev_valor) in ('0', '1') then
                 --
                 vn_fase := 20.3;
                 --
                 vn_dm_ind_ativ_part := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                                     , ev_atributo => trim(ev_atributo)
                                                                     , ev_valor    => trim(ev_valor)
                                                                     );
                 --
               else
                   --
                   vn_fase := 20.4;
                   --
                   gv_mensagem_log := 'O valor do campo "Indicador de Atividade do Participante" informado ('||ev_valor||') não é válido, deve ser 0- Industrial ou Equiparado; 1-Outros';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                   --
               end if;
               --
            else
               --
               vn_fase := 20.5;
               --
               gv_mensagem_log := 'O valor do campo "Indicador de Atividade do Participante" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_MOT_DES_ICMS_PART' then
         --
         vn_fase := 20;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 20.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 20.2;
               --
               if trim(ev_valor) is not null then
                 --
                 vn_fase := 20.3;
                 --
                 vn_dm_mot_des_icms_part := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                                         , ev_atributo => trim(ev_atributo)
                                                                         , ev_valor    => trim(ev_valor)
                                                                         );
                 --
               else
                   --
                   vn_fase := 20.4;
                   --
                   gv_mensagem_log := 'O valor do campo "Motivo da Desoneração do ICMS do Participante" informado ('||ev_valor||') não é válido.';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                   --
               end if;
               --
            else
               --
               vn_fase := 20.5;
               --
               gv_mensagem_log := 'O valor do campo "Motivo da Desoneração do ICMS do Participante" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'DM_CALC_ICMSST_PART' then
         --
         vn_fase := 20;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 20.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 20.2;
               --
               if trim(ev_valor) in ('0', '1') then
                 --
                 vn_fase := 20.3;
                 --
                 vn_dm_calc_icmsst_part := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                                         , ev_atributo => trim(ev_atributo)
                                                                         , ev_valor    => trim(ev_valor)
                                                                         );
                 --
               else
                   --
                   vn_fase := 20.4;
                   --
                   gv_mensagem_log := 'O valor do campo "Calcula ICMS-ST para o Participante" informado ('||ev_valor||') não é válido.';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem       => gv_cabec_log
                                       , ev_resumo         => gv_mensagem_log
                                       , en_tipo_log       => erro_de_validacao
                                       , en_referencia_id  => gn_referencia_id
                                       , ev_obj_referencia => gv_obj_referencia );
                   -- Armazena o "loggenerico_id" na memória
                   pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                       , est_log_generico_nf => est_log_generico_nf );
                   --
               end if;
               --
            else
               --
               vn_fase := 20.5;
               --
               gv_mensagem_log := 'O valor do campo "Calcula ICMS-ST para o Participante" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'COD_MENSAGEM' then
         --
         vn_fase := 21;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 21.1;
            --
            if vn_dmtipocampo = 1 then -- tipo de campo = numérico
               --
               vn_fase := 21.2;
               -- validat cod
               vn_cod_mensagem := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                               , ev_atributo => trim(ev_atributo)
                                                               , ev_valor    => trim(ev_valor)
                                                               );
            else
               --
               vn_fase := 21.3;
               --
               gv_mensagem_log := 'O valor do campo "Código da mensagem (Tag-cMsg)" informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      elsif trim(ev_atributo) = 'MSG_SEFAZ' then
         --
         vn_fase := 22;
         --
         if trim(ev_valor) is not null then
            --
            vn_fase := 22.1;
            --
            if vn_dmtipocampo = 2 then -- tipo de campo = caractere
               --
               vn_fase := 22.2;
               --
               vv_msg_sefaz := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => 'VW_CSF_NOTA_FISCAL_FF'
                                                             , ev_atributo => trim(ev_atributo)
                                                             , ev_valor    => trim(ev_valor) );
               --
            else
               --
               vn_fase := 22.3;
               --
               gv_mensagem_log := 'O valor do campo "Mensagem da SEFAZ para o emissor (Tag-xMsg)" informado não confere com o tipo de campo, deveria ser CARACTERE.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      else
         --
         vn_fase := 23;
         --
         gv_mensagem_log := '"Atributo" ('||ev_atributo||') e "VALOR" ('||ev_valor||') relacionados, não especificados no processo.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
   vn_fase := 24;
   --
   if nvl(en_notafiscal_id,0) = 0 then
      --
      vn_fase := 24.1;
      --
      gv_mensagem_log := 'Identificador da nota fiscal referenciada não informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 99;
   --
   -- Se não foi encontrado erro e o Tipo de Integração é 1 (valida e insere)
   -- então realiza a condição de inserir o imposto
   if nvl(est_log_generico_nf.count,0) > 0 then
      --
      vn_fase := 99.1;
      --
      update nota_fiscal nf set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.2;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo)       = 'DM_ID_DEST' and
      nvl(vn_dm_id_dest, 0)   in (1, 2, 3) and
      vv_mensagem             is null then
      --
      vn_fase := 99.3;
      --
      update nota_fiscal nf
         set nf.dm_id_dest = vn_dm_id_dest
       where nf.id         = en_notafiscal_id;
      --
      gt_row_nota_fiscal.dm_id_dest := vn_dm_id_dest;
      --
   end if;
   --
   vn_fase := 99.4;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo) = 'DM_IND_FINAL' and
      nvl(vn_dm_ind_final,-1) in (0, 1, 2, 3, 4, 5, 6, 7) and
      vv_mensagem is null then
      --
      vn_fase := 99.5;
      --
      update nota_fiscal nf
         set nf.dm_ind_final = vn_dm_ind_final
       where nf.id = en_notafiscal_id;
      --
      gt_row_nota_fiscal.dm_ind_final := vn_dm_ind_final;
      --
   end if;
   --
   vn_fase := 99.6;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo) = 'DM_IND_PRES' and
      nvl(vn_dm_ind_pres,-1) in (0, 1, 2, 3, 4, 5, 9) and
      vv_mensagem is null then
      --
      vn_fase := 99.7;
      --
      update nota_fiscal nf
         set nf.dm_ind_pres = vn_dm_ind_pres
       where nf.id = en_notafiscal_id;
      --
      gt_row_nota_fiscal.dm_ind_pres := vn_dm_ind_pres;
      --
   end if;
   --
   vn_fase := 99.8;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo) = 'LOCAL_DESPACHO' and
      vv_local_despacho is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.9;
      --
      update nota_fiscal nf
         set nf.local_despacho = vv_local_despacho
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.10;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo) = 'DT_EXE_SERV' and
      vd_dt_exe_serv is not null  and
      vv_mensagem is null then
      --
      vn_fase := 99.11;
      --
      begin
         --
         select count(1)
           into vn_qtde_nf
           from nf_compl_serv
          where notafiscal_id = en_notafiscal_id;
         --
      exception
         when others then
         vn_qtde_nf := 0;
      end;
      --
      if nvl(vn_qtde_nf,0) > 0 then
         --
         update nf_compl_serv nf
            set nf.dt_exe_serv = vd_dt_exe_serv
          where nf.notafiscal_id = en_notafiscal_id;
         --
      else
         --
         insert into nf_compl_serv ( notafiscal_id
                                   , dt_exe_serv
                                   )
                            values
                                   ( en_notafiscal_id -- notafiscal_id
                                   , vd_dt_exe_serv -- dt_exe_serv
                                   );
         --
      end if;
      --
   end if;
   --
   vn_fase := 99.12;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo) = 'DM_NAT_OPER' and
      nvl(vn_dm_nat_oper, 0) in (1, 2, 3, 4, 5, 6, 7, 8) and
      vv_mensagem is null then
      --
      vn_fase := 99.13;
      --
      begin
         --
         select count(1)
           into vn_qtde_nf
           from nf_compl_serv
          where notafiscal_id = en_notafiscal_id;
         --
      exception
         when others then
         vn_qtde_nf := 0;
      end;
      --
      if nvl(vn_qtde_nf,0) > 0 then
         --
         update nf_compl_serv nf
            set nf.dm_nat_oper = vn_dm_nat_oper
          where nf.notafiscal_id = en_notafiscal_id;
         --
      else
         --
         insert into nf_compl_serv ( notafiscal_id
                                   , dm_nat_oper
                                   )
                            values
                                   ( en_notafiscal_id -- notafiscal_id
                                   , vn_dm_nat_oper -- dm_nat_oper
                                   );
         --
      end if;
      --
   end if;
   --
   vn_fase := 99.14;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo) = 'DM_REG_TRIB' and
      nvl(vn_dm_reg_trib, 0) in (1, 2, 3, 4, 5, 6) and
      vv_mensagem is null then
      --
      vn_fase := 99.15;
      --
      begin
         --
         select count(1)
           into vn_qtde_nf
           from nf_compl_serv
          where notafiscal_id = en_notafiscal_id;
         --
      exception
         when others then
         vn_qtde_nf := 0;
      end;
      --
      if nvl(vn_qtde_nf,0) > 0 then
         --
         update nf_compl_serv nf
            set nf.dm_reg_trib = vn_dm_reg_trib
          where nf.notafiscal_id = en_notafiscal_id;
         --
      else
         --
         insert into nf_compl_serv ( notafiscal_id
                                   , dm_reg_trib
                                   )
                            values
                                   ( en_notafiscal_id -- notafiscal_id
                                   , vn_dm_reg_trib -- dm_reg_trib
                                   );
         --
      end if;
      --
   end if;
   --
   vn_fase := 99.16;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo) = 'QR_CODE' and
      vv_qr_code is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.17;
      --
      update nota_fiscal nf
         set nf.qr_code = vv_qr_code
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.18;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo) = 'DM_LEGADO' and
      nvl(vn_dm_legado, 0) in (0, 1, 2, 3, 4) and
      vv_mensagem is null then
      --
      vn_fase := 99.19;
      --
      gt_row_nota_fiscal.dm_legado := vn_dm_legado;
      gn_dm_legado                 := vn_dm_legado;
      --
      update nota_fiscal nf
         set nf.dm_legado = vn_dm_legado
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.20;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo) = 'NRO_PROTOCOLO' and
      nvl(vn_nro_protocolo, 0) > 0 and
      vv_mensagem is null then
      --
      vn_fase := 99.21;
      --
      update nota_fiscal nf
         set nf.nro_protocolo = vn_nro_protocolo
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.22;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      trim(ev_atributo) = 'DT_AUT_SEFAZ' and
      vd_dt_aut_sefaz is not null and
      vv_mensagem is null then
      --
      vn_fase := 99.23;
      --
      update nota_fiscal nf
         set nf.dt_aut_sefaz = vd_dt_aut_sefaz
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.24;
   --
   if nvl(en_notafiscal_id,0) > 0
      and trim(ev_atributo) = 'DM_IND_ATIV_PART'
      and nvl(vn_dm_ind_ativ_part,-1) in (0, 1)
      and vv_mensagem is null
      then
      --
      vn_fase := 99.25;
      --
      update nota_fiscal nf
         set nf.dm_ind_ativ_part = vn_dm_ind_ativ_part
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.26;
   --
   if nvl(en_notafiscal_id,0) > 0
      and trim(ev_atributo) = 'DM_MOT_DES_ICMS_PART'
      and nvl(vn_dm_mot_des_icms_part,-1) in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 90)--between 1 and 16
      and vv_mensagem is null
      then
      --
      vn_fase := 99.27;
      --
      update nota_fiscal nf
         set nf.dm_mot_des_icms_part = vn_dm_mot_des_icms_part
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.28;
   --
   if nvl(en_notafiscal_id,0) > 0
      and trim(ev_atributo) = 'DM_CALC_ICMSST_PART'
      and nvl(vn_dm_calc_icmsst_part,-1) in (0, 1)
      and vv_mensagem is null
      then
      --
      vn_fase := 99.29;
      --
      update nota_fiscal nf
         set nf.dm_calc_icmsst_part = vn_dm_calc_icmsst_part
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.30;
   --
   if nvl(en_notafiscal_id,0) > 0
      and trim(ev_atributo) = 'URL_CHAVE'
      and trim(vv_url_chave) is not null
      and vv_mensagem is null
      then
      --
      vn_fase := 99.31;
      --
      update nota_fiscal nf
         set nf.URL_CHAVE = vv_url_chave
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.32;
   --
   if nvl(en_notafiscal_id,0)    > 0
      and trim(ev_atributo)      = 'COD_MENSAGEM'
      and nvl(vn_cod_mensagem,0) > 0
      and vv_mensagem            is null
      then
      --
      vn_fase := 99.33;
      --
      update nota_fiscal nf
         set nf.cod_mensagem = vn_cod_mensagem
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
   vn_fase := 99.34;
   --
   if nvl(en_notafiscal_id,0) > 0
      and trim(ev_atributo)   = 'MSG_SEFAZ'
      and trim(vv_msg_sefaz)  is not null
      and vv_mensagem         is null
      then
      --
      vn_fase := 99.35;
      --
      update nota_fiscal nf
         set nf.msg_sefaz = vv_msg_sefaz
       where nf.id = en_notafiscal_id;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_INTEGR_NOTA_FISCAL_FF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  Log_Generico.id%TYPE;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_NOTA_FISCAL_FF;

----------------------------------------------------------
-- Procedimento complementa a informação da nota fiscal --
----------------------------------------------------------
PROCEDURE PKB_MONTA_COMPL_INFOR_ADIC ( EST_LOG_GENERICO_NF   IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                     , EN_NOTAFISCAL_ID   IN             NOTA_FISCAL.ID%TYPE
				     , EV_TEXTO_COMPL     IN             NFINFOR_ADIC.CONTEUDO%TYPE ) IS
   --
   vn_fase                  number := 0;
   vn_loggenerico_id        log_generico_nf.id%type;
   vv_texto_compl           nfinfor_adic.conteudo%type := null;
   vv_inf_contr             NFInfor_Adic.conteudo%type := null;
   vn_nfinforadic_id        NFInfor_Adic.id%type := null;
   vn_tam_inf_contr         number := 0;
   vn_tam_compl             number := 0;
   vv_novo_conteudo         NFInfor_Adic.conteudo%type := null;
   vn_tipo_integr_atual     number := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      if trim(ev_texto_compl) is not null then
         --
         vv_texto_compl := trim(ev_texto_compl);
         --
         vn_fase := 2;
         -- Pega o tamanho da informação adicional do contribuinte para tratar e não exceder os 4 mil caracteres permitidos!
         begin
            select inf.conteudo
                 , inf.id
              into vv_inf_contr
                 , vn_nfinforadic_id
              from NFInfor_Adic inf
             where inf.notafiscal_id = en_notafiscal_id
               and inf.dm_tipo       = 0 -- Contribuinte
               and inf.campo        is null;
         exception
            when others then
               vv_inf_contr := null;
         end;
         --
         vn_fase := 3;
         --
         vn_tam_inf_contr := length(vv_inf_contr);
         --
         if nvl(vn_tam_inf_contr,0) > 0 then
            --
            vv_texto_compl := vv_texto_compl || ', ';
            --
         end if;
         -- Pega o tamanho do complemento
         vn_tam_compl := length(vv_texto_compl);
         --
         vn_fase := 4;
         -- Se a informação do contribuinte mais a o complemento exceder os 4 mil carecteres, desconta da informação do Contribuinte
         if (nvl(vn_tam_inf_contr,0) + nvl(vn_tam_compl,0)) > 4000 then
            --
            vn_tam_inf_contr := nvl(vn_tam_inf_contr,0) - nvl(vn_tam_compl,0);
            --
            if nvl(vn_tam_inf_contr,0) < 0 then
               --
               vn_tam_inf_contr := nvl(vn_tam_inf_contr,0) * (-1);
               --
            end if;
            --
         end if;
         --
         vn_fase := 5;
         -- Monta o conteúdo novo da Informação do Contribuinte
         vv_novo_conteudo := vv_texto_compl || substr(vv_inf_contr, 1, vn_tam_inf_contr);
         --
         vn_fase := 6;
         -- Trata o tipo de integração para não atrapalhar as demais notas fiscais
         vn_tipo_integr_atual := gn_tipo_integr;
         -- Se tem ID da informação Adicional do Contribuinte, então somente atualiza
         if nvl(vn_nfinforadic_id,0) > 0 then
            gn_tipo_integr := 0;
         else -- Senão, cria o registro de informação Adicional do Contribuinte
            gn_tipo_integr := 1;
         end if;
         -- Atualiza a informação do contribuinte!
         --
         pk_csf_api.gt_row_NFInfor_Adic := null;
         --
         vn_fase := 7;
         --
         pk_csf_api.gt_row_NFInfor_Adic.id                 := vn_nfinforadic_id;
         pk_csf_api.gt_row_NFInfor_Adic.notafiscal_id      := en_notafiscal_id;
         pk_csf_api.gt_row_NFInfor_Adic.dm_tipo            := 0; -- Contribuinte
         pk_csf_api.gt_row_NFInfor_Adic.infcompdctofis_id  := null;
         pk_csf_api.gt_row_NFInfor_Adic.campo              := null;
         pk_csf_api.gt_row_NFInfor_Adic.conteudo           := vv_novo_conteudo;
         pk_csf_api.gt_row_NFInfor_Adic.origproc_id        := null;
         --
         vn_fase := 8;
         --
         -- Chama o procedimento de validação dos dados da Informação Adicional da Nota Fiscal
         pkb_integr_nfinfor_adic ( est_log_generico_nf     => est_log_generico_nf
                                 , est_row_NFInfor_Adic => pk_csf_api.gt_row_NFInfor_Adic
                                 , en_cd_orig_proc      => null );
         --
         gn_tipo_integr := vn_tipo_integr_atual;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_monta_compl_infor_adic fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_MONTA_COMPL_INFOR_ADIC;

---------------------------------------------------------------------------------------------
-- Procedimento valida informação de exportação                                            --
-- Verifica se o cfop informado no Item é de Exportação (Tipo "7")                         --
-- então deve obrigatóriamente constar informações nos campos "UF_Embarq" e "Local_Embarq" --
---------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_INFOR_EXPORTACAO ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                      , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_qtde_exportacao number := 0;
   vv_UF_Embarq       Nota_Fiscal.UF_Embarq%TYPE := null;
   vv_Local_Embarq    Nota_Fiscal.Local_Embarq%TYPE := null;
   vn_qtde_exp        number;
   vn_soma_export     number;
   --
   cursor c_exportacao is
   select count(1) qtde
     from Item_Nota_fiscal itnf
    where itnf.notafiscal_id    = en_notafiscal_id
      and substr(itnf.cfop,1,1) = '7';
   --
   cursor c_itens_export is
      select id
           , qtde_comerc
           , nro_item
        from item_nota_fiscal
       where notafiscal_id = en_notafiscal_id
         and substr(cfop,1,1) = '7';
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Dados de Itens de exportação
      open c_exportacao;
      fetch c_exportacao into vn_qtde_exportacao;
      if c_exportacao%notfound then
         vn_qtde_exportacao := 0;
      end if;
      close c_exportacao;
      --
      begin
         --
         select count(1)
           into vn_qtde_exp
           from item_nota_fiscal it
              , itemnf_export ie
          where it.notafiscal_id = en_notafiscal_id
            and it.id = ie.itemnf_id;
         --
      exception
         when others then
         vn_qtde_exp := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde_exportacao,0) > 0 then
         --
         vn_fase := 4;
         -- Verifica se foi informado os campos "UF_Embarq" e "Local_Embarq" na nota fiscal
         vv_uf_embarq     := gt_row_nota_fiscal.uf_embarq;
         vv_local_embarq  := gt_row_nota_fiscal.local_embarq;
         --
         vn_fase := 5;
         --
         if trim( vv_uf_embarq ) is null then
            --
            vn_fase := 5.1;
            --
            gv_mensagem_log := '"Sigla da UF onde ocorrerá o Embarque dos produtos" da Nota Fiscal não informado.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 6;
         --
         if trim( vv_local_embarq ) is null then
            --
            vn_fase := 6.1;
            --
            gv_mensagem_log := '"Local onde ocorrerá o Embarque dos produtos" da Nota Fiscal não informado.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         if nvl(vn_qtde_exp,0) > 0 then -- Verifica se a nota tem registro na tabela itemnf_export
            --
            for rec in c_itens_export loop
               exit when c_itens_export%notfound or (c_itens_export%notfound) is null;
               --
               begin
                  --
                  select sum(qtde_export)
                    into vn_soma_export
                    from itemnf_export
                   where itemnf_id = rec.id;
                  --
               exception
                  when others then
                     vn_soma_export := -1;
               end;
               --
               if nvl(vn_soma_export,-1) >= 0
                  and nvl(vn_soma_export,0) <> nvl(rec.qtde_comerc,0) then
                  --
                  vn_fase := 6.2;
                  --
                  gv_mensagem_log := 'Somatório das quantidades informadas na Exportacao Indireta (' || nvl(vn_soma_export,0) || ') não corresponde a quantidade total comercializada do item (' || nvl(rec.qtde_comerc,0) || '). Número do item: ' || rec.nro_item || '.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end loop;
            --
         end if;
         --
      else
         --
         vn_fase := 7;
         --
         update nota_fiscal
            set uf_embarq = null
              , local_embarq = null
              , local_despacho = null
          where id = en_notafiscal_id;
         --
         vn_fase := 8;
         --
         if nvl(vn_qtde_exp,0) > 0 then
            --
            vn_fase := 8.1;
            --
            gv_mensagem_log := 'Informações de comércio exterior deve ser informado apenas no caso de operação com o exterior.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_infor_exportacao fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_INFOR_EXPORTACAO;

-----------------------------------------------------------------------------------
-- Procedimento valida informações de Importação                                 --
-- Verifica se o cfop informado no Item é do tipo de Importação ("3")            --
-- Se for deve obrigatóriamente existir a informação da Declaração de Importação --
-----------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_INFOR_IMPORTACAO ( EST_LOG_GENERICO_NF IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                      , EN_NOTAFISCAL_ID IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_qtde_di         number := 0;
   vn_qtde_adicao     number := 0;
   --
   cursor c_item is
   select itnf.id
        , itnf.cod_item
        , itnf.descr_item
     from nota_fiscal      nf
        , Item_Nota_fiscal itnf
    where nf.id              = en_notafiscal_id
      and nf.dm_ind_emit     = 0 -- Emissão Própria
      and itnf.notafiscal_id = nf.id
      and itnf.cfop         in (3000, 3100, 3101, 3102, 3126, 3127, 3551, 3556, 3930, 3949)
    order by itnf.id;
   --
   cursor c_impor ( en_itemnf_id in item_nota_fiscal.id%type ) is
   select di.*
     from ItemNF_Dec_Impor  di
    where di.itemnf_id = en_itemnf_id
    order by di.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Dados do Item da importação
      for rec in c_item
      loop
         --
         exit when c_item%notfound or (c_item%notfound) is null;
         --
         vn_fase := 3;
         --
         gv_cabec_log_item := 'Item: ' || rec.cod_item || '-' || rec.descr_item || chr(10);
         --
         -- Verifica se informações de declaração da importação
         begin
            select count(1)
              into vn_qtde_di
              from itemnf_dec_impor di
                 , itemnfdi_adic    ad
             where di.itemnf_id       = rec.id
               and ad.itemnfdi_id (+) = di.id;
         exception
            when no_data_found then
               vn_qtde_di := 0;
         end;
         --
         vn_fase := 4;
         -- Se não tem Declaração de Importação informadada, registra o erro de validação
         if nvl(vn_qtde_di,0) <= 0 then
            --
            vn_fase := 4.1;
            --
            gv_mensagem_log := 'Não foi informado Declaração de Importação com Adições para Nota Fiscal de Importação.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 5;
         -- Verifica se existe mais de 100 registros de DI para o item
         begin
            select count(1) qtde
              into vn_qtde_di
              from itemnf_dec_impor di
             where di.itemnf_id = rec.id;
         exception
            when others then
               vn_qtde_di := 0;
         end;
         --
         vn_fase := 6;
         --
         if nvl(vn_qtde_di,0) > 100 then
            --
            vn_fase := 6.1;
            --
            gv_mensagem_log := 'Não pode ser informado mais de 100 registro de Declaração de Importação para o item.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_cabec_log_item || gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 7;
         --
         for rec2 in c_impor (rec.id)
         loop
            --
            exit when c_impor%notfound or (c_impor%notfound) is null;
            --
            vn_fase := 8;
            --
            begin
               select count(1)
                 into vn_qtde_adicao
                 from itemnfdi_adic
                where itemnfdi_id = rec2.id;
            exception
               when others then
                  vn_qtde_adicao := 0;
            end;
            --
            vn_fase := 8.1;
            --
            if nvl(vn_qtde_adicao,0) > 100 then
               --
               vn_fase := 8.2;
               --
               gv_mensagem_log := 'Não pode ser informado mais de 100 registro de Adições para a  Declaração de Importação Nº '||rec2.nro_di||'.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_cabec_log_item || gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            if nvl(rec2.dm_tp_via_transp ,-1) = -1 then
               --
               update ItemNF_Dec_Impor
                  set dm_tp_via_transp = 1
                    , VAFRMM = nvl(rec2.VAFRMM,0)
                where id = rec2.id;  
               --
            end if;
            --
            if nvl(rec2.dm_tp_intermedio ,-1) = -1 then
               --
               update ItemNF_Dec_Impor
                  set dm_tp_intermedio = 1
                where id = rec2.id;  
               --
            end if;            
            --
            -- Valida CNPJ
            --
            if rec2.cnpj is not null then
               --
               if (pk_csf.fkg_is_numerico ( ev_valor =>  rec2.cnpj ) = false)
                  or (nvl(pk_valida_docto.fkg_valida_cpf_cgc(ev_numero => rec2.cnpj ), 0) = 0) then
                  --
                  gv_mensagem_log := 'O CNPJ do adquirente ('|| rec2.cnpj ||') está inválido.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --                    
               end if;                       
               --
            end if; 
            --
            -- Valida UF
            --
            if rec2.uf_terceiro is not null
               and pk_csf.fkg_uf_valida ( ev_sigla_estado => rec2.uf_terceiro ) = false 
               then
                  --
                  vn_fase := 8.3;
                  --
                  gv_mensagem_log := '"Sigla da UF "('||rec2.uf_terceiro||') está inválida.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );               
               --
            end if;
            --
         end loop;
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_infor_importacao fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_INFOR_IMPORTACAO;

--------------------------------------------------------------------------------------------------------------------------------
-- Procedimento valida informação de Finalidade da Nota Fiscal, Item com CFOP de Devolução, Percentual e Valor de IPI Devolvido
--------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_ITEM_NOTA_DEVOL ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                     , EN_NOTAFISCAL_ID    IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vv_atualiza       varchar2(1) := 'N';
   vn_loggenerico_id log_generico_nf.id%type;
   --
   cursor c_nota is
      select nf.dm_fin_nfe
           , it.id itemnf_id
           , it.nro_item
           , it.cod_item
           , it.percent_devol
           , it.vl_ipi_devol
           , it.cfop
        from nota_fiscal nf
           , item_nota_fiscal it
       where nf.id            = en_notafiscal_id
         and it.notafiscal_id = nf.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   for r_nota in c_nota
   loop
      --
      vn_fase := 2;
      vv_atualiza := 'N';
      --
      -- nota_fiscal.dm_fin_nfe: 1-NF-e normal, 2-NF-e complementar, 3-NF-e de ajuste e 4-Devolução de mercadoria
      if r_nota.dm_fin_nfe = 4 then
         --
         vn_fase := 3;
         vv_atualiza := 'S';
         --
         if r_nota.percent_devol is null then
            r_nota.percent_devol := 0.00;
         end if;
         --
         if r_nota.vl_ipi_devol is null then
            r_nota.vl_ipi_devol  := 0.00;
         end if;
         --
      elsif r_nota.dm_fin_nfe = 2 then
         --
         vn_fase := 3.1;
         vv_atualiza := 'S';
         --
         r_nota.vl_ipi_devol  := null;
         r_nota.percent_devol := null;
         -- 
      else -- r_nota.dm_fin_nfe <> 4 -- 1-NF-e normal, 2-NF-e complementar, 3-NF-e de ajuste e 4-Devolução de mercadoria
         --
         vn_fase := 4;
         -- Tipo de Operação vinculada com CFOP = 3-Devolução
         if pk_csf.fkg_cd_tipooper_conf_cfop ( ev_cfop_cd => r_nota.cfop ) = 3 then
            --
            vn_fase := 5;
            --
            gv_mensagem_log := 'Número do Item = '||r_nota.nro_item||' e Código do Item = '||r_nota.cod_item||'. Se o campo que indica a Finalidade de '||
                               'Emissão da NFe não for 4-Devolução de Mercadoria ('||r_nota.dm_fin_nfe||'), e o CFOP ('||r_nota.cfop||'), utilizado no '||
                               'Item está indicando um CFOP de Operação de Devolução, a Finalidade de Emissão da NFe passará a ser 4-Devolução de Mercadoria.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => informacao
                                , en_referencia_id    => en_notafiscal_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --
            vn_fase := 6;
            vv_atualiza := 'S';
            --
            if r_nota.percent_devol is null then
               r_nota.percent_devol := 0.00;
            end if;
            --
            if r_nota.vl_ipi_devol is null then
               r_nota.vl_ipi_devol  := 0.00;
            end if;
            --
         else -- pk_csf.fkg_cd_tipooper_conf_cfop ( ev_cfop_cd => est_row_item_nota_fiscal.cfop ) <> 3
            --
            vn_fase := 7;
            --
            if nvl(r_nota.percent_devol,0) <> 0 or nvl(r_nota.vl_ipi_devol,0) <> 0 then
               --
               vn_fase := 8;
               --
               gv_mensagem_log := 'Número do Item = '||r_nota.nro_item||' e Código do Item = '||r_nota.cod_item||'. Se o campo que indica a Finalidade de '||
                                  'Emissão da NFe não for 4-Devolução de mercadoria ('||r_nota.dm_fin_nfe||'), os campos de Percentual e Valor de IPI '||
                                  'Devolvido ('||r_nota.percent_devol||' e '||r_nota.vl_ipi_devol||'), deverão ser Nulos.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => en_notafiscal_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            else -- nvl(r_nota.percent_devol,0) <> 0 or nvl(r_nota.vl_ipi_devol,0) <> 0
               --
               vn_fase := 9;
               vv_atualiza := 'S';
               r_nota.percent_devol := null;
               r_nota.vl_ipi_devol  := null;
               --
            end if;
            --
         end if; -- pk_csf.fkg_cd_tipooper_conf_cfop ( ev_cfop_cd => r_nota.cfop ) = 3
         --
      end if; -- r_nota.dm_fin_nfe = 4
      --
      vn_fase := 10;
      --
      if vv_atualiza = 'S' then
         --
         begin
            update item_nota_fiscal it
               set it.percent_devol = r_nota.percent_devol
                 , it.vl_ipi_devol  = r_nota.vl_ipi_devol
             where it.id = r_nota.itemnf_id;
         exception
            when others then
               null;
         end;
         --
      end if;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_item_nota_devol fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => en_notafiscal_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_ITEM_NOTA_DEVOL;

---------------------------------------------------------------------------------------------------------
-- Procedimento valida se existe Notas Fiscais Referênciadas se a finalidade for "2-NF-e complementar" --
---------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_NOTA_REFERENCIADA ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                       , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                number := 0;
   vn_loggenerico_id      log_generico_nf.id%type;
   vn_qtde_nf_referen     number := 0;
   vn_qtde_nf_referen_55  number := 0;
   vn_dm_fin_nfe          nota_fiscal.dm_fin_nfe%type;
   vn_ibge_estado_emit    estado.ibge_estado%type;
   --
   cursor c_ref is
   select *
     from nota_fiscal_referen
    where notafiscal_id = en_notafiscal_id;
   --
   cursor c_ref_nfe_dup is
   select nro_chave_nfe
        , count(1) qtde
     from nota_fiscal_referen
    where notafiscal_id        = en_notafiscal_id
      and trim(nro_chave_nfe) is not null
    group by nro_chave_nfe
   having count(1) > 1;
   --
   cursor c_ref_nf_dup is
   select r.cnpj_emit
        , mf.cod_mod
        , r.serie
        , r.nro_nf
        , count(1) qtde
     from nota_fiscal_referen r
        , mod_fiscal          mf
    where r.notafiscal_id = en_notafiscal_id
      and mf.id           = r.modfiscal_id
      and mf.cod_mod     in ('01', '04')
    group by nro_chave_nfe
        , r.cnpj_emit
        , mf.cod_mod
        , r.serie
        , r.nro_nf
   having count(1) > 1;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      pk_csf.fkg_dmindemit_notafiscal ( en_notafiscal_id => en_notafiscal_id ) = 0 then -- Emissão própria
      --
      vn_fase := 2;
      -- 1-NF-e normal, 2-NF-e complementar, 3-NF-e de ajuste
      vn_dm_fin_nfe := nvl(pk_csf.fkg_dmfinnfe_notafiscal ( en_notafiscal_id  => en_notafiscal_id ),0);
      --
      vn_fase := 3;
      --
      begin
         select count(1)
              , count( case when length(nro_chave_nfe) > 0 then 1 else 0 end )
           into vn_qtde_nf_referen
              , vn_qtde_nf_referen_55
           from nota_fiscal_referen
          where notafiscal_id = en_notafiscal_id;
      exception
         when others then
            vn_qtde_nf_referen    := 0;
            vn_qtde_nf_referen_55 := 0;
      end;
      --
      vn_fase := 4;
      --
      if vn_dm_fin_nfe = 2 then
         --
         vn_fase := 5;
         -- Se não existe Nota Fiscal referênciada, registra o Log
         if nvl(vn_qtde_nf_referen,0) <= 0 then
            --
            gv_mensagem_log := 'Não foi informado as Notas Fiscais Referenciadas para finalidade "NF-e complementar".';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
      vn_fase := 6;
      -- Redução da quantidade máxima de ocorrências para NFe Referenciada
      if nvl(vn_qtde_nf_referen_55,0) > 500 then
         --
         gv_mensagem_log := 'Não pode haver mais de 500 registros de Chave de Acesso Referenciada de NFe.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 7;
      --
      vn_ibge_estado_emit := pk_csf.fkg_estado_ibge_sigla ( ev_sigla_estado => pk_csf.fkg_uf_notafiscalemit ( en_notafiscal_id => en_notafiscal_id ) );
      --
      vn_fase := 8;
      --
      for rec in c_ref
      loop
         --
         exit when c_ref%notfound or (c_ref%notfound) is null;
         --
         vn_fase := 9;
         --
         if vn_dm_fin_nfe = 2 then
            --
            -- UF da NF-e referenciada diferente da UF do emitente (NF-e ou NF modelo 1)
            --
            vn_fase := 10;
            --
            if trim(rec.nro_chave_nfe) is not null then
               --
               vn_fase := 11;
               --
               if vn_ibge_estado_emit <> substr(trim(rec.nro_chave_nfe), 1, 2) then
                  --
                  gv_mensagem_log := 'IBGE do Estado do emitente ('||vn_ibge_estado_emit||'), diferente do IBGE da NF-e referenciada ('||
                                     trim(rec.nro_chave_nfe)||').';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
            vn_fase := 12;
            --
            if trim(rec.ibge_estado_emit) is not null then
               --
               vn_fase := 13;
               --
               if vn_ibge_estado_emit <> trim(rec.ibge_estado_emit) then
                  --
                  gv_mensagem_log := 'IBGE do Estado do emitente ('||vn_ibge_estado_emit||'), diferente do IBGE da NF referenciada ('||
                                     trim(rec.ibge_estado_emit)||').';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
         end if; -- if vn_dm_fin_nfe = 2 then
         --
         vn_fase := 14;
         -- Modelo da NF-e referenciada diferente a 55-Nota Fiscal Eletrônica, 59-Cupom Fiscal Eletrônico - CF-e e 65-Nota Fiscal de Consumidor Eletrônica
         if substr(trim(rec.nro_chave_nfe), 21, 2) not in ('55', '59', '65') then
            --
            gv_mensagem_log := 'Modelo da NF-e/NFC-e/CF-e referenciada, diferente de 55/59/65. ('||trim(rec.nro_chave_nfe)||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end loop;
      --
      vn_fase := 15;
      -- Verificar duplicidade da NF-e referenciada (duplicidade da tag refNFe)
      for rec1 in c_ref_nfe_dup
      loop
         --
         exit when c_ref_nfe_dup%notfound or (c_ref_nfe_dup%notfound) is null;
         --
         vn_fase := 16;
         --
         if nvl(rec1.qtde,0) > 1 then
            --
            gv_mensagem_log := 'Duplicidade de NF-e referenciada (Chave de Acesso "'||rec1.nro_chave_nfe||'"referenciada mais de uma vez).';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end loop;
      --
      vn_fase := 17;
      -- Verificar duplicidade de Nota Fiscal Modelo 1 referenciada (mesmo CNPJ, Modelo, Série, Número)
      -- Verificar duplicidade de Nota Fiscal de Produtor referenciada (mesma IE, Modelo, Série, Número)
      for rec1 in c_ref_nf_dup
      loop
         --
         exit when c_ref_nf_dup%notfound or (c_ref_nf_dup%notfound) is null;
         --
         vn_fase := 18;
         --
         if nvl(rec1.qtde,0) > 1 then
            --
            gv_mensagem_log := 'Rejeição: Duplicidade de NF '||
                               case when rec1.cod_mod = '01' then 'Modelo 1' else 'de Produtor' end||
                               ' referenciada (CNPJ = '||rec1.cnpj_emit||', Modelo = '||rec1.cod_mod||', Série = '||rec1.serie||' e Número = '||rec1.nro_nf||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_nota_referenciada fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_NOTA_REFERENCIADA;

---------------------------------------------------------------
-- Procedimento valida informações adicionais da Nota Fiscal --
---------------------------------------------------------------
PROCEDURE PKB_VALIDA_INFOR_ADIC ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Verifica se as informações da TAG de grupo do campo de uso livre do contribuinte não ultrapassam 10 registros
      begin
         select count(1)
           into vn_qtde
           from nfinfor_adic na
          where na.notafiscal_id = en_notafiscal_id
            and na.dm_tipo       = 0 -- Contribuinte
            and na.campo    is not null;
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde,0) > 10 then
         --
         gv_mensagem_log := 'Não pode haver mais que 10 (dez) registros para a "TAG de grupo do campo de uso livre do contribuinte.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 4;
      -- Valida se as informações da TAG de grupo do campo de uso livre do Fisco não ultrapassam 10 registros
      begin
         select count(1)
           into vn_qtde
           from nfinfor_adic na
          where na.notafiscal_id = en_notafiscal_id
            and na.dm_tipo       = 1 -- Fisco
            and na.campo    is not null;
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 5;
      --
      if nvl(vn_qtde,0) > 10 then
         --
         gv_mensagem_log := 'Não pode haver mais que 10 (dez) registros para a "TAG de grupo do campo de uso livre do Fisco.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 6;
      -- Verifica se as informações da TAG de grupo do campo de uso livre do contribuinte não ultrapassam 10 registros
      begin
         select count(1)
           into vn_qtde
           from nfinfor_adic na
          where na.notafiscal_id = en_notafiscal_id
            and na.dm_tipo       = 0 -- Contribuinte
            and na.campo        is null;
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 7;
      --
      if nvl(vn_qtde,0) > 1 then
         --
         gv_mensagem_log := 'Não pode haver mais que 1 (um) registro para a "Informações Complementares de interesse do Contribuinte.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 8;
      -- Valida se as informações da TAG de grupo do campo de uso livre do Fisco não ultrapassam 10 registros
      begin
         select count(1)
           into vn_qtde
           from nfinfor_adic na
          where na.notafiscal_id = en_notafiscal_id
            and na.dm_tipo       = 1 -- Fisco
            and na.campo        is null;
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 9;
      --
      if nvl(vn_qtde,0) > 1 then
         --
         gv_mensagem_log := 'Não pode haver mais que 1 (um) registro para a "Informações Adicionais de Interesse do Fisco.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_infor_adic fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_INFOR_ADIC;

----------------------------------------------------------------------
-- Valida informações do veículo e reboque utilizados no transporte --
----------------------------------------------------------------------
PROCEDURE PKB_VALIDA_VEIC_TRANSP ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                 , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Valida informação do veículo, só pode haver apenas um registro
      begin
         select count(1)
           into vn_qtde
           from nota_fiscal_transp nft
              , nftransp_veic      v
          where nft.notafiscal_id = en_notafiscal_id
            and v.nftransp_id     = nft.id
            and v.dm_tipo         = 0; -- Veículo
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde,0) > 1 then
         --
         vn_fase := 3.1;
         --
         gv_mensagem_log := 'Não pode haver mais que 1 (um) registro de "Veículo" para transporte.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 4;
      -- Valida informação do reboque, só pode haver apenas um registro
      begin
         select count(1)
           into vn_qtde
           from nota_fiscal_transp nft
              , nftransp_veic      v
          where nft.notafiscal_id = en_notafiscal_id
            and v.nftransp_id     = nft.id
            and v.dm_tipo         = 1; -- Reboque
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 5;
      --
      if nvl(vn_qtde,0) > 2 then
         --
         vn_fase := 5.1;
         --
         gv_mensagem_log := 'Não pode haver mais que 2 (dois) registros de "Reboque" para transporte.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_veic_transp fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_VEIC_TRANSP;

------------------------------------------------------
-- Procedimento valida informação da transportadora --
------------------------------------------------------
PROCEDURE PKB_VALIDA_TRANSPORTADORA ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                    , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_qtde            number := 0;
   vv_cod_mod         mod_fiscal.cod_mod%type;
   --
BEGIN
   --
   vn_fase := 1;
   -- Valida se exite mais de um registro de transporte, registra o log
   begin
      select count(1)
        into vn_qtde
        from nota_fiscal_transp
       where notafiscal_id = en_notafiscal_id;
   exception
      when others then
         vn_qtde := 0;
   end;
   --
   vn_fase := 1.1;
   --
   begin
      --
      select mf.cod_mod
        into vv_cod_mod
        from nota_fiscal nf
           , mod_fiscal mf
       where nf.id = en_notafiscal_id 
         and mf.id = nf.modfiscal_id;
      --
   exception
      when others then
         vv_cod_mod := null;
   end;
   --
   vn_fase := 2;
   --
   if nvl(vn_qtde,0) > 1 then
      --
      vn_fase := 3;
      --
      gv_mensagem_log := 'Existe mais de uma Informação de Transporte ou Modalidade do Frete para a Nota Fiscal.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   elsif nvl(vn_qtde,0) = 0 
     and vv_cod_mod <> '65' then   -- Registra que não informou o transporte
      --
      vn_fase := 4;
      --
      gv_mensagem_log := 'Não existe Informação de Transporte ou Modalidade do Frete para a Nota Fiscal.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_transportadora fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_TRANSPORTADORA;

----------------------------------------------------------------------------------------
-- Procedimento valida informações do Local de Retirada/Entrega                       --
-- Verifica se existe apenas uma informação para cada registro de Retirada ou Entrega --
----------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_NF_LOCAL ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                              , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      begin
         select count(1)
           into vn_qtde
           from nota_fiscal_local
          where notafiscal_id = en_notafiscal_id
            and dm_tipo_local = 0; -- Retirada
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde,0) > 1 then
         --
         vn_fase := 4;
         --
         gv_mensagem_log := 'Existe mais de um "Local de Retirada" informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 5;
      --
      begin
         select count(1)
           into vn_qtde
           from nota_fiscal_local
          where notafiscal_id = en_notafiscal_id
            and dm_tipo_local = 1; -- Entrega
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 6;
      --
      if nvl(vn_qtde,0) > 1 then
         --
         vn_fase := 7;
         --
         gv_mensagem_log := 'Existe mais de um "Local de Entrega" informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_nf_local fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_NF_LOCAL;

-----------------------------------------------------------------------------------------------------------
-- Procedimento valida os itens de combustível - Só pode existir um Item de Combustível por item da nota --
-----------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_ITEM_COMB ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                               , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number := 0;
   vn_p_mix_gn       itemnf_comb.p_mix_gn%type;
   --
   cursor c_item_nf is
   select it.*
     from item_nota_fiscal it
    where it.notafiscal_id = en_notafiscal_id
    order by it.nro_item;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Recupero os itens da nota fiscal
      for rec_item_nf in c_item_nf
      loop
         --
         exit when c_item_nf%notfound or c_item_nf%notfound is null;
         --
         gv_cabec_log_item := rec_item_nf.cod_item||' - '||rec_item_nf.descr_item||chr(10);
         --
         vn_fase := 3;
         -- verifica a quantidade de itens de combustível
         begin
            select count(1)
              into vn_qtde
              from itemnf_comb ic
             where ic.itemnf_id = rec_item_nf.id;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 4;
         --
         if nvl(vn_qtde,0) > 1 then
            --
            vn_fase := 5;
            --
            gv_mensagem_log := 'Existe mais de um registro de "Combustível" informado.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         begin
            --
            select p_mix_gn
              into vn_p_mix_gn
              from itemnf_comb
             where itemnf_id = rec_item_nf.id
               and codprodanp = 210203001;
            --
         exception
            when others then
            --
            vn_p_mix_gn := 0;
            --
         end;
         --
         if nvl(vn_p_mix_gn, -1) = -1
            and pk_csf_api.gt_row_Nota_Fiscal.dm_ind_emit = 0 -- Emissão Propria
            then
            --
            gv_mensagem_log := 'O "percentual de gás natural" é obrigatório quando o "código de produto da ANP" for 210203001.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_item_comb fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_ITEM_COMB;

------------------------------------------------------------------------------------------------------------
-- Procedimento valida informações do Veículo - Só pode existir uma informação de veículo por Nota Fiscal --
------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_ITEM_VEIC ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                               , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number := 0;
   --
   cursor c_item_nf is
   select it.*
     from item_nota_fiscal it
    where it.notafiscal_id = en_notafiscal_id
    order by it.nro_item;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Recupero os itens da nota fiscal
      for rec_item_nf in c_item_nf
      loop
         --
         exit when c_item_nf%notfound or c_item_nf%notfound is null;
         --
         gv_cabec_log_item := rec_item_nf.cod_item||' - '||rec_item_nf.descr_item||chr(10);
         --
         vn_fase := 3;
         -- verifica a quantidade de itens de combustível
         begin
            select count(1)
              into vn_qtde
              from itemnf_veic iv
             where iv.itemnf_id = rec_item_nf.id;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 4;
         --
         if nvl(vn_qtde,0) > 1 then
            --
            vn_fase := 5;
            --
            gv_mensagem_log := 'Existe mais de um registro de "Informação de Veículo" informado.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_item_veic fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_ITEM_VEIC;

----------------------------------------------------------------------------------------------
-- Procedimento valida informações dos totais - Só pode existir um único registro de totais --
----------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_TOTAL_NF ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                              , EN_NOTAFISCAL_ID     IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                   number := 0;
   vn_loggenerico_id         log_generico_nf.id%type;
   vn_qtde_total             number := 0;
   vn_vl_base_calc_icms      number;
   vn_imp_trib_icms          number;
   vn_vl_base_calc_st        number;
   vn_imp_trib_st            number;
   vn_imp_trib_ii            number;
   vn_imp_trib_ipi           number;
   vn_imp_trib_pis           number;
   vn_pis_iss                number;
   vn_imp_trib_cofins        number;
   vn_cofins_iss             number;
   vn_vl_total_item          number;
   vn_vl_frete               number;
   vn_vl_seguro              number;
   vn_vl_desconto            number;
   vn_vl_outro               number;
   vn_vl_total_nf            number;
   vn_imp_icms_st_ret        number;
   vn_empresa_id             empresa.id%type := null;
   vn_dm_valid_total_nfe     empresa.dm_valid_total_nfe%type := 0;
   vv_suframa                nota_fiscal_dest.suframa%type := null;
   vn_dif_valor              number;
   vn_vl_serv_nao_trib       nota_fiscal_total.vl_serv_nao_trib%type := 0;
   vn_vl_total_serv          nota_fiscal_total.vl_total_serv%type := 0;
   vn_vl_tot_trib            nota_fiscal_total.vl_tot_trib%type;
   vn_qtde_cfop_3_7          number;
   vn_vl_toler_nf            number;
   vn_vl_icms_deson          number;
   vn_vl_deducao             number;
   vn_vl_desc_incond         number;
   vn_vl_desc_cond           number;
   vn_vl_outras_ret          number;
   vn_vl_base_calc_iss       number;
   vn_vl_imp_trib_iss        number;
   vn_vl_ret_iss             number;
   vn_vl_ret_pis             nota_fiscal_total.vl_ret_pis%type := 0;
   vn_vl_ret_cofins          nota_fiscal_total.vl_ret_cofins%type := 0;
   vn_vl_ret_csll            nota_fiscal_total.vl_ret_csll%type := 0;
   vn_vl_ret_irrf            nota_fiscal_total.vl_ret_irrf%type := 0;
   vn_vl_base_calc_ret_prev  nota_fiscal_total.vl_base_calc_ret_prev%type := 0;
   vn_vl_ret_prev            nota_fiscal_total.vl_ret_prev%type := 0;
   vn_vl_icms_uf_dest        nota_fiscal_total.vl_icms_uf_dest%type := 0;
   vn_vl_icms_uf_remet       nota_fiscal_total.vl_icms_uf_remet%type := 0;
   vn_vl_pis_st              nota_fiscal_total.vl_pis_st%type := 0;
   vn_vl_cofins_st           nota_fiscal_total.vl_cofins_st%type := 0;
   vn_vl_fcp                 nota_fiscal_total.vl_fcp%type;
   vn_vl_fcp_st              nota_fiscal_total.vl_fcp_st%type;
   vn_vl_fcp_st_ret          nota_fiscal_total.vl_fcp_st_ret%type;
   vn_vl_fcp_difal           nota_fiscal_total.vl_comb_pobr_uf_dest%type;
   vn_vl_ipi_devol           nota_fiscal_total.vl_ipi_devol%type; --#73962
   --
   vn_ajuste_vl_total_item   number := 0;
   vn_vl_base_calc_icms_serv nota_fiscal_total.vl_base_calc_icms%type := 0;
   --
   vn_vl_abat_nt             nota_fiscal_total.vl_abat_nt%type := 0;
   --
   vv_cd_lista_serv          item_nota_fiscal.cd_lista_serv%type; --#72508
   --
   cursor c_nftotal is
   select t.*
     from nota_fiscal_total t
    where t.notafiscal_id = en_notafiscal_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Função retorna o id da empresa através do ID da Nota Fiscal
      vn_empresa_id := pk_csf.fkg_busca_empresa_nf ( en_notafiscal_id => en_notafiscal_id );
      --
      vn_fase := 3;
      -- Função retorna o valor de tolerância para os valores de documentos fiscais (nf) e caso não exista manter 0.03
      vn_vl_toler_nf := pk_csf.fkg_vlr_toler_empresa ( en_empresa_id => vn_empresa_id
                                                     , ev_opcao      => 'NF' );
      --
      vn_fase := 4;
      -- Verifica se a nota é modelo '55' de serviço para ajustar o valor total dos itens
      begin
         select distinct 1
           into vn_ajuste_vl_total_item
           from nota_fiscal      nf
              , mod_fiscal       mf
              , item_nota_fiscal it
          where nf.id            = en_notafiscal_id
            and mf.id            = nf.modfiscal_id
            and mf.cod_mod       = '55'
            and it.notafiscal_id = nf.id
            and it.dm_ind_tot    = 1  -- itens fazem parte da composição do total da nota fiscal
            and it.cd_lista_serv is not null;
      exception
         when others then
            vn_ajuste_vl_total_item := 0;
      end;
      --
      -- #72508 
      vn_fase := 4.1;
      -- Verifica se a nota de serviço                      
      begin
         select 1
           into vv_cd_lista_serv
           from nota_fiscal      nf
              , mod_fiscal       mf
          where nf.id            = en_notafiscal_id
            and mf.id            = nf.modfiscal_id
            and exists (select 1 -- #72960 se existir 1 servico
                          from item_nota_fiscal it
                         where it.cd_lista_serv is not null
                           and it.notafiscal_id = nf.id )
            ;
      exception
         when others then
            vv_cd_lista_serv := null ;
      end;
      --
      vn_fase := 4.2;
      -- verifica a quantidade de totais da nota fiscal
      begin
         select count(1)
           into vn_qtde_total
           from nota_fiscal_total
          where notafiscal_id = en_notafiscal_id;
      exception
         when others then
            vn_qtde_total := 0;
      end;
      --
      vn_fase := 5;
      --
      if nvl(vn_qtde_total,0) > 1 then
         --
         vn_fase := 5.1;
         --
         gv_mensagem_log := 'Existe mais de um registro de "Totais da Nota Fiscal" informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 6;
      --  Se não foi informado os totais, registra o log
      if nvl(vn_qtde_total,0) = 0 then
         --
         vn_fase := 6.1;
         --
         gv_mensagem_log := 'Não foi informado o registro de "Totais da Nota Fiscal".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 7;
      -- Retornar o suframa do destinatario
      vv_suframa := gt_row_nota_fiscal_dest.suframa;
      --
      vn_fase := 8;
      -- Verifica se a empresa valida os totais da Nota Fiscal
      vn_dm_valid_total_nfe := pk_csf.fkg_valid_total_nfe_empresa ( en_empresa_id => vn_empresa_id );
      --
      vn_fase := 9;
      --
      begin
         select count(1)
           into vn_qtde_cfop_3_7
           from item_nota_fiscal inf
          where notafiscal_id         = en_notafiscal_id
            and substr(inf.cfop,1,1) in (3, 7);
      exception
         when others then
            vn_qtde_cfop_3_7 := 0;
      end;
      --
      vn_fase := 10;
      --
      if nvl(vn_dm_valid_total_nfe,0) = 1 -- Sim, valida os totais da nota Fiscal
         and trim(vv_suframa) is null
         --and nvl(vn_qtde_cfop_3_7, 0) <= 0
      then
         -- Valida se tem valor nos itens, deve ter nos totais
         -- Notas referente ao suframa não valida. Legislação sobre incentivos do suframa.
         --
         vn_fase := 11;
         --
         for rec in c_nftotal
         loop
            --
            exit when c_nftotal%notfound or (c_nftotal%notfound) is null;
            --
            vn_vl_base_calc_icms  := 0;
            vn_imp_trib_icms      := 0;
            vn_vl_base_calc_st    := 0;
            vn_imp_trib_st        := 0;
            vn_imp_trib_ii        := 0;
            vn_imp_trib_ipi       := 0;
            vn_imp_trib_pis       := 0;
            vn_pis_iss            := 0;
            vn_imp_trib_cofins    := 0;
            vn_cofins_iss         := 0;
            vn_vl_total_item      := 0;
            vn_vl_frete           := 0;
            vn_vl_seguro          := 0;
            vn_vl_desconto        := 0;
            vn_vl_total_nf        := 0;
            vn_imp_icms_st_ret    := 0;
            vn_vl_serv_nao_trib   := 0;
            vn_vl_total_serv      := 0;
            vn_vl_tot_trib        := 0;
            vn_vl_abat_nt         := 0;
            vn_vl_fcp             := 0;
            vn_vl_fcp_st          := 0;
            vn_vl_fcp_st_ret      := 0;
            vn_vl_fcp_difal       := 0;
            vn_vl_ipi_devol       := 0;   --#73962
            --
            vn_fase := 12;
            --
            if nvl(gt_row_nota_fiscal_emit.dm_reg_trib, 0) <> 1 then
               -- ICMS normal
               begin
                  select round(sum( nvl(imp.vl_base_calc,0) ), 2)
                       , round(sum( nvl(imp.vl_imp_trib,0) ), 2)
                    into vn_vl_base_calc_icms
                       , vn_imp_trib_icms
                    from item_nota_fiscal  it
                       , imp_itemnf        imp
                       , tipo_imposto      ti
                       , cod_st            st
                   where it.notafiscal_id    = rec.notafiscal_id
                     and imp.itemnf_id       = it.id
                     and imp.dm_tipo         = 0 -- 0-imposto, 1-retenção
                     and ti.id               = imp.tipoimp_id
                     and ti.cd               = '1' -- ICMS
                     and st.id               = imp.codst_id
                     and st.cod_st      not in ('30', '40', '41', '50', '60');
               exception
                  when others then
                     vn_vl_base_calc_icms := 0;
                     vn_imp_trib_icms     := 0;
               end;
               --
            else
               -- Soma valores do ICMS para Simples Nacional
               begin
                  --
                  select sum(imp.vl_base_calc)
                       , sum(imp.vl_imp_trib)
                    into vn_vl_base_calc_icms
                       , vn_imp_trib_icms
                    from item_nota_fiscal  inf
                       , imp_itemnf        imp
                       , tipo_imposto      ti
                   where inf.notafiscal_id  = en_notafiscal_id
               and imp.itemnf_id      = inf.id
               and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
               and ti.id              = imp.tipoimp_id
               and ti.cd              = 1; -- ICMS
            --
               exception
                  when others then
                  vn_vl_base_calc_icms := 0;
                  vn_imp_trib_icms := 0;
               end;
               --
            end if;
            --
            vn_fase := 13;
            --
            vn_dif_valor := nvl(rec.vl_base_calc_icms,0) - nvl(vn_vl_base_calc_icms,0);
            --
            vn_fase := 14;
            -- Verifica a "Base de Cálculo do ICMS" é está divergente da soma da "BC" do item da nota fiscal
            if nvl(rec.vl_base_calc_icms,0) <> nvl(vn_vl_base_calc_icms,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 14.1;
               --
               gv_mensagem_log := '"Valor total da Base de Cálculo do ICMS" ('||nvl(rec.vl_base_calc_icms,0)||
                                  ') está divergente da "Soma da Base de Cálculo dos Itens da Nota Fiscal"('||nvl(vn_vl_base_calc_icms,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 15;
            --
            vn_dif_valor := nvl(rec.vl_imp_trib_icms,0) - nvl(vn_imp_trib_icms,0);
            --
            vn_fase := 16;
            -- Verifica se o "Valor Total do ICMS" está divergente da soma do "Imp. Tributado de ICMS" do Item da Nota fiscal
            if nvl(rec.vl_imp_trib_icms,0) <> nvl(vn_imp_trib_icms,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 16.1;
               --
               gv_mensagem_log := '"Valor Total do ICMS" ('||nvl(rec.vl_imp_trib_icms,0)||') está divergente da "Soma do Imposto Tributado '||
                                  'de ICMS dos Itens da Nota Fiscal"('||nvl(vn_imp_trib_icms,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 17;
            -- ICMS ST
            begin
               select round( sum( decode( nf.dm_ind_emit, 1, nvl(imp_st.vl_base_calc, 0)
                                                           , decode(cst_icms.cod_st, '60', 0, nvl(imp_st.vl_base_calc, 0)) ) ), 2)
                    , round( sum( decode( nf.dm_ind_emit, 1, nvl(imp_st.vl_imp_trib, 0)
                                                           , decode(cst_icms.cod_st, '60', 0, nvl(imp_st.vl_imp_trib, 0)) ) ), 2)
                 into vn_vl_base_calc_st
                    , vn_imp_trib_st
                 from nota_fiscal       nf
                    , item_nota_fiscal  it
                    , imp_itemnf        imp_st
                    , tipo_imposto      ti
                    , imp_itemnf        imp_icms
                    , cod_st            cst_icms
                    , tipo_imposto      ti_icms
                where nf.id             = en_notafiscal_id
                  and it.notafiscal_id  = nf.id
                  and imp_st.itemnf_id  = it.id
                  and imp_st.dm_tipo    = 0 -- 0-imposto, 1-retenção
                  and ti.id             = imp_st.tipoimp_id
                  and ti.cd             = '2' --ICMS_ST
                  and it.id             = imp_icms.itemnf_id
                  and imp_icms.dm_tipo  = 0 -- 0-imposto, 1-retenção
                  and cst_icms.id       = imp_icms.codst_id
                  and ti_icms.id        = imp_icms.tipoimp_id
                  and ti_icms.cd in ( '1' ); -- Somente ICMS
            exception
               when others then
                  vn_vl_base_calc_st := 0;
                  vn_imp_trib_st     := 0;
            end;
            --
            vn_fase := 18;
            -- Verifica se existe com imposto do simples nacional
            if nvl(vn_vl_base_calc_st,0) <= 0 and
               nvl(vn_imp_trib_st,0) <= 0 then
               --
               vn_fase := 18.1;
               --
               begin
                  select round(sum(nvl(imp_st.vl_base_calc,0)),2)
                       , round(sum(nvl(imp_st.vl_imp_trib,0)),2)
                    into vn_vl_base_calc_st
                       , vn_imp_trib_st
                    from item_nota_fiscal  it
                       , imp_itemnf        imp_st
                       , tipo_imposto      ti
                       , imp_itemnf        imp_icms
                       , tipo_imposto      ti_icms
                   where it.notafiscal_id  = en_notafiscal_id
                     and imp_st.itemnf_id  = it.id
                     and imp_st.dm_tipo    = 0 -- 0-imposto, 1-retenção
                     and ti.id             = imp_st.tipoimp_id
                     and ti.cd             = '2' --ICMS_ST
                     and it.id             = imp_icms.itemnf_id
                     and imp_icms.dm_tipo  = 0 -- 0-imposto, 1-retenção
                     and nvl(imp_icms.codst_id,0) > 0
                     and ti_icms.id        = imp_icms.tipoimp_id
                     and ti_icms.cd        = '10'; -- Somente Simples Nacional
               exception
                  when others then
                     vn_vl_base_calc_st := 0;
                     vn_imp_trib_st     := 0;
               end;
               --
            end if;
            --
            vn_fase := 19;
            --
            vn_dif_valor := nvl(rec.vl_base_calc_st,0) - nvl(vn_vl_base_calc_st,0);
            --
            vn_fase := 20;
            -- Verifica a "Base de Cálculo do ICMS ST" se está divergente da soma da "BC" do item da nota fiscal
            if nvl(rec.vl_base_calc_st,0) <> nvl(vn_vl_base_calc_st,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 20.1;
               --
               gv_mensagem_log := '"Valor total da Base de Cálculo do ICMS ST" ('||nvl(rec.vl_base_calc_st,0)||') está divergente da "Soma da '||
                                  'Base de Cálculo do ICMS ST dos Itens da Nota Fiscal"('||nvl(vn_vl_base_calc_st,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 21;
            --
            vn_dif_valor := nvl(rec.vl_imp_trib_st,0) - nvl(vn_imp_trib_st,0);
            --
            vn_fase := 22;
            -- Verifica se o "Valor Total do ICMS ST" está divergente da soma do "Imp. Tributado de ICMS ST" do Item da Nota fiscal
            if nvl(rec.vl_imp_trib_st,0) <> nvl(vn_imp_trib_st,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 22.1;
               --
               gv_mensagem_log := '"Valor Total do ICMS ST" ('||nvl(rec.vl_imp_trib_st,0)||') está divergente da "Soma do Imposto '||
                                  'Tributado de ICMS ST dos Itens da Nota Fiscal"('||nvl(vn_imp_trib_st,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 23;
            -- Valor Total do II
            begin
               select round(sum(imp.vl_imp_trib),2)
                 into vn_imp_trib_ii
                 from item_nota_fiscal it
                    , imp_itemnf       imp
                    , tipo_imposto     ti
                where it.notafiscal_id = rec.notafiscal_id
                  and imp.itemnf_id    = it.id
                  and imp.dm_tipo      = 0 -- 0-imposto, 1-retenção
                  and ti.id            = imp.tipoimp_id
                  and ti.cd            = '7'; -- II
            exception
               when others then
                  vn_imp_trib_ii := 0;
            end;
            --
            vn_fase := 24;
            --
            vn_dif_valor := nvl(rec.vl_imp_trib_ii,0) - nvl(vn_imp_trib_ii,0);
            --
            vn_fase := 25;
            -- Verifica se o "Valor Total do II" está divergente da soma do "Imp. Tributado de II" do Item da Nota fiscal
            if nvl(rec.vl_imp_trib_ii,0) <> nvl(vn_imp_trib_ii,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 25.1;
               --
               gv_mensagem_log := '"Valor Total do II" ('||nvl(rec.vl_imp_trib_ii,0)||') está divergente da "Soma do Imposto Tributado de '||
                                  'II dos Itens da Nota Fiscal"('||nvl(vn_imp_trib_ii,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 26;
            -- Valor Total do IPI
            begin
               select round(sum(imp.vl_imp_trib), 2)
                 into vn_imp_trib_ipi
                 from item_nota_fiscal it
                    , imp_itemnf       imp
                    , tipo_imposto     ti
                where it.notafiscal_id = rec.notafiscal_id
                  and imp.itemnf_id    = it.id
                  and imp.dm_tipo      = 0 -- 0-imposto, 1-retenção
                  and ti.id            = imp.tipoimp_id
                  and ti.cd            = '3'; -- IPI
            exception
               when others then
                  vn_imp_trib_ipi := 0;
            end;
            --
            vn_fase := 27;
            --
            vn_dif_valor := nvl(rec.vl_imp_trib_ipi,0) - nvl(vn_imp_trib_ipi,0);
            --
            vn_fase := 28;
            -- Verifica se o "Valor Total do IPI" está divergente da soma do "Imp. Tributado de IPI" do Item da Nota fiscal
            if nvl(rec.vl_imp_trib_ipi,0) <> nvl(vn_imp_trib_ipi,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 28.1;
               --
               gv_mensagem_log := '"Valor Total do IPI" ('||nvl(rec.vl_imp_trib_ipi,0)||') está divergente da "Soma do Imposto Tributado de '||
                                  'IPI dos Itens da Nota Fiscal"('||nvl(vn_imp_trib_ipi,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 29;
            -- Valor do PIS
            begin
               select round(sum(decode(nvl(it.cd_lista_serv,0), 0, nvl(imp.vl_imp_trib,0), 0)),2) -- valor do item produto/mercadoria
                    , round(sum(decode(nvl(it.cd_lista_serv,0), 0, 0, nvl(imp.vl_imp_trib,0))),2) -- valor do item serviço
                 into vn_imp_trib_pis
                    , vn_pis_iss
                 from item_nota_fiscal it
                    , imp_itemnf       imp
                    , tipo_imposto     ti
                where it.notafiscal_id = rec.notafiscal_id
                  and imp.itemnf_id    = it.id
                  and imp.dm_tipo      = 0 -- 0-imposto, 1-retenção
                  and ti.id            = imp.tipoimp_id
                  and ti.cd            = '4'; -- PIS
            exception
               when others then
                  vn_imp_trib_pis := 0;
                  vn_pis_iss      := 0;
            end;
            --
            vn_fase := 30;
            --
            vn_dif_valor := nvl(rec.vl_imp_trib_pis,0) - nvl(vn_imp_trib_pis,0);
            --
            vn_fase := 31;
            -- Verifica se o "Valor Total do PIS" está divergente da soma do "Imp. Tributado de PIS" do Item da Nota fiscal
            if nvl(rec.vl_imp_trib_pis,0) <> nvl(vn_imp_trib_pis,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 31.1;
               --
               gv_mensagem_log := '"Valor Total do PIS" ('||nvl(rec.vl_imp_trib_pis,0)||') está divergente da "Soma do Imposto Tributado de '||
                                  'PIS" dos Itens da Nota Fiscal"('||nvl(vn_imp_trib_pis,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 32;
            --
            vn_dif_valor := nvl(rec.vl_pis_iss,0) - nvl(vn_pis_iss,0);
            --
            vn_fase := 33;
            -- Verifica se o "Valor Total do PIS" está divergente da soma do "PIS sobre ISS" do Item da Nota fiscal
            if nvl(rec.vl_pis_iss,0) <> nvl(vn_pis_iss,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 33.1;
               --
               gv_mensagem_log := '"Valor Total do PIS" ('||nvl(rec.vl_pis_iss,0)||') está divergente da "Soma do Imposto de '||
                                  'PIS sobre ISS" dos Itens da Nota Fiscal"('||nvl(vn_pis_iss,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 33.4;
            --
            begin
               select round(sum(nvl(imp.vl_imp_trib,0)),2)
                 into vn_vl_pis_st
                 from item_nota_fiscal it
                    , imp_itemnf       imp
                    , tipo_imposto     ti
                    , cod_st           cs
                where it.notafiscal_id = rec.notafiscal_id
                  and imp.itemnf_id    = it.id
                  and imp.dm_tipo      = 0 -- 0-imposto, 1-retenção
                  and ti.id            = imp.tipoimp_id
                  and ti.cd            = '4' -- PIS
                  and cs.id            = imp.codst_id
                  and cs.cod_st        in ('5','75');
            exception
               when others then
                  vn_vl_pis_st := 0;
            end;
            --
            vn_dif_valor := nvl(rec.vl_pis_st,0) - nvl(vn_vl_pis_st,0);
            --
            vn_fase := 33.5;
            -- Verifica se o "Valor Total do PIS ST" está divergente da soma do "Soma do PIS ST" do Item da Nota fiscal
            if nvl(rec.vl_pis_st,0) <> nvl(vn_vl_pis_st,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
               --
               vn_fase := 33.6;
               --
               gv_mensagem_log := '"Valor Total do PIS ST" ('||nvl(rec.vl_pis_st,0)||') está divergente da "Soma do Imposto de '||
                                  'PIS ST" dos Itens da Nota Fiscal"('||nvl(vn_vl_pis_st,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 34;
            --
            -- Valor do COFINS
            begin
               select round(sum(decode(nvl(it.cd_lista_serv,0), 0, nvl(imp.vl_imp_trib,0), 0)),2) -- valor do item produto/mercadoria
                    , round(sum(decode(nvl(it.cd_lista_serv,0), 0, 0, nvl(imp.vl_imp_trib,0))),2) -- valor do item serviço
                 into vn_imp_trib_cofins
                    , vn_cofins_iss
                 from item_nota_fiscal it
                    , imp_itemnf       imp
                    , tipo_imposto     ti
                where it.notafiscal_id = rec.notafiscal_id
                  and imp.itemnf_id    = it.id
                  and imp.dm_tipo      = 0 -- 0-imposto, 1-retenção
                  and ti.id            = imp.tipoimp_id
                  and ti.cd            = '5'; -- COFINS
            exception
               when others then
                  vn_imp_trib_cofins := 0;
                  vn_cofins_iss      := 0;
            end;
            --
            vn_fase := 35;
            --
            vn_dif_valor := nvl(rec.vl_imp_trib_cofins,0) - nvl(vn_imp_trib_cofins,0);
            --
            vn_fase := 36;
            -- Verifica se o "Valor Total do COFINS" está divergente da soma do "Imp. Tributado de COFINS" do Item da Nota fiscal
            if nvl(rec.vl_imp_trib_cofins,0) <> nvl(vn_imp_trib_cofins,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 36.1;
               --
               gv_mensagem_log := '"Valor Total do COFINS" ('||nvl(rec.vl_imp_trib_cofins,0)||') está divergente da "Soma do Imposto '||
                                  'Tributado de COFINS" dos Itens da Nota Fiscal"('||nvl(vn_imp_trib_cofins,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 37;
            --
            vn_dif_valor := nvl(rec.vl_cofins_iss,0) - nvl(vn_cofins_iss,0);
            --
            vn_fase := 38;
            -- Verifica se o "Valor Total do COFINS" está divergente da soma do "COFINS sobre ISS" do Item da Nota fiscal
            if nvl(rec.vl_cofins_iss,0) <> nvl(vn_cofins_iss,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 38.1;
               --
               gv_mensagem_log := '"Valor Total do COFINS" ('||nvl(rec.vl_cofins_iss,0)||') está divergente da "Soma do Imposto '||
                                  'COFINS sobre ISS" dos Itens da Nota Fiscal"('||nvl(vn_cofins_iss,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 38.2;
            --
            begin
               select round(sum(nvl(imp.vl_imp_trib,0)),2)
                 into vn_vl_cofins_st
                 from item_nota_fiscal it
                    , imp_itemnf       imp
                    , tipo_imposto     ti
                    , cod_st           cs
                where it.notafiscal_id = rec.notafiscal_id
                  and imp.itemnf_id    = it.id
                  and imp.dm_tipo      = 0 -- 0-imposto, 1-retenção
                  and ti.id            = imp.tipoimp_id
                  and ti.cd            = '5' -- COFINS
                  and cs.id            = imp.codst_id
                  and cs.cod_st        in ('5','75');
            exception
               when others then
                  vn_vl_cofins_st := 0;
            end;
            --
            vn_dif_valor := nvl(rec.vl_cofins_st,0) - nvl(vn_vl_cofins_st,0);
            --
            vn_fase := 38.3;
            -- Verifica se o "Valor Total do COFINS ST" está divergente da soma do "Soma do COFINS ST" do Item da Nota fiscal
            if nvl(rec.vl_cofins_st,0) <> nvl(vn_vl_cofins_st,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
               --
               vn_fase := 38.4;
               --
               gv_mensagem_log := '"Valor Total do COFINS ST" ('||nvl(rec.vl_cofins_st,0)||') está divergente da "Soma do Imposto de '||
                                  'COFINS ST" dos Itens da Nota Fiscal"('||nvl(vn_vl_cofins_st,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 38.5;
            --			
            if nvl(gt_row_nota_fiscal_emit.dm_reg_trib, 0) <> 1 then
               begin
                  select nvl(sum(nvl(imp.vl_fcp, 0)), 0)				
                    into vn_vl_fcp
                    from item_nota_fiscal  inf
                       , imp_itemnf        imp
                       , tipo_imposto      ti
                       , cod_st            cst
                   where inf.notafiscal_id  = en_notafiscal_id
                     and imp.itemnf_id      = inf.id
                     and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
                     and ti.id              = imp.tipoimp_id
                     and ti.cd              = 1 -- ICMS
                     and cst.id             = imp.codst_id
                     and cst.cod_st not in ('30', '40', '41', '50', '60');
               exception
                  when others then
                     vn_vl_fcp := 0;
               end;
               --
            else
               -- Soma valores para Simples Nacional
               begin
                  select nvl(sum(nvl(imp.vl_fcp, 0)), 0)
                    into vn_vl_fcp
                    from item_nota_fiscal  inf
                       , imp_itemnf        imp
                       , tipo_imposto      ti
                   where inf.notafiscal_id  = en_notafiscal_id
                     and imp.itemnf_id      = inf.id
                     and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
                     and ti.id              = imp.tipoimp_id
                     and ti.cd              = 1; -- ICMS
               exception
                  when others then
                     vn_vl_fcp := 0;
               end;
               --
            end if;			
            -- 			
            vn_fase := 38.6;
            --
            vn_dif_valor := nvl(rec.vl_fcp,0) - nvl(vn_vl_fcp,0);			
            --			
            -- Verifica se o "Valor Total do FCP" está divergente da soma do "Soma do FCP" do Item da Nota fiscal
            if nvl(rec.vl_fcp,0) <> nvl(vn_vl_fcp,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
               --
               vn_fase := 38.7;
               --
               gv_mensagem_log := '"Valor Total do FCP" ('||nvl(rec.vl_fcp,0)||') está divergente da "Soma do FCP" '||
			                      'dos Itens da Nota Fiscal"('||nvl(vn_vl_fcp,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --			
            vn_fase := 38.8;
            --            
            begin
               select round( nvl( sum( decode( nf.dm_ind_emit, 1, nvl(imp_st.vl_fcp, 0)
                                                             , decode(cst_icms.cod_st, '60', 0, nvl(imp_st.vl_fcp, 0)) ) ), 0), 2)
                 into vn_vl_fcp_st
                 from nota_fiscal       nf
                    , item_nota_fiscal  it
                    , imp_itemnf        imp_st
                    , tipo_imposto      ti
                    , imp_itemnf        imp_icms
                    , cod_st            cst_icms
                    , tipo_imposto      ti_icms
                where nf.id              = en_notafiscal_id
                  and it.notafiscal_id   = nf.id
                  and imp_st.itemnf_id   = it.id
                  and imp_st.dm_tipo     = 0 -- 0-imposto, 1-retenção
                  and ti.id              = imp_st.tipoimp_id
                  and ti.cd              = '2' --ICMS_ST
                  and imp_icms.itemnf_id = it.id
                  and imp_icms.dm_tipo   = 0 -- 0-imposto, 1-retenção
                  and cst_icms.id        = imp_icms.codst_id
                  and ti_icms.id         = imp_icms.tipoimp_id
                  and ti_icms.cd        in ( '1' );
            exception
               when others then
                  vn_vl_fcp_st := 0;
            end;
            -- 			
            vn_fase := 38.9;
            --
            vn_dif_valor := nvl(rec.vl_fcp_st,0) - nvl(vn_vl_fcp_st,0);     
            --      
            -- Verifica se o "Valor Total do FCP retido por Subst.Trib." está divergente da soma do "Soma do FCP" do Item da Nota fiscal
            if nvl(rec.vl_fcp_st,0) <> nvl(vn_vl_fcp_st,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
               --
               vn_fase := 38.10;
               --
               gv_mensagem_log := '"Valor Total do FCP retido por Subst.Trib." ('||nvl(rec.vl_fcp_st,0)||') está divergente da "Soma do FCP" '||
                            'dos Itens da Nota Fiscal"('||nvl(vn_vl_fcp_st,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --      
            vn_fase := 38.11;
            --
            begin
               select round(nvl(sum(nvl(imp_st.vl_fcp, 0)), 0), 2)
                 into vn_vl_fcp_st_ret
                 from nota_fiscal       nf
                    , item_nota_fiscal  it
                    , imp_itemnf        imp_st
                    , tipo_imposto      ti
                    , imp_itemnf        imp_icms
                    , cod_st            cst_icms
                    , tipo_imposto      ti_icms
                where nf.id              = en_notafiscal_id
                  and it.notafiscal_id   = nf.id
                  and imp_st.itemnf_id   = it.id
                  and imp_st.dm_tipo     = 0 -- 0-imposto, 1-retenção
                  and ti.id              = imp_st.tipoimp_id
                  and ti.cd              = '2' --ICMS_ST
                  and imp_icms.itemnf_id = it.id
                  and imp_icms.dm_tipo   = 0 -- 0-imposto, 1-retenção
                  and cst_icms.id        = imp_icms.codst_id
                  and cst_icms.cod_st    = '60'
                  and ti_icms.id         = imp_icms.tipoimp_id
                  and ti_icms.cd        in ( '1' );
            exception
               when others then
                  vn_vl_fcp_st_ret := 0;
            end;
            -- 			
            vn_fase := 38.12;
            --
            vn_dif_valor := nvl(rec.vl_fcp_st_ret,0) - nvl(vn_vl_fcp_st_ret,0);     
            --      
            -- Verifica se o "Valor Total do FCP retido anteriormente p/ Subst.Trib." está divergente da soma do "Soma do FCP" do Item da Nota fiscal
            if nvl(rec.vl_fcp_st_ret,0) <> nvl(vn_vl_fcp_st_ret,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
               --
               vn_fase := 38.13;
               --
               gv_mensagem_log := '"Valor Total do FCP retido anteriormente p/ Subst.Trib." ('||nvl(rec.vl_fcp_st_ret,0)||') está divergente da "Soma do FCP" '||
                            'dos Itens da Nota Fiscal"('||nvl(vn_vl_fcp_st_ret,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 38.14;
            --			
            if nvl(gt_row_nota_fiscal_emit.dm_reg_trib, 0) <> 1 then
               begin
                  select nvl(sum(nvl(impd.vl_comb_pobr_uf_dest, 0)), 0)        
                    into vn_vl_fcp_difal
                    from item_nota_fiscal     inf
                       , imp_itemnf           imp
                       , imp_itemnf_icms_dest impd                       
                       , tipo_imposto         ti
                       , cod_st               cst
                   where inf.notafiscal_id  = en_notafiscal_id
                     and imp.itemnf_id      = inf.id
                     and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
                     and impd.impitemnf_id  = imp.id                     
                     and ti.id              = imp.tipoimp_id
                     and ti.cd              = 1 -- ICMS
                     and cst.id             = imp.codst_id
                     and cst.cod_st not in ('30', '40', '41', '50', '60');
               exception
                  when others then
                     vn_vl_fcp_difal := 0;
               end;
               --
            else
               -- Soma valores para Simples Nacional
               begin
                  select nvl(sum(nvl(impd.vl_comb_pobr_uf_dest, 0)), 0)
                    into vn_vl_fcp_difal
                    from item_nota_fiscal     inf
                       , imp_itemnf           imp
                       , imp_itemnf_icms_dest impd                        
                       , tipo_imposto         ti
                   where inf.notafiscal_id  = en_notafiscal_id
                     and imp.itemnf_id      = inf.id
                     and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
                     and impd.impitemnf_id  = imp.id                     
                     and ti.id              = imp.tipoimp_id
                     and ti.cd              = 1; -- ICMS
               exception
                  when others then
                     vn_vl_fcp_difal := 0;
               end;
               --
            end if; 			
            -- 			
            vn_fase := 38.15;
            --
            vn_dif_valor := nvl(rec.vl_comb_pobr_uf_dest,0) - nvl(vn_vl_fcp_difal,0);			
            --			
            -- Verifica se o "Valor Total do FCP DIFAL" está divergente da soma do "Soma do FCP" do Item da Nota fiscal
            if nvl(rec.vl_comb_pobr_uf_dest,0) <> nvl(vn_vl_fcp_difal,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
               --
               vn_fase := 38.16;
               --
               gv_mensagem_log := '"Valor Total do FCP DIFAL" ('||nvl(rec.vl_comb_pobr_uf_dest,0)||') está divergente da "Soma do FCP DIFAL" '||
			                      'dos Itens da Nota Fiscal"('||nvl(vn_vl_fcp_difal,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 38.17;
            --
            -- Validação de divergência do IPI Devolvido dos itens e o total da nota #73962
            begin
               select round(sum(nvl(it.vl_ipi_devol, 0)), 2)
                 into vn_vl_ipi_devol
                 from item_nota_fiscal it
                where it.notafiscal_id = rec.notafiscal_id;
            exception
               when others then
                  vn_vl_ipi_devol := 0;
            end;
            
             -- Verifica se o "Valor Total do IPI Devolvido" esta divergente da soma do "Soma do Vl. do IPI Devolvido" do Item da Nota fiscal
            if nvl(rec.vl_ipi_devol,0) <> nvl(vn_vl_ipi_devol,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
               --
               vn_fase := 38.18;
               --
               gv_mensagem_log := '"Valor Total do IPI Devolvido" ('||nvl(rec.vl_ipi_devol,0)||') esta divergente da "Soma do IPI Devolvido '||
                                  'dos Itens da Nota Fiscal"('||nvl(vn_vl_ipi_devol,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memoria
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            -- ==================================================================================
            vn_fase := 39;
            -- Valor Total dos produtos e serviços
            begin
               select round(sum(decode(it.dm_ind_tot, 1, it.vl_item_bruto, 0)), 2)
                    , round(sum(it.vl_frete), 2)
                    , round(sum(it.vl_seguro), 2)
                    , round(sum(it.vl_desc), 2)
                    , round(sum(it.vl_outro), 2)
                 into vn_vl_total_item
                    , vn_vl_frete
                    , vn_vl_seguro
                    , vn_vl_desconto
                    , vn_vl_outro
                 from item_nota_fiscal it
                where it.notafiscal_id  = rec.notafiscal_id;
                  --and it.cd_lista_serv is null;
            exception
               when others then
                  vn_vl_total_item := 0;
                  vn_vl_frete      := 0;
                  vn_vl_seguro     := 0;
                  vn_vl_desconto   := 0;
                  vn_vl_outro      := 0;
            end;
            --
            vn_fase := 40;
            -- Valor Total dos itens de serviços
            begin
               select round(sum(it.vl_item_bruto), 2)
                 into vn_vl_serv_nao_trib
                 from item_nota_fiscal  it
                where it.notafiscal_id  = rec.notafiscal_id
                  and it.cd_lista_serv is not null;
            exception
               when others then
                  vn_vl_serv_nao_trib := 0;
            end;
            --
            vn_fase := 40.1;
            --
            -- Ajustando os valores para nota fiscal de serviço modelo '55'
            if nvl(vn_ajuste_vl_total_item,0) = 1 then
               --
               if nvl(gt_row_nota_fiscal_emit.dm_reg_trib, 0) <> 1 then
                  -- ICMS normal
                  begin
                     select round(sum( nvl(imp.vl_base_calc,0) ), 2)
                       into vn_vl_base_calc_icms_serv
                       from item_nota_fiscal  it
                          , imp_itemnf        imp
                          , tipo_imposto      ti
                          , cod_st            st
                      where it.notafiscal_id    = rec.notafiscal_id
                        and it.cd_lista_serv    is not null
                        and imp.itemnf_id       = it.id
                        and imp.dm_tipo         = 0 -- 0-imposto, 1-retenção
                        and ti.id               = imp.tipoimp_id
                        and ti.cd               = '1' -- ICMS
                        and st.id               = imp.codst_id
                        and st.cod_st      not in ('30', '40', '41', '50', '60');
                  exception
                     when others then
                        vn_vl_base_calc_icms_serv := 0;
                  end;
                  --
               else
                  -- Soma valores do ICMS para Simples Nacional
                  begin
                     --
                     select sum(imp.vl_base_calc)
                       into vn_vl_base_calc_icms_serv
                       from item_nota_fiscal  inf
                          , imp_itemnf        imp
                          , tipo_imposto      ti
                      where inf.notafiscal_id  = en_notafiscal_id
                        and inf.cd_lista_serv  is not null
                        and imp.itemnf_id      = inf.id
                        and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
                        and ti.id              = imp.tipoimp_id
                        and ti.cd              = 1; -- ICMS
                     --
                  exception
                     when others then
                        vn_vl_base_calc_icms_serv := 0;
                  end;
                  --
               end if;
               --
               -- Valor total dos Serviços sob não-incidência ou não tributados pelo ICMS
               if nvl(vn_vl_serv_nao_trib,0) > 0 then
                  --
                  vn_vl_total_serv    := nvl(vn_vl_serv_nao_trib,0);
                  vn_vl_serv_nao_trib := nvl(vn_vl_serv_nao_trib,0) - nvl(vn_vl_base_calc_icms_serv,0);
                  --
                  if vn_vl_serv_nao_trib < 0 then
                     --
                     vn_vl_serv_nao_trib := 0;
                     --
                  end if;
                  --
                  if nvl(vn_vl_total_serv,0) <> nvl(vn_vl_serv_nao_trib,0) then
                     --
                     vn_vl_total_serv := nvl(vn_vl_total_serv,0) - nvl(vn_vl_serv_nao_trib,0);
                     --
                  end if;
                  --
               end if;  
               --
               if nvl(vn_vl_total_item,0) > 0 then
                  --
                  vn_vl_total_item := nvl(vn_vl_total_item,0) - nvl(vn_vl_serv_nao_trib,0);
                  --
                  if nvl(vn_vl_total_item,0) < 0 then
                     --
                     vn_vl_total_item := 0;
                     --
                  end if;
                  --
               end if;
               --
            end if;
            --
            vn_fase := 41;
            --
            vn_dif_valor := nvl(rec.vl_total_item,0) - (nvl(vn_vl_total_item,0) + nvl(vn_vl_serv_nao_trib,0));
            --
            vn_fase := 42;
            --
            -- Caso seja modelo '55' (Brasília), não realiza a validação dos valores, pois,
            -- para os esse modelo não é enviado o valor total item (REC.VL_TOTAL_ITEM)
            if nvl(vn_ajuste_vl_total_item, 0) = 0 
              and vv_cd_lista_serv is null then --#72508
              --
              -- Verifica se o "Valor Total dos produtos e serviços" está divergente da soma do "Item Bruto" do Item da Nota fiscal
              if nvl(rec.vl_total_item, 0) <> (nvl(vn_vl_total_item, 0) + nvl(vn_vl_serv_nao_trib, 0)) and
                 ((nvl(vn_dif_valor, 0) < (nvl(vn_vl_toler_nf, 0) * -1)) or
                  (nvl(vn_dif_valor, 0) > nvl(vn_vl_toler_nf, 0))) then
                -- ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
                --
                vn_fase := 42.1;
                --
                gv_mensagem_log := '"Valor Total dos produtos e serviços" (' || nvl(rec.vl_total_item, 0) || ') está divergente da "Soma do ' || 'Item Bruto dos Itens da Nota Fiscal"(' || nvl(vn_vl_total_item, 0) || ').';
                --
                vn_loggenerico_id := null;
                --
                pkb_log_generico_nf(sn_loggenericonf_id => vn_loggenerico_id,
                                    ev_mensagem         => gv_cabec_log,
                                    ev_resumo           => gv_mensagem_log,
                                    en_tipo_log         => erro_de_validacao,
                                    en_referencia_id    => gn_referencia_id,
                                    ev_obj_referencia   => gv_obj_referencia);
                --
                -- Armazena o "loggenerico_id" na memória
                pkb_gt_log_generico_nf(en_loggenericonf_id => vn_loggenerico_id,
                                       est_log_generico_nf => est_log_generico_nf);
                --
              end if;
              --
            end if; -- vn_ajuste_vl_total_item
            --
            vn_fase := 43;
            --
            vn_dif_valor := nvl(rec.vl_serv_nao_trib,0) - nvl(vn_vl_serv_nao_trib,0);
            --
            vn_fase := 44;
            -- Verifica se o "Valor Total dos itens de serviços" está divergente da soma do "Item Bruto" do Item de serviço da Nota fiscal
            if nvl(rec.vl_serv_nao_trib,0) <> nvl(vn_vl_serv_nao_trib,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 44.1;
               --
               gv_mensagem_log := '"Valor Total dos itens de serviços" ('||nvl(rec.vl_serv_nao_trib,0)||') está divergente da "Soma do '||
                                  'Item Bruto dos Itens de Serviço da Nota Fiscal"('||nvl(vn_vl_serv_nao_trib,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 45;
            --
            vn_dif_valor := nvl(rec.vl_frete,0) - nvl(vn_vl_frete,0);
            --
            vn_fase := 46;
            -- Verifica se o "Valor Total do Frete" está divergente da soma do "Valor do Frete" do Item da Nota fiscal
            if nvl(rec.vl_frete,0) <> nvl(vn_vl_frete,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 46.1;
               --
               gv_mensagem_log := '"Valor Total do Frete" ('||nvl(rec.vl_frete,0)||') está divergente da "Soma do Valor do Frete dos Itens da Nota Fiscal"('||
                                  nvl(vn_vl_frete,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 47;
            --
            vn_dif_valor := nvl(rec.vl_seguro,0) - nvl(vn_vl_seguro,0);
            --
            vn_fase := 48;
            -- Verifica se o "Valor Total do Seguro" está divergente da soma do "Valor do Seguro" do Item da Nota fiscal
            if nvl(rec.vl_seguro,0) <> nvl(vn_vl_seguro,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 48.1;
               --
               gv_mensagem_log := '"Valor Total do Seguro" ('||nvl(rec.vl_seguro,0)||') está divergente da "Soma do Valor do Seguro dos '||
                                  'Itens da Nota Fiscal"('||nvl(vn_vl_seguro,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 49;
            --
            vn_dif_valor := nvl(rec.vl_desconto,0) - nvl(vn_vl_desconto,0);
            --
            vn_fase := 50;
            -- Verifica se o "Valor Total do Desconto" está divergente da soma do "Valor do Desconto" do Item da Nota fiscal
            if nvl(rec.vl_desconto,0) <> nvl(vn_vl_desconto,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 50.1;
               --
               gv_mensagem_log := '"Valor Total do Desconto" ('||nvl(rec.vl_desconto,0)||') está divergente da "Soma do Valor do Desconto '||
                                  'dos Itens da Nota Fiscal"('||nvl(vn_vl_desconto,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 51;
            --
            vn_dif_valor := nvl(rec.vl_outra_despesas,0) - nvl(vn_vl_outro,0);
            --
            vn_fase := 52;
            -- Verifica se o "Valor Total de OUtras Despesas" está divergente da soma do "Valor do Outros" do Item da Nota fiscal
            if nvl(rec.vl_outra_despesas,0) <> nvl(vn_vl_outro,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 52.1;
               --
               gv_mensagem_log := '"Valor Total de Outras Despesas" ('||nvl(rec.vl_outra_despesas,0)||') está divergente da "Soma de Outras '||
                                  'Despesas dos Itens da Nota Fiscal"('||nvl(vn_vl_outro,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 53;
            -- Valida Valor Aproximado dos Tributos
            begin
               select round(sum(it.vl_tot_trib_item), 2)
                 into vn_vl_tot_trib
                 from item_nota_fiscal it
                where it.notafiscal_id  = rec.notafiscal_id;
            exception
               when others then
                  vn_vl_tot_trib := 0;
            end;
            --
            vn_fase := 54;
            --
            vn_dif_valor := nvl(rec.vl_tot_trib,0) - nvl(vn_vl_tot_trib,0);
            --
            vn_fase := 55;
            --
            if nvl(rec.vl_tot_trib,0) <> nvl(vn_vl_tot_trib,0) and
               ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
--               ((nvl(vn_dif_valor,0) < -0.03) or (nvl(vn_dif_valor,0) > 0.03)) then
               --
               vn_fase := 55.1;
               --
               gv_mensagem_log := '"Valida Valor Aproximado dos Tributos" ('||nvl(rec.vl_tot_trib,0)||') está divergente da "Soma de '||
                                  'Valida Valor Aproximado dos Tributos"('||nvl(vn_vl_tot_trib,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 56;
            --
            begin
              --
              select sum(nvl(vl_icms_deson,0))
                into vn_vl_icms_deson
                from imp_itemnf imp
                   , item_nota_fiscal inf
                   , tipo_imposto ti
                   , cod_st cs
               where inf.notafiscal_id = en_notafiscal_id
                 and inf.id = imp.itemnf_id
                 and imp.dm_tipo = 0 -- 0-imposto
                 and imp.tipoimp_id = ti.id
                 and ti.cd = 1
                 and imp.codst_id = cs.id
                 and cs.cod_st in ('20', '30', '40', '41', '50', '70', '90'); -- ICMS
              --
           exception
              when others then
              --
              vn_vl_icms_deson := 0;
              --
           end;
           --
           if nvl(rec.vl_icms_deson,0) <> nvl(vn_vl_icms_deson,0) then
              --
               vn_fase := 56.1;
               --
               gv_mensagem_log := '"Valor do total do ICMS desonerado" ('||nvl(rec.vl_icms_deson,0)||') está divergente da "Soma de '||
                                  'Valor do ICMS desonerado dos Tributos"('||nvl(vn_vl_icms_deson,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
              --
           end if;
           --
           vn_fase := 57;
           --
           begin
              --
              select sum(vl_deducao)
                   , sum(vl_desc_incondicionado)
                   , sum(vl_desc_condicionado)
                   , sum(vl_outra_ret)
                into vn_vl_deducao
                   , vn_vl_desc_incond
                   , vn_vl_desc_cond
                   , vn_vl_outras_ret
                from itemnf_compl_serv ics
                   , item_nota_fiscal inf
               where inf.notafiscal_id = en_notafiscal_id
                 and inf.id = ics.itemnf_id;
              --
           exception
              when others then
              --
              vn_vl_deducao     := 0;
              vn_vl_desc_incond := 0;
              vn_vl_desc_cond   := 0;
              vn_vl_outras_ret  := 0;
              --
           end;
           --
           vn_fase := 57.1;
           --
           if nvl(rec.vl_deducao,0) <> nvl(vn_vl_deducao,0) then
              --
               vn_fase := 57.2;
               --
               gv_mensagem_log := '"Valor total da dedução para a redução da base de cáculo" ('||nvl(rec.vl_deducao,0)||') está divergente da "Soma de '||
                                  'Valor da Dedução dos Tributos"('||nvl(vn_vl_deducao,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
              --
           end if;
           --
           vn_fase := 57.3;
           --
           if nvl(rec.vl_desc_incond,0) <> nvl(vn_vl_desc_incond,0) then
              --
               vn_fase := 57.4;
               --
               gv_mensagem_log := '"Valor total do desconto incondicionado" ('||nvl(rec.vl_desc_incond,0)||') está divergente da "Soma de '||
                                  'Valor do desconto incondicionado dos Tributos"('||nvl(vn_vl_desc_incond,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
              --
           end if;
           --
           vn_fase := 57.5;
           --
           if nvl(rec.vl_desc_cond,0) <> nvl(vn_vl_desc_cond,0) then
              --
               vn_fase := 57.6;
               --
               gv_mensagem_log := '"Valor total do desconto condicionado" ('||nvl(rec.vl_desc_cond,0)||') está divergente da "Soma de '||
                                  'Valor do desconto condicionado dos Tributos"('||nvl(vn_vl_desc_cond,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
              --
           end if;
           --
           vn_fase := 57.7;
           --
           if nvl(rec.vl_outras_ret,0) <> nvl(vn_vl_outras_ret,0) then
              --
               vn_fase := 57.8;
               --
               gv_mensagem_log := '"Valor total de outras retenções" ('||nvl(rec.vl_outras_ret,0)||') está divergente da "Soma de '||
                                  'Valor de outras retenções dos Tributos"('||nvl(vn_vl_outras_ret,0)||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
              --
           end if;
           --
           vn_fase := 58;
           --
           -- Soma valores de ISS
           begin
             select sum(imp.vl_base_calc)
                  , sum(imp.vl_imp_trib)
               into vn_vl_base_calc_iss
                  , vn_vl_imp_trib_iss
               from item_nota_fiscal inf
                  , imp_itemnf       imp
                  , tipo_imposto     ti
              where inf.notafiscal_id = en_notafiscal_id
          and imp.itemnf_id     = inf.id
          and imp.dm_tipo       = 0 -- 0-imposto, 1-retenção
          and ti.id             = imp.tipoimp_id
          and ti.cd             = 6; -- ISS
          exception
             when others then
                vn_vl_base_calc_iss := 0;
                vn_vl_imp_trib_iss  := 0;
          end;
          --
          vn_fase := 58.1;
          --
          if nvl(rec.vl_base_calc_iss,0) <> nvl(vn_vl_base_calc_iss,0) then
             --
             vn_fase := 58.2;
             --
             gv_mensagem_log := '"Valor total da base de cálculo do ISS" ('||nvl(rec.vl_base_calc_iss,0)||') está divergente da "Soma de '||
                                'Valor da base de cálculo de ISS dos Tributos"('||nvl(vn_vl_base_calc_iss,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          if nvl(rec.vl_imp_trib_iss,0) <> nvl(vn_vl_imp_trib_iss,0) then
             --
             vn_fase := 58.3;
             --
             gv_mensagem_log := '"Valor total do ISS" ('||nvl(rec.vl_imp_trib_iss,0)||') está divergente da "Soma de '||
                                'Valor de ISS dos Tributos"('||nvl(vn_vl_imp_trib_iss,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          -- Soma valores de ISS Retido
          --                      
          begin
             select sum(imp.vl_imp_trib)
               into vn_vl_ret_iss
               from item_nota_fiscal inf
                  , imp_itemnf       imp
                  , tipo_imposto     ti
              where inf.notafiscal_id = en_notafiscal_id
                and imp.itemnf_id     = inf.id
                and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
                and ti.id             = imp.tipoimp_id
                and ti.cd             = 6; -- ISS
          exception
             when others then
                vn_vl_ret_iss := 0;
          end;
          -- 
          vn_dif_valor := nvl(rec.vl_ret_iss,0) - nvl(vn_vl_ret_iss,0);
          --
          if nvl(rec.vl_ret_iss,0) <> nvl(vn_vl_ret_iss,0) and
             ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then            
             --
             vn_fase := 58.4;
             --
             gv_mensagem_log := '"Valor total do ISS Retido" ('||nvl(rec.vl_ret_iss,0)||') está divergente da "Soma de '||
                                'Valor de ISS Retido dos Tributos"('||nvl(vn_vl_ret_iss,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          vn_fase := 59;
          --
          -- Soma valores de PIS Retido
          --                      
          begin
             select sum(imp.vl_imp_trib)
               into vn_vl_ret_pis
               from item_nota_fiscal inf
                  , imp_itemnf       imp
                  , tipo_imposto     ti
              where inf.notafiscal_id = en_notafiscal_id
                and imp.itemnf_id     = inf.id
                and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
                and ti.id             = imp.tipoimp_id
                and ti.cd             = 4; -- PIS
          exception
             when others then
                vn_vl_ret_pis := 0;
          end;
          --
          vn_fase := 59.1;
          -- 
          vn_dif_valor := nvl(rec.vl_ret_pis,0) - nvl(vn_vl_ret_pis,0);
          --
          if nvl(rec.vl_ret_pis,0) <> nvl(vn_vl_ret_pis,0) and
             ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then            
             --
             vn_fase := 59.2;
             --
             gv_mensagem_log := '"Valor total do PIS Retido" ('||nvl(rec.vl_ret_pis,0)||') está divergente da "Soma de '||
                                'Valor de PIS Retido dos Tributos"('||nvl(vn_vl_ret_pis,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          vn_fase := 60;
          --
          -- Soma valores de COFINS Retido
          --            
          begin
             select sum(imp.vl_imp_trib)
               into vn_vl_ret_cofins
               from item_nota_fiscal inf
                  , imp_itemnf       imp
                  , tipo_imposto     ti
              where inf.notafiscal_id = en_notafiscal_id
                and imp.itemnf_id     = inf.id
                and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
                and ti.id             = imp.tipoimp_id
                and ti.cd             = 5; -- COFINS
          exception
             when others then
                vn_vl_ret_cofins := 0;
          end;
          --
          vn_fase := 60.1;
          -- 
          vn_dif_valor := nvl(rec.vl_ret_cofins,0) - nvl(vn_vl_ret_cofins,0);
          --
          if nvl(rec.vl_ret_cofins,0) <> nvl(vn_vl_ret_cofins,0) and
             ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then                      
             --
             vn_fase := 60.2;
             --
             gv_mensagem_log := '"Valor total do COFINS Retido" ('||nvl(rec.vl_ret_cofins,0)||') está divergente da "Soma de '||
                                'Valor de COFINS Retido dos Tributos"('||nvl(vn_vl_ret_cofins,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          vn_fase := 61;
          --
          -- Soma valor do CSLL Retido
          --                       
          begin
             select sum(imp.vl_imp_trib)
               into vn_vl_ret_csll
               from item_nota_fiscal inf
                  , imp_itemnf       imp
                  , tipo_imposto     ti
              where inf.notafiscal_id = en_notafiscal_id
                and imp.itemnf_id     = inf.id
                and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
                and ti.id             = imp.tipoimp_id
                and ti.cd             = 11; -- CSLL
          exception
             when others then
                vn_vl_ret_csll := 0;
          end;
          --
          vn_fase := 61.1;
          -- 
          vn_dif_valor := nvl(rec.vl_ret_csll,0) - nvl(vn_vl_ret_csll,0);
          --
          if nvl(rec.vl_ret_csll,0) <> nvl(vn_vl_ret_csll,0) and
             ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then                      
             --
             vn_fase := 61.2;
             --
             gv_mensagem_log := '"Valor total do CSLL Retido" ('||nvl(rec.vl_ret_csll,0)||') está divergente da "Soma de '||
                                'Valor de CSLL Retido dos Tributos"('||nvl(vn_vl_ret_csll,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          vn_fase := 62;
          --
          -- Soma valor do IRRF Retido
          --                      
          begin
             select sum(imp.vl_imp_trib)
               into vn_vl_ret_irrf
               from item_nota_fiscal inf
                  , imp_itemnf       imp
                  , tipo_imposto     ti
              where inf.notafiscal_id = en_notafiscal_id
                and imp.itemnf_id     = inf.id
                and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
                and ti.id             = imp.tipoimp_id
                and ti.cd             = 12; -- IRRF
          exception
             when others then
                vn_vl_ret_irrf := 0;
          end;
          --
          vn_fase := 62.1;
          -- 
          vn_dif_valor := nvl(rec.vl_ret_irrf,0) - nvl(vn_vl_ret_irrf,0);
          --
          if nvl(rec.vl_ret_irrf,0) <> nvl(vn_vl_ret_irrf,0) and
             ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then                      
             --
             vn_fase := 62.2;
             --
             gv_mensagem_log := '"Valor total do IRRF Retido" ('||nvl(rec.vl_ret_irrf,0)||') está divergente da "Soma de '||
                                'Valor de IRRF Retido dos Tributos"('||nvl(vn_vl_ret_irrf,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          vn_fase := 63;
          --
          -- Soma valor do INSS Retido
          --            
          begin
             select sum(imp.vl_base_calc)
                  , sum(imp.vl_imp_trib)
               into vn_vl_base_calc_ret_prev
                  , vn_vl_ret_prev
               from item_nota_fiscal inf
                  , imp_itemnf       imp
                  , tipo_imposto     ti
              where inf.notafiscal_id = en_notafiscal_id
                and imp.itemnf_id     = inf.id
                and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
                and ti.id             = imp.tipoimp_id
                and ti.cd             = 13; -- INSS
          exception
             when others then
                vn_vl_base_calc_ret_prev := 0;
                vn_vl_ret_prev := 0;
          end;
          --
          vn_fase := 63.1;
          -- 
          vn_dif_valor := nvl(rec.vl_ret_prev,0) - nvl(vn_vl_ret_prev,0);
          --
          if nvl(rec.vl_ret_prev,0) <> nvl(vn_vl_ret_prev,0) and
             ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then                      
             --
             vn_fase := 63.2;
             --
             gv_mensagem_log := '"Valor total do INSS Retido" ('||nvl(rec.vl_ret_prev,0)||') está divergente da "Soma de '||
                                'Valor de INSS Retido dos Tributos"('||nvl(vn_vl_ret_prev,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          vn_fase := 63.3;
          --
          if nvl(rec.vl_base_calc_ret_prev,0) <> nvl(vn_vl_base_calc_ret_prev,0) then
             --
             vn_fase := 63.4;
             --
             gv_mensagem_log := '"Valor total da Base de Cálculo do INSS Retido" ('||nvl(rec.vl_base_calc_ret_prev,0)||') está divergente da "Soma de '||
                                'Valor da Base do Cálculo de INSS Retido dos Tributos"('||nvl(vn_vl_base_calc_ret_prev,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          vn_fase := 64;
          --
          -- Soma valor do Grupo de Tributação de ICMS para UF de destinatário para o Imposto ICMS
          begin
             select nvl(sum(nvl(id.vl_icms_uf_dest,0)),0)
                  , nvl(sum(nvl(id.vl_icms_uf_remet,0)),0)
               into vn_vl_icms_uf_dest
                  , vn_vl_icms_uf_remet
               from item_nota_fiscal     it
                  , imp_itemnf           ii
                  , tipo_imposto         ti
                  , imp_itemnf_icms_dest id
              where it.notafiscal_id = en_notafiscal_id
          and ii.itemnf_id     = it.id
          and ii.dm_tipo       = 0 -- 0-imposto, 1-retenção
          and ti.id            = ii.tipoimp_id
          and ti.cd            = 1 -- ICMS
          and id.impitemnf_id  = ii.id;
          exception
             when others then
                vn_vl_icms_uf_dest  := 0;
                vn_vl_icms_uf_remet := 0;
          end;
          --
          vn_fase := 64.1;
          --
          if nvl(rec.vl_icms_uf_dest,0) <> nvl(vn_vl_icms_uf_dest,0) then
             --
             vn_fase := 64.2;
             --
             gv_mensagem_log := '"Valor total do ICMS de partilha para a UF do destinatário" ('||nvl(rec.vl_icms_uf_dest,0)||') está divergente da "Soma do '||
                                'Valor total do ICMS de partilha para a UF do destinatário"('||nvl(vn_vl_icms_uf_dest,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          vn_fase := 64.3;
          --
          if nvl(rec.vl_icms_uf_remet,0) <> nvl(vn_vl_icms_uf_remet,0) then
             --
             vn_fase := 64.4;
             --
             gv_mensagem_log := '"Valor total do ICMS de partilha para a UF do remetente" ('||nvl(rec.vl_icms_uf_remet,0)||') está divergente da "Soma de '||
                                'Valor total do ICMS de partilha para a UF do remetente"('||nvl(vn_vl_icms_uf_remet,0)||').';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
          vn_fase := 65;
          --
           begin
              select round(sum(it.vl_abat_nt), 2)
                into vn_vl_abat_nt
                from item_nota_fiscal it
               where it.notafiscal_id  = rec.notafiscal_id;
           exception
              when others then
                 vn_vl_abat_nt    := 0;
          end;
          --
          vn_fase := 65.1;
          --
          vn_dif_valor := nvl(rec.vl_abat_nt,0) - nvl(vn_vl_abat_nt,0);
          --
          vn_fase := 65.2;
          --
          -- Verifica se o "Valor de Abatimento Não Tributado e Não Comercial"  está divergente
          -- da soma do abatimento nao tributado e nao comercial do item da nota fiscal
          if nvl(rec.vl_abat_nt,0) <> nvl(vn_vl_abat_nt,0) and
            ((nvl(vn_dif_valor,0) < (nvl(vn_vl_toler_nf,0) * -1)) or (nvl(vn_dif_valor,0) > nvl(vn_vl_toler_nf,0))) then
            --
            vn_fase := 65.3;
            --
            gv_mensagem_log := '"Valor de Abatimento Não Tributado e Não Comercial" ('||nvl(rec.vl_abat_nt,0)||
                               ') está divergente da "Soma dos Abatimentos Não Tributados e Não Comerciais dos Itens da Nota Fiscal" ('||nvl(vn_vl_abat_nt,0)||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
             --
          end if;
          --
         end loop;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_total_nf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_TOTAL_NF;

----------------------------------------------------------------------------------------------------------------------
-- Procedimento valida informações Fatura/Conbrança da Nota Fiscal - Só pode existir um registro de Fatura/Cobrança --
----------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_NF_COBR ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                             , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number := 0;
   vn_vl_liq         number;
   vn_vl_orig        number;
   vn_vl_total_nf    number;
   vn_vl_dup         number;
   vn_empresa_id     number := 0;
   --
   cursor c_nfcobrdup is
      select d.nfcobr_id
           , d.nro_parc
        from nota_fiscal_cobr nfc
           , nfcobr_dup       d
       where nfc.notafiscal_id = en_notafiscal_id
         and d.nfcobr_id       = nfc.id
    group by d.nfcobr_id
         , d.nro_parc
      having count(*) >  1;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- verifica a quantidade de totais da nota fiscal
      begin
         select count(1)
           into vn_qtde
           from nota_fiscal_cobr nc
          where nc.notafiscal_id = en_notafiscal_id;
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde,0) > 1 then
         --
         vn_fase := 4;
         --
         gv_mensagem_log := 'Existe mais de um registro de "Dados da Cobrança/Fatura" informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      else
         --
         vn_fase := 5;
         --
         vn_empresa_id := pk_csf.fkg_busca_empresa_nf ( en_notafiscal_id => en_notafiscal_id );
         --
         If nvl(pk_csf.fkg_valid_cobr_nf_empresa ( en_empresa_id => vn_empresa_id ), 0) = 1 then
            -- busca o valor da cobrança original e valor liquido
            begin
               select sum(nvl(nc.vl_orig, 0)), sum(nvl(nc.vl_liq, 0))
                 into vn_vl_orig, vn_vl_liq
                 from nota_fiscal_cobr nc
                where nc.notafiscal_id = en_notafiscal_id;
            exception
               when others then
                  vn_vl_orig := 0;			   
                  vn_vl_liq  := 0;
            end;
            --
            vn_fase := 6;
            -- busca o valor no total da nota
            begin
               select sum(nvl(nt.vl_total_nf,0) - nvl(nt.vl_ret_prev,0))
                 into vn_vl_total_nf
                 from nota_fiscal_total nt
                where nt.notafiscal_id = en_notafiscal_id;
            exception
               when others then
                  vn_vl_total_nf := 0;
            end;
            --
            vn_fase := 7;
            -- Se faz a validação se o valor original na tabela cobrança for maior que zero.
            if nvl(vn_vl_orig, 0) > 0 and
               nvl(vn_vl_orig, 0) <> nvl(vn_vl_total_nf, 0) then
               --
               vn_fase := 8;
               --
               gv_mensagem_log := 'O "Valor da Cobrança" ('||vn_vl_orig||') é diferente do "Valor Total da Nota Fiscal"('||vn_vl_total_nf||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 9;
            -- Busca a somatoria das duplicatas.
            begin
              select sum(nvl(n.vl_dup,0))
                into vn_vl_dup
               from nota_fiscal_cobr m
                  , nfcobr_dup       n
              where m.notafiscal_id = en_notafiscal_id
                and m.id            = n.nfcobr_id;
            exception
               when others then
                  vn_vl_dup := 0;
            end;
            --
            vn_fase := 10;
            --
            -- Compara somatória da duplicata com valor da cobrança.
            -- Há notas em que há registro na tabela cobrança maior que zero, porém não há duplicatas. Isso é permitido tb
            -- no manual de Integração do Contribuinte. Nesse caso só irá realizar a validação quando a duplicata for maior que zero.
            if nvl(vn_vl_dup,0) > 0 and
               nvl(vn_vl_liq,0) <> nvl(vn_vl_dup,0) then
               --
               vn_fase := 10.1;
               --
               gv_mensagem_log := 'O "Valor da Cobrança" ('||vn_vl_liq||') é diferente da Somatória das Duplicatas ('||vn_vl_dup||').';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
         vn_fase := 11;
         --
         for rec in c_nfcobrdup loop
            exit when c_nfcobrdup%notfound or (c_nfcobrdup%notfound) is null;
            --
            vn_fase := 11.1;
            --
            gv_mensagem_log := 'Existe mais de uma duplicata com o mesmo "Número da parcela" (' || rec.nro_parc || ') informada.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end loop;
         --
      end if;
      --
      vn_fase := 12;
      --
      begin
         select count(1) qtde
           into vn_qtde
           from nota_fiscal_cobr nfc
              , nfcobr_dup       d
          where nfc.notafiscal_id = en_notafiscal_id
            and d.nfcobr_id       = nfc.id;
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 13;
      --
      if nvl(vn_qtde,0) > 120 then
         --
         vn_fase := 14;
         --
         gv_mensagem_log := 'Não pode existir mais que 120 registros de duplicata para a Nota Fiscal.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_nf_cobr fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_NF_COBR;

---------------------------------------------------------------------------------------------------------------------------------------------
-- Procedimento valida informações do Emitente da Nota Fiscal - Verifica se existe mais de um emitente, ou se não foi informado o emitente --
---------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_NF_EMIT ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                             , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number := 0;
   --
   vn_pessoa_notafiscal_id   pessoa.id%type;
   vv_siglaestado_pessoa_id  estado.sigla_estado%type;
   vv_uf_emit        varchar2(2) := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Verifica a quantidade de emitentes da nota fiscal
      begin
         select count(1)
           into vn_qtde
           from nota_fiscal_emit ne
          where ne.notafiscal_id = en_notafiscal_id;
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      if nvl(vn_qtde,0) = 1 then
         --
         begin
            select uf
              into vv_uf_emit
              from nota_fiscal_emit
             where notafiscal_id = en_notafiscal_id;
         exception
            when others then
            vv_uf_emit := null;
         end;
         --
      end if;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde,0) = 0 and
         gt_row_nota_fiscal.dm_ind_emit = 1 then -- Terceiros
         --
         vn_fase := 4;
         --
         gv_mensagem_log := 'Não foi informado o registro de "Emitente da Nota Fiscal" quando a nota fiscal for de Terceiros.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 5;
      --
      vn_pessoa_notafiscal_id := nvl(pk_csf.fkg_pessoa_notafiscal_id(en_notafiscal_id => en_notafiscal_id),0);
      --
      vn_fase := 6;
      --
      vv_siglaestado_pessoa_id := pk_csf.fkg_siglaestado_pessoaid(en_pessoa_id => vn_pessoa_notafiscal_id );
      --
      vn_fase := 7;
      -- A sigla do estado do emitente da nota fiscal deve ser igual a sigla do estado da empresa
      if nvl(vn_qtde,0) = 1 and
         gt_row_nota_fiscal.dm_ind_emit = 1 and -- Terceiros
         vn_pessoa_notafiscal_id <> 0 and -- se existir a pessoa_id da nota fiscal
         vv_siglaestado_pessoa_id <> vv_uf_emit then
         --
         vn_fase := 8;
         --
         gv_mensagem_log := 'A sigla do estado do emitente da nota fiscal ('||vv_uf_emit||
                            ') deve ser igual a sigla do estado da pessoa/participante da nota fiscal ('||
                            vv_siglaestado_pessoa_id||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 10;
      --
      if nvl(vn_qtde,0) = 0 and -- Não encontrou emitente
         gt_row_nota_fiscal.dm_ind_emit = 0 and -- Emissão Própria
         gt_row_nota_fiscal.dm_arm_nfe_terc = 0 and -- Não armazena xml
         pk_csf.fkg_cod_mod_id((pk_csf.fkg_recup_modfisc_id_nf(en_notafiscal_id))) in ('55') then -- Modelos fiscais '55'
         --
         vn_fase := 11;
         --
         gv_mensagem_log := 'Deve ser informado o registro de "Emitente da Nota Fiscal", para nota fiscal de Emissão Própria, e de Modelos Fiscais "55" ou "65".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_nf_emit fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_NF_EMIT;

-----------------------------------------------------------------------------------------------------------------------------------------------------
-- Procedimento valida informações do Destinatário da Nota Fiscal - Verifica se existe mais de um Destinatário, ou se não foi informado o emitente --
-----------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_NF_DEST ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                             , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number := 0;
   --
   vn_pessoa_notafiscal_id    pessoa.id%type;
   vv_siglaestado_pessoaid    estado.sigla_estado%type;
   vv_cod_mod                 mod_fiscal.cod_mod%type;
   vv_id_estrangeiro          nota_fiscal_dest.id_estrangeiro%type;
   vv_ie                      nota_fiscal_dest.ie%type;
   vn_dm_ind_ie_dest          nota_fiscal_dest.dm_ind_ie_dest%type;
   vn_dm_id_dest              nota_fiscal.dm_id_dest%type;
   vn_modfiscal_id            mod_fiscal.id%type;
   vv_dm_ind_emit             nota_fiscal.dm_ind_emit%type;
   vn_modfiscal65_id          mod_fiscal.id%type;
   vv_cod_pais                nota_fiscal_dest.cod_pais%type;
   vv_UF                      nota_fiscal_dest.uf%type;
   vn_dm_ind_final            nota_fiscal.dm_ind_final%type;
   vn_dm_ind_oper             nota_fiscal.dm_ind_oper%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Verifica a quantidade de destinatário da nota fiscal
      begin
         select count(1)
           into vn_qtde
           from nota_fiscal_dest nd
          where nd.notafiscal_id = en_notafiscal_id;
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde,0) > 1 then
         --
         vn_fase := 4;
         --
         gv_mensagem_log := 'Existe mais de um registro de "Destinatário da Nota Fiscal" informado.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 5;
      --
      begin
         --
         select dm_id_dest
              , modfiscal_id
              , dm_ind_emit    --#4225
              , dm_ind_final
              , dm_ind_oper
           into vn_dm_id_dest
              , vn_modfiscal_id
              , vv_dm_ind_emit --#4225
              , vn_dm_ind_final
              , vn_dm_ind_oper
           from nota_fiscal
          where id = en_notafiscal_id;
         --
      exception
         when others then
         --
         vn_dm_id_dest := 0;
         vn_modfiscal_id := 0;
         vn_dm_ind_final:=null;
         vn_dm_ind_oper:=null;
         --
      end;
      --
      vn_fase := 5.1;
      --
      vn_modfiscal65_id := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => '65' );
      --
      if nvl(vn_qtde,0) = 0 and
         gt_row_nota_fiscal.dm_ind_emit = 0 and -- Emissão própria
         nvl(vn_modfiscal_id,0) <> nvl(vn_modfiscal65_id,0) -- NFC-e (Nota fiscal de consumidor eletrônica)
         then
         --
         vn_fase := 6;
         --
         gv_mensagem_log := 'Não foi informado o registro de "Destinatário da Nota Fiscal" quando a nota fiscal for de Emissão Própria.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 7;
      --
      vn_pessoa_notafiscal_id := nvl(pk_csf.fkg_pessoa_notafiscal_id(en_notafiscal_id => en_notafiscal_id),0);
      --
      vv_siglaestado_pessoaid := pk_csf.fkg_siglaestado_pessoaid(en_pessoa_id => vn_pessoa_notafiscal_id );
      --
      -- A sigla do estado do destinatário da nota fiscal deve ser igual a sigla do estado da empresa
      if nvl(vn_qtde,0) = 1 and
         gt_row_nota_fiscal.dm_ind_emit = 0 and -- Emissão Própria
         vn_pessoa_notafiscal_id <> 0 and -- se existir a pessoa_id da nota fiscal
         vv_siglaestado_pessoaid <> gt_row_nota_fiscal_dest.uf then
         --
         vn_fase := 8;
         --
         gv_mensagem_log := 'A sigla do estado do destinatário da nota fiscal ('|| gt_row_nota_fiscal_dest.uf ||
                            ') deve ser igual a sigla do estado da pessoa/participante da nota fiscal ('||
                            vv_siglaestado_pessoaid ||').';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 8;
      --
      begin
         --
         select id_estrangeiro
              , ie
              , dm_ind_ie_dest
              , cod_pais
              , UF
           into vv_id_estrangeiro
              , vv_ie
              , vn_dm_ind_ie_dest
              , vv_cod_pais
              , vv_UF
           from nota_fiscal_dest
          where notafiscal_id = en_notafiscal_id;
         --
      exception
         when others then
         --
         vv_id_estrangeiro := null;
         vv_ie := null;
         vn_dm_ind_ie_dest := 0;     
         vv_cod_pais:=null;
         vv_UF:=null;
         --
      end;
      --
      vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => vn_modfiscal_id );
      --
      vn_fase := 12;
      --
      if nvl(vn_dm_id_dest, 0) = 3
         and vv_id_estrangeiro is not null
         then
         --
         if length(vv_id_estrangeiro) < 5
            or length(vv_id_estrangeiro) > 20
            then
            --
            gv_mensagem_log := 'A "Identificação do destinatário estrangeiro" não pode conter menos que 5 ou mais que 20 caracteres';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem       => gv_cabec_log
                                , ev_resumo         => gv_mensagem_log
                                , en_tipo_log       => erro_de_validacao
                                , en_referencia_id  => gn_referencia_id
                                , ev_obj_referencia => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         end if;
         --
      end if;
      --
      vn_fase := 10;
      --
      if nvl(vn_dm_ind_ie_dest, -1) = -1 then
         --
         if vv_ie is not null
            and vv_cod_mod in ('55', '65') then
            --
            update nota_fiscal_dest
               set dm_ind_ie_dest = 1
             where notafiscal_id = en_notafiscal_id;
            --
         else
            --
            update nota_fiscal_dest
               set dm_ind_ie_dest = 9
                 --, ie = null -- Atividade #27311
             where notafiscal_id = en_notafiscal_id;
            --
         end if;
         --
      else
         --
         if nvl(vn_dm_ind_ie_dest, 0) = 1
            and vv_ie is null
            and gt_row_nota_fiscal.dm_tp_amb = 1
            then
            --
            gv_mensagem_log := 'A "Inscrição estadual do destinatário" é obrigatória quando o valor do campo "Indicador da IE do Destinatário" for 1 - Contibuinte ICMS';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem       => gv_cabec_log
                                , ev_resumo         => gv_mensagem_log
                                , en_tipo_log       => erro_de_validacao
                                , en_referencia_id  => gn_referencia_id
                                , ev_obj_referencia => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         if nvl(vn_dm_ind_ie_dest, 0) = 2
            and vv_ie is not null
            then
            --
            gv_mensagem_log := 'A "Inscrição estadual do destinatário" não deve ser preenchida no caso do "Indicador da IE do Destinatário" for 2 - Contribuinte isento';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem       => gv_cabec_log
                                , ev_resumo         => gv_mensagem_log
                                , en_tipo_log       => erro_de_validacao
                                , en_referencia_id  => gn_referencia_id
                                , ev_obj_referencia => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         if nvl(vn_dm_id_dest, 0) = 3
            and nvl(vn_dm_ind_ie_dest, 0) <> 9
            then
            --
            if ((gt_row_nota_fiscal.dm_ind_emit = 0) or -- 0-Emissão Própria
                (gt_row_nota_fiscal.dm_ind_emit = 1 and gt_row_nota_fiscal.dm_arm_nfe_terc = 1)) then -- 1-Terceiro, 1-sim
               --
               null;
               --
            else
               --
               gv_mensagem_log := 'No caso de operação com o exterior, o valor do campo "Indicador da IE do Destinatário" deve ser 9 - Não Contribuinte.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem       => gv_cabec_log
                                   , ev_resumo         => gv_mensagem_log
                                   , en_tipo_log       => erro_de_validacao
                                   , en_referencia_id  => gn_referencia_id
                                   , ev_obj_referencia => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      end if;
      --
      vn_fase := 11;
      --
      if vv_cod_mod = '65'
         and vv_ie is not null
         then
         --
         gv_mensagem_log := 'Para NFC-e (modelo 65), a "Inscrição estadual do destinatário" não deve ser preenchida.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem       => gv_cabec_log
                             , ev_resumo         => gv_mensagem_log
                             , en_tipo_log       => erro_de_validacao
                             , en_referencia_id  => gn_referencia_id
                             , ev_obj_referencia => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 12;
      --
      if nvl(vn_dm_id_dest, 0) = 3
         and vv_ie is not null
         and vv_dm_ind_emit = 0    --#4225
         then
         --
         gv_mensagem_log := 'No caso de operação com o exterior, a "Inscrição estadual do destinatário" não deve ser preenchida.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem       => gv_cabec_log
                             , ev_resumo         => gv_mensagem_log
                             , en_tipo_log       => erro_de_validacao
                             , en_referencia_id  => gn_referencia_id
                             , ev_obj_referencia => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );         
         --
      end if;
      --
      vn_fase := 13;
      --
      -- Validações da NT2019.001 para modelos 55 (Nota Fiscal Eletrônica) e 65 (Nota Fiscal de Consumidor Eletrônica)
      if vv_cod_mod in ('55','65') then 
         ---
         vn_fase := 13.1;
         ---
         /*E03a-30 - Se informado idEstrangeiro não pode ser informada IE do destinatário (tag: dest/IE).*/
         ---
         if vv_id_estrangeiro is not null then
           ---
           if vv_ie is not null then
              --
              vn_fase := 13.2;
              --
              gv_mensagem_log := 'Se informado idEstrangeiro não pode ser informada IE do destinatário (tag: dest/IE).';
              --
              vn_loggenerico_id := null;
              --
              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                  , ev_mensagem         => gv_cabec_log
                                  , ev_resumo           => gv_mensagem_log
                                  , en_tipo_log         => erro_de_validacao
                                  , en_referencia_id    => gn_referencia_id
                                  , ev_obj_referencia   => gv_obj_referencia );
              -- Armazena o "loggenerico_id" na memória
              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
              -- 
          end if;
          ---
        end if;
        ---
        vn_fase := 13.3;
        ---
        /*E14-30: o campo nota_fiscal_dest.uf estando preenchido com 'EX', o campo nota_fiscal_dest.cod_pais não pode ser 1058 (Brasil).*/
        ---
        if vv_UF ='EX' then
          ---
          if vv_cod_pais = '1058' then
             --
             vn_fase := 13.4;
             --
             gv_mensagem_log := 'Se endereço do destinatario é no Exterior (tag: dest/UF = EX): - Código do país cPais (id: E14) não pode ser 1058 (Brasil).';
             --
             vn_loggenerico_id := null;
             --
             pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                 , ev_mensagem         => gv_cabec_log
                                 , ev_resumo           => gv_mensagem_log
                                 , en_tipo_log         => erro_de_validacao
                                 , en_referencia_id    => gn_referencia_id
                                 , ev_obj_referencia   => gv_obj_referencia );
             -- Armazena o "loggenerico_id" na memória
             pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                    , est_log_generico_nf => est_log_generico_nf );
             -- 
          end if;
          ---
        end if;
        ---
        /*E16a-40 - Informado indicador de IE do Destinatário não-contribuinte (tag: indIEDest=9) e não é operação com consumidor final (tag: indFinal<>1) em operação de saída (tag: tpNF=1) que não é com exterior (tag:idDest<>3)*/
        ---
        if vn_dm_ind_ie_dest = 9   /*indicador de IE do Destinatário*/
          and vn_dm_ind_final <> 1 /* operação com consumidor final*/
          and vn_dm_ind_oper = 1   /*operação de saída*/
          and vn_dm_id_dest <> 3 then   /*que não é com exterior (tag:idDest<>3)*/
           ---
           vn_fase := 13.4;
           --
           gv_mensagem_log := 'Informado indicador de IE do Destinatário não-contribuinte (tag: indIEDest=9) e não é operação com consumidor final (tag: indFinal<>1) em operação de saída (tag: tpNF=1) que não é com exterior (tag:idDest<>3).';
           --
           vn_loggenerico_id := null;
           --
           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                               , ev_mensagem         => gv_cabec_log
                               , ev_resumo           => gv_mensagem_log
                               , en_tipo_log         => erro_de_validacao
                               , en_referencia_id    => gn_referencia_id
                               , ev_obj_referencia   => gv_obj_referencia );
           -- Armazena o "loggenerico_id" na memória
           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                  , est_log_generico_nf => est_log_generico_nf );
           ---
        end if;
        ---
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_nf_dest fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_NF_DEST;

-----------------------------------------------------------------------------------------------------------------
-- Procedimento valida a quantidade de Itema de uma Nota Fiscal - Só pode ter até 990 itens em uma nota Fiscal --
-----------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_QTDE_ITEM_NF ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                  , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      begin
         select count(1)
           into vn_qtde
           from item_nota_fiscal
          where notafiscal_id = en_notafiscal_id;
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde,0) > 990 then
         --
         vn_fase := 4;
         --
         gv_mensagem_log := 'Exitem mais de 990 Itens especificados na Nota Fiscal.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      elsif nvl(vn_qtde,0) <= 0 then
         --
         vn_fase := 5;
         --
         gv_mensagem_log := 'Não informado os itens da nota fiscal.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_qtde_item_nf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_QTDE_ITEM_NF;

------------------------------------------------------------------------------------------------------------------------------------------------
-- Procedimento valida a quantidade de impostos por item da Nota Fiscal - Só pode existir um registro de cada tipo de imposto por Nota Fiscal --
-- Verifica a quantidade de registro para grupo de tributação de ICMS para o Imposto ICMS                                                     --
------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_QTDE_IMPOSTO_ITEM ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                       , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number := 0;
   --
   cursor c_item_nf is
   select it.*
     from item_nota_fiscal it
    where it.notafiscal_id = en_notafiscal_id
    order by it.nro_item;
   --
   cursor c_tipoimp is
   select ti.*
     from tipo_imposto ti
    order by ti.cd;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Recupero os itens da nota fiscal
      for rec_item_nf in c_item_nf
      loop
         --
         exit when c_item_nf%notfound or c_item_nf%notfound is null;
         --
         gv_cabec_log_item := rec_item_nf.cod_item ||  ' - ' || rec_item_nf.descr_item || chr(10);
         --
         vn_fase := 3;
         -- com o loop de Tipo de Imposto, verifica os impostos do item da Nota Fiscal
         for rec_tipoimp in c_tipoimp
         loop
            --
            exit when c_tipoimp%notfound or (c_tipoimp%notfound) is null;
            --
            vn_fase := 4;
            -- recupera a quantidade do imposto do item
            begin
               select count(1)
                 into vn_qtde
                 from imp_itemnf imp
                where imp.itemnf_id  = rec_item_nf.id -- ID do item da Nota Fiscal
                  and imp.tipoimp_id = rec_tipoimp.id -- ID do Tipo de Imposto
                  and imp.dm_tipo    = 0;
            exception
               when others then
                  vn_qtde := 0;
            end;
            --
            vn_fase := 5;
            --
            if nvl(vn_qtde,0) > 1 then
               --
               vn_fase := 6;
               --
               gv_mensagem_log := 'Existe mais de um registro para o Tipo de Imposto '||rec_tipoimp.sigla||'.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 7;
            --
            begin
               select count(1)
                 into vn_qtde
                 from imp_itemnf           ii
                    , imp_itemnf_icms_dest id
                where ii.itemnf_id    = rec_item_nf.id -- ID do item da Nota Fiscal
                  and ii.tipoimp_id   = rec_tipoimp.id -- ID do Tipo de Imposto
                  and ii.dm_tipo      = 0 -- 0-imposto, 1-retenção
                  and id.impitemnf_id = ii.id;
            exception
               when others then
                  vn_qtde := 0;
            end;
            --
            vn_fase := 8;
            --
            if rec_tipoimp.cd = 1 then -- ICMS
               --
               vn_fase := 9;
               --
               if nvl(vn_qtde,0) > 1 then
                  --
                  vn_fase := 10;
                  --
                  gv_mensagem_log := 'Não pode existir mais de um registro de Grupo de Tributação do ICMS para a UF do destinatário para o Tipo de Imposto '||
                                     rec_tipoimp.sigla||'.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            else
               --
               vn_fase := 11;
               --
               if nvl(vn_qtde,0) > 0 then
                  --
                  vn_fase := 12;
                  --
                  gv_mensagem_log := 'Não pode existir registro de Grupo de Tributação do ICMS para a UF do destinatário para o Tipo de Imposto '||
                                     rec_tipoimp.sigla||'.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            end if;
            --
         end loop;
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_qtde_imposto_item fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_QTDE_IMPOSTO_ITEM;

---------------------------------------------------------------------------------------------
-- Procedimento valida se há as informações obrigatórias para as notas com o imposto issqn --
---------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_INF_ISSQN ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                               , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase             number := 0;
   vn_loggenerico_id   log_generico_nf.id%type;
   vn_existe_iss       number := 0;
   vn_existe_ipi       number := 0;
   vn_dm_ind_incentivo itemnf_compl_serv.dm_ind_incentivo%type;
   vd_dt_exe_serv      nf_compl_serv.dt_exe_serv%type;
   vn_dm_nat_oper      nf_compl_serv.dm_nat_oper%type;
   vn_vl_ret_iss       nota_fiscal_total.vl_ret_iss%type;
   --
   cursor c_nf_emit is
      select t.*
        from nota_fiscal_emit t
       where t.notafiscal_id = en_notafiscal_id;
   --
   cursor c_item_nf is
      select i.*
        from item_nota_fiscal i
           , imp_itemnf       ip
           , tipo_imposto     ti
       where i.notafiscal_id = en_notafiscal_id
         and ip.itemnf_id    = i.id
	 and ti.id           = ip.tipoimp_id
	 and ti.cd           = 6; --ISS
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0
      and gt_row_nota_fiscal.dm_ind_emit = 0
      then
      --
      vn_fase := 2;
      -- Verifica se existe ISS na nfe
      begin
         select count(1)
           into vn_existe_iss
           from imp_itemnf       imp
              , item_nota_fiscal it
              , tipo_imposto     ti
          where it.notafiscal_id = en_notafiscal_id
            and imp.itemnf_id    = it.id
            and ti.id            = imp.tipoimp_id
            and ti.cd            = 6; -- ISS
      exception
         when others then
            vn_existe_iss := 0;
      end;
      --
      if nvl(vn_existe_iss,0) > 0 then
         --
         vn_fase := 3;
         -- Recupera informações o emitente da nf
         for rec_nf_emit in c_nf_emit
         loop
            --
            exit when c_nf_emit%notfound or c_nf_emit%notfound is null;
            --
            vn_fase := 4;
            -- Validação: o Campo CNAE é obrigatório para notas com ISS
            if trim(pk_csf.fkg_converte(rec_nf_emit.cnae)) is null then
               --
               vn_fase := 4.1;
               --
               gv_mensagem_log := 'O "CNAE do Emitente" é obrigatório em Notas Fiscais Sujeitas a ISS ( ou ISSQN ).';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 5;
            -- Validação: o Campo Inscrição Municipal é obrigatório para notas com ISS
            if trim(pk_csf.fkg_converte(rec_nf_emit.im)) is null then
               --
               vn_fase := 5.1;
               --
               gv_mensagem_log := 'A "Inscrição Municipal do Emitente" é obrigatória em Notas Fiscais Sujeitas a ISS ( ou ISSQN ).';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end loop;
         --
         vn_fase := 6;
         -- Recupera informações item da nota fiscal sujeito a ISS
         for rec_item_nf in c_item_nf
         loop
            --
            exit when c_item_nf%notfound or c_item_nf%notfound is null;
            --
            vn_fase := 7;
            -- Validação: o Campo Cidade IBGE é obrigatório para Itens sujeitos a iss
            if nvl(rec_item_nf.cidade_ibge,0) <= 0 then
               --
               vn_fase := 7.1;
               --
               gv_mensagem_log := 'O "Código do IBGE do Município de Ocorrência do Fato Gerador" é obrigatória '||
                                  'em Item da Notas Fiscais Sujeitas a ISS ( ou ISSQN ).';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 8;
            -- Validação: o Campo Cidade IBGE é obrigatório para Itens sujeitos a iss
            if pk_csf.fkg_ibge_cidade ( ev_ibge_cidade => rec_item_nf.cidade_ibge ) = False then
               --
               vn_fase := 8.1;
               --
               gv_mensagem_log := 'O "Código do IBGE do Município de Ocorrência do Fato Gerador" ('||rec_item_nf.cidade_ibge||') está inválido '||
                                  'no Item da Notas Fiscais Sujeitas a ISS ( ou ISSQN ).';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 9;
            -- Validação: o Campo Código da Lista de Serviços é obrigatório para Itens sujeitos a iss
            if nvl(rec_item_nf.cd_lista_serv,0) <= 0 then
               --
               vn_fase := 9.1;
               --
               gv_mensagem_log := 'O "Código da Lista de Serviços" ('||rec_item_nf.cd_lista_serv||') é obrigatório '||
                                  'no Item de Notas Fiscais Sujeitas a ISS ( ou ISSQN ).';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 10;
            -- Validação: o Campo Código da Lista de Serviços é obrigatório para Itens sujeitos a iss
            if nvl(pk_csf.fkg_Tipo_Servico_id ( ev_cod_lst => to_char(rec_item_nf.cd_lista_serv) ),0) <= 0 then
               --
               vn_fase := 10.1;
               --
               gv_mensagem_log := 'O "Código da Lista de Serviços" ('||rec_item_nf.cd_lista_serv||') está inválido '||
                                  'no Item de Notas Fiscais Sujeitas a ISS ( ou ISSQN ).';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 11;
            -- Validação: o Campo Código da Tributação deve estar entre as opções citadas abaixo.
            if trim(rec_item_nf.dm_cod_trib_issqn) not in ('N', 'R', 'S', 'I') then
               --
               vn_fase := 11.1;
               --
               gv_mensagem_log := 'O "Código da Tributação" ('||rec_item_nf.dm_cod_trib_issqn||') está inválido '||
                                  'no Item de Notas Fiscais Sujeitas a ISS ( ou ISSQN ).';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            vn_fase := 12;
            -- Busca se há IPI no item que contém imposto de ISS
            begin
               select count(1)
                 into vn_existe_ipi
                 from imp_itemnf       imp
                    , item_nota_fiscal it
                    , tipo_imposto     ti
                where it.id         = rec_item_nf.id
                  and imp.itemnf_id = it.id
                  and ti.id         = imp.tipoimp_id
		  and ti.cd        in (1, 3, 10);  -- IPI e ICMS e SN
            exception
               when others then
                  vn_existe_ipi := 0;
            end;
            --
            vn_fase := 13;
            -- Validação: Não pode haver IPI no Item que contém imposto de ISS
            if nvl(vn_existe_ipi, 0) > 0  then
               --
               vn_fase := 13.1;
               --
               gv_mensagem_log := 'Não pode haver informações sobre os impostos de IPI e/ou ICMS e/ou Simples Nacional '||
                                  'para o Item que contém informações de ISS ( ou ISSQN ).';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            begin
               --
               select dm_ind_incentivo
                 into vn_dm_ind_incentivo
                 from itemnf_compl_serv
                where itemnf_id = rec_item_nf.id;
               --
            exception
               when others then
                  vn_dm_ind_incentivo := 0;
            end;
            --
            if nvl(vn_dm_ind_incentivo,0) = 0 then
               --
               gv_mensagem_log := 'O Indicador de incentivo Fiscal é obrigatório '||
                                  'para o Item que contém informações de ISS ( ou ISSQN ).';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end loop;
         --
         begin
            select dt_exe_serv
                 , dm_nat_oper
              into vd_dt_exe_serv
                 , vn_dm_nat_oper
              from nf_compl_serv
             where notafiscal_id = en_notafiscal_id;
         exception
            when others then
               vd_dt_exe_serv := null;
               vn_dm_nat_oper := 0;
         end;
         --
         if vd_dt_exe_serv is null then
            --
            gv_mensagem_log := 'A Data da prestação do serviço é obrigatória '||
                               'para a NFe que contém informações de ISS ( ou ISSQN ).';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         if nvl(vn_dm_nat_oper,0) = 0 then
            --
            gv_mensagem_log := 'O Indicador da exigibilidade do ISS é obrigatório '||
                               'para a NFe que contém informações de ISS ( ou ISSQN ).';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
      -- Soma e ajusta o valor de ISS Retido
      begin
         select sum(imp.vl_imp_trib)
           into vn_vl_ret_iss
           from item_nota_fiscal inf
              , imp_itemnf       imp
              , tipo_imposto     ti
          where inf.notafiscal_id = en_notafiscal_id
	    and imp.itemnf_id     = inf.id
	    and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
	    and ti.id             = imp.tipoimp_id
	    and ti.cd             = 6; -- ISS
      exception
         when others then
            vn_vl_ret_iss := 0;
      end;
      --
      -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
      pk_csf_api.gv_objeto := 'pk_csf_api.PKB_VALIDA_INF_ISSQN';
      pk_csf_api.gn_fase   := vn_fase;
      --
      update nota_fiscal_total
         set vl_ret_iss = vn_vl_ret_iss
       where notafiscal_id = en_notafiscal_id;
      --
      -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
      pk_csf_api.gv_objeto := 'pk_csf_api';
      pk_csf_api.gn_fase   := null;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_inf_issqn fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_INF_ISSQN;

--------------------------------------------
-- Procedimento de validações de impostos --
--------------------------------------------
PROCEDURE PKB_VALIDA_IMPOSTO_ITEM ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                  , EN_NOTAFISCAL_ID     IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                    number := 0;
   vn_loggenerico_id          log_generico_nf.id%type;
   vt_log_generico_nf_imp        dbms_sql.number_table;
   vt_log_generico_nf_imp_icms60 dbms_sql.number_table;
   vn_csftipolog_id_imp       csf_tipo_log.id%type;
   vn_csftipolog_id_icms60    csf_tipo_log.id%type;
   vn_qtde_st                 number;
   vn_indice                  pls_integer;
   vn_dm_valid_imp            empresa.dm_valid_imp%type := null;
   vn_dm_impressa             log_generico_nf.dm_impressa%type := null;
   vn_dm_valid_icms60         empresa.dm_valid_icms60%type := null;
   vn_dm_impressa_icms60      log_generico_nf.dm_impressa%type := null;
   vn_qtde_icms               number;
   vn_qtde_pis                number;
   vn_qtde_cofins             number;
   vn_imp_trib                number;
   vn_qtde_iss                number := 0;
   vn_dm_valida_ipi           empresa.dm_valida_ipi%type;
   vn_dm_valida_pis           empresa.dm_valida_pis%type;
   vn_dm_valida_cofins        empresa.dm_valida_cofins%type;
   vv_cod_st_comp             cod_st.cod_st%type;
   vn_base_calc_comp          imp_itemnf.vl_base_calc%type;
   vv_cod_imp                 tipo_imposto.cd%type;
   vn_modfiscal_id            nota_fiscal.modfiscal_id%type;
   vv_modfiscal               mod_fiscal.cod_mod%type;
   --
   cursor c_item_nf is
   select itnf.id
        , itnf.notafiscal_id
        , itnf.item_id
        , itnf.nro_item
        , itnf.cod_item
        , itnf.dm_ind_mov
        , itnf.cean
        , itnf.descr_item
        , itnf.cod_ncm
        , itnf.genero
        , itnf.cod_ext_ipi
        , itnf.cfop_id
        , itnf.cfop
        , itnf.unid_com
        , itnf.qtde_comerc
        , itnf.vl_unit_comerc
        , itnf.vl_item_bruto
        , itnf.cean_trib
        , itnf.unid_trib
        , itnf.qtde_trib
        , itnf.vl_unit_trib
        , itnf.vl_frete
        , itnf.vl_seguro
        , itnf.vl_desc
        , itnf.infadprod
        , itnf.orig
        , itnf.dm_mod_base_calc
        , itnf.dm_mod_base_calc_st
        , itnf.cnpj_produtor
        , itnf.qtde_selo_ipi
        , itnf.vl_desp_adu
        , itnf.vl_iof
        , itnf.classenqipi_id
        , itnf.cl_enq_ipi
        , itnf.selocontripi_id
        , itnf.cod_selo_ipi
        , itnf.cod_enq_ipi
        , itnf.cidade_ibge
        , itnf.cd_lista_serv
        , itnf.dm_ind_apur_ipi
        , itnf.cod_cta
        , itnf.dm_mot_des_icms
        , itnf.dm_cod_trib_issqn
        , nf.empresa_id
        , nf.dm_ind_emit
        , nf.dm_fin_nfe
     from item_nota_fiscal itnf
        , nota_fiscal      nf
    where nf.id              = en_notafiscal_id
      and itnf.notafiscal_id = nf.id
      and itnf.cfop     not in (1604)
    order by itnf.nro_item;
   --
   cursor c_imposto ( en_itemnf_id item_nota_fiscal.id%type ) is
   select imp.id
        , imp.itemnf_id
        , imp.tipoimp_id
        , ti.cd          cd_imp
        , ti.descr
        , ti.sigla
        , imp.dm_tipo
        , imp.codst_id
        , st.cod_st
        , st.descr_st
        , imp.vl_base_calc
        , imp.aliq_apli
        , imp.vl_imp_trib
        , imp.perc_reduc
        , imp.perc_adic
        , imp.qtde_base_calc_prod
        , imp.vl_aliq_prod
        , imp.vl_bc_st_ret
        , imp.vl_icmsst_ret
        , imp.perc_bc_oper_prop
        , imp.estado_id
        , imp.vl_bc_st_dest
        , imp.vl_icmsst_dest
        , imp.vl_icms_oper
        , imp.percent_difer
        , imp.vl_icms_difer
        , imp.vl_imp_nao_dest
     from imp_itemnf   imp
        , cod_st       st
        , tipo_imposto ti
    where imp.itemnf_id = en_itemnf_id
      and st.id(+)      = imp.codst_id
      and ti.id         = imp.tipoimp_id
    order by imp.id;
   --
   cursor c_icms_st ( en_itemnf_id item_nota_fiscal.id%type ) is
   select imp.id
        , imp.itemnf_id
        , imp.tipoimp_id
        , ti.cd          cd_imp
        , ti.descr
        , ti.sigla
        , imp.dm_tipo
        , imp.codst_id
        , imp.vl_base_calc
        , imp.aliq_apli
        , imp.vl_imp_trib
        , imp.perc_reduc
        , imp.perc_adic
        , imp.qtde_base_calc_prod
        , imp.vl_aliq_prod
     from imp_itemnf   imp
        , tipo_imposto ti
    where imp.itemnf_id = en_itemnf_id
      and imp.dm_tipo   = 0  -- Imposto
      and ti.id         = imp.tipoimp_id
      and ti.cd         = 2  -- ICMS-ST
    order by imp.id;
   --
   cursor c_dados_imp ( en_itemnf_id  item_nota_fiscal.id%type
                      , en_cd_imposto tipo_imposto.cd%type
                      , en_dm_tipo    imp_itemnf.dm_tipo%type
                      ) is
   select cst.cod_st
        , ii.vl_base_calc
     from imp_itemnf   ii
        , tipo_imposto ti
        , cod_st       cst
    where ii.itemnf_id = en_itemnf_id
      and ii.dm_tipo   = en_dm_tipo
      and ti.id        = ii.tipoimp_id
      and ti.cd        = en_cd_imposto
      and cst.id(+)    = ii.codst_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      begin
        select nf.modfiscal_id into  vn_modfiscal_id
        from nota_fiscal nf where nf.id = en_notafiscal_id;
      end;
      --
      vv_modfiscal := pk_csf.fkg_cod_mod_id(vn_modfiscal_id);
      --
      -- Recupero os itens da nota fiscal
      for rec_item_nf in c_item_nf
      loop
         --
         exit when c_item_nf%notfound or c_item_nf%notfound is null;
         --
         vn_fase := 2.1;
         --
         vt_log_generico_nf_imp.delete;
         vt_log_generico_nf_imp_icms60.delete;
         --
         -- Recupera os parâmetros que validam os impostos ICMS, ICMS-60, IPI, PIS e COFINS
         if pk_csf.fkg_dmindemit_notafiscal ( en_notafiscal_id => rec_item_nf.notafiscal_id ) = 0 then -- emissão própria
            --
            vn_dm_valid_imp     := pk_csf.fkg_empresa_dmvalimp_emis ( en_empresa_id => rec_item_nf.empresa_id );
            vn_dm_valid_icms60  := pk_csf.fkg_empresa_dmvalicms60_emis ( en_empresa_id => rec_item_nf.empresa_id );
            vn_dm_valida_ipi    := pk_csf.fkg_empresa_dmvalipi_emis ( en_empresa_id => rec_item_nf.empresa_id );
            vn_dm_valida_pis    := pk_csf.fkg_empresa_dmvalpis_emis ( en_empresa_id => rec_item_nf.empresa_id );
            vn_dm_valida_cofins := pk_csf.fkg_empresa_dmvalcofins_emis ( en_empresa_id => rec_item_nf.empresa_id );
            --
         elsif pk_csf.fkg_dmindemit_notafiscal ( en_notafiscal_id => rec_item_nf.notafiscal_id ) = 1 then -- terceiros
               --
               vn_dm_valid_imp     := pk_csf.fkg_empresa_dmvalimp_terc ( en_empresa_id => rec_item_nf.empresa_id );
               vn_dm_valid_icms60  := pk_csf.fkg_empresa_dmvalicms60_terc ( en_empresa_id => rec_item_nf.empresa_id );
               vn_dm_valida_ipi    := pk_csf.fkg_empresa_dmvalipi_terc ( en_empresa_id => rec_item_nf.empresa_id );
               vn_dm_valida_pis    := pk_csf.fkg_empresa_dmvalpis_terc ( en_empresa_id => rec_item_nf.empresa_id );
               vn_dm_valida_cofins := pk_csf.fkg_empresa_dmvalcofins_terc ( en_empresa_id => rec_item_nf.empresa_id );
               --
         else
            --
            vn_dm_valid_imp     := 1; -- sim
            vn_dm_valid_icms60  := 1; -- sim
            vn_dm_valida_ipi    := 1; -- sim
            vn_dm_valida_pis    := 1; -- sim
            vn_dm_valida_cofins := 1; -- sim
            --
         end if;
         --
         vn_fase := 2.2;
         --
         -- Verifica o parâmetro na Empresa se valida os impostos --
         -- 0-Não Valida e Registra Log.
         -- 1-Valida e Registra Log.
         --
         if nvl(vn_dm_valid_imp,0) <> 1 then -- 0-Não Valida e Registra Log
            vn_dm_impressa       := 2; -- 0-Não, 1-Sim, 2-Sem efeito
            vn_csftipolog_id_imp := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 35 ); -- Informação Geral
         else -- 1-Valida e Registra Log
            vn_dm_impressa       := 0; -- 0-Não, 1-Sim, 2-Sem efeito
            vn_csftipolog_id_imp := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 1 ); -- Erro de validação
         end if;
         --
         -- Verifica o parâmetro na Empresa se valida o impostos ICMS60 --
         -- 0-Não Valida e Registra Log do ICMS60.
         -- 1-Valida e Registra Log do ICMS60.
         --
         vn_fase := 2.3;
         --
         if nvl(vn_dm_valid_icms60,0) <> 1 then -- 0-Não Valida e Registra Log do ICMS60.
            vn_dm_impressa_icms60   := 2; -- 0-Não, 1-Sim, 2-Sem efeito
            vn_csftipolog_id_icms60 := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 35 ); -- Informação Geral
         else -- 1-Valida e Registra Log do ICMS60.
            vn_dm_impressa_icms60   := 0; -- 0-Não, 1-Sim, 2-Sem efeito
            vn_csftipolog_id_icms60 := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 1 ); -- Erro de validação
         end if;
         --
         vn_fase := 2.4;
         --
         gv_cabec_log_item := ' Nro. Item: '||rec_item_nf.nro_item||' Item: '||rec_item_nf.cod_item||' - '||rec_item_nf.descr_item||chr(10);
         --
         -- Verifica se foi informado os impostos de ICMS/Simples Nacional, PIS e Cofins, os mesmo são obrigatórios
         vn_qtde_icms    := 0;
         vn_qtde_pis     := 0;
         vn_qtde_cofins  := 0;
         vn_qtde_iss     := 0;
         --
         vn_fase := 3;
         -- Verifica se o item contém ISS.
         begin
            select count(1)
              into vn_qtde_iss
              from imp_itemnf     imp
                 , tipo_imposto   ti
             where imp.itemnf_id  = rec_item_nf.id
               and ti.id          = imp.tipoimp_id
               and ti.cd          in ('6'); -- ISS
         exception
            when others then
               vn_qtde_iss := 0;
         end;
         --
         vn_fase := 4;
         --
         if rec_item_nf.dm_ind_emit = 0 -- Emissão Própria
            then
            --
            if nvl(gt_row_nota_fiscal_emit.dm_reg_trib, 0) <> 1 then
               --
               vv_cod_imp := '1'; -- ICMS
               --
            else
               --
               vv_cod_imp := '10'; -- Simples Nacional
               --
            end if;
            --
            begin
               select count(1)
                 into vn_qtde_icms
                 from imp_itemnf    imp
                    , tipo_imposto  ti
                where imp.itemnf_id = rec_item_nf.id
                  and imp.dm_tipo   = 0 -- Imposto
                  and imp.codst_id is not null
                  and ti.id         = imp.tipoimp_id
                  and ti.cd         = vv_cod_imp; -- 1-ICMS, 10-SN (simples nacional)
            exception
               when others then
                  vn_qtde_icms := 0;
            end;
            --
         else
            --
            begin
               select count(1)
                 into vn_qtde_icms
                 from imp_itemnf    imp
                    , tipo_imposto  ti
                where imp.itemnf_id = rec_item_nf.id
                  and imp.dm_tipo   = 0 -- Imposto
                  and imp.codst_id is not null
                  and ti.id         = imp.tipoimp_id
                  and ti.cd         in (1, 10); -- 1-ICMS, 10-SN (simples nacional)
            exception
               when others then
                  vn_qtde_icms := 0;
            end;
            --
         end if;
         --
         vn_fase := 5;
         --  Se não houver informações de icms e SN e a nota não for Sujeita ao ISS dá erro.
         if ( nvl(vn_qtde_icms,0) <= 0 and nvl(vn_qtde_iss, 0) <= 0 ) then
            --
            if nvl(rec_item_nf.cd_lista_serv,-1) < 0 then
               --
               vn_fase := 5.1;
               --
               if vv_cod_imp = '1' then -- 1-ICMS
                  gv_mensagem_log := 'Não informado o imposto de ICMS ou Simples Nacional para o item. Devido ao regime de tributação do emitente da nota fiscal, o imposto exigido é 1-ICMS.';
               else -- 10-SN
                  gv_mensagem_log := 'Não informado o imposto de ICMS ou Simples Nacional para o item. Devido ao regime de tributação do emitente da nota fiscal, o imposto exigido é 10-Simples Nacional.';
               end if;
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            else
               --
               gv_mensagem_log := 'Não informado o imposto de ISS para o item.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         elsif nvl(vn_qtde_icms,0) > 1 then
            --
            vn_fase := 5.2;
            --
            gv_mensagem_log := 'Informado mais de um imposto de ICMS para o item.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 6;
         --
         if nvl(vn_dm_valida_pis,0) = 1 then  -- Valida Imposto		 
            -- PIS -- CD: 4 -- Tipo Imposto
            begin
               select count(1)
                 into vn_qtde_pis
                 from imp_itemnf    imp
                    , tipo_imposto  ti
                where imp.itemnf_id = rec_item_nf.id
                  and imp.dm_tipo   = 0 -- Imposto
                  and ti.id         = imp.tipoimp_id
                  and ti.cd         = '4'; -- PIS
            exception
               when others then
                  vn_qtde_pis := 0;
            end;
            --
            vn_fase := 7;
            --		 
            if nvl(vn_qtde_pis,0) <= 0 then
               --
               vn_fase := 7.1;
               -- PIS -- CD: 4 -- Tipo Retenção
               begin
                  select count(1)
                    into vn_qtde_pis
                    from imp_itemnf    imp
                       , tipo_imposto  ti
                   where imp.itemnf_id = rec_item_nf.id
                     and imp.dm_tipo   = 1 -- Retenção
                     and ti.id         = imp.tipoimp_id
                     and ti.cd         = '4'; -- PIS
               exception
                  when others then
                     vn_qtde_pis := 0;
               end;
               --
               vn_fase := 7.2;
               --
               if nvl(vn_qtde_pis,0) <= 0 then
                  --
                  vn_fase := 7.3;
                  --
                  gv_mensagem_log := 'Não informado o imposto de PIS para o item.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  -- 
               elsif nvl(vn_qtde_pis,0) > 1 then
                  --
                  vn_fase := 7.4;
                  --
                  gv_mensagem_log := 'Informado mais de um imposto (tipo=retenção) de PIS para o item.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            elsif nvl(vn_qtde_pis,0) > 1 then
               --
               vn_fase := 7.5;
               --
               gv_mensagem_log := 'Informado mais de um imposto (tipo=imposto) de PIS para o item.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --			
         end if;		 
         --
         vn_fase := 8;
         --
         if nvl(vn_dm_valida_cofins,0) = 1 then  -- Valida Imposto		 
            -- COFINS -- CD: 5 -- Tipo Imposto
            begin
               select count(1)
                 into vn_qtde_cofins
                 from imp_itemnf    imp
                    , tipo_imposto  ti
                where imp.itemnf_id = rec_item_nf.id
                  and imp.dm_tipo   = 0 -- Imposto
                  and ti.id         = imp.tipoimp_id
                  and ti.cd         = '5'; -- COFINS
            exception
               when others then
                  vn_qtde_cofins := 0;
            end;
            --
            vn_fase := 9;
            --
            if nvl(vn_qtde_cofins,0) <= 0 then
               --
               vn_fase := 9.1;
               -- COFINS -- CD: 5 -- Tipo Retenção
               begin
                  select count(1)
                    into vn_qtde_cofins
                    from imp_itemnf    imp
                       , tipo_imposto  ti
                   where imp.itemnf_id = rec_item_nf.id
                     and imp.dm_tipo   = 1 -- Retenção
                     and ti.id         = imp.tipoimp_id
                     and ti.cd         = '5'; -- COFINS
               exception
                  when others then
                     vn_qtde_cofins := 0;
               end;
               --
               vn_fase := 9.2;
               --
               if nvl(vn_qtde_cofins,0) <= 0 then
                  --
                  vn_fase := 9.3;
                  --
                  gv_mensagem_log := 'Não informado o imposto de COFINS para o item.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               elsif nvl(vn_qtde_cofins,0) > 1 then
                  --
                  vn_fase := 9.4;
                  --
                  gv_mensagem_log := 'Informado mais de um imposto (tipo=retenção) de COFINS para o item.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
            elsif nvl(vn_qtde_cofins,0) > 1 then
               --
               vn_fase := 9.5;
               --
               gv_mensagem_log := 'Informado mais de um imposto (tipo=imposto) de COFINS para o item.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --		 
         end if;		 
         --
         vn_fase := 10;
         -- Recupera os impostos do Item da Nota Fiscal
         for rec_imp in c_imposto(rec_item_nf.id)
         loop
            --
            exit when c_imposto%notfound or (c_imposto%notfound) is null;
            --
            vn_fase := 11;
            --
            vn_imp_trib := 0;
            -- Validações de ICMS
            if rec_imp.cd_imp = 1 then
               --
               if nvl(vn_dm_valid_imp,0) <> 1 then -- 0-Não Valida e Registra Log
                  vn_dm_impressa       := 2; -- 0-Não, 1-Sim, 2-Sem efeito
                  vn_csftipolog_id_imp := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 35 ); -- Informação Geral
               else -- 1-Valida e Registra Log
                  vn_dm_impressa       := 0; -- 0-Não, 1-Sim, 2-Sem efeito
                  vn_csftipolog_id_imp := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 1 ); -- Erro de validação
               end if;
               --
               vn_fase := 12;
               -- Verifica se "Modalidade de determinação da BC do ICMS" não foi informada
               if nvl(rec_item_nf.dm_mod_base_calc,0) not in (0, 1, 2, 3) then
                  --
                  vn_fase := 12.1;
                  --
                  gv_mensagem_log := '"Modalidade de determinação da BC do ICMS" está inválida.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
               end if;
               --
               vn_fase := 12.2;
               --
               if rec_imp.cod_st in ('10', '30', '70') then
                  --
                  vn_fase := 12.3;
                  -- Verifica se "Modalidade de determinação da BC do ICMS ST" não foi informada
                  if nvl(rec_item_nf.dm_mod_base_calc_st, -1) not in (0, 1, 2, 3, 4, 5, 6) then
                     --
                     vn_fase := 12.4;
                     --
                     gv_mensagem_log := '"Modalidade de determinação da BC do ICMS ST" está inválida.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => erro_de_validacao
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                     --
                  end if;
                  --
               end if;
               --
               vn_fase := 12.5;
               --
               if rec_item_nf.dm_fin_nfe = 1 then -- Normal
                  --
                  -- início dos testes para base de cálculo
                  if rec_imp.cod_st = '00' or    -- Tributada integralmente
                      rec_imp.cod_st = '10'  -- Tributada e com cobrança do ICMS por substituição tributária
                      then
                     --
                     vn_fase := 12.6;
                     --
                     if nvl(rec_imp.vl_base_calc,0) <= 0 then
                        --
                        vn_fase := 12.7;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com o "Valor da Base de Cálculo" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  elsif rec_imp.cod_st = '20' or    -- Com redução de base de cálculo
                         rec_imp.cod_st = '70' or    -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                         rec_imp.cod_st = '90'  -- Outros
                         then
                        --
                        vn_fase := 12.8;
                        --
                        if nvl(rec_imp.vl_base_calc,0) < 0 then
                           --
                           vn_fase := 12.9;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o "Valor da Base de Cálculo" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  elsif rec_imp.cod_st = '30' or    -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
                         rec_imp.cod_st = '40' or    -- Isenta
                         rec_imp.cod_st = '41' or    -- Não tributada
                         rec_imp.cod_st = '50' or    -- Suspensão
                         rec_imp.cod_st = '60'      -- ICMS cobrado anteriormente por substituição tributária
                        then
                        --
                        vn_fase := 12.10;
                        --
                        if nvl(rec_imp.vl_base_calc,0) > 0 then
                           --
                           vn_fase := 12.11;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o "Valor da Base de Cálculo" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  end if; -- fim dos testes para base de cálculo
                  --
                  vn_fase := 12.12;
                  -- início dos testes para percentual de alíquota
                  if rec_imp.cod_st = '00' or    -- Tributada integralmente
                      rec_imp.cod_st = '10' or    -- Tributada e com cobrança do ICMS por substituição tributária
                      rec_imp.cod_st = '20' or    -- Com redução de base de cálculo
                      rec_imp.cod_st = '70'      -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                      then
                     --
                     vn_fase := 12.13;
                     --
                     if nvl(rec_imp.aliq_apli,0) <= 0 then
                        --
                        vn_fase := 12.14;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com a "Alíquota de Imposto" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  elsif rec_imp.cod_st = '30' or    -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
                        rec_imp.cod_st = '40' or    -- Isenta
                        rec_imp.cod_st = '41' or    -- Não tributada
                        rec_imp.cod_st = '50' or    -- Suspensão
                        rec_imp.cod_st = '60' then  -- ICMS cobrado anteriormente por substituição tributária
                        --
                        vn_fase := 12.15;
                        --
                        if nvl(rec_imp.aliq_apli,0) > 0 then
                           --
                           vn_fase := 12.16;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com a "Alíquota de Imposto" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  elsif rec_imp.cod_st = '90' then  -- Outros
                        --
                        vn_fase := 12.17;
                        --
                        if nvl(rec_imp.aliq_apli,0) < 0 then
                           --
                           vn_fase := 12.18;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com a "Alíquota de Imposto" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  end if; -- fim dos testes para percentual de alíquota
                  --
                  if nvl(rec_imp.aliq_apli,0) > 0 then
                     vn_imp_trib := round( ( nvl(rec_imp.vl_base_calc,0) * (nvl(rec_imp.aliq_apli,0)/100) ), 2);
                  end if;
                  --
                  vn_fase := 12.19;
                  -- início dos testes para valor do imposto
                  if rec_imp.cod_st = '00' or    -- Tributada integralmente
                     rec_imp.cod_st = '10' or    -- Tributada e com cobrança do ICMS por substituição tributária
                     rec_imp.cod_st = '20' or    -- Com redução de base de cálculo
                     rec_imp.cod_st = '70' then  -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                     --
                     vn_fase := 12.20;
                     --
                     if nvl(rec_imp.vl_imp_trib,0) < 0
                        and nvl(vn_imp_trib,0) > 0
                        then
                        --
                        vn_fase := 12.21;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com o valor  para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  elsif rec_imp.cod_st = '30' or    -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
                        rec_imp.cod_st = '40' or    -- Isenta
                        rec_imp.cod_st = '41' or    -- Não tributada
                        rec_imp.cod_st = '50' then  -- Suspensão
                        --
                        vn_fase := 12.22;
                        --
                        if nvl(rec_imp.vl_imp_trib,0) > 0 and nvl(rec_item_nf.dm_mot_des_icms,0) <= 0 then
                           --
                           vn_fase := 12.23;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Não permite "Valor do Imposto Tributado" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  elsif rec_imp.cod_st = '60' then  -- ICMS cobrado anteriormente por substituição tributária
                        --
                        vn_fase := 12.24;
                        --
                        if nvl(rec_imp.vl_imp_trib,0) > 0 then
                           --
                           vn_fase := 12.25;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o valor "Valor do Imposto Tributado" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  elsif nvl(rec_imp.vl_imp_trib,0) < 0
                        and nvl(vn_imp_trib,0) > 0
                        then  
                        -- Outros
                        --
                        vn_fase := 12.26;
                        --
                        if nvl(rec_imp.vl_imp_trib,0) < 0 then
                           --
                           vn_fase := 12.27;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o valor "Valor do Imposto Tributado" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  end if; -- fim dos testes para valor do imposto
                  --
                  vn_fase := 12.28;
                  -- início dos testes para percentual de redução
                  if rec_imp.cod_st = '00' or    -- Tributada integralmente
                     rec_imp.cod_st = '10' then  -- Tributada e com cobrança do ICMS por substituição tributária
                     --
                     vn_fase := 12.29;
                     --
                     if nvl(rec_imp.perc_reduc,0) > 0 then
                        --
                        vn_fase := 12.30;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com o valor "Percentual de Redução" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.perc_reduc,0),'990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  elsif rec_imp.cod_st = '20' or    -- Com redução de base de cálculo
                        rec_imp.cod_st = '70' then  -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                        --
                        vn_fase := 12.31;
                        --
                        if nvl(rec_imp.perc_reduc,0) <= 0 then
                           --
                           vn_fase := 12.32;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o valor "Percentual da Redução de BC" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.perc_reduc,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  end if; -- fim dos testes para percentual de redução
                  --
                  vn_fase := 12.33;
                  -- início dos testes para percentual adicional
                  if rec_imp.cod_st = '00' or    -- Tributada integralmente
                     rec_imp.cod_st = '10' or    -- Tributada e com cobrança do ICMS por substituição tributária
                     rec_imp.cod_st = '20' or    -- Com redução de base de cálculo
                     rec_imp.cod_st = '70' then  -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                     --
                     vn_fase := 12.34;
                     --
                     if nvl(rec_imp.perc_adic,0) > 0 then
                        --
                        vn_fase := 12.35;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com o valor "Percentual Adicional" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.perc_adic,0),'990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  end if; -- fim dos testes para percentual adicional
                  --
               end if; -- fim da validação de valores para NF Normal
               --
               vn_fase := 12.36;
               -- início dos testes para verificar se existe o imposto de ICMS-ST, se não existir registro o log de erro
               if rec_imp.cod_st = '10' or    -- Tributada e com cobrança do ICMS por substituição tributária
                  rec_imp.cod_st = '30' or    -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
                  rec_imp.cod_st = '60' or    -- ICMS cobrado anteriormente por substituição tributária
                  rec_imp.cod_st = '70' or    -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                  rec_imp.cod_st = '90' then  -- Outros
                  --
                  vn_qtde_st := 0;
                  --| Validação dos dados de ICMS-ST
                  for rec_st in c_icms_st(rec_item_nf.id)
                  loop
                     --
                     exit when c_icms_st%notfound or (c_icms_st%notfound) is null;
                     --
                     vn_qtde_st := nvl(vn_qtde_st,0) + 1;
                     --
                     if rec_item_nf.dm_fin_nfe = 1 then -- Normal
                        --
                        vn_fase := 12.37;
                        -- início dos testes para base de cálculo
                        if rec_imp.cod_st = '10' or    -- Tributada e com cobrança do ICMS por substituição tributária
                           rec_imp.cod_st = '30' or    -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
                           rec_imp.cod_st = '70' then  -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                           --
                           vn_fase := 12.38;
                           --
                           if nvl(rec_st.vl_base_calc,0) <= 0 then
                              --
                              vn_fase := 12.39;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 'Está com o "Valor da Base de Cálculo" divergente para o Tipo de Imposto: '||rec_st.sigla||'.'||chr(10)||
                                                 'Informado: '||to_char(nvl(rec_st.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                        elsif rec_imp.cod_st = '60' then  -- ICMS cobrado anteriormente por substituição tributária
                              --
                              vn_fase := 12.40;
                              --
                              if nvl(rec_st.vl_base_calc,0) <= 0 then
                                 --
                                 vn_fase := 12.41;
                                 --
                                 gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                    'Está com o "Valor da Base de Cálculo" divergente para o Tipo de Imposto: '||rec_st.sigla||'.'||chr(10)||
                                                    'Informado: '||to_char(nvl(rec_st.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                                 --
                                 vn_loggenerico_id := null;
                                 --
                                 pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                     , ev_resumo           => gv_mensagem_log
                                                     , en_tipo_log         => vn_csftipolog_id_icms60
                                                     , en_referencia_id    => gn_referencia_id
                                                     , ev_obj_referencia   => gv_obj_referencia
                                                     , en_dm_impressa     => vn_dm_impressa_icms60 );
                                 -- Armazena o "loggenerico_id" na memória
                                 if vn_dm_impressa_icms60 <> 2 then -- sem efeito
                                    pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                           , est_log_generico_nf => vt_log_generico_nf_imp_icms60 );
                                 end if;
                                 --
                              end if;
                              --
                        elsif rec_imp.cod_st = '90' then  -- Outros
                              --
                              vn_fase := 12.42;
                              --
                              if nvl(rec_st.vl_base_calc,0) < 0 then
                                 --
                                 vn_fase := 12.43;
                                 --
                                 gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                    'Está com o "Valor da Base de Cálculo" divergente para o Tipo de Imposto: '||rec_st.sigla||'.'||chr(10)||
                                                    'Informado: '||to_char(nvl(rec_st.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                                 --
                                 vn_loggenerico_id := null;
                                 --
                                 pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                     , ev_resumo           => gv_mensagem_log
                                                     , en_tipo_log         => vn_csftipolog_id_imp
                                                     , en_referencia_id    => gn_referencia_id
                                                     , ev_obj_referencia   => gv_obj_referencia
                                                     , en_dm_impressa     => vn_dm_impressa );
                                 -- Armazena o "loggenerico_id" na memória
                                 if vn_dm_impressa <> 2 then -- sem efeito
                                    pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                           , est_log_generico_nf => vt_log_generico_nf_imp );
                                 end if;
                                 --
                              end if;
                              --
                        end if; -- fim dos testes para base de cálculo
                        --
                        vn_fase := 12.44;
                        -- início dos testes para percentual de alíquota
                        if rec_imp.cod_st = '10' or    -- Tributada e com cobrança do ICMS por substituição tributária
                           rec_imp.cod_st = '30' or    -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
                           rec_imp.cod_st = '70' then  -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                           --
                           vn_fase := 12.45;
                           --
                           if nvl(rec_st.aliq_apli,0) <= 0 then
                              --
                              vn_fase := 12.46;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota de Imposto" divergente para o Tipo de Imposto: '||rec_st.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                        elsif rec_imp.cod_st = '90' then  -- Outros
                              --
                              vn_fase := 12.47;
                              --
                              if nvl(rec_st.aliq_apli,0) < 0 then
                                 --
                                 vn_fase := 12.48;
                                 --
                                 gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota de Imposto" divergente para o Tipo de Imposto: '||rec_st.sigla||'.';
                                 --
                                 vn_loggenerico_id := null;
                                 --
                                 pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                     , ev_resumo           => gv_mensagem_log
                                                     , en_tipo_log         => vn_csftipolog_id_imp
                                                     , en_referencia_id    => gn_referencia_id
                                                     , ev_obj_referencia   => gv_obj_referencia
                                                     , en_dm_impressa     => vn_dm_impressa );
                                 -- Armazena o "loggenerico_id" na memória
                                 if vn_dm_impressa <> 2 then -- sem efeito
                                    pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                           , est_log_generico_nf => vt_log_generico_nf_imp );
                                 end if;
                                 --
                              end if;
                              --
                        end if; -- fim dos testes para percentual de alíquota
                        --
                        vn_fase := 12.49;
                        -- início dos testes para valor do imposto
                        if rec_imp.cod_st = '10' or    -- Tributada e com cobrança do ICMS por substituição tributária
                           rec_imp.cod_st = '30' or    -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
                           rec_imp.cod_st = '70' or    -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                           rec_imp.cod_st = '90' then  -- Outros
                           --
                           vn_fase := 12.50;
                           --
                           if nvl(rec_st.vl_imp_trib,0) < 0 then
                              --
                              vn_fase := 12.51;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Valor do Imposto Tributado" divergente para o Tipo de Imposto: '||rec_st.sigla||'.'||chr(10)||
                                                 'Informado: '||to_char(nvl(rec_st.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                        elsif rec_imp.cod_st = '60' then  -- ICMS cobrado anteriormente por substituição tributária
                              --
                              vn_fase := 12.52;
                              --
                              if nvl(rec_st.vl_imp_trib,0) <= 0 then
                                 --
                                 vn_fase := 12.53;
                                 --
                                 gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                    '"Valor do Imposto Tributado" divergente para o Tipo de Imposto: '||rec_st.sigla||'.'||chr(10)||
                                                    'Informado: '||to_char(nvl(rec_st.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                                 --
                                 vn_loggenerico_id := null;
                                 --
                                 pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                     , ev_resumo           => gv_mensagem_log
                                                     , en_tipo_log         => vn_csftipolog_id_icms60
                                                     , en_referencia_id    => gn_referencia_id
                                                     , ev_obj_referencia   => gv_obj_referencia
                                                     , en_dm_impressa     => vn_dm_impressa_icms60 );
                                 -- Armazena o "loggenerico_id" na memória
                                 if vn_dm_impressa_icms60 <> 2 then -- sem efeito
                                    pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                           , est_log_generico_nf => vt_log_generico_nf_imp_icms60 );
                                 end if;
                                 --
                              end if;
                              --
                        end if; -- fim dos testes para valor do imposto
                        --
                     end if; -- Fim do teste de validação de NF Normal
                     --
                  end loop; -- c_icms_st
                  --
                  vn_fase := 12.54;
                  -- início dos testes para verificar a quantidade do imposto de ICMS-ST
                  if rec_imp.cod_st = '10' or    -- Tributada e com cobrança do ICMS por substituição tributária
                     rec_imp.cod_st = '30' or    -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
                     rec_imp.cod_st = '60' or    -- ICMS cobrado anteriormente por substituição tributária
                     rec_imp.cod_st = '70' or    -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                     rec_imp.cod_st = '90' then  -- Outros
                     --
                     vn_fase := 12.55;
                     -- Verifica se tem mais de um imposto ICMS-ST
                     if nvl(vn_qtde_st,0) > 1 then
                        --
                        vn_fase := 12.56;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Informado mais de um valor de ST para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => erro_de_validacao
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia );
                        -- Armazena o "loggenerico_id" na memória
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => est_log_generico_nf );
                        --
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 12.57;
                  --
                  if rec_imp.cod_st = '10' or    -- Tributada e com cobrança do ICMS por substituição tributária
                     rec_imp.cod_st = '30' or    -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
                     rec_imp.cod_st = '60' or    -- ICMS cobrado anteriormente por substituição tributária
                     rec_imp.cod_st = '70' then  -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                     --
                     -- Verifica se não tem imposto ICMS-ST
                     if nvl(vn_qtde_st,0) <= 0
                        and rec_item_nf.dm_ind_emit = 0 -- Emissão Propria
                        then
                           --
                           if trim(rec_imp.cod_st) = '60' then
                              --
                              vn_fase := 12.58;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 'Não informado o registro do imposto de ICMS-ST.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => informacao
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia );
                              --
                           else
                              --
                              vn_fase := 12.59;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 'Não informado o registro do imposto de ICMS-ST.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => erro_de_validacao
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia );
                              -- Armazena o "loggenerico_id" na memória
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => est_log_generico_nf );
                             --
                           end if;
                           --
                     end if;
                     --
                  end if;
                  --
               end if;
               --
               vn_fase := 12.60;
               --
               if rec_imp.cod_st = '51' then
                  --
                  vn_fase := 12.61;
                  --
                  if nvl(rec_imp.vl_icms_oper,0) <> trunc(((nvl(rec_imp.vl_base_calc,0)*nvl(rec_imp.aliq_apli,0))/100),2)
                     and nvl(rec_imp.vl_icms_oper,0) <> round(((nvl(rec_imp.vl_base_calc,0)*nvl(rec_imp.aliq_apli,0))/100),2) then
                     --
                     vn_fase := 12.62;
                     --
                     gv_mensagem_log := 'Valor do ICMS da Operação ('|| nvl(rec_imp.vl_icms_oper,0) || ') no CST=51, difere do produto BC e Alíquota';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => erro_de_validacao
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                     --
                  end if;
                  --
                  if nvl(rec_imp.vl_icms_difer,0) <> trunc(((nvl(rec_imp.vl_icms_oper,0)*nvl(rec_imp.percent_difer,0))/100),2)
                     and nvl(rec_imp.vl_icms_difer,0) <> round(((nvl(rec_imp.vl_icms_oper,0)*nvl(rec_imp.percent_difer,0))/100),2) then
                     --
                     vn_fase := 12.63;
                     --
                     gv_mensagem_log := 'Valor do ICMS Diferido ('|| nvl(rec_imp.vl_icms_difer,0) || ') no CST=51, difere do produto do Valor ICMS Operação e percentual diferimento.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => erro_de_validacao
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                     --
                  end if;
                  --
               end if;
               --
               -- fim dos testes para verificar se existe o imposto de ICMS-ST, se não existir registro o log de erro
               -- fim dos testes do imposto cd_imp = 1-ICMS
            elsif rec_imp.cd_imp = 3 then -- Validação de IPI
                  --
                  vn_fase := 13;
                  --
                  if vn_dm_valida_ipi <> 1 then
                     vn_dm_impressa       := 2; -- 0-Não, 1-Sim, 2-Sem efeito
                     vn_csftipolog_id_imp := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 35 ); -- Informação Geral
                  else
                     vn_dm_impressa       := 0; -- 0-Não, 1-Sim, 2-Sem efeito
                     vn_csftipolog_id_imp := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 1 ); -- Erro de validação
                  end if;
                  --
                  vn_fase := 13.1;
                  --
                  if trim(rec_item_nf.cod_enq_ipi) is null then
                     --
                     vn_fase := 13.2;
                     --
                     gv_mensagem_log := '"Código de Enquadramento Legal do IPI" não foi informado.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => erro_de_validacao
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                     --
                  end if;
                  --
                  vn_fase := 13.3;
                  -- Valida se a CST de IPI é de Entrada
                  if gt_row_Nota_Fiscal.dm_ind_oper = 0 and -- Entrada
                     rec_imp.cod_st not in ('00', '01', '02', '03', '04', '05', '49') then
                     --
                     vn_fase := 13.4;
                     --
                     gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                        'Está inválida para o tipo de Operação Entrada informada ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 13.5;
                  -- Valida se a CST de IPI é de Saída
                  if gt_row_Nota_Fiscal.dm_ind_oper = 1 and -- Saída
                     rec_imp.cod_st not in ('50', '51', '52', '53', '54', '55', '99') then
                     --
                     vn_fase := 13.6;
                     --
                     gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                        'Está inválida para o tipo de Operação Saída informada ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 13.7;
                  -- Segundo pegislação passada pelo consultor, a regra do IPI com CST 49 pode ser aplicada para terceiros e emissão própria.
                  if --pk_csf.fkg_dmindemit_notafiscal ( en_notafiscal_id => rec_item_nf.notafiscal_id ) = 1 and -- terceiros
                     rec_imp.cod_st = '49' and -- Outras entradas
                     nvl(rec_imp.vl_base_calc,0) = 0 and
                     nvl(rec_imp.qtde_base_calc_prod,0) = 0 and
                     nvl(rec_imp.aliq_apli,0) = 0 and
                     nvl(rec_imp.vl_aliq_prod,0) = 0 and
                     nvl(rec_imp.vl_imp_trib,0) = 0 then
                     --
                     vn_fase := 13.8;
                     null; -- processo correto
                     --
                  else
                     --
                     vn_fase := 13.9;
                     --
                     if rec_imp.cod_st = '00' or    -- Entrada com recuperação de crédito
                        rec_imp.cod_st = '49' or    -- Outras entradas
                        rec_imp.cod_st = '50'       -- Saída tributada
                        then
                        --
                        vn_fase := 13.10;
                        --
                        if nvl(rec_imp.vl_base_calc,0) > 0 and nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                           --
                           vn_fase := 13.11;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Não pode ter informado o "Valor da BC do IPI" e a "Quantidade total na unidade padrão para tributação" '||
                                              'informada ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 13.12;
                        --
                        if nvl(rec_imp.aliq_apli,0) > 0 and nvl(rec_imp.vl_aliq_prod,0) > 0 then
                           --
                           vn_fase := 13.13;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Não pode ter informada a "Alíquota de IPI" e o "Valor por Unidade Tributável" '||
                                              'informada ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 13.14;
                        --
                        if nvl(rec_imp.aliq_apli,0) <= 0 or nvl(rec_imp.vl_base_calc,0) <= 0 then
                           --
                           vn_fase := 13.15;
                           -- Valida o valor da alíquota em quantidade
                           if nvl(rec_imp.vl_aliq_prod,0) <= 0 then
                              --
                              vn_fase := 13.16;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Valor por Unidade Tributável de IPI" deve ser informada e maior que zero para o Tipo de Imposto: '||
                                                 rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 13.17;
                           --
                           if nvl(rec_imp.qtde_base_calc_prod,0) <= 0 then
                              --
                              vn_fase := 13.18;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Quantidade total na unidade padrão para tributação de IPI" deve ser informada e maior que zero para o '||
                                                 'Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 13.19;
                           -- Se o imposto é por quantidade e valor, não pode ser informado a Base e percentual
                           if nvl(rec_imp.aliq_apli,0) > 0 then
                              --
                              vn_fase := 13.20;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota do IPI" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 13.21;
                           --
                           if nvl(rec_imp.vl_base_calc,0) > 0 then
                              --
                              vn_fase := 13.22;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Valor da BC do IPI" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 13.23;
                        -- Imposto por alíquota
                        if nvl(rec_imp.vl_aliq_prod,0) <= 0 and nvl(rec_imp.qtde_base_calc_prod,0) <= 0 then
                           --
                           vn_fase := 13.24;
                           -- Se o imposto é por quantidade e valor, não pode ser informado a Base e percentual
                           if nvl(rec_imp.aliq_apli,0) <= 0 then
                              --
                              vn_fase := 13.25;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota do IPI" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 13.26;
                           --
                           if nvl(rec_imp.vl_base_calc,0) <= 0 then
                              --
                              vn_fase := 13.27;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Valor da BC do IPI" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 13.28;
                           -- Valida o valor da alíquota em reais
                           if nvl(rec_imp.vl_aliq_prod,0) > 0 then
                              --
                              vn_fase := 13.29;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Valor por Unidade Tributável de IPI" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 13.30;
                           --
                           if nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                              --
                              vn_fase := 13.31;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Quantidade total na unidade padrão para tributação de IPI" não deve ser informada para o Tipo de Imposto: '||
                                                 rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 13.32;
                        --
                        if nvl(rec_imp.aliq_apli,0) > 0 then
                           vn_imp_trib := round( ( nvl(rec_imp.vl_base_calc,0) * (nvl(rec_imp.aliq_apli,0)/100) ), 2);
                        end if;
                        --
                        if nvl(rec_imp.vl_imp_trib,0) <= 0
                           and nvl(rec_imp.vl_imp_nao_dest,0) <= 0
                           and nvl(vn_imp_trib,0) > 0
                           then
                           --
                           vn_fase := 13.33;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o valor "Valor do Imposto Tributado" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 13.34;
                  -- Valida situação tributária isenta
                  if rec_imp.cod_st = '01' or    -- Entrada tributada com alíquota zero
                     rec_imp.cod_st = '02' or    -- Entrada isenta
                     rec_imp.cod_st = '03' or    -- Entrada não-tributada
                     rec_imp.cod_st = '04' or    -- Entrada imune
                     rec_imp.cod_st = '05' or    -- Entrada com suspensão
                     rec_imp.cod_st = '51' or    -- Saída tributada com alíquota zero
                     rec_imp.cod_st = '52' or    -- Saída isenta
                     rec_imp.cod_st = '53' or    -- Saída não-tributada
                     rec_imp.cod_st = '54' or    -- Saída imune
                     rec_imp.cod_st = '55' then  -- Saída com suspensão
                     --
                     vn_fase := 13.35;
                     --
                     if nvl(rec_imp.vl_base_calc,0) > 0 and rec_imp.cod_st not in ('01', '51') then
                        --
                        vn_fase := 13.36;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Valor da BC do IPI" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 13.37;
                     --
                     if nvl(rec_imp.aliq_apli,0) > 0 then
                        --
                        vn_fase := 13.38;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Alíquota do IPI" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||trim(to_char(nvl(rec_imp.aliq_apli,0),'999G999G999G999G990D00'))||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 13.39;
                        --
                     if nvl(rec_imp.vl_imp_trib,0) > 0
                        then
                        --
                        vn_fase := 13.40;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Valor do Imposto Tributado" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 13.41;
                     --
                     if nvl(rec_imp.qtde_base_calc_prod,0) > 0 and rec_imp.cod_st not in ('01', '51') then
                        --
                        vn_fase := 13.42;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Quantidade total na unidade padrão para tributação de IPI" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.qtde_base_calc_prod,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 13.43;
                     --
                     if nvl(rec_imp.vl_aliq_prod,0) > 0 then
                        --
                        vn_fase := 13.44;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Valor por Unidade Tributável de IPI" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_aliq_prod,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  end if;
                  --
            elsif rec_imp.cd_imp = 4 then -- PIS
                  --
                  vn_fase := 14;
                  --
                  if vn_dm_valida_pis <> 1 then
                     vn_dm_impressa       := 2; -- 0-Não, 1-Sim, 2-Sem efeito
                     vn_csftipolog_id_imp := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 35 ); -- Informação Geral
                  else
                     vn_dm_impressa       := 0; -- 0-Não, 1-Sim, 2-Sem efeito
                     vn_csftipolog_id_imp := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 1 ); -- Erro de validação
                  end if;
                  --
                  vn_fase := 14.1;
                  -- Valida CST de PIS para entrada
                  if gt_row_Nota_Fiscal.dm_ind_oper = 0 and -- Entrada
                     rec_imp.cod_st not in ( '50', '51', '52', '53', '54', '55', '56'
                                           , '60', '61', '62', '63', '64', '65', '66', '67'
                                           , '70', '71', '72', '73', '74', '75', '98', '99') then
                     --
                     vn_fase := 14.2;
                     --
                     gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                        'Está inválida para o tipo de Operação Entrada informada ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 14.3;
                  -- Valida CST de PIS para Saída
                  if gt_row_Nota_Fiscal.dm_ind_oper = 1 and -- Saída
                     rec_imp.cod_st not in ('01', '02', '03', '04', '05', '06', '07', '08', '09', '49', '99') then
                     --
                     vn_fase := 14.4;
                     --
                     gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                        'Está inválida para o tipo de Operação Saída informada ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 14.5;
                  --
                  if rec_imp.cod_st in ('01', '02') then
                     --
                     -- 01 - Operação Tributável (base de cálculo = valor da operação alíquota normal (cumulativo/não cumulativo))
                     -- 02 - Operação Tributável (base de cálculo = valor da operação (alíquota diferenciada))
                     --
                     vn_fase := 14.6;
                     --
                     vn_imp_trib := nvl(rec_imp.vl_base_calc,0) * ( nvl(rec_imp.aliq_apli,0)/100 );
                     --
                     vn_fase := 14.7;
                     --
                     if nvl(rec_imp.vl_base_calc,0) <= 0 then
                        --
                        vn_fase := 14.8;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com o "Valor da Base de Cálculo do PIS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 14.9;
                     --
                     if nvl(rec_imp.aliq_apli,0) <= 0 then
                        --
                        vn_fase := 14.10;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com a "Alíquota do PIS (em percentual)" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 14.11;
                     --
                     if nvl(rec_imp.vl_imp_trib,0) <= 0 and nvl(vn_imp_trib,0) <= 0 then
                        --
                        vn_fase := 14.12;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com o valor "Valor do PIS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  elsif rec_imp.cod_st = '03' then    -- Operação Tributável (base de cálculo = quantidade vendida x alíquota por unidade de produto)
                        --
                        vn_fase := 14.13;
                        --
                        if nvl(rec_imp.qtde_base_calc_prod,0) <= 0 then
                           --
                           vn_fase := 14.14;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o "Quantidade Vendida do PIS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 14.15;
                        --
                        if nvl(rec_imp.vl_aliq_prod,0) <= 0 then
                           --
                           vn_fase := 14.16;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com a "Alíquota do PIS (em reais)" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 14.17;
                        --
                        if nvl(rec_imp.vl_imp_trib,0) <= 0 then
                           --
                           vn_fase := 14.18;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o valor "Valor do PIS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  elsif rec_imp.cod_st = '99' then    -- Outras Operações
                        --
                        vn_fase := 14.19;
                        --
                        if nvl(rec_imp.vl_base_calc,0) > 0 and nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                           --
                           vn_fase := 14.20;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Não pode ter informado o "Valor da Base de Cálculo do PIS" e a "Quantidade Vendida PIS" '||
                                              'informada ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 14.21;
                        --
                        if nvl(rec_imp.aliq_apli,0) > 0 and nvl(rec_imp.vl_aliq_prod,0) > 0 then
                           --
                           vn_fase := 14.22;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Não pode ter informada a "Alíquota do PIS (em percentual)" e a "Alíquota do PIS (em reais)" '||
                                              'informada ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 14.23;
                        -- Valida informação do imposto por quantidade
                        if nvl(rec_imp.aliq_apli,0) < 0 or nvl(rec_imp.vl_base_calc,0) < 0 then
                           --
                           vn_fase := 14.24;
                           -- Valida o valor da alíquota em reais
                           if nvl(rec_imp.vl_aliq_prod,0) < 0 then
                              --
                              vn_fase := 14.25;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota do PIS (em reais) do PIS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 14.26;
                           --
                           if nvl(rec_imp.qtde_base_calc_prod,0) < 0 then
                              --
                              vn_fase := 14.27;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Quantidade Vendida do PIS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 14.28;
                           -- Se o imposto é por quantidade e valor, não pode ser informado a Base e percentual
                           if nvl(rec_imp.aliq_apli,0) > 0 then
                              --
                              vn_fase := 14.29;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota do PIS (em percentual)" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 14.30;
                           --
                           if nvl(rec_imp.vl_base_calc,0) > 0 then
                              --
                              vn_fase := 14.31;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Valor da Base de Cálculo do PIS" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 14.32;
                        -- Imposto por alíquota
                        if nvl(rec_imp.vl_aliq_prod,0) < 0 or nvl(rec_imp.qtde_base_calc_prod,0) < 0 then
                           --
                           vn_fase := 14.33;
                           -- Se o imposto é por quantidade e valor, não pode ser informado a Base e percentual
                           if nvl(rec_imp.aliq_apli,0) < 0 then
                              --
                              vn_fase := 14.34;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota do PIS (em percentual)" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 14.35;
                           --
                           if nvl(rec_imp.vl_base_calc,0) < 0 then
                              --
                              vn_fase := 14.36;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Valor da Base de Cálculo do PIS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 14.37;
                           -- Valida o valor da alíquota em reais
                           if nvl(rec_imp.vl_aliq_prod,0) > 0 then
                              --
                              vn_fase := 14.38;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota do PIS (em reais)" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 14.39;
                           --
                           if nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                              --
                              vn_fase := 14.40;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Quantidade Vendida do PIS" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 14.41;
                        --
                        if nvl(rec_imp.vl_imp_trib,0) < 0 then
                           --
                           vn_fase := 14.42;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o valor "Valor do PIS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  end if;
                  --
                  vn_fase := 14.43;
                  -- Valida situação tributária isenta
                  if rec_imp.cod_st in ('04', '06', '07', '08', '09', '70', '71', '72', '73', '74', '75') then
                     --
                     vn_fase := 14.44;
                     --
                     if nvl(rec_imp.vl_base_calc,0) > 0 and rec_imp.cod_st <> '06' and rec_imp.cod_st <> '73' then
                        --
                        vn_fase := 14.45;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Valor da Base de Cálculo do PIS" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 14.46;
                     --
                     if nvl(rec_imp.aliq_apli,0) > 0 then
                        --
                        vn_fase := 14.47;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Alíquota do PIS (em percentual)" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||trim(to_char(nvl(rec_imp.aliq_apli,0),'999G999G999G999G990D00'))||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 14.48;
                     --
                     if nvl(rec_imp.vl_imp_trib,0) > 0 then
                        --
                        vn_fase := 14.49;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Valor do PIS" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 14.50;
                     --
                     if nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                        --
                        vn_fase := 14.51;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Quantidade Vendida do PIS" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.qtde_base_calc_prod,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 14.52;
                     --
                     if nvl(rec_imp.vl_aliq_prod,0) > 0 then
                        --
                        vn_fase := 14.53;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Alíquota do PIS (em reais)" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||trim(to_char(nvl(rec_imp.vl_aliq_prod,0),'999G999G999G999G990D00'))||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 14.54;
                  -- valida dados de combinação de pis/cofins
                  open c_dados_imp ( rec_item_nf.id
                                   , 5 --> COFINS
                                   , rec_imp.dm_tipo );
                  fetch c_dados_imp into vv_cod_st_comp, vn_base_calc_comp;
                  if c_dados_imp%notfound then
                     vv_cod_st_comp := null;
                     vn_base_calc_comp := null;
                  end if;
                  close c_dados_imp;
                  --
                  vn_fase := 14.55;
                  -- Valida se os dados do PIS são iguais ao do COFINS
                  if vv_cod_st_comp is null and vn_base_calc_comp is null then
                     --
                     vn_fase := 14.56;
                     --
                     gv_mensagem_log := 'Não informado Código ST e Base de Cálculo para o Imposto COFINS, de acordo com o Imposto PIS.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     --
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  else
                     --
                     vn_fase := 14.57;
                     --
                     if vv_cod_st_comp <> rec_imp.cod_st then
                        --
                        vn_fase := 14.58;
                        --
                        gv_mensagem_log := 'Situação Tributária da COFINS ('||vv_cod_st_comp||') está diferente da Situação Tributária do PIS ('||
                                           rec_imp.cod_st||').';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        --
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 14.59;
                     --
                     if nvl(vn_base_calc_comp,0) <> nvl(rec_imp.vl_base_calc,0) then
                        --
                        vn_fase := 14.60;
                        --
                        gv_mensagem_log := 'Base de Cálculo da COFINS ('||to_char(nvl(vn_base_calc_comp,0),'999G999G999G999G990D00')||') está diferente da '||
                                           'Base de Cálculo do PIS ('||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||').';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        --
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  end if;
                  --
            elsif rec_imp.cd_imp = 5 then  -- COFINS
                  --
                  vn_fase := 15;
                  --
                  if vn_dm_valida_cofins <> 1 then
                     vn_dm_impressa       := 2; -- 0-Não, 1-Sim, 2-Sem efeito
                     vn_csftipolog_id_imp := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 35 ); -- Informação Geral
                  else
                     vn_dm_impressa       := 0; -- 0-Não, 1-Sim, 2-Sem efeito
                     vn_csftipolog_id_imp := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 1 ); -- Erro de validação
                  end if;
                  --
                  vn_fase := 15.1;
                  -- Valida CST de PIS para entrada
                  if gt_row_Nota_Fiscal.dm_ind_oper = 0 and -- Entrada
                     rec_imp.cod_st not in ( '50', '51', '52', '53', '54', '55', '56'
                                           , '60', '61', '62', '63', '64', '65', '66', '67'
                                           , '70', '71', '72', '73', '74', '75', '98', '99') then
                     --
                     vn_fase := 15.2;
                     --
                     gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                        'Está inválida para o tipo de Operação Entrada informada ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     --
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 15.3;
                  -- Valida CST de PIS para Saída
                  if gt_row_Nota_Fiscal.dm_ind_oper = 1 and -- Saída
                     rec_imp.cod_st not in ('01', '02', '03', '04', '05', '06', '07', '08', '09', '49', '99') then
                     --
                     vn_fase := 15.4;
                     --
                     gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                        'Está inválida para o tipo de Operação Saída informada ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     --
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 15.5;
                  --
                  if rec_imp.cod_st in ('01', '02') then
                     --
                     -- 01 - Operação Tributável (base de cálculo = valor da operação alíquota normal (cumulativo/não cumulativo))
                     -- 02 - Operação Tributável (base de cálculo = valor da operação (alíquota diferenciada))
                     --
                     vn_fase := 15.6;
                     --
                     vn_imp_trib :=  nvl(rec_imp.vl_base_calc,0) * ( nvl(rec_imp.aliq_apli,0) / 100 ) ;
                     --
                     vn_fase := 15.7;
                     --
                     if nvl(rec_imp.vl_base_calc,0) <= 0 then
                        --
                        vn_fase := 15.8;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com o "Valor da Base de Cálculo do COFINS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 15.9;
                     --
                     if nvl(rec_imp.aliq_apli,0) <= 0 then
                        --
                        vn_fase := 15.10;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com a "Alíquota do COFINS (em percentual)" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 15.11;
                     --
                     if nvl(rec_imp.vl_imp_trib,0) <= 0 and nvl(vn_imp_trib,0) <= 0 then
                        --
                        vn_fase := 15.12;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Está com o valor "Valor do COFINS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  elsif rec_imp.cod_st = '03' then    -- Operação Tributável (base de cálculo = quantidade vendida x alíquota por unidade de produto)
                        --
                        vn_fase := 15.13;
                        --
                        if nvl(rec_imp.qtde_base_calc_prod,0) <= 0 then
                           --
                           vn_fase := 15.14;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o "Quantidade Vendida do COFINS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 15.15;
                        --
                        if nvl(rec_imp.vl_aliq_prod,0) <= 0 then
                           --
                           vn_fase := 15.16;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com a "Alíquota do COFINS (em reais)" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 15.17;
                        --
                        if nvl(rec_imp.vl_imp_trib,0) <= 0 then
                           --
                           vn_fase := 15.18;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o valor "Valor do COFINS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  elsif rec_imp.cod_st = '99' then    -- Outras Operações
                        --
                        vn_fase := 15.19;
                        --
                        if nvl(rec_imp.vl_base_calc,0) > 0 and nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                           --
                           vn_fase := 15.20;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Não pode ter informado o "Valor da Base de Cálculo do COFINS" e o "Quantidade Vendida COFINS" '||
                                              'informados ao ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 15.21;
                        --
                        if nvl(rec_imp.aliq_apli,0) > 0 and nvl(rec_imp.vl_aliq_prod,0) > 0 then
                           --
                           vn_fase := 15.22;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Não pode ter informado o "Alíquota do COFINS (em percentual)" e o "Alíquota do COFINS (em reais)" '||
                                              'informados ao ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 15.23;
                        -- Valida informação do imposto por quantidade
                        if nvl(rec_imp.aliq_apli,0) < 0 or nvl(rec_imp.vl_base_calc,0) < 0 then
                           --
                           vn_fase := 15.24;
                           -- Valida o valor da alíquota em reais
                           if nvl(rec_imp.vl_aliq_prod,0) < 0 then
                              --
                              vn_fase := 15.25;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota do COFINS (em reais) do COFINS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 15.26;
                           --
                           if nvl(rec_imp.qtde_base_calc_prod,0) < 0 then
                              --
                              vn_fase := 15.27;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Quantidade Vendida do COFINS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 15.28;
                           -- Se o imposto é por quantidade e valor, não pode ser informado a Base e percentual
                           if nvl(rec_imp.aliq_apli,0) > 0 then
                              --
                              vn_fase := 15.29;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota do COFINS (em percentual)" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 15.30;
                           --
                           if nvl(rec_imp.vl_base_calc,0) > 0 then
                              --
                              vn_fase := 15.31;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Valor da Base de Cálculo do COFINS" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 15.32;
                        -- Imposto por alíquota
                        if nvl(rec_imp.vl_aliq_prod,0) < 0 or nvl(rec_imp.qtde_base_calc_prod,0) < 0 then
                           --
                           vn_fase := 15.33;
                           -- Se o imposto é por quantidade e valor, não pode ser informado a Base e percentual
                           if nvl(rec_imp.aliq_apli,0) < 0 then
                              --
                              vn_fase := 15.34;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota do COFINS (em percentual)" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 15.35;
                           --
                           if nvl(rec_imp.vl_base_calc,0) < 0 then
                              --
                              vn_fase := 15.36;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Valor da Base de Cálculo do COFINS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 15.37;
                           -- Valida o valor da alíquota em reais
                           if nvl(rec_imp.vl_aliq_prod,0) > 0 then
                              --
                              vn_fase := 15.38;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Alíquota do COFINS (em reais)" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                           vn_fase := 15.39;
                           --
                           if nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                              --
                              vn_fase := 15.40;
                              --
                              gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                                 '"Quantidade Vendida do COFINS" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                              --
                              vn_loggenerico_id := null;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                                  , ev_resumo           => gv_mensagem_log
                                                  , en_tipo_log         => vn_csftipolog_id_imp
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  , en_dm_impressa     => vn_dm_impressa );
                              -- Armazena o "loggenerico_id" na memória
                              if vn_dm_impressa <> 2 then -- sem efeito
                                 pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                        , est_log_generico_nf => vt_log_generico_nf_imp );
                              end if;
                              --
                           end if;
                           --
                        end if;
                        --
                        vn_fase := 15.41;
                        --
                        if nvl(rec_imp.vl_imp_trib,0) < 0 then
                           --
                           vn_fase := 15.42;
                           --
                           gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                              'Está com o valor "Valor do COFINS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                              'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                           --
                           vn_loggenerico_id := null;
                           --
                           pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                               , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                               , ev_resumo           => gv_mensagem_log
                                               , en_tipo_log         => vn_csftipolog_id_imp
                                               , en_referencia_id    => gn_referencia_id
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_dm_impressa     => vn_dm_impressa );
                           -- Armazena o "loggenerico_id" na memória
                           if vn_dm_impressa <> 2 then -- sem efeito
                              pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                     , est_log_generico_nf => vt_log_generico_nf_imp );
                           end if;
                           --
                        end if;
                        --
                  end if;
                  --
                  vn_fase := 15.43;
                  -- Valida situação tributária isenta
                  if rec_imp.cod_st in ('04', '06', '07', '08', '09', '70', '71', '72', '73', '74', '75') then
                     --
                     vn_fase := 15.44;
                     --
                     if nvl(rec_imp.vl_base_calc,0) > 0 and rec_imp.cod_st <> '06' and rec_imp.cod_st <> '73' then
                        --
                        vn_fase := 15.45;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Valor da Base de Cálculo do COFINS" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 15.46;
                     --
                     if nvl(rec_imp.aliq_apli,0) > 0 then
                        --
                        vn_fase := 15.47;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Alíquota do COFINS (em percentual)" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||trim(to_char(nvl(rec_imp.aliq_apli,0),'999G999G999G999G990D00'))||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 15.48;
                     --
                     if nvl(rec_imp.vl_imp_trib,0) > 0 then
                        --
                        vn_fase := 15.49;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Valor do COFINS" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 15.50;
                     --
                     if nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                        --
                        vn_fase := 15.51;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Quantidade Vendida do COFINS" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||to_char(nvl(rec_imp.qtde_base_calc_prod,0),'999G999G999G999G990D00')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 15.52;
                     --
                     if nvl(rec_imp.vl_aliq_prod,0) > 0 then
                        --
                        vn_fase := 15.53;
                        --
                        gv_mensagem_log := 'Situação Tributária: '||rec_imp.cod_st||' - '||rec_imp.descr_st||'.'||chr(10)||
                                           'Não permite "Alíquota do COFINS (em reais)" para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                           'Informado: '||trim(to_char(nvl(rec_imp.vl_aliq_prod,0),'999G999G999G999G990D00'))||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 15.54;
                  -- valida dados de combinação de pis/cofins
                  open c_dados_imp ( rec_item_nf.id
                                   , 4 --> PIS
                                   , rec_imp.dm_tipo );
                  fetch c_dados_imp into vv_cod_st_comp, vn_base_calc_comp;
                  if c_dados_imp%notfound then
                     vv_cod_st_comp := null;
                     vn_base_calc_comp := null;
                  end if;
                  close c_dados_imp;
                  --
                  vn_fase := 15.55;
                  -- Valida se os dados do PIS são iguais ao do COFINS
                  if vv_cod_st_comp is null and vn_base_calc_comp is null then
                     --
                     vn_fase := 15.56;
                     --
                     gv_mensagem_log := 'Não informado Código ST e Base de Cálculo para o Imposto PIS, de acordo com o Imposto COFINS.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     --
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  else
                     --
                     vn_fase := 15.57;
                     --
                     if vv_cod_st_comp <> rec_imp.cod_st then
                        --
                        vn_fase := 15.58;
                        --
                        gv_mensagem_log := 'Situação Tributária do PIS ('||vv_cod_st_comp||') está diferente da Situação Tributária da COFINS ('||
                                           rec_imp.cod_st||').';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        --
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 15.59;
                     --
                     if nvl(vn_base_calc_comp,0) <> nvl(rec_imp.vl_base_calc,0) then
                        --
                        vn_fase := 15.60;
                        --
                        gv_mensagem_log := 'Base de Cálculo do PIS ('||to_char(nvl(vn_base_calc_comp,0),'999G999G999G999G990D00')||') está diferente da '||
                                           'Base de Cálculo da COFINS ('||to_char(nvl(rec_imp.vl_base_calc,0),'999G999G999G999G990D00')||').';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        --
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  end if;
                  --
            elsif rec_imp.cd_imp = 6 then  -- ISS
                  --
                  vn_fase := 16;
                  --
                  if nvl(rec_imp.vl_base_calc, 0) < 0 then
                     --
                     vn_fase := 16.1;
                     --
                     gv_mensagem_log := 'Está com o "Valor da Base de Cálculo do ISSQN" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10);
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 16.2;
                  --
                  if nvl(rec_imp.aliq_apli,0) < 0 then
                     --
                     vn_fase := 16.3;
                     --
                     gv_mensagem_log := 'Está com a "Alíquota do ISSQN" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 16.4;
                  --
                  if nvl(rec_imp.vl_imp_trib,0) < 0 then
                     --
                     vn_fase := 16.5;
                     --
                     gv_mensagem_log := 'Está com o valor "Valor do ISSQN" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                        'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 16.6;
                  -- Valida se foi informado o Municipio o Cód. Lista serviço
                  if nvl(rec_item_nf.cidade_ibge,0) <= 0 then
                     --
                     vn_fase := 16.7;
                     --
                     gv_mensagem_log := '"Código do município de ocorrência do fato gerador do ISSQN" deve ser informado para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 16.8;
                  -- Valida inforrmação do CD_LISTA_SERV
                  if nvl(rec_item_nf.cd_lista_serv,0) <= 0 then
                     --
                     vn_fase := 16.9;
                     --
                     gv_mensagem_log := '"Código da Lista de Serviços" para o ISSQN deve ser informado para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
            elsif rec_imp.cd_imp = 7 then  -- Imposto de importação
                  --
                  vn_fase := 17;
                  --
            elsif rec_imp.cd_imp = 8 then  -- PIS-ST
                  --
                  vn_fase := 18;
                  --
                  if nvl(rec_imp.vl_base_calc,0) > 0 and nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                     --
                     vn_fase := 18.1;
                     --
                     gv_mensagem_log := 'Não pode ter informado o "Valor da Base de Cálculo do PIS" e o "Quantidade Vendida PIS" '||
                                        'informados ao ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 18.2;
                  --
                  if nvl(rec_imp.aliq_apli,0) > 0 and nvl(rec_imp.vl_aliq_prod,0) > 0 then
                     --
                     vn_fase := 18.3;
                     --
                     gv_mensagem_log := 'Não pode ter informado o "Alíquota do PIS (em percentual)" e o "Alíquota do PIS (em reais)" '||
                                        'informados ao ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 18.4;
                  -- Valida informação do imposto por quantidade
                  if nvl(rec_imp.aliq_apli,0) <= 0 or nvl(rec_imp.vl_base_calc,0) <= 0 then
                     --
                     vn_fase := 18.5;
                     -- Valida o valor da alíquota em reais
                     if nvl(rec_imp.vl_aliq_prod,0) <= 0 then
                        --
                        vn_fase := 18.6;
                        --
                        gv_mensagem_log := '"Alíquota do PIS (em reais) do COFINS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 18.7;
                     --
                     if nvl(rec_imp.qtde_base_calc_prod,0) <= 0 then
                        --
                        vn_fase := 18.8;
                        --
                        gv_mensagem_log := '"Quantidade Vendida do PIS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 18.9;
                     -- Se o imposto é por quantidade e valor, não pode ser informado a Base e percentual
                     if nvl(rec_imp.aliq_apli,0) > 0 then
                        --
                        vn_fase := 18.10;
                        --
                        gv_mensagem_log := '"Alíquota do PIS (em percentual)" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 18.11;
                     --
                     if nvl(rec_imp.vl_base_calc,0) > 0 then
                        --
                        vn_fase := 18.12;
                        --
                        gv_mensagem_log := '"Valor da Base de Cálculo do PIS" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 18.13;
                  -- Imposto por alíquota
                  if nvl(rec_imp.vl_aliq_prod,0) <= 0 or nvl(rec_imp.qtde_base_calc_prod,0) <= 0 then
                     --
                     vn_fase := 18.14;
                     -- Se o imposto é por quantidade e valor, não pode ser informado a Base e percentual
                     if nvl(rec_imp.aliq_apli,0) <= 0 then
                        --
                        vn_fase := 18.15;
                        --
                        gv_mensagem_log := '"Alíquota do PIS (em percentual)" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 18.16;
                     --
                     if nvl(rec_imp.vl_base_calc,0) <= 0 then
                        --
                        vn_fase := 18.17;
                        --
                        gv_mensagem_log := '"Valor da Base de Cálculo do PIS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 18.18;
                     -- Valida o valor da alíquota em reais
                     if nvl(rec_imp.vl_aliq_prod,0) > 0 then
                        --
                        vn_fase := 18.19;
                        --
                        gv_mensagem_log := '"Alíquota do PIS (em reais)" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 18.20;
                     --
                     if nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                        --
                        vn_fase := 18.21;
                        --
                        gv_mensagem_log := '"Quantidade Vendida do PIS" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 18.22;
                  --
                  if nvl(rec_imp.vl_imp_trib,0) <= 0 then
                     --
                     vn_fase := 18.23;
                     --
                     gv_mensagem_log := 'Está com o valor "Valor do PIS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                        'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
            elsif rec_imp.cd_imp = 9 then  -- COFINS-ST
                  --
                  vn_fase := 19;
                  --
                  if nvl(rec_imp.vl_base_calc,0) > 0 and nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                     --
                     vn_fase := 19.1;
                     --
                     gv_mensagem_log := 'Não pode ter informado o "Valor da Base de Cálculo da COFINS" e o "Quantidade Vendida COFINS" '||
                                        'informados ao ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 19.2;
                  --
                  if nvl(rec_imp.aliq_apli,0) > 0 and nvl(rec_imp.vl_aliq_prod,0) > 0 then
                     --
                     vn_fase := 19.3;
                     --
                     gv_mensagem_log := 'Não pode ter informado o "Alíquota da COFINS (em percentual)" e o "Alíquota do COFINS (em reais)" '||
                                        'informados ao ao mesmo tempo para o Tipo de Imposto: '||rec_imp.sigla||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 19.4;
                  -- Valida informação do imposto por quantidade
                  if nvl(rec_imp.aliq_apli,0) <= 0 or nvl(rec_imp.vl_base_calc,0) <= 0 then
                     --
                     vn_fase := 19.5;
                     -- Valida o valor da alíquota em reais
                     if nvl(rec_imp.vl_aliq_prod,0) <= 0 then
                        --
                        vn_fase := 19.6;
                        --
                        gv_mensagem_log := '"Alíquota do COFINS (em reais) do COFINS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 19.7;
                     --
                     if nvl(rec_imp.qtde_base_calc_prod,0) <= 0 then
                        --
                        vn_fase := 19.8;
                        --
                        gv_mensagem_log := '"Quantidade Vendida do COFINS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 19.9;
                     -- Se o imposto é por quantidade e valor, não pode ser informado a Base e percentual
                     if nvl(rec_imp.aliq_apli,0) > 0 then
                        --
                        vn_fase := 19.10;
                        --
                        gv_mensagem_log := '"Alíquota do COFINS (em percentual)" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 19.11;
                     --
                     if nvl(rec_imp.vl_base_calc,0) > 0 then
                        --
                        vn_fase := 19.12;
                        --
                        gv_mensagem_log := '"Valor da Base de Cálculo do COFINS" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 19.13;
                  -- Imposto por alíquota
                  if nvl(rec_imp.vl_aliq_prod,0) <= 0 or nvl(rec_imp.qtde_base_calc_prod,0) <= 0 then
                     --
                     vn_fase := 19.14;
                     -- Se o imposto é por quantidade e valor, não pode ser informado a Base e percentual
                     if nvl(rec_imp.aliq_apli,0) <= 0 then
                        --
                        vn_fase := 19.15;
                        --
                        gv_mensagem_log := '"Alíquota do COFINS (em percentual)" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 19.16;
                     --
                     if nvl(rec_imp.vl_base_calc,0) <= 0 then
                        --
                        vn_fase := 19.17;
                        --
                        gv_mensagem_log := '"Valor da Base de Cálculo do COFINS" deve ser informada e maior que zero para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 19.18;
                     -- Valida o valor da alíquota em reais
                     if nvl(rec_imp.vl_aliq_prod,0) > 0 then
                        --
                        vn_fase := 19.19;
                        --
                        gv_mensagem_log := '"Alíquota do COFINS (em reais)" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                     vn_fase := 19.20;
                     --
                     if nvl(rec_imp.qtde_base_calc_prod,0) > 0 then
                        --
                        vn_fase := 19.21;
                        --
                        gv_mensagem_log := '"Quantidade Vendida do COFINS" não deve ser informada para o Tipo de Imposto: '||rec_imp.sigla||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => vn_csftipolog_id_imp
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            , en_dm_impressa     => vn_dm_impressa );
                        -- Armazena o "loggenerico_id" na memória
                        if vn_dm_impressa <> 2 then -- sem efeito
                           pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                                  , est_log_generico_nf => vt_log_generico_nf_imp );
                        end if;
                        --
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 19.22;
                  --
                  if nvl(rec_imp.vl_imp_trib,0) <= 0 then
                     --
                     vn_fase := 19.23;
                     --
                     gv_mensagem_log := 'Está com o valor "Valor do COFINS" divergente para o Tipo de Imposto: '||rec_imp.sigla||'.'||chr(10)||
                                        'Informado: '||to_char(nvl(rec_imp.vl_imp_trib,0),'999G999G999G999G990D00')||'.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                  --
            end if;
            --
            if vv_modfiscal in ('55','65') then
              /*N18-10: se item_nota_fiscal.dm_mod_base_calc_st estiver igual à 4, o campo imp_itemnf.perc_adic tem que estar preenchido.*/
              if rec_item_nf.dm_mod_base_calc_st ='4' then
                ---
                if (nvl(rec_imp.perc_adic,0) = 0 and rec_imp.tipoimp_id = 2) then
                   --
                   vn_fase := 19.24;
                   --
                   --gv_mensagem_log := 'Se o campo modBCST = 4 (Margem Valor Agregado), obrigatório o preenchimento do campo pMVAST.';
				   gv_mensagem_log := 'Se o campo modBCST = 4 (Margem Valor Agregado), o preenchimento do campo pMVAST é facultativo.';
                   --
                   vn_loggenerico_id := null;
                   --
                   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                       , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                       , ev_resumo           => gv_mensagem_log
                                       , en_tipo_log         => informacao --vn_csftipolog_id_imp
                                       , en_referencia_id    => gn_referencia_id
                                       , ev_obj_referencia   => gv_obj_referencia
                                       , en_dm_impressa     => vn_dm_impressa );
                   -- Armazena o "loggenerico_id" na memória
                   if vn_dm_impressa <> 2 then -- sem efeito
                      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                             , est_log_generico_nf => vt_log_generico_nf_imp );
                   end if;
                   --
                end if;
                ---
              else /*N18-20: se item_nota_fiscal.dm_mod_base_calc_st estiver diferente à 4, o campo imp_itemnf.perc_adic não tem que estar preenchido.*/
                ---
                if nvl(rec_imp.perc_adic,0) <> 0 then
                     --
                     vn_fase := 19.25;
                     --
                     gv_mensagem_log := 'Se o campo modBCST <> 4 (Margem Valor Agregado), não deverá ser preenchido o campo pMVAST, preenchimento facultativo.';
                     --
                     vn_loggenerico_id := null;
                     --
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => informacao --vn_csftipolog_id_imp
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia
                                         , en_dm_impressa     => vn_dm_impressa );
                     -- Armazena o "loggenerico_id" na memória
                     if vn_dm_impressa <> 2 then -- sem efeito
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => vt_log_generico_nf_imp );
                     end if;
                     --
                  end if;
                ---
              end if;
              --- 
            end if;
            --
         end loop; -- loop de impostos do Item da NF
         --
         vn_fase := 20;
         -- Se registro log de impostos, verifica se a empresa registra como Erro de Validação
         if nvl(vt_log_generico_nf_imp.count,0) > 0 then
            --
            vn_fase := 20.1;
            --
            vn_indice := nvl(vt_log_generico_nf_imp.first,0);
            --
            vn_fase := 20.2;
            --
            loop
               --
               vn_fase := 20.3;
               --
               if vn_indice = 0 then
                  exit;
               end if;
               --
               vn_fase := 20.4;
               --
               vn_loggenerico_id := vt_log_generico_nf_imp(vn_indice);
               --
               vn_fase := 20.5;
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
               vn_fase := 20.6;
               --
               if vn_indice = vt_log_generico_nf_imp.last then
                  exit;
               else
                  vn_indice := vt_log_generico_nf_imp.next(vn_indice);
               end if;
               --
            end loop;
            --
         end if;
         --
         vn_fase := 21;
         -- Verifica se registra o log de erro de valição da Situação Tributária 60 de ICMS
         if nvl(vt_log_generico_nf_imp_icms60.count,0) > 0 then
            --
            vn_fase := 21.1;
            --
            vn_indice := nvl(vt_log_generico_nf_imp_icms60.first,0);
            --
            vn_fase := 21.2;
            --
            loop
               --
               vn_fase := 21.3;
               --
               if vn_indice = 0 then
                  exit;
               end if;
               --
               vn_fase := 21.4;
               --
               vn_loggenerico_id := vt_log_generico_nf_imp_icms60(vn_indice);
               --
               vn_fase := 21.5;
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
               vn_fase := 21.6;
               --
               if vn_indice = vt_log_generico_nf_imp_icms60.last then
                  exit;
               else
                  vn_indice := vt_log_generico_nf_imp_icms60.next(vn_indice);
               end if;
               --
            end loop;
            --
         end if;
         --
      end loop; -- loop de itens da NF
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_imposto_item fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_IMPOSTO_ITEM;

------------------------------------------------------------
-- Procedimento de validações de base de impostos de ICMS --
------------------------------------------------------------
procedure PKB_VALIDA_BASE_ICMS ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                               , EN_NOTAFISCAL_ID     IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                        number := 0;
   vn_loggenerico_id              log_generico_nf.id%type;
   vn_empresa_id                  empresa.id%type := null;
   vn_dm_ind_emit                 nota_fiscal.dm_ind_emit%type := null;
   vn_dm_fin_nfe                  nota_fiscal.dm_fin_nfe%type := null;
   vd_dt_emiss                    nota_fiscal.dt_emiss%type := null;
   vn_dm_impressa_base            log_generico_nf.dm_impressa%type := null;
   vn_csftipolog_id_baseicms      csf_tipo_log.id%type;
   vn_vl_total_itemnf             number := null;
   vn_vl_total_base               number(15,2):= null;
   vv_cod_imp                     tipo_imposto.cd%type;
   vn_dm_sm_vii_import_vloper     param_efd_icms_ipi.dm_sm_vii_import_vloper%type;
   vn_dm_sm_vicms_import_vloper   param_efd_icms_ipi.dm_sm_vicms_import_vloper%type;
   vn_dm_sm_vpiscof_import_vloper param_efd_icms_ipi.dm_sm_vpiscof_import_vloper%type;
   vn_dm_sm_vicms_export_vloper   param_efd_icms_ipi.dm_sm_vicms_export_vloper%type;
   vn_dm_sm_vpiscof_export_vloper param_efd_icms_ipi.dm_sm_vpiscof_export_vloper%type;
   vn_dm_subtr_vl_icms_deson      param_efd_icms_ipi.dm_subtr_vl_icms_deson%type;
   vn_vl_icms_deson               imp_itemnf.vl_icms_deson%type;
   vn_vl_imp_trib_icmsst          imp_itemnf.vl_imp_trib%type;
   vn_vl_fcp_icmsst               imp_itemnf.vl_fcp%type;
   vn_vl_imp_trib_pis_cofins      imp_itemnf.vl_imp_trib%type := null;
   vn_vl_imp_trib_ii              imp_itemnf.vl_imp_trib%type := null;
   vn_vl_imp_trib_ipi             imp_itemnf.vl_imp_trib%type;
   vn_cfop                        cfop.cd%type;   
   vn_vl_imp_trib_icms            imp_itemnf.vl_imp_trib%type;
   --
   cursor c_param (en_empresa_id in param_efd_icms_ipi.empresa_id%type) is
      select pe.dm_sm_vicms_import_vloper
           , pe.dm_sm_vpiscof_import_vloper
           , pe.dm_sm_vicms_export_vloper
           , pe.dm_sm_vpiscof_export_vloper
           , pe.dm_sm_vii_import_vloper
           , pe.dm_subtr_vl_icms_deson
        from param_efd_icms_ipi pe
       where pe.empresa_id = en_empresa_id;
   --
   cursor c_item_nf (en_notafiscal_id in nota_fiscal.id%type ) is
   select itnf.id itemnf_id
        , itnf.notafiscal_id
        , itnf.item_id
        , itnf.nro_item
        , itnf.cod_item
        , itnf.descr_item
        , itnf.cfop
        , itnf.vl_item_bruto
        , itnf.vl_frete
        , itnf.vl_seguro
        , itnf.vl_desc
        , itnf.vl_outro
        , itnf.vl_ipi_devol
     from item_nota_fiscal itnf
    where itnf.notafiscal_id = en_notafiscal_id
      and itnf.cfop     not in (1604)
    order by itnf.nro_item;
   --
   cursor c_base_icms ( en_itemnf_id item_nota_fiscal.id%type
                      , en_cd_tipo   tipo_imposto.cd%type ) is
   select cst.cod_st
        , ii.vl_imp_trib
        , ii.vl_base_calc
        , ii.vl_base_outro
        , ii.vl_base_isenta
     from imp_itemnf   ii
        , tipo_imposto ti
        , cod_st       cst
    where ii.itemnf_id = en_itemnf_id
      and ii.dm_tipo   = 0  -- Imposto
      and ti.id        = ii.tipoimp_id
      and ti.cd        = en_cd_tipo
      and cst.id(+)    = ii.codst_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Recupera os parâmetros que validam os impostos ICMS, ICMS-60, IPI, PIS e COFINS
      begin
         select nf.empresa_id
              , nf.dm_ind_emit
              , nf.dm_fin_nfe
              , nf.dt_emiss
           into vn_empresa_id
              , vn_dm_ind_emit
              , vn_dm_fin_nfe
              , vd_dt_emiss
           from nota_fiscal nf
          where nf.id = en_notafiscal_id;
      exception
         when others then
            vn_empresa_id  := null;
            vn_dm_ind_emit := null;
            vn_dm_fin_nfe  := null;
            vd_dt_emiss    := null;
      end;
      --
      vn_fase := 3;
      --
      -- Verifica o parâmetro na Empresa se valida os impostos de acordo com a Nota Fiscal sendo Emissão Própria ou Terceiro --
      -- 0-Não Valida e Registra Log.
      -- 1-Valida e Registra Log.
      --
      if nvl(vn_dm_ind_emit,0) = 0 then -- emissão própria
         --
         if pk_csf.fkg_empresa_dmvalbaseicms_emis ( en_empresa_id => vn_empresa_id ) <> 1 then -- 0-Não Valida e Registra Log
            --
            vn_dm_impressa_base       := 2; -- 0-Não, 1-Sim, 2-Sem efeito
            vn_csftipolog_id_baseicms := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 35 ); -- Informação Geral
            --
         else -- 1-Valida e Registra Log
            --
            vn_dm_impressa_base       := 0; -- 0-Não, 1-Sim, 2-Sem efeito
            vn_csftipolog_id_baseicms := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 1 ); -- Erro de validação
            --
         end if;
         --
      elsif nvl(vn_dm_ind_emit,0) = 1 then -- terceiros
            --
            if pk_csf.fkg_empresa_dmvalbaseicms_terc ( en_empresa_id => vn_empresa_id ) <> 1 then -- 0-Não Valida e Registra Log
               --
               vn_dm_impressa_base       := 2; -- 0-Não, 1-Sim, 2-Sem efeito
               vn_csftipolog_id_baseicms := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 35 ); -- Informação Geral
               --
            else -- 1-Valida e Registra Log
               --
               vn_dm_impressa_base       := 0; -- 0-Não, 1-Sim, 2-Sem efeito
               vn_csftipolog_id_baseicms := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 1 ); -- Erro de validação
               --
            end if;
            --
      else
         --
         vn_dm_impressa_base       := 2; -- 0-Não, 1-Sim, 2-Sem efeito
         vn_csftipolog_id_baseicms := pk_csf.fkg_csf_tipo_log_id ( en_tipo_log => 35 ); -- Informação Geral
         --
      end if;
      --
      vn_fase := 4;
      --
      open c_param (en_empresa_id => vn_empresa_id);
      fetch c_param into vn_dm_sm_vicms_import_vloper
                       , vn_dm_sm_vpiscof_import_vloper
                       , vn_dm_sm_vicms_export_vloper
                       , vn_dm_sm_vpiscof_export_vloper
                       , vn_dm_sm_vii_import_vloper
                       , vn_dm_subtr_vl_icms_deson;
      close c_param;
      --
      vn_fase := 5;
      -- Recupero os itens da nota fiscal
      for rec_item_nf in c_item_nf ( en_notafiscal_id ) loop
         --
         exit when c_item_nf%notfound or c_item_nf%notfound is null;
         --
         vn_fase := 6;
         vn_vl_total_itemnf := 0;
         gv_cabec_log_item  := ' Nro. Item: '||rec_item_nf.nro_item||' Item: '||rec_item_nf.cod_item||' - '||rec_item_nf.descr_item||chr(10);
         --
         if vn_dm_subtr_vl_icms_deson = 1 then
            --
            vn_fase := 7;
            -- Soma da desoneração do ICMS
            begin
               select sum(nvl(imp.vl_icms_deson,0))
                 into vn_vl_icms_deson
                 from imp_itemnf   imp
                    , tipo_imposto ti
                    , cod_st       cs
                where imp.itemnf_id  = rec_item_nf.itemnf_id
                  and imp.dm_tipo    = 0 -- 0-imposto
                  and imp.tipoimp_id = ti.id
                  and ti.cd          = 1 -- ICMS
                  and imp.codst_id   = cs.id
                  and cs.cod_st     in ('20', '30', '40', '41', '50', '70', '90'); -- ICMS
            exception
               when others then
                  vn_vl_icms_deson := 0;
            end;
            --
         end if;
         --
         vn_fase := 8;
         -- recupera o ICMS-ST do Item
         begin
            select imp.vl_imp_trib
                 , imp.vl_fcp
              into vn_vl_imp_trib_icmsst
                 , vn_vl_fcp_icmsst
              from imp_itemnf   imp
                 , tipo_imposto ti
             where imp.itemnf_id = rec_item_nf.itemnf_id
               and imp.dm_tipo   = 0 -- Imposto
               and ti.id         = imp.tipoimp_id
               and ti.cd         = 2; -- ICMS-ST
         exception
            when others then
               vn_vl_imp_trib_icmsst := null;
               vn_vl_fcp_icmsst      := null;
         end;
         --
         vn_fase := 9;
         -- recupera o IPI do Item
         begin
            select imp.vl_imp_trib
              into vn_vl_imp_trib_ipi
              from imp_itemnf   imp
                 , cod_st       cst
                 , tipo_imposto ti
             where imp.itemnf_id = rec_item_nf.itemnf_id
               and imp.dm_tipo   = 0 -- Imposto
               and cst.id        = imp.codst_id
               and ti.id         = imp.tipoimp_id
               and ti.cd         = 3; -- IPI
         exception
            when others then
               vn_vl_imp_trib_ipi := null;
         end;
         --
         vn_fase := 10;
         -- Calcula o valor da operação do Item da Nota Fiscal
         if vd_dt_emiss >= to_date('01/08/2018','dd/mm/rrrr') then
            --
            vn_vl_total_itemnf := ( nvl(rec_item_nf.vl_item_bruto,0) - nvl(rec_item_nf.vl_desc,0) - nvl(vn_vl_icms_deson,0) )
                                  + nvl(rec_item_nf.vl_frete,0) + nvl(rec_item_nf.vl_seguro,0) + nvl(rec_item_nf.vl_outro,0)
                                  + nvl(vn_vl_imp_trib_icmsst,0) + nvl(vn_vl_imp_trib_ipi,0) + nvl(vn_vl_fcp_icmsst,0)
                                  + nvl(rec_item_nf.vl_ipi_devol,0);
            --
         else
            --
            vn_vl_total_itemnf := ( nvl(rec_item_nf.vl_item_bruto,0) - nvl(rec_item_nf.vl_desc,0) - nvl(vn_vl_icms_deson,0) )
                                  + nvl(rec_item_nf.vl_frete,0) + nvl(rec_item_nf.vl_seguro,0) + nvl(rec_item_nf.vl_outro,0)
                                  + nvl(vn_vl_imp_trib_icmsst,0) + nvl(vn_vl_imp_trib_ipi,0);
            --
         end if;
         --
         vn_fase := 11;
         -- Verificar se o item é de Importação ou Exportação e acrescentar os valores de ICMS, PIS e COFINS, de acordo com o parâmetro da empresa,
         -- no Valor da Operação/Contábil.
         if substr(rec_item_nf.cfop, 1, 1) in ('3', '7') then
            --
            vn_fase := 11.1;
            --
            vn_vl_imp_trib_pis_cofins := 0;
            --
            if nvl(vn_dm_sm_vpiscof_import_vloper,0) = 1 or -- Soma Valor de ICMS para Importação (CFOP de início 3), no Valor da Operação/Contábil: 0-Não; 1-Sim
               nvl(vn_dm_sm_vpiscof_export_vloper,0) = 1 then -- Soma Valor de Pis/Cofins para Exportação (CFOP de início 7), no Valor da Operação/Contábil: 0-Não; 1-Sim
               --
               vn_fase := 11.2;
               --
               begin
                  select nvl(sum(nvl(ii.vl_imp_trib,0)),0)
                    into vn_vl_imp_trib_pis_cofins
                    from imp_itemnf   ii
                       , tipo_imposto ti
                   where ii.itemnf_id = rec_item_nf.itemnf_id
                     and ti.id        = ii.tipoimp_id
                     and ti.cd       in (4,5); -- 4-pis, 5-cofins
               exception
                  when others then
                     vn_vl_imp_trib_pis_cofins := 0;
               end;
               --
            end if;
            --
            vn_fase := 11.3;
            --
            -------
            begin
              select nvl(sum(nvl(ii.vl_imp_trib,0)),0)
                 into vn_vl_imp_trib_icms
                 from imp_itemnf   ii
                    , tipo_imposto ti
                where ii.itemnf_id = rec_item_nf.itemnf_id
                  and ti.id        = ii.tipoimp_id
                  and ti.cd        = 1; -- 1-ICMS
            exception
               when others then
                  vn_vl_imp_trib_icms := 0;
            end;   
            -------             
            if substr(vn_cfop, 1, 1) = '3' and
               nvl(vn_dm_sm_vicms_import_vloper,0) = 1 then -- Soma Valor de ICMS para Importação (CFOP de início 3), no Valor da Operação/Contábil: 0-Não; 1-Sim
              
                vn_vl_total_itemnf := nvl(vn_vl_total_itemnf,0) + nvl(vn_vl_imp_trib_icms/*rec_item_nf.vl_imp_trib*/,0);
                  
            end if;
            --
            vn_fase := 11.4;
            --
            if substr(vn_cfop, 1, 1) = '3' and
               nvl(vn_dm_sm_vpiscof_import_vloper,0) = 1 then -- Soma Valor de pis/cofins para Importação (CFOP de início 3), no Valor da Operação/Contábil: 0-Não; 1-Sim
               vn_vl_total_itemnf := nvl(vn_vl_total_itemnf,0) + nvl(vn_vl_imp_trib_pis_cofins,0);
            end if;
            --
            vn_fase := 11.5;
            --
            if substr(vn_cfop, 1, 1) = '3' and
               nvl(vn_dm_sm_vii_import_vloper,0) = 1 then -- Soma Valor do Imposto de Importação para Importação (CFOP de início 3), no Valor da Operação/Contábil: 0-Não; 1-Sim
               -- Recupera o Imposto de Importação
               begin
                  select imp.vl_imp_trib
                    into vn_vl_imp_trib_ii
                    from imp_itemnf   imp
                       , tipo_imposto ti
                   where imp.itemnf_id = rec_item_nf.itemnf_id
                     and imp.dm_tipo   = 0 -- Imposto
                     and ti.id         = imp.tipoimp_id
                     and ti.cd         = 7; -- II
               exception
                  when others then
                     vn_vl_imp_trib_ii := null;
               end;
               --
               vn_vl_total_itemnf := nvl(vn_vl_total_itemnf,0) + nvl(vn_vl_imp_trib_ii,0);
               --
            end if;
            --
            vn_fase := 11.6;
            --
            if substr(vn_cfop, 1, 1) = '7' and
               nvl(vn_dm_sm_vicms_export_vloper,0) = 1 then -- Soma Valor de ICMS para Exportação (CFOP de início 7), no Valor da Operação/Contábil: 0-Não; 1-Sim
               vn_vl_total_itemnf := nvl(vn_vl_total_itemnf,0) + nvl(vn_vl_imp_trib_icms/*rec_item_nf.vl_imp_trib*/,0);
            end if;
            --
            vn_fase := 11.7;
            --
            if substr(vn_cfop, 1, 1) = '7' and
               nvl(vn_dm_sm_vpiscof_export_vloper,0) = 1 then -- Soma Valor de Pis/Cofins para Exportação (CFOP de início 7), no Valor da Operação/Contábil: 0-Não; 1-Sim
               vn_vl_total_itemnf := nvl(vn_vl_total_itemnf,0) + nvl(vn_vl_imp_trib_pis_cofins,0);
            end if;
            --
         end if;
         --
         vn_fase := 12;
         -- Recupera os valores de base do Item da Nota Fiscal somente para validação do Imposto ICMS
         for rec_base_icms in c_base_icms( rec_item_nf.itemnf_id
                                         , '1' ) loop
            --
            exit when c_base_icms%notfound or (c_base_icms%notfound) is null;
            -----------
            vn_fase := 13;
            vn_vl_total_base := nvl(rec_base_icms.vl_base_calc,0) + nvl(rec_base_icms.vl_base_outro,0) + nvl(rec_base_icms.vl_base_isenta,0);
            --
            vn_fase := 14;
            if rec_base_icms.cod_st = '60' and vn_vl_total_base = 0 then
              null;
            else  
               --
               if vn_vl_total_itemnf <> vn_vl_total_base then
                  --
                  vn_loggenerico_id := null;
                  gv_mensagem_log   := 'A soma das bases de ICMS está divergente do valor contábil do Item da Nota Fiscal. Valor contábil: '||
                                       to_char(vn_vl_total_itemnf,'999G999G999G999G990D00')||' - Soma das bases ICMS: '||
                                       to_char(vn_vl_total_base,'999G999G999G999G990D00');
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => vn_csftipolog_id_baseicms
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia
                                      , en_empresa_id       => vn_empresa_id
                                      , en_dm_impressa      => vn_dm_impressa_base  );
                  -- Armazena o "loggenerico_id" na memória
                  if vn_dm_impressa_base <> 2 then
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                  end if;
                  --
               end if;
               --
            end if;   
            --
            vn_fase := 15;
            if rec_base_icms.cod_st = '00' then
              --
              vn_fase := 15.1;
              if nvl(rec_base_icms.vl_base_calc,0) < vn_vl_total_itemnf then
                 --
                 vn_loggenerico_id := null;
                 gv_mensagem_log   := 'O CST de ICMS está tributado integralmente, portanto a base de cálculo não pode ser menor que o valor contábil do item. '||
                                      'Valor contábil do Item: '||trim(to_char(vn_vl_total_itemnf,'999G999G999G999G990D00'))||' - Valor da Base de Cálculo: '||
                                      trim(to_char(rec_base_icms.vl_base_calc,'999G999G999G999G990D00'));
                 --
                 pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => erro_de_validacao
                                     , en_referencia_id    => vn_csftipolog_id_baseicms
                                     , ev_obj_referencia   => gv_obj_referencia
                                     , en_empresa_id       => vn_empresa_id
                                     , en_dm_impressa      => vn_dm_impressa_base);
                 -- Armazena o "loggenerico_id" na memória
                 if vn_dm_impressa_base <> 2 then
                    pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                           , est_log_generico_nf => est_log_generico_nf );
                 end if;
                 --
              end if;
               --
            end if;
            --
            vn_fase := 16;
            if rec_base_icms.cod_st = '20' then
              --
              vn_fase := 16.1;
              if nvl(rec_base_icms.vl_base_calc,0) > vn_vl_total_itemnf then
                 --
                 vn_loggenerico_id  := null;
                 gv_mensagem_log    := 'O CST de ICMS está como redução de base de cálculo, portanto a base de cálculo não pode ser maior que o valor contábil '||
                                       'do item. Valor contábil:'||trim(to_char(vn_vl_total_itemnf,'999G999G999G999G990D00'))||' - Valor da Base de Cálculo: '||
                                       trim(to_char(rec_base_icms.vl_base_calc ,'999G999G999G999G990D00'));
                 --
                 pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => vn_csftipolog_id_baseicms
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia
                                     , en_empresa_id       => vn_empresa_id
                                     , en_dm_impressa      => vn_dm_impressa_base );
                 -- Armazena o "loggenerico_id" na memória
                 if vn_dm_impressa_base <> 2 then
                    pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                           , est_log_generico_nf => est_log_generico_nf );
                 end if;
                 --
              end if;
              --
            end if;
            --
            vn_fase := 17;
            if rec_base_icms.cod_st in ('40','41') then
              --
              vn_fase := 17.1;
              if rec_base_icms.vl_base_calc > 0 then
                 --
                 vn_loggenerico_id := null;
                 gv_mensagem_log   := 'O CST de ICMS está como Isento ou Não tributado, portanto não pode existir valor na base de cálculo. Valor da Base de '||
                                      'Cálculo: '||trim(to_char(rec_base_icms.vl_base_calc ,'999G999G999G999G990D00'));
                 --
                 pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                     , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                                     , ev_resumo           => gv_mensagem_log
                                     , en_tipo_log         => vn_csftipolog_id_baseicms
                                     , en_referencia_id    => gn_referencia_id
                                     , ev_obj_referencia   => gv_obj_referencia
                                     , en_empresa_id       => vn_empresa_id
                                     , en_dm_impressa      => vn_dm_impressa_base);
                 -- Armazena o "loggenerico_id" na memória
                 if vn_dm_impressa_base <> 2 then
                    pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                           , est_log_generico_nf => est_log_generico_nf );
                 end if;
                 --
              end if;
              --
            end if;
            --
         end loop; -- loop de base do Item da NF
         --
      end loop; -- loop de itens da NF
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_imposto_item fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
end PKB_VALIDA_BASE_ICMS;

-------------------------------------------------------------------
-- Função retorna as notas fiscais que não pode ser inutilizadas --
-------------------------------------------------------------------
FUNCTION FKG_NF_NAO_INUTILIZA ( EN_EMPRESA_ID   IN  INUTILIZA_NOTA_FISCAL.EMPRESA_ID%TYPE
                              , EN_DM_TP_AMB    IN  INUTILIZA_NOTA_FISCAL.DM_TP_AMB%TYPE
                              , EV_COD_MOD      IN  MOD_FISCAL.COD_MOD%TYPE
                              , EN_SERIE        IN  INUTILIZA_NOTA_FISCAL.SERIE%TYPE
                              , EN_NRO_INI      IN  INUTILIZA_NOTA_FISCAL.NRO_INI%TYPE
                              , EN_NRO_FIM      IN  INUTILIZA_NOTA_FISCAL.NRO_FIM%TYPE )
          RETURN VARCHAR2 IS
   --
   cursor c_nota_fiscal is
   select nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dm_st_proc
     from Nota_Fiscal  nf
        , Mod_Fiscal   mf
    where nf.empresa_id    = en_empresa_id
      and nf.dm_tp_amb     = en_dm_tp_amb
      and nf.serie         = en_serie
      and nf.nro_nf between en_nro_ini and en_nro_fim
      and nf.dm_ind_emit   = 0  -- Emissão própria
      and mf.id            = nf.modfiscal_id
      and mf.cod_mod       = ev_cod_mod
    order by nf.nro_nf;
   --
   vn_fase  number := 0;
   vv_descr varchar2(4000) := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   for rec in c_nota_fiscal loop
      exit when c_nota_fiscal%notfound or (c_nota_fiscal%notfound) is null;
      --
      vn_fase := 2;
      --
      -- Se não for nenhuma das situações de processo
      /*
      5 - Nota rejeitada
      10 - Erro na validação da NOta
      11 - Erro na montagem do XMl
      12 - Erro ao enviar a Nota ao Sefaz
      99 - Erro geral de sistema
      */
      if rec.dm_st_proc in (4, 6, 7, 8, 14) then
         --
         vn_fase := 3;
         --
         vv_descr := vv_descr || 'Nota Fiscal: ' || rec.nro_nf
                              || ' Série: ' || rec.serie
                              || ' Modelo: ' || rec.cod_mod
                              || ', não pode ser inutilizada pois está a com a Situação: '
							  || substr(pk_csf.fkg_dominio('NOTA_FISCAL.DM_ST_PROC', rec.dm_st_proc), 1, 100)
                              || chr(10);
         --
      end if;
      --
   end loop;
   --
   return vv_descr;
   --
EXCEPTION
   when no_data_found then
      return null;
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_nf_nao_inutiliza fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao );
      exception
         when others then
            null;
      end;
      --
      return null;
      --
END FKG_NF_NAO_INUTILIZA;

--------------------------------------------------------------------
-- Procedimento faz a integração da Inutilização de Notas Fiscais --
--------------------------------------------------------------------
PROCEDURE PKB_INTEGR_INUTILIZANF ( EST_LOG_GENERICO_NF               IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                 , EST_ROW_INUTILIZA_NOTA_FISCAL  IN OUT NOCOPY  INUTILIZA_NOTA_FISCAL%ROWTYPE
                                 , EV_COD_MOD                     IN             MOD_FISCAL.COD_MOD%TYPE ) IS
   --
   vn_fase              number := 0;
   vn_loggenerico_id    log_generico_nf.id%type;
   vn_dm_tp_amb         Inutiliza_Nota_Fiscal.dm_tp_amb%TYPE;
   vn_dm_forma_emiss    Inutiliza_Nota_Fiscal.dm_forma_emiss%TYPE;
   vn_uf_ibge           Inutiliza_Nota_Fiscal.uf_ibge%TYPE;
   vv_cnpj              Inutiliza_Nota_Fiscal.cnpj%TYPE;
   vv_id_inut           Inutiliza_Nota_Fiscal.id_inut%TYPE;
   vn_modfiscal_id      Inutiliza_Nota_Fiscal.modfiscal_id%TYPE;
   vv_cd_versaowsdl_nfe versao_wsdl.cd%type;
   vn_dm_tipo_integr    empresa.dm_tipo_integr%type := null;
   vv_usuario_nome      neo_usuario.nome%type := null;
   --
BEGIN
   --
   -- Monta cabeçalho da inutilização para informação na validação
   -- Empresa
   vn_fase := 1;
   --
   gv_cabec_log := null;
   gv_cabec_log_item := null;
   --
   if nvl(est_row_Inutiliza_Nota_Fiscal.empresa_id,0) > 0 then
      --
      vn_fase := 1.1;
      --
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa( en_empresa_id => est_row_Inutiliza_Nota_Fiscal.empresa_id );
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 1.2;
   -- Código Modelo
   if ev_cod_mod is not null then
      --
      vn_fase := 1.3;
      --
      gv_cabec_log := gv_cabec_log||'Modelo: '||ev_cod_mod;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 1.4;
   -- Série dos documento
   if trim(est_row_Inutiliza_Nota_Fiscal.serie) is not null then
      --
      vn_fase := 1.5;
      --
      gv_cabec_log := gv_cabec_log||'Série: '||est_row_Inutiliza_Nota_Fiscal.serie;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 1.6;
   --
   if pk_csf.fkg_is_numerico(est_row_Inutiliza_Nota_Fiscal.serie) then
      --
      est_row_Inutiliza_Nota_Fiscal.serie := to_number(est_row_Inutiliza_Nota_Fiscal.serie);
      --
   end if;
   --
   vn_fase := 1.7;
   -- Número Inicial
   if nvl(est_row_Inutiliza_Nota_Fiscal.nro_ini,0) > 0 then
      --
      vn_fase := 1.8;
      --
      gv_cabec_log := gv_cabec_log||'Número Inicial: '||est_row_Inutiliza_Nota_Fiscal.nro_ini;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   vn_fase := 1.9;
   -- Número Final
   if nvl(est_row_Inutiliza_Nota_Fiscal.nro_fim,0) > 0 then
      --
      vn_fase := 1.10;
      --
      gv_cabec_log := gv_cabec_log||'Número Final: '||est_row_Inutiliza_Nota_Fiscal.nro_fim;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      --
   end if;
   --
   --| Valida a informação da empresa
   vn_fase := 2;
   --
   -- Valida se a empresa é valida
   if pk_csf.fkg_empresa_id_valido ( en_empresa_id => est_row_Inutiliza_Nota_Fiscal.empresa_id ) = false then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Empresa" ('||est_row_Inutiliza_Nota_Fiscal.empresa_id||') está incorreta.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 2.2;
   -- acerta o ano
   if est_row_Inutiliza_Nota_Fiscal.ano <> to_number(to_char(gt_row_Inutiliza_Nota_Fiscal.dt_inut, 'rrrr')) then
      --
      est_row_Inutiliza_Nota_Fiscal.ano := to_number(to_char(gt_row_Inutiliza_Nota_Fiscal.dt_inut, 'rrrr'));
      --
   end if;
   --
   vn_fase := 3;
   -- Função retorna o tipo de ambiente parâmetrizado para a empresa
   vn_dm_tp_amb := pk_csf.fkg_tp_amb_empresa ( en_empresa_id => est_row_Inutiliza_Nota_Fiscal.empresa_id );
   --
   vn_fase := 3.1;
   -- Verifica se o tipo de ambiente informado é diferente do tipo de ambiente da empresa
   if est_row_Inutiliza_Nota_Fiscal.dm_tp_amb <> vn_dm_tp_amb then
      --
      vn_fase := 3.2;
      --
      gv_mensagem_log := 'O Tipo de Ambiente informado na Inutilização ('||est_row_Inutiliza_Nota_Fiscal.dm_tp_amb||
                         ') está divergente do Tipo de Ambiente da Empresa ('||vn_dm_tp_amb||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   -- Busca a forma de emissão habilitada para a Empresa
   vn_dm_forma_emiss := pk_csf.fkg_forma_emiss_empresa ( en_empresa_id => est_row_Inutiliza_Nota_Fiscal.empresa_id );
   --
   vn_fase := 4.1;
   -- Verifica se a forma de emissão da Inutilização é diferente da forma de emissão da Empresa
   if est_row_Inutiliza_Nota_Fiscal.dm_forma_emiss <> vn_dm_forma_emiss then
      --
      vn_fase := 4.2;
      --
      gv_mensagem_log := 'Forma de Emissão informada na Inutilização ('||est_row_Inutiliza_Nota_Fiscal.dm_forma_emiss||
                         ') está divergente da Forma de Emissão da Empresa ('||vn_dm_forma_emiss||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 5;
   -- Busca os dados da empresa
   begin
      --
      select lpad(j.num_cnpj, 8, '0') || lpad(j.num_filial, 4, '0') || lpad(dig_cnpj, 2, '0')
           , to_number(es.ibge_estado)
           , e.dm_tipo_integr
        into vv_cnpj
           , vn_uf_ibge
           , vn_dm_tipo_integr
        from Empresa   e
           , Pessoa    p
           , Juridica  j
           , Cidade    c
           , Estado    es
       where e.id         = est_row_Inutiliza_Nota_Fiscal.empresa_id
         and p.id         = e.pessoa_id
         and j.pessoa_id  = p.id
         and c.id         = p.cidade_id
         and es.id        = c.estado_id;
      --
   exception
      when no_data_found then
         vv_cnpj := null;
         vn_uf_ibge := null;
      when others then
         raise_application_error(20101, 'Erro ao recuperar dados da empresa:'||sqlerrm);
   end;
   --
   vn_fase := 6;
   -- Valida se o código informado é diferente do Código UF_IBGE da Empresa
   if est_row_Inutiliza_Nota_Fiscal.uf_ibge <> vn_uf_ibge then
      --
      vn_fase := 6.1;
      --
      gv_mensagem_log := 'Código IBGE do Estado informado na Inutilização ('||est_row_Inutiliza_Nota_Fiscal.uf_ibge||
                         ') está divergente do Código IBGE do Estado da Empresa ('||vn_uf_ibge||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 7;
   --
   -- Valida se o CNPJ do emitente é deferente do CNPJ da empresa
   if est_row_Inutiliza_Nota_Fiscal.cnpj <> vv_cnpj then
      --
      vn_fase := 7.1;
      --
      gv_mensagem_log := 'CNPJ informado na Inutilização ('||est_row_Inutiliza_Nota_Fiscal.cnpj||') está divergerte do CNPJ da Empresa ('||vv_cnpj||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   --| Valida informação do campo modfical_id
   vn_fase := 8;
   --
   vn_modfiscal_id := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => ev_cod_mod );
   --
   vn_fase := 8.1;
   -- Valida a informação do modelo fiscal
   if est_row_Inutiliza_Nota_Fiscal.modfiscal_id <> vn_modfiscal_id then
      --
      vn_fase := 8.2;
      --
      gv_mensagem_log := 'Modelo do Documento Fiscal informado na Inutilização está divergente do Modelo Fiscal ('||ev_cod_mod||').';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9;
   -- Valida informação da série
   if trim(est_row_Inutiliza_Nota_Fiscal.serie) is null then
      --
      vn_fase := 9.1;
      --
      gv_mensagem_log := '"Série da Nota Fiscal" deve ser informada.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 9.2;
   --
   if est_row_Inutiliza_Nota_Fiscal.serie >= 900 then
      --
      -- Se a serie for maior que 900, então atrinui a forma de emissão SCAN
      est_row_Inutiliza_Nota_Fiscal.dm_forma_emiss := 3;
      --
   else
      --
      est_row_Inutiliza_Nota_Fiscal.dm_forma_emiss := vn_dm_forma_emiss;
      --
   end if;
   --
   vn_fase := 10;
   --
   -- Valida informações o Número inicial e final de inutilização
   if nvl(est_row_Inutiliza_Nota_Fiscal.nro_ini,0) <= 0 then
      --
      vn_fase := 10.1;
      --
      gv_mensagem_log := '"Número da NF-e inicial a ser inutilizada" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11;
   --
   if nvl(est_row_Inutiliza_Nota_Fiscal.nro_fim,0) <= 0 then
      --
      vn_fase := 11.1;
      --
      gv_mensagem_log := '"Número da NF-e final a ser inutilizada" deve ser informado.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 11.2;
   --
   -- Valida se o nro inicial é maior que o nro final
   if nvl(est_row_Inutiliza_Nota_Fiscal.nro_ini,0) > nvl(est_row_Inutiliza_Nota_Fiscal.nro_fim,0) then
      --
      vn_fase := 11.3;
      --
      gv_mensagem_log := 'Número inicial não pode ser maior que o número final.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 12;
   --
   est_row_Inutiliza_Nota_Fiscal.justif := trim( pk_csf.fkg_converte( est_row_Inutiliza_Nota_Fiscal.justif ) );
   --
   -- Valida a informação da justificativa da Nota Fiscal
   if nvl(length(est_row_Inutiliza_Nota_Fiscal.justif),0) < 15 then
      --
      vn_fase := 12.1;
      --
      gv_mensagem_log := 'Justificativa da Nota Fiscal deve ter no mínimo 15 caracteres.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 13;
   --
   -- Valida se o intervalo de Notas Fiscais podem ser canceladas
   -- Função retorna as notas que não podem ser inutilizadas
   gv_mensagem_log := fkg_nf_nao_inutiliza ( en_empresa_id   => est_row_Inutiliza_Nota_Fiscal.empresa_id
                                           , en_dm_tp_amb    => est_row_Inutiliza_Nota_Fiscal.dm_tp_amb
                                           , ev_cod_mod      => ev_cod_mod
                                           , en_serie        => est_row_Inutiliza_Nota_Fiscal.serie
                                           , en_nro_ini      => est_row_Inutiliza_Nota_Fiscal.nro_ini
                                           , en_nro_fim      => est_row_Inutiliza_Nota_Fiscal.nro_fim );
   --
   vn_fase := 13.1;
   --
   if gv_mensagem_log is not null then
      --
      vn_fase := 13.2;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 14;
   --
   vv_cd_versaowsdl_nfe := pk_csf.fkg_versaowsdl_nfe_estado ( en_estado_id => pk_csf.fkg_Estado_ibge_id ( ev_ibge_estado => vn_uf_ibge ) );
   --
   if vv_cd_versaowsdl_nfe = '1.10' then
      -- Identificador da TAG a ser assinada formada com Código da UF(2) + CNPJ(14) + modelo(2) + série(3)
      -- + nro inicial(9) e nro final(9) precedida do literal ID
      vv_id_inut := 'ID'|| lpad(vn_uf_ibge, 2, '0')
                 || vv_cnpj
                 || ev_cod_mod
                 || lpad(est_row_Inutiliza_Nota_Fiscal.serie, 3, '0')
                 || lpad(est_row_Inutiliza_Nota_Fiscal.nro_ini, 9, '0')
                 || lpad(est_row_Inutiliza_Nota_Fiscal.nro_fim, 9, '0');
      --
   else
      --
      -- Identificador da TAG a ser assinada formada com Código da UF(2) + Ano (2 posições) + CNPJ(14) + modelo(2) + série(3)
      -- + nro inicial(9) e nro final(9) precedida do literal ID
      vv_id_inut := 'ID'|| lpad(vn_uf_ibge, 2, '0')
                 || substr(est_row_Inutiliza_Nota_Fiscal.ano, 3, 2)
                 || vv_cnpj
                 || ev_cod_mod
                 || lpad(est_row_Inutiliza_Nota_Fiscal.serie, 3, '0')
                 || lpad(est_row_Inutiliza_Nota_Fiscal.nro_ini, 9, '0')
                 || lpad(est_row_Inutiliza_Nota_Fiscal.nro_fim, 9, '0');
      --
   end if;
   --
   vn_fase := 14.1;
   -- Verifica se o Identificador da TAG a ser Assinada é diferente do informado
   if trim(est_row_Inutiliza_Nota_Fiscal.id_inut) is not null
      and est_row_Inutiliza_Nota_Fiscal.id_inut <> vv_id_inut then
      --
      est_row_Inutiliza_Nota_Fiscal.id_inut := vv_id_inut;
      --
   end if;
   --
   -- Se não houve erro na validação insere os dados
   vn_fase := 99;
   --
   if nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 99.1;
      -- Altera situação para "Aberto"
      update Inutiliza_Nota_Fiscal set dm_situacao = 0
           , id_inut = vv_id_inut
           , justif = est_row_Inutiliza_Nota_Fiscal.justif
           , dm_forma_emiss = vn_dm_forma_emiss
           , ano = est_row_Inutiliza_Nota_Fiscal.ano
           , serie = est_row_Inutiliza_Nota_Fiscal.serie
       where id = est_row_Inutiliza_Nota_Fiscal.id
         and dm_situacao = 5; -- Não Validada
      --
      vn_fase := 99.2;
      --
      commit;
      --
   else
      --
      vn_fase := 99.3;
      -- Altera a Situação da Inutilização para 6-Erro de Validação
      update Inutiliza_Nota_Fiscal set dm_situacao = 6
       where id = est_row_Inutiliza_Nota_Fiscal.id
         and dm_situacao = 5; -- Não Validada
      --
      commit;
      --
   end if;
   --
   vn_fase := 99.4;
   --
   if nvl(est_row_Inutiliza_Nota_Fiscal.usuario_id,0) > 0 then
      vv_usuario_nome := pk_csf.fkg_usuario_nome ( en_usuario_id => est_row_Inutiliza_Nota_Fiscal.usuario_id );
   else
      vv_usuario_nome := 'Integração';
   end if;
   --
   vn_fase := 99.5;
   --
   gv_mensagem_log := 'Usuário que solicitou a inutilização: '||vv_usuario_nome||'.';
   --
   pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                       , ev_mensagem         => gv_cabec_log
                       , ev_resumo           => gv_mensagem_log
                       , en_tipo_log         => info_canc_nfe
                       , en_referencia_id    => gn_referencia_id
                       , ev_obj_referencia   => gv_obj_referencia
                       , en_dm_impressa     => 1 );
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_integr_inutilizanf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_INTEGR_INUTILIZANF;

-----------------------------------------------------------------------------------
-- Procedimento que busca todas as Inutilizações com a situação "5-Não Validada" --
-----------------------------------------------------------------------------------
PROCEDURE PKB_CONSIT_INUTILIZACAO ( en_multorg_id  in mult_org.id%type )
IS
   --
   cursor c_inutilizanf is
   select inf.id
        , inf.empresa_id
        , inf.dm_situacao
        , inf.dm_tp_amb
        , inf.dm_forma_emiss
        , inf.dt_inut
        , inf.uf_ibge
        , inf.ano
        , inf.cnpj
        , inf.modfiscal_id
        , inf.serie
        , inf.nro_ini
        , inf.nro_fim
        , inf.justif
        , inf.id_inut
        , inf.dm_st_integra
        , inf.usuario_id
     from empresa e
        , Inutiliza_Nota_Fiscal inf
    where 1 = 1
      and e.multorg_id = en_multorg_id
      and inf.empresa_id = e.id
      and inf.dm_situacao = 5 -- Não Validada
      and not exists (select 1 from r_loteintws_inf r where r.inutilizanotafiscal_id = inf.id)
    order by inf.id;
   --
   vn_fase           number := 0;
   vt_log_generico_nf   dbms_sql.number_table;
   vv_cod_mod        mod_fiscal.cod_mod%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   pkb_seta_obj_ref ( ev_objeto => 'INUTILIZA_NOTA_FISCAL' );
   --
   vn_fase := 2;
   --
   for rec in c_inutilizanf loop
      exit when c_inutilizanf%notfound or (c_inutilizanf%notfound) is null;
      --
      vn_fase := 3;
      --
      vt_log_generico_nf.delete;
      --
      vn_fase := 4;
      --
      gt_row_Inutiliza_Nota_Fiscal := null;
      --
      pkb_seta_referencia_id ( en_id => rec.id );
      --
      vn_fase := 5;
      --
      gt_row_Inutiliza_Nota_Fiscal.id              := rec.id;
      gt_row_Inutiliza_Nota_Fiscal.empresa_id      := rec.empresa_id;
      gt_row_Inutiliza_Nota_Fiscal.dm_situacao     := rec.dm_situacao;
      gt_row_Inutiliza_Nota_Fiscal.dm_tp_amb       := rec.dm_tp_amb;
      gt_row_Inutiliza_Nota_Fiscal.dm_forma_emiss  := rec.dm_forma_emiss;
      gt_row_Inutiliza_Nota_Fiscal.dt_inut         := rec.dt_inut;
      gt_row_Inutiliza_Nota_Fiscal.uf_ibge         := rec.uf_ibge;
      gt_row_Inutiliza_Nota_Fiscal.ano             := rec.ano;
      gt_row_Inutiliza_Nota_Fiscal.cnpj            := rec.cnpj;
      gt_row_Inutiliza_Nota_Fiscal.modfiscal_id    := rec.modfiscal_id;
      gt_row_Inutiliza_Nota_Fiscal.serie           := rec.serie;
      gt_row_Inutiliza_Nota_Fiscal.nro_ini         := rec.nro_ini;
      gt_row_Inutiliza_Nota_Fiscal.nro_fim         := rec.nro_fim;
      gt_row_Inutiliza_Nota_Fiscal.justif          := rec.justif;
      gt_row_Inutiliza_Nota_Fiscal.id_inut         := rec.id_inut;
      gt_row_Inutiliza_Nota_Fiscal.dm_st_integra   := rec.dm_st_integra;
      gt_row_Inutiliza_Nota_Fiscal.usuario_id      := rec.usuario_id;
      --
      vn_fase := 6;
      --
      vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => rec.modfiscal_id );
      --
      vn_fase := 7;
      --
      pkb_integr_inutilizanf ( est_log_generico_nf           => vt_log_generico_nf
                             , est_row_Inutiliza_Nota_Fiscal => gt_row_Inutiliza_Nota_Fiscal
                             , ev_cod_mod                    => vv_cod_mod 
                             );
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_consit_inutilizacao fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
      exception
         when others then
            null;
      end;
      --
END PKB_CONSIT_INUTILIZACAO;

---------------------------------------------------------------
-- Função cria o Lote de Envio da Nota Fiscal e retorna o ID --
---------------------------------------------------------------
FUNCTION FKG_INTEGR_LOTE ( EST_LOG_GENERICO_NF     IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                         , EN_EMPRESA_ID        IN             EMPRESA.ID%TYPE
			 , EN_DM_FORMA_EMISS    IN             EMPRESA.DM_FORMA_EMISS%TYPE DEFAULT NULL )
         RETURN LOTE.ID%TYPE IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_lote_id         Lote.id%TYPE;
   vn_dm_forma_emiss  empresa.dm_forma_emiss%type := null;
   vn_dm_tp_amb       empresa.dm_tp_amb%type;
   --
BEGIN
   --
   -- Monta cabeçalho do Lote para informação na validação
   -- Empresa
   vn_fase := 1;
   --
   if nvl(en_empresa_id,0) > 0 then
      --
      gv_cabec_log := pk_csf.fkg_nome_empresa ( en_empresa_id => en_empresa_id );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida se a empresa é valida
   if pk_csf.fkg_empresa_id_valido ( en_empresa_id => en_empresa_id ) = false then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Empresa" ('||en_empresa_id||') está incorreta para a criação do lote de notas fiscais.';
      --
      vn_loggenerico_id := null;
      --
      pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                       , ev_mensagem         => gv_cabec_log
                                       , ev_resumo           => gv_mensagem_log );
      -- Armazena o "loggenerico_id" na memória
      pk_log_generico.pkb_gt_log_generico ( en_loggenerico    => vn_loggenerico_id
                                          , est_log_generico  => est_log_generico_nf );
      --
   end if;   
   --
   vn_fase := 3;
   --
   if nvl(en_dm_forma_emiss,0) > 0 then
      vn_dm_forma_emiss := en_dm_forma_emiss;
   else
      vn_dm_forma_emiss := pk_csf.fkg_forma_emiss_empresa ( en_empresa_id );
   end if;
   --
   vn_fase := 4;
   --
   vn_dm_tp_amb := pk_csf.fkg_tp_amb_empresa ( en_empresa_id );
   --
   -- Se não houve erro na validação insere os dados
   vn_fase := 99;
   --
   if nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 99.1;
      --
      select lote_seq.nextval
        into vn_lote_id
        from dual;
      --
      vn_fase := 99.2;
      --
      insert into Lote ( ID
                       , empresa_id
                       , dm_situacao
                       , dm_tp_amb
                       , dm_forma_emiss
                       , dt_abert 
                       )
                values ( vn_lote_id
                       , en_empresa_id
                       , 0
                       , vn_dm_tp_amb
                       , vn_dm_forma_emiss
                       , sysdate 
                       );
      --
   end if;
   --
   return vn_lote_id;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_integr_lote fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem         => gv_cabec_log
                                          , ev_resumo           => gv_mensagem_log
                                          , en_tipo_log         => erro_de_validacao );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END FKG_INTEGR_LOTE;

--------------------------------------------------
-- Procedimento excluir lotes sem notas fiscais --
--------------------------------------------------
PROCEDURE PKB_EXCLUIR_LOTE_SEM_NFE ( en_multorg_id  in mult_org.id%type )
IS
   --
   vn_fase           number := 0;
   vn_loggenerico_id log_generico_nf.id%type;
   vn_qtde           number;
   --
   cursor c_lote is
   select l.id
     from empresa e
        , lote l
    where 1 = 1
      and e.multorg_id = en_multorg_id
      and l.empresa_id = e.id
      and l.dm_situacao <> 2
    order by l.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   for rec in c_lote loop
      exit when c_lote%notfound or (c_lote%notfound) is null;
      --
      vn_fase := 2;
      --
      begin
         --
         select count(1)
           into vn_qtde
           from nota_fiscal
          where lote_id = rec.id;
         --
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde,0) <= 0 then
         --
         vn_fase := 4;
         --
         delete from lote_chave_epec where lote_id = rec.id;
         --
         delete from lote where id = rec.id;
         --
         vn_fase := 5;
         --
         commit;
         --
      end if;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_excluir_lote_sem_nfe fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem         => gv_cabec_log
                                          , ev_resumo           => gv_mensagem_log
                                          , en_tipo_log         => erro_de_validacao );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END PKB_EXCLUIR_LOTE_SEM_NFE;

--------------------------------------------------
-- Processo de criação do Lote de Notas Fiscais --
--------------------------------------------------
PROCEDURE PKB_GERA_LOTE ( en_multorg_id  in mult_org.id%type )
IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_lote_id         Lote.id%TYPE := null;
   vn_qtde_nfe        number := 0;
   vn_qtde_canc       number := 0;
   vt_log_generico_nf    dbms_sql.number_table;
   --
   cursor c_empresa is
   select e.id            empresa_id
        , e.cod_matriz    cod_matriz
        , e.cod_filial    cod_filial
        , e.max_qtd_nfe_lote  max_qtd_nfe_lote
     from empresa e
    where 1 = 1
      and e.multorg_id = en_multorg_id
      and e.dm_situacao = 1 -- ativo
    order by e.cod_matriz
           , e.cod_filial;
   --
   cursor c_nota_fiscal ( en_empresa_id Empresa.id%TYPE ) is
   select nf.id notafiscal_id
     from Nota_Fiscal    nf
        , Mod_Fiscal     mf
    where nf.empresa_id  = en_empresa_id
      and nf.dm_st_proc  = 1 -- Aguardando processamento
      and nf.dm_ind_emit = 0 -- Emissão Própria
      and nf.lote_id is null
      and nf.dm_forma_emiss = 1 -- Normal
      and mf.id          = nf.modfiscal_id
      and mf.cod_mod     in ('55', '65')  -- NF-e
    order by 1;
   --
   cursor c_nf_cfs ( en_empresa_id Empresa.id%TYPE ) is
   select nf.id notafiscal_id
     from Nota_Fiscal    nf
        , Mod_Fiscal     mf
    where nf.empresa_id  = en_empresa_id
      and nf.dm_st_proc  = 1 -- Aguardando processamento
      and nf.dm_ind_emit = 0 -- Emissão Própria
      and nf.lote_id is null
      and nf.dm_forma_emiss = 2 -- Contingência FS
      and mf.id          = nf.modfiscal_id
      and mf.cod_mod     in ('55', '65')  -- NF-e
    order by 1;
   --
   cursor c_nota_fiscal_scan ( en_empresa_id Empresa.id%TYPE ) is
   select nf.id notafiscal_id
        , nf.dm_forma_emiss
     from Nota_Fiscal    nf
        , Mod_Fiscal     mf
    where nf.empresa_id  = en_empresa_id
      and nf.dm_st_proc  = 1 -- Aguardando processamento
      and nf.dm_ind_emit = 0 -- Emissão Própria
      and nf.lote_id is null
      and nf.dm_forma_emiss = 3 -- SCAN
      and mf.id          = nf.modfiscal_id
      and mf.cod_mod     in ('55', '65')  -- NF-e
    order by 1;
   --
   cursor c_nf_cepec ( en_empresa_id Empresa.id%TYPE ) is
   select nf.id notafiscal_id
     from Nota_Fiscal    nf
        , Mod_Fiscal     mf
    where nf.empresa_id  = en_empresa_id
      and nf.dm_st_proc  = 1 -- Aguardando processamento
      and nf.dm_ind_emit = 0 -- Emissão Própria
      and nf.lote_id is null
      and nf.dm_forma_emiss = 4 -- Contingência DPEC/EPEC
      and mf.id          = nf.modfiscal_id
      and mf.cod_mod     in ('55', '65')  -- NF-e
    order by 1;
   --
   cursor c_nf_cfsda ( en_empresa_id Empresa.id%TYPE ) is
   select nf.id notafiscal_id
     from Nota_Fiscal    nf
        , Mod_Fiscal     mf
    where nf.empresa_id  = en_empresa_id
      and nf.dm_st_proc  = 1 -- Aguardando processamento
      and nf.dm_ind_emit = 0 -- Emissão Própria
      and nf.lote_id is null
      and nf.dm_forma_emiss = 5 -- Contingência FS-DA
      and mf.id          = nf.modfiscal_id
      and mf.cod_mod     in ('55', '65')  -- NF-e
    order by 1;
   --
   cursor c_nf_svcan ( en_empresa_id Empresa.id%TYPE ) is
   select nf.id notafiscal_id
     from Nota_Fiscal    nf
        , Mod_Fiscal     mf
    where nf.empresa_id  = en_empresa_id
      and nf.dm_st_proc  = 1 -- Aguardando processamento
      and nf.dm_ind_emit = 0 -- Emissão Própria
      and nf.lote_id is null
      and nf.dm_forma_emiss in (6) -- Contingência SVC-AN
      and mf.id          = nf.modfiscal_id
      and mf.cod_mod     in ('55', '65')  -- NF-e
    order by 1;
   --
   cursor c_nf_svcrs ( en_empresa_id Empresa.id%TYPE ) is
   select nf.id notafiscal_id
     from Nota_Fiscal    nf
        , Mod_Fiscal     mf
    where nf.empresa_id  = en_empresa_id
      and nf.dm_st_proc  = 1 -- Aguardando processamento
      and nf.dm_ind_emit = 0 -- Emissão Própria
      and nf.lote_id is null
      and nf.dm_forma_emiss in (7) -- Contingência SVC-RS
      and mf.id          = nf.modfiscal_id
      and mf.cod_mod     in ('55', '65')  -- NF-e
    order by 1;
   --
   cursor c_canc ( en_notafiscal_id  nota_fiscal.id%type ) is
   select count(1)
     from nota_fiscal_canc nfc
    where nfc.notafiscal_id = en_notafiscal_id;
   --
   -- procedure de criar o lote
   procedure pkb_criar_lote ( en_empresa_id        empresa.id%type
                            , en_max_qtd_nfe_lote  number
                            , en_notafiscal_id     nota_fiscal.id%type
                            , en_dm_forma_emiss    number
                            )
   is
      --
      --
   begin
      --
      vn_fase := 99;
      -- Verifica se não existe lote e o cria "OU" se o número de notas for maior ou igual a 50, zero o lote para a criação de um novo lote
      if (nvl(vn_lote_id,0) <= 0 or nvl(vn_qtde_nfe,0) > nvl(en_max_qtd_nfe_lote,0) ) then
         --
         vn_fase := 99.1;
         --
         vt_log_generico_nf.delete;
         --
         vn_fase := 99.2;
         --
         vn_lote_id := fkg_integr_lote ( est_log_generico_nf    => vt_log_generico_nf
                                       , en_empresa_id       => en_empresa_id
                                       , en_dm_forma_emiss   => en_dm_forma_emiss
                                       );
         --
         vn_fase := 99.3;
         --
         vn_qtde_nfe := 1;
         -- Se houve erro ao criar o lote sai do processo de notas fiscais
         if nvl(vt_log_generico_nf.count,0) > 0 then
            --
            return;
            --
         end if;
         --
      end if;
      --
      vn_fase := 99.4;
      -- Atualiza a Nota Fiscal com o Id do Lote
      update Nota_Fiscal set lote_id = vn_lote_id
       where id = en_notafiscal_id;
      --
      vn_fase := 99.5;
      --
      vn_qtde_nfe := nvl(vn_qtde_nfe,0) + 1;
      --
   end pkb_criar_lote;
   --
BEGIN
   --
   vn_fase := 1;
   --
   -- Inicia a criação de lote por empresa
   for rec_emp in c_empresa loop
      exit when c_empresa%notfound or c_empresa%notfound is null;
      --
      vn_fase := 2;
      --
      vn_lote_id := 0;
      vn_qtde_nfe := 0;
      --
      for rec_nfe in c_nota_fiscal( rec_emp.empresa_id ) loop
         exit when c_nota_fiscal%notfound or c_nota_fiscal%notfound is null;
         --
         vn_fase := 2.1;
         --
         vn_qtde_canc := 0;
         --
         open c_canc ( rec_nfe.notafiscal_id );
         fetch c_canc into vn_qtde_canc;
         if c_canc%notfound then
            vn_qtde_canc := 0;
         end if;
         close c_canc;
         --
         vn_fase := 2.2;
         --
         if nvl(vn_qtde_canc,0) <= 0 then
            --
            pkb_criar_lote ( en_empresa_id        => rec_emp.empresa_id
                           , en_max_qtd_nfe_lote  => rec_emp.max_qtd_nfe_lote
                           , en_notafiscal_id     => rec_nfe.notafiscal_id
                           , en_dm_forma_emiss    => 1 -- Normal
                           );
            --
         end if;
         --
      end loop;
      --
      commit;
      --
      vn_fase := 3;
      --
      vn_lote_id := 0;
      vn_qtde_nfe := 0;
      --
      for rec_nf_cfs in c_nf_cfs( rec_emp.empresa_id ) loop
         exit when c_nf_cfs%notfound or c_nf_cfs%notfound is null;
         --
         vn_fase := 3.1;
         --
         vn_qtde_canc := 0;
         --
         open c_canc ( rec_nf_cfs.notafiscal_id );
         fetch c_canc into vn_qtde_canc;
         if c_canc%notfound then
            vn_qtde_canc := 0;
         end if;
         close c_canc;
         --
         vn_fase := 3.2;
         --
         if nvl(vn_qtde_canc,0) <= 0 then
            --
            pkb_criar_lote ( en_empresa_id        => rec_emp.empresa_id
                           , en_max_qtd_nfe_lote  => rec_emp.max_qtd_nfe_lote
                           , en_notafiscal_id     => rec_nf_cfs.notafiscal_id
                           , en_dm_forma_emiss    => 2 -- Contingência FS
                           );
            --
         end if;
         --
      end loop;
      --
      commit;
      --
      vn_fase := 4;
      --
      vn_lote_id := 0;
      vn_qtde_nfe := 0;
      --
      for rec_scan in c_nota_fiscal_scan( rec_emp.empresa_id ) loop
         exit when c_nota_fiscal_scan%notfound or c_nota_fiscal_scan%notfound is null;
         --
         vn_fase := 4.1;
         --
         vn_qtde_canc := 0;
         --
         open c_canc ( rec_scan.notafiscal_id );
         fetch c_canc into vn_qtde_canc;
         if c_canc%notfound then
            vn_qtde_canc := 0;
         end if;
         close c_canc;
         --
         vn_fase := 4.2;
         --
         if nvl(vn_qtde_canc,0) <= 0 then
            --
            pkb_criar_lote ( en_empresa_id        => rec_emp.empresa_id
                           , en_max_qtd_nfe_lote  => rec_emp.max_qtd_nfe_lote
                           , en_notafiscal_id     => rec_scan.notafiscal_id
                           , en_dm_forma_emiss    => 3 -- SCAN
                           );
            --
         end if;
         --
      end loop;
      --
      commit;
      --
      vn_fase := 5;
      --
      vn_lote_id := 0;
      vn_qtde_nfe := 0;
      --
      for rec_nf_cepec in c_nf_cepec( rec_emp.empresa_id ) loop
         exit when c_nf_cepec%notfound or c_nf_cepec%notfound is null;
         --
         vn_fase := 5.1;
         --
         vn_qtde_canc := 0;
         --
         open c_canc ( rec_nf_cepec.notafiscal_id );
         fetch c_canc into vn_qtde_canc;
         if c_canc%notfound then
            vn_qtde_canc := 0;
         end if;
         close c_canc;
         --
         vn_fase := 5.2;
         --
         if nvl(vn_qtde_canc,0) <= 0 then
            --
            pkb_criar_lote ( en_empresa_id        => rec_emp.empresa_id
                           , en_max_qtd_nfe_lote  => rec_emp.max_qtd_nfe_lote
                           , en_notafiscal_id     => rec_nf_cepec.notafiscal_id
                           , en_dm_forma_emiss    => 4 -- EPEC/DPEC
                           );
            --
         end if;
         --
      end loop;
      --
      commit;
      --
      vn_fase := 6;
      --
      vn_lote_id := 0;
      vn_qtde_nfe := 0;
      --
      for rec_nf_cfsda in c_nf_cfsda( rec_emp.empresa_id ) loop
         exit when c_nf_cfsda%notfound or c_nf_cfsda%notfound is null;
         --
         vn_fase := 6.1;
         --
         vn_qtde_canc := 0;
         --
         open c_canc ( rec_nf_cfsda.notafiscal_id );
         fetch c_canc into vn_qtde_canc;
         if c_canc%notfound then
            vn_qtde_canc := 0;
         end if;
         close c_canc;
         --
         vn_fase := 6.2;
         --
         if nvl(vn_qtde_canc,0) <= 0 then
            --
            pkb_criar_lote ( en_empresa_id        => rec_emp.empresa_id
                           , en_max_qtd_nfe_lote  => rec_emp.max_qtd_nfe_lote
                           , en_notafiscal_id     => rec_nf_cfsda.notafiscal_id
                           , en_dm_forma_emiss    => 5 -- Contingência FS-DA
                           );
            --
         end if;
         --
      end loop;
      --
      commit;
      --
      vn_fase := 7;
      --
      vn_lote_id := 0;
      vn_qtde_nfe := 0;
      --
      for rec_nf_svcan in c_nf_svcan( rec_emp.empresa_id ) loop
         exit when c_nf_svcan%notfound or c_nf_svcan%notfound is null;
         --
         vn_fase := 7.1;
         --
         vn_qtde_canc := 0;
         --
         open c_canc ( rec_nf_svcan.notafiscal_id );
         fetch c_canc into vn_qtde_canc;
         if c_canc%notfound then
            vn_qtde_canc := 0;
         end if;
         close c_canc;
         --
         vn_fase := 7.2;
         --
         if nvl(vn_qtde_canc,0) <= 0 then
            --
            pkb_criar_lote ( en_empresa_id        => rec_emp.empresa_id
                           , en_max_qtd_nfe_lote  => rec_emp.max_qtd_nfe_lote
                           , en_notafiscal_id     => rec_nf_svcan.notafiscal_id
                           , en_dm_forma_emiss    => 6 -- Contingência SVC-AN
                           );
            --
         end if;
         --
      end loop;
      --
      commit;
      --
      vn_fase := 8;
      --
      vn_lote_id := 0;
      vn_qtde_nfe := 0;
      --
      for rec_nf_svcrs in c_nf_svcrs( rec_emp.empresa_id ) loop
         exit when c_nf_svcrs%notfound or c_nf_svcrs%notfound is null;
         --
         vn_fase := 8.1;
         --
         vn_qtde_canc := 0;
         --
         open c_canc ( rec_nf_svcrs.notafiscal_id );
         fetch c_canc into vn_qtde_canc;
         if c_canc%notfound then
            vn_qtde_canc := 0;
         end if;
         close c_canc;
         --
         vn_fase := 8.2;
         --
         if nvl(vn_qtde_canc,0) <= 0 then
            --
            pkb_criar_lote ( en_empresa_id        => rec_emp.empresa_id
                           , en_max_qtd_nfe_lote  => rec_emp.max_qtd_nfe_lote
                           , en_notafiscal_id     => rec_nf_svcrs.notafiscal_id
                           , en_dm_forma_emiss    => 7 -- Contingência SVC-RS
                           );
            --
         end if;
         --
      end loop;
      --
      commit;
      --
   end loop;
   --
   vn_fase := 99;
   --
   pkb_excluir_lote_sem_nfe ( en_multorg_id => en_multorg_id );
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_gera_lote fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico.id%type;
      begin
         pk_log_generico.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                          , ev_mensagem         => gv_cabec_log
                                          , ev_resumo           => gv_mensagem_log
                                          , en_tipo_log         => erro_de_validacao );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END PKB_GERA_LOTE;

---------------------------------------------------------------------------------------------------------------------------
-- Validar se a nota fiscal é de entrada e de pessoa física e gerou crédito de pis e cofins - não permitir essa condição --
---------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VAL_CRED_NF_PESSOA_FISICA( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                       , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vv_existe          varchar2(1) := 'N';
   vv_existe2         varchar2(1) := 'N';
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_dm_fin_nfe      nota_fiscal.dm_fin_nfe%type;
   --
BEGIN
   --
   begin
      select 'S'
        into vv_existe
        from nota_fiscal nf
       where nf.id          = en_notafiscal_id
         and nf.dm_ind_oper = 0 -- 0-entrada 1-saída
         and nf.dm_ind_emit = 0 -- 0-emissão própria, 1-terceiros
         and pk_csf.fkg_empr_val_cred_pf_pc(nf.empresa_id) = 1 -- 0-não, 1-sim
         and exists (select nd.notafiscal_id
                       from nota_fiscal_dest nd
                      where nd.notafiscal_id = nf.id
                        and nd.cpf      is not null) -- nota fiscal de pessoa física
         and exists (select it.notafiscal_id
                       from tipo_imposto     ti
                          , imp_itemnf       ii
                          , item_nota_fiscal it
                      where it.notafiscal_id = nf.id
                        --and pk_csf_efd_pc.fkg_gera_cred_nfpc_cfop_empr(nf.empresa_id,it.cfop_id) = 0 -- 0-não, 1-sim
                        and pk_csf_efd_pc.fkg_gera_cred_nfpc_cfop_empr(nf.empresa_id, it.cfop_id, ii.codst_id, null) = 0 -- 0-não, 1-sim, considerar somente PIS
                        and ii.itemnf_id     = it.id
                        and nvl(ii.vl_imp_trib,0) > 0 -- possui valor de imposto
                        and ti.id            = ii.tipoimp_id
                        and ti.cd            = 4); -- 4-pis, 5-cofins
                        --and ti.cd           in (4,5)); -- 4-pis, 5-cofins
   exception
      when no_data_found then
         vv_existe := 'N';
      when others then
         --
         gv_mensagem_log := 'Problemas ao verificar nota fiscal de pessoa física com crédito de pis/cofins. Erro = '||sqlerrm;
         --
         begin
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_sistema
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         exception
            when others then
               null;
         end;
         --
   end;
   --
   -- Se for devolução e for PIS/COFINS com CST '50' e tem valor tributado aceita o credito e não apresenta erro
   if vv_existe = 'S' then
      --
      begin
         select nf.dm_fin_nfe		 
           into vn_dm_fin_nfe
           from nota_fiscal   nf
          where nf.id = en_notafiscal_id; 
      exception
         when no_data_found then
            vn_dm_fin_nfe := null;	
         when others then
            --
            gv_mensagem_log := 'Problemas ao verificar nota fiscal de pessoa física com crédito de pis/cofins. Erro = '||sqlerrm;
            --
            begin
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_sistema
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            exception
               when others then
                  null;
            end;
            --			
      end;
      --	  
      begin
         select distinct 'S'
           into vv_existe2
           from nota_fiscal         nf
              , item_nota_fiscal    it     
              , imp_itemnf          ip
              , tipo_imposto        ti
              , cod_st              cs
          where nf.id                 = en_notafiscal_id
            and it.notafiscal_id      = nf.id
            and ip.itemnf_id          = it.id
            and nvl(ip.vl_imp_trib,0) > 0
            and pk_csf.fkg_cd_tipooper_conf_cfop( it.cfop ) = 3  -- Tipo de Operação vinculada com CFOP = 3-Devolução
            and ti.id                 = ip.tipoimp_id
            and ti.cd                 in (4,5) -- PIS/COFINS
            and cs.id                 = ip.codst_id
            and cs.tipoimp_id         = ip.tipoimp_id
            and cs.cod_st             = '50';   
      exception
         when no_data_found then
            vv_existe2 := 'N';
         when others then
            --
            gv_mensagem_log := 'Problemas ao verificar nota fiscal de pessoa física com crédito de pis/cofins. Erro = '||sqlerrm;
            --
            begin
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_sistema
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            exception
               when others then
                  null;
            end;
            --
      end;
	  --
      -- nota_fiscal.dm_fin_nfe: 1-NF-e normal, 2-NF-e complementar, 3-NF-e de ajuste e 4-Devolução de mercadoria  
      if nvl(vn_dm_fin_nfe,0) = 4 and vv_existe2 = 'N' then  
         vv_existe2 := 'S';
      end if;		 
      --
      if vv_existe2 = 'N' then
         --
         gv_mensagem_log := 'Nota fiscal de pessoa física não pode gerar crédito para os impostos PIS e/ou COFINS, quando a operação é entrada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --	  
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Problemas em pkb_val_cred_nf_pessoa_fisica. Erro = '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VAL_CRED_NF_PESSOA_FISICA;

-------------------------------------------------------------------------------------
-- Procedimento realiza a criação de registro analitico de impostos da Nota Fiscal --
-------------------------------------------------------------------------------------
PROCEDURE PKB_GERA_REGIST_ANALIT_IMP ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                     , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_tipo_integr     number;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_vl_icms_deson   number;
   vn_empresa_id      empresa.id%type;
   vn_multorg_id      mult_org.id%type;
   vn_codst_id        cod_st.id%type;
   vv_cod_st          cod_st.cod_st%type;
   vn_cfop_cd         cfop.cd%type;
   --
   -- Matriz do resumo de ICMS
   type t_nfregist_analit is table of nfregist_analit%rowtype index by binary_integer;
   type t_bi_nfregist_analit is table of t_nfregist_analit index by binary_integer;
   type t_tri_nfregist_analit is table of t_bi_nfregist_analit index by binary_integer;
   type t_tetra_nfregist_analit is table of t_tri_nfregist_analit index by binary_integer;
   type t_penta_nfregist_analit is table of t_tetra_nfregist_analit index by binary_integer;
   vt_penta_nfregist_analit t_penta_nfregist_analit;
   --
   vn_cfop                cfop.cd%type;
   vn_vl_operacao         number;
   vv_cod_st_icms         cod_st.cod_st%type;
   vn_vl_base_calc_icms   imp_itemnf.vl_base_calc%type;
   vn_aliq_icms           imp_itemnf.aliq_apli%type;
   vn_vl_imp_trib_icms    imp_itemnf.vl_imp_trib%type;
   vn_vl_base_calc_icmsst imp_itemnf.vl_base_calc%type;
   vn_vl_imp_trib_icmsst  imp_itemnf.vl_imp_trib%type;
   vn_vl_bc_isenta_icms   number;
   vn_vl_bc_outra_icms    number;
   vv_cod_st_ipi          cod_st.cod_st%type;
   vn_vl_base_calc_ipi    imp_itemnf.vl_base_calc%type;
   vn_aliq_ipi            imp_itemnf.aliq_apli%type;
   vn_vl_imp_trib_ipi     imp_itemnf.vl_imp_trib%type;
   vn_vl_bc_isenta_ipi    number;
   vn_vl_bc_outra_ipi     number;
   vn_ipi_nao_recup       number;
   vn_outro_ipi           number;
   vn_vl_imp_nao_dest_ipi number;
   vn_vl_fcp_icmsst       number;
   vn_aliq_fcp_icms       number;
   vn_vl_fcp_icms         number;
   vb_achou               boolean;
   --
   -- #68345
   vn_NfregistAnalit_id   Nfregist_Analit.ID%type; --#68345
   vn_qtd_item            number; --#68345
   --
   cursor c_item is
   select inf.id itemnotafiscal_id
        , inf.cfop_id
        , nvl(inf.orig,0) orig
        , nvl(inf.vl_item_bruto,0) vl_item_bruto
        , nvl(inf.vl_frete,0) vl_frete
        , nvl(inf.vl_seguro,0) vl_seguro
        , nvl(inf.vl_desc ,0) vl_desc		
        , icms.perc_reduc
        --
        ,icms.codst_id
        ,icms.aliq_apli
        ,nvl(icms.vl_fcp,0) vl_fcp
        ,nvl(icms.vl_imp_trib,0) vl_imp_trib
        ,nvl(ICMS.ALIQ_FCP,0) ALIQ_FCP
        --
     from item_nota_fiscal inf
        , imp_itemnf       icms
        , tipo_imposto     ti
    where 1 = 1
      and inf.notafiscal_id = en_notafiscal_id
      and icms.itemnf_id    = inf.id
      and ti.id             = icms.tipoimp_id
      and ti.cd             in (1, 10) -- icms e Simples Nacional
    order by inf.id;
   --
   --| Procedimento para inserir os dados
   procedure pkb_insere_dados
   is
      --
      i pls_integer := 0;
      j pls_integer := 0;
      k pls_integer := 0;
      l pls_integer := 0;
      m pls_integer := 0;
      a number;     -- variável criada para controlar a quantidade quando a combinação (i)(j)(k)(l) for igual
      --
   begin
      --
      i := nvl(vt_penta_nfregist_analit.first, -1);
      --| Resumo de CFOP x Alíquota
      loop -- trata a primeira dimensão
         --
         if nvl(i,-1) = -1 then
            exit;
         end if;
         --
         j := nvl(vt_penta_nfregist_analit(i).first,-1);
         --
         loop -- trata a segunda dimensão
            --
            if nvl(j,-1) = -1 then
               exit;
            end if;
            --
            k := nvl(vt_penta_nfregist_analit(i)(j).first,-1);
            --
            loop -- trata a terceira dimensão
               --
               if nvl(k,-1) = -1 then
                  exit;
               end if;
               --
               l := nvl(vt_penta_nfregist_analit(i)(j)(k).first,-1);
               --
               loop
                  --
                  if nvl(l,-1) = -1 then
                     exit;
                  end if;
                  --
                    m := nvl(vt_penta_nfregist_analit(i)(j)(k)(l).first,-1);
                    a := nvl(vt_penta_nfregist_analit(i)(j)(k)(l).count,-1);
                  --
                    loop
                    --
                      if nvl(m,-1) = -1 then
                         exit;
                      end if;
                        gt_row_nfregist_analit.notafiscal_id      := vt_penta_nfregist_analit(i)(j)(k)(l)(m).notafiscal_id;
                        gt_row_nfregist_analit.codst_id           := vt_penta_nfregist_analit(i)(j)(k)(l)(m).codst_id;
                        gt_row_nfregist_analit.cfop_id            := vt_penta_nfregist_analit(i)(j)(k)(l)(m).cfop_id;
                        gt_row_nfregist_analit.aliq_icms          := vt_penta_nfregist_analit(i)(j)(k)(l)(m).aliq_icms;
                        gt_row_nfregist_analit.vl_operacao        := nvl(vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_operacao,0);
                        gt_row_nfregist_analit.vl_bc_icms         := nvl(vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_bc_icms,0);
                        gt_row_nfregist_analit.vl_icms            := nvl(vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_icms,0);
                        gt_row_nfregist_analit.vl_bc_icms_st      := nvl(vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_bc_icms_st,0);
                        gt_row_nfregist_analit.vl_icms_st         := nvl(vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_icms_st,0);
                        gt_row_nfregist_analit.vl_red_bc_icms     := nvl(vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_red_bc_icms,0);
                        gt_row_nfregist_analit.vl_ipi             := nvl(vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_ipi,0);
                        gt_row_nfregist_analit.obslanctofiscal_id := vt_penta_nfregist_analit(i)(j)(k)(l)(m).obslanctofiscal_id;
                        gt_row_nfregist_analit.dm_orig_merc       := vt_penta_nfregist_analit(i)(j)(k)(l)(m).dm_orig_merc;
                        gt_row_nfregist_analit.vl_base_outro      := vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_base_outro;
                        gt_row_nfregist_analit.vl_imp_outro       := vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_imp_outro;
                        gt_row_nfregist_analit.vl_base_isenta     := vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_base_isenta;
                        gt_row_nfregist_analit.aliq_aplic_outro   := vt_penta_nfregist_analit(i)(j)(k)(l)(m).aliq_aplic_outro;
                        gt_row_nfregist_analit.vl_fcp_icms        := vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_fcp_icms;
                        gt_row_nfregist_analit.vl_fcp_icmsst      := vt_penta_nfregist_analit(i)(j)(k)(l)(m).vl_fcp_icmsst;
                        gt_row_nfregist_analit.ALIQ_FCP_ICMS      := vt_penta_nfregist_analit(i)(j)(k)(l)(m).ALIQ_FCP_ICMS;
                        --
                  vv_cod_st := pk_csf.fkg_cod_st_cod ( en_id_st => gt_row_nfregist_analit.codst_id );
                  --
                  vn_cfop_cd := pk_csf.fkg_cfop_cd ( en_cfop_id => gt_row_nfregist_analit.cfop_id );
                  --
                  pkb_integr_nfregist_analit ( est_log_generico_nf     => est_log_generico_nf
                                             , est_row_nfregist_analit => gt_row_nfregist_analit
                                             , ev_cod_st               => vv_cod_st
                                             , en_cfop                 => vn_cfop_cd
                                             , ev_cod_obs              => null
                                             , en_multorg_id           => vn_multorg_id
                                             );

                  if m = vt_penta_nfregist_analit(i)(j)(k)(l).last and a = 1 then
                    exit;
                  else
                    a:= a - 1;
                    m := vt_penta_nfregist_analit(i)(j)(k)(l).next(m);
                  end if;
                  --
                 end loop;
                  --
                if l = vt_penta_nfregist_analit(i)(j)(k).last then
                     exit;
                  else
                  l := vt_penta_nfregist_analit(i)(j)(k).next(l);
                  end if;
                  --
               end loop;
               --
               if k = vt_penta_nfregist_analit(i)(j).last then
                  exit;
               else
                  k := vt_penta_nfregist_analit(i)(j).next(k);
               end if;
               --
            end loop; -- fim da terceira dimensão
            --
            if j = vt_penta_nfregist_analit(i).last then
               exit;
            else
               j := vt_penta_nfregist_analit(i).next(j);
            end if;
            --
         end loop; -- fim da segunda dimensão
         --
         if i = vt_penta_nfregist_analit.last then
            exit;
         else
            i := vt_penta_nfregist_analit.next(i);
         end if;
         --
      end loop; -- fim da primeira dimensão
      --
   end pkb_insere_dados;
   --
BEGIN
   --
   vn_fase := 1;
   --
   --#68345   
    begin
     select count(inf.id)
       into vn_qtd_item
       from item_nota_fiscal inf
          , imp_itemnf       imp
      where notafiscal_id   = en_notafiscal_id
       and imp.itemnf_id    = inf.id ;
   exception
   when others then  
       vn_qtd_item :=0;
   end;
   --
   vn_fase := 1.1;
   --
   if nvl(vn_qtd_item,0) = 0 then
     --#68345 caso não tenha item na nota fiscal, esta procedure naõ deve ser executada
     --
      gv_mensagem_log := 'Não foi recalculado o registro analítico.('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => INFORMACAO
                             , en_referencia_id    => EN_NOTAFISCAL_ID
                             , ev_obj_referencia   => gv_obj_referencia );
      exception
         when others then
            null;
      end;
   else
     --
     begin
       select a.id
         into vn_NfregistAnalit_id
         from nfregist_analit a
        where a.notafiscal_id = en_notafiscal_id;
     exception
     when others then
         vn_NfregistAnalit_id := NULL;
     end;
     --
     if vn_NfregistAnalit_id IS NOT NULL then
   -- remove os registros antigos
       delete from nfregist_analit_difal
        where nfregistanalit_id = vn_NfregistAnalit_id;
     --
     end if;
     --
     -- remove os registros antigos
   delete from nfregist_analit
    where notafiscal_id = en_notafiscal_id;
   --
   --vt_tetra_nfregist_analit.delete;
   vt_penta_nfregist_analit.delete;
   --
   vn_fase := 2;
   -- Armazena o tipo de integração.
   vn_tipo_integr := nvl(gn_tipo_integr,0);
   --
   vn_fase := 3;
   -- Força integrar as informações do analítico pois elas foram excluídas
   gn_tipo_integr := 1;
   --
   vn_fase := 3.1;
   --
   vn_empresa_id := pk_csf.fkg_busca_empresa_nf ( en_notafiscal_id => en_notafiscal_id );
   --
   vn_fase := 3.2;
   --
   vn_multorg_id := pk_csf.fkg_multorg_id_empresa(en_empresa_id => vn_empresa_id );
   --
   vn_fase := 3.3;
   --
   for rec in c_item
   loop
      --
      exit when c_item%notfound or (c_item%notfound) is null;
      --
      vn_fase := 4;
      --
      -- recupera os valores fiscais (ICMS/ICMS-ST/IPI) de um item de nota fiscal
      pk_csf_api.pkb_vlr_fiscal_item_nf ( en_itemnf_id           => rec.itemnotafiscal_id
                                        , sn_cfop                => vn_cfop
                                        , sn_vl_operacao         => vn_vl_operacao
                                        , sv_cod_st_icms         => vv_cod_st_icms
                                        , sn_vl_base_calc_icms   => vn_vl_base_calc_icms
                                        , sn_aliq_icms           => vn_aliq_icms
                                        , sn_vl_imp_trib_icms    => vn_vl_imp_trib_icms
                                        , sn_vl_base_calc_icmsst => vn_vl_base_calc_icmsst
                                        , sn_vl_imp_trib_icmsst  => vn_vl_imp_trib_icmsst
                                        , sn_vl_bc_isenta_icms   => vn_vl_bc_isenta_icms
                                        , sn_vl_bc_outra_icms    => vn_vl_bc_outra_icms
                                        , sv_cod_st_ipi          => vv_cod_st_ipi
                                        , sn_vl_base_calc_ipi    => vn_vl_base_calc_ipi
                                        , sn_aliq_ipi            => vn_aliq_ipi
                                        , sn_vl_imp_trib_ipi     => vn_vl_imp_trib_ipi
                                        , sn_vl_bc_isenta_ipi    => vn_vl_bc_isenta_ipi
                                        , sn_vl_bc_outra_ipi     => vn_vl_bc_outra_ipi
                                        , sn_ipi_nao_recup       => vn_ipi_nao_recup
                                        , sn_outro_ipi           => vn_outro_ipi
                                        , sn_vl_imp_nao_dest_ipi => vn_vl_imp_nao_dest_ipi
                                        , sn_vl_fcp_icmsst       => vn_vl_fcp_icmsst
                                        , sn_aliq_fcp_icms       => vn_aliq_fcp_icms
                                        , sn_vl_fcp_icms         => vn_vl_fcp_icms
                                        );
      --
      vn_fase := 4.1;
      --
      if length(vv_cod_st_icms) = 3 then
         --
         vn_codst_id := nvl( pk_csf.fkg_Cod_ST_id ( ev_cod_st      => vv_cod_st_icms
                                                  , en_tipoimp_id  => pk_csf.fkg_Tipo_Imposto_id ( en_cd => '10' ) -- Simples Nacional
                                                  )
                           , 0);
         --
      else
         --
         vn_codst_id := nvl( pk_csf.fkg_Cod_ST_id ( ev_cod_st      => vv_cod_st_icms
                                                  , en_tipoimp_id  => pk_csf.fkg_Tipo_Imposto_id ( en_cd => '1' ) -- ICMS
                                                  )
                           , 0);
      end if;
      --
      vn_fase := 4.2;
      --
      begin
         --azoni 28/01/2020
         vb_achou   := vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).exists(REC.ALIQ_FCP);
         --
      exception
         when others then
            vb_achou := false;
      end;
      --
      vn_fase := 4.3;
      --
      if not vb_achou then
         --
         vn_fase := 4.4;
         --
         select nfregistanalit_seq.nextval
           --into vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).id
           into vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(nvl(REC.ALIQ_FCP,0)).id
           from dual;
         --
         vn_fase := 4.5;
         --
         /*vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).notafiscal_id := en_notafiscal_id;
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).codst_id      := vn_codst_id;
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).cfop_id       := rec.cfop_id;
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).aliq_icms     := vn_aliq_icms;
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).dm_orig_merc  := rec.orig;*/
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).notafiscal_id := en_notafiscal_id;
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).codst_id      := vn_codst_id;
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).cfop_id       := rec.cfop_id;
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).aliq_icms     := vn_aliq_icms;
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).dm_orig_merc  := rec.orig;
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).ALIQ_FCP_ICMS := rec.ALIQ_FCP;
         --
         vn_fase := 4.6;
         --
         /*vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_operacao := nvl(vn_vl_operacao,0);
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_bc_icms := nvl(vn_vl_base_calc_icms,0);
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_icms := nvl(vn_vl_imp_trib_icms,0);
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_bc_icms_st := nvl(vn_vl_base_calc_icmsst,0);
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_icms_st := nvl(vn_vl_imp_trib_icmsst,0);*/
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_operacao   := nvl(vn_vl_operacao,0);
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_bc_icms    := nvl(vn_vl_base_calc_icms,0);
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_icms       := nvl(vn_vl_imp_trib_icms,0);
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_bc_icms_st := nvl(vn_vl_base_calc_icmsst,0);
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_icms_st    := nvl(vn_vl_imp_trib_icmsst,0);
         --
         if nvl(rec.perc_reduc,0) > 0 then
            --vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_red_bc_icms := nvl(rec.vl_item_bruto,0) - nvl(vn_vl_base_calc_icms,0);
            vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_red_bc_icms := rec.vl_item_bruto + rec.vl_frete + rec.vl_seguro - rec.vl_desc - nvl(vn_vl_base_calc_icms,0);
         end if;
         --
         /*vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_ipi := nvl(vn_vl_imp_trib_ipi,0);
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_fcp_icms   := nvl(vn_vl_fcp_icms,0);
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_fcp_icmsst := nvl(vn_vl_fcp_icmsst,0);*/
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_ipi := nvl(vn_vl_imp_trib_ipi,0);
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_fcp_icms   := nvl(vn_vl_fcp_icms,0);
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_fcp_icmsst := nvl(vn_vl_fcp_icmsst,0);
         --
      else
         --
         vn_fase := 4.7;
         --
         /*vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_operacao
            := nvl(vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_operacao,0) + nvl(vn_vl_operacao,0);
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_bc_icms
            := nvl(vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_bc_icms,0) + nvl(vn_vl_base_calc_icms,0);
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_icms
            := nvl(vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_icms,0) + nvl(vn_vl_imp_trib_icms,0);
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_bc_icms_st
            := nvl(vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_bc_icms_st,0) + nvl(vn_vl_base_calc_icmsst,0);
         vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_icms_st
            := nvl(vt_tetra_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms).vl_icms_st,0) + nvl(vn_vl_imp_trib_icmsst,0);
         */
         --
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_operacao
            := nvl(vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_operacao,0) + nvl(vn_vl_operacao,0);
         --
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_bc_icms
            := nvl(vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_bc_icms,0) + nvl(vn_vl_base_calc_icms,0);
         --
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_icms
            := nvl(vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_icms,0) + nvl(vn_vl_imp_trib_icms,0);
         --
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_bc_icms_st
            := nvl(vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_bc_icms_st,0) + nvl(vn_vl_base_calc_icmsst,0);
         --
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_icms_st
            := nvl(vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_icms_st,0) + nvl(vn_vl_imp_trib_icmsst,0);
         --
         if nvl(rec.perc_reduc,0) > 0 then
            vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_red_bc_icms
               := nvl(vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_red_bc_icms,0) + ( rec.vl_item_bruto + rec.vl_frete + rec.vl_seguro - rec.vl_desc - nvl(vn_vl_base_calc_icms,0) );
         end if;
         --
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_ipi
            := nvl(vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_ipi,0) + nvl(vn_vl_imp_trib_ipi,0);
         --
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_fcp_icms
            := nvl(vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_fcp_icms,0) + nvl(vn_vl_fcp_icms,0);
         --
         vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_fcp_icmsst
            := nvl(vt_penta_nfregist_analit(rec.orig)(vn_codst_id)(rec.cfop_id)(vn_aliq_icms)(REC.ALIQ_FCP).vl_fcp_icmsst,0) + nvl(vn_vl_fcp_icmsst,0);
         --
      end if;
      --
      vn_fase := 4.8;
      --
   end loop;
   --
   vn_fase := 6;
   --
   -- procedimento de inserir os dados
   pkb_insere_dados;
   --
   --vt_tetra_nfregist_analit.delete;
   vt_penta_nfregist_analit.delete;
   --
   vn_fase := 7;
   -- Retorna o tipo de integração inicial
   gn_tipo_integr := nvl(vn_tipo_integr,0);
   --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_gera_regist_analit_imp fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => EN_NOTAFISCAL_ID
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      exception
         when others then
            null;
      end;
      --
END PKB_GERA_REGIST_ANALIT_IMP;

------------------------------------------------------------
-- Procedimento para gerar o registro C190 de Nota Fiscal --
------------------------------------------------------------
PROCEDURE PKB_GERA_C190 ( EN_EMPRESA_ID   IN EMPRESA.ID%TYPE
                        , ED_DT_INI       IN DATE
                        , ED_DT_FIN       IN DATE ) IS
   --
   vn_fase              number := 0;
   vn_dm_dt_escr_dfepoe empresa.dm_dt_escr_dfepoe%type;
   vt_log_generico_nf   dbms_sql.number_table;
   --
   cursor c_nf( en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
   select nf.id
     from nota_fiscal nf
        , mod_fiscal  mf
    where nf.empresa_id      = en_empresa_id
      and nf.dm_st_proc      = 4
      and nf.dm_arm_nfe_terc = 0
      and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between ed_dt_ini and ed_dt_fin)
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between ed_dt_ini and ed_dt_fin)
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between ed_dt_ini and ed_dt_fin)
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between ed_dt_ini and ed_dt_fin))
      and mf.id              = nf.modfiscal_id
      and mf.cod_mod        in ('01', '04', '55', '1B', '65')
      and not exists (select 1 from nfregist_analit r where r.notafiscal_id = nf.id)
      --and nf.id = 43888608
    order by nf.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   vn_dm_dt_escr_dfepoe := pk_csf.fkg_dmdtescrdfepoe_empresa( en_empresa_id => en_empresa_id );
   --
   vn_fase := 2;
   --
   for rec in c_nf( en_dm_dt_escr_dfepoe => vn_dm_dt_escr_dfepoe )
   loop
      --
      exit when c_nf%notfound or (c_nf%notfound) is null;
      --
      vt_log_generico_nf.delete;
      --
      vn_fase := 3;
      --
      pkb_gera_regist_analit_imp ( est_log_generico_nf => vt_log_generico_nf
                                 , en_notafiscal_id    => rec.id );
      --
   end loop;
   --
EXCEPTION
   when others then
      raise_application_error(-20101, 'Erro na pk_csf_api.pkb_gera_C190 fase ('||vn_fase||'):'||sqlerrm);
END PKB_GERA_C190;

-------------------------------------------------------
-- Procedimento valida informações de Cana-de-Açucar --
-------------------------------------------------------
PROCEDURE PKB_VALIDA_AQ_CANA ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                             , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                    number := 0;
   vn_loggenerico_id          log_generico_nf.id%type;
   vn_qtde_nf_aquis_cana      number;
   vn_qtde_nf_aquis_cana_dia  number;
   vn_qtde_nf_aquis_cana_ded  number;
   vn_qtde_mes                nf_aquis_cana.qtde_total_mes%type;
   vn_qtde_somatoria          nf_aquis_cana_dia.qtde%type;
   vn_qtde_total_mes          nf_aquis_cana.qtde_total_mes%type;
   vn_qtde_total_ant          nf_aquis_cana.qtde_total_ant%type;
   vn_qtde_total_ger          nf_aquis_cana.qtde_total_ger%type;
   vn_vl_forn                 nf_aquis_cana.vl_forn%type;
   vn_vl_total_ded            nf_aquis_cana.vl_total_ded%type;
   vn_vl_liq_forn             nf_aquis_cana.vl_liq_forn%type;
   vn_vl_tot_ded              nf_aquis_cana.vl_total_ded%type;
   vn_vl_ded                  nf_aquis_cana_ded.vl_ded%type;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- valida a quantidade de "Informações do Registro de Aquisição de Cana", que deve ser igual a "1"
      begin
         select count(1)
           into vn_qtde_nf_aquis_cana
           from nf_aquis_cana ac
          where ac.notafiscal_id = en_notafiscal_id;
      exception
         when others then
            vn_qtde_nf_aquis_cana := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde_nf_aquis_cana,0) > 1 then
         --
         vn_fase := 3.1;
         --
         gv_mensagem_log := 'Foi informado mais de um registro de "Informações do Registro de Aquisição de Cana".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 4;
      --
      begin
         select count(1)
           into vn_qtde_nf_aquis_cana_dia
           from nf_aquis_cana     ac
              , nf_aquis_cana_dia d
          where ac.notafiscal_id = en_notafiscal_id
            and d.nfaquiscana_id = ac.id;
      exception
         when others then
            vn_qtde_nf_aquis_cana_dia := 0;
      end;
      --
      vn_fase := 5;
      --
      if nvl(vn_qtde_nf_aquis_cana_dia,0) > 31 then
         --
         vn_fase := 5.1;
         --
         gv_mensagem_log := 'Foi informado mais de 31 registros do "Grupo de Fornecimento diário de cana".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 6;
      --
      begin
         select count(1)
           into vn_qtde_nf_aquis_cana_ded
           from nf_aquis_cana     ac
              , nf_aquis_cana_ded d
          where ac.notafiscal_id = en_notafiscal_id
            and d.nfaquiscana_id = ac.id;
      exception
         when others then
            vn_qtde_nf_aquis_cana_ded := 0;
      end;
      --
      vn_fase := 7;
      --
      if nvl(vn_qtde_nf_aquis_cana_ded,0) > 10 then
         --
         vn_fase := 7.1;
         --
         gv_mensagem_log := 'Foi informado mais de 10 registros do "Grupo de Deduções  Taxas e Contribuições de Aquisição de Cana".';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 8;
      -- se a qtidade de Aquis. de Cana foi 1, então valida os valores
      if nvl(vn_qtde_nf_aquis_cana,0) = 1 then
         --
         vn_fase := 9;
         --
         vn_qtde_mes       := 0;
         vn_qtde_somatoria := 0;
         --
         begin
            select ac.qtde_total_mes
                 , sum(acd.qtde)
              into vn_qtde_mes
                 , vn_qtde_somatoria
              from nf_aquis_cana ac
                 , nf_aquis_cana_dia acd
             where ac.notafiscal_id   = en_notafiscal_id
               and acd.nfaquiscana_id = ac.id
             group by ac.qtde_total_mes;
         exception
            when others then
               vn_qtde_somatoria := 1;
         end;
         --
         vn_fase := 10;
         --
         if vn_qtde_mes <> vn_qtde_somatoria then
            --
            vn_fase := 10.1;
            --
            gv_mensagem_log := 'A somatória da quantidade de cana adquirida diariamente é diferente a declarada mensalmente.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 11;
         --
         vn_vl_tot_ded := 0;
         vn_vl_ded     := 0;
         --
         begin
            select ac.vl_total_ded
                 , sum(acded.vl_ded)
              into vn_vl_tot_ded
                 , vn_vl_ded
              from nf_aquis_cana     ac
                 , nf_aquis_cana_ded acded
             where ac.notafiscal_id     = en_notafiscal_id
               and acded.nfaquiscana_id = ac.id
             group by ac.vl_total_ded;
         exception
            when others then
               vn_vl_ded := 1;
         end;
         --
         vn_fase := 12;
         --
         if vn_vl_tot_ded <> vn_vl_ded then
            --
            vn_fase := 12.1;
            --
            gv_mensagem_log := 'A somatória dos tipos de Deduções de cana é diferente a declarada mensalmente.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 13;
         --
         vn_qtde_total_mes := 0;
         vn_qtde_total_ant := 0;
         vn_qtde_total_ger := 0;
         vn_vl_forn        := 0;
         vn_vl_total_ded   := 0;
         vn_vl_liq_forn    := 0;
         --
         begin
            select ac.qtde_total_mes
                 , ac.qtde_total_ant
                 , ac.qtde_total_ger
                 , ac.vl_forn
                 , ac.vl_total_ded
                 , ac.vl_liq_forn
              into vn_qtde_total_mes
                 , vn_qtde_total_ant
                 , vn_qtde_total_ger
                 , vn_vl_forn
                 , vn_vl_total_ded
                 , vn_vl_liq_forn
              from nf_aquis_cana ac
             where ac.notafiscal_id = en_notafiscal_id;
          exception
             when others then
                vn_qtde_total_mes := 1;
                vn_qtde_total_ant := 1;
                vn_vl_forn        := 1;
                vn_vl_total_ded   := 1;
         end;
         --
         vn_fase := 14;
         --
         if (vn_qtde_total_ant + vn_qtde_total_mes) <> vn_qtde_total_ger then
            --
            vn_fase := 14.1;
            --
            gv_mensagem_log := 'A qtde total de cana declarada é diferente da somatória entre a qtde do mês anterior e a qtde adquirida.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
         vn_fase := 15;
         --
         if (vn_vl_forn - vn_vl_total_ded) <> vn_vl_liq_forn then
            --
            vn_fase := 15.1;
            --
            gv_mensagem_log := 'O valor líquido de cana fornecido é diferente da diferença entre o valor fornecido e a valor deduzido.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_Aq_Cana fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_AQ_CANA;

--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Valida CFOP por destinatário de NFe - Validar CFOP por destinatário de acordo com o parâmetro da empresa: empresa.dm_valida_cfop_por_dest = 0-não, 1-sim -- 
--------------------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_CFOP_POR_DEST ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                   , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                    number := 0;
   vn_loggenerico_id          log_generico_nf.id%type;
   vn_dm_ind_oper             nota_fiscal.dm_ind_oper%type;
   vv_uf_emit                 nota_fiscal_emit.uf%type;
   vv_uf_dest                 nota_fiscal_dest.uf%type;
   vn_dummy                   number := null;
   vn_dm_valida_cfop_por_dest number := 0; -- 0-não, 1-sim
   vb_erro                    boolean := false;
   vn_modfiscal_id            mod_fiscal.id%type;
   vn_modfiscal65_id          mod_fiscal.id%type;
   --#68193   
   vn_modfiscal99_id          mod_fiscal.id%type;
   --
   cursor c_itemnf is
      select i.cfop
           , i.nro_item
           , (decode(substr(i.cfop,1,1), 1, 1
                                        , 2, 2
                                        , 3, 3
                                        , 5, 1
                                        , 6, 2
                                        , 7, 3
                                        , 1)) dm_id_dest
        from item_nota_fiscal i
       where notafiscal_id = en_notafiscal_id;
   --
   FUNCTION FKG_TEM_GRUPO_CFOP ( EN_NOTAFISCAL_ID IN NOTA_FISCAL.ID%TYPE
                               , EN_GRUPO_CFOP    IN NUMBER )
            RETURN NUMBER IS
      --
      vn_ret number := 0;
      --
   BEGIN
      --
      begin
         --
         select distinct 1
           into vn_ret
           from item_nota_fiscal inf
          where inf.notafiscal_id = en_notafiscal_id
            and to_number(substr(inf.cfop, 1, 1)) <> en_grupo_cfop
            and inf.cd_lista_serv is null;
         --
      exception
         when others then
            vn_ret := 0;
      end;
      --
      return vn_ret;
      --
   EXCEPTION
      when others then
         return 0;
   END FKG_TEM_GRUPO_CFOP;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      for rec in c_itemnf loop
         exit when c_itemnf%notfound or (c_itemnf%notfound) is null;
         --
         vb_erro := false;
         --
		 if rec.dm_id_dest <> nvl(gt_row_nota_fiscal.dm_id_dest,0) then
		    gt_row_nota_fiscal.dm_id_dest := rec.dm_id_dest;
		 end if;
		 --
         if to_number(substr(rec.cfop, 1, 1)) in (1,5)
            and nvl(gt_row_nota_fiscal.dm_id_dest,0) <> 1
            then
            --
            vb_erro := true;
            --
         end if;
         --
         if to_number(substr(rec.cfop, 1, 1)) in (2,6)
            and nvl(gt_row_nota_fiscal.dm_id_dest,0) <> 2
            then
            --
            vb_erro := true;
            --
         end if;
         --
         if to_number(substr(rec.cfop, 1, 1)) in (3,7)
            and nvl(gt_row_nota_fiscal.dm_id_dest,0) <> 3
            then
            --
            vb_erro := true;
            --
         end if;
         --
         vn_modfiscal_id := pk_csf.fkg_recup_modfisc_id_nf ( en_notafiscal_id => en_notafiscal_id );
         vn_modfiscal65_id := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => '65' );
         --#68193
         vn_modfiscal99_id := pk_csf.fkg_Mod_Fiscal_id ( ev_cod_mod => '99' );
         --
         if vb_erro = true
            and nvl(vn_modfiscal_id,0) <> nvl(vn_modfiscal65_id,0) then
            --
            gv_mensagem_log := 'Para o item ' || rec.nro_item || ' com o CFOP (' || rec.CFOP || ')'
            || ' está divergente do "Identificador do destinatário" ' || gt_row_nota_fiscal.dm_id_dest || ' - '
            || pk_csf.fkg_dominio('NOTA_FISCAL.DM_ID_DEST', gt_row_nota_fiscal.dm_id_dest );
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end loop;
      --
      vn_dummy := 0;
      --
      vn_fase := 2;
      -- Recupera dados da nota e emitente
      vn_dm_valida_cfop_por_dest := nvl(pk_csf.fkg_dm_valcfoppordest_empresa( gt_row_nota_fiscal.empresa_id ),0);
      --
      vn_fase := 3;
      vn_dm_ind_oper := gt_row_nota_fiscal.dm_ind_oper;
      --
      vn_fase := 4;
      --
      --vv_uf_emit := gt_row_nota_fiscal_emit.uf; -- é possível a nota fiscal não possuir emitente, portanto essa informação fica com o valor de nota anterior - sujeira
      begin
         select nf.uf
           into vv_uf_emit
           from nota_fiscal_emit nf
          where nf.notafiscal_id = en_notafiscal_id;
      exception
         when others then
            vv_uf_emit := null;
      end;
      --
      vn_fase := 5;
      --
      if nvl(vn_dm_valida_cfop_por_dest,0) = 1 then -- 0-não, 1-sim
         --
        -- #68193 nf de servico nao valida.
        if nvl(vn_modfiscal_id,0) = vn_modfiscal99_id then
          null;          
        elsif nvl(vn_modfiscal_id,0) <> nvl(vn_modfiscal65_id,0) then
         --
         vn_fase := 6;
         -- recupera dados do local de entrega da mercadoria
         begin
            select nfl.uf
              into vv_uf_dest
              from nota_fiscal_local nfl
             where nfl.notafiscal_id = en_notafiscal_id
               and nfl.dm_tipo_local = 1; -- entrega
         exception
            when others then
               vv_uf_dest := null;
         end;
         --
         vn_fase := 7;
         -- Se não tem local de entrega, recupera dados do destinatário
         if trim(vv_uf_dest) is null then
            --
            vn_fase := 7.1;
            --vv_uf_dest := gt_row_nota_fiscal_dest.uf; -- é possível a nota fiscal não possuir destinatário, portanto essa informação fica com o valor de nota anterior - sujeira
            begin
               select nf.uf
                 into vv_uf_dest
                 from nota_fiscal_dest nf
                where nf.notafiscal_id = en_notafiscal_id;
            exception
               when others then
                  vv_uf_dest := null;
            end;
            --
         end if;
         --
         vn_fase := 8;
         --
         if vn_dm_ind_oper in (0,1) and
            vv_uf_emit is not null and
            vv_uf_dest is not null then
            --
            vn_fase := 8.1;
            -- Verifica se a nota fiscal foi emitida dentro do estado
            if vv_uf_emit = vv_uf_dest then
               --
               vn_fase := 8.2;
               -- Se for entrada informar grupo 1 senão grupo 5
               vn_dummy := fkg_tem_grupo_cfop ( en_notafiscal_id => en_notafiscal_id
                                              , en_grupo_cfop    => case when vn_dm_ind_oper = 0 then 1 else 5 end );
               --
            elsif vv_uf_emit <> vv_uf_dest and vv_uf_dest <> 'EX' then
               --
               vn_fase := 8.3;
               -- Se for entrada informar grupo 1 senão grupo 5
               vn_dummy := fkg_tem_grupo_cfop ( en_notafiscal_id => en_notafiscal_id
                                              , en_grupo_cfop    => case when vn_dm_ind_oper = 0 then 2 else 6 end );
               --
            elsif vv_uf_emit <> vv_uf_dest and vv_uf_dest = 'EX' then
               --
               vn_fase := 8.4;
               -- Se for entrada informar grupo 3 senão grupo 7
               vn_dummy := fkg_tem_grupo_cfop ( en_notafiscal_id => en_notafiscal_id
                                              , en_grupo_cfop    => case when vn_dm_ind_oper = 0 then 3 else 7 end );
               --
            end if;
            --
            vn_fase := 9;
            --
            if nvl(vn_dummy,0) > 0 then
               --
               vn_fase := 9.1;
               --
               gv_mensagem_log := 'CFOP informado nos itens da nota fiscal está divergente para o destinatário da nota fiscal.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
        end if; 
       --
      end if; -- nvl(vn_dm_valida_cfop_por_dest,0) = 0 -- 0-não, 1-sim
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_cfop_por_dest fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_CFOP_POR_DEST;

---------------------------------------------------------------
-- Procedimento valida CFOP por indicador de Operação        --
-- CFOP do grupo 5, 6 e 7 - validar somente notas de saída   --
-- CFOP do grupo 1, 2 e 3 - validar somente notas de entrada --
---------------------------------------------------------------
PROCEDURE PKB_VALIDA_CFOP_POR_IND_OPER ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                       , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_dm_ind_oper     nota_fiscal.dm_ind_oper%type;
   vn_qtde_cfop_sai   number := 0;
   vn_qtde_cfop_entr  number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      vn_dm_ind_oper := gt_row_nota_fiscal.dm_ind_oper;
      --
      vn_fase := 3;
      --
      begin
         select sum(decode(substr(inf.cfop,1,1), 5, 1, 6, 1, 7, 1, 0))
              , sum(decode(substr(inf.cfop,1,1), 1, 1, 2, 1, 3, 1, 0))
           into vn_qtde_cfop_sai
              , vn_qtde_cfop_entr
           from item_nota_fiscal inf
          where inf.notafiscal_id = en_notafiscal_id;
      exception
         when others then
            vn_qtde_cfop_sai  := 0;
            vn_qtde_cfop_entr := 0;
      end;
      --
      vn_fase := 4;
      --
      if nvl(vn_dm_ind_oper,0) = 0 and -- Entrada
         nvl(vn_qtde_cfop_sai,0) > 0 then
         --
         vn_fase := 4.1;
         --
         gv_mensagem_log := 'Não pode ser informado CFOP do grupo 5, 6 e 7 para Operação de Entrada.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 5;
      --
      if nvl(vn_dm_ind_oper,0) = 1 and -- Saída
         nvl(vn_qtde_cfop_entr,0) > 0 then
         --
         vn_fase := 5.1;
         --
         gv_mensagem_log := 'Não pode ser informado CFOP do grupo 1, 2 e 3 para Operação de Saída.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_cfop_por_ind_oper fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_CFOP_POR_IND_OPER;

------------------------------------------------------------------------------------------------------
-- Procedimento valida obrigatoriedade de Medicamentos por item de Nota Fiscal com o NCM do produto --
------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VALIDA_ITEM_MED ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                              , EN_NOTAFISCAL_ID  IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                 number := 0;
   vn_ncm_id               ncm.id%type := null;
   vn_dm_obrig_med_itemnf  ncm.dm_obrig_med_itemnf%type;
   vn_qtde                 number := 0;
   vn_loggenerico_id       log_generico_nf.id%type := null;
   --
   cursor c_itemnf is
   select inf.*
     from item_nota_fiscal inf
    where inf.notafiscal_id = en_notafiscal_id
    order by inf.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   for rec in c_itemnf
   loop
      exit when c_itemnf%notfound or (c_itemnf%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_ncm_id := pk_csf.fkg_ncm_id ( ev_cod_ncm => rec.cod_ncm );
      --
      vn_fase := 3;
      --
      vn_dm_obrig_med_itemnf := pk_csf.fkg_ncm_id_obrig_med_itemnf ( en_ncm_id => vn_ncm_id );
      --
      vn_fase := 4;
      -- verifica se o NCM obriga da informação de mendicamento na nota fiscal
      if nvl(vn_dm_obrig_med_itemnf,0) = 1 then -- Sim
         --
         vn_fase := 5;
         -- verifica se foi informado a informação de medicamento para o item da nota fiscal
         begin
            select count(1) qtde
              into vn_qtde
              from itemnf_med im
             where im.itemnf_id = rec.id;
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 6;
         --
         if nvl(vn_qtde,0) <= 0 then
            --
            gv_mensagem_log := 'Para o item '||rec.cod_item||'-'||rec.descr_item||' não foi informado as informações de medicamentos.';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_item_med fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_ITEM_MED;

----------------------------------------------
-- Gera informação de orientação de Entrega --
----------------------------------------------
PROCEDURE PKB_GERA_AGEND_TRANSP ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                number := 0;
   vn_dm_gera_orient_entr empresa.dm_gera_orient_entr%type;
   vn_qtde_orient_entr    number := 0;
   vn_qtde_end_entrega    number := 0;
   vn_qtde_obs            number := 0;
   vv_nome                nf_agend_transp.nome%type;
   vv_lograd              nf_agend_transp.lograd%type;
   vv_cidade              nf_agend_transp.cidade%type;
   vv_nro_nf              nf_agend_transp.nro_nf%type;
   vv_nome_transp         nf_agend_transp.nome_transp%type;
   --
BEGIN
   --
   vn_fase := 1;
   -- recupera o parâmetro
   begin
      select em.dm_gera_orient_entr
        into vn_dm_gera_orient_entr
        from empresa em
       where em.id = gt_row_nota_fiscal.empresa_id;
   exception
      when others then
         vn_dm_gera_orient_entr := 0;
   end;
   --
   vn_fase := 2;
   --
   if nvl(vn_dm_gera_orient_entr,0) = 1 then -- Sim, gera a orientação de Entrega
      --
      vn_fase := 3;
      -- verifica se não existe a Orientação de Entrega (agendamento de transporte)
      begin
         select count(1)
           into vn_qtde_orient_entr
           from nf_agend_transp nat
          where nat.notafiscal_id = en_notafiscal_id;
      exception
         when others then
           vn_qtde_orient_entr := 0;
      end;
      --
      vn_fase := 4;
      -- verifica se existe endereço de entrega, e CNPJ/CPF diferente do destinatário
      begin
         select count(1)
           into vn_qtde_end_entrega
           from nota_fiscal_local nfl
	      , nota_fiscal_dest  nfd
          where nfl.notafiscal_id = en_notafiscal_id
            and nfl.dm_tipo_local = 1 -- Entrega
            and nfd.notafiscal_id = nfl.notafiscal_id
	    and (nfd.cnpj <> nfl.cnpj
                 or
                 nfd.cpf <> nfl.cpf)
            and (pk_csf.fkg_empresa_id_pelo_cpf_cnpj(pk_csf.fkg_multorg_id_empresa(gt_row_nota_fiscal.empresa_id), nfl.cnpj) is null
                 and
                 pk_csf.fkg_empresa_id_pelo_cpf_cnpj(pk_csf.fkg_multorg_id_empresa(gt_row_nota_fiscal.empresa_id), nfl.cpf) is null);
      exception
         when others then
            vn_qtde_end_entrega := 0;
      end;
      --
      vn_fase := 5;
      --
      if nvl(vn_qtde_orient_entr,0) = 0 and nvl(vn_qtde_end_entrega,0) > 0 then
         --
         vn_fase := 6;
         --
         if nvl(vn_qtde_end_entrega,0) > 0 then
            --
            vn_fase := 7;
            --
            vv_nome := substr(pk_csf_api.gt_row_nota_fiscal_dest.nome,1,60); 
            --
            vn_fase := 8;
            --
            begin
               select (nfl.lograd||decode(nfl.nro,null,null,', '||nfl.nro)||decode(nfl.compl,null,null,' - '||nfl.compl)||decode(nfl.bairro,null,null,' - '||nfl.bairro))
                    , (nfl.cidade||'/'||nfl.uf) cidade
                 into vv_lograd
                    , vv_cidade
                 from nota_fiscal_local nfl
                where nfl.notafiscal_id = en_notafiscal_id
                  and nfl.dm_tipo_local = 1; -- Entrega
            exception
               when others then
                  vv_lograd := ' ';
                  vv_cidade := ' ';
            end;
            --
         end if;
         --
         vn_fase := 9;
         -- pega dados da nota fiscal
         vv_nro_nf := substr(trim(to_char(pk_csf_api.gt_row_nota_fiscal.nro_nf,'000000000')),1,3) || '.' ||
                      substr(trim(to_char(pk_csf_api.gt_row_nota_fiscal.nro_nf,'000000000')),4,3) || '.' ||
                      substr(trim(to_char(pk_csf_api.gt_row_nota_fiscal.nro_nf,'000000000')),7,3) || '-' ||
                      pk_csf_api.gt_row_nota_fiscal.serie;
         --
         vn_fase := 10;
         -- Pega dados da transportadora
         vv_nome_transp := pk_csf_api.gt_row_nota_fiscal_transp.nome;
         --
         vn_fase := 11;
         --
         insert into nf_agend_transp ( id
                                     , notafiscal_id
                                     , pedido
                                     , nome
                                     , lograd
                                     , cidade
                                     , cep
                                     , nro_nf
                                     , nome_transp
                                     )
                              values ( nfagendtransp_seq.nextval
                                     , en_notafiscal_id
                                     , null
                                     , vv_nome
                                     , vv_lograd
                                     , vv_cidade
                                     , null
                                     , vv_nro_nf
                                     , vv_nome_transp
                                     );
         --
      else
         --
         vn_fase := 12;
         -- verifica se não existe a Observação da Orientação de Entrega
         begin
            select count(1)
              into vn_qtde_obs
              from nf_agend_transp     nat
                 , nf_obs_agend_transp obs
             where nat.notafiscal_id    = en_notafiscal_id
               and obs.nfagendtransp_id = nat.id;
         exception
            when others then
              vn_qtde_obs := 0;
         end;
         --
         vn_fase := 13;
         --
         if nvl(vn_qtde_obs,0) <= 0 and nvl(vn_qtde_end_entrega,0) <= 0 then
            --
            vn_fase := 14;
            --
            begin
               delete from nf_agend_transp_pdf np
                where np.nfagendtransp_id in (select na.id
                                                from nf_agend_transp na
                                               where na.notafiscal_id = en_notafiscal_id);
            exception
               when others then
                  --
                  rollback;
                  --
                  gv_mensagem_log := 'Problemas ao excluir nf_agend_transp_pdf (pkb_gera_agend_transp notafiscal_id = '||en_notafiscal_id||') fase('||vn_fase||'): '||sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico_nf.id%type;
                  begin
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => erro_de_validacao
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                  exception
                     when others then
                        null;
                  end;
                  --
            end;
            --
            vn_fase := 15;
            --
            begin
               delete from nf_obs_agend_transp nt
                where nt.nfagendtransp_id in (select na.id
                                                from nf_agend_transp na
                                               where na.notafiscal_id = en_notafiscal_id);
            exception
               when others then
                  --
                  rollback;
                  --
                  gv_mensagem_log := 'Problemas ao excluir nf_obs_agend_transp (pkb_gera_agend_transp notafiscal_id = '||en_notafiscal_id||') fase('||vn_fase||'): '||sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico_nf.id%type;
                  begin
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => erro_de_validacao
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                  exception
                     when others then
                        null;
                  end;
                  --
            end;
            --
            vn_fase := 16;
            --
            begin
               delete from nf_agend_transp na
                where na.notafiscal_id = en_notafiscal_id;
            exception
               when others then
                  --
                  rollback;
                  --
                  gv_mensagem_log := 'Problemas ao excluir nf_agend_transp (pkb_gera_agend_transp notafiscal_id = '||en_notafiscal_id||') fase('||vn_fase||'): '||sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico_nf.id%type;
                  begin
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_cabec_log
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => erro_de_validacao
                                         , en_referencia_id    => gn_referencia_id
                                         , ev_obj_referencia   => gv_obj_referencia );
                     -- Armazena o "loggenerico_id" na memória
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf );
                  exception
                     when others then
                        null;
                  end;
                  --
            end;
            --
         end if;
         --
      end if;
      --
      vn_fase := 17;
      --
      commit;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_gera_agend_transp fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_GERA_AGEND_TRANSP;

----------------------------------------------------------------------------------
-- Procedimento de Cálculo de ICMS-Normal por Parâmetro de Origem da Mercadoria --
----------------------------------------------------------------------------------
PROCEDURE PKB_CALC_ICMS_ORIG_MERC ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                  , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                       number := 0;
   vn_loggenerico_id             log_generico_nf.id%type;
   vn_empresa_id                 empresa.id%type;
   vn_dm_nf_calc_icms            empresa.dm_nf_calc_icms%type;
   vv_sigla_estado_empr          estado.sigla_estado%type;
   vn_estado_id                  estado.id%type;
   vn_vl_base_calc_icms          nota_fiscal_total.vl_base_calc_icms%type := 0;
   vn_vl_imp_trib_icms           nota_fiscal_total.vl_imp_trib_icms%type := 0;
   vt_param_calc_icms_orig_merc  param_calc_icms_orig_merc%rowtype;
   vt_imp_itemnf                 imp_itemnf%rowtype;
   --
   cursor c_itemnf is
   select inf.id itemnf_id
        , inf.item_id
        , inf.cod_item
        , inf.descr_item
        , inf.orig
        , inf.cod_ncm
        , inf.cfop_id
        , inf.cfop
        , inf.qtde_comerc
        , inf.vl_item_bruto
        , inf.vl_frete
        , inf.vl_seguro
        , inf.vl_outro
        , inf.vl_desc
        , imp.vl_base_calc
        , imp.aliq_apli
        , imp.id impitemnf_id
        , imp.vl_imp_trib
        , imp.perc_reduc
        , imp.codst_id
     from item_nota_fiscal   inf
        , imp_itemnf         imp
        , tipo_imposto       ti
        , cod_st             cst
    where inf.notafiscal_id  = en_notafiscal_id
      and imp.itemnf_id      = inf.id
      and nvl(imp.aliq_apli,0) > 4
      and ti.id              = imp.tipoimp_id
      and ti.cd              = 1 -- ICMS
      and cst.id             = imp.codst_id
      and cst.cod_st in ('00', '10', '20', '70', '90')
    order by inf.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0
      and gt_row_nota_fiscal.dm_ind_emit = 0 -- Emissão Própria
      and gt_row_nota_fiscal.dm_arm_nfe_terc = 0
      then
      --
      vn_fase := 2;
      vn_empresa_id := pk_csf.fkg_empresa_notafiscal ( en_notafiscal_id => en_notafiscal_id );
      --
      vn_fase := 3;
      vn_dm_nf_calc_icms := pk_csf.fkg_dm_nf_calc_icms_empresa ( en_empresa_id => vn_empresa_id );
      --
      vn_fase := 4;
      --
      if nvl(vn_dm_nf_calc_icms,0) = 1 then
         --
         vn_fase := 4.1;
         vv_sigla_estado_empr := pk_csf.fkg_sigla_estado_empresa ( en_empresa_id => vn_empresa_id );
         --
         vn_fase := 4.2;
         --
         for rec in c_itemnf
         loop
            --
            exit when c_itemnf%notfound or (c_itemnf%notfound) is null;
            --
            if gt_row_nota_fiscal.dm_tp_amb = 1 -- Produção
               and (trim(gt_row_nota_fiscal_dest.ie) is null or gt_row_nota_fiscal_dest.ie like 'ISENT%')
               then
               --
               return;
               --
            end if;
            --
            vn_fase := 5;
            vn_estado_id := pk_csf.fkg_estado_id ( ev_sigla_estado => gt_row_nota_fiscal_dest.uf );
            --
            vn_fase := 5.1;
            vt_param_calc_icms_orig_merc := null;
            -- recupera o parâmetro de cálculo de ICMS do item
            begin
               --
               if gt_row_nota_fiscal_dest.uf <> vv_sigla_estado_empr and gt_row_nota_fiscal_dest.uf <> 'EX' then
                  --
                  vn_fase := 5.2;
                  --
                  select pc.*
                    into vt_param_calc_icms_orig_merc
                    from param_calc_icms_orig_merc pc
                   where pc.empresa_id       = gt_row_nota_fiscal.empresa_id
                     and pc.dm_orig_merc     = rec.orig
                     and pc.dm_destino       = 1 -- 1-Fora do Estado
                     and trunc(gt_row_nota_fiscal.dt_emiss) between trunc(pc.dt_ini) and trunc(nvl(pc.dt_fin, sysdate));
                  --
               else
                  --
                  vn_fase := 5.3;
                  --
                  select pc.*
                    into vt_param_calc_icms_orig_merc
                    from param_calc_icms_orig_merc pc
                   where pc.empresa_id       = gt_row_nota_fiscal.empresa_id
                     and pc.dm_orig_merc     = rec.orig
                     and pc.dm_destino       = 2 -- 2-Dentro do Estado
                     and trunc(gt_row_nota_fiscal.dt_emiss) between trunc(pc.dt_ini) and trunc(nvl(pc.dt_fin, sysdate));
                  --
               end if;
               --
            exception
               when too_many_rows then
                  --
                  gv_mensagem_log := 'Exite mais de um parâmetro de ICMS-Normal definido para o item '||rec.cod_item||'-'||rec.descr_item||', no estado de '||
                                     gt_row_nota_fiscal_dest.uf||', CFOP '||rec.cfop||', Série '||gt_row_nota_fiscal.serie||' e no período que contempla a data de '||
                                     to_char(gt_row_nota_fiscal.dt_emiss,'dd/mm/rrrr')||'.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
                  vt_param_calc_icms_orig_merc := null;
                  --
               when others then
                  vt_param_calc_icms_orig_merc := null;
            end;
            --
            vn_fase := 6;
            --
            if nvl(vt_param_calc_icms_orig_merc.id,0) > 0 then
               --
               --| Processo de cálculo de ICMS
               --
               vn_fase := 7;
               -- apaga qualquer registro de ICMS-Normal do Item
               delete from imp_itemnf ii
                where ii.itemnf_id  = rec.itemnf_id
                  and ii.dm_tipo    = 0 -- Imposto
                  and ii.tipoimp_id = (select ti.id from tipo_imposto ti where ti.cd = 1); -- icms
               --
               vn_fase := 7.1;
               --
               vt_imp_itemnf            := null;
               vt_imp_itemnf.itemnf_id  := rec.itemnf_id;
               vt_imp_itemnf.tipoimp_id := pk_csf.fkg_tipo_imposto_id ( en_cd => '1' ); -- Recupera ID do ICMS
               --
               vn_fase := 7.2;
               --
               vt_imp_itemnf.dm_tipo      := 0;
               vt_imp_itemnf.codst_id     := rec.codst_id;
               vt_imp_itemnf.vl_base_calc := rec.vl_base_calc;
               vt_imp_itemnf.aliq_apli    := nvl(vt_param_calc_icms_orig_merc.perc_icms,0);
               vt_imp_itemnf.vl_imp_trib  := rec.vl_imp_trib;
               vt_imp_itemnf.dm_orig_calc := 2; -- Compliance
               --
               vn_fase := 7.3;
               --
               if nvl(vt_param_calc_icms_orig_merc.perc_icms,0) > 0 then
                  --
                  vn_fase := 7.4;
                  --
                  vt_imp_itemnf.vl_imp_trib := round( (nvl(vt_imp_itemnf.vl_base_calc,0) * (nvl(vt_imp_itemnf.aliq_apli,0)/100)), 2);
                  --
               end if;
               --
               vn_fase := 7.5;
               --
               select impitemnf_seq.nextval
                 into vt_imp_itemnf.id
                 from dual;
               --
               vn_fase := 7.6;
               --
               insert into imp_itemnf ( id
                                      , itemnf_id
                                      , tipoimp_id
                                      , dm_tipo
                                      , codst_id
                                      , vl_base_calc
                                      , aliq_apli
                                      , vl_imp_trib
                                      , perc_reduc
                                      , perc_adic
                                      , qtde_base_calc_prod
                                      , vl_aliq_prod
                                      , vl_bc_st_ret
                                      , vl_icmsst_ret
                                      , perc_bc_oper_prop
                                      , estado_id
                                      , vl_bc_st_dest
                                      , vl_icmsst_dest
                                      , dm_orig_calc
                                      )
                               values ( vt_imp_itemnf.id
                                      , vt_imp_itemnf.itemnf_id
                                      , vt_imp_itemnf.tipoimp_id
                                      , vt_imp_itemnf.dm_tipo
                                      , vt_imp_itemnf.codst_id
                                      , vt_imp_itemnf.vl_base_calc
                                      , vt_imp_itemnf.aliq_apli
                                      , vt_imp_itemnf.vl_imp_trib
                                      , vt_imp_itemnf.perc_reduc
                                      , vt_imp_itemnf.perc_adic
                                      , vt_imp_itemnf.qtde_base_calc_prod
                                      , vt_imp_itemnf.vl_aliq_prod
                                      , vt_imp_itemnf.vl_bc_st_ret
                                      , vt_imp_itemnf.vl_icmsst_ret
                                      , vt_imp_itemnf.perc_bc_oper_prop
                                      , vt_imp_itemnf.estado_id
                                      , vt_imp_itemnf.vl_bc_st_dest
                                      , vt_imp_itemnf.vl_icmsst_dest
                                      , vt_imp_itemnf.dm_orig_calc
                                      );
               --
            end if;
            --
         end loop;
         --
         vn_fase := 8;
         -- acerta totais de ICMS da nota fiscal
         -- soma valores do ICMS
         begin
            select sum(imp.vl_base_calc)
                 , sum(imp.vl_imp_trib)
              into vn_vl_base_calc_icms
                 , vn_vl_imp_trib_icms
              from item_nota_fiscal inf
                 , imp_itemnf       imp
                 , tipo_imposto     ti
                 , cod_st           cst
             where inf.notafiscal_id = en_notafiscal_id
               and imp.itemnf_id     = inf.id
               and imp.dm_tipo       = 0 -- imposto
               and ti.id             = imp.tipoimp_id
               and ti.cd             = 1 -- ICMS
               and cst.id            = imp.codst_id
               and cst.cod_st   not in ('40', '41', '50');
         exception
            when others then
               vn_vl_base_calc_icms := 0;
               vn_vl_imp_trib_icms := 0;
         end;
         --
         vn_fase := 9;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_CALC_ICMS_ORIG_MERC(Parametrização: dm_nf_calc_icms)';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nt
            set nt.vl_base_calc_icms = nvl(vn_vl_base_calc_icms,0)
              , nt.vl_imp_trib_icms  = nvl(vn_vl_imp_trib_icms,0)
          where nt.notafiscal_id = en_notafiscal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
         vn_fase := 10;
         --
         commit;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_calc_icms_orig_merc fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --   
END PKB_CALC_ICMS_ORIG_MERC;

--------------------------------------------
-- Procedimento de Cálculo de ICMS-Normal --
--------------------------------------------
PROCEDURE PKB_CALC_ICMS_NORMAL ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                               , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase               number := 0;
   i                     pls_integer;
   vn_loggenerico_id     log_generico_nf.id%type;
   vt_obs_lancto_fiscal  dbms_sql.number_table;
   vn_empresa_id         empresa.id%type;
   vn_dm_nf_calc_icms    empresa.dm_nf_calc_icms%type;
   vn_estado_id          estado.id%type;
   vn_vl_base_calc_icms  nota_fiscal_total.vl_base_calc_icms%type := 0;
   vn_vl_imp_trib_icms   nota_fiscal_total.vl_imp_trib_icms%type := 0;
   vt_item_param_icms    item_param_icms%rowtype;
   vt_imp_itemnf         imp_itemnf%rowtype;
   vn_qtde_existe        number;
   vn_qtde_restr         number;
   vv_cpf_cnpj           varchar2(14);
   vn_ncm_id             ncm.id%type;
   --
   cursor c_restr ( en_itemparamicms_id in item_param_icms.id%type ) is
   select *
     from item_param_icms_restr
    where itemparamicms_id = en_itemparamicms_id
    order by 1;
   --
   cursor c_itemnf is
   select inf.id itemnf_id
        , inf.item_id
        , inf.cod_item
        , inf.descr_item
        , inf.cod_ncm
        , inf.cfop_id
        , inf.cfop
        , inf.qtde_comerc
        , inf.vl_item_bruto
        , inf.vl_frete
        , inf.vl_seguro
        , inf.vl_outro
        , inf.vl_desc
        , imp.vl_base_calc
        , imp.aliq_apli
        , imp.id impitemnf_id
        , imp.vl_imp_trib
        , imp.perc_reduc
     from item_nota_fiscal   inf
        , imp_itemnf         imp
        , tipo_imposto       ti
    where inf.notafiscal_id  = en_notafiscal_id
      and imp.itemnf_id      = inf.id
      and ti.id              = imp.tipoimp_id
      and ti.cd              = 1 -- ICMS
    order by inf.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0
      and gt_row_nota_fiscal.dm_ind_emit     = 0 -- Emissão Própria
      and gt_row_nota_fiscal.dm_arm_nfe_terc = 0
      then
      --
      vn_fase := 2;
      vn_empresa_id := pk_csf.fkg_empresa_notafiscal ( en_notafiscal_id => en_notafiscal_id );
      --
      vn_fase := 3;
      vn_dm_nf_calc_icms := pk_csf.fkg_dm_nf_calc_icms_empresa ( en_empresa_id => vn_empresa_id );
      --
      vn_fase := 4;
      --
      if nvl(vn_dm_nf_calc_icms,0) = 1 then
         --
         vn_fase := 5;
         --
         vt_obs_lancto_fiscal.delete;
         --
         vn_fase := 6;
         --
         for rec in c_itemnf
         loop
            --
            exit when c_itemnf%notfound or (c_itemnf%notfound) is null;
            --
            vn_fase := 7;
            --
            if gt_row_nota_fiscal.dm_tp_amb = 1 -- Produção
               and (trim(gt_row_nota_fiscal_dest.ie) is null and gt_row_nota_fiscal_dest.ie like 'ISENT%')
               then
               --
               return;
               --
            end if;
            --
            vn_estado_id := pk_csf.fkg_Estado_id ( ev_sigla_estado => gt_row_nota_fiscal_dest.uf );
            --
            vn_fase := 7.1;
            vt_item_param_icms := null;
            -- recupera o parâmetro de cálculo de ICMS do item
            begin
               select ip.*
                 into vt_item_param_icms
                 from item_param_icms ip
                where ip.empresa_id  = gt_row_nota_fiscal.empresa_id
                  and ip.estado_id   = vn_estado_id
                  and ip.cfop_id     = rec.cfop_id
                  and ip.serie       = gt_row_nota_fiscal.serie
                  and ip.item_id     = rec.item_id
                  and trunc(gt_row_nota_fiscal.dt_emiss) between trunc(ip.dt_ini) and nvl(trunc(ip.dt_fin), trunc(gt_row_nota_fiscal.dt_emiss) );
            exception
               when too_many_rows then
                  --
                  gv_mensagem_log := 'Exite mais de um parâmetro de ICMS-Normal definido para o item '||rec.cod_item||'-'||rec.descr_item||', no estado de '||
                                     gt_row_nota_fiscal_dest.uf||', CFOP '||rec.cfop||', Série '||gt_row_nota_fiscal.serie||' e no período que contempla a data de '||
                                     to_char(gt_row_nota_fiscal.dt_emiss,'dd/mm/rrrr')||'.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
                  vt_item_param_icms := null;
                  --
               when others then
                  vt_item_param_icms := null;
            end;
            --
            vn_fase := 7.2;
            -- Se não achou o parâmetro pelo item, verifica se existe para o NCM
            if nvl(vt_item_param_icms.id,0) <= 0 then
               --
               vn_fase := 7.3;
               vn_ncm_id := pk_csf.fkg_Ncm_id ( ev_cod_ncm => rec.cod_ncm );
               --
               vn_fase := 7.4;
               --
               if nvl(vn_ncm_id,0) > 0 then
                  --
                  vn_fase := 7.5;
                  vt_item_param_icms := null;
                  -- recupera o parâmetro de cálculo de ICMS do NCM
                  begin
                     select ip.*
                       into vt_item_param_icms
                       from item_param_icms ip
                      where ip.empresa_id  = gt_row_nota_fiscal.empresa_id
                        and ip.estado_id   = vn_estado_id
                        and ip.cfop_id     = rec.cfop_id
                        and ip.serie       = gt_row_nota_fiscal.serie
                        and ip.ncm_id      = vn_ncm_id
                        and trunc(gt_row_nota_fiscal.dt_emiss) between trunc(ip.dt_ini) and nvl(trunc(ip.dt_fin), trunc(gt_row_nota_fiscal.dt_emiss) );
                  exception
                     when too_many_rows then
                        --
                        gv_mensagem_log := 'Exite mais de um parâmetro de ICMS-Normal definido para o NCM '||rec.cod_ncm||', no estado de '||
                                           gt_row_nota_fiscal_dest.uf||', CFOP '||rec.cfop||', Série '||gt_row_nota_fiscal.serie||' e no período que contempla a data de '||
                                           to_char(gt_row_nota_fiscal.dt_emiss,'dd/mm/rrrr')||'.';
                        --
                        vn_loggenerico_id := null;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => gv_cabec_log
                                            , ev_resumo           => gv_mensagem_log
                                            , en_tipo_log         => erro_de_validacao
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia );
                        -- Armazena o "loggenerico_id" na memória
                        pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                               , est_log_generico_nf => est_log_generico_nf );
                        --
                        vt_item_param_icms := null;
                        --
                     when others then
                        vt_item_param_icms := null;
                  end;
                  --
               end if;
               --
            end if;
            --
            vn_fase := 7.6;
            --
            --
            if gt_row_nota_fiscal_dest.cpf is not null
               and nvl(vt_item_param_icms.DM_CALC_FISICA,0) = 0
               then -- Se for pessoa física não calcula redução Base ICMS
               --
               return;
               --
            end if;
            --
            vn_fase := 8;
            --| verifica se existe restrição de participante para o cálculo
            begin
               select count(1)
                 into vn_qtde_restr
                 from item_param_icms_restr
                where itemparamicms_id = vt_item_param_icms.id;
            exception
               when others then
                  vn_qtde_restr := 0;
            end;
            --
            vn_fase := 9;
            --
            if nvl(vn_qtde_restr,0) > 0 then
               --
               --| Se existe retrição, então verificar se cálculo a redução para o destinatário
               vn_fase := 10;
               --
               vn_qtde_existe := 0;
               --
               for rec2 in c_restr(vt_item_param_icms.id)
               loop
                  --
                  exit when c_restr%notfound or (c_restr%notfound) is null;
                  --
                  vn_fase := 11;
                  vv_cpf_cnpj := pk_csf.fkg_cnpjcpf_pessoa_id ( en_pessoa_id => rec2.pessoa_id );
                  --
                  vn_fase := 11.1;
                  --
                  if vv_cpf_cnpj = gt_row_nota_fiscal_dest.cnpj or vv_cpf_cnpj = gt_row_nota_fiscal_dest.cpf then
                     --
                     vn_fase := 11.2;
                     vn_qtde_existe := nvl(vn_qtde_existe,0) + 1;
                     --
                  end if;
                  --
               end loop;
               --
            else
               -- atribui 1 para calcular para todos se o parâmetro de restrição não existe
               vn_fase := 12;
               vn_qtde_existe := 1;
               --
            end if;
            --
            vn_fase := 13;
            --
            if nvl(vt_item_param_icms.id,0) > 0 and
               nvl(rec.vl_imp_trib,0) > 0 and -- Sempre calcula a redução se tem imposto tributado
               nvl(rec.perc_reduc,0) <= 0 and -- So calcula para quem não tem redução
               nvl(vn_qtde_existe,0) > 0 then
               --
               --| Processo de cálculo de ICMS
               --
               vn_fase := 14;
               -- apaga qualquer registro de ICMS-Normal do Item
               delete from imp_itemnf ii
                where ii.itemnf_id  = rec.itemnf_id
                  and ii.dm_tipo    = 0 -- Imposto
                  and ii.tipoimp_id = (select ti.id from tipo_imposto ti where ti.cd = 1);
               --
               vn_fase := 14.1;
               --
               vt_imp_itemnf            := null;
               vt_imp_itemnf.itemnf_id  := rec.itemnf_id;
               vt_imp_itemnf.tipoimp_id := pk_csf.fkg_tipo_imposto_id ( en_cd => '1' ); -- Recupera ID do ICMS
               --
               vn_fase := 14.2;
               --
               vt_imp_itemnf.dm_tipo      := 0;
               vt_imp_itemnf.codst_id     := vt_item_param_icms.codst_id;
               vt_imp_itemnf.vl_base_calc := rec.vl_base_calc;
               vt_imp_itemnf.aliq_apli    := rec.aliq_apli;
               vt_imp_itemnf.perc_reduc   := vt_item_param_icms.perc_reduc_bc;
               vt_imp_itemnf.vl_imp_trib  := rec.vl_imp_trib;
               vt_imp_itemnf.dm_orig_calc := 2; -- Compliance
               --
               vn_fase := 14.3;
               --
               if nvl(vt_imp_itemnf.perc_reduc,0) > 0 then
                  --
                  vn_fase := 14.4;
                  vt_imp_itemnf.vl_base_calc := nvl(vt_imp_itemnf.vl_base_calc,0) -
                                                round( (nvl(vt_imp_itemnf.vl_base_calc,0) * (nvl(vt_imp_itemnf.perc_reduc,0)/100)), 2);
                  --
                  vn_fase := 14.5;
                  vt_imp_itemnf.vl_imp_trib := round( (nvl(vt_imp_itemnf.vl_base_calc,0) * (nvl(vt_imp_itemnf.aliq_apli,0)/100)), 2);
                  --
               end if;
               --
               vn_fase := 14.6;
               --
               select impitemnf_seq.nextval
                 into vt_imp_itemnf.id
                 from dual;
               --
               vn_fase := 14.7;
               --
               insert into imp_itemnf ( id
                                      , itemnf_id
                                      , tipoimp_id
                                      , dm_tipo
                                      , codst_id
                                      , vl_base_calc
                                      , aliq_apli
                                      , vl_imp_trib
                                      , perc_reduc
                                      , perc_adic
                                      , qtde_base_calc_prod
                                      , vl_aliq_prod
                                      , vl_bc_st_ret
                                      , vl_icmsst_ret
                                      , perc_bc_oper_prop
                                      , estado_id
                                      , vl_bc_st_dest
                                      , vl_icmsst_dest
                                      , dm_orig_calc
                                      )
                               values ( vt_imp_itemnf.id
                                      , vt_imp_itemnf.itemnf_id
                                      , vt_imp_itemnf.tipoimp_id
                                      , vt_imp_itemnf.dm_tipo
                                      , vt_imp_itemnf.codst_id
                                      , vt_imp_itemnf.vl_base_calc
                                      , vt_imp_itemnf.aliq_apli
                                      , vt_imp_itemnf.vl_imp_trib
                                      , vt_imp_itemnf.perc_reduc
                                      , vt_imp_itemnf.perc_adic
                                      , vt_imp_itemnf.qtde_base_calc_prod
                                      , vt_imp_itemnf.vl_aliq_prod
                                      , vt_imp_itemnf.vl_bc_st_ret
                                      , vt_imp_itemnf.vl_icmsst_ret
                                      , vt_imp_itemnf.perc_bc_oper_prop
                                      , vt_imp_itemnf.estado_id
                                      , vt_imp_itemnf.vl_bc_st_dest
                                      , vt_imp_itemnf.vl_icmsst_dest
                                      , vt_imp_itemnf.dm_orig_calc
                                      );
               --
               vn_fase := 14.8;
               -- armazena observação da nota fiscal com protocolo
               if nvl(vt_item_param_icms.obslanctofiscal_id,0) > 0 then
                  --
                  vn_fase := 15;
                  --
                  if not vt_obs_lancto_fiscal.exists(vt_item_param_icms.obslanctofiscal_id) then
                     --
                     vn_fase := 15.1;
                     vt_obs_lancto_fiscal(vt_item_param_icms.obslanctofiscal_id) := vt_item_param_icms.obslanctofiscal_id;
                     --
                  end if;
                  --
               end if;
               --
            end if;
            --
         end loop;
         --
         vn_fase := 16;
         -- monta observação da nota fiscal com o protocolo
         i := vt_obs_lancto_fiscal.first;
         --
         loop
            --
            if nvl(i,0) = 0 then
               exit;
            end if;
            --
            vn_fase := 17;
            --
            pkb_monta_compl_infor_adic ( est_log_generico_nf => est_log_generico_nf
                                       , en_notafiscal_id => en_notafiscal_id
                                       , ev_texto_compl   => pk_csf.fkg_txt_obs_lancto_fiscal( vt_obs_lancto_fiscal(i) ) );
            --
            vn_fase := 17.1;
            --
            if i = vt_obs_lancto_fiscal.last then
               exit;
            else
               i := vt_obs_lancto_fiscal.next(i);
            end if;
            --
         end loop;
         --
         vn_fase := 18;
         -- acerta totais de ICMS da nota fiscal
         -- soma valores do ICMS
         begin
            select sum(imp.vl_base_calc)
                 , sum(imp.vl_imp_trib)
              into vn_vl_base_calc_icms
                 , vn_vl_imp_trib_icms
              from item_nota_fiscal  inf
                 , imp_itemnf        imp
                 , tipo_imposto      ti
                 , cod_st            cst
             where inf.notafiscal_id = en_notafiscal_id
               and inf.dm_mot_des_icms is null
               and imp.itemnf_id     = inf.id
               and ti.id             = imp.tipoimp_id
               and ti.cd             = 1 -- ICMS
               and cst.id            = imp.codst_id
               and cst.cod_st   not in ('40', '41', '50');
         exception
            when others then
               vn_vl_base_calc_icms := 0;
               vn_vl_imp_trib_icms := 0;
         end;
         --
         vn_fase := 19;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_CALC_ICMS_NORMAL';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nt
            set nt.vl_base_calc_icms = nvl(vn_vl_base_calc_icms,0)
              , nt.vl_imp_trib_icms  = nvl(vn_vl_imp_trib_icms,0)
          where nt.notafiscal_id = en_notafiscal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
         vn_fase := 20;
         --
         commit;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_calc_icms_normal fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_CALC_ICMS_NORMAL;

--------------------------------------------
-- Procedimento de Ajuste do total da NFe --
--------------------------------------------
PROCEDURE PKB_AJUSTA_TOTAL_NF ( EN_NOTAFISCAL_ID IN NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                   number := 0;
   vn_loggenerico_id         log_generico_nf.id%type;
   vt_log_generico_nf        dbms_sql.number_table;
   vn_qtde_total             number;
   vn_vl_base_calc_icms      nota_fiscal_total.vl_base_calc_icms%type := 0;
   vn_vl_imp_trib_icms       nota_fiscal_total.vl_imp_trib_icms%type := 0;
   vn_vl_base_calc_st        nota_fiscal_total.vl_base_calc_st%type := 0;
   vn_vl_imp_trib_st         nota_fiscal_total.vl_imp_trib_st%type := 0;
   vn_vl_total_item          nota_fiscal_total.vl_total_item%type := 0;
   vn_vl_frete               nota_fiscal_total.vl_frete%type := 0;
   vn_vl_seguro              nota_fiscal_total.vl_seguro%type := 0;
   vn_vl_desconto            nota_fiscal_total.vl_desconto%type := 0;
   vn_vl_imp_trib_ii         nota_fiscal_total.vl_imp_trib_ii%type := 0;
   vn_qtde_imp_trib_ii       number := 0;
   vn_vl_imp_trib_ipi        nota_fiscal_total.vl_imp_trib_ipi%type := 0;
   vn_vl_imp_trib_pis        nota_fiscal_total.vl_imp_trib_pis%type := 0;
   vn_vl_imp_trib_cofins     nota_fiscal_total.vl_imp_trib_cofins%type := 0;
   vn_vl_outra_despesas      nota_fiscal_total.vl_outra_despesas%type := 0;
   vn_vl_total_nf            nota_fiscal_total.vl_total_nf%type := 0;
   vn_vl_serv_nao_trib       nota_fiscal_total.vl_serv_nao_trib%type := 0;
   vn_vl_base_calc_iss       nota_fiscal_total.vl_base_calc_iss%type := 0;
   vn_vl_imp_trib_iss        nota_fiscal_total.vl_imp_trib_iss%type := 0;
   vn_vl_pis_iss             nota_fiscal_total.vl_pis_iss%type := 0;
   vn_vl_cofins_iss          nota_fiscal_total.vl_cofins_iss%type := 0;
   vn_vl_total_serv          nota_fiscal_total.vl_total_serv%type := 0;
   vn_vl_tot_trib            nota_fiscal_total.vl_tot_trib%type := 0;
   vn_vl_icms_deson          nota_fiscal_total.vl_icms_deson%type := 0;
   vn_vl_icms_deson_tot_nf   nota_fiscal_total.vl_icms_deson%type := 0;   
   vn_vl_deducao             nota_fiscal_total.vl_deducao%type := 0;
   vn_vl_desc_incond         nota_fiscal_total.vl_desc_incond%type := 0;
   vn_vl_desc_cond           nota_fiscal_total.vl_desc_cond%type := 0;
   vn_vl_outras_ret          nota_fiscal_total.vl_outras_ret%type := 0;
   vn_vl_ret_iss             nota_fiscal_total.vl_ret_iss%type := 0;
   vn_vl_ret_pis             nota_fiscal_total.vl_ret_pis%type := 0;
   vn_vl_ret_cofins          nota_fiscal_total.vl_ret_cofins%type := 0;
   vn_vl_ret_csll            nota_fiscal_total.vl_ret_csll%type := 0;
   vn_vl_ret_irrf            nota_fiscal_total.vl_ret_irrf%type := 0;
   vn_vl_base_calc_ret_prev  nota_fiscal_total.vl_base_calc_ret_prev%type := 0;
   vn_vl_ret_prev            nota_fiscal_total.vl_ret_prev%type := 0;
   vn_vl_icms_uf_dest        nota_fiscal_total.vl_icms_uf_dest%type;
   vn_vl_icms_uf_remet       nota_fiscal_total.vl_icms_uf_remet%type;
   vn_vl_comb_pobr_uf_dest   nota_fiscal_total.vl_comb_pobr_uf_dest%type;
   vn_vl_pis_st              nota_fiscal_total.vl_pis_st%type := 0;
   vn_vl_cofins_st           nota_fiscal_total.vl_cofins_st%type := 0;
   --
   vn_vl_fcp                 nota_fiscal_total.vl_fcp%type;
   vn_vl_fcp_st              nota_fiscal_total.vl_fcp_st%type;
   vn_vl_fcp_st_ret          nota_fiscal_total.vl_fcp_st_ret%type;
   vn_vl_ipi_devol           nota_fiscal_total.vl_ipi_devol%type;
   --
   vn_dm_ajusta_total_nf     empresa.dm_ajusta_total_nf%type := 0;
   vn_empresa_id             empresa.id%type;
   --
   vn_dm_sm_vicms_import_vloper   param_efd_icms_ipi.dm_sm_vicms_import_vloper%type;
   vn_dm_sm_vpiscof_import_vloper param_efd_icms_ipi.dm_sm_vpiscof_import_vloper%type;
   vn_dm_sm_vicms_export_vloper   param_efd_icms_ipi.dm_sm_vicms_export_vloper%type;  
   vn_dm_sm_vpiscof_export_vloper param_efd_icms_ipi.dm_sm_vpiscof_export_vloper%type;   
   vn_dm_sm_vii_import_vloper     param_efd_icms_ipi.dm_sm_vii_import_vloper%type;
   vn_dm_subtr_vl_icms_deson      param_efd_icms_ipi.dm_subtr_vl_icms_deson%type;   
   --
   vn_qtde_cfop_3            number;
   vn_qtde_cfop_7            number;
   vn_nf_conversao           r_nf_nf.notafiscal_id2%type;
   --
   vn_ajuste_vl_total_item   number := 0;
   vn_vl_base_calc_icms_serv nota_fiscal_total.vl_base_calc_icms%type := 0;
   -- 
   cursor c_param (en_empresa_id in param_efd_icms_ipi.empresa_id%type) is
      select pe.dm_sm_vicms_import_vloper
           , pe.dm_sm_vpiscof_import_vloper
           , pe.dm_sm_vicms_export_vloper
           , pe.dm_sm_vpiscof_export_vloper
           , pe.dm_sm_vii_import_vloper
           , pe.dm_subtr_vl_icms_deson
        from param_efd_icms_ipi pe
       where pe.empresa_id = en_empresa_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      vn_dm_ajusta_total_nf := pk_csf.fkg_ajustatotalnf_empresa(en_empresa_id => pk_csf.fkg_empresa_notafiscal(en_notafiscal_id => en_notafiscal_id));
      --
      begin
         select rn.notafiscal_id2
           into vn_nf_conversao
           from r_nf_nf rn
          where rn.notafiscal_id2 = en_notafiscal_id;
      exception
         when others then
            vn_nf_conversao := 0;
      end;
      --
      vn_fase := 3;
      --
      vn_empresa_id := pk_csf.fkg_busca_empresa_nf ( en_notafiscal_id => en_notafiscal_id );
      --
      vn_fase := 3.1;
      --
      open c_param (en_empresa_id => vn_empresa_id);
        fetch c_param into vn_dm_sm_vicms_import_vloper
                         , vn_dm_sm_vpiscof_import_vloper
                         , vn_dm_sm_vicms_export_vloper
                         , vn_dm_sm_vpiscof_export_vloper
                         , vn_dm_sm_vii_import_vloper
                         , vn_dm_subtr_vl_icms_deson;
      close c_param;
      --
      vn_fase := 3.2;
      --
      begin
         select count(1)
           into vn_qtde_cfop_3
           from item_nota_fiscal it
          where it.notafiscal_id     = en_notafiscal_id
            and substr(it.cfop,1,1) in (3);
      exception
         when others then
            vn_qtde_cfop_3 := 0;
      end;
      --
      vn_fase := 3.3;
      --
      begin
         select count(1)
           into vn_qtde_cfop_7
           from item_nota_fiscal it
          where it.notafiscal_id     = en_notafiscal_id
            and substr(it.cfop,1,1) in (7);
      exception
         when others then
            vn_qtde_cfop_7 := 0;
      end;
      --	  
      vn_fase := 4;
      --
      if nvl(vn_dm_ajusta_total_nf,0) = 1 or nvl(vn_nf_conversao,0) > 0 -- Ajusta os valores totais da Nota Fiscal
         then
         --
         vn_fase := 5;
         -- verifica se existe a informação do total, caso não existir cria a linha em branco
         begin
            select count(1)
              into vn_qtde_total
              from nota_fiscal_total
             where notafiscal_id = en_notafiscal_id;
         exception
            when others then
               vn_qtde_total := 0;
         end;
         --
         vn_fase := 6;
         --
         if nvl(vn_qtde_total,0) <= 0 then
            --
            vn_fase := 6.1;
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
            pk_csf_api.gv_objeto := 'pk_csf_api.PKB_AJUSTA_TOTAL_NF';
            pk_csf_api.gn_fase   := vn_fase;
            --
            insert into nota_fiscal_total ( ID
                                          , notafiscal_id
                                          )
                                   values ( notafiscaltotal_seq.nextval -- ID
                                          , en_notafiscal_id
                                          );
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
            pk_csf_api.gv_objeto := 'pk_csf_api';
            pk_csf_api.gn_fase   := null;
            --
         end if;
         --
         vn_fase := 7;
         -- soma valores do item da nota fiscal
         begin
            select round(nvl(sum(decode(inf.dm_ind_tot, 1, nvl(inf.vl_item_bruto, 0), 0)), 0), 2)
                 , nvl(sum(nvl(inf.vl_frete, 0)), 0)
                 , nvl(sum(nvl(inf.vl_seguro, 0)), 0)
	         , nvl(sum(nvl(inf.vl_desc, 0)), 0)
	         , nvl(sum(nvl(inf.vl_outro, 0)), 0)
	         , nvl(sum(nvl(inf.vl_tot_trib_item, 0)), 0)
	         , nvl(sum(nvl(inf.vl_ipi_devol, 0)), 0)
	      into vn_vl_total_item
	         , vn_vl_frete
	         , vn_vl_seguro
	         , vn_vl_desconto
	         , vn_vl_outra_despesas
	         , vn_vl_tot_trib
	         , vn_vl_ipi_devol
	      from item_nota_fiscal inf
             where inf.notafiscal_id  = en_notafiscal_id;
         exception
            when others then
               vn_vl_total_item := 0;
               vn_vl_frete := 0;
               vn_vl_seguro := 0;
               vn_vl_desconto := 0;
               vn_vl_outra_despesas := 0;
               vn_vl_tot_trib := 0;
               vn_vl_ipi_devol := 0;
         end;
         --
         vn_fase := 7.1;
         --
         -- Verifica se a nota é modelo '55' de serviço para ajustar o valor total dos itens		 
         begin
            select distinct 1 
              into vn_ajuste_vl_total_item
              from nota_fiscal      nf
                 , mod_fiscal       mf
                 , item_nota_fiscal it
             where nf.id            = en_notafiscal_id
               and mf.id            = nf.modfiscal_id
               and mf.cod_mod       = '55'
               and it.notafiscal_id = nf.id
               and it.dm_ind_tot    = 1  -- itens fazem parte da composição do total da nota fiscal			   
               and it.cd_lista_serv is not null;		 
         exception
            when others then
               vn_ajuste_vl_total_item := 0;			
         end;		 
         --		 
         vn_fase := 8;
         --
         if nvl(gt_row_nota_fiscal_emit.dm_reg_trib, 0) <> 1 then
            -- Soma valores do ICMS
            begin
               select nvl(sum(nvl(imp.vl_base_calc, 0)), 0)
                    , nvl(sum(nvl(imp.vl_imp_trib, 0)), 0)
                    , nvl(sum(nvl(imp.vl_fcp, 0)), 0)				
                 into vn_vl_base_calc_icms
                    , vn_vl_imp_trib_icms
                    , vn_vl_fcp
                 from item_nota_fiscal  inf
                    , imp_itemnf        imp
                    , tipo_imposto      ti
	         , cod_st            cst
                where inf.notafiscal_id  = en_notafiscal_id
	          and imp.itemnf_id      = inf.id
	          and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
	          and ti.id              = imp.tipoimp_id
	          and ti.cd              = 1 -- ICMS
	          and cst.id             = imp.codst_id
	          and cst.cod_st not in ('30', '40', '41', '50', '60');
            exception
               when others then
                  vn_vl_base_calc_icms := 0;
                  vn_vl_imp_trib_icms := 0;
                  vn_vl_fcp := 0;
            end;
            --
         else
            -- Soma valores do ICMS para Simples Nacional
            begin
               select nvl(sum(nvl(imp.vl_base_calc, 0)), 0)
                    , nvl(sum(nvl(imp.vl_imp_trib, 0)), 0)
                    , nvl(sum(nvl(imp.vl_fcp, 0)), 0)
                 into vn_vl_base_calc_icms
                    , vn_vl_imp_trib_icms
                    , vn_vl_fcp
                 from item_nota_fiscal  inf
                    , imp_itemnf        imp
                    , tipo_imposto      ti
                where inf.notafiscal_id  = en_notafiscal_id
	          and imp.itemnf_id      = inf.id
	          and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
	          and ti.id              = imp.tipoimp_id
	          and ti.cd              = 1; -- ICMS
            exception
               when others then
                  vn_vl_base_calc_icms := 0;
                  vn_vl_imp_trib_icms := 0;
                  vn_vl_fcp := 0;
            end;
            --
         end if;
         --
         vn_fase := 9;
         -- soma valores do ICMS-ST
         begin
            select round( nvl( sum( decode( nf.dm_ind_emit, 1, nvl(imp_st.vl_base_calc, 0)
                                                          , decode(cst_icms.cod_st, '60', 0, nvl(imp_st.vl_base_calc, 0)) ) ), 0), 2)
                 , round( nvl( sum( decode( nf.dm_ind_emit, 1, nvl(imp_st.vl_imp_trib, 0)
                                                          , decode(cst_icms.cod_st, '60', 0, nvl(imp_st.vl_imp_trib, 0)) ) ), 0), 2)
                 , round( nvl( sum( decode( nf.dm_ind_emit, 1, nvl(imp_st.vl_fcp, 0)
                                                          , decode(cst_icms.cod_st, '60', 0, nvl(imp_st.vl_fcp, 0)) ) ), 0), 2)
              into vn_vl_base_calc_st
                 , vn_vl_imp_trib_st
                 , vn_vl_fcp_st
              from nota_fiscal       nf
                 , item_nota_fiscal  it
                 , imp_itemnf        imp_st
                 , tipo_imposto      ti
                 , imp_itemnf        imp_icms
                 , cod_st            cst_icms
                 , tipo_imposto      ti_icms
             where nf.id              = en_notafiscal_id
               and it.notafiscal_id   = nf.id
               and imp_st.itemnf_id   = it.id
               and imp_st.dm_tipo     = 0 -- 0-imposto, 1-retenção
               and ti.id              = imp_st.tipoimp_id
               and ti.cd              = '2' --ICMS_ST
               and imp_icms.itemnf_id = it.id
               and imp_icms.dm_tipo   = 0 -- 0-imposto, 1-retenção
               and cst_icms.id        = imp_icms.codst_id
               and ti_icms.id         = imp_icms.tipoimp_id
               and ti_icms.cd        in ( '1' );
         exception
            when others then
               vn_vl_base_calc_st := 0;
               vn_vl_imp_trib_st := 0;
               vn_vl_fcp_st := 0;
         end;
         --
         vn_fase := 9.1;
         --
         begin
            select round(nvl(sum(nvl(imp_st.vl_fcp, 0)), 0), 2)
              into vn_vl_fcp_st_ret
              from nota_fiscal       nf
                 , item_nota_fiscal  it
                 , imp_itemnf        imp_st
                 , tipo_imposto      ti
                 , imp_itemnf        imp_icms
                 , cod_st            cst_icms
                 , tipo_imposto      ti_icms
             where nf.id              = en_notafiscal_id
               and it.notafiscal_id   = nf.id
               and imp_st.itemnf_id   = it.id
               and imp_st.dm_tipo     = 0 -- 0-imposto, 1-retenção
               and ti.id              = imp_st.tipoimp_id
               and ti.cd              = '2' --ICMS_ST
               and imp_icms.itemnf_id = it.id
               and imp_icms.dm_tipo   = 0 -- 0-imposto, 1-retenção
               and cst_icms.id        = imp_icms.codst_id
               and cst_icms.cod_st    = '60'
               and ti_icms.id         = imp_icms.tipoimp_id
               and ti_icms.cd        in ( '1' );
         exception
            when others then
               vn_vl_fcp_st_ret := 0;
         end;
         --
         if nvl(vn_vl_base_calc_st,0) <= 0
            and nvl(vn_vl_imp_trib_st,0) <= 0
            then
            --
            begin
               --
               select round(nvl(sum(nvl(imp_st.vl_base_calc,0)), 0), 2)
                    , round(nvl(sum(nvl(imp_st.vl_imp_trib,0)), 0), 2)
                    , round(nvl(sum(nvl(imp_st.vl_fcp,0)), 0), 2)
                 into vn_vl_base_calc_st
                    , vn_vl_imp_trib_st
                    , vn_vl_fcp_st
                 from item_nota_fiscal  it
                    , imp_itemnf        imp_st
                    , tipo_imposto      ti
                    , imp_itemnf        imp_icms
                    , tipo_imposto      ti_icms
                where it.notafiscal_id  = en_notafiscal_id
                  and imp_st.itemnf_id  = it.id
                  and imp_st.dm_tipo    = 0 -- 0-imposto, 1-retenção
                  and ti.id             = imp_st.tipoimp_id
                  and ti.cd             = '2' --ICMS_ST
                  and it.id             = imp_icms.itemnf_id
                  and imp_icms.dm_tipo  = 0 -- 0-imposto, 1-retenção
                  and nvl(imp_icms.codst_id,0) > 0
                  and ti_icms.id        = imp_icms.tipoimp_id
                  and ti_icms.cd        = '10'; -- Somente Simples Nacional
                  --
            exception
               when others then
                  vn_vl_base_calc_st    := 0;
                  vn_vl_imp_trib_st     := 0;
                  vn_vl_fcp_st := 0;
            end;
            --
         end if;
         --
         vn_fase := 10;
         -- soma valores do II
         begin
            select sum(imp.vl_imp_trib)
              into vn_vl_imp_trib_ii
              from item_nota_fiscal  inf
                 , imp_itemnf        imp
                 , tipo_imposto      ti
             where inf.notafiscal_id  = en_notafiscal_id
	       and imp.itemnf_id      = inf.id
	       and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
	       and ti.id              = imp.tipoimp_id
	       and ti.cd              = 7; -- II
         exception
            when others then
               vn_vl_imp_trib_ii := 0;
         end;
         --
         vn_fase := 11;
         -- qtde imposto de importação vn_qtde_imp_trib_ii
         begin
            select count(1)
              into vn_qtde_imp_trib_ii
              from item_nota_fiscal  inf
                 , imp_itemnf        imp
                 , tipo_imposto      ti
             where inf.notafiscal_id  = en_notafiscal_id
	       and imp.itemnf_id      = inf.id
	       and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
	       and ti.id              = imp.tipoimp_id
	       and ti.cd              = 7; -- II
         exception
            when others then
               vn_qtde_imp_trib_ii := 0;
         end;
         --
         vn_fase := 12;
         -- soma valores de IPI
         begin
            select sum(imp.vl_imp_trib)
              into vn_vl_imp_trib_ipi
              from item_nota_fiscal  inf
                 , imp_itemnf        imp
                 , tipo_imposto      ti
	         , cod_st            cst
             where inf.notafiscal_id  = en_notafiscal_id
	       and imp.itemnf_id      = inf.id
	       and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
	       and ti.id              = imp.tipoimp_id
	       and ti.cd              = 3 -- IPI
	       and cst.id             = imp.codst_id
	       and cst.cod_st not in ('02', '03', '04', '05', '51', '52', '53', '54', '55');
         exception
            when others then
               vn_vl_imp_trib_ipi := 0;
         end;
         --
         vn_fase := 13;
         -- soma valores de PIS
         begin
            select sum(decode(nvl(inf.cd_lista_serv,0), 0, nvl(imp.vl_imp_trib,0), 0)) -- valor de item produto/mercadoria
                 , sum(decode(nvl(inf.cd_lista_serv,0), 0, 0, nvl(imp.vl_imp_trib,0))) -- valor de item serviço
              into vn_vl_imp_trib_pis
                 , vn_vl_pis_iss
              from item_nota_fiscal  inf
                 , imp_itemnf        imp
                 , tipo_imposto      ti
	         , cod_st            cst
             where inf.notafiscal_id  = en_notafiscal_id
	       and imp.itemnf_id      = inf.id
	       and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
	       and ti.id              = imp.tipoimp_id
	       and ti.cd              = 4 -- PIS
	       and cst.id             = imp.codst_id
	       and cst.cod_st not in ('04', '05', '06', '07', '08', '09', '70', '71', '72', '73', '74', '75');
         exception
            when others then
               vn_vl_imp_trib_pis := 0;
               vn_vl_pis_iss      := 0;
         end;
         -- soma valores de PIS Retido
         begin
            select sum(imp.vl_imp_trib)
              into vn_vl_ret_pis
              from item_nota_fiscal inf
                 , imp_itemnf       imp
                 , tipo_imposto     ti
             where inf.notafiscal_id = en_notafiscal_id
	       and imp.itemnf_id     = inf.id
	       and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
	       and ti.id             = imp.tipoimp_id
	       and ti.cd             = 4; -- PIS
         exception
            when others then
               vn_vl_ret_pis := 0;
         end;
         --
         vn_fase := 14;
         -- soma valores de COFINS
         begin
            select sum(decode(nvl(inf.cd_lista_serv,0), 0, nvl(imp.vl_imp_trib,0), 0)) -- valor de item produto/mercadoria
                 , sum(decode(nvl(inf.cd_lista_serv,0), 0, 0, nvl(imp.vl_imp_trib,0))) -- valor de item serviço
              into vn_vl_imp_trib_cofins
                 , vn_vl_cofins_iss
              from item_nota_fiscal  inf
                 , imp_itemnf        imp
                 , tipo_imposto      ti
	         , cod_st            cst
             where inf.notafiscal_id  = en_notafiscal_id
	       and imp.itemnf_id      = inf.id
	       and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
	       and ti.id              = imp.tipoimp_id
	       and ti.cd              = 5 -- COFINS
	       and cst.id             = imp.codst_id
	       and cst.cod_st not in ('04', '05', '06', '07', '08', '09', '70', '71', '72', '73', '74', '75');
         exception
            when others then
               vn_vl_imp_trib_cofins := 0;
               vn_vl_cofins_iss      := 0;
         end;
         -- soma valores de COFINS Retido
         begin
            select sum(imp.vl_imp_trib)
              into vn_vl_ret_cofins
              from item_nota_fiscal inf
                 , imp_itemnf       imp
                 , tipo_imposto     ti
             where inf.notafiscal_id = en_notafiscal_id
	       and imp.itemnf_id     = inf.id
	       and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
	       and ti.id             = imp.tipoimp_id
	       and ti.cd             = 5; -- COFINS
         exception
            when others then
               vn_vl_ret_cofins := 0;
         end;
         --
         vn_fase := 15;
         -- Valor Total dos itens de serviços
         begin
            select round(sum(it.vl_item_bruto), 2)
              into vn_vl_serv_nao_trib			  
              from item_nota_fiscal  it
             where it.notafiscal_id  = en_notafiscal_id
               and it.cd_lista_serv is not null;
         exception
            when others then
               vn_vl_serv_nao_trib := 0;			   
         end;
         --
         vn_fase := 16;
         -- soma valores de ISS
         begin
            select sum(imp.vl_base_calc)
                 , sum(imp.vl_imp_trib)
              into vn_vl_base_calc_iss
                 , vn_vl_imp_trib_iss
              from item_nota_fiscal inf
                 , imp_itemnf       imp
                 , tipo_imposto     ti
             where inf.notafiscal_id = en_notafiscal_id
	       and imp.itemnf_id     = inf.id
	       and imp.dm_tipo       = 0 -- 0-imposto, 1-retenção
	       and ti.id             = imp.tipoimp_id
	       and ti.cd             = 6; -- ISS
         exception
            when others then
               vn_vl_base_calc_iss := 0;
               vn_vl_imp_trib_iss  := 0;
         end;
         --
         vn_fase := 17;
         --	
         -- Ajustando os valores para nota fiscal de serviço modelo '55'		 
         if nvl(vn_ajuste_vl_total_item,0) = 1 then	
            --	
            if nvl(gt_row_nota_fiscal_emit.dm_reg_trib, 0) <> 1 then
               -- Soma valores do ICMS
               begin
                  select nvl(sum(nvl(imp.vl_base_calc, 0)), 0)
                    into vn_vl_base_calc_icms_serv
                    from item_nota_fiscal  inf
                       , imp_itemnf        imp
                       , tipo_imposto      ti
                       , cod_st            cst
                   where inf.notafiscal_id  = en_notafiscal_id
                     and inf.cd_lista_serv is not null
                     and imp.itemnf_id      = inf.id
                     and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
                     and ti.id              = imp.tipoimp_id
                     and ti.cd              = 1 -- ICMS
                     and cst.id             = imp.codst_id
                     and cst.cod_st not in ('30', '40', '41', '50', '60');
               exception
                  when others then
                     vn_vl_base_calc_icms_serv := 0;
               end;
               --
            else
               -- Soma valores do ICMS para Simples Nacional
               begin
                  select nvl(sum(nvl(imp.vl_base_calc, 0)), 0)                  
                    into vn_vl_base_calc_icms_serv
                    from item_nota_fiscal  inf
                       , imp_itemnf        imp
                       , tipo_imposto      ti
                   where inf.notafiscal_id  = en_notafiscal_id
                     and inf.cd_lista_serv is not null				   
                     and imp.itemnf_id      = inf.id
                     and imp.dm_tipo        = 0 -- 0-imposto, 1-retenção
                     and ti.id              = imp.tipoimp_id
                     and ti.cd              = 1; -- ICMS
               exception
                  when others then
                     vn_vl_base_calc_icms_serv := 0;
               end;
               --
            end if;			
            --			
            -- Valor total dos Serviços sob não-incidência ou não tributados pelo ICMS		
            if nvl(vn_vl_serv_nao_trib,0) > 0 then		 
               --	
               vn_vl_total_serv	   := nvl(vn_vl_serv_nao_trib,0);	   
               vn_vl_serv_nao_trib := nvl(vn_vl_serv_nao_trib,0) - nvl(vn_vl_base_calc_icms_serv,0);
               --
               if vn_vl_serv_nao_trib < 0 then
                  --
                  vn_vl_serv_nao_trib := 0;
                  --
               end if;
               --
               if nvl(vn_vl_total_serv,0) <> nvl(vn_vl_serv_nao_trib,0) then
                  --			   
                  vn_vl_total_serv := nvl(vn_vl_total_serv,0) - nvl(vn_vl_serv_nao_trib,0); 
                  --
               end if;				  
               --			   
            end if;			
            --	
            vn_fase := 18; 
            --		 
            if nvl(vn_vl_total_item,0) > 0 then
               --
               vn_vl_total_item := nvl(vn_vl_total_item,0) - nvl(vn_vl_serv_nao_trib,0);
               --
               if nvl(vn_vl_total_item,0) < 0 then
                  --
                  vn_vl_total_item := 0;
                  --
               end if;
               --
            end if;
            --		 
         end if;		 
         --
         vn_fase := 19; 		 
         -- soma valores de ISS Retido
         begin
            select sum(imp.vl_imp_trib)
              into vn_vl_ret_iss
              from item_nota_fiscal inf
                 , imp_itemnf       imp
                 , tipo_imposto     ti
             where inf.notafiscal_id = en_notafiscal_id
               and imp.itemnf_id     = inf.id
               and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
               and ti.id             = imp.tipoimp_id
               and ti.cd             = 6; -- ISS
         exception
            when others then
               vn_vl_ret_iss := 0;
         end;
         --	
         vn_vl_icms_deson         := null;
         vn_vl_icms_deson_tot_nf  := null; 
         --		 
         vn_fase := 20;
         -- Soma da desoneração do ICMS		 
         begin
            --
            select sum(nvl(vl_icms_deson,0))
              into vn_vl_icms_deson
              from imp_itemnf imp
                 , item_nota_fiscal inf
                 , tipo_imposto ti
                 , cod_st cs
             where inf.notafiscal_id = en_notafiscal_id
               and inf.id = imp.itemnf_id
               and imp.dm_tipo = 0 -- 0-imposto
               and imp.tipoimp_id = ti.id
               and ti.cd = 1
               and imp.codst_id = cs.id
               and cs.cod_st in ('20', '30', '40', '41', '50', '70', '90'); -- ICMS
            --
         exception
            when others then
               --
               vn_vl_icms_deson := 0;
               --
         end;
         --
         vn_fase := 20.1;
         --		 
         if vn_dm_subtr_vl_icms_deson = 1 then	
            --		 
            vn_vl_icms_deson_tot_nf := vn_vl_icms_deson;
            --			
         else
            -- 		 
            vn_vl_icms_deson_tot_nf := 0;         			
            --			
         end if;
         --		 
         vn_fase := 21;
         -- Soma o total da nota fiscal
         vn_vl_total_nf := ( nvl(vn_vl_total_item,0) - nvl(vn_vl_desconto,0) - nvl(vn_vl_icms_deson_tot_nf,0) )
                           + nvl(vn_vl_imp_trib_st,0)
                           + nvl(vn_vl_fcp_st,0)
                           + nvl(vn_vl_frete,0)
                           + nvl(vn_vl_seguro,0)
                           + nvl(vn_vl_outra_despesas,0)
                           + nvl(vn_vl_imp_trib_ipi,0)
                           + nvl(vn_vl_ipi_devol,0)
                           + nvl(vn_vl_serv_nao_trib,0);
         --
         vn_fase := 21.1;
         --
         if nvl(vn_qtde_cfop_3,0) > 0 then
            --
            if nvl(vn_dm_sm_vicms_import_vloper,0) = 1 then
               vn_vl_total_nf := nvl(vn_vl_total_nf,0) + nvl(vn_vl_imp_trib_icms,0);
            end if;
            --
            if nvl(vn_dm_sm_vpiscof_import_vloper,0) = 1 then
               vn_vl_total_nf := nvl(vn_vl_total_nf,0) + nvl(vn_vl_imp_trib_pis,0) + nvl(vn_vl_imp_trib_cofins,0);
            end if;
            --
            if nvl(vn_dm_sm_vii_import_vloper,0) = 1 then
               vn_vl_total_nf := nvl(vn_vl_total_nf,0) + nvl(vn_vl_imp_trib_ii,0);
            end if;
            --
         end if;
         --
         vn_fase := 21.2;
         --
         if nvl(vn_qtde_cfop_7,0) > 0 then
            --
            if nvl(vn_dm_sm_vicms_export_vloper,0) = 1 then
               vn_vl_total_nf := nvl(vn_vl_total_nf,0) + nvl(vn_vl_imp_trib_icms,0);
            end if;
            --
            if nvl(vn_dm_sm_vpiscof_export_vloper,0) = 1 then
               vn_vl_total_nf := nvl(vn_vl_total_nf,0) + nvl(vn_vl_imp_trib_pis,0) + nvl(vn_vl_imp_trib_cofins,0);
            end if;
            --
         end if; 
         --		 
         vn_fase := 22;
         --
         begin
            --
            select sum(vl_deducao)
                 , sum(vl_desc_incondicionado)
                 , sum(vl_desc_condicionado)
                 , sum(vl_outra_ret)
              into vn_vl_deducao
                 , vn_vl_desc_incond
                 , vn_vl_desc_cond
                 , vn_vl_outras_ret
              from itemnf_compl_serv ics
                 , item_nota_fiscal inf
             where inf.notafiscal_id = en_notafiscal_id
               and inf.id = ics.itemnf_id;
            --
         exception
            when others then
               --
               vn_vl_deducao     := 0;
               vn_vl_desc_incond := 0;
               vn_vl_desc_cond   := 0;
               vn_vl_outras_ret  := 0;
               --
         end;
         --
         vn_fase := 23;
         -- Soma valor do CSLL Retido
         begin
            select sum(imp.vl_imp_trib)
              into vn_vl_ret_csll
              from item_nota_fiscal inf
                 , imp_itemnf       imp
                 , tipo_imposto     ti
             where inf.notafiscal_id = en_notafiscal_id
	    and imp.itemnf_id     = inf.id
	    and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
	    and ti.id             = imp.tipoimp_id
	    and ti.cd             = 11; -- CSLL
         exception
            when others then
               vn_vl_ret_csll := 0;
         end;
         --
         vn_fase := 24;
         -- Soma valor do IRRF Retido
         begin
            select sum(imp.vl_imp_trib)
              into vn_vl_ret_irrf
              from item_nota_fiscal inf
                 , imp_itemnf       imp
                 , tipo_imposto     ti
             where inf.notafiscal_id = en_notafiscal_id
	    and imp.itemnf_id     = inf.id
	    and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
	    and ti.id             = imp.tipoimp_id
	    and ti.cd             = 12; -- IRRF
         exception
            when others then
               vn_vl_ret_irrf := 0;
         end;
         --
         vn_fase := 25;
         -- Soma valor do INSS Retido
         begin
            select sum(imp.vl_base_calc)
                 , sum(imp.vl_imp_trib)
              into vn_vl_base_calc_ret_prev
                 , vn_vl_ret_prev
              from item_nota_fiscal inf
                 , imp_itemnf       imp
                 , tipo_imposto     ti
             where inf.notafiscal_id = en_notafiscal_id
	    and imp.itemnf_id     = inf.id
	    and imp.dm_tipo       = 1 -- 0-imposto, 1-retenção
	    and ti.id             = imp.tipoimp_id
	    and ti.cd             = 13; -- INSS
         exception
            when others then
               vn_vl_base_calc_ret_prev := 0;
               vn_vl_ret_prev := 0;
         end;
         --
         vn_fase := 26;
         -- Soma valores de ICMS em Operações Interestaduais de Vendas a Consumidor Final
         begin
            select sum(id.vl_icms_uf_dest)
                 , sum(id.vl_icms_uf_remet)
                 , sum(id.vl_comb_pobr_uf_dest)
              into vn_vl_icms_uf_dest
                 , vn_vl_icms_uf_remet
                 , vn_vl_comb_pobr_uf_dest
              from item_nota_fiscal      inf
                 , imp_itemnf            imp
                 , tipo_imposto          ti
                 , imp_itemnf_icms_dest  id
             where inf.notafiscal_id = en_notafiscal_id
	    and imp.itemnf_id     = inf.id
	    and imp.dm_tipo       = 0 -- 0-imposto, 1-retenção
	    and ti.id             = imp.tipoimp_id
	    and ti.cd             = 1 -- ICMS
	    and id.impitemnf_id   = imp.id;
         exception
            when others then
               vn_vl_icms_uf_dest        := 0;
               vn_vl_icms_uf_remet       := 0;
               vn_vl_comb_pobr_uf_dest   := 0;
         end;
         --
         vn_fase := 27;
         --
         -- Soma valores de PIS ST
         begin
            select sum(nvl(imp.vl_imp_trib,0))
              into vn_vl_pis_st
              from item_nota_fiscal it
                 , imp_itemnf       imp
                 , tipo_imposto     ti
                 , cod_st           cs
             where it.notafiscal_id = en_notafiscal_id
               and imp.itemnf_id    = it.id
               and imp.dm_tipo      = 0 -- 0-imposto, 1-retenção
               and ti.id            = imp.tipoimp_id
               and ti.cd            = '4' -- PIS
               and cs.id            = imp.codst_id
               and cs.cod_st        in ('5','75');
         exception
            when others then
               vn_vl_pis_st := 0;
         end;
         --
         vn_fase := 28;
         --
         -- Soma valores de COFINS ST
         begin
            select sum(nvl(imp.vl_imp_trib,0))
              into vn_vl_cofins_st
              from item_nota_fiscal it
                 , imp_itemnf       imp
                 , tipo_imposto     ti
                 , cod_st           cs
             where it.notafiscal_id = en_notafiscal_id
               and imp.itemnf_id    = it.id
               and imp.dm_tipo      = 0 -- 0-imposto, 1-retenção
               and ti.id            = imp.tipoimp_id
               and ti.cd            = '5' -- COFINS
               and cs.id            = imp.codst_id
               and cs.cod_st        in ('5','75');
         exception
            when others then
               vn_vl_cofins_st := 0;
         end;
         --
         if nvl(vn_vl_icms_uf_dest,0) <= 0 then
            vn_vl_icms_uf_dest := null;
         end if;
         --
         if nvl(vn_vl_icms_uf_remet,0) <= 0 then
            vn_vl_icms_uf_remet := null;
         end if;
         --
         if nvl(vn_vl_comb_pobr_uf_dest,0) <= 0 then
            vn_vl_comb_pobr_uf_dest := null;
         end if;
         --		 
         vn_fase := 99;
         -- atualiza dados
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_AJUSTA_TOTAL_NF';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nt
            set nt.vl_base_calc_icms     = nvl(vn_vl_base_calc_icms,0)
              , nt.vl_imp_trib_icms      = nvl(vn_vl_imp_trib_icms,0)
              , nt.vl_base_calc_st       = nvl(vn_vl_base_calc_st,0)
              , nt.vl_imp_trib_st        = nvl(vn_vl_imp_trib_st,0)
              , nt.vl_total_item         = nvl(vn_vl_total_item,0)
              , nt.vl_frete              = nvl(vn_vl_frete,0)
              , nt.vl_seguro             = nvl(vn_vl_seguro,0)
              , nt.vl_desconto           = nvl(vn_vl_desconto,0)
              , nt.vl_imp_trib_ii        = nvl(vn_vl_imp_trib_ii,0)
              , nt.vl_imp_trib_ipi       = nvl(vn_vl_imp_trib_ipi,0)
              , nt.vl_imp_trib_pis       = nvl(vn_vl_imp_trib_pis,0)
              , nt.vl_imp_trib_cofins    = nvl(vn_vl_imp_trib_cofins,0)
              , nt.vl_outra_despesas     = nvl(vn_vl_outra_despesas,0)
              , nt.vl_total_nf           = nvl(vn_vl_total_nf,0)
              , nt.vl_serv_nao_trib      = nvl(vn_vl_serv_nao_trib,0)
              , nt.vl_base_calc_iss      = nvl(vn_vl_base_calc_iss,0)
              , nt.vl_imp_trib_iss       = nvl(vn_vl_imp_trib_iss,0)
              , nt.vl_pis_iss            = nvl(vn_vl_pis_iss,0)
              , nt.vl_cofins_iss         = nvl(vn_vl_cofins_iss,0)
              , nt.vl_ret_pis            = nvl(vn_vl_ret_pis,0)
              , nt.vl_ret_cofins         = nvl(vn_vl_ret_cofins,0)
              , nt.vl_ret_csll           = nvl(vn_vl_ret_csll,0)
              , nt.vl_ret_irrf           = nvl(vn_vl_ret_irrf,0)
              , nt.vl_base_calc_ret_prev = nvl(vn_vl_base_calc_ret_prev,0)
              , nt.vl_ret_prev           = nvl(vn_vl_ret_prev,0)
              , nt.vl_total_serv         = nvl(vn_vl_total_serv,0)
              , nt.vl_ret_iss            = nvl(vn_vl_ret_iss,0)
              , nt.vl_tot_trib           = nvl(vn_vl_tot_trib,0)
              , nt.vl_icms_deson         = nvl(vn_vl_icms_deson,0)
              , nt.vl_deducao            = nvl(vn_vl_deducao, 0)
              , nt.vl_desc_incond        = nvl(vn_vl_desc_incond, 0)
              , nt.vl_desc_cond          = nvl(vn_vl_desc_cond, 0)
              , nt.vl_outras_ret         = nvl(vn_vl_outras_ret, 0)
              , nt.vl_icms_uf_dest       = vn_vl_icms_uf_dest
              , nt.vl_icms_uf_remet      = vn_vl_icms_uf_remet
              , nt.vl_comb_pobr_uf_dest  = vn_vl_comb_pobr_uf_dest
              , nt.vl_ipi_devol          = vn_vl_ipi_devol
              , nt.vl_fcp                = vn_vl_fcp
              , nt.vl_fcp_st             = vn_vl_fcp_st
              , nt.vl_fcp_st_ret         = vn_vl_fcp_st_ret
              , nt.vl_pis_st             = vn_vl_pis_st
              , nt.vl_cofins_st          = vn_vl_cofins_st
          where nt.notafiscal_id = en_notafiscal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
         vn_fase := 99.1;
         --
         vt_log_generico_nf.delete;
         --
         pkb_gera_regist_analit_imp ( est_log_generico_nf => vt_log_generico_nf
                                    , en_notafiscal_id => en_notafiscal_id );
         --
      end if; -- parâmetro indica para recalcular os totais e os itens não possuem cfop de importação
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_ajusta_total_nf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => EN_NOTAFISCAL_ID
                             , ev_obj_referencia   => 'NOTA_FISCAL' );
      exception
         when others then
            null;
      end;
      --
END PKB_AJUSTA_TOTAL_NF;

-------------------------------------------------------------------------
-- Procedimento de Ajuste do Total da NF seguindo parâmetro de empresa --
-------------------------------------------------------------------------
PROCEDURE PKB_AJUSTA_TOTAL_NF_EMPRESA ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                      , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                number := 0;
   vn_loggenerico_id      log_generico_nf.id%type;
   vn_empresa_id          empresa.id%type;
   vn_dm_ajusta_total_nf  empresa.dm_ajusta_total_nf%type := 0;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      vn_empresa_id := pk_csf.fkg_empresa_notafiscal ( en_notafiscal_id => en_notafiscal_id );
      --
      vn_fase := 3;
      vn_dm_ajusta_total_nf := pk_csf.fkg_ajustatotalnf_empresa ( en_empresa_id => vn_empresa_id );
      --
      vn_fase := 5;
      --
      if nvl(vn_dm_ajusta_total_nf,0) = 1
         then -- Ajusta os valores totais da Nota Fiscal
         --
	 vn_fase := 6;
	 -- chama processo de ajuste dos dados
	 pkb_ajusta_total_nf ( en_notafiscal_id => en_notafiscal_id );
	 --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_ajusta_total_nf_empresa fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_AJUSTA_TOTAL_NF_EMPRESA;

----------------------------------------
-- Procedimento de Cálculo de ICMS-ST --
----------------------------------------
PROCEDURE PKB_CALC_ICMS_ST ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                           , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase               number := 0;
   vn_loggenerico_id     log_generico_nf.id%type;
   vn_empresa_id         empresa.id%type;
   vn_dm_nf_calc_icmsst  empresa.dm_nf_calc_icmsst%type;
   vn_estado_id          estado.id%type;
   vn_indice             item_param_icmsst.indice%type;
   vn_vl_imp_import      imp_itemnf.vl_imp_trib%type;
   vn_vl_ipi             imp_itemnf.vl_imp_trib%type;
   vn_vl_operacao        imp_itemnf.vl_imp_trib%type;
   vn_cd_cfop_dest       cfop.cd%type;
   vn_acm_vl_icms_st     imp_itemnf.vl_imp_trib%type;
   vn_a                  number;
   vn_b                  number;
   vt_item_param_icmsst  item_param_icmsst%rowtype;
   vt_imp_itemnf         imp_itemnf%rowtype;
   vn_vl_base_calc_obs   imp_itemnf.vl_base_calc%type := 0;
   vn_vl_imp_trib_obs    imp_itemnf.vl_base_calc%type := 0;
   vv_texto              varchar2(255) := null;
   vt_obs_lancto_fiscal  dbms_sql.number_table;
   i                     pls_integer;
   --
   vn_vl_liq             nota_fiscal_cobr.vl_liq%type;     
   vn_soma_vl_dup        nfcobr_dup.vl_dup%type;
   --
   vv_valortipoparam_cd    valor_tipo_param.cd%type := null;
   vn_pessoa_id            pessoa.id%type := null;
   vn_multorg_id           mult_org.id%type := null;
   --
   cursor c_itemnf is
   select inf.id itemnf_id
	, inf.item_id
	, inf.cod_item
	, inf.descr_item
	, inf.cfop_id
	, inf.cfop
	, inf.qtde_comerc
	, inf.vl_item_bruto
	, inf.vl_frete
	, inf.vl_seguro
	, inf.vl_outro
	, inf.vl_desc
	, imp.aliq_apli
	, imp.id impitemnf_id
	, imp.vl_imp_trib
     from item_nota_fiscal inf
        , imp_itemnf       imp
	, tipo_imposto     ti
    where inf.notafiscal_id  = en_notafiscal_id
      and imp.itemnf_id      = inf.id
      and ti.id              = imp.tipoimp_id
      and ti.cd              = 1 -- ICMS
    order by inf.id;
   --
   cursor c_cobr is
   select nf.dt_emiss
        , nfc.*
     from nota_fiscal      nf
        , nota_fiscal_cobr nfc
    where nf.id             = en_notafiscal_id
      and nfc.notafiscal_id = nf.id
      and nvl(nfc.vl_liq,0) > 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0
      and gt_row_nota_fiscal.dm_ind_emit     = 0 -- Emissão Própria
      and gt_row_nota_fiscal.dm_arm_nfe_terc = 0
      then
      --
      vn_fase := 2;
      vn_empresa_id := pk_csf.fkg_empresa_notafiscal ( en_notafiscal_id => en_notafiscal_id );
      --
      vn_fase := 2.1;
      vn_multorg_id := pk_csf.fkg_multorg_id_empresa ( en_empresa_id => vn_empresa_id );
      --
      vn_fase := 3;
      vn_dm_nf_calc_icmsst := pk_csf.fkg_dm_nf_calc_icmsst_empresa ( en_empresa_id => vn_empresa_id );
      --
      vn_fase := 4;
      --
      if nvl(vn_dm_nf_calc_icmsst,0) = 1 then -- calcula ICMS-ST
         --
  	 vn_fase := 5;
	 vt_obs_lancto_fiscal.delete;
	 vn_acm_vl_icms_st := null;
	 --
	 vn_fase := 5.1;
	 --
	 if nvl(gt_row_nota_fiscal.pessoa_id,0) > 0 then
	    --
	    vn_pessoa_id := gt_row_nota_fiscal.pessoa_id;
	    --
         else
            --
            if trim(gt_row_nota_fiscal_dest.cnpj) is not null then
               --
               vn_pessoa_id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_multorg_id  => vn_multorg_id
                                                             , en_cpf_cnpj    => gt_row_nota_fiscal_dest.cnpj );
               --
            elsif trim(gt_row_nota_fiscal_dest.cpf) is not null then
               --
               vn_pessoa_id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_multorg_id  => vn_multorg_id
                                                             , en_cpf_cnpj    => gt_row_nota_fiscal_dest.cpf );
               --
            else
               --
               vn_pessoa_id := null;
               --
            end if;
            --
         end if;
         --
         vn_fase := 5.2;
         --
         -- verifica se o participante é 6-Calcular ICMS-ST
         vv_valortipoparam_cd := pk_csf.fkg_pessoa_valortipoparam_cd ( ev_tipoparam_cd => '6'
                                                                     , en_pessoa_id    => vn_pessoa_id
                                                                     );
         --
         if trim(vv_valortipoparam_cd) is null then
            --
            vv_valortipoparam_cd := '1'; -- Sim, calcula ICMS-ST
            --
         end if;
	 --
	 for rec in c_itemnf
         loop
            --
	    exit when c_itemnf%notfound or (c_itemnf%notfound) is null;
	    --
	    -- Verifica se não calcula ICMS-ST para o destinatário
	    if vv_valortipoparam_cd = '0' -- Não
	       then
	       return;
            end if;
	    --
            vn_fase := 6;
            --
            if gt_row_nota_fiscal.dm_tp_amb = 1 -- Produção
               and (trim(gt_row_nota_fiscal_dest.ie) is null and gt_row_nota_fiscal_dest.ie like 'ISENT%')
               then
               --
               return;
               --
            end if;
            --
            vn_fase := 6.1;
	    vn_estado_id := pk_csf.fkg_Estado_id ( ev_sigla_estado => gt_row_nota_fiscal_dest.uf );
	    --
	    vn_fase := 6.2;
	    vt_item_param_icmsst := null;
	    -- recuperar parâmetros de ICMS-ST Válidos
	    begin
               select *
                 into vt_item_param_icmsst
                 from item_param_icmsst
                where item_id     = rec.item_id
                  and empresa_id  = gt_row_nota_fiscal.empresa_id
                  and estado_id   = vn_estado_id
                  and nvl(cfop_id,rec.cfop_id) = rec.cfop_id
                  and trunc(gt_row_nota_fiscal.dt_emiss) between trunc(dt_ini) and nvl(trunc(dt_fin), trunc(gt_row_nota_fiscal.dt_emiss) );
            exception
	       when too_many_rows then
                  --
                  gv_mensagem_log := 'Exite mais de um parâmetro de ICMS-ST definido para o item '||rec.cod_item||'-'||rec.descr_item||
                                     ', no estado de '||gt_row_nota_fiscal_dest.uf||', CFOP '||rec.cfop||' e no período que contempla a data de '||
                                     to_char(gt_row_nota_fiscal.dt_emiss,'dd/mm/rrrr')||'.';
                  --
                  vn_loggenerico_id := null;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_cabec_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia );
                  -- Armazena o "loggenerico_id" na memória
                  pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                         , est_log_generico_nf => est_log_generico_nf );
                  --
                  vt_item_param_icmsst := null;
		  --
               when others then
                  --
                  vt_item_param_icmsst := null;
		  --
	    end;
            --
            if gt_row_nota_fiscal_dest.cpf is not null
               and nvl(vt_item_param_icmsst.DM_CALC_FISICA,0) = 0
               then -- Se for pessoa física não calcula ICMS-ST
               --
               return;
               --
            end if;
	    --
	    vn_fase := 6.3;
	    --
	    if nvl(vt_item_param_icmsst.id,0) > 0 then
	       --
	       vn_fase := 7;
	       -- apaga qualquer registro de ICMS-ST do Item
	       delete from imp_itemnf
	        where itemnf_id = rec.itemnf_id
		  and tipoimp_id = (select id from tipo_imposto where cd = 2);
	       --
	       vn_fase := 7.1;
	       -- recupera imposto de IPI
	       begin
                  select sum(imp.vl_imp_trib)
		    into vn_vl_ipi
		    from imp_itemnf    imp
		       , tipo_imposto  ti
		   where imp.itemnf_id = rec.itemnf_id
		     and imp.dm_tipo   = 0
		     and ti.id         = imp.tipoimp_id
		     and ti.cd         = 3; -- IPI
               exception
	          when others then
		     vn_vl_ipi := 0;
	       end;
               --
	       vn_fase := 7.2;
               -- recupera importo de Importação
	       begin
		  select sum(imp.vl_imp_trib)
		    into vn_vl_imp_import
                    from imp_itemnf    imp
		       , tipo_imposto  ti
		   where imp.itemnf_id = rec.itemnf_id
		     and imp.dm_tipo   = 0
		     and ti.id         = imp.tipoimp_id
		     and ti.cd         = 7; -- II
               exception
	          when others then
		     vn_vl_imp_import := 0;
	       end;
	       --
	       vn_fase := 7.3;
	       vt_imp_itemnf := null;
	       vt_imp_itemnf.itemnf_id := rec.itemnf_id;
	       --
	       vn_fase := 7.4;
	       vt_imp_itemnf.tipoimp_id := pk_csf.fkg_Tipo_Imposto_id ( en_cd => '2' );
	       vt_imp_itemnf.dm_tipo := 0;
	       --
	       vn_fase := 7.5;
	       -- verificar o tipo de cálculo
	       if nvl(vt_item_param_icmsst.dm_mod_base_calc_st,-1) = 4 then -- Margem de Valor Agregado
	          --
	 	  vn_fase := 8;
		  --
		  if vt_item_param_icmsst.dm_ajusta_mva = 1 then
		     --
	             -- calcula a MVA Ajustada
                     vn_fase := 8.1;
		     vn_a := round( ( 1 + (nvl(vt_item_param_icmsst.indice,1) / 100)), 4);
		     --
                     vn_fase := 8.2;
		     vn_b := round( ( 1 - ( nvl(rec.aliq_apli,1)/100 ) ) / ( 1 - ( nvl(vt_item_param_icmsst.aliq_dest,1)/100 ) ), 4);
		     --
                     vn_fase := 8.3;
		     vn_indice :=round( ( ( nvl(vn_a,0) * nvl(vn_b,0) ) - 1 ) * 100, 2 );
		     --
		  else
		     --
		     vn_fase := 8.4;
		     vn_indice := round(vt_item_param_icmsst.indice,2);
		     --
		  end if;
		  --
		  vn_fase := 8.5;
		  vn_vl_operacao := (nvl(rec.vl_item_bruto,0) - nvl(rec.vl_desc,0))
		                    + nvl(rec.vl_frete,0)
		 		    + nvl(rec.vl_seguro,0)
				    + nvl(rec.vl_outro,0)
				    + nvl(vn_vl_ipi,0)
				    + nvl(vn_vl_imp_import,0);
		  --
		  vn_fase := 8.6;
		  vt_imp_itemnf.vl_base_calc := round(nvl(vn_vl_operacao,0) + ( nvl(vn_vl_operacao,0) * (nvl(vn_indice,1)/100) ), 2);
		  vt_imp_itemnf.aliq_apli    := vt_item_param_icmsst.aliq_dest;
		  vt_imp_itemnf.perc_adic    := vn_indice;
		  --
		  vn_fase := 8.7;
		  vt_imp_itemnf.vl_imp_trib := ( nvl(vt_imp_itemnf.vl_base_calc,0) * ( nvl(vt_imp_itemnf.aliq_apli,1)/100 ) ) - nvl(rec.vl_imp_trib,0);
		  --
	       else
	          --
		  vn_fase := 8.8;
		  vt_imp_itemnf.vl_base_calc := round( ( nvl(vt_item_param_icmsst.indice,0) * nvl(rec.qtde_comerc,0) ), 2);
		  vt_imp_itemnf.aliq_apli    := vt_item_param_icmsst.aliq_dest;
		  --
		  vn_fase := 8.9;
		  vt_imp_itemnf.vl_imp_trib := round( ( nvl(vt_imp_itemnf.vl_base_calc,0) * ( nvl(vt_imp_itemnf.aliq_apli,1)/100 ) ), 2) - nvl(rec.vl_imp_trib,0);
		  --
	       end if;
	       --
	       vn_fase := 9;
	       --
	       vt_imp_itemnf.dm_orig_calc := 2; -- Compliance
	       --
               select impitemnf_seq.nextval
                 into vt_imp_itemnf.id
                 from dual;
	       --
	       vn_fase := 10;
	       --
	       if vt_item_param_icmsst.dm_efeito = 1 then -- Destaca imposto, será cálculo e criado o imposto de ICMS-ST
	          --
	          vn_fase := 11;
	          --
	          insert into imp_itemnf ( id
                                         , itemnf_id
                                         , tipoimp_id
                                         , dm_tipo
                                         , codst_id
                                         , vl_base_calc
                                         , aliq_apli
                                         , vl_imp_trib
                                         , perc_reduc
                                         , perc_adic
                                         , qtde_base_calc_prod
                                         , vl_aliq_prod
                                         , vl_bc_st_ret
                                         , vl_icmsst_ret
                                         , perc_bc_oper_prop
                                         , estado_id
                                         , vl_bc_st_dest
                                         , vl_icmsst_dest
                                         , dm_orig_calc
                                         )
                                  values ( vt_imp_itemnf.id
                                         , vt_imp_itemnf.itemnf_id
                                         , vt_imp_itemnf.tipoimp_id
                                         , vt_imp_itemnf.dm_tipo
                                         , vt_imp_itemnf.codst_id
                                         , vt_imp_itemnf.vl_base_calc
                                         , vt_imp_itemnf.aliq_apli
                                         , vt_imp_itemnf.vl_imp_trib
                                         , vt_imp_itemnf.perc_reduc
                                         , vt_imp_itemnf.perc_adic
                                         , vt_imp_itemnf.qtde_base_calc_prod
                                         , vt_imp_itemnf.vl_aliq_prod
                                         , vt_imp_itemnf.vl_bc_st_ret
                                         , vt_imp_itemnf.vl_icmsst_ret
                                         , vt_imp_itemnf.perc_bc_oper_prop
                                         , vt_imp_itemnf.estado_id
                                         , vt_imp_itemnf.vl_bc_st_dest
                                         , vt_imp_itemnf.vl_icmsst_dest
                                         , vt_imp_itemnf.dm_orig_calc
                                         );
		  --
	       elsif vt_item_param_icmsst.dm_efeito = 2 then -- Lista na Observacao, o valor do imposto de ICMS-ST será apenas apresentado na Observação da NFe
	          --
	          vn_fase := 12;
	          --
	          insert into imp_itemnf ( id
                                         , itemnf_id
                                         , tipoimp_id
                                         , dm_tipo
                                         , dm_orig_calc
                                         , vl_imp_nao_dest
                                         )
                                  values ( vt_imp_itemnf.id
                                         , vt_imp_itemnf.itemnf_id
                                         , vt_imp_itemnf.tipoimp_id
                                         , vt_imp_itemnf.dm_tipo
                                         , vt_imp_itemnf.dm_orig_calc
                                         , vt_imp_itemnf.vl_imp_trib
                                         );
	          --
                  vn_vl_base_calc_obs := nvl(vn_vl_base_calc_obs,0) + nvl(vt_imp_itemnf.vl_base_calc,0);
                  vn_vl_imp_trib_obs  := nvl(vn_vl_imp_trib_obs,0) + nvl(vt_imp_itemnf.vl_imp_trib,0);
		  --
	       end if;
	       --
	       vn_fase := 13;
	       -- armazena observação da nota fiscal com protocolo
	       if nvl(vt_item_param_icmsst.obslanctofiscal_id,0) > 0 then
	          --
	          vn_fase := 14;
	          --
	          if not vt_obs_lancto_fiscal.exists(vt_item_param_icmsst.obslanctofiscal_id) then
		     --
		     vn_fase := 14.1;
	             vt_obs_lancto_fiscal(vt_item_param_icmsst.obslanctofiscal_id) := vt_item_param_icmsst.obslanctofiscal_id;
		     --
		  end if;
		  --
	       end if;
	       --
	       vn_fase := 15;
               -- recupera o código do CFOP de destino
	       vn_cd_cfop_dest := pk_csf.fkg_cfop_cd ( en_cfop_id => vt_item_param_icmsst.cfop_id_dest );
	       --
	       vn_fase := 16;
	       --
	       update item_nota_fiscal it
                  set it.cfop    = vn_cd_cfop_dest
	            , it.cfop_id = vt_item_param_icmsst.cfop_id_dest
		where it.id = rec.itemnf_id;
	       --
	       vn_fase := 17;
               -- atualiza imposto de ICMS com o novo código de situação tributária
               update imp_itemnf ii
                  set ii.codst_id = vt_item_param_icmsst.codst_id
                where ii.id = rec.impitemnf_id;
	       --
	       vn_fase := 18;
	       -- acumula o valor para atualiza o total da cobranca e duplicata
	       vn_acm_vl_icms_st := nvl(vn_acm_vl_icms_st,0) + nvl(vt_imp_itemnf.vl_imp_trib,0);
	       --
	    end if;
	    --
	 end loop;
	 --
	 vn_fase := 19;
	 -- Cria a mensagem de ICMS-ST informado na Observação da Nota Fiscal
	 if nvl(vn_vl_base_calc_obs,0) > 0 and
	    nvl(vn_vl_imp_trib_obs,0) > 0 then
	    --
	    vn_fase := 20;
	    vv_texto := 'Base de Calculo de ICMS-ST: ' || trim(to_char(vn_vl_base_calc_obs, '999G999G999G990D99'))||
                        ' Valor Tributado de ICMS-ST: ' || trim(to_char(vn_vl_imp_trib_obs, '999G999G999G990D99'));
            --
	    pkb_monta_compl_infor_adic ( est_log_generico_nf => est_log_generico_nf
                                       , en_notafiscal_id => en_notafiscal_id
                                       , ev_texto_compl   => vv_texto );
            --
	 end if;
         --
	 vn_fase := 21;
	 -- monta observação da nota fiscal com o protocolo
	 i := vt_obs_lancto_fiscal.first;
	 --
	 loop
	    --
	    if nvl(i,0) = 0 then
	       exit;
	    end if;
	    --
	    vn_fase := 22;
	    --
	    pkb_monta_compl_infor_adic ( est_log_generico_nf => est_log_generico_nf
                                       , en_notafiscal_id => en_notafiscal_id
                                       , ev_texto_compl   => pk_csf.fkg_txt_obs_lancto_fiscal( vt_obs_lancto_fiscal(i) ) );
            --
	    vn_fase := 22.1;
            --
	    if i = vt_obs_lancto_fiscal.last then
	       exit;
	    else
	       i := vt_obs_lancto_fiscal.next(i);
	    end if;
	    --
         end loop;
	 --
	 -- Atualiza o valor da duplicata
	 vn_fase := 23;
	 --
	 -- criar duplicata com valor de ICMS-ST e vencimento em dia programado
	 if nvl(vn_acm_vl_icms_st,0) > 0 then
	    --
	    vn_fase := 24;
	    pkb_ajusta_total_nf ( en_notafiscal_id => en_notafiscal_id );
	    --
	    vn_fase := 24.1;
	    --
	    for rec in c_cobr
            loop
               --
	       exit when c_cobr%notfound or (c_cobr%notfound) is null;
	       --
	       vn_fase := 25;
	       --
               delete from NFCobr_Dup
                where nfcobr_id = rec.id
                  and nro_parc like 'S%';
               --
               vn_fase := 25.1;
	       --
               gt_row_NFCobr_Dup.nfcobr_id  := rec.id;
               gt_row_NFCobr_Dup.nro_parc   := 'S' ||rec.nro_fat || '/A';
               gt_row_NFCobr_Dup.dt_vencto  := to_date('15' || to_char(add_months(rec.dt_emiss, 1), '/MM/RRRR'), 'dd/mm/rrrr');
               gt_row_NFCobr_Dup.vl_dup     := nvl(vn_acm_vl_icms_st,0);
               --
               vn_fase := 25.2;
               -- Chama o procedimento de integração das duplicatas
               pkb_integr_nfcobr_dup ( est_log_generico_nf    => est_log_generico_nf
                                     , est_row_NFCobr_Dup  => gt_row_NFCobr_Dup
                                     , en_notafiscal_id    => en_notafiscal_id );
	       --
            end loop;
	    --
	 end if;
	 --
	 vn_fase := 26;
	 --
	 begin
            --
            select c.vl_liq, sum(d.vl_dup)
              into vn_vl_liq
                 , vn_soma_vl_dup
              from nota_fiscal_cobr c
                 , nfcobr_dup       d
             where c.notafiscal_id  = en_notafiscal_id
               and d.nfcobr_id      = c.id
             group by c.vl_liq;			   
            --
         exception
            when others then
               vn_vl_liq      := 0;					
               vn_soma_vl_dup := 0;
         end;
	 --
	 vn_fase := 26.1;
	 --
     if nvl(vn_soma_vl_dup,0) > 0 and nvl(vn_vl_liq,0) <> nvl(vn_soma_vl_dup,0) then	 
            -- Atualizar dados da Cobranca
            update nota_fiscal_cobr nc
               set nc.vl_orig = nvl(vn_soma_vl_dup,0)
                 , nc.vl_liq  = nvl(vn_soma_vl_dup,0)
            where nc.notafiscal_id = en_notafiscal_id
              and nvl(nc.vl_liq,0) > 0;
            --
         end if;
	 --
	 vn_fase := 27;
	 --
	 commit;
	 --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_calc_icms_st fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --   
END PKB_CALC_ICMS_ST;

-----------------------------------------------------------------------------------
-- Procedimento informa a Inscrição Estadual do Substituto se não existir na NFe --
-----------------------------------------------------------------------------------
PROCEDURE PKB_DEFINE_IE_SUBST ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                              , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_qtde            number := 0;
   vv_uf              nota_fiscal_dest.uf%type := null;
   vn_estado_id       estado.id%type := null;
   vn_empresa_id      empresa.id%type := null;
   vv_iest            ie_subst.iest%type := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0
      and gt_row_nota_fiscal.dm_ind_emit     = 0 -- Emissão Própria
      and gt_row_nota_fiscal.dm_arm_nfe_terc = 0
      then
      --
      vn_fase := 2;
      --
      begin
         --
         -- Verifica se na NFe tem informação de Código de Situação Tributária para o ICMS-ST
         select count(1)
           into vn_qtde
           from item_nota_fiscal  inf
               , imp_itemnf        imp
               , tipo_imposto      ti
               , cod_st            cst
           where inf.notafiscal_id  = en_notafiscal_id
             and imp.itemnf_id      = inf.id
             and ti.id              = imp.tipoimp_id
             and ti.cd              = 1 -- ICMS
             and cst.id             = imp.codst_id
             and cst.cod_st in ('10', '30', '60', '70', '90');
         --
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 2.1;
      --
      if nvl(vn_qtde,0) <= 0 then
         --
         begin
            --
            -- Verifica se na NFe tem informação de Código de Situação Tributária para o Partilha de ICMS
            select count(1)
              into vn_qtde
              from item_nota_fiscal  inf
                  , imp_itemnf        imp
                  , tipo_imposto      ti
                  , cod_st            cst
                  , imp_itemnf_icms_dest d
              where inf.notafiscal_id  = en_notafiscal_id
                and imp.itemnf_id      = inf.id
                and ti.id              = imp.tipoimp_id
                and ti.cd              = 1 -- ICMS
                and cst.id             = imp.codst_id
                and d.impitemnf_id     = imp.id;
            --
         exception
            when others then
               vn_qtde := 0;
         end;
         --
      end if;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde,0) > 0 then
         --
	 vn_fase := 4;
	 -- pega o destinatário da NF
	 begin
            select nfd.uf
	      into vv_uf
	      from nota_fiscal_dest nfd
	     where nfd.notafiscal_id = en_notafiscal_id;
	 exception
	    when others then
               vv_uf := null;
	 end;
	 --
	 vn_fase := 5;
	 vn_estado_id := pk_csf.fkg_Estado_id ( ev_sigla_estado => vv_uf );
	 --
	 vn_fase := 6;
	 vn_empresa_id := gt_row_nota_fiscal.empresa_id;
	 --
	 vn_fase := 7;
	 vv_iest := pk_csf.fkg_iest_empresa ( en_empresa_id => vn_empresa_id
                                            , en_estado_id  => vn_estado_id );
	 --
	 vn_fase := 8;
	 --
	 if trim(vv_iest) is not null then
	    --
	    vn_fase := 9;
	    --
	    update nota_fiscal_emit ne
               set ne.iest = trim(vv_iest)
	     where ne.notafiscal_id = en_notafiscal_id;
	    --
	    vn_fase := 10;
	    --
	    commit;
	    --
         end if;
	 --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_define_ie_subst fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_DEFINE_IE_SUBST;

---------------------------------------------
-- Procedimento ajusta o ZFM para a Adidas --
---------------------------------------------
PROCEDURE PKB_AJUSTA_ZFM_ADIDAS ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                   number := 0;
   vn_empresa_id             empresa.id%type;
   vn_vl_total_nf            number := 0;
   vn_vl_total_desc          number := 0;
   vn_vl_desc_item           number := 0;
   vn_vl_desc_acm            number := 0;
   vn_dm_ajust_desc_zfm_item empresa.dm_ajust_desc_zfm_item%type := null;
   vn_vl_imp_trib_icms       nota_fiscal_total.vl_imp_trib_icms%type := 0;
   vn_vl_imp_trib_st         nota_fiscal_total.vl_imp_trib_st%type := 0;
   vn_vl_total_item          nota_fiscal_total.vl_total_item%type := 0;
   vn_vl_total_item_nacional nota_fiscal_total.vl_total_item%type := 0;
   vn_vl_frete               nota_fiscal_total.vl_frete%type := 0;
   vn_vl_seguro              nota_fiscal_total.vl_seguro%type := 0;
   vn_vl_desconto            nota_fiscal_total.vl_desconto%type := 0;
   vn_vl_imp_trib_ii         nota_fiscal_total.vl_imp_trib_ii%type := 0;
   vn_vl_imp_trib_ipi        nota_fiscal_total.vl_imp_trib_ipi%type := 0;
   vn_vl_outra_despesas      nota_fiscal_total.vl_outra_despesas%type := 0;
   vn_qtde_it_total          number := 0;
   vn_qtde_item_calc         number := 0;
   --
   cursor c_nf is
   select nft.*
     from nota_fiscal       nf
        , nota_fiscal_dest  nfd
        , nota_fiscal_total nft
    where nf.id = en_notafiscal_id
      and nf.dm_ind_emit    = 0 -- Emissão Própria
      and nfd.notafiscal_id = nf.id
      and nfd.suframa  is not null
      and nft.notafiscal_id = nf.id;
   --
   cursor c_inf is
   select inf.*
     from item_nota_fiscal inf
    where inf.notafiscal_id = en_notafiscal_id
      and inf.orig in (0, 3, 4, 5)
    order by inf.id;
   --
BEGIN
   --
   vn_fase := 1;
   vn_empresa_id := gt_row_nota_fiscal.empresa_id;
   --
   vn_fase := 2;
   vn_dm_ajust_desc_zfm_item := nvl(pk_csf.fkg_empr_ajust_desc_zfm_item ( en_empresa_id => vn_empresa_id ),0);
   --
   vn_fase := 3;
   --
   if nvl(en_notafiscal_id,0) > 0 and
      nvl(vn_dm_ajust_desc_zfm_item,0) = 1 then
      --
      vn_fase := 4;
      --
      for rec in c_nf
      loop
         --
         exit when c_nf%notfound or (c_nf%notfound) is null;
         --
         vn_fase := 4.1;
         --
         begin
            select count(1)
                 , sum(it.vl_item_bruto)
              into vn_qtde_it_total
                 , vn_vl_total_item_nacional
              from item_nota_fiscal it
             where it.notafiscal_id = en_notafiscal_id
               and it.orig in (0, 3, 4, 5);
         exception
            when others then
               vn_qtde_it_total := 0;
         end;
         --
	 vn_fase := 4.2;
	 -- soma valores do item da nota fiscal
	 begin
            select sum(inf.vl_item_bruto)
	         , sum(inf.vl_frete)
		 , sum(inf.vl_seguro)
		 , sum(inf.vl_desc)
		 , sum(inf.vl_outro)
	      into vn_vl_total_item
	         , vn_vl_frete
		 , vn_vl_seguro
		 , vn_vl_desconto
		 , vn_vl_outra_despesas
	      from item_nota_fiscal inf
             where inf.notafiscal_id = en_notafiscal_id;
	 exception
	    when others then
               vn_vl_total_item     := 0;
	       vn_vl_frete          := 0;
	       vn_vl_seguro         := 0;
               vn_vl_desconto       := 0;
               vn_vl_outra_despesas := 0;
	 end;
	 --
	 vn_fase := 4.3;
	 -- soma valores do ICMS
	 begin
            select sum(imp.vl_imp_trib)
	      into vn_vl_imp_trib_icms
	      from item_nota_fiscal inf
	         , imp_itemnf       imp
		 , tipo_imposto     ti
		 , cod_st           cst
	     where inf.notafiscal_id = en_notafiscal_id
	       and inf.dm_mot_des_icms is null
	       and imp.itemnf_id     = inf.id
	       and ti.id             = imp.tipoimp_id
	       and ti.cd             = 1 -- ICMS
	       and cst.id            = imp.codst_id
	       and cst.cod_st   not in ('40', '41', '50');
         exception
	    when others then
	       vn_vl_imp_trib_icms := 0;
	 end;
	 --
	 vn_fase := 4.4;
	 -- soma valores do ICMS-ST
	 begin
            select round( sum( decode(cst_icms.cod_st, '60', 0, nvl(imp_st.vl_imp_trib, 0)) ), 2)
              into vn_vl_imp_trib_st
              from item_nota_fiscal it
                 , imp_itemnf       imp_st
                 , tipo_imposto     ti
                 , imp_itemnf       imp_icms
	         , cod_st           cst_icms
                 , tipo_imposto     ti_icms
             where it.notafiscal_id = en_notafiscal_id
               and imp_st.itemnf_id = it.id
               and ti.id            = imp_st.tipoimp_id
               and ti.cd            = '2' --ICMS_ST
               and it.id            = imp_icms.itemnf_id
               and cst_icms.id      = imp_icms.codst_id
               and ti_icms.id       = imp_icms.tipoimp_id
               and ti_icms.cd      in ( '1' );
	 exception
	    when others then
	       vn_vl_imp_trib_st := 0;
	 end;
	 --
	 vn_fase := 4.5;
	 -- soma valores do II
	 begin
            select sum(imp.vl_imp_trib)
	      into vn_vl_imp_trib_ii
	      from item_nota_fiscal inf
	         , imp_itemnf       imp
		 , tipo_imposto     ti
	     where inf.notafiscal_id = en_notafiscal_id
	       and imp.itemnf_id     = inf.id
	       and ti.id             = imp.tipoimp_id
	       and ti.cd             = 7; -- II
	 exception
	    when others then
	       vn_vl_imp_trib_ii := 0;
	 end;
	 --
	 vn_fase := 4.6;
	 -- soma valores de IPI
	 begin
	    select sum(imp.vl_imp_trib)
              into vn_vl_imp_trib_ipi
	      from item_nota_fiscal inf
	         , imp_itemnf       imp
	 	 , tipo_imposto     ti
		 , cod_st           cst
	     where inf.notafiscal_id = en_notafiscal_id
	       and imp.itemnf_id     = inf.id
	       and ti.id             = imp.tipoimp_id
	       and ti.cd             = 3 -- IPI
	       and cst.id            = imp.codst_id
	       and cst.cod_st   not in ('02', '03', '04', '05', '52', '53', '54', '55');
	 exception
	    when others then
	       vn_vl_imp_trib_ipi := 0;
	 end;
	 --
         vn_fase := 4.7;
         --
         vn_vl_total_nf := (nvl(vn_vl_total_item,0) - nvl(vn_vl_desconto,0))
                            + nvl(vn_vl_imp_trib_st,0)
                            + nvl(vn_vl_frete,0)
                            + nvl(vn_vl_seguro,0)
                            + nvl(vn_vl_outra_despesas,0)
                            + nvl(vn_vl_imp_trib_ii,0)
                            + nvl(vn_vl_imp_trib_ipi,0);
         --
         vn_fase := 4.8;
         --
         vn_vl_total_desc := nvl(vn_vl_total_nf,0) - nvl(rec.vl_total_nf,0);
         --
         vn_fase := 4.9;
         --
         if nvl(vn_vl_total_desc,0) > 0 then
            --
            vn_fase := 5;
            --
            for rec2 in c_inf
            loop
               --
               exit when c_inf%notfound or (c_inf%notfound) is null;
               --
               vn_fase := 5.1;
               --
               vn_qtde_item_calc := nvl(vn_qtde_item_calc,0) + 1;
               --
               vn_fase := 5.2;
               --
               if nvl(vn_qtde_it_total,0) = nvl(vn_qtde_item_calc,0) then
                  --
                  vn_fase := 5.3;
                  --
                  vn_vl_desc_item := nvl(vn_vl_total_desc,0) - nvl(vn_vl_desc_acm,0);
                  --
               else
                  --
                  vn_fase := 5.4;
                  --
                  vn_vl_desc_item := round( ( nvl(vn_vl_total_desc,0) * ( nvl(rec2.vl_item_bruto,0) / nvl(vn_vl_total_item_nacional,0) ) ), 2);
                  --
                  vn_vl_desc_acm := nvl(vn_vl_desc_acm,0) + nvl(vn_vl_desc_item,0);
                  --
               end if;
               --
               vn_fase := 5.5;
               --
               update item_nota_fiscal it
                  set it.vl_desc = nvl(it.vl_desc,0) + nvl(vn_vl_desc_item,0)
                where it.id = rec2.id;
               --
               vn_fase := 5.6;
               --
               commit;
               --
            end loop;
            --
         end if;
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_ajusta_zfm_adidas fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_AJUSTA_ZFM_ADIDAS;

-------------------------------------------------------------------------------------------
-- Procedure de Ajusta valores dos itens da NF com o Total                               --
-- a diferente entre o "total" e a "soma dos valores do item" é atribuída no último item --
-------------------------------------------------------------------------------------------
PROCEDURE PKB_AJUST_VLR_ITEMNF ( EST_LOG_GENERICO_NF   IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                               , EN_NOTAFISCAL_ID   IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                    number := 0;
   vn_loggenerico_id          log_generico_nf.id%type;
   vn_empresa_id              empresa.id%type;
   vn_dm_ajust_vlr_itemnf     empresa.dm_ajust_vlr_itemnf%type := null;
   vn_soma_vl_frete           nota_fiscal_total.vl_frete%type := 0;
   vn_soma_vl_seguro          nota_fiscal_total.vl_seguro%type := 0;
   vn_soma_vl_desconto        nota_fiscal_total.vl_desconto%type := 0;
   vn_soma_vl_outra_despesas  nota_fiscal_total.vl_outra_despesas%type := 0;
   vn_vl_frete                nota_fiscal_total.vl_frete%type := 0;
   vn_vl_seguro               nota_fiscal_total.vl_seguro%type := 0;
   vn_vl_desconto             nota_fiscal_total.vl_desconto%type := 0;
   vn_vl_outra_despesas       nota_fiscal_total.vl_outra_despesas%type := 0;
   vn_dif_vl_frete            nota_fiscal_total.vl_frete%type := 0;
   vn_dif_vl_seguro           nota_fiscal_total.vl_seguro%type := 0;
   vn_dif_vl_desconto         nota_fiscal_total.vl_desconto%type := 0;
   vn_dif_vl_outra_despesas   nota_fiscal_total.vl_outra_despesas%type := 0;
   vn_itemnf_id               item_nota_fiscal.id%type;
   --
   vn_vl_dif             number;
   vn_vl_item_bruto_calc number;
   vn_vl_unit_item_calc  number;
   --
   cursor c_inf is
   select inf.*
     from item_nota_fiscal inf
    where inf.notafiscal_id = en_notafiscal_id
    order by 1;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      vn_empresa_id := pk_csf.fkg_empresa_notafiscal ( en_notafiscal_id => en_notafiscal_id );
      --
      vn_fase := 3;
      vn_dm_ajust_vlr_itemnf := pk_csf.fkg_ajustvlr_inf_conf_empresa ( en_empresa_id => vn_empresa_id);
      --
      vn_fase := 4;
      --
      if nvl(vn_dm_ajust_vlr_itemnf,0) = 1 then
         --
         vn_fase := 5;
         -- soma valores do item da nota fiscal
         begin
            select sum(inf.vl_frete)
                 , sum(inf.vl_seguro)
                 , sum(inf.vl_desc)
                 , sum(inf.vl_outro)
              into vn_soma_vl_frete
                 , vn_soma_vl_seguro
                 , vn_soma_vl_desconto
                 , vn_soma_vl_outra_despesas
              from item_nota_fiscal inf
             where inf.notafiscal_id = en_notafiscal_id;
         exception
            when others then
              vn_soma_vl_frete          := 0;
              vn_soma_vl_seguro         := 0;
              vn_soma_vl_desconto       := 0;
              vn_soma_vl_outra_despesas := 0;
         end;
         --
         vn_fase := 6;
         -- recupera os valores do total
         begin
            select nft.vl_frete
                 , nft.vl_seguro
                 , nft.vl_desconto
                 , nft.vl_outra_despesas
              into vn_vl_frete
                 , vn_vl_seguro
                 , vn_vl_desconto
                 , vn_vl_outra_despesas
              from nota_fiscal_total nft
             where nft.notafiscal_id = en_notafiscal_id;
         exception
            when others then
              vn_vl_frete          := 0;
              vn_vl_seguro         := 0;
              vn_vl_desconto       := 0;
              vn_vl_outra_despesas := 0;
         end;
         --
         vn_fase := 7;
         -- apura a diferença de valores
         vn_dif_vl_frete          := nvl(vn_vl_frete,0) - nvl(vn_soma_vl_frete,0);
         vn_dif_vl_seguro         := nvl(vn_vl_seguro,0) - nvl(vn_soma_vl_seguro,0);
         vn_dif_vl_desconto       := nvl(vn_vl_desconto,0) - nvl(vn_soma_vl_desconto,0);
         vn_dif_vl_outra_despesas := nvl(vn_vl_outra_despesas,0) - nvl(vn_soma_vl_outra_despesas,0);
         --
         vn_fase := 8;
         -- recupera o ultimo item
         begin
            select max(inf.id)
              into vn_itemnf_id
              from item_nota_fiscal inf
             where inf.notafiscal_id    = en_notafiscal_id
               and substr(inf.cfop,1,1) not in ('3', '7');
         exception
            when others then
               vn_itemnf_id := null;
         end;
         --
         vn_fase := 9;
         --
         if nvl(vn_itemnf_id,0) > 0 then
            --
            --| atualiza a diferença no ultimo item
            --
            vn_fase := 9.1;
            --
            if nvl(vn_dif_vl_frete,0) <> 0 then
               --
               update item_nota_fiscal it
                  set it.vl_frete = nvl(it.vl_frete,0) + (nvl(vn_dif_vl_frete,0))
                where it.id = vn_itemnf_id
                  and (nvl(it.vl_frete,0) + (nvl(vn_dif_vl_frete,0))) >= 0;
               --
            end if;
            --
            vn_fase := 9.2;
            --
            if nvl(vn_dif_vl_seguro,0) <> 0 then
               --
               update item_nota_fiscal it
                  set it.vl_seguro = nvl(it.vl_seguro,0) + (nvl(vn_dif_vl_seguro,0))
                where it.id = vn_itemnf_id
                  and (nvl(it.vl_seguro,0) + (nvl(vn_dif_vl_seguro,0))) >= 0;
               --
            end if;
            --
            vn_fase := 9.3;
            --
            if nvl(vn_dif_vl_desconto,0) <> 0 then
               --
               update item_nota_fiscal it
                  set it.vl_desc = nvl(it.vl_desc,0) + (nvl(vn_dif_vl_desconto,0))
                where it.id = vn_itemnf_id
                  and (nvl(it.vl_desc,0) + (nvl(vn_dif_vl_desconto,0))) >= 0;
               --
            end if;
            --
            vn_fase := 9.4;
            --
            if nvl(vn_dif_vl_outra_despesas,0) <> 0 then
               --
               update item_nota_fiscal it
                  set it.vl_outro = nvl(it.vl_outro,0) + (nvl(vn_dif_vl_outra_despesas,0))
                where it.id = vn_itemnf_id
                  and (nvl(it.vl_outro,0) + (nvl(vn_dif_vl_outra_despesas,0))) >= 0;
               --
            end if;
            --
            vn_fase := 9.5;
            --
            commit;
            --
         end if;
         --
         vn_fase := 10;
         -- verifica se há diferença entre o valor do item unitário x valor do item bruto
         for rec_inf in c_inf loop
            exit when c_inf%notfound or (c_inf%notfound) is null;
            --
            vn_fase := 10.1;
            --
            vn_vl_dif             := 0;
            vn_vl_item_bruto_calc := 0;
            vn_vl_unit_item_calc  := 0;
            --
            vn_vl_item_bruto_calc := round(nvl(rec_inf.vl_unit_comerc,0) * nvl(rec_inf.qtde_comerc,0),2);
            --
            vn_fase := 10.2;
            --
            vn_vl_dif := nvl(vn_vl_item_bruto_calc,0) - nvl(rec_inf.vl_item_bruto,0);
            --
            vn_fase := 10.3;
            --
            if nvl(vn_vl_dif,0) <> 0 then
               --
               vn_fase := 10.4;
               --
               if nvl(vn_vl_dif,0) <= 1 and nvl(vn_vl_dif,0) >= -1 then
                  -- 
                  vn_fase := 10.5;
                  --
                  vn_vl_unit_item_calc := round(nvl(rec_inf.vl_item_bruto,0) / nvl(rec_inf.qtde_comerc,1), 10);
                  --
                  vn_fase := 10.6;
                  --
                  update item_nota_fiscal set vl_unit_comerc = vn_vl_unit_item_calc
                   where id = rec_inf.id;
                  --
                  commit;
                  --
               end if;
               --
            end if;
            --
         end loop;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_ajust_vlr_itemnf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_AJUST_VLR_ITEMNF;

-----------------------------------------------
-- Processo para ajustar a base dos impostos --
-----------------------------------------------
PROCEDURE PKB_AJUST_BASE_IMP ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                             , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase               number := 0;
   vn_loggenerico_id     log_generico_nf.id%type;
   vn_empresa_id         empresa.id%type;
   vn_dm_ajust_base_imp  empresa.dm_ajust_base_imp%type;
   vn_valor_calc         item_nota_fiscal.vl_item_bruto%type;
   vn_vl_dif             number;
   vn_vl_imp_trib        imp_itemnf.vl_imp_trib%type;
   vn_vl_toler_nf        number;
   --
   cursor c_itemnf is
   select inf.id
        , inf.vl_item_bruto
        , inf.vl_desc
     from item_nota_fiscal inf
    where inf.notafiscal_id = en_notafiscal_id
    order by inf.id;
   --
   cursor c_imp ( en_itemnf_id item_nota_fiscal.id%Type ) is
   select imp.id impitemnf_id
        , imp.vl_base_calc
        , imp.aliq_apli
        , ti.cd
     from imp_itemnf   imp
        , tipo_imposto ti
        , cod_st       cst
    where imp.itemnf_id = en_itemnf_id
      and imp.dm_tipo   = 0 -- Imposto
      and ti.id         = imp.tipoimp_Id
      and ti.cd         = '1' -- ICMS
      and cst.id        = imp.codst_id
      and cst.cod_st    not in ('40', '41', '51', '60')
    order by 1;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      vn_empresa_id := gt_row_nota_fiscal.empresa_id;
      --
      vn_fase := 3;
      vn_dm_ajust_base_imp := pk_csf.fkg_empr_ajust_base_imp ( en_empresa_id => vn_empresa_id );
      --
      vn_fase := 4;
      -- Função retorna o valor de tolerância para os valores de documentos fiscais (nf) e caso não exista manter 0.03
      vn_vl_toler_nf := pk_csf.fkg_vlr_toler_empresa ( en_empresa_id => vn_empresa_id
                                                     , ev_opcao      => 'NF' );
      --
      vn_fase := 5;
      --
      if nvl(vn_dm_ajust_base_imp,0) = 1 then -- SIm, ajusta o valor do imposto
         --
         vn_fase := 6;
         -- recupera os itens da nota fiscal
         for rec_it in c_itemnf
         loop
            --
            exit when c_itemnf%notfound or (c_itemnf%notfound) is null;
            --
            vn_fase := 7;
            --
            vn_valor_calc := nvl(rec_it.vl_item_bruto,0) - nvl(rec_it.vl_desc,0);
            --
            vn_fase := 8;
            -- recupera os impostos
            for rec_imp in c_imp(rec_it.id) loop
               exit when c_imp%notfound or (c_imp%notfound) is null;
               --
               vn_fase := 9;
               --
               vn_vl_dif := nvl(vn_valor_calc,0) - nvl(rec_imp.vl_base_calc,0);
               --
               vn_fase := 10;
               --
               if nvl(vn_vl_dif,0) <> 0 and
                  ( nvl(vn_vl_dif,0) <= nvl(vn_vl_toler_nf,0) and nvl(vn_vl_dif,0) >= (nvl(vn_vl_toler_nf,0) * -1) ) then
--                  ( nvl(vn_vl_dif,0) <= 0.03 and nvl(vn_vl_dif,0) >= -0.03 ) then
                  --
                  vn_fase := 11;
                  --
                  vn_vl_imp_trib := nvl(vn_valor_calc,0) * ( nvl(rec_imp.aliq_apli,0) / 100);
                  --
                  vn_fase := 12;
                  --
                  update imp_itemnf ii
                     set ii.vl_base_calc = nvl(vn_valor_calc,0)
                       , ii.vl_imp_trib  = nvl(vn_vl_imp_trib,0)
                   where ii.id = rec_imp.impitemnf_id;
                  --
                  vn_fase := 13;
                  --
                  commit;
                  --
               end if;
               --
            end loop;
            --
         end loop;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_ajust_base_imp fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_AJUST_BASE_IMP;
--
----------------------------------------------------
-- Procedimento cálculo o Diferencial de Alíquota --
----------------------------------------------------
PROCEDURE PKB_CALC_DIF_ALIQ ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                            , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                 number := 0;
   vn_loggenerico_id       log_generico_nf.id%type;
   vn_tipooperacao_cd      tipo_operacao.cd%type;
   vt_param_dif_aliq_forn  param_dif_aliq_forn%rowtype;
   vt_imp_itemnf           imp_itemnf%rowtype;
   vt_itemnf_dif_aliq      itemnf_dif_aliq%rowtype;
   vn_empresa_id           empresa.id%type;
   vn_pessoa_id            pessoa.id%type;
   vn_base_calc            number;
   vn_vl_imp_trib          number;
   vn_vl_imp_trib_ie       number;
   vn_qtde_calc_integr     number;
   vv_valortipoparam_cd    valor_tipo_param.cd%type := null;
   vv_sigla_estado         estado.sigla_estado%type;
   vn_indice_aliq          number;
   vn_calc_aliq            number;
   vn_dm_tipo_cd           itemnf_dif_aliq.dm_tipo%type:=null;
   vn_dm_cal_difal_nf      number;
   --
   vv_cod_st cod_st.cod_st%type;
   --
   cursor c_inf is
   select inf.*
     from item_nota_fiscal inf
    where inf.notafiscal_id    = en_notafiscal_id
      and substr(inf.cfop,1,1) in ('2', '6')
    order by inf.id;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0
      and gt_row_nota_fiscal.dm_ind_emit       = 1 -- Terceiros
      and gt_row_nota_fiscal.dm_arm_nfe_terc   = 0
      then
      --
      vn_fase := 2;
      vn_empresa_id := gt_row_nota_fiscal.empresa_id;
      --
      vn_fase := 2.1;
      --
      vv_sigla_estado := pk_csf.fkg_sigla_estado_empresa ( en_empresa_id => vn_empresa_id );
      --
      vn_fase := 3;
      --
      begin
         select nf.pessoa_id
           into vn_pessoa_id
           from nota_fiscal nf
          where nf.id = en_notafiscal_id;
      exception
         when others then
            vn_pessoa_id := null;
      end;
      --
      vn_fase := 3.1;
      --
      -- verifica se o participante é 1-Simples Nacional
      -- Conforme "Lei Complementar 155/2016" as Empresas do Simples Nacional devem calcular DIFAL	  
      /*   
      vv_valortipoparam_cd := pk_csf.fkg_pessoa_valortipoparam_cd ( ev_tipoparam_cd => '1'
                                                                  , en_pessoa_id    => vn_pessoa_id
                                                                 );
      vn_fase := 3.2;                                                            
      --
      if vv_valortipoparam_cd = '1' then -- Sim é Simples Nacional, então não calcula
         return;
      end if;
      */	  
      --
      vn_fase := 4;
      --
      for rec in c_inf loop
         exit when c_inf%notfound or (c_inf%notfound) is null;
         --
         vn_fase := 4.1;
         --
         begin
           select dm_tipo
             into vn_dm_tipo_cd
             from itemnf_dif_aliq
            where itemnf_id = rec.id;
         exception
           when no_data_found then
             vn_dm_tipo_cd := null;
         end;
         --
         vn_fase := 4.2;
         --
           begin
             select emp.dm_cal_difal_nf
               into vn_dm_cal_difal_nf
               from empresa emp
              where emp.id = vn_empresa_id;
           exception
             when others then
               vn_dm_cal_difal_nf := null;
           end;
         --
         vn_fase := 4.3;
         --   
       if ((vn_dm_cal_difal_nf = '0' and vt_itemnf_dif_aliq.vl_dif_aliq = 0)
         or (vn_dm_cal_difal_nf = '0' and vt_itemnf_dif_aliq.vl_dif_aliq is null)) then
         --
           if vn_dm_tipo_cd =3  or vn_dm_tipo_cd is null then /*somente com status Calculo (3) , o calculo será refeito*/
           --
           vn_qtde_calc_integr := 0;
           --
           if vn_dm_tipo_cd is not null then
               -- Verifica se existe cálculo Integrado
               begin
                  --
                  select count(1)
                    into vn_qtde_calc_integr
                    from itemnf_dif_aliq
                   where itemnf_id = rec.id
                     and dm_tipo in (1,2,5);
                  --
               exception
                  when others then
                     vn_qtde_calc_integr := 0;
               end;
           end if;
           --
           vn_fase := 4.4;
           --
           if nvl(vn_qtde_calc_integr,0) <= 0 then
              --
              vn_fase := 5;
              -- Exclui qualquer cálculo
              delete from itemnf_dif_aliq id
               where id.itemnf_id = rec.id;
              --
              vn_fase := 5.1;
              --
              commit;
              --
              vn_fase := 5.2;
              --
              begin
                 select t.cd
                   into vn_tipooperacao_cd
                   from cfop c
                      , tipo_operacao t
                  where c.id = rec.cfop_id
                    and t.id = c.tipooperacao_id;
              exception
                 when others then
                    vn_tipooperacao_cd := null;
              end;
              --
              vn_fase := 5.3;
              --
              if vn_tipooperacao_cd in (7, 8) then -- 7-Ativo Permanente; 8-Uso e Consumo
                 --
                 vn_fase := 6;
                 --
                 vt_param_dif_aliq_forn := null;
                 vt_imp_itemnf          := null;
                 vt_itemnf_dif_aliq     := null;
                 --
                 vn_fase := 6.1;
                 -- verifica se tem parâmetro para o item
                 begin
                    select p.*
                      into vt_param_dif_aliq_forn
                      from param_dif_aliq_forn p
                     where p.empresa_id = vn_empresa_id
                       and p.pessoa_id  = vn_pessoa_id
                       and p.item_id    = rec.item_id;
                 exception
                    when others then
                       vt_param_dif_aliq_forn := null;
                 end;
                 --
                 vn_fase := 6.2;
                 -- verifica se tem parâmetro pelo NCM
                 if nvl(vt_param_dif_aliq_forn.id,0) <= 0 then
                    --
                    vn_fase := 7;
                    --
                    begin
                       select p.*
                         into vt_param_dif_aliq_forn
                         from param_dif_aliq_forn p
                            , ncm n
                        where p.empresa_id = vn_empresa_id
                          and p.pessoa_id = vn_pessoa_id
                          and n.id = p.ncm_id
                          and n.cod_ncm = rec.cod_ncm;
                    exception
                       when others then
                          vt_param_dif_aliq_forn := null;
                    end;
                    --
                 end if;
                 --
                 vn_fase := 8;
                 -- Processo de cálculo de diferencial de alíquota
                 -- Recupera os dados de impostos de ICMS
                 begin
                    select imp.*
                      into vt_imp_itemnf
                      from imp_itemnf   imp
                         , tipo_imposto ti
                     where imp.itemnf_id = rec.id
                       and ti.id         = imp.tipoimp_id
                       and ti.cd         = 1;
                 exception
                    when others then
                       vt_imp_itemnf := null;
                 end;
                 --
                 vn_fase := 8.1;
                 --
                 vv_cod_st := pk_csf.fkg_Cod_ST_cod ( en_id_st => vt_imp_itemnf.codst_id );
                 --
                 if (nvl(vt_imp_itemnf.vl_base_calc,0) <= 0
                     and nvl(vt_imp_itemnf.vl_base_outro,0) <= 0 )
                    or vv_cod_st in ('10', '30', '60', '70')
                    then
                    --
                    vt_itemnf_dif_aliq.itemnf_id    := rec.id;
                    vt_itemnf_dif_aliq.aliq_orig    := 0;
                    vt_itemnf_dif_aliq.aliq_ie      := 0;
                    vt_itemnf_dif_aliq.vl_bc_icms   := 0;
                    vt_itemnf_dif_aliq.vl_dif_aliq  := 0;
                    vt_itemnf_dif_aliq.dm_tipo      := 3; -- Calculado
                    --
                 else
                    --
                    vn_fase := 9;
                    -- Se não tem aliquota Interestadual, atribui 18%
                    if nvl(vt_param_dif_aliq_forn.aliq_ie,0) <= 0 then
                       vn_fase := 9.1;
                       vt_param_dif_aliq_forn.aliq_ie := 18;
                    end if;
                    --
                    vn_fase := 10;
                    --
                    if nvl(vt_param_dif_aliq_forn.aliq_orig,0) <= 0 then
                       --
                       vn_fase := 11;
                       --
                       if nvl(vt_imp_itemnf.vl_base_outro,0) > 0 then
                          --
                          vn_fase := 11.1;
                          vt_param_dif_aliq_forn.aliq_orig := nvl(vt_imp_itemnf.aliq_aplic_outro,0);
                          --
                       elsif nvl(vt_imp_itemnf.vl_base_calc,0) > 0 then
                          --
                          vn_fase := 11.2;
                          vt_param_dif_aliq_forn.aliq_orig := nvl(vt_imp_itemnf.aliq_apli,0);
                          --
                       else
                          --
                          vn_fase := 11.3;
                          vt_param_dif_aliq_forn.aliq_orig := 12;
                          --
                       end if;
                       --
                    end if;
                    --
                    vn_fase := 12;
                    --
                    if nvl(vt_imp_itemnf.vl_base_outro,0) > 0 then
                       --
                       vn_fase := 12.1;
                       vn_base_calc   := nvl(vt_imp_itemnf.vl_base_outro,0);
                       vn_vl_imp_trib := nvl(vt_imp_itemnf.vl_imp_outro,0);
                       --
                    elsif nvl(vt_imp_itemnf.vl_base_calc,0) > 0 then
                       --
                       vn_fase := 12.2;
                       vn_base_calc   := nvl(vt_imp_itemnf.vl_base_calc,0);
                       vn_vl_imp_trib := nvl(vt_imp_itemnf.vl_imp_trib,0);
                       --
                    else
                       --
                       vn_fase := 12.3;
                       vn_base_calc   := ( nvl(rec.vl_item_bruto,0) - nvl(rec.vl_desc,0) ) + nvl(rec.vl_frete,0) + nvl(rec.vl_seguro,0) + nvl(rec.vl_outro,0);
                       vn_vl_imp_trib := round(nvl(vn_base_calc,0) * (nvl(vt_param_dif_aliq_forn.aliq_orig,0)/100), 2);
                       --
                    end if;
                    --
                    vn_fase := 13;
                    vn_vl_imp_trib_ie := round(nvl(vn_base_calc,0) * (nvl(vt_param_dif_aliq_forn.aliq_ie,0)/100), 2);
                    --
                    vn_fase := 14;
                    -- processo de cálculo
                    vt_itemnf_dif_aliq.itemnf_id   := rec.id;
                    vt_itemnf_dif_aliq.aliq_orig   := vt_param_dif_aliq_forn.aliq_orig;
                    vt_itemnf_dif_aliq.aliq_ie     := vt_param_dif_aliq_forn.aliq_ie;
                    vt_itemnf_dif_aliq.dm_tipo     := 3; -- Calculado
                    --
                    vn_fase := 14.1;
                    --
          if trim(vv_sigla_estado) in ('MG','BA') then
                       --
                       vn_fase := 14.2;
                       --
                       -- Como exemplo: Base Calc. DIFAL = ((100,00 - (100,00 * 12/100)) / (1-(18/100))) = 107,32
                       vt_itemnf_dif_aliq.vl_bc_icms := ((nvl(vn_base_calc,0) - (nvl(vn_base_calc,0) * nvl(vt_param_dif_aliq_forn.aliq_orig,0) / 100)) /
                                                         (1 - nvl(vt_param_dif_aliq_forn.aliq_ie,0) / 100));
                       --
                       -- Como exemplo: Valor DIFAL = ((107,32 * 18 / 100) - (100,00 * 12/100)) = 7,32
                       vt_itemnf_dif_aliq.vl_dif_aliq := ((nvl(vt_itemnf_dif_aliq.vl_bc_icms,0) * nvl(vt_param_dif_aliq_forn.aliq_ie,0) / 100) -
                                                           (nvl(vn_base_calc,0) * nvl(vt_param_dif_aliq_forn.aliq_orig,0) / 100));
                       --
                    else
                       --
                       vn_fase := 14.90;
                       --
                       vt_itemnf_dif_aliq.vl_bc_icms  := nvl(vn_base_calc,0);
                       vt_itemnf_dif_aliq.vl_dif_aliq := nvl(vn_vl_imp_trib_ie,0) - nvl(vn_vl_imp_trib,0);
                       --
                    end if;
                    --
                    vn_fase := 14.99;
                    --
                    if nvl(vt_itemnf_dif_aliq.vl_dif_aliq,0) <= 0 then
                       --
                       vt_itemnf_dif_aliq.vl_dif_aliq := 0;
                       --
                    end if;
                    --
                 end if;
                 --
                 vn_fase := 15;
                 --
                 if nvl(vt_itemnf_dif_aliq.itemnf_id,0) > 0
                   and ( nvl(vt_itemnf_dif_aliq.aliq_orig, 0) > 0  or nvl(vt_itemnf_dif_aliq.aliq_ie, 0) > 0
                         or nvl(vt_itemnf_dif_aliq.vl_bc_icms, 0) > 0 or nvl(vt_itemnf_dif_aliq.vl_dif_aliq, 0) > 0) then
                    --
                    insert into itemnf_dif_aliq ( itemnf_id
                                                , aliq_orig
                                                , aliq_ie
                                                , vl_bc_icms
                                                , vl_dif_aliq
                                                , dm_tipo
                                                )
                                         values ( vt_itemnf_dif_aliq.itemnf_id
                                                , vt_itemnf_dif_aliq.aliq_orig
                                                , vt_itemnf_dif_aliq.aliq_ie
                                                , vt_itemnf_dif_aliq.vl_bc_icms
                                                , vt_itemnf_dif_aliq.vl_dif_aliq
                                                , vt_itemnf_dif_aliq.dm_tipo
                                                );
                    --
                 end if;
                 --
                 vn_fase := 16;
                 --
                 commit;
                 --
                 vt_itemnf_dif_aliq := null;
                 --
              end if;
              --
           end if;
           --
         end if;
         --
       end if;
       --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_calc_dif_aliq fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_CALC_DIF_ALIQ;
--
----------------------------------------------------
-- Procedimento cálculo do FCP
----------------------------------------------------
PROCEDURE pkb_calc_fcp ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                       , EN_NOTAFISCAL_ID    IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase  number := 0;
   --
   cursor c_fcp is
      select ii.id
           , ii.vl_bc_fcp
           , ii.aliq_fcp
           , ii.vl_base_calc
        from imp_itemnf   ii
           , tipo_imposto ti
       where exists ( select it.id
                        from item_nota_fiscal it
                       where it.notafiscal_id = en_notafiscal_id
                         and it.id            = ii.itemnf_id )
         and ti.id  = ii.tipoimp_id
         and ti.cd in (1,2); -- 1-ICMS / 2-ICMS-ST
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      for rec_fcp in c_fcp loop
         --
         exit when c_fcp%notfound or (c_fcp%notfound);
         --
         vn_fase := 3;
         -- Verifica se a tabela imp_itemnf recebeu os valores de VL_BC_FCP e VL_FCP
         if nvl(rec_fcp.vl_bc_fcp,0) = 0 and nvl(rec_fcp.aliq_fcp,0) > 0 then
            --
            vn_fase := 4;
            --
            update imp_itemnf ii
               set ii.vl_bc_fcp = rec_fcp.vl_base_calc
                 , ii.vl_fcp    = (rec_fcp.vl_base_calc * (rec_fcp.aliq_fcp / 100))
             where ii.id = rec_fcp.id;
            --
            commit;
            --
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_calc_fcp fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
end  pkb_calc_fcp;
---------------------------------------------
-- Processo para validar a chave de acesso --
---------------------------------------------
PROCEDURE PKB_VALIDA_NOTA_FISCAL ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                 , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   --
   vn_dm_id_dest_comparar nota_fiscal.dm_id_dest%type := 0;
   vn_dm_ind_pres         nota_fiscal.dm_ind_pres%type := 0;
   vv_cod_mod             mod_fiscal.cod_mod%type := null;
   vv_uf                  estado.sigla_estado%type := null;
   vv_uf_empresa          estado.sigla_estado%type := null;
   vn_qtde_devol          number := 0;
   vn_dm_ind_final        nota_fiscal.dm_ind_final%type := 0;
   vv_id_estrangeiro      nota_fiscal_dest.id_estrangeiro%type := null;
   vn_cod_pais            nota_fiscal_dest.cod_pais%type := null;
   vv_cd_versaowsdl_nfe   versao_wsdl.cd%type;
   vn_dm_id_dest          nota_fiscal.dm_id_dest%type;   
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      -- Geração do campo "dm_id_dest"
      begin
         select decode(substr(cf.cd,1,1), 1, 1
                                        , 2, 2
                                        , 3, 3
                                        , 5, 1
                                        , 6, 2
                                        , 7, 3
                                        , 1)
           into vn_dm_id_dest_comparar
           from item_nota_fiscal it
              , cfop             cf
          where it.notafiscal_id = gt_row_nota_fiscal.id
            and cf.id            = it.cfop_id
            and rownum           = 1;
      exception
         when others then
            vn_dm_id_dest_comparar := 1; -- será assumido o grupo de cfop 1
      end;
      --
      vn_fase := 3;
      --
      -- Indicador de destinatário DM_ID_DEST: 1-Operação interna, 2-Operação interestadual, 3-Operação com exterior.
      -- Somente irá alterar o dm_id_dest se o campo estiver nulo, do contrário mantém o que foi enviado pelo cliente
      if nvl(gt_row_nota_fiscal.dm_id_dest,0) = 0 then
         --
         vn_fase := 3.1;
         --
         update nota_fiscal
            set dm_id_dest = vn_dm_id_dest_comparar
          where id         = en_notafiscal_id;
         --
         gt_row_nota_fiscal.dm_id_dest := vn_dm_id_dest_comparar;
         --
      end if;
      --
      begin
         --
         vn_fase := 3.2;
         --
         select id_estrangeiro
              , cod_pais
           into vv_id_estrangeiro
              , vn_cod_pais
           from nota_fiscal_dest
          where notafiscal_id = en_notafiscal_id;
         --
      exception
         when others then
         vv_id_estrangeiro := null;
         vn_cod_pais       := null;
      end;
      --
      vn_fase := 3.3;
      --
      --if nvl(vn_dm_id_dest_comparar, 0) <> 3 -- Redmine #28456
      if vn_cod_pais = 1058
         and vv_id_estrangeiro is not null
         then
         --
         gv_mensagem_log := 'A "Identificação do destinatário estrangeiro" deve ser preechida somente no caso de operação com o exterior.';
         --
         vn_loggenerico_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem       => gv_cabec_log
                             , ev_resumo         => gv_mensagem_log
                             , en_tipo_log       => erro_de_validacao
                             , en_referencia_id  => gn_referencia_id
                             , ev_obj_referencia => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
         --
      end if;
      --
      vn_fase := 3.4;
      --
      vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => gt_row_nota_fiscal.modfiscal_id );
      --
      if nvl(gt_row_nota_fiscal.dm_ind_emit,0) = 0 then
         --
         if nvl(gt_row_nota_fiscal.dm_ind_pres, -1) = -1 then
            --
            if nvl(gt_row_nota_fiscal.dm_fin_nfe, 0)  in (2, 3) then
               --
               vn_dm_ind_pres := 0;
               --
            elsif vv_cod_mod = '65' then
               --
               vn_dm_ind_pres := 1;
               --
            else
               --
               vn_dm_ind_pres := 9;
               --
            end if;
            --
            update nota_fiscal
               set dm_ind_pres = vn_dm_ind_pres
             where id = en_notafiscal_id;
            --
            gt_row_nota_fiscal.dm_ind_pres := vn_dm_ind_pres;
            --
         else
            --
            if nvl(gt_row_nota_fiscal.dm_fin_nfe, 0) in (2, 3)
               and nvl(gt_row_nota_fiscal.dm_ind_pres, 0) <> 0
               and nvl(gt_row_nota_fiscal.dm_ind_final,0) <> 0
               and nvl(gt_row_nota_fiscal.dm_proc_emiss,0) <> 0
               then
               --
               vn_fase := 3.5;
               --
               gv_mensagem_log := 'Para NF-e complementar ou de ajuste, o valor do campo "Indicador de presença do comprador" deve ser 0 - Não se aplica.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            if vv_cod_mod = '65'
               and nvl(gt_row_nota_fiscal.dm_ind_pres, 0) not in (1, 4)
               then
               --
               vn_fase := 3.6;
               --
               gv_mensagem_log := 'Para NFC-e (modelo 65), o valor do campo "Indicador de presença do comprador" deve ser 1 - Operação presencial ou 4 - NFC-e em operação com entrega em domicílio.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
            if vv_cod_mod = '55'
               and nvl(gt_row_nota_fiscal.dm_ind_pres, 0) = 4
               then
               --
               vn_fase := 3.7;
               --
               gv_mensagem_log := 'Para NF-e (modelo 55), o valor do campo "Indicador de presença do comprador" não pode ser 4 - NFC-e em operação com entrega em domicílio.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      end if;
      --
      /*a regra a seguir nao sera aplicada para DM_FIM_NFE igual a 2 e 4.*/
      if gt_row_nota_fiscal.dm_fin_nfe not in (2,4) then 
        --
        vv_cd_versaowsdl_nfe := pk_csf.fkg_versaowsdl_nfe_estado ( en_estado_id => pk_csf.fkg_Estado_ibge_id ( ev_ibge_estado => gt_row_nota_fiscal.UF_IBGE_EMIT ) );
        -- Geração do campo "dm_fin_nfe" quando o ITEM for devolução
        if vv_cd_versaowsdl_nfe not in ('1.10', '2.00') then
           --
           begin
              --
              select count(1)
                into vn_qtde_devol
                from tipo_operacao tp
                   , cfop c
                   , item_nota_fiscal itnf
               where itnf.notafiscal_id = en_notafiscal_id
                 and itnf.cfop_id = c.id
                 and c.tipooperacao_id = tp.id
                 and tp.cd = 3;
              --
           exception
              when others then
              --
              vn_qtde_devol := 0;
              --
           end;
           --
           if nvl(vn_qtde_devol,0) > 0 then
              --
              update nota_fiscal
                 set dm_fin_nfe = 4
               where id = en_notafiscal_id;
              --
              gt_row_nota_fiscal.dm_fin_nfe := 4;
              --
           end if;
           --
        end if;
        --
      end if;
      --
      -- Geração do campo "dm_ind_final"
      --
      if nvl(gt_row_nota_fiscal.dm_ind_emit,0) = 0 
         and nvl(gt_row_nota_fiscal.dm_ind_final,-1) = -1 then 
         --
         if gt_row_nota_fiscal_dest.cpf is not null then
            --
            vn_dm_ind_final := 1;
            --
         else
            --
            begin
               select nf.dm_id_dest
                 into vn_dm_id_dest
                 from nota_fiscal nf
                where nf.id = en_notafiscal_id;
            exception
               when others then
                  vn_dm_id_dest := null;			   
            end;
            --			
            if trim(gt_row_nota_fiscal_dest.ie) is null then
               vn_dm_ind_final := 1;
            elsif trim(gt_row_nota_fiscal_dest.ie) is not null and gt_row_nota_fiscal_dest.dm_ind_ie_dest = 9  -- DM_IND_IE_DEST (1=Contribuinte ICMS; 2=Contribuinte isento do ICMS; 9=Não Contribuinte)
                  and nvl(vn_dm_id_dest,0) = 2 then  -- DM_ID_DEST (2-Operação Interestadual) 
               vn_dm_ind_final := 1;				  
            else
               vn_dm_ind_final := 0;
            end if;
            --
         end if; 
         --
         update nota_fiscal 
            set dm_ind_final = vn_dm_ind_final
          where id = en_notafiscal_id;
         --
         gt_row_nota_fiscal.dm_ind_final := vn_dm_ind_final;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_nota_fiscal fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_NOTA_FISCAL;

-----------------------------------
-- Procedimento de Troca de CFOP --
-----------------------------------
PROCEDURE PKB_TROCA_CFOP_NF ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                            , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                      number := 0;
   vn_loggenerico_id            log_generico_nf.id%type;
   vt_empresa_param_troca_cfop  empresa_param_troca_cfop%rowtype;
   vb_troca                     boolean;
   vn_cfop_cd                   cfop.cd%type;
   vn_qtde_troca                number;
   vv_texto                     varchar2(255);
   --
   cursor c_nf is
   select inf.id
        , inf.vl_outro
        , inf.cfop_id
     from item_nota_fiscal inf
    where inf.notafiscal_id = en_notafiscal_id
    order by inf.id;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      vn_qtde_troca := 0;
      --
      for rec in c_nf
      loop
         --
         exit when c_nf%notfound or (c_nf%notfound) is null;
         --
         vn_fase := 3;
         --
         begin
            select ep.*
              into vt_empresa_param_troca_cfop
              from empresa_param_troca_cfop ep
             where ep.empresa_id   = gt_row_nota_fiscal.empresa_id
               and ep.cfop_id_orig = rec.cfop_id
               and ep.serie        = gt_row_nota_fiscal.serie
               and ep.modfiscal_id = gt_row_nota_fiscal.modfiscal_id;
         exception
            when others then
               vt_empresa_param_troca_cfop := null;
         end;
         --
         vn_fase := 4;
         --
         if nvl(vt_empresa_param_troca_cfop.id,0) > 0 then
            --
            vn_fase := 4.1;
            -- Acão: 1-Todas; 2-Outras Despenas maior que zero
            if vt_empresa_param_troca_cfop.dm_acao = 1 then
               --
               vn_fase  := 4.2;
               vb_troca := true;
               --
            elsif vt_empresa_param_troca_cfop.dm_acao = 2 then
                  --
                  vn_fase := 4.3;
                  --
                  if nvl(rec.vl_outro,0) > 0 then
                     --
                     vn_fase  := 4.4;
                     vb_troca := true;
                     --
                  else
                     --
                     vn_fase  := 4.5;
                     vb_troca := false;
                     --
                  end if;
                  --
            else
               --
               vn_fase  := 4.6;
               vb_troca := false;
               --
            end if;
            --
            vn_fase := 5;
            --
            if vb_troca then
               --
               vn_fase    := 5.1;
               vn_cfop_cd := pk_csf.fkg_cfop_cd ( en_cfop_id => vt_empresa_param_troca_cfop.cfop_id_dest );
               --
               vn_fase := 5.2;
               --
               update item_nota_fiscal it
                  set it.cfop_id = vt_empresa_param_troca_cfop.cfop_id_dest
                    , it.cfop    = vn_cfop_cd
                where it.id = rec.id;
               --
               vn_fase := 5.3;
               commit;
               --
               vn_fase := 5.4;
               vn_qtde_troca := nvl(vn_qtde_troca,0) + 1;
               --
            end if;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 6;
      --
      if nvl(vn_qtde_troca,0) > 0 then
         --
         vn_fase  := 6.1;
	 vv_texto := 'Valor de Outras Despesas referente a personalização';
         --
	 pkb_monta_compl_infor_adic ( est_log_generico_nf => est_log_generico_nf
                                    , en_notafiscal_id => en_notafiscal_id
                                    , ev_texto_compl   => vv_texto );
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_troca_cfop_nf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_TROCA_CFOP_NF;

--------------------------------------------------------------
-- Procedimento acerta o PESSOA_ID conforme tipo de emissão --
--------------------------------------------------------------
PROCEDURE PKB_ACERTA_PESSOA_NF ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                               , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   -- Verificar se o CPF/CNPJ recuperado com o PESSOA_ID é diferente do informado como Emitente ou Destinatário, se for regulariza o PESSOA_ID
   --
   vn_fase                number := 0;
   vn_loggenerico_id      log_generico_nf.id%type;
   vv_cpf_cnpj            varchar2(14);
   vv_cpf_cnpj_envolvido  varchar2(14);
   vn_pessoa_id           pessoa.id%type;
   vv_cnpj                varchar2(14) := null;
   vv_cpf                 varchar2(11) := null;
   vv_uf_envolvido        estado.sigla_estado%type := null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      vv_cpf_cnpj := pk_csf.fkg_cnpjcpf_pessoa_id( en_pessoa_id => pk_csf.fkg_pessoa_notafiscal_id ( en_notafiscal_id => en_notafiscal_id ) );
      --
      vn_fase := 3;
      --
      if trim(vv_cpf_cnpj) is not null then
         --
         vn_fase := 4;
         --
         vv_cpf_cnpj_envolvido := null;
         vn_pessoa_id := null;
         --
         if gt_row_nota_fiscal.dm_ind_emit = 0 then -- Emissão Própria
            --
            vn_fase := 5;
            --
            vv_cnpj         := gt_row_nota_fiscal_dest.cnpj;
            vv_cpf          := gt_row_nota_fiscal_dest.cpf;
            vv_uf_envolvido := gt_row_nota_fiscal_dest.uf;
            --
            vn_fase := 6;
            --
            if trim(vv_cnpj) is not null then
               --
               vn_fase := 6.1;
               vv_cpf_cnpj_envolvido := trim(vv_cnpj);
               --
            elsif trim(vv_cpf) is not null then
                  --
                  vn_fase := 6.2;
                  vv_cpf_cnpj_envolvido := trim(vv_cpf);
                  --
            end if;
            --
         elsif gt_row_nota_fiscal.dm_ind_emit = 1 then -- Terceiros
               --
               vn_fase := 7;
               --
               vv_cnpj         := gt_row_nota_fiscal_emit.cnpj;
               vv_cpf          := gt_row_nota_fiscal_emit.cpf;
               vv_uf_envolvido := gt_row_nota_fiscal_emit.uf;
               --
               vn_fase := 8;
               --
               if trim(vv_cnpj) is not null then
                  --
                  vn_fase := 8.1;
                  vv_cpf_cnpj_envolvido := trim(vv_cnpj);
                  --
               elsif trim(vv_cpf) is not null then
                     --
                     vn_fase := 8.2;
                     vv_cpf_cnpj_envolvido := trim(vv_cpf);
                     --
               end if;
            --
         end if;
         --
         vn_fase := 9;
         --
         if trim(vv_cpf_cnpj_envolvido) is not null then
            --
            vn_fase := 10;
            --| Se os dados forem diferentes, recupera o PESSOA_ID do CPF/CNPJ do envolvido
            if trim(vv_cpf_cnpj_envolvido) <> trim(vv_cpf_cnpj) then
               --
               vn_fase := 11;
               --
               if vv_uf_envolvido is null then
                  --
                  vn_fase := 12;
                  vn_pessoa_id := pk_csf.fkg_pessoa_id_cpf_cnpj( en_multorg_id => pk_csf.fkg_multorg_id_empresa(en_empresa_id => pk_csf.fkg_busca_empresa_nf(en_notafiscal_id => en_notafiscal_id))
                                                               , en_cpf_cnpj   => vv_cpf_cnpj_envolvido );
                  --
               else
                  vn_fase := 13;
                  vn_pessoa_id := pk_csf.fkg_pessoa_id_cpf_cnpj_uf( en_multorg_id => pk_csf.fkg_multorg_id_empresa(en_empresa_id => pk_csf.fkg_busca_empresa_nf(en_notafiscal_id => en_notafiscal_id))
                                                                  , en_cpf_cnpj   => vv_cpf_cnpj_envolvido
                                                                  , ev_uf         => vv_uf_envolvido );
                  --
               end if;
               --
            end if;
            --
         end if;
         --
         vn_fase := 14;
         --
         if nvl(vn_pessoa_id,0) > 0 then
            --
            vn_fase := 15;
            --
            update nota_fiscal nf
               set nf.pessoa_id = vn_pessoa_id
             where nf.id = en_notafiscal_id;
            --
            vn_fase := 16;
            --
            commit;
            --
         end if;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_acerta_pessoa_nf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_ACERTA_PESSOA_NF;
--
----------------------------------------------------------------------------------
-- Procedimento para gerar a Informações Complementares de Tributos --
----------------------------------------------------------------------------------
PROCEDURE PKB_GERAR_INFO_TRIB ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                              , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE 
                              )
IS
   --
   vn_fase                   number;
   vv_inf_cpl_imp            nota_fiscal.inf_cpl_imp%type;
   vv_inf_cpl_imp_item       item_nota_fiscal.inf_cpl_imp_item%type;
   vn_dm_gera_tot_trib       empresa.dm_gera_tot_trib%type;
   vn_dm_inf_trib_oper_venda empresa.dm_inf_trib_oper_venda%type;
   vn_tipooperacao_cd        tipo_operacao.cd%type := null;
   vv_gera_infor             varchar2(1) := 'N';
   --
   vn_vl_tot_trib_fed        nota_fiscal_total.vl_tot_trib%type;
   vn_vl_tot_trib_est        nota_fiscal_total.vl_tot_trib%type;
   vn_vl_tot_trib_mun        nota_fiscal_total.vl_tot_trib%type;
   vn_vl_icms_deson          nota_fiscal_total.vl_icms_deson%type;

   vn_vl_icms_uf_dest        nota_fiscal_total.vl_icms_uf_dest%type;
   vn_vl_icms_uf_remet       nota_fiscal_total.vl_icms_uf_remet%type;
   vn_vl_comb_pobr_uf_dest   nota_fiscal_total.vl_comb_pobr_uf_dest%type;
   --
   vn_vl_total_fcp           nota_fiscal_total.vl_fcp%type;
   vn_vl_total_fcp_st        nota_fiscal_total.vl_fcp_st%type;
   --
   vn_vl_tot_trib_item_fed  item_nota_fiscal.vl_tot_trib_item%type;
   vn_vl_tot_trib_item_est  item_nota_fiscal.vl_tot_trib_item%type;
   vn_vl_tot_trib_item_mun  item_nota_fiscal.vl_tot_trib_item%type;
   vn_vl_icms_deson_item    imp_itemnf.vl_icms_deson%type;
   --
   vn_vl_vbcfcp             number(15,2);
   vn_vl_pfcp               number(7,4);
   vn_vl_vfcp               number(15,2);
   --
   vn_vl_vbcfcpst           number(15,2);
   vn_vl_pfcpst             number(7,4);
   vn_vl_vfcpst             number(15,2);
   --
   vv_chave_ibpt            valor_aprox_tributo.chave_ibpt%type;
   vv_fonte                 valor_aprox_tributo.fonte%type;
   vv_chave_ibpt_aux        valor_aprox_tributo.chave_ibpt%type;
   vn_fonte_aux             valor_aprox_tributo.fonte%type;
   vn_erro                  number := 0;
   --
   cursor c_inf is
   select nf.id notafiscal_id
        , nf.dm_ind_final
        , nf.dm_ind_emit
        , nf.dm_ind_oper
        , mf.cod_mod
        , nf.dm_legado
        , nf.dm_arm_nfe_terc
        , nf.dm_id_dest
        , nf.dt_emiss
        , inf.id
        , inf.cd_lista_serv
        , inf.cod_ncm
        , nvl(inf.vl_item_bruto,0) - nvl(inf.vl_desc,0) + nvl(inf.vl_frete,0) + nvl(inf.vl_seguro,0) + nvl(inf.vl_desp_adu,0) + nvl(inf.vl_outro,0) vl_liquido
        , inf.cfop
        , inf.cod_ext_ipi cod_ex_tipi-- , et.cod_ex_tipi
        , nfd.uf  uf_empresa      --#73470 --, pk_csf.fkg_uf_notafiscalemit(nf.id) uf_empresa
        , inf.orig  orig_trib_fed --#73353
     from nota_fiscal       nf
        , mod_fiscal        mf
        , nota_fiscal_dest  nfd
        , item_nota_fiscal  inf
        --, item               it
        --, ex_tipi            et
    where nf.id              = en_notafiscal_id
      and nf.dm_ind_emit     = 0
      and nf.dm_arm_nfe_terc = 0
      and mf.id              = nf.modfiscal_id
      and nfd.notafiscal_id  = nf.id
      and inf.notafiscal_id  = nf.id
      --and it.id              = inf.item_id
      --and et.id          (+) = it.extipi_id
    order by inf.nro_item;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      vv_inf_cpl_imp      := null;
      vn_vl_tot_trib_fed  := 0;
      vn_vl_tot_trib_est  := 0;
      vn_vl_tot_trib_mun  := 0;
      vn_vl_icms_deson    := 0;
      --
      vn_fase := 2.1;
      --
      vn_dm_gera_tot_trib := pk_csf.fkg_empresa_gera_tot_trib ( en_empresa_id => gt_row_nota_fiscal.empresa_id );
      --
      vn_fase := 2.2;
      --
      vn_dm_inf_trib_oper_venda := pk_csf.fkg_empresa_inf_trib_op_venda ( en_empresa_id => gt_row_nota_fiscal.empresa_id );
      --
      vn_fase := 3;
      --
      if nvl(vn_dm_gera_tot_trib,0) <> 0 then -- Diferente de "0-não gerar"
         --
         for rec in c_inf loop
            exit when c_inf%notfound or (c_inf%notfound) is null;
            --
            vn_fase := 4;
            --
            vv_inf_cpl_imp_item := null;
            vn_tipooperacao_cd := pk_csf.fkg_cd_tipooper_conf_cfop ( ev_cfop_cd => rec.cfop );
            --
            vv_gera_infor := 'N'; -- Gera Mensagem da Lei de Transparência Fiscal para NFe de modelo 55 para CFOP de Serviços.
            if rec.dm_ind_emit = 0 and -- indicador de emitente como sendo emissão própria
               rec.dm_ind_oper = 1 and -- indicador de operação como sendo saída
               rec.cod_mod = '55' and -- modelo como sendo nfe
               rec.dm_legado = 0 and -- indicador de legado como sendo não legado
               rec.dm_arm_nfe_terc = 0 and -- indicador de armazenamento de terceito como sendo não armazenamento
               rec.cd_lista_serv is not null and -- item da nota fiscal como sendo de serviço, contendo informação no código da lista de serviço
               rec.cfop in (5933, 6933, 7933) then -- considerar somente os CFOPs informado pelo SuporteCanais/Islaine
               --
               begin
                  select 'S'
                    into vv_gera_infor
                    from imp_itemnf   ii
                       , tipo_imposto ti
                   where ii.itemnf_id = rec.id
                     and ti.id        = ii.tipoimp_id
                     and ti.cd        = 6 -- ISS
                     and rownum       = 1; -- basta ter o registro do imposto ISS, mesmo que sem valor tributado ou retido
               exception
                  when others then
                     vv_gera_infor := 'N';
               end;
               --
            end if;
            --
            if (vn_dm_inf_trib_oper_venda = 0) -- Não
               or
               (vn_dm_inf_trib_oper_venda = 1 and vn_tipooperacao_cd = '10') -- Sim, e tipo de operação Vendas
               or
               (vv_gera_infor = 'S') -- Gera Mensagem da Lei de Transparência Fiscal para NFe de modelo 55 para CFOP de Serviços.
               then -- Venda
               --
               vn_fase := 5;
               --
               -- Busca os valores dos Tributos com base na tabela do IBPT
               pkb_busca_vlr_aprox_ibpt(ev_cod_mod        => rec.cod_mod
                                      , ev_uf_empresa     => rec.uf_empresa   --#73470  --pk_csf.fkg_uf_notafiscalemit(rec.notafiscal_id)
                                      --, en_dm_id_dest     => rec.dm_id_dest --#73353
                                      , en_orig_trib_fed  => nvl(rec.orig_trib_fed,0) --#73353
                                      , ev_codigo         => nvl(rec.cd_lista_serv, rec.cod_ncm)
                                      , en_dm_tipo        => case when nvl(rec.cod_ncm, '0') <> '0' then 0 when nvl(rec.cd_lista_serv,0) <> 0 then 2 else 1 end
                                      , ev_ex_tipi        => rec.cod_ex_tipi
                                      , ed_dt_emiss       => rec.dt_emiss
                                      , sn_trib_federal   => vn_vl_tot_trib_item_fed
                                      , sn_trib_estadual  => vn_vl_tot_trib_item_est
                                      , sn_trib_municipal => vn_vl_tot_trib_item_mun
                                      , sv_chave_ibpt     => vv_chave_ibpt_aux
                                      , sn_fonte          => vn_fonte_aux
                                      , sn_erro           => vn_erro);
               --
               -- Calculal o valor do icms desonerado
               if nvl(vn_erro,0) = 0 then
                  -- Calcula o valor do tributo pelo percentual da tabela ibpt
                  vn_vl_tot_trib_item_fed := case when nvl(vn_vl_tot_trib_item_fed,0) > 0 then rec.vl_liquido * (vn_vl_tot_trib_item_fed / 100) else 0 end;
                  vn_vl_tot_trib_item_est := case when nvl(vn_vl_tot_trib_item_est,0) > 0 then rec.vl_liquido * (vn_vl_tot_trib_item_est / 100) else 0 end;
                  vn_vl_tot_trib_item_mun := case when nvl(vn_vl_tot_trib_item_mun,0) > 0 then rec.vl_liquido * (vn_vl_tot_trib_item_mun / 100) else 0 end;
                  --
               begin
                  --
                     select sum( nvl(imp.vl_icms_deson,0) )
                       into  vn_vl_icms_deson_item
                       from imp_itemnf imp
                          , tipo_imposto ti
                      where imp.itemnf_id = rec.id
                        and ti.id         = imp.tipoimp_id;
                     --
                  exception
                     when others then
                        vn_vl_icms_deson_item   := 0;
                  end;
                  --
               else -- Se encontrou erro de cadastro na tabela do IBPT, segue o caminho convencional
                  --
                  begin
                     --
                  select sum( case
                                when ti.cd in (3, 4, 5, 7, 11, 12, 13) then
                                   nvl(imp.vl_imp_trib,0)
                                else 0
                              end ) -- federal
                       , sum( case
                                when ti.cd in (1, 2, 10) then
                                   nvl(imp.vl_imp_trib,0)
                                else 0
                              end ) -- estadual
                       , sum( case
                                when ti.cd in (6) then
                                   nvl(imp.vl_imp_trib,0)
                                else 0
                              end ) -- municipal
                       , sum( nvl(imp.vl_icms_deson,0) )
                    into vn_vl_tot_trib_item_fed
                       , vn_vl_tot_trib_item_est
                       , vn_vl_tot_trib_item_mun
                       , vn_vl_icms_deson_item
                    from imp_itemnf imp
                       , tipo_imposto ti
                   where imp.itemnf_id = rec.id
                     --and imp.dm_tipo   = 0 -- Imposto
                     and ti.id         = imp.tipoimp_id;
                  --
               exception
                  when others then
                     vn_vl_tot_trib_item_fed := 0;
                     vn_vl_tot_trib_item_est := 0;
                     vn_vl_tot_trib_item_mun := 0;
                     vn_vl_icms_deson_item   := 0;
               end;
               --
            end if;
            --
            end if;
            --
            vn_fase := 4.1;
            --
            if nvl(vn_vl_tot_trib_item_fed,0) > 0 then
               vv_inf_cpl_imp_item := vv_inf_cpl_imp_item || case when vv_inf_cpl_imp_item is not null then ' /' else null end || ' Valor dos Tributos Federais do Item: ' || trim(to_char(vn_vl_tot_trib_item_fed, '999g999g999g990d00'));
            end if;
            --
            if nvl(vn_vl_tot_trib_item_est,0) > 0 then
               vv_inf_cpl_imp_item := vv_inf_cpl_imp_item || case when vv_inf_cpl_imp_item is not null then ' /' else null end || ' Valor dos Tributos Estaduais do Item: ' || trim(to_char(vn_vl_tot_trib_item_est, '999g999g999g990d00'));
            end if;
            --
            if nvl(vn_vl_tot_trib_item_mun,0) > 0 then
               vv_inf_cpl_imp_item := vv_inf_cpl_imp_item || case when vv_inf_cpl_imp_item is not null then ' /' else null end || ' Valor dos Tributos Municipais do Item: ' || trim(to_char(vn_vl_tot_trib_item_mun, '999g999g999g990d00'));
            end if;
            --
            if nvl(vn_vl_icms_deson_item,0) > 0 then
               vv_inf_cpl_imp_item := vv_inf_cpl_imp_item || case when vv_inf_cpl_imp_item is not null then ' /' else null end || ' Valor do ICMS Desonerado do Item: ' || trim(to_char(vn_vl_icms_deson_item, '999g999g999g990d00'));
            end if;
            --
            vn_vl_tot_trib_fed  := nvl(vn_vl_tot_trib_fed,0) + nvl(vn_vl_tot_trib_item_fed,0);
            vn_vl_tot_trib_est  := nvl(vn_vl_tot_trib_est,0) + nvl(vn_vl_tot_trib_item_est,0);
            vn_vl_tot_trib_mun  := nvl(vn_vl_tot_trib_mun,0) + nvl(vn_vl_tot_trib_item_mun,0);
            vn_vl_icms_deson    := nvl(vn_vl_icms_deson,0) + nvl(vn_vl_icms_deson_item,0);
            --
            vn_fase := 4.2;
            --
            vn_vl_vBCFCP      := 0;
            vn_vl_pFCP        := 0;
            vn_vl_vFCP        := 0;
            -- ICMS
            begin
               --
               select imp.VL_BC_FCP
                    , imp.ALIQ_FCP
                    , imp.VL_FCP
                 into vn_vl_vBCFCP
                    , vn_vl_pFCP
                    , vn_vl_vFCP
                 from imp_itemnf imp
                    , tipo_imposto ti
                where imp.itemnf_id = rec.id
                  and imp.dm_tipo   = 0 -- Imposto
                  and ti.id         = imp.tipoimp_id
                  and ti.cd = '1'; -- ICMS
               --
            exception
               when others then
                  vn_vl_vBCFCP      := 0;
                  vn_vl_pFCP        := 0;
                  vn_vl_vFCP        := 0;
            end;
            --
            vn_fase := 4.21;
            --
            if nvl(vn_vl_vBCFCP,0) > 0 then
               vv_inf_cpl_imp_item := vv_inf_cpl_imp_item || case when vv_inf_cpl_imp_item is not null then ' /' else null end || ' Valor da Base de Cálculo do FCP: ' || trim(to_char(vn_vl_vBCFCP, '999g999g999g990d00'));
            end if;
            --
            if nvl(vn_vl_pFCP,0) > 0 then
               vv_inf_cpl_imp_item := vv_inf_cpl_imp_item || case when vv_inf_cpl_imp_item is not null then ' /' else null end || ' Percentual do Fundo de Combate à Pobreza (FCP): ' || trim(to_char(vn_vl_pFCP, '990d0000'));
            end if;
            --
            if nvl(vn_vl_vFCP,0) > 0 then
               vv_inf_cpl_imp_item := vv_inf_cpl_imp_item || case when vv_inf_cpl_imp_item is not null then ' /' else null end || ' Valor do Fundo de Combate à Pobreza (FCP): ' || trim(to_char(vn_vl_vFCP, '999g999g999g990d00'));
            end if;
            --
            vn_fase := 4.22;
            --
            vn_vl_vBCFCPST      := 0;
            vn_vl_pFCPST        := 0;
            vn_vl_vFCPST        := 0;
            -- ICMS-ST
            begin
               --
               select imp.VL_BC_FCP
                    , imp.ALIQ_FCP
                    , imp.VL_FCP
                 into vn_vl_vBCFCPST
                    , vn_vl_pFCPST
                    , vn_vl_vFCPST
                 from imp_itemnf imp
                    , tipo_imposto ti
                where imp.itemnf_id = rec.id
                  and imp.dm_tipo   = 0 -- Imposto
                  and ti.id         = imp.tipoimp_id
                  and ti.cd = '2'; -- ICMS-ST
               --
            exception
               when others then
                  vn_vl_vBCFCPST      := 0;
                  vn_vl_pFCPST        := 0;
                  vn_vl_vFCPST        := 0;
            end;
            --
            vn_fase := 4.23;
            --
            if nvl(vn_vl_vBCFCPST,0) > 0 then
               vv_inf_cpl_imp_item := vv_inf_cpl_imp_item || case when vv_inf_cpl_imp_item is not null then ' /' else null end || ' Valor da Base de Cálculo do FCP retido por Substituição Tributária: ' || trim(to_char(vn_vl_vBCFCPST, '999g999g999g990d00'));
            end if;
            --
            if nvl(vn_vl_pFCPST,0) > 0 then
               vv_inf_cpl_imp_item := vv_inf_cpl_imp_item || case when vv_inf_cpl_imp_item is not null then ' /' else null end || ' Percentual do FCP retido por Substituição Tributária: ' || trim(to_char(vn_vl_pFCPST, '990d0000'));
            end if;
            --
            if nvl(vn_vl_vFCPST,0) > 0 then
               vv_inf_cpl_imp_item := vv_inf_cpl_imp_item || case when vv_inf_cpl_imp_item is not null then ' /' else null end || ' Valor do FCP retido por Substituição Tributária: ' || trim(to_char(vn_vl_vFCPST, '999g999g999g990d00'));
            end if;
            --
            vn_fase := 4.3;
            --
            vv_inf_cpl_imp_item := trim(vv_inf_cpl_imp_item);
            if vv_inf_cpl_imp_item is not null then
              -- Sim, calcula o Valor Aproximado dos Tributos por item e total da NFe
              if nvl(vn_dm_gera_tot_trib,0) in (2, 3)
                 --and rec.dm_ind_final in (0, 2, 3, 4, 5, 6, 7) -- Normal
                 and rec.dm_ind_final = 1
                 then
                 --
                 update item_nota_fiscal 
                    set inf_cpl_imp_item = substr(vv_inf_cpl_imp_item,1,500)
                     where id = rec.id;
                 --	
                 end if;					
                    end if;	
                    --					
                 end loop; 				 
                 --	
         vn_fase := 5;
         --
         -- Recupera a chave ibpt e a fonte
         vv_chave_ibpt := nvl(vv_chave_ibpt, vv_chave_ibpt_aux);
         vv_fonte      := nvl(vv_fonte, vn_fonte_aux);
         --
         vn_fase := 5.1;
         --
         if nvl(vn_vl_tot_trib_fed,0) > 0 then
            vv_inf_cpl_imp := vv_inf_cpl_imp || case when vv_inf_cpl_imp is not null then ' /' else null end || ' Valor dos Tributos Federais: ' || trim(to_char(vn_vl_tot_trib_fed, '999g999g999g990d00'));
         end if;
         --
         if nvl(vn_vl_tot_trib_est,0) > 0 then
            vv_inf_cpl_imp := vv_inf_cpl_imp || case when vv_inf_cpl_imp is not null then ' /' else null end || ' Valor dos Tributos Estaduais: ' || trim(to_char(vn_vl_tot_trib_est, '999g999g999g990d00'));
         end if;
         --
         if nvl(vn_vl_tot_trib_mun,0) > 0 then
            vv_inf_cpl_imp := vv_inf_cpl_imp || case when vv_inf_cpl_imp is not null then ' /' else null end || ' Valor dos Tributos Municipais: ' || trim(to_char(vn_vl_tot_trib_mun, '999g999g999g990d00'));
         end if;
         --
         if nvl(vn_vl_icms_deson,0) > 0 then
            vv_inf_cpl_imp := vv_inf_cpl_imp || case when vv_inf_cpl_imp is not null then ' /' else null end || ' Valor do ICMS Desonerado: ' || trim(to_char(vn_vl_icms_deson, '999g999g999g990d00'));
         end if;
         --
         if nvl(vv_chave_ibpt,'0') <> '0' then
            vv_inf_cpl_imp := vv_inf_cpl_imp || ' Fonte IBPT: ' || vv_chave_ibpt;
         end if;
         --
         if nvl(vv_fonte,'0') <> '0' then
            vv_inf_cpl_imp := vv_inf_cpl_imp || ' Fonte: ' || vv_fonte;
         end if;
         --
         --
         vn_fase := 6;
         --
         begin
            --
            select vl_icms_uf_dest
                 , vl_icms_uf_remet
                 , vl_comb_pobr_uf_dest
                 , vl_fcp
                 , vl_fcp_st
              into vn_vl_icms_uf_dest
                 , vn_vl_icms_uf_remet
                 , vn_vl_comb_pobr_uf_dest
                 , vn_vl_total_fcp
                 , vn_vl_total_fcp_st
              from nota_fiscal_total
             where notafiscal_id = en_notafiscal_id;
            --
         exception
            when others then
               vn_vl_icms_uf_dest       := 0;
               vn_vl_icms_uf_remet      := 0;
               vn_vl_comb_pobr_uf_dest  := 0;
               vn_vl_total_fcp          := 0;
               vn_vl_total_fcp_st       := 0;
         end;
         --
         vn_fase := 6.1;
         --
         if nvl(vn_vl_icms_uf_dest,0) > 0 then
            vv_inf_cpl_imp := vv_inf_cpl_imp || case when vv_inf_cpl_imp is not null then ' /' else null end || ' Valor total do ICMS de partilha para a UF do destinatario: ' || trim(to_char(vn_vl_icms_uf_dest, '999g999g999g990d00'));
         end if;
         --
         if nvl(vn_vl_icms_uf_remet,0) > 0 then
            vv_inf_cpl_imp := vv_inf_cpl_imp || case when vv_inf_cpl_imp is not null then ' /' else null end || ' Valor total do ICMS de partilha para a UF do remetente: ' || trim(to_char(vn_vl_icms_uf_remet, '999g999g999g990d00'));
         end if;
         --
         if nvl(vn_vl_comb_pobr_uf_dest,0) > 0 then
            vv_inf_cpl_imp := vv_inf_cpl_imp || case when vv_inf_cpl_imp is not null then ' /' else null end || ' Valor total do ICMS relativo Fundo de Combate a Pobreza (FCP) da UF de destino: ' || trim(to_char(vn_vl_comb_pobr_uf_dest, '999g999g999g990d00'));
         end if;
         --
         if nvl(vn_vl_total_fcp,0) > 0 then
            vv_inf_cpl_imp := vv_inf_cpl_imp || case when vv_inf_cpl_imp is not null then ' /' else null end || ' Valor Total do FCP (Fundo de Combate à Pobreza): ' || trim(to_char(vn_vl_total_fcp, '999g999g999g990d00'));
         end if;
         --
         if nvl(vn_vl_total_fcp_st,0) > 0 then
            vv_inf_cpl_imp := vv_inf_cpl_imp || case when vv_inf_cpl_imp is not null then ' /' else null end || ' Valor Total do FCP (Fundo de Combate à Pobreza) retido por substituição tributária: ' || trim(to_char(vn_vl_total_fcp_st, '999g999g999g990d00'));
         end if;
         --
         vn_fase := 7;
         --
         vv_inf_cpl_imp := trim(vv_inf_cpl_imp);
         --
         if nvl(vn_dm_gera_tot_trib,0) in (1, 3) then
            --
            update nota_fiscal set inf_cpl_imp = vv_inf_cpl_imp
             where id = en_notafiscal_id;
            --
         end if;
         --
         commit;
         --
      end if;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na PKB_GERAR_INFO_TRIB fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_GERAR_INFO_TRIB;
----------------------------------------------------------------------------------
-- Procedimento para buscar o código do CEST                                    --
----------------------------------------------------------------------------------
PROCEDURE PKB_BUSCAR_COD_CEST ( EST_LOG_GENERICO_NF  IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                              , EN_NOTAFISCAL_ID     IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase                 number := null;
   vn_loggenerico_id       log_generico_nf.id%type;
   vv_cod_cest             cest.cd%type;
   vv_dm_ind_esc_rel       item_param_cest.dm_ind_esc_rel%type;
   vv_cnpj_fab_merc        item_param_cest.cnpj_fab_merc%type;
   vn_codocorajicms_id     item_param_cest.codocorajicms_id%type;
   --
   cursor c_inf is
   select inf.id
        , inf.item_id
        , inf.cod_item
        , inf.nro_item
        , nc.id ncm_id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , inf.cfop_id
     from nota_fiscal      nf
        , item_nota_fiscal inf
        , ncm              nc
        , imp_itemnf       ii
        , tipo_imposto     ti
        , cod_st           cst
    where nf.id             = en_notafiscal_id
      and inf.notafiscal_id = nf.id
      and inf.cod_cest     is null
      and nc.cod_ncm (+)    = inf.cod_ncm
      and ii.itemnf_id      = inf.id
      and ti.id             = ii.tipoimp_id
      and ti.cd             = 1 -- ICMS
      and cst.id            = ii.codst_id
      and cst.cod_st in ('10', '30', '60', '70', '90')
    order by inf.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   for rec in c_inf
   loop
      --
      exit when c_inf%notfound or (c_inf%notfound) is null;
      --
      if((nvl(rec.empresa_id,0) > 0) and
         (nvl(rec.cfop_id,0) > 0 or
          nvl(rec.ncm_id,0) > 0 or
          nvl(rec.item_id,0) > 0)) then
         --
         vn_fase := 2;
         --
         vv_cod_cest := null;
         --
         begin
            -- Filtrar o código CEST por empresa_id, cfop_id, ncm_id e item_id
            select ce.cd
                 , ipc.dm_ind_esc_rel
                 , ipc.cnpj_fab_merc
                 , ipc.codocorajicms_id
              into vv_cod_cest
                 , vv_dm_ind_esc_rel
                 , vv_cnpj_fab_merc
                 , vn_codocorajicms_id
              from item_param_cest ipc
                 , cest            ce
             where ipc.cest_id    = ce.id
               and ipc.empresa_id = rec.empresa_id
               and ipc.cfop_id    = rec.cfop_id
               and ipc.ncm_id     = rec.ncm_id
               and ipc.item_id    = rec.item_id;
            --
         exception
            when others then
               vv_cod_cest         := null;
               vv_dm_ind_esc_rel   := null;
               vv_cnpj_fab_merc    := null;
               vn_codocorajicms_id := null;
         end;
         --
         vn_fase := 3;
         --
         if vv_cod_cest is null then
            -- Filtrar o código CEST por empresa_id, cfop_id
            begin
               --
               select ce.cd
                    , ipc.dm_ind_esc_rel
                    , ipc.cnpj_fab_merc
                    , ipc.codocorajicms_id
                 into vv_cod_cest
                    , vv_dm_ind_esc_rel
                    , vv_cnpj_fab_merc
                    , vn_codocorajicms_id
                 from item_param_cest ipc
                    , cest            ce
                where ipc.cest_id    = ce.id
                  and ipc.empresa_id = rec.empresa_id
                  and ipc.cfop_id    = rec.cfop_id;
               --
            exception
               when others then
                  vv_cod_cest         := null;
                  vv_dm_ind_esc_rel   := null;
                  vv_cnpj_fab_merc    := null;
                  vn_codocorajicms_id := null;
            end;
            --
            vn_fase := 4;
            --
            if vv_cod_cest is null then
               -- Filtrar o código CEST por empresa_id, ncm_id
               begin
                  --
                  select ce.cd
                       , ipc.dm_ind_esc_rel
                       , ipc.cnpj_fab_merc
                       , ipc.codocorajicms_id
                    into vv_cod_cest
                       , vv_dm_ind_esc_rel
                       , vv_cnpj_fab_merc
                       , vn_codocorajicms_id
                    from item_param_cest ipc
                       , cest            ce
                   where ipc.cest_id    = ce.id
                     and ipc.empresa_id = rec.empresa_id
                     and ipc.ncm_id     = rec.ncm_id;
                  --
               exception
                  when others then
                     vv_cod_cest         := null;
                     vv_dm_ind_esc_rel   := null;
                     vv_cnpj_fab_merc    := null;
                     vn_codocorajicms_id := null;
               end;
               --
               vn_fase := 5;
               --
               if vv_cod_cest is null then
                  -- Filtrar o código CEST por empresa_id, item_id
                  if nvl(rec.item_id,0) > 0 then
                     --
                     begin
                        --
                        select ce.cd
                             , ipc.dm_ind_esc_rel
                             , ipc.cnpj_fab_merc
                             , ipc.codocorajicms_id
                          into vv_cod_cest
                             , vv_dm_ind_esc_rel
                             , vv_cnpj_fab_merc
                             , vn_codocorajicms_id
                          from item_param_cest ipc
                             , cest            ce
                         where ipc.cest_id    = ce.id
                           and ipc.empresa_id = rec.empresa_id
                           and ipc.item_id    = rec.item_id;
                        --
                     exception
                        when others then
                           vv_cod_cest         := null;
                           vv_dm_ind_esc_rel   := null;
                           vv_cnpj_fab_merc    := null;
                           vn_codocorajicms_id := null;
                     end;
                    --
                  elsif rec.cod_item is not null then
                     -- Filtrar o código CEST por empresa_id, cod_item
                     begin
                        --
                        select ce.cd
                             , ipc.dm_ind_esc_rel
                             , ipc.cnpj_fab_merc
                             , ipc.codocorajicms_id
                          into vv_cod_cest
                             , vv_dm_ind_esc_rel
                             , vv_cnpj_fab_merc
                             , vn_codocorajicms_id
                          from item_param_cest ipc
                             , item            it
                             , cest            ce
                         where it.cod_item    = rec.cod_item
                           and ipc.empresa_id = rec.empresa_id
                           and ipc.cest_id    = ce.id
                           and ipc.item_id    = it.id;
                        --
                     exception
                        when others then
                           vv_cod_cest         := null;
                           vv_dm_ind_esc_rel   := null;
                           vv_cnpj_fab_merc    := null;
                           vn_codocorajicms_id := null;
                     end;
                     --
                  end if;
                  --
               end if;
               --
            end if;
            --
         end if;
         --
         vn_fase := 6;
         --
         if vv_cod_cest is not null then
            -- Atualiza o código CEST na tabela ITEM_NOTA_FISCAL
            update item_nota_fiscal it
               set it.cod_cest         = vv_cod_cest
                 , it.dm_ind_esc_rel   = nvl(it.dm_ind_esc_rel, vv_dm_ind_esc_rel)
                 , it.cnpj_fab_merc    = nvl(it.cnpj_fab_merc, vv_cnpj_fab_merc)
                 , it.codocorajicms_id = nvl(it.codocorajicms_id, vn_codocorajicms_id)
             where it.id = rec.id;
            --
            vn_fase := 7;
            --
            commit;
            --
         else
            --
            gv_mensagem_log := 'Não foi encontrado nenhum código CEST relacionado para o Item da Nota Fiscal: ' || rec.nro_item
                               ||'. Operação com ICMS-ST sem informação do CEST.';
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => informacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            --
         end if;
         --
      end if;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_busca_cod_cest fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_BUSCAR_COD_CEST;
---------------------------------------------------------------------------------------------
-- Procedimento que confere o valor do icms desonerado com o código do motivo da desoneração
---------------------------------------------------------------------------------------------
PROCEDURE PKB_CONFERE_MOTIVO_VLR_DESON ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                       , EN_NOTAFISCAL_ID    IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number;
   vn_loggenerico_id log_generico_nf.id%type;
   --
   cursor c_item is
   select 'Nota fiscal Número '||nf.nro_nf||', Série '||nf.serie||', Data de emissão '||to_char(nf.dt_emiss,'dd/mm/yyyy')||
          ', está utilizando Motivo de Desoneração sem informar Valor de ICMS Desonerado. Código/Item '||it.cod_item||
          ', Motivo da Desoneração '||it.dm_mot_des_icms||'-'||dm.descr||'.' mens_log
     from nota_fiscal      nf
        , item_nota_fiscal it
        , imp_itemnf       ii
        , tipo_imposto     ti
        , dominio          dm
    where nf.id                   = en_notafiscal_id
      and it.notafiscal_id        = nf.id
      and it.dm_mot_des_icms     is not null
      and ii.itemnf_id            = it.id
      and nvl(ii.vl_icms_deson,0) = 0
      and ti.id                   = ii.tipoimp_id
      and ti.cd                   = 1 -- icms
      and dm.dominio              = 'ITEM_NOTA_FISCAL.DM_MOT_DES_ICMS'
      and dm.vl                   = it.dm_mot_des_icms;
   --
BEGIN
   --
   vn_fase := 1;
   --
   for r_item in c_item
   loop
      --
      exit when c_item%notfound or (c_item%notfound is null);
      --
      vn_fase := 2;
      --
      gv_mensagem_log := r_item.mens_log;
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na PKB_CONFERE_MOTIVO_VLR_DESON fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_CONFERE_MOTIVO_VLR_DESON;

--------------------------------------------

-- Procedimento para recuperar e atribuir o número do FCI

PROCEDURE PKB_ATRIBUI_NRO_FCI ( EST_LOG_GENERICO_NF  IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                              , EN_NOTAFISCAL_ID     IN             NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase          number := 0;
   vv_nro_fci       retorno_fci.nro_fci%type := null;
   vn_dm_orig_merc  item.dm_orig_merc%type := null;
   --
   cursor c_item_nf is
   select itnf.id
        , itnf.item_id
        , nf.empresa_id
        , nf.dt_emiss
     from item_nota_fiscal itnf
        , nota_fiscal      nf
        , nota_fiscal_emit nfe
        , nota_fiscal_dest nfd
    where 1 = 1
      and itnf.notafiscal_id = en_notafiscal_id
      --and itnf.orig in (3, 5, 8)
      and trim(itnf.nro_fci) is null
      and nf.id              = itnf.notafiscal_id
      and nf.dm_ind_emit     = 0 -- Emissão Propria
      and nf.dm_arm_nfe_terc = 0
      and nfe.notafiscal_id  = nf.id
      and nfd.notafiscal_id  = nf.id
      and ( nfd.uf <> 'EX' and nfd.uf <> nfe.uf )
    order by itnf.nro_item;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      -- Recupero os itens da nota fiscal
      for rec_item_nf in c_item_nf
      loop
         --
         exit when c_item_nf%notfound or c_item_nf%notfound is null;
         --
         vn_fase := 2.1;
         --
         vv_nro_fci := pk_csf_fci.fkg_nro_fci ( en_empresa_id => rec_item_nf.empresa_id
                                              , ed_data       => rec_item_nf.dt_emiss
                                              , en_item_id    => rec_item_nf.item_id
                                              );
         --
         vn_fase := 3;
         --
         if trim(vv_nro_fci) is not null then
            --
            vn_fase := 4;
            --
            begin
               select dm_orig_merc
                 into vn_dm_orig_merc
                 from item it
                where it.id = rec_item_nf.item_id;
            exception
              when others then
                 vn_dm_orig_merc := null;
            end;
            --
            if vn_dm_orig_merc is null then
               --
               update item_nota_fiscal it
                  set it.nro_fci = trim(vv_nro_fci)
                where it.id = rec_item_nf.id;
               --
            else
               --
               update item_nota_fiscal it
                  set it.nro_fci = trim(vv_nro_fci)
                    , it.orig    = vn_dm_orig_merc
                where it.id = rec_item_nf.id;
               --
            end if;
            --
            commit;
            --
         end if;
         --
      end loop; -- loop de itens da NF
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_ATRIBUI_NRO_FCI fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_ATRIBUI_NRO_FCI;

---------------------------------------------------------------
-- Procedimento que confere os valores de forma de pagamento --
---------------------------------------------------------------
PROCEDURE PKB_CONFERE_NFFORMAPGTO ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                  , EN_NOTAFISCAL_ID    IN     NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase           number;
   vn_loggenerico_id log_generico_nf.id%type;
   --
   cursor c_pgto is
   select np.dm_tp_pag
        , np.dm_tp_integra
        , np.cnpj
        , np.dm_tp_band
        , np.nro_aut
     from nf_forma_pgto np
    where np.notafiscal_id = en_notafiscal_id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      for r_pgto in c_pgto
      loop
         --
         exit when c_pgto%notfound or (c_pgto%notfound is null);
         --
         vn_fase := 3;
         --
         if r_pgto.dm_tp_integra = 1 and -- Pagamento integrado com o sistema de automação da empresa
            r_pgto.dm_tp_pag in ('03', '04') then
            --
            vn_fase := 4;
            --
            if r_pgto.cnpj is null or
               r_pgto.dm_tp_band is null or
               r_pgto.nro_aut is null then
               --
               gv_mensagem_log := 'Para Tipo de Integração sendo "1-Pagamento integrado com o sistema de automação da empresa", e Tipos de pagamento ("03-'||
                                  'Cartão de credito", "04-Cartão de debito"), devem ser informados CNPJ, Tipo de Bandeira e Número de Autorização.';
               --
               vn_loggenerico_id := null;
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia );
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf );
               --
            end if;
            --
         end if;
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na PKB_CONFERE_NFFORMAPGTO fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_CONFERE_NFFORMAPGTO;
----------------------------------------------------------------------------------
-- Procedimento calcula o Valor Aproximado dos Tributos por item e total da NFe --
----------------------------------------------------------------------------------
PROCEDURE PKB_CALC_VL_APROX_TRIB ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                 , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase              number;
   vn_dm_gera_tot_trib  empresa.dm_gera_tot_trib%type;
   vn_empresa_id        empresa.id%type;
   vn_vl_tot_trib_item  item_nota_fiscal.vl_tot_trib_item%type;
   vn_vl_acm_tot_trib   nota_fiscal_total.vl_tot_trib%type;
   --
   cursor c_inf is
   select inf.*
     from nota_fiscal       nf
        , nota_fiscal_dest  nfd
        , item_nota_fiscal  inf
    where nf.id               = en_notafiscal_id
      and nf.dm_ind_emit      = 0
--      and nf.dm_ind_oper      = 1 -- Saída
      and nf.dm_arm_nfe_terc  = 0
      and nfd.notafiscal_id   = nf.id
      and inf.notafiscal_id   = nf.id
    order by inf.nro_item;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      vn_empresa_id := gt_row_nota_fiscal.empresa_id;
      --
      vn_fase := 3;
      --
      vn_dm_gera_tot_trib := pk_csf.fkg_empresa_gera_tot_trib ( en_empresa_id => vn_empresa_id );
      --
      vn_fase := 4;
      --
      if nvl(vn_dm_gera_tot_trib,0) = 1 then -- Sim, calcula o Valor Aproximado dos Tributos por item e total da NFe
         --
         vn_fase := 5;
         --
         for rec in c_inf
         loop
            --
            exit when c_inf%notfound or (c_inf%notfound) is null;
            --
            vn_fase := 6;
            --
            vn_vl_tot_trib_item := 0;
            -- soma os valores de impostos
            begin
               select sum(ii.vl_imp_trib)
                 into vn_vl_tot_trib_item
                 from imp_Itemnf ii
                where ii.itemnf_id = rec.id
                  and ii.dm_tipo   = 0; -- imposto
            exception
               when others then
                  vn_vl_tot_trib_item := 0;
            end;
            --
            vn_fase := 7;
            --
            if nvl(vn_vl_tot_trib_item,0) > 0 then
               --
               vn_fase := 8;
               --
               update item_nota_fiscal it
                  set it.vl_tot_trib_item = vn_vl_tot_trib_item
                where it.id = rec.id;
               --
            end if;
            --
         end loop;
         --
         vn_fase := 10;
         -- Atualiza valor no total da NFe
         vn_vl_acm_tot_trib := 0;
         --
         select nvl(sum(nvl(it.vl_tot_trib_item,0)),0)
           into vn_vl_acm_tot_trib
           from item_nota_fiscal it
          where it.notafiscal_id = en_notafiscal_id;
         --
         vn_fase := 11;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
         pk_csf_api.gv_objeto := 'pk_csf_api.PKB_CALC_VL_APROX_TRIB';
         pk_csf_api.gn_fase   := vn_fase;
         --
         update nota_fiscal_total nt
            set nt.vl_tot_trib = vn_vl_acm_tot_trib
          where nt.notafiscal_id = en_notafiscal_id;
         --
         -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
         pk_csf_api.gv_objeto := 'pk_csf_api';
         pk_csf_api.gn_fase   := null;
         --
         vn_fase := 12;
         --
         --
      end if;
      --
   end if;
   --
   commit;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_calc_vl_aprox_trib fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_CALC_VL_APROX_TRIB;
--
------------------------------------------------------------------
-- Procedimento valida informações de Cupom Fiscal Referenciado --
------------------------------------------------------------------
PROCEDURE PKB_VALIDA_CUPOM_FISCAL_REF ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                      , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number;
   vn_loggenerico_id  log_generico_nf.id%type;
   --
   cursor c_ecf_dup is
   select mf.cod_mod
        , cfr.ecf_fab
        , cfr.ecf_cx
        , cfr.num_doc
        , count(1) qtde
     from cupom_fiscal_ref cfr
        , mod_fiscal       mf
    where cfr.notafiscal_id = en_notafiscal_id
      and mf.id             = cfr.modfsical_id
    group by mf.cod_mod
        , cfr.ecf_fab
        , cfr.ecf_cx
        , cfr.num_doc
   having count(1) > 1;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vn_fase := 2;
      --
      for rec in c_ecf_dup
      loop
         --
         exit when c_ecf_dup%notfound or (c_ecf_dup%notfound) is null;
         --
         vn_fase := 3;
         --
         if nvl(rec.qtde,0) > 0 then
            --
            gv_mensagem_log := 'Duplicidade de Cupom Fiscal referenciado (Modelo = '||rec.cod_mod||', ECF Fabricação = '||rec.ecf_fab||', Número de Ordem = '||
                               rec.num_doc||' e COO = '||rec.ecf_cx||').';
            --
            vn_loggenerico_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_valida_cupom_fiscal_ref fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_VALIDA_CUPOM_FISCAL_REF;

------------------------------------------------------------------
-- Procedimento define se gera ou não o XML do WS Sinal Suframa --
------------------------------------------------------------------
PROCEDURE PKB_DEFINE_WSSINAL_SUFRAMA ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                     , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE
                                     )
IS
   --
   vn_fase            number;
   vn_loggenerico_id  log_generico_nf.id%type;
   --
   vn_dm_gera_sinal_suframa  param_cfop_empresa.dm_gera_sinal_suframa%type;
   --
   cursor c_inf is
   select * from item_nota_fiscal
    where notafiscal_id = EN_NOTAFISCAL_ID
    order by 1;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(EN_NOTAFISCAL_ID,0) > 0
      and trim(gt_row_nota_fiscal_dest.suframa) is not null
      then
      --
      vn_fase := 2;
      --
      for rec in c_inf loop
         exit when c_inf%notfound or (c_inf%notfound) is null;
         --
         vn_fase := 2.1;
         --
         vn_dm_gera_sinal_suframa := pk_csf.fkg_cfop_gerar_sinal_suframa ( en_empresa_id => gt_row_nota_fiscal.empresa_id
                                                                         , en_cfop_id    => rec.cfop_id
                                                                         );
         --
         if nvl(vn_dm_gera_sinal_suframa,0) = 0 then
            --
            vn_fase := 2.2;
            --
            update nota_fiscal set DM_ST_WSSINAL_SUFRAMA = 1
             where id = rec.notafiscal_id;
            --
            commit;
            --
         end if;
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_DEFINE_WSSINAL_SUFRAMA fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_DEFINE_WSSINAL_SUFRAMA;

-----------------------------------------------------------------------------------
-- Procedimento define o CNPJ ou CPF do contador responsável pela empresa da NFe --
-----------------------------------------------------------------------------------
procedure pkb_define_cpf_cnpj_cont ( est_log_generico_nf in out nocopy dbms_sql.number_table
                                   , en_notafiscal_id in            nota_fiscal.id%type
                                   )
is
   --
   vn_fase            number;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_existe_nax      number(1) := 0;
   vv_cpf_ou_cnpj     varchar2(14);
   vv_cpf             varchar2(11);
   vv_cnpj            varchar2(14);
   --
   cursor c_contador is
      select p2.id pessoa_id
        from nota_fiscal nf
           , empresa e
           , contador_empresa ce
           , contador c
           , pessoa p1
           , pessoa p2
           , cidade cid
           , estado est
       where nf.id = en_notafiscal_id
         and nf.empresa_id = e.id
         and e.pessoa_id = p1.id
         and p1.cidade_id = cid.id
         and cid.estado_id = est.id
         and est.sigla_estado = 'BA'
         and e.id = ce.empresa_id
         and ce.dm_situacao = 1
         and ((trunc(sysdate) between dt_ini and dt_fin)
             or (dt_ini is null and dt_fin is null)
             or (dt_ini is null and dt_fin is not null and trunc(sysdate) <= dt_fin)
             or (dt_fin is null and dt_ini is not null and trunc(sysdate) >= dt_ini))
         and ce.contador_id = c.id
         and c.pessoa_id = p2.id;
   --
begin
   --
   vn_fase := 1;
   --
   begin
      select 1
        into vn_existe_nax
        from nf_aut_xml nax
       where nax.notafiscal_id = en_notafiscal_id;
   exception
      when too_many_rows then
         vn_existe_nax := 1;
      when others then
         vn_existe_nax := 0;
   end;
   --
   vn_fase := 2;
   --
   if nvl(vn_existe_nax,0) = 0 then
      --
      vn_fase := 3;
      --
      for rec in c_contador loop
         exit when c_contador%notfound or (c_contador%notfound) is null;
         --
         vn_fase := 4;
         --
         vv_cpf_ou_cnpj := pk_csf.fkg_cnpjcpf_pessoa_id ( en_pessoa_id => rec.pessoa_id );
         --
         vn_fase := 5;
         --
         if length(vv_cpf_ou_cnpj) = 14 then
            vv_cnpj := vv_cpf_ou_cnpj;
            vv_cpf := null;
         else
            vv_cnpj := null;
            vv_cpf := vv_cpf_ou_cnpj;
         end if;
         --
         vn_fase := 6;
         --
         begin
            select 1
              into vn_existe_nax
              from nf_aut_xml na
             where na.notafiscal_id = en_notafiscal_id
               and nvl(na.cnpj,' ') = nvl(vv_cnpj,' ')
               and nvl(na.cpf,' ')  = nvl(vv_cpf,' ');
         exception
            when too_many_rows then
               vn_existe_nax := 1;
            when others then
               vn_existe_nax := 0;
         end;
         --
         vn_fase := 7;
         --
         if nvl(vn_existe_nax,0) = 0 then
            --
            vn_fase := 8;
            --
            insert into nf_aut_xml ( id
                                   , notafiscal_id
                                   , cnpj
                                   , cpf
                                   )
                            values ( nfautxml_seq.nextval -- id
                                   , en_notafiscal_id -- notafiscal_id
                                   , vv_cnpj -- cnpj
                                   , vv_cpf -- cpf
                                   );
            --
         end if;
         --
      end loop;
      --
      vn_fase := 9;
      --
      commit;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_define_cpf_cnpj_cont fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
end pkb_define_cpf_cnpj_cont;

-------------------------------------------------------------------------------------------------------

-- Prodimento de recuperar o parametro de partilha de icms da empresa
procedure pkb_recup_param_part_icms_empr ( en_notafiscal_id             in nota_fiscal.id%type
                                         , en_empresa_id                in empresa.id%type
                                         , ed_dt_emiss                  in nota_fiscal.dt_emiss%type
                                         , en_estado_id_orig            in estado.id%type
                                         , en_estado_id_dest            in estado.id%type
                                         --| Item   
                                         , en_orig                      in param_icms_inter_cf.orig%type										 
                                         , en_item_id                   in item.id%type
                                         , en_ncm_id                    in ncm.id%type
                                         , en_cfop_id                   in cfop.id%type
                                         , st_row_param_icms_inter_cf   out param_icms_inter_cf%rowtype
                                         )
is
   --
   vn_fase                      number;
   vn_loggenericocalcfiscal_id  log_generico_calcfiscal.id%type;
   vv_mensagem_log              log_generico_calcfiscal.mensagem%type;
   --
   vn_qtde_item  number;
   vn_qtde_ncm   number;
   vn_qtde_cfop  number;
   vn_qtde_orig  number;
   vv_cod_ncm    ncm.cod_ncm%type;   
   vn_ncm_id     ncm.id%type;
   --
   cursor c_dados is
   select distinct p.empresa_id, p.estado_id, p.dt_ini, p.dt_fin
     from param_icms_inter_cf p
    where p.empresa_id = en_empresa_id
      and p.estado_id = en_estado_id_dest
      and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
    order by 1, 2, 3, 4;
   --
    procedure pkb_recup_param_cfop ( enc_orig                      in param_icms_inter_cf.orig%type
                                   , enc_item_id                   in item.id%type
                                   , enc_ncm_id                    in ncm.id%type
                                   , enc_cfop_id                   in cfop.id%type
                                   )
   is
      --
      cursor c_cfop is
      select p.*
        from param_icms_inter_cf p
       where p.empresa_id      = en_empresa_id
         and p.estado_id       = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and nvl(p.cfop_id,0)  = nvl(enc_cfop_id,0)
         and nvl(p.ncm_id,0)   = nvl(enc_ncm_id,0)
         and nvl(p.item_id,0)  = nvl(enc_item_id,0)
         and nvl(p.orig,-1)    = nvl(enc_orig,-1)	
       order by 1, 2, 3, 4, 5, 6, 7, 8;
      --
   begin
      --
      vn_fase := 4;
      --
      for rec in c_cfop loop
         exit when c_cfop%notfound or (c_cfop%notfound) is null;
         --
         vn_fase := 4.1;
         -- Faz busca pelo CFOP
         st_row_param_icms_inter_cf := rec;
         --
         if nvl(st_row_param_icms_inter_cf.id,0) > 0 then
            --
            exit;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 4.2;
      --
      if nvl(st_row_param_icms_inter_cf.id,0) <= 0
         and ( en_cfop_id is not null and nvl(vn_qtde_cfop,0) > 0 )
         then
         --
         vn_qtde_cfop := 0;
         -- Aplica a recursividade para achar com o CFOP nulo
         pkb_recup_param_cfop ( enc_orig                      => enc_orig
                              , enc_item_id                   => enc_item_id
                              , enc_ncm_id                    => enc_ncm_id
                              , enc_cfop_id                   => null
                              );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_cfop fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id  => vn_loggenericocalcfiscal_id
                             , ev_mensagem                  => vv_mensagem_log
                             , ev_resumo                    => vv_mensagem_log
                             , en_tipo_log                  => erro_de_sistema
                             , en_referencia_id             => en_notafiscal_id
                             , ev_obj_referencia            => 'NOTA_FISCAL'
                             , en_empresa_id                => en_empresa_id
                             );
         --
   end pkb_recup_param_cfop;    
   --
   procedure pkb_recup_param_ncm ( enc_orig                      in param_icms_inter_cf.orig%type
                                 , enc_item_id                   in item.id%type
                                 , enc_ncm_id                    in ncm.id%type
                                 )
   is
      --
      cursor c_ncm is
      select distinct p.orig, p.item_id, p.ncm_id
        from param_icms_inter_cf p
       where p.empresa_id      = en_empresa_id
         and p.estado_id       = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and nvl(p.ncm_id,0)   = nvl(enc_ncm_id,0)
         and nvl(p.item_id,0)  = nvl(enc_item_id,0)
         and nvl(p.orig,-1)    = nvl(enc_orig,-1)		 
       order by 1, 2, 3;
      --
   begin
      --
      vn_fase := 3;
      --
      for rec in c_ncm loop
         exit when c_ncm%notfound or (c_ncm%notfound) is null;
         --
         vn_fase := 3.1;
         -- Faz busca pelo CFOP
         vn_qtde_cfop := 1;
         --
         pkb_recup_param_cfop ( enc_orig                      => rec.orig
                              , enc_item_id                   => rec.item_id
                              , enc_ncm_id                    => rec.ncm_id
                              , enc_cfop_id                   => en_cfop_id
                              );
         --
         if nvl(st_row_param_icms_inter_cf.id,0) > 0 then
            exit;
         end if;
         --
      end loop;
      --
      vn_fase := 3.2;
      --
      if nvl(st_row_param_icms_inter_cf.id,0) <= 0
         and ( vn_ncm_id is not null and nvl(vn_qtde_ncm,0) > 0 )	     
--         and ( enc_ncm_id is not null and nvl(vn_qtde_ncm,0) > 0 )
         then
         --
--         vn_ncm_id := pk_csf.fkg_ncm_id_superior ( ev_cod_ncm => pk_csf.fkg_cod_ncm_id ( en_ncm_id => enc_ncm_id ) );
         --
--         if nvl(vn_ncm_id,0) <= 0 then
            vn_qtde_ncm := 0;
--         end if;
         --
         -- Aplica a recursividade para achar com o NCM nulo
         pkb_recup_param_ncm ( enc_orig                      => enc_orig
                             , enc_item_id                   => enc_item_id
                             , enc_ncm_id                    => null --vn_ncm_id
                             );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_ncm fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id  => vn_loggenericocalcfiscal_id
                             , ev_mensagem                  => vv_mensagem_log
                             , ev_resumo                    => vv_mensagem_log
                             , en_tipo_log                  => erro_de_sistema
                             , en_referencia_id             => en_notafiscal_id
                             , ev_obj_referencia            => 'NOTA_FISCAL'
                             , en_empresa_id                => en_empresa_id
                             );
         --
   end pkb_recup_param_ncm;    
   --
   procedure pkb_recup_param_item ( enc_orig                      in param_icms_inter_cf.orig%type
                                  , enc_item_id                   in item.id%type )
   is
      --
      cursor c_item is
      select distinct p.orig, p.item_id
        from param_icms_inter_cf p
       where p.empresa_id      = en_empresa_id
         and p.estado_id       = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and nvl(p.item_id,0)  = nvl(enc_item_id,0)
         and nvl(p.orig,-1)    = nvl(enc_orig,-1)		 
       order by 1, 2;
      --
   begin
      --
      vn_fase := 2;
      --
      for rec in c_item loop
         exit when c_item%notfound or (c_item%notfound) is null;
         --
         vn_fase := 2.1;
         -- Faz busca pelo NCM
         vn_qtde_ncm := 1;
         --
         pkb_recup_param_ncm ( enc_orig                      => rec.orig
                             , enc_item_id                   => rec.item_id
                             , enc_ncm_id                    => vn_ncm_id --en_ncm_id
                             );
         --
         if nvl(st_row_param_icms_inter_cf.id,0) > 0 then
            exit;
         end if;
         --
      end loop;
      --
      vn_fase := 2.2;
      --
      if nvl(st_row_param_icms_inter_cf.id,0) <= 0
         and ( en_item_id is not null and nvl(vn_qtde_item,0) > 0 )
         then
         --
         vn_qtde_item := 0;
         -- Aplica a recursividade para achar com o ITEM nulo
         pkb_recup_param_item ( enc_orig    => enc_orig
                              , enc_item_id => null );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_item fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id  => vn_loggenericocalcfiscal_id
                             , ev_mensagem                  => vv_mensagem_log
                             , ev_resumo                    => vv_mensagem_log
                             , en_tipo_log                  => erro_de_sistema
                             , en_referencia_id             => en_notafiscal_id
                             , ev_obj_referencia            => 'NOTA_FISCAL'
                             , en_empresa_id                => en_empresa_id
                             );
         --
   end pkb_recup_param_item;
   --
   procedure pkb_recup_param_orig ( enc_orig                      in param_icms_inter_cf.orig%type )
   is
      --
      cursor c_orig is
      select distinct p.empresa_id, p.estado_id, p.dt_ini, p.dt_fin, p.orig
        from param_icms_inter_cf p
       where p.empresa_id      = en_empresa_id
         and p.estado_id       = en_estado_id_dest
         and ed_dt_emiss between p.dt_ini and nvl(p.dt_fin, ed_dt_emiss)
         and nvl(p.orig,-1)    = nvl(enc_orig,-1)
       order by 1, 2, 3, 4, 5;
      --
   begin
      --
      vn_fase := 2;
      --
      for rec in c_orig loop
         exit when c_orig%notfound or (c_orig%notfound) is null;
         --
         vn_fase := 2.1;
         -- Faz busca pelo ITEM
         vn_qtde_item := 1;
         --
         pkb_recup_param_item ( enc_orig                     => rec.orig
                              , enc_item_id                  => en_item_id
                              );
         --
         if nvl(st_row_param_icms_inter_cf.id,0) > 0 then
            exit;
         end if;
         --
      end loop;
      --
      vn_fase := 2.2;
      --
      if nvl(st_row_param_icms_inter_cf.id,0) <= 0
         and ( en_orig is not null and nvl(vn_qtde_orig,0) > 0 )
         then
         --
         vn_qtde_orig := 0;
         -- Aplica a recursividade para achar com ORIG nulo
         pkb_recup_param_orig ( enc_orig => null );
         --
      end if;
      --
   exception
      when others then
         --
         vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_orig fase(' || vn_fase || '): ' || sqlerrm;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id  => vn_loggenericocalcfiscal_id
                             , ev_mensagem                  => vv_mensagem_log
                             , ev_resumo                    => vv_mensagem_log
                             , en_tipo_log                  => erro_de_sistema
                             , en_referencia_id             => en_notafiscal_id
                             , ev_obj_referencia            => 'NOTA_FISCAL'
                             , en_empresa_id                => en_empresa_id
                             );
         --
   end pkb_recup_param_orig;
   
   --   
begin
   --
   vn_fase := 1;
   --
   vn_ncm_id  := en_ncm_id;
   vv_cod_ncm := null;   
   vv_cod_ncm := pk_csf.fkg_cod_ncm_id ( en_ncm_id => en_ncm_id );
   --
   vn_fase := 1.1;
   --   
   if vv_cod_ncm is null then   
      vn_ncm_id := pk_csf.fkg_ncm_id_superior ( ev_cod_ncm => pk_csf.fkg_cod_ncm_id ( en_ncm_id => en_ncm_id ) );   
   end if;	  
   --
   vn_fase := 1.2;
   --
   st_row_param_icms_inter_cf := null;
   --
   for rec in c_dados loop
      exit when c_dados%notfound or (c_dados%notfound) is null;
      --
      vn_fase := 1.3;
      -- Faz a busca por ORIG
      vn_qtde_orig := 1;
      --
      pkb_recup_param_orig ( enc_orig => en_orig );
      --
      vn_fase := 1.4;
      --
      if nvl(st_row_param_icms_inter_cf.id,0) > 0 then
         exit;
      end if;
      --
   end loop;
   -- 
exception
   when others then
      --
      vv_mensagem_log := 'Erro na pk_csf_api_calc_fiscal.pkb_recup_param_part_icms_empr fase(' || vn_fase || '): '||sqlerrm;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id  => vn_loggenericocalcfiscal_id
                          , ev_mensagem                  => vv_mensagem_log
                          , ev_resumo                    => vv_mensagem_log
                          , en_tipo_log                  => erro_de_sistema
                          , en_referencia_id             => en_notafiscal_id
                          , ev_obj_referencia            => 'NOTA_FISCAL'
                          , en_empresa_id                => en_empresa_id
                          );
      --
end pkb_recup_param_part_icms_empr;

-----------------------------------------------------------------------------------
-- Procedimento Cálcula o ICMS em Operações Interestaduais de Vendas a Consumidor Final --
-----------------------------------------------------------------------------------
PROCEDURE PKB_CALC_ICMS_INTER_CF ( EST_LOG_GENERICO_NF  IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                                 , EN_NOTAFISCAL_ID     IN            NOTA_FISCAL.ID%TYPE
                                 )
IS
   --
   vn_fase                   number := 0;
   i                         pls_integer;
   vn_loggenerico_id         log_generico_nf.id%type;
   vn_dm_nf_calc_icms        empresa.dm_nf_calc_icms%type;
   vn_estado_id              estado.id%type;
   vn_ncm_id                 ncm.id%type;
   vv_valortipoparam_cd      valor_tipo_param.cd%type := null;
   vn_considera_tp_oper      number(1) := 0; 
   --   
   vn_dm_param_icms_inter_cf PARAM_ICMS_INTER_CF.SOMA_IPI_BC_DIFAL%type;
   --
   vt_imp_itemnf_icms_dest  imp_itemnf_icms_dest%rowtype;
   --
   vt_param_icms_inter_cf param_icms_inter_cf%rowtype;
   vn_vl_imp_trib            imp_itemnf.vl_imp_trib%type;   
   vn_vl_imp_trib2           imp_itemnf.vl_imp_trib%type;
   --
   vn_vl_base_calc_icms      nota_fiscal_total.vl_base_calc_icms%type;
   vn_vl_icms_uf_dest        nota_fiscal_total.vl_icms_uf_dest%type;
   vn_vl_icms_uf_remet       nota_fiscal_total.vl_icms_uf_remet%type;
   vn_vl_comb_pobr_uf_dest   nota_fiscal_total.vl_comb_pobr_uf_dest%type;
   --
   sv_vlr_param              PARAM_GERAL_SISTEMA.VLR_PARAM%type;
   --
   cursor c_nf is
   select nf.id notafiscal_id
        , nf.empresa_id
        , nf.dt_emiss
        , nf.dm_ind_final
        , nf.pessoa_id
        , nfd.uf uf_dest
     from nota_fiscal nf
        , nota_fiscal_dest nfd
    where nf.id              = en_notafiscal_id
      and nf.dm_ind_emit     = 0
      and nf.dm_arm_nfe_terc = 0
      and nfd.notafiscal_id  = nf.id
      and nfd.dm_ind_ie_dest <> 1; -- Não é 1-Contribuinte ICMS (informar a IE do destinatário)
   --
   cursor c_itemnf (enc_notafiscal_id in nota_fiscal.id%type) is
   select inf.id itemnf_id
        , inf.item_id
        , inf.cod_item
        , inf.descr_item
        , inf.cod_ncm
        , inf.cfop_id
        , inf.cfop
        , inf.qtde_comerc
        , inf.vl_item_bruto
        , inf.vl_frete
        , inf.vl_seguro
        , inf.vl_outro
        , inf.vl_desc
        , inf.orig
        , imp.vl_base_calc
        , imp.aliq_apli
        , imp.id impitemnf_id
        , imp.vl_imp_trib
        , imp.perc_reduc
        , imp.tipoimp_id
     from item_nota_fiscal   inf
        , imp_itemnf         imp
        , tipo_imposto       ti
        , cod_st             cst
    where inf.notafiscal_id  = enc_notafiscal_id
      and substr(inf.cfop,1,1) in ('2', '6')
      and imp.itemnf_id      = inf.id
      and imp.dm_tipo        = 0 -- Imposto
      and nvl(imp.vl_imp_trib,0) > 0
      and ti.id              = imp.tipoimp_id
      and ti.cd              = 1 -- ICMS
      and cst.id             = imp.codst_id
    order by inf.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0
      then
      --
      vn_fase := 2;
      --
      for rec_nf in c_nf loop
         exit when c_nf%notfound or (c_nf%notfound) is null;
         --
         vn_fase := 3;
         vn_dm_nf_calc_icms := pk_csf.fkg_dm_nf_calc_icms_empresa ( en_empresa_id => rec_nf.empresa_id );
         --
         vn_fase := 4;
         --
         vv_valortipoparam_cd := pk_csf.fkg_pessoa_valortipoparam_cd ( ev_tipoparam_cd => '5' -- Contribuinte de ICMS
                                                                     , en_pessoa_id    => rec_nf.pessoa_id
                                                                     );
         --
         if trim(vv_valortipoparam_cd) is null then
            vv_valortipoparam_cd := '0';
         end if;
         --
         if nvl(vn_dm_nf_calc_icms,0) = 1
            and ( rec_nf.dm_ind_final = 1 )
            then
            --
            vn_fase := 5;
            --
            vn_estado_id := pk_csf.fkg_Estado_id ( ev_sigla_estado => rec_nf.uf_dest );
            --
            vn_fase := 5.1;
            --
            for rec_itemnf in c_itemnf(rec_nf.notafiscal_id) loop
               exit when c_itemnf%notfound or (c_itemnf%notfound) is null;
               --
               vn_fase := 6;
               --
               vn_ncm_id := pk_csf.fkg_Ncm_id ( ev_cod_ncm => rec_itemnf.cod_ncm );
               --
               vn_fase := 6.1;
               --
               begin
                  --
                  select 1
                    into vn_considera_tp_oper
                    from cfop cf
                   where cf.id = rec_itemnf.cfop_id
                     and cf.tipooperacao_id in (3,10); -- 3-Devolução / 10-Vendas 
                  --					 
               exception
                  when others then
                    vn_considera_tp_oper := null;
               end;					
               --
               vt_param_icms_inter_cf := null;
               --
               -- REcupera o Parâmetro do para Item da Nota Fiscal
               pkb_recup_param_part_icms_empr ( en_notafiscal_id             => rec_nf.notafiscal_id
                                              , en_empresa_id                => rec_nf.empresa_id
                                              , ed_dt_emiss                  => rec_nf.dt_emiss
                                              , en_estado_id_orig            => vn_estado_id
                                              , en_estado_id_dest            => vn_estado_id
                                              --| Item
                                              , en_orig                      => rec_itemnf.orig
                                              , en_item_id                   => rec_itemnf.item_id
                                              , en_ncm_id                    => vn_ncm_id
                                              , en_cfop_id                   => rec_itemnf.cfop_id
                                              , st_row_param_icms_inter_cf   => vt_param_icms_inter_cf
                                              );
               --
               vn_fase := 7;
               --| Calcula os dados
               if nvl(vt_param_icms_inter_cf.id,0) > 0 and
                  nvl(vn_considera_tp_oper, 0) = 1 then -- Considera tipos de operação - 3-Devolução / 10-Vendas			   
                 --
                 vn_fase := 7.1;
                 --
                 delete from imp_itemnf_icms_dest
                  where impitemnf_id = rec_itemnf.impitemnf_id;
                 --
                  vn_fase := 7.2;
                 --
                 select impitemnficmsdest_seq.nextval
                   into vt_imp_itemnf_icms_dest.id
                   from dual;
                 --
                 vt_imp_itemnf_icms_dest.IMPITEMNF_ID            := rec_itemnf.impitemnf_id;
                 --
                 if nvl(rec_itemnf.vl_base_calc,0) <= 0 then
                    vt_imp_itemnf_icms_dest.VL_BC_UF_DEST           := nvl(rec_itemnf.vl_item_bruto,0) - nvl(rec_itemnf.vl_desc,0);
                 else
                    vt_imp_itemnf_icms_dest.VL_BC_UF_DEST           := nvl(rec_itemnf.vl_base_calc,0);
                 end if;
				 --
                 vt_imp_itemnf_icms_dest.PERC_ICMS_UF_DEST       := vt_param_icms_inter_cf.PERC_ICMS_UF_DES;
                 --
                 if nvl(rec_itemnf.aliq_apli,0) <= 0 then
                 --if nvl(vt_param_icms_inter_cf.PERC_ICMS_INTER,0) > 0 then
                    vt_imp_itemnf_icms_dest.PERC_ICMS_INTER         := nvl(vt_param_icms_inter_cf.PERC_ICMS_INTER,0);
                 else
                    vt_imp_itemnf_icms_dest.PERC_ICMS_INTER         := nvl(rec_itemnf.aliq_apli,0);
                 end if;
                 --
                 vt_imp_itemnf_icms_dest.PERC_ICMS_INTER_PART    := vt_param_icms_inter_cf.PERC_ICMS_INTER_PART;
                 --
                 vn_fase := 7.3;
                 --
                 -- ini armando/allan
                 
                 -- == Verifica se existe percentual de redução de ICMS Interestadual (Fora do Estado)	====================
                 vt_imp_itemnf_icms_dest.PER_RED_BC_ICMS_INTERESTADUAL := null;
                 --		
                 vn_dm_param_icms_inter_cf  := fkg_emp_calcula_icms_difal ( en_empresa_id                => rec_nf.empresa_id
                                                                          , ed_dt_emiss                  => rec_nf.dt_emiss
                                                                         -- , en_estado_id_orig            => vn_estado_id
                                                                          , en_estado_id_dest            => vn_estado_id
                                                                          --| Item
                                                                          , en_orig                      => rec_itemnf.orig
                                                                          , en_item_id                   => rec_itemnf.item_id
                                                                          , en_ncm_id                    => vn_ncm_id
                                                                          , en_cfop_id                   => rec_itemnf.cfop_id
                                                                          );
                 if vn_dm_param_icms_inter_cf = 1
                   then
                         begin
                        --   
                      select  imp.vl_imp_trib 
                        into vn_vl_imp_trib
                         from item_nota_fiscal   inf
                            , imp_itemnf         imp
                            , tipo_imposto       ti
                            , cod_st             cst
                         where inf.notafiscal_id  = rec_nf.notafiscal_id
                          and inf.id        = rec_itemnf.itemnf_id
                          and substr(inf.cfop,1,1) in ('2', '6')
                          and imp.itemnf_id      = inf.id
                          and imp.dm_tipo        = 0 -- Imposto
                          and nvl(imp.vl_imp_trib,0) > 0
                          and ti.id              = imp.tipoimp_id
                          and ti.cd              = 3 -- IPI
                          and cst.id             = imp.codst_id
                        order by inf.id;
                        exception
                       when others then
                          vn_vl_imp_trib        := 0;
                      end;
                      --
                      vt_imp_itemnf_icms_dest.VL_BC_UF_DEST  := nvl(vn_vl_imp_trib,0) + rec_itemnf.vl_item_bruto;
                 end if;   
                 --fim armando/allan
                 --		 
                 vt_imp_itemnf_icms_dest.VL_ICMS_UF_REMET    := (nvl(vt_imp_itemnf_icms_dest.VL_BC_UF_DEST,0) * ((vt_param_icms_inter_cf.PERC_ICMS_UF_DES - nvl(vt_imp_itemnf_icms_dest.PERC_ICMS_INTER,0))/100) ) * (1 - (vt_param_icms_inter_cf.PERC_ICMS_INTER_PART/100));
                 -- == Verifica se existe percentual de redução de ICMS Interno (Dentro do Estado)  =========================
                 vt_imp_itemnf_icms_dest.PER_RED_BC_ICMS_INTERNO := null;
                 --
                 if nvl(vt_param_icms_inter_cf.PER_RED_BC_ICMS_INTERNO,0) > 0 then
                    vt_imp_itemnf_icms_dest.VL_ICMS_UF_REMET := null;
                    vn_vl_base_calc_icms                    := 0;
                    vn_vl_base_calc_icms                     := (nvl(vt_imp_itemnf_icms_dest.VL_BC_UF_DEST,0) - (nvl(vt_imp_itemnf_icms_dest.VL_BC_UF_DEST,0) * (nvl(vt_param_icms_inter_cf.PER_RED_BC_ICMS_INTERNO,0)/100)));
                    vt_imp_itemnf_icms_dest.VL_ICMS_UF_REMET := (nvl(vn_vl_base_calc_icms,0) * ((vt_param_icms_inter_cf.PERC_ICMS_UF_DES - nvl(vt_imp_itemnf_icms_dest.PERC_ICMS_INTER,0))/100) ) * (1 - (vt_param_icms_inter_cf.PERC_ICMS_INTER_PART/100));
                    vt_imp_itemnf_icms_dest.PER_RED_BC_ICMS_INTERNO := nvl(vt_param_icms_inter_cf.PER_RED_BC_ICMS_INTERNO,0);
                    if nvl(vt_param_icms_inter_cf.PER_RED_BC_ICMS_INTERNO,0) <= 0 then
                    vt_imp_itemnf_icms_dest.VL_BC_UF_DEST   := vn_vl_base_calc_icms;					
                    end if;
                 end if;
                 -- ========================================================================================================
                 vn_fase := 7.4;
                 --
                 --
                 vt_imp_itemnf_icms_dest.VL_ICMS_UF_DEST    := (nvl(vt_imp_itemnf_icms_dest.VL_BC_UF_DEST,0) * ((vt_param_icms_inter_cf.PERC_ICMS_UF_DES - nvl(vt_imp_itemnf_icms_dest.PERC_ICMS_INTER,0))/100) ) * (vt_param_icms_inter_cf.PERC_ICMS_INTER_PART/100);
                 --
                 --
               if nvl(vt_param_icms_inter_cf.PER_RED_BC_ICMS_INTERNO,0) > 0 then
                 --
                 --
                    vt_imp_itemnf_icms_dest.VL_ICMS_UF_DEST := null;
                    vn_vl_base_calc_icms                    := 0;
                    vn_vl_base_calc_icms                    := (nvl(vt_imp_itemnf_icms_dest.VL_BC_UF_DEST,0) - (nvl(vt_imp_itemnf_icms_dest.VL_BC_UF_DEST,0) * (nvl(vt_param_icms_inter_cf.PER_RED_BC_ICMS_INTERNO,0)/100)));
                    vt_imp_itemnf_icms_dest.VL_ICMS_UF_DEST := (vn_vl_base_calc_icms * ((vt_param_icms_inter_cf.PERC_ICMS_UF_DES - nvl(vt_imp_itemnf_icms_dest.PERC_ICMS_INTER,0))/100) ) * (vt_param_icms_inter_cf.PERC_ICMS_INTER_PART/100);         
                    vt_imp_itemnf_icms_dest.PER_RED_BC_ICMS_INTERNO := nvl(vt_param_icms_inter_cf.PER_RED_BC_ICMS_INTERNO,0);          
                    vt_imp_itemnf_icms_dest.VL_BC_UF_DEST   := vn_vl_base_calc_icms;          
                 end if;
                 -- ========================================================================================================
                 --				 
                 vn_fase := 7.5;
                 --
                 vt_imp_itemnf_icms_dest.VL_BC_FCP_DEST          := nvl(vt_imp_itemnf_icms_dest.VL_BC_UF_DEST,0);
                 vt_imp_itemnf_icms_dest.PERC_COMB_POBR_UF_DEST  := vt_param_icms_inter_cf.PERC_COMB_POBR_UF_DEST;
                 vt_imp_itemnf_icms_dest.VL_COMB_POBR_UF_DEST    := round( (nvl(vt_imp_itemnf_icms_dest.VL_BC_FCP_DEST,0) * (vt_param_icms_inter_cf.PERC_COMB_POBR_UF_DEST/100)), 2);
                 --
                 vn_fase := 7.6;
                 --
                    begin
                        --
                      select  imp.vl_imp_trib
                        into vn_vl_imp_trib2
                         from   imp_itemnf         imp,
                                tipo_imposto       timp                            
                        where  imp.itemnf_id     = rec_itemnf.itemnf_id
                           and imp.tipoimp_id    = timp.id
                           and timp.cd             = 1; -- ICMS;
                        exception
                       when others then
                          vn_vl_imp_trib2        := 0;
                      end; 
            -- 
            if  (nvl(vt_param_icms_inter_cf.PER_RED_BC_ICMS_INTERNO,0) > 0 ) then
            --
            vt_imp_itemnf_icms_dest.VL_ICMS_UF_DEST  := vt_imp_itemnf_icms_dest.VL_BC_UF_DEST  * (vt_param_icms_inter_cf.PERC_ICMS_UF_DES/100);
            vt_imp_itemnf_icms_dest.VL_ICMS_UF_DEST  := vt_imp_itemnf_icms_dest.VL_ICMS_UF_DEST  - vn_vl_imp_trib2;
            --
            end if;
            --
          --
          vn_fase := 7.7;
          --
           begin
            select pgs.vlr_param
              into sv_vlr_param
                      from param_geral_sistema pgs,
                           grupo_sistema       gs,
                           modulo_sistema      ms
                    where  pgs.multorg_id         = csf_own.pk_csf.fkg_multorg_id_empresa ( en_empresa_id => rec_nf.empresa_id )
                        and pgs.empresa_id         = rec_nf.empresa_id
                        and pgs.grupo_id           =  gs.id
                        and pgs.modulo_id          =  ms.id
                        and gs.modulo_id           =  ms.id
                        and gs.cod_grupo           = 'PARTILHA_ICMS'
                        and ms.cod_modulo          = 'MISCELANIA'
                        and pgs.param_name         = 'ZERA_ICMS_DEST_INFERIOR';
             exception
               when others then
                  sv_vlr_param        := 0;
              end;
            --
             if (vt_imp_itemnf_icms_dest.VL_ICMS_UF_DEST < sv_vlr_param) and (nvl(vt_param_icms_inter_cf.PER_RED_BC_ICMS_INTERNO,0) > 0 )  then
                  vt_imp_itemnf_icms_dest.VL_ICMS_UF_DEST := 0;
            end if;
                 --
                 insert into imp_itemnf_icms_dest values vt_imp_itemnf_icms_dest;
                 --
                 commit;
                 --
               end if;
               --
            end loop; -- c_itemnf
            --
            vn_fase := 8;
            -- Atualiza os totais
            begin
               --
               select sum(id.vl_icms_uf_dest)
                    , sum(id.vl_icms_uf_remet)
                    , sum(id.vl_comb_pobr_uf_dest)
                 into vn_vl_icms_uf_dest
                    , vn_vl_icms_uf_remet
                    , vn_vl_comb_pobr_uf_dest
                 from item_nota_fiscal      inf
                    , imp_itemnf            imp
                    , tipo_imposto          ti
                    , imp_itemnf_icms_dest  id
                where inf.notafiscal_id = en_notafiscal_id
	          and imp.itemnf_id     = inf.id
	          and imp.dm_tipo       = 0 -- 0-imposto, 1-retenção
	          and ti.id             = imp.tipoimp_id
	          and ti.cd             = 1 -- ICMS
	          and id.impitemnf_id   = imp.id;
            exception
               when others then
                  vn_vl_icms_uf_dest        := 0;
                  vn_vl_icms_uf_remet       := 0;
                  vn_vl_comb_pobr_uf_dest   := 0;
            end;
            --
            if nvl(vn_vl_icms_uf_dest,0) <= 0 then
               vn_vl_icms_uf_dest := null;
            end if;
            --
            if nvl(vn_vl_icms_uf_remet,0) <= 0 then
               vn_vl_icms_uf_remet := null;
            end if;
            --
            if nvl(vn_vl_comb_pobr_uf_dest,0) <= 0 then
               vn_vl_comb_pobr_uf_dest := null;
            end if;
            --
            vn_fase := 99;
            -- atualiza dados
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
            pk_csf_api.gv_objeto := 'pk_csf_api.PKB_CALC_ICMS_INTER_CF';
            pk_csf_api.gn_fase   := vn_fase;
        
            update nota_fiscal_total nt
               set nt.vl_icms_uf_dest       = vn_vl_icms_uf_dest
                 , nt.vl_icms_uf_remet      = vn_vl_icms_uf_remet
                 , nt.vl_comb_pobr_uf_dest  = vn_vl_comb_pobr_uf_dest
             where nt.notafiscal_id = en_notafiscal_id;
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
            pk_csf_api.gv_objeto := 'pk_csf_api';
            pk_csf_api.gn_fase   := null;
            --
            commit;
            --
         end if;
         --
      end loop;
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na PKB_CALC_ICMS_INTER_CF fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
END PKB_CALC_ICMS_INTER_CF;
   --
-----------------------------------------------------------------------------------------
--
-- Procedimento recupera o "Código de Enquadramento Legal do IPI" se parametrizado
procedure pkb_define_cod_enq_legal_ipi ( est_log_generico_nf  in out nocopy dbms_sql.number_table
                                       , en_notafiscal_id     in            nota_fiscal.id%type
                                       )
is
   --
   vn_fase                      number := 0;
   vt_param_item_enq_legal_ipi  param_item_enq_legal_ipi%rowtype;
   vn_empresa_id                empresa.id%type;
   vn_ncm_id                    ncm.id%type;
   vn_item_id                   item.id%type;
   vv_enqlegalipi_cd            enq_legal_ipi.cd%type;
   vn_loggenerico_id            log_generico_nf.id%type;
   --
   cursor c_itemnf is
   select inf.id itemnf_id
        , inf.item_id
        , inf.cod_item
        , inf.descr_item
        , inf.cod_ncm
        , inf.cfop_id
        , inf.cfop
        , inf.qtde_comerc
        , inf.vl_item_bruto
        , inf.vl_frete
        , inf.vl_seguro
        , inf.vl_outro
        , inf.vl_desc
        , imp.vl_base_calc
        , imp.aliq_apli
        , imp.id impitemnf_id
        , imp.vl_imp_trib
        , imp.perc_reduc
        , imp.codst_id
        , inf.nro_item
     from item_nota_fiscal inf
        , imp_itemnf       imp
        , tipo_imposto     ti
    where inf.notafiscal_id = en_notafiscal_id
      and imp.itemnf_id     = inf.id
      and ti.id             = imp.tipoimp_id
      and ti.cd             = 3 -- IPI
    order by inf.id;
   --
   -- Recupera o Parâmetro com os dados do Item da Nota Fiscal: empresa e cod_st
   cursor c_dados2( enc_empresa_id in empresa.id%type
                  , enc_codst_id   in cod_st.id%type
                  ) is
   select p.*
     from param_item_enq_legal_ipi p
    where p.empresa_id = enc_empresa_id
      and p.codst_id   = enc_codst_id
    order by p.codst_id, nvl(p.cfop_id,0), nvl(p.ncm_id,0), nvl(p.item_id,0);
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0
      and gt_row_nota_fiscal.dm_ind_emit     = 0 -- Emissão Própria
      and gt_row_nota_fiscal.dm_arm_nfe_terc = 0
      then
      --
      vn_fase := 2;
      --
      vn_empresa_id := pk_csf.fkg_empresa_notafiscal ( en_notafiscal_id => en_notafiscal_id );
      --
      vn_fase := 3;
      --
      for rec in c_itemnf
      loop
         --
         exit when c_itemnf%notfound or (c_itemnf%notfound) is null;
         --
         vn_fase := 4;
         --
         vt_param_item_enq_legal_ipi := null;
         --
         if nvl(rec.cod_ncm,' ') <> ' ' then
            vn_ncm_id := pk_csf.fkg_ncm_id( ev_cod_ncm => rec.cod_ncm );
         else
            vn_ncm_id := 0;
         end if;
         --
         vn_fase := 5;
         --
         if nvl(rec.item_id,0) = 0 then
            vn_item_id := pk_csf.fkg_item_id_conf_empr( en_empresa_id => vn_empresa_id
                                                      , ev_cod_item   => rec.cod_item );
         else
            vn_item_id := nvl(rec.item_id,0);
         end if;
         --
         vn_fase := 6;
         --
         -- Recupera o Parâmetro com os dados do Item da Nota Fiscal: empresa e cod_st; e Compara com os dados do Item da Nota: cfop, ncm e item
         for r_qualquer in c_dados2( enc_empresa_id => vn_empresa_id
                                   , enc_codst_id   => rec.codst_id
                                   )
         loop
            --
            vn_fase := 7;
            --
            if nvl(r_qualquer.cfop_id,0) = rec.cfop_id and
               nvl(r_qualquer.ncm_id,0) = nvl(vn_ncm_id,0) and
               nvl(r_qualquer.item_id,0) = nvl(vn_item_id,0) then
               --
               vt_param_item_enq_legal_ipi := r_qualquer;
               exit;
               --
            elsif nvl(r_qualquer.cfop_id,0) = rec.cfop_id and
                  nvl(r_qualquer.ncm_id,0) = nvl(vn_ncm_id,0) then
                  --
                  vt_param_item_enq_legal_ipi := r_qualquer;
                  exit;
                  --
            elsif nvl(r_qualquer.cfop_id,0) = rec.cfop_id and
                  nvl(r_qualquer.item_id,0) = nvl(vn_item_id,0) then
                  --
                  vt_param_item_enq_legal_ipi := r_qualquer;
                  exit;
                  --
            elsif nvl(r_qualquer.ncm_id,0) = nvl(vn_ncm_id,0) and
                  nvl(r_qualquer.item_id,0) = nvl(vn_item_id,0) then
                  --
                  vt_param_item_enq_legal_ipi := r_qualquer;
                  exit;
                  --
            elsif nvl(r_qualquer.cfop_id,0) = rec.cfop_id then
                  --
                  vt_param_item_enq_legal_ipi := r_qualquer;
                  exit;
                  --
            elsif nvl(r_qualquer.ncm_id,0) = nvl(vn_ncm_id,0) then
                  --
                  vt_param_item_enq_legal_ipi := r_qualquer;
                  exit;
                  --
            elsif nvl(r_qualquer.item_id,0) = nvl(vn_item_id,0) then
                  --
                  vt_param_item_enq_legal_ipi := r_qualquer;
                  exit;
                  --
            end if;
            --
         end loop; -- encontrar outra combinação
         --
         vn_fase := 8;
         --
         if nvl(vt_param_item_enq_legal_ipi.id,0) > 0 then
            -- Altera do Código de Enquadramento Legal do IPI
            vn_fase := 9;
            vv_enqlegalipi_cd := pk_csf.fkg_cd_enq_legal_ipi ( en_enqlegalipi_id => vt_param_item_enq_legal_ipi.enqlegalipi_id );
            --
            vn_fase := 10;
            --
            if trim(vv_enqlegalipi_cd) is not null then
               --
               vn_fase := 11;
               --
               update item_nota_fiscal set cod_enq_ipi = vv_enqlegalipi_cd
                where id = rec.itemnf_id;
               --
            end if;
            --
         end if;
         --
      end loop;
      --
      vn_fase := 12;
      --
      commit;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_define_cod_enq_legal_ipi fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
end pkb_define_cod_enq_legal_ipi;

-----------------------------------------------------------------------------------------

-- Procedimento Solicita o Calculo dos Impostos
procedure pkb_solic_calc_imp ( est_log_generico_nf  in out nocopy dbms_sql.number_table
                             , en_notafiscal_id     in            nota_fiscal.id%type
                             )
is
   --
   vn_fase                      number := 0;
   vn_loggenerico_id            log_generico_nf.id%type;
   vt_log_generico_calcfiscal   dbms_sql.number_table;
   --
   vn_empresa_id                empresa.id%type;
   vn_dm_util_epropria          param_empr_calc_fiscal.dm_util_epropria%type;
   vn_dm_util_eterceiro         param_empr_calc_fiscal.dm_util_eterceiro%type;
   --
   vn_pessoa_id                 pessoa.id%type;
   vv_uf                        varchar2(2);
   vv_suframa                   nota_fiscal_dest.suframa%type;
   vv_cod_nat                   nat_oper.cod_nat%type;
   vv_cod_mod                   mod_fiscal.cod_mod%type;
   --
   vv_ind_ie_cd_part            valor_tipo_param.cd%type;
   vv_reg_trib_cd_part          valor_tipo_param.cd%type;
   vv_mot_deson_cd_part         valor_tipo_param.cd%type;
   vv_calc_icmsst_cd_part       valor_tipo_param.cd%type;
   vv_ind_ativ_cd_part          valor_tipo_param.cd%type;
   --
   vt_row_solic_calc            solic_calc%rowtype;
   vt_row_item_solic_calc       item_solic_calc%rowtype;
   vt_part_icms_solic_calc      part_icms_solic_calc%rowtype;
   vt_total_solic_calc          total_solic_calc%rowtype;
   --
   vt_row_itemnf_compl_serv     itemnf_compl_serv%rowtype;
   vt_row_imp_itemnf_ii         imp_itemnf%rowtype;
   vn_tipoimposto_cd            tipo_imposto.cd%type;
   vv_conteudo                  nfinfor_adic.conteudo%type;
   vn_tipo_log                  number;
   vn_cidade_id                 cidade.id%type;
   --
   vn_vl_pis_st                 nota_fiscal_total.vl_pis_st%type;
   vn_vl_cofins_st              nota_fiscal_total.vl_cofins_st%type;
   --
   cursor c_inf is
   select inf.*
     from item_nota_fiscal inf
    where inf.notafiscal_id = en_notafiscal_id
    order by inf.nro_item;
   --
   cursor c_iisc ( en_itemsoliccalc_id in item_solic_calc.id%type ) is
   select *
     from imp_itemsc
    where itemsoliccalc_id = en_itemsoliccalc_id
    order by 1;
   --
   cursor c_iasc ( en_soliccalc_id in solic_calc.id%type ) is
   select *
     from sc_infor_adic
    where soliccalc_id = en_soliccalc_id
    order by 1;
   --
   cursor c_log ( en_soliccalc_id in solic_calc.id%type ) is
   select * from log_generico_calcfiscal
    where referencia_id = en_soliccalc_id
      and obj_referencia = 'SOLIC_CALC'
    order by 1;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_notafiscal_id,0) > 0 then
      --
      vt_log_generico_calcfiscal.delete;
      --
      vn_fase := 1.1;
      --
      vn_empresa_id := pk_csf.fkg_empresa_notafiscal ( en_notafiscal_id => en_notafiscal_id );
      --
      vn_fase := 1.2;
      --
      vt_row_solic_calc := null;
      --
      vt_row_solic_calc.empresa_id    := vn_empresa_id;
      vt_row_solic_calc.dm_situacao   := 0; -- Aberto;
      vt_row_solic_calc.dm_st_integr  := 0; -- Indefinido
      vt_row_solic_calc.dt_solic      := sysdate;
      --
      -- recupera dados da Nota Fiscal
      begin
         --
         select nf.natoper_id
              , nf.dm_ind_emit
              , nf.dm_ind_oper
              , nf.modfiscal_id
              , nf.serie
              , nf.nro_nf
              , nvl(nf.dt_sai_ent, nf.dt_emiss)
              , nf.pessoa_id
              , nf.dm_ind_final
              , nf.dm_ind_ativ_part
              , nf.dm_mot_des_icms_part
              , nf.dm_calc_icmsst_part
           into vt_row_solic_calc.natoper_id
              , vt_row_solic_calc.dm_ind_emit
              , vt_row_solic_calc.dm_ind_oper
              , vt_row_solic_calc.modfiscal_id
              , vt_row_solic_calc.serie
              , vt_row_solic_calc.numero
              , vt_row_solic_calc.dt_emiss
              , vn_pessoa_id
              , vt_row_solic_calc.dm_cons_final
              , vt_row_solic_calc.dm_ind_ativ_part
              , vt_row_solic_calc.dm_mot_des_icms_part
              , vt_row_solic_calc.dm_calc_icmsst_part
           from nota_fiscal    nf
          where nf.id               = en_notafiscal_id
            and nf.dm_arm_nfe_terc  = 0;
         --
      exception
         when others then
            vt_row_solic_calc.natoper_id    := null;
            vt_row_solic_calc.dm_ind_emit   := null;
            vt_row_solic_calc.dm_ind_oper   := null;
            vt_row_solic_calc.modfiscal_id  := null;
            vt_row_solic_calc.serie         := null;
            vt_row_solic_calc.numero        := null;
            vt_row_solic_calc.dt_emiss      := null;
            vn_pessoa_id                    := null;
            vt_row_solic_calc.dm_cons_final := null;
            vt_row_solic_calc.dm_ind_ativ_part := null;
            vt_row_solic_calc.dm_mot_des_icms_part := null;
            vt_row_solic_calc.dm_calc_icmsst_part := null;
      end;
      --
      vn_fase := 1.3;
      --
      if vt_row_solic_calc.dm_ind_emit = 0 then -- Emissão Propria
         --
         vn_dm_util_epropria := pk_csf_calc_fiscal.fkg_empr_util_epropria ( en_empresa_id => vn_empresa_id );
         vn_dm_util_eterceiro := 0;
         --
      else
         --
         vn_dm_util_epropria := 0;
         vn_dm_util_eterceiro := pk_csf_calc_fiscal.fkg_empr_util_eterceiro ( en_empresa_id => vn_empresa_id );
         --
      end if;
      --
      vn_fase := 2;
      --
      if nvl(vn_dm_util_epropria,0) = 1 -- Sim, utiliza Calculadora Fiscal
         or nvl(vn_dm_util_eterceiro,0) = 1
         then
         --
         vn_fase := 2.1;
         --
         vv_cod_nat := pk_csf.fkg_cod_nat_id ( en_natoper_id => vt_row_solic_calc.natoper_id );
         --
         vn_fase := 2.2;
         --
         vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => vt_row_solic_calc.modfiscal_id );
         --
         vn_fase := 2.3;
         --
         if nvl(vt_row_solic_calc.numero,0) > 0 then
            --
            vn_fase := 3;
            --
            if vt_row_solic_calc.dm_ind_emit = 0 then -- Emissão Propria
               -- recupera dados do destinatário
               vn_fase := 3.1;
               --
               begin
                  --
                  select d.uf
                       , case when trim(d.cpf) is not null then trim(d.cpf) else trim(d.cnpj) end
                       , d.dm_ind_ie_dest
                       , d.suframa
                       , d.dm_reg_trib
                    into vv_uf
                       , vt_row_solic_calc.cpf_cnpj_part
                       , vt_row_solic_calc.dm_ind_ie_part
                       , vv_suframa
                       , vt_row_solic_calc.dm_reg_trib_part
                    from nota_fiscal_dest d
                   where d.notafiscal_id = en_notafiscal_id;
                  --
               exception
                  when others then
                     vv_uf := null;
                     vt_row_solic_calc.cpf_cnpj_part   := null;
                     vt_row_solic_calc.dm_ind_ie_part  := null;
                     vv_suframa                        := null;
                     vt_row_solic_calc.dm_reg_trib_part := null;
               end;
               --
               vn_fase := 3.11;
               --
               if nvl(vn_pessoa_id,0) > 0
                  and trim(vv_uf) is null then
                  --
                  vn_fase := 3.111;
                  --
                  vt_row_solic_calc.cpf_cnpj_part := pk_csf.fkg_cnpjcpf_pessoa_id ( en_pessoa_id => vn_pessoa_id );
                  --
                  vn_fase := 3.112;
                  --
                  begin
                     --
                     select est.sigla_estado
                       into vv_uf
                       from pessoa p
                          , cidade cid
                          , estado est
                      where p.id    = vn_pessoa_id
                        and cid.id  = p.cidade_id
                        and est.id  = cid.estado_id;
                     --
                  exception
                     when others then
                        vv_uf := null;
                  end;
                  --
               end if;
               --
               vn_fase := 3.14;
               --
               if trim(vv_suframa) is not null then
                  vt_row_solic_calc.dm_part_tem_suframa := 1; -- Sim
               else
                  vt_row_solic_calc.dm_part_tem_suframa := 0; -- Não
               end if;
               --
            else
               -- Emissão de Terceiros
               -- recupera dados do emitente
               vn_fase := 3.2;
               --
               begin
                  --
                  select e.uf
                       , case when trim(e.cpf) is not null then trim(e.cpf) else trim(e.cnpj) end
                       , e.dm_reg_trib
                       , e.dm_ind_ie_emit
                       , e.suframa
                    into vv_uf
                       , vt_row_solic_calc.cpf_cnpj_part
                       , vt_row_solic_calc.dm_reg_trib_part
                       , vt_row_solic_calc.dm_ind_ie_part
                       , vv_suframa
                    from nota_fiscal_emit e
                   where e.notafiscal_id = en_notafiscal_id;
                  --
               exception
                  when others then
                     vv_uf := null;
                     vt_row_solic_calc.cpf_cnpj_part := null;
                     vv_suframa := null;
                     vt_row_solic_calc.dm_reg_trib_part := null;
                     vt_row_solic_calc.dm_ind_ie_part := null;
               end;
               --
               vn_fase := 3.21;
               --
               if trim(vt_row_solic_calc.cpf_cnpj_part) is null then
                  vt_row_solic_calc.cpf_cnpj_part := pk_csf.fkg_cnpjcpf_pessoa_id ( en_pessoa_id => vn_pessoa_id );
               end if;
               --
               vn_fase := 3.22;
               --
               if trim(vv_uf) is null then
                  --
                  begin
                     --
                     select est.sigla_estado
                       into vv_uf
                       from pessoa p
                          , cidade cid
                          , estado est
                      where p.id    = vn_pessoa_id
                        and cid.id  = p.cidade_id
                        and est.id  = cid.estado_id;
                     --
                  exception
                     when others then
                        vv_uf := null;
                  end;
                  --
               end if;
               --
               vn_fase := 3.23;
               --
               if trim(vv_suframa) is null then
                  --
                  begin
                     --
                     select j.suframa
                       into vv_suframa
                       from juridica j
                      where j.pessoa_id = vn_pessoa_id;
                     --
                  exception
                     when others then
                        vv_suframa := null;
                  end;
                  --
               end if;
               --
               vn_fase := 3.24;
               --
               if trim(vv_suframa) is not null then
                  vt_row_solic_calc.dm_part_tem_suframa := 1; -- Sim
               else
                  vt_row_solic_calc.dm_part_tem_suframa := 0; -- Não
               end if;
               --
            end if;
            --
            vn_fase := 3.12;
            --
            vt_row_solic_calc.estado_id := pk_csf.fkg_Estado_id ( ev_sigla_estado => vv_uf );
            --
            vn_fase := 3.13;
            --
            if vv_uf = 'EX' then
               vt_row_solic_calc.dm_tipo_part := 2; -- Juridica
            else
               --
               if length(vt_row_solic_calc.cpf_cnpj_part) = 11 then
                  vt_row_solic_calc.dm_tipo_part := 1; -- Fisica
               else
                  vt_row_solic_calc.dm_tipo_part := 2; -- Juridica
               end if;
               --
            end if;
            --
            vn_fase := 3.3;
            --
            if vt_row_solic_calc.dm_ind_ie_part is null then
               --
               vn_fase := 3.31;
               --
               vv_ind_ie_cd_part := pk_csf.fkg_pessoa_valortipoparam_cd ( ev_tipoparam_cd => '8' -- Indicador da Inscrição Estadual
                                                                        , en_pessoa_id    => vn_pessoa_id );
               --
               vn_fase := 3.32;
               --
               if trim(vv_ind_ie_cd_part) is null then
                  vt_row_solic_calc.dm_ind_ie_part := 9; -- Não Contribuinte
               else
                  vt_row_solic_calc.dm_ind_ie_part := trim(vv_ind_ie_cd_part);
               end if;
               --
            end if;
            --
            vn_fase := 3.4;
            --
            --if vt_row_solic_calc.dm_reg_trib_part is null then
               --
               vn_fase := 3.41;
               --
               vv_reg_trib_cd_part := pk_csf.fkg_pessoa_valortipoparam_cd ( ev_tipoparam_cd => '9' -- Regime Tributário
                                                                          , en_pessoa_id    => vn_pessoa_id );
               --
               vn_fase := 3.42;
               --
               if trim(vv_reg_trib_cd_part) is null then
                  vt_row_solic_calc.dm_reg_trib_part := 3; -- Regime Normal
               else
                  vt_row_solic_calc.dm_reg_trib_part := trim(vv_reg_trib_cd_part);
               end if;
               --
            --end if;
            --
            vn_fase := 3.6;
            --
            if vt_row_solic_calc.dm_ind_ativ_part is null then
               --
               vn_fase := 3.61;
               --
               vv_ind_ativ_cd_part := pk_csf.fkg_pessoa_valortipoparam_cd ( ev_tipoparam_cd => '10' -- Indicador de tipo de atividade
                                                                          , en_pessoa_id    => vn_pessoa_id );
               --
               vn_fase := 3.62;
               --
               if trim(vv_ind_ativ_cd_part) is null then
                  vt_row_solic_calc.dm_ind_ativ_part := 1; -- Outros
               else
                  vt_row_solic_calc.dm_ind_ativ_part := trim(vv_ind_ativ_cd_part);
               end if;
               --
            end if;
            --
            vn_fase := 3.7;
            --
            if vt_row_solic_calc.dm_mot_des_icms_part is null then
               --
               vn_fase := 3.71;
               --
               vv_mot_deson_cd_part := pk_csf.fkg_pessoa_valortipoparam_cd ( ev_tipoparam_cd => '7' -- Motivo de Desoneracao
                                                                           , en_pessoa_id    => vn_pessoa_id );
               --
               vn_fase := 3.72;
               --
               if trim(vv_ind_ativ_cd_part) is null then
                  vt_row_solic_calc.dm_mot_des_icms_part := null;
               else
                  vt_row_solic_calc.dm_mot_des_icms_part := trim(vv_mot_deson_cd_part);
               end if;
               --
            end if;
            --
            vn_fase := 3.8;
            --
            if vt_row_solic_calc.dm_calc_icmsst_part is null then
               --
               vn_fase := 3.81;
               --
               vv_calc_icmsst_cd_part := pk_csf.fkg_pessoa_valortipoparam_cd ( ev_tipoparam_cd => '6' -- Calcular ICMS-ST
                                                                             , en_pessoa_id    => vn_pessoa_id );
               --
               vn_fase := 3.82;
               --
               if trim(vv_calc_icmsst_cd_part) is null then
                  vt_row_solic_calc.dm_calc_icmsst_part := 1; -- Sim
               else
                  vt_row_solic_calc.dm_calc_icmsst_part := trim(vv_calc_icmsst_cd_part);
               end if;
               --
            end if;
            --
            vn_fase := 3.9;
            --
            if vt_row_solic_calc.dm_cons_final is null then
               --
               vt_row_solic_calc.dm_cons_final := 0; -- Não
               --
            end if;
            --
            vn_fase := 3.999;
            -- Chama API
            -- Procedimento que faz a validação e gravação dos dados na tabela SOLIC_CALC
            pk_csf_api_calc_fiscal.pkb_integr_solic_calc ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                                                         , est_row_solic_calc            => vt_row_solic_calc
                                                         , ev_cod_nat                    => vv_cod_nat
                                                         , ev_cod_mod                    => vv_cod_mod
                                                         , ev_sigla_estado_part          => vv_uf
                                                         );
            --
            vn_fase := 4;
            --
            if nvl(vt_row_solic_calc.id,0) > 0 then
               --
               vn_fase := 4.1;
               -- Integra os itens para a Solicitação de Calculo
               --
               for rec_inf in c_inf loop
                  exit when c_inf%notfound or (c_inf%notfound) is null;
                  --
                  vt_row_item_solic_calc := null;
                  vt_row_itemnf_compl_serv := null;
                  vt_row_imp_itemnf_ii := null;
                  --
                  vn_fase := 4.2;
                  -- recupera dados de serviço
                  begin
                     --
                     select * into vt_row_itemnf_compl_serv
                       from itemnf_compl_serv
                      where itemnf_id = rec_inf.id;
                     --
                  exception
                     when others then
                        vt_row_itemnf_compl_serv := null;
                  end;
                  --
                  vn_fase := 4.3;
                  -- recupera dados do impostos de importação
                  begin
                     --
                     select ii.* into vt_row_imp_itemnf_ii
                       from imp_itemnf ii
                          , tipo_imposto ti
                      where 1 = 1
                        and ii.itemnf_id = rec_inf.id
                        and ii.dm_tipo = 0
                        and ti.id = ii.tipoimp_id
                        and ti.cd = 7;
                     --
                  exception
                     when others then
                        vt_row_imp_itemnf_ii := null;
                  end;
                  --
                  vn_fase := 5;
                  --
                  vt_row_item_solic_calc.soliccalc_id               := vt_row_solic_calc.id;
                  vt_row_item_solic_calc.nro_item                   := rec_inf.nro_item;
                  vt_row_item_solic_calc.cod_item                   := rec_inf.cod_item;
                  vt_row_item_solic_calc.descr_item                 := rec_inf.descr_item;
                  vt_row_item_solic_calc.cod_ncm                    := rec_inf.cod_ncm;
                  vt_row_item_solic_calc.extipi                     := rec_inf.cod_ext_ipi;
                  vt_row_item_solic_calc.cod_cest                   := rec_inf.cod_cest;
                  vt_row_item_solic_calc.dm_orig_merc               := rec_inf.orig;
                  vt_row_item_solic_calc.cfop                       := rec_inf.cfop;
                  vt_row_item_solic_calc.cd_lista_serv              := rec_inf.cd_lista_serv;
                  --
                  vn_fase := 5.1;
                  --
                  if trim(rec_inf.cd_lista_serv) is not null then
                     vt_row_item_solic_calc.dm_tipo_item := 2; -- Serviço
                  else
                     vt_row_item_solic_calc.dm_tipo_item := 1; -- Produto
                  end if;
                  --
                  vn_fase := 5.2;
                  --
                  vt_row_item_solic_calc.unid_med                   := rec_inf.unid_com;
                  vt_row_item_solic_calc.qtde                       := rec_inf.qtde_comerc;
                  vt_row_item_solic_calc.vl_unit                    := rec_inf.vl_unit_comerc;
                  vt_row_item_solic_calc.vl_bruto                   := rec_inf.vl_item_bruto;
                  vt_row_item_solic_calc.vl_desc                    := rec_inf.vl_desc;
                  vt_row_item_solic_calc.vl_frete                   := rec_inf.vl_frete;
                  vt_row_item_solic_calc.vl_seguro                  := rec_inf.vl_seguro;
                  vt_row_item_solic_calc.vl_outro                   := rec_inf.vl_outro;
                  vt_row_item_solic_calc.dm_ind_tot                 := rec_inf.dm_ind_tot;
                  vt_row_item_solic_calc.ibge_cid_serv_prest        := rec_inf.cidade_ibge;
                  --
                  vn_fase := 5.3;
                  --
                  if nvl(vt_row_itemnf_compl_serv.itemnf_id,0) > 0 then
                     vt_row_item_solic_calc.vl_desc_incondicionado  := vt_row_itemnf_compl_serv.vl_desc_incondicionado;
                     vt_row_item_solic_calc.vl_desc_condicionado    := vt_row_itemnf_compl_serv.vl_desc_condicionado;
                     vt_row_item_solic_calc.vl_deducao              := vt_row_itemnf_compl_serv.vl_deducao;
                     vt_row_item_solic_calc.vl_outra_ret            := vt_row_itemnf_compl_serv.vl_outra_ret;
                  end if;
                  --
                  vn_fase := 5.4;
                  if nvl(vt_row_imp_itemnf_ii.id,0) > 0 then
                     vt_row_item_solic_calc.vl_bc_ii  := vt_row_imp_itemnf_ii.vl_base_calc;
                     vt_row_item_solic_calc.vl_ii     := vt_row_imp_itemnf_ii.vl_imp_trib;
                  end if;
                  --
                  vn_fase := 5.5;
                  --
                  vt_row_item_solic_calc.vl_desp_adu         := rec_inf.vl_desp_adu;
                  vt_row_item_solic_calc.vl_iof              := rec_inf.vl_iof;
                  --
                  vt_row_item_solic_calc.dm_mod_base_calc    := rec_inf.dm_mod_base_calc;
                  vt_row_item_solic_calc.dm_mod_base_calc_st := rec_inf.dm_mod_base_calc_st;
                  vt_row_item_solic_calc.dm_mot_des_icms     := rec_inf.dm_mot_des_icms;
                  --
                  vn_fase := 5.6;
                  -- Chama API
                  -- Procedimento que faz a validação e gravação dos dados na tabela ITEM_SOLIC_CALC
                  pk_csf_api_calc_fiscal.pkb_integr_item_solic_calc ( est_log_generico_calcfiscal   => vt_log_generico_calcfiscal
                                                                    , est_row_item_solic_calc       => vt_row_item_solic_calc
                                                                    , en_empresa_id                 => vt_row_solic_calc.empresa_id
                                                                    );
                  --
               end loop;
               --
               vn_fase := 6;
               --
               if nvl(vt_log_generico_calcfiscal.count,0) > 0 then
                  --
                  vt_row_solic_calc.dm_situacao := 3; -- Erro;
                  --
                  update solic_calc set dm_situacao = vt_row_solic_calc.dm_situacao
                   where id = vt_row_solic_calc.id;
                  --
               end if;
               --
               vn_fase := 6.1;
               --
               commit;
               --
               vn_fase := 6.2;
               --
               if nvl(vt_row_solic_calc.dm_situacao,0) in (0, 1) then
                  --
                  vn_fase := 6.3;
                  --| Chama procedimento da Calculadora Fiscal
                  pk_csf_api_calc_fiscal.pkb_executar_solic_calc ( en_soliccalc_id => vt_row_solic_calc.id );
                  --
               end if;
               --
               --
               vn_fase := 7;
               -- Devolve os dados para a Nota Fiscal Mercantil
               --
               gv_mensagem_log := 'Utilizado a Calculadora Fiscal para geração dos dados fiscais de impostos e retenções (Indentificador: ' || vt_row_solic_calc.id || ' ).';
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => informacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia
                                   );
               --
               vn_fase := 7.1;
               -- Atualiza os dados dos itens e impostos/retenções
               for rec_inf in c_inf loop
                  exit when c_inf%notfound or (c_inf%notfound) is null;
                  --
                  vn_fase := 7.2;
                  --
                  vt_row_item_solic_calc := null;
                  vt_part_icms_solic_calc := null;
                  --
                  begin
                     --
                     select * into vt_row_item_solic_calc
                       from item_solic_calc
                      where soliccalc_id  = vt_row_solic_calc.id
                        and nro_item      = rec_inf.nro_item;
                     --
                  exception
                     when others then
                        vt_row_item_solic_calc := null;
                  end;
                  --
                  if nvl(vt_row_item_solic_calc.id,0) > 0 then
                     --
                     vn_fase := 7.3;
                     -- Apaga partilha de ICMS
                     delete from imp_itemnf_icms_dest
                      where impitemnf_id in (select id from imp_itemnf where itemnf_id = rec_inf.id);
                     --
                     vn_fase := 7.31;
                     -- Apaga os Impostos
                     delete from imp_itemnf
                      where itemnf_id = rec_inf.id;
                     --
                     vn_fase := 7.4;
                     -- insere os novos impostos
                     for rec_iisc in c_iisc(vt_row_item_solic_calc.id) loop
                        exit when c_iisc%notfound or (c_iisc%notfound) is null;
                        --
                        vn_fase := 7.41;
                        --
                        insert into imp_itemnf ( id
                                               , itemnf_id
                                               , tipoimp_id
                                               , dm_tipo
                                               , codst_id
                                               , vl_base_calc
                                               , aliq_apli
                                               , vl_imp_trib
                                               , perc_reduc
                                               , perc_adic
                                               , qtde_base_calc_prod
                                               , vl_aliq_prod
                                               , vl_bc_st_ret
                                               , vl_icmsst_ret
                                               , perc_bc_oper_prop
                                               , estado_id
                                               , vl_bc_st_dest
                                               , vl_icmsst_dest
                                               , dm_orig_calc
                                               , tiporetimp_id
                                               , vl_deducao
                                               , vl_base_outro
                                               , vl_imp_outro
                                               , vl_base_isenta
                                               , aliq_aplic_outro
                                               , natrecpc_id
                                               , vl_imp_nao_dest
                                               , vl_icms_deson
                                               , vl_icms_oper
                                               , percent_difer
                                               , vl_icms_difer
                                               )
                                        values ( impitemnf_seq.nextval --id
                                               , rec_inf.id -- itemnf_id
                                               , rec_iisc.tipoimp_id
                                               , rec_iisc.dm_tipo
                                               , rec_iisc.codst_id
                                               , rec_iisc.vl_base_calc
                                               , rec_iisc.aliq_apli
                                               , rec_iisc.vl_imp_trib
                                               , rec_iisc.perc_reduc
                                               , rec_iisc.perc_adic
                                               , rec_iisc.qtde_base_calc_prod
                                               , rec_iisc.vl_aliq_prod
                                               , rec_iisc.vl_bc_st_ret
                                               , rec_iisc.vl_icmsst_ret
                                               , null -- perc_bc_oper_prop
                                               , null -- estado_id
                                               , rec_iisc.vl_bc_st_dest
                                               , rec_iisc.vl_icmsst_dest
                                               , 2 -- dm_orig_calc -- Compliance
                                               , null -- tiporetimp_id
                                               , null -- vl_deducao
                                               , null -- vl_base_outro
                                               , null -- vl_imp_outro
                                               , null -- vl_base_isenta
                                               , null -- aliq_aplic_outro
                                               , null -- natrecpc_id
                                               , rec_iisc.vl_imp_nao_dest
                                               , rec_iisc.vl_icms_deson
                                               , rec_iisc.vl_icms_oper
                                               , rec_iisc.percent_difer
                                               , rec_iisc.vl_icms_difer
                                               );
                        --
                        vn_fase := 7.411;
                        --
                        pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                            , ev_mensagem         => 'Nro. Item: ' || rec_inf.nro_item || ' - ' || rec_iisc.memoria
                                            , ev_resumo           => 'Nro. Item: ' || rec_inf.nro_item || ' - ' || rec_iisc.memoria
                                            , en_tipo_log         => INFO_CALC_FISCAL
                                            , en_referencia_id    => gn_referencia_id
                                            , ev_obj_referencia   => gv_obj_referencia
                                            );
                        --
                        vn_fase := 7.42;
                        --
                        vn_tipoimposto_cd := pk_csf.fkg_Tipo_Imposto_cd ( en_tipoimp_id => rec_iisc.tipoimp_id );
                        --
                        vn_fase := 7.43;
                        -- Se for ICMS, atualiza a Partilha de ICMS
                        if nvl(vn_tipoimposto_cd,0) = 1
                           and rec_iisc.dm_tipo = 0 -- Normal
                           then
                           --
                           vn_fase := 7.431;
                           --
                           begin
                              --
                              select * into vt_part_icms_solic_calc
                                from part_icms_solic_calc
                               where itemsoliccalc_id = vt_row_item_solic_calc.id;
                              --
                           exception
                              when others then
                                 vt_part_icms_solic_calc := null;
                           end;
                           --
                           vn_fase := 7.432;
                           --
                           if nvl(vt_part_icms_solic_calc.id,0) > 0 then
                              --
                              insert into imp_itemnf_icms_dest ( id
                                                               , impitemnf_id
                                                               , vl_bc_uf_dest
                                                               , perc_icms_uf_dest
                                                               , perc_icms_inter
                                                               , perc_icms_inter_part
                                                               , vl_icms_uf_dest
                                                               , vl_icms_uf_remet
                                                               , perc_comb_pobr_uf_dest
                                                               , vl_comb_pobr_uf_dest
                                                               )
                                                        values ( impitemnficmsdest_seq.nextval -- id
                                                               , impitemnf_seq.currval --impitemnf_id
                                                               , vt_part_icms_solic_calc.vl_bc_uf_dest
                                                               , vt_part_icms_solic_calc.perc_icms_uf_dest
                                                               , vt_part_icms_solic_calc.perc_icms_inter
                                                               , vt_part_icms_solic_calc.perc_icms_inter_part
                                                               , vt_part_icms_solic_calc.vl_icms_uf_dest
                                                               , vt_part_icms_solic_calc.vl_icms_uf_remet
                                                               , vt_part_icms_solic_calc.perc_comb_pobr_uf_dest
                                                               , vt_part_icms_solic_calc.vl_comb_pobr_uf_dest
                                                               );
                              --
                              vn_fase := 7.433;
                              --
                              pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                                  , ev_mensagem         => 'Nro. Item: ' || rec_inf.nro_item || ' - ' || vt_part_icms_solic_calc.memoria
                                                  , ev_resumo           => 'Nro. Item: ' || rec_inf.nro_item || ' - ' || vt_part_icms_solic_calc.memoria
                                                  , en_tipo_log         => INFO_CALC_FISCAL
                                                  , en_referencia_id    => gn_referencia_id
                                                  , ev_obj_referencia   => gv_obj_referencia
                                                  );
                              --
                           end if;
                           --
                        end if;
                        --
                     end loop;
                     --
                     vn_fase := 7.5;
                     -- Atualiza informações do item
                     update item_nota_fiscal set vl_tot_trib_item     = vt_row_item_solic_calc.vl_tot_trib_item
                                               , dm_mod_base_calc     = vt_row_item_solic_calc.dm_mod_base_calc
                                               , dm_mod_base_calc_st  = vt_row_item_solic_calc.dm_mod_base_calc_st
                                               , dm_mot_des_icms      = vt_row_item_solic_calc.dm_mot_des_icms
                                               , cl_enq_ipi           = vt_row_item_solic_calc.cl_enq_ipi
                                               , cod_selo_ipi         = vt_row_item_solic_calc.cod_selo_ipi
                                               , qtde_selo_ipi        = vt_row_item_solic_calc.qtde_selo_ipi
                                               , cod_enq_ipi          = vt_row_item_solic_calc.cod_enq_ipi
                                               , cfop                 = vt_row_item_solic_calc.cfop
                                               , cfop_id              = pk_csf.fkg_cfop_id(vt_row_item_solic_calc.cfop)
                      where id = rec_inf.id;
                     --
                     vn_fase := 7.51;
                     --
                     update nf_compl_serv set dm_nat_oper = vt_row_item_solic_calc.dm_nat_oper_serv
                      where notafiscal_id = en_notafiscal_id;
                     --
                     vn_fase := 7.52;
                     --
                     begin
                        --
                        select cidade_id
                          into vn_cidade_id
                          from itemnf_compl_serv
                         where itemnf_id = rec_inf.id;
                        --
                     exception
                        when others then
                           vn_cidade_id := 0;
                     end;
                     --
                     update itemnf_compl_serv 
                        set codtribmunicipio_id = pk_csf_nfs.fkg_cod_trib_municipio_id ( vt_row_item_solic_calc.cod_trib_municipio -- ev_cod_trib_municipio
                                                                                       , vn_cidade_id                              -- en_cidadegerador_id
                                                                                       )
                      where itemnf_id = rec_inf.id;
                     --
                  end if;
                  --
               end loop;
               --
               vn_fase := 8;
               -- Atualiza os dados de totais
               vt_total_solic_calc := null;
               --
               begin
                  --
                  select * into vt_total_solic_calc
                    from total_solic_calc
                   where soliccalc_id = vt_row_solic_calc.id;
                  --
               exception
                  when others then
                     vt_total_solic_calc := null;
               end;
               --
               if nvl(vt_total_solic_calc.id,0) > 0 then
                  --
                  vn_fase := 8.1;
                  --
                  delete from nota_fiscal_total
                   where notafiscal_id = en_notafiscal_id;
                  --
                  vn_fase := 8.2;
                  --
                  -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
                  pk_csf_api.gv_objeto := 'pk_csf_api.pkb_solic_calc_imp';
                  pk_csf_api.gn_fase   := vn_fase;
                  --
                  insert into nota_fiscal_total ( id
                                                , notafiscal_id
                                                , vl_base_calc_icms
                                                , vl_imp_trib_icms
                                                , vl_base_calc_st
                                                , vl_imp_trib_st
                                                , vl_total_item
                                                , vl_frete
                                                , vl_seguro
                                                , vl_desconto
                                                , vl_imp_trib_ii
                                                , vl_imp_trib_ipi
                                                , vl_imp_trib_pis
                                                , vl_imp_trib_cofins
                                                , vl_outra_despesas
                                                , vl_total_nf
                                                , vl_serv_nao_trib
                                                , vl_base_calc_iss
                                                , vl_imp_trib_iss
                                                , vl_pis_iss
                                                , vl_cofins_iss
                                                , vl_ret_pis
                                                , vl_ret_cofins
                                                , vl_ret_csll
                                                , vl_base_calc_irrf
                                                , vl_ret_irrf
                                                , vl_base_calc_ret_prev
                                                , vl_ret_prev
                                                , vl_total_serv
                                                , vl_abat_nt
                                                , vl_forn
                                                , vl_terc
                                                , vl_servico
                                                , vl_ret_iss
                                                , vl_tot_trib
                                                , vl_icms_deson
                                                , vl_deducao
                                                , vl_outras_ret
                                                , vl_desc_incond
                                                , vl_desc_cond
                                                , vl_icms_uf_dest
                                                , vl_icms_uf_remet
                                                , vl_comb_pobr_uf_dest
                                                , vl_pis_st
                                                , vl_cofins_st
                                                )
                                         values ( notafiscaltotal_seq.nextval -- id
                                                , en_notafiscal_id --notafiscal_id
                                                , vt_total_solic_calc.vl_base_calc_icms
                                                , vt_total_solic_calc.vl_imp_trib_icms
                                                , vt_total_solic_calc.vl_base_calc_st
                                                , vt_total_solic_calc.vl_imp_trib_st
                                                , vt_total_solic_calc.vl_total_item
                                                , vt_total_solic_calc.vl_frete
                                                , vt_total_solic_calc.vl_seguro
                                                , vt_total_solic_calc.vl_desconto
                                                , vt_total_solic_calc.vl_imp_trib_ii
                                                , vt_total_solic_calc.vl_imp_trib_ipi
                                                , vt_total_solic_calc.vl_imp_trib_pis
                                                , vt_total_solic_calc.vl_imp_trib_cofins
                                                , vt_total_solic_calc.vl_outra_despesas
                                                , vt_total_solic_calc.vl_total_nf
                                                , vt_total_solic_calc.vl_serv_nao_trib
                                                , vt_total_solic_calc.vl_base_calc_iss
                                                , vt_total_solic_calc.vl_imp_trib_iss
                                                , vt_total_solic_calc.vl_pis_iss
                                                , vt_total_solic_calc.vl_cofins_iss
                                                , vt_total_solic_calc.vl_ret_pis
                                                , vt_total_solic_calc.vl_ret_cofins
                                                , vt_total_solic_calc.vl_ret_csll
                                                , vt_total_solic_calc.vl_base_calc_irrf
                                                , vt_total_solic_calc.vl_ret_irrf
                                                , vt_total_solic_calc.vl_base_calc_ret_prev
                                                , vt_total_solic_calc.vl_ret_prev
                                                , vt_total_solic_calc.vl_total_serv
                                                , vt_total_solic_calc.vl_abat_nt
                                                , vt_total_solic_calc.vl_forn
                                                , vt_total_solic_calc.vl_terc
                                                , vt_total_solic_calc.vl_servico
                                                , vt_total_solic_calc.vl_ret_iss
                                                , vt_total_solic_calc.vl_tot_trib
                                                , vt_total_solic_calc.vl_icms_deson
                                                , vt_total_solic_calc.vl_deducao
                                                , vt_total_solic_calc.vl_outras_ret
                                                , vt_total_solic_calc.vl_desc_incond
                                                , vt_total_solic_calc.vl_desc_cond
                                                , vt_total_solic_calc.vl_icms_uf_dest
                                                , vt_total_solic_calc.vl_icms_uf_remet
                                                , vt_total_solic_calc.vl_comb_pobr_uf_dest
                                                , null -- vt_total_solic_calc.vl_pis_st -- esse campo ainda não foi criado na tab total_solic_calc
                                                , null -- vt_total_solic_calc.vl_cofins_st -- esse campo ainda não foi criado na tab total_solic_calc
                                                );
                  -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
                  pk_csf_api.gv_objeto := 'pk_csf_api';
                  pk_csf_api.gn_fase   := null;
                  --
               end if;
               --
               vv_conteudo := null;
               vn_fase := 9;
               -- Atualiza as Informações Adicionais
               for rec_iasc in c_iasc(vt_row_solic_calc.id) loop
                  exit when c_iasc%notfound or (c_iasc%notfound) is null;
                  --
                  vn_fase := 9.1;
                  --
                  if trim(rec_iasc.texto) is not null then
                     --
                     if trim(vv_conteudo) is null then
                        vv_conteudo := vv_conteudo || trim(rec_iasc.texto);
                     else
                        vv_conteudo := vv_conteudo || ' ' || trim(rec_iasc.texto);
                     end if;
                     --
                  end if;
                  --
                  vn_fase := 9.2;
                  --
                  if trim(rec_iasc.obs_compl) is not null then
                     --
                     if trim(vv_conteudo) is null then
                        vv_conteudo := vv_conteudo || trim(rec_iasc.obs_compl);
                     else
                        vv_conteudo := vv_conteudo || ' ' || trim(rec_iasc.obs_compl);
                     end if;
                     --
                  end if;
                  --
               end loop;
               --
               vn_fase := 9.3;
               --
               if trim(vv_conteudo) is not null then
                  --
	          pkb_monta_compl_infor_adic ( est_log_generico_nf  => est_log_generico_nf
                                             , en_notafiscal_id     => en_notafiscal_id
                                             , ev_texto_compl       => vv_conteudo
                                             );
                  --
               end if;
               --
               vn_fase := 10;
               -- Atualiza os dados de Log Generico para NF
               for rec_log in c_log(vt_row_solic_calc.id) loop
                  exit when c_log%notfound or (c_log%notfound) is null;
                  --
                  vn_fase := 10.1;
                  --
                  begin
                     --
                     select cd_compat
                       into vn_tipo_log
                       from csf_tipo_log
                      where id = rec_log.csftipolog_id;
                     --
                  exception
                     when others then
                        vn_tipo_log := null;
                  end;
                  --
                  vn_fase := 10.1;
                  --
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => rec_log.mensagem
                                      , ev_resumo           => rec_log.resumo
                                      , en_tipo_log         => vn_tipo_log
                                      , en_referencia_id    => gn_referencia_id
                                      , ev_obj_referencia   => gv_obj_referencia
                                      );
                  --
                  vn_fase := 10.2;
                  --
                  if nvl(vn_tipo_log,0) in (1, 2) then
                     --
                     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                            , est_log_generico_nf => est_log_generico_nf
                                            );
                     --
                  end if;
                  --
               end loop;
               --
            else
               --
               gv_mensagem_log := 'Não foi possível utilizar a Calculadora Fiscal.';
               --
               pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                   , ev_mensagem         => gv_cabec_log
                                   , ev_resumo           => gv_mensagem_log
                                   , en_tipo_log         => erro_de_validacao
                                   , en_referencia_id    => gn_referencia_id
                                   , ev_obj_referencia   => gv_obj_referencia
                                   );
               --
               -- Armazena o "loggenerico_id" na memória
               pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                      , est_log_generico_nf => est_log_generico_nf
                                      );
               --
            end if;
            --
         else
            --
            gv_mensagem_log := 'Não localido a Nota Fiscal para o identificador: ' || en_notafiscal_id;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                , ev_mensagem         => gv_cabec_log
                                , ev_resumo           => gv_mensagem_log
                                , en_tipo_log         => erro_de_validacao
                                , en_referencia_id    => gn_referencia_id
                                , ev_obj_referencia   => gv_obj_referencia
                                );
            --
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                   , est_log_generico_nf => est_log_generico_nf
                                   );
            --
         end if;
         --
      end if;
      --
   end if;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_solic_calc_imp fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
end pkb_solic_calc_imp;

----------------------------------------------------
-- Procedure que consiste os dados da Nota Fiscal --
----------------------------------------------------
PROCEDURE PKB_CONSISTEM_NF ( EST_LOG_GENERICO_NF IN OUT NOCOPY DBMS_SQL.NUMBER_TABLE
                           , EN_NOTAFISCAL_ID IN            NOTA_FISCAL.ID%TYPE ) IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_objintegr_id    obj_integr.id%type;
   vn_usuario_id      number;
   vv_maquina         varchar2(255);
   --
BEGIN
   --
   vn_fase := 1;
   --
   
   if nvl(gt_row_nota_fiscal.dm_ind_emit,0) = 0 then
      --
      -- Recupera o id do objeto de integração
      --
      begin	  
         select id
           into vn_objintegr_id
           from obj_integr
          where cd in ( select '16'  -- XML Sefaz - Nota Fiscal Mercantil
                          from r_loteintws_envdocfiscal r2
                         where r2.notafiscal_id = en_notafiscal_id ); 		  
      exception
         when no_data_found then
            begin
               select id
                 into vn_objintegr_id
                 from obj_integr
                where cd = '6'; -- Nota Fiscal Mercantil
            exception
               when others then
                  vn_objintegr_id := 0;
            end;
         when others then
            vn_objintegr_id := 0;
      end;
      --
      -- Recupera o USUARIO_ID
      --
      if nvl(gt_row_nota_fiscal.usuario_id,0) > 0 then
         --
         vn_usuario_id := gt_row_nota_fiscal.usuario_id;
         --
      else
         --
         vn_usuario_id := pk_csf.fkg_usuario_id ( ev_login => 'admin' );
         --
      end if;
      --
      if nvl(vn_usuario_id,0) <= 0 then
         --
         begin
            --
            select min(id)
              into vn_usuario_id
              from neo_usuario;
            --
         exception
            when others then
            null;
         end;
         --
      end if;
      --
      -- Recupera o nome da máquina
      --
      vv_maquina := sys_context('USERENV', 'HOST');
      --
      if vv_maquina is null then
         --
         vv_maquina := 'Servidor';
         --
      end if;
      --
      -- Chama o procedimento de execução das rotinas programaveis do tipo "Emissão Online"
      pk_csf_rot_prog.pkb_exec_rot_prog_online_pv  ( en_id_doc          => en_notafiscal_id
                                               , ed_dt_ini          => trunc(gt_row_nota_fiscal.dt_emiss)
                                               , ed_dt_fin          => trunc(gt_row_nota_fiscal.dt_emiss)
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_referencia_id    => en_notafiscal_id
                                               , en_usuario_id      => vn_usuario_id
                                               , ev_maquina         => vv_maquina
                                               , en_objintegr_id    => vn_objintegr_id
                                               , en_multorg_id      => pk_csf.fkg_multorg_id_empresa(en_empresa_id => pk_csf.fkg_busca_empresa_nf(en_notafiscal_id => en_notafiscal_id))
                                               , en_empresa_id      => pk_csf.fkg_busca_empresa_nf(en_notafiscal_id => en_notafiscal_id)
                                               );
      --
   end if;
   
   --
   gv_cabec_log := 'Nota Fiscal nro = '||gt_row_nota_fiscal.nro_nf||' Série = '||gt_row_nota_fiscal.serie||' Data de emissão = '||gt_row_nota_fiscal.dt_emiss;
   --
   vn_fase := 1.1;
   -- Procedimento acerta o PESSOA_ID conforme tipo de emissão
   pkb_acerta_pessoa_nf ( est_log_generico_nf => est_log_generico_nf
                        , en_notafiscal_id    => en_notafiscal_id
                        );
   --
   vn_fase := 1.2;
   -- Procedimento Solicita o Calculo dos Impostos
   pkb_solic_calc_imp ( est_log_generico_nf => est_log_generico_nf
                      , en_notafiscal_id    => en_notafiscal_id
                      );
   --
   vn_fase := 2;
   -- Ajustar o valor de base de cálculo e valor tributado do imposto icms
   pkb_ajust_base_imp ( est_log_generico_nf => est_log_generico_nf
                      , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 3;
   -- Ajustar valores de impostos de importação
   pkb_ajusta_zfm_adidas ( est_log_generico_nf => est_log_generico_nf
                         , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 4;
   -- Procedure de Ajusta valores dos itens da NF com o Total
   pkb_ajust_vlr_itemnf ( est_log_generico_nf => est_log_generico_nf
                        , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 5;
   -- Procedimento de Troca de CFOP
   pkb_troca_cfop_nf ( est_log_generico_nf => est_log_generico_nf
                     , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 6;
   -- Procedimento de Cálculo de ICMS-Normal por Parâmetro de Origem da Mercadoria
   pkb_calc_icms_orig_merc ( est_log_generico_nf => est_log_generico_nf
                           , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 7;
   -- Procedimento de Cálculo de ICMS-Normal
   pkb_calc_icms_normal ( est_log_generico_nf => est_log_generico_nf
                        , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 8;
   -- Procedimento de Cálculo de ICMS-ST
   pkb_calc_icms_st ( est_log_generico_nf => est_log_generico_nf
                    , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 9;
   -- Procedimento cálculo o Diferencial de Alíquota
   pkb_calc_dif_aliq ( est_log_generico_nf => est_log_generico_nf
                     , en_notafiscal_id    => en_notafiscal_id );
   -- 
   vn_fase := 10;
   -- Procedimento cálculo do FPC
   pkb_calc_fcp ( est_log_generico_nf => est_log_generico_nf
                , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 10.1;
   -- Procedimento para Validar ou Validar e Criar NRO_CHAVE_NFE da Nota Fiscal
   pkb_valida_cria_nro_chave_nfe ( est_log_generico_nf  => est_log_generico_nf
                                 , en_notafiscal_id     => en_notafiscal_id
                                 , ev_nro_chave_nfe_new => null
                                 --, en_cria_chave        => 0 -- 0 - Não / 1- Sim
                                 , ev_rotina_orig       => 'pk_csf_api.pkb_consistem_nf'
                                 );
   --
   vn_fase := 11;
   -- Procedimento calcula o Valor Aproximado dos Tributos por item e total da NFe
   pkb_calc_vl_aprox_trib ( est_log_generico_nf => est_log_generico_nf
                          , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 11.1;
   -- Procedimento recupera o "Código de Enquadramento Legal do IPI" se parâmetrizado
   pkb_define_cod_enq_legal_ipi ( est_log_generico_nf => est_log_generico_nf
                                , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 12;
   -- Procedimento de ajuste de Total da Nota Fiscal
   pkb_ajusta_total_nf_empresa ( est_log_generico_nf => est_log_generico_nf
                               , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 13;
   -- Valida informação de exportação
   pkb_valida_infor_exportacao ( est_log_generico_nf => est_log_generico_nf
                               , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 14;
   -- Valida informação de importação
   pkb_valida_infor_importacao ( est_log_generico_nf => est_log_generico_nf
                               , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 15;
   -- Valida informação de Finalidade da Nota Fiscal, Item com CFOP de Devolução, Percentual e Valor de IPI Devolvido
   pkb_valida_item_nota_devol ( est_log_generico_nf => est_log_generico_nf
                              , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 15.1;
   -- Valida informação de Nota Fiscal Referênciada
   pkb_valida_nota_referenciada ( est_log_generico_nf => est_log_generico_nf
                                , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 16;
   -- Valida informações de Cupom Fiscal Referenciado
   pkb_valida_cupom_fiscal_ref ( est_log_generico_nf => est_log_generico_nf
                               , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 17;
   -- Valida informações adicionais da Nota Fiscal
   pkb_valida_infor_adic ( est_log_generico_nf => est_log_generico_nf
                         , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 18;
   -- Valida informação de veículo e reboque do transporte
   pkb_valida_veic_transp ( est_log_generico_nf => est_log_generico_nf
                          , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 19;
   -- Valida informação da transportadora
   pkb_valida_transportadora ( est_log_generico_nf => est_log_generico_nf
                             , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 20;
   -- Valida informações de Retirada/Entrega
   pkb_valida_nf_local ( est_log_generico_nf => est_log_generico_nf
                       , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 21;
   -- Valida informações de combustível
   pkb_valida_item_comb ( est_log_generico_nf => est_log_generico_nf
                        , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 22;
   -- Valida informações de Veículo
   pkb_valida_item_veic ( est_log_generico_nf => est_log_generico_nf
                        , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 23;
   -- Valida obrigatoriedade de Medicamentos por item de Nota Fiscal com o NCM do produto
   pkb_valida_item_med ( est_log_generico_nf => est_log_generico_nf
                       , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 24;
   -- Valida informações de Fatura/Cobrança da Nota Fiscal
   pkb_valida_nf_cobr ( est_log_generico_nf => est_log_generico_nf
                      , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 25;
   -- Valida informação de Emitente
   pkb_valida_nf_emit ( est_log_generico_nf => est_log_generico_nf
                      , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 26;
   -- Valida informação de Destinatário
   pkb_valida_nf_dest ( est_log_generico_nf => est_log_generico_nf
                      , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 27;
   -- Valida informação de quantidade de Itens
   pkb_valida_qtde_item_nf ( est_log_generico_nf => est_log_generico_nf
                           , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 28;
   -- Valida a quantidade de imposto por item da Nota Fiscal e a quantidade de registro para grupo de tributação de ICMS para o Imposto ICMS                                                     --
   pkb_valida_qtde_imposto_item ( est_log_generico_nf => est_log_generico_nf
                                , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 29;
   -- Valida informações de impostos
   pkb_valida_imposto_item ( est_log_generico_nf => est_log_generico_nf
                           , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 29.1;
   -- Valida informações de base de impostos de ICMS    
   pkb_valida_base_icms ( est_log_generico_nf  => est_log_generico_nf
                         , en_notafiscal_id     => en_notafiscal_id );   
   --
   vn_fase := 30;
   -- Procedimento valida se há as infor. obrigatórias nas nf c/ o imp. issqn
   pkb_valida_inf_issqn ( est_log_generico_nf => est_log_generico_nf
                        , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 31;
   -- Valida informações de Totais da Nota Fiscal
   pkb_valida_total_nf ( est_log_generico_nf => est_log_generico_nf
                       , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 32;
   -- Cria a informação de registro analitico de impostos
   pkb_gera_regist_analit_imp ( est_log_generico_nf => est_log_generico_nf
                              , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 33;
   -- Valida informação da entrada de Cana
   pkb_valida_aq_cana ( est_log_generico_nf => est_log_generico_nf
                      , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 34;
   -- Procedimento valida CFOP por indicador de Operação
   pkb_valida_cfop_por_ind_oper ( est_log_generico_nf => est_log_generico_nf
                                , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 36;
   -- Integra a Nota Fiscal ao CTMS
   pkb_integr_ctms ( est_log_generico_nf => est_log_generico_nf
                   , en_notafiscal_id    => en_notafiscal_id
                   , en_dm_tipo          => 1 ); -- Autorização de NFe
   --
   vn_fase := 37;
   -- Gera informação de orientação de Entrega
   pkb_gera_agend_transp ( est_log_generico_nf => est_log_generico_nf
                         , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 38;
   -- Validar se a nota fiscal é de entrada e de pessoa física e gerou crédito de pis e cofins - não permitir essa condição.
   pkb_val_cred_nf_pessoa_fisica( est_log_generico_nf => est_log_generico_nf
                                , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 39;
   -- Validar chave de acesso da nota fiscal
   pkb_valida_nota_fiscal ( est_log_generico_nf => est_log_generico_nf
                          , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 40;
   -- Validar CFOP por destinatário de acordo com o parâmetro da empresa => empresa.dm_valida_cfop_por_dest = 0-não, 1-sim
   pkb_valida_cfop_por_dest ( est_log_generico_nf => est_log_generico_nf
                            , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 41;
   --
   -- Procedimento define se gera ou não o XML do WS Sinal Suframa --
   PKB_DEFINE_WSSINAL_SUFRAMA ( est_log_generico_nf => est_log_generico_nf
                              , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 42;
   -- Procedimento informa o CPF ou CNPJ do contador se não existir na NFe de emissão pra Bahia
   pkb_define_cpf_cnpj_cont ( est_log_generico_nf => est_log_generico_nf
                            , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 43;
   --
   -- Procedimento Cálcula o ICMS em Operações Interestaduais de Vendas a Consumidor Final
   PKB_CALC_ICMS_INTER_CF ( est_log_generico_nf => est_log_generico_nf
                          , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 44;
   --
   --
   vn_fase := 59;
   -- Procedimento informa a Inscrição Estadual do Substituto se não existir na NFe
   pkb_define_ie_subst ( est_log_generico_nf => est_log_generico_nf
                       , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 60;
   -- Procedimento para gerar a Informações Complementares de Tributos --   
   pkb_gerar_info_trib ( est_log_generico_nf => est_log_generico_nf
                       , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 61;
   -- Procedimento que busca o codigo CEST
   pkb_buscar_cod_cest ( est_log_generico_nf => est_log_generico_nf
                       , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 62;
   -- Procedimento que confere o valor do icms desonerado com o código do motivo da desoneração.
   pkb_confere_motivo_vlr_deson ( est_log_generico_nf => est_log_generico_nf
                                , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 63;
   -- Procedimento que confere os valores de forma de pagamento
   pkb_confere_nfformapgto ( est_log_generico_nf => est_log_generico_nf
                           , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 64;
   -- Procedimento para recuperar e atribuir o número do FCI
   PKB_ATRIBUI_NRO_FCI ( est_log_generico_nf => est_log_generico_nf
                       , en_notafiscal_id    => en_notafiscal_id );
   --
   vn_fase := 90;
   --
   -- Chama as rotinas programaveis do tipo "Emissão Online"
   --
   if nvl(gt_row_nota_fiscal.dm_ind_emit,1) = 0 then
      --
      -- Recupera o id do objeto de integração
      --
      begin	  
         select id
           into vn_objintegr_id
           from obj_integr
          where cd in ( select '16'  -- XML Sefaz - Nota Fiscal Mercantil
                          from r_loteintws_envdocfiscal r2
                         where r2.notafiscal_id = en_notafiscal_id ); 		  
      exception
         when no_data_found then
            begin
               select id
                 into vn_objintegr_id
                 from obj_integr
                where cd = '6'; -- Nota Fiscal Mercantil
            exception
               when others then
                  vn_objintegr_id := 0;
            end;
         when others then
            vn_objintegr_id := 0;
      end;
      --
      -- Recupera o USUARIO_ID
      --
      if nvl(gt_row_nota_fiscal.usuario_id,0) > 0 then
         --
         vn_usuario_id := gt_row_nota_fiscal.usuario_id;
         --
      else
         --
         vn_usuario_id := pk_csf.fkg_usuario_id ( ev_login => 'admin' );
         --
      end if;
      --
      if nvl(vn_usuario_id,0) <= 0 then
         --
         begin
            --
            select min(id)
              into vn_usuario_id
              from neo_usuario;
            --
         exception
            when others then
            null;
         end;
         --
      end if;
      --
      -- Recupera o nome da máquina
      --
      vv_maquina := sys_context('USERENV', 'HOST');
      --
      if vv_maquina is null then
         --
         vv_maquina := 'Servidor';
         --
      end if;
      --
      -- Chama o procedimento de execução das rotinas programaveis do tipo "Emissão Online"
      pk_csf_rot_prog.pkb_exec_rot_prog_online ( en_id_doc          => en_notafiscal_id
                                               , ed_dt_ini          => trunc(gt_row_nota_fiscal.dt_emiss)
                                               , ed_dt_fin          => trunc(gt_row_nota_fiscal.dt_emiss)
                                               , ev_obj_referencia   => gv_obj_referencia
                                               , en_referencia_id    => en_notafiscal_id
                                               , en_usuario_id      => vn_usuario_id
                                               , ev_maquina         => vv_maquina
                                               , en_objintegr_id    => vn_objintegr_id
                                               , en_multorg_id      => pk_csf.fkg_multorg_id_empresa(en_empresa_id => pk_csf.fkg_busca_empresa_nf(en_notafiscal_id => en_notafiscal_id))
                                               , en_empresa_id      => pk_csf.fkg_busca_empresa_nf(en_notafiscal_id => en_notafiscal_id)
                                               );
      --
   end if;
   --
   vn_fase := 91;
   --
   if nvl(est_log_generico_nf.count,0) > 0 and
      gv_obj_referencia = 'NOTA_FISCAL'    and
      fkg_ver_erro_log_generico_nf(en_notafiscal_id) = 1 then
      --
      vn_fase := 92;
      --
      update nota_fiscal nf
         set nf.dm_st_proc = 10
       where nf.id = en_notafiscal_id;
      --
      commit;
      --
   else
      if nvl(est_log_generico_nf.count,0) > 0 and
         gv_obj_referencia = 'NOTA_FISCAL'    and
         fkg_ver_erro_log_generico_nf(en_notafiscal_id) = 0 then
         --
         vn_fase := 92.1;
         --
         if nvl(gt_row_nota_fiscal.dm_ind_emit,0) = 0
          and nvl(gt_row_nota_fiscal.dm_legado,0) = 0  then 
           update nota_fiscal nf
              set nf.dm_st_proc = 1
             where nf.id         = en_notafiscal_id
               and nf.dm_st_proc = 0;
         else
           update nota_fiscal nf
              set nf.dm_st_proc = 4
            where nf.id = en_notafiscal_id;           
         end if;
         --
         commit;
         --
      end if;
      --	  
   end if;
   --
   vn_fase := 93;
   --
   if gv_obj_referencia = 'NOTA_FISCAL' then
      -- Se não contém erro de validação, Grava o Log de Nota Fiscal Integrada
      gv_mensagem_log := 'Nota Fiscal integrada';
      --
      if nvl(est_log_generico_nf.count,0) = 0 then
         --
         vn_fase := 94;
         gv_mensagem_log := gv_mensagem_log||' e validada.';
         --
      end if;
      --
      vn_fase := 95;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem       => gv_cabec_log
                          , ev_resumo         => gv_mensagem_log
                          , en_tipo_log       => nota_fiscal_integrada
                          , en_referencia_id  => gn_referencia_id
                          , ev_obj_referencia => gv_obj_referencia );
      --
   end if;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_consistem_nf fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_sistema
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         --
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
         --
      exception
         when others then
            null;
      end;
      --
END PKB_CONSISTEM_NF;

------------------------------------------
-- Função para validar as notas fiscais --
------------------------------------------
FUNCTION FKG_VALIDA_NF ( EN_EMPRESA_ID      IN  EMPRESA.ID%TYPE
                       , ED_DT_INI          IN  DATE
                       , ED_DT_FIN          IN  DATE
                       , EV_OBJ_REFERENCIA  IN  LOG_GENERICO_NF.OBJ_REFERENCIA%TYPE
                       , EN_REFERENCIA_ID   IN  LOG_GENERICO_NF.REFERENCIA_ID%TYPE )
         RETURN BOOLEAN IS
   --
   vn_fase              number;
   vn_dm_dt_escr_dfepoe empresa.dm_dt_escr_dfepoe%type;
   vt_log_generico_nf   dbms_sql.number_table;
   --
   cursor c_notas( en_dm_dt_escr_dfepoe in empresa.dm_dt_escr_dfepoe%type ) is
   select nf.id notafiscal_id
     from nota_fiscal nf
        , mod_fiscal  mf
    where nf.empresa_id      = en_empresa_id
      and nf.dm_arm_nfe_terc = 0
      and nf.dm_st_proc      = 4 -- Autorizada
      and ((nf.dm_ind_emit = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(ed_dt_ini) and trunc(ed_dt_fin))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and trunc(nf.dt_emiss) between trunc(ed_dt_ini) and trunc(ed_dt_fin))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 0 and trunc(nf.dt_emiss) between trunc(ed_dt_ini) and trunc(ed_dt_fin))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and en_dm_dt_escr_dfepoe = 1 and trunc(nvl(nf.dt_sai_ent,nf.dt_emiss)) between trunc(ed_dt_ini) and trunc(ed_dt_fin)))
      and mf.id              = nf.modfiscal_id
      and mf.cod_mod        in ('01', '1B', '04', '55', '65')
    order by nf.id;
BEGIN
   --
   vn_fase := 1;
   --
   pkb_seta_tipo_integr ( en_tipo_integr => 0 ); -- 0-Valida e registra Log, 1-Valida, registra Log e insere a informação
   --
   pkb_seta_obj_ref ( ev_objeto => ev_obj_referencia );
   --
   pkb_seta_referencia_id ( en_id => en_referencia_id );
   --
   vn_dm_dt_escr_dfepoe := pk_csf.fkg_dmdtescrdfepoe_empresa( en_empresa_id => en_empresa_id );
   --
   vn_fase := 2;
   --
   vt_log_generico_nf.delete;
   --
   for rec in c_notas( en_dm_dt_escr_dfepoe => vn_dm_dt_escr_dfepoe )
   loop
      --
      exit when c_notas%notfound or (c_notas%notfound) is null;
      --
      vn_fase := 3;
      --
      pkb_consistem_nf ( est_log_generico_nf => vt_log_generico_nf
                       , en_notafiscal_id    => rec.notafiscal_id );
      --
   end loop;
   --
   vn_fase := 4;
   --
   if nvl(vt_log_generico_nf.count,0) > 0 then
      return false;
   else
      return true;
   end if;
   --
EXCEPTION
   when others then
      raise_application_error(-20101, 'Problemas em pk_csf_api.fkg_valida_nf (fase = '||vn_fase||' empresa_id = '||en_empresa_id||' período de '||
                                      to_char(ed_dt_ini,'dd/mm/yyyy')||' até '||to_char(ed_dt_fin,'dd/mm/yyyy')||' objeto = '||ev_obj_referencia||
                                      ' referencia_id = '||en_referencia_id||'). Erro = '||sqlerrm);
END FKG_VALIDA_NF;

---------------------------------------------------------------
-- Procedimento registra Log de processamento da Nota Fiscal --
---------------------------------------------------------------
PROCEDURE PKB_REG_LOG_PROC_NFE IS
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   --
   --| Aguardando Envio
   cursor c_nfe_2 is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
     from nota_fiscal   nf
        , mod_fiscal    mf
    where nf.dm_st_proc = 2
      and mf.id         = nf.modfiscal_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id  = nf.id
                          and lg.obj_referencia = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 3 -- Geração do xml
                     )
    order by nf.id;
   --
   --| Aguardando Retorno
   cursor c_nfe_3 is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
     from nota_fiscal   nf
        , mod_fiscal    mf
    where nf.dm_st_proc = 3
      and mf.id         = nf.modfiscal_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id  = nf.id
                          and lg.obj_referencia = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 6 -- Retorno de envio do Lote ao Sefaz
                     )
    order by nf.id;
   --
   --| Autorizada
   cursor c_nfe_4 is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
        , (m.cd || ' - ' || m.descr) msg
     from nota_fiscal   nf
        , mod_fiscal    mf
        , msg_webserv   m
    where nf.dm_st_proc = 4
      and mf.id         = nf.modfiscal_id
      and m.id          = nf.msgwebserv_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id  = nf.id
                          and lg.obj_referencia = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 10 -- Retorno do processamento da Nota Fiscal no Sefaz
                     )
    order by nf.id;
   --
   --| Rejeitada
   cursor c_nfe_5 is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
        , (m.cd || ' - ' || m.descr) msg
     from nota_fiscal   nf
        , mod_fiscal    mf
        , msg_webserv   m
    where nf.dm_st_proc = 5
      and mf.id         = nf.modfiscal_id
      and m.id          = nf.msgwebserv_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id  = nf.id
                          and lg.obj_referencia = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 9 -- Erro de retorno do processamento da Nota Fiscal no Sefaz
                      )
    order by nf.id;
   --
   --| Denagada
   cursor c_nfe_6 is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
        , (m.cd || ' - ' || m.descr) msg
     from nota_fiscal   nf
        , mod_fiscal    mf
        , msg_webserv   m
    where nf.dm_st_proc = 6
      and mf.id         = nf.modfiscal_id
      and m.id          = nf.msgwebserv_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id  = nf.id
                          and lg.obj_referencia = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 9 -- Erro de retorno do processamento da Nota Fiscal no Sefaz
                      )
    order by nf.id;
   --
   --| Cancelada
   cursor c_nfe_7 is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
        , (m.cd || ' - ' || m.descr) msg
     from nota_fiscal       nf
        , mod_fiscal        mf
        , nota_fiscal_canc  nfc
        , msg_webserv       m
    where nf.dm_st_proc      = 7
      and mf.id              = nf.modfiscal_id
      and nfc.notafiscal_id  = nf.id
      and m.id               = nfc.msgwebserv_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id  = nf.id
                          and lg.obj_referencia = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 12 -- Retorno do processo da Solicitação de Cancelamento da Nota Fiscal no Sefaz
                      )
    order by nf.id;
   --
   --| Erro ao enviar a Nota ao Sefaz
   cursor c_nfe_12 is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
        , (m.cd || ' - ' || m.descr) msg
     from nota_fiscal   nf
        , mod_fiscal    mf
        , msg_webserv   m
    where nf.dm_st_proc = 12
      and mf.id         = nf.modfiscal_id
      and m.id          = nf.msgwebserv_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id  = nf.id
                          and lg.obj_referencia = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 5 -- Erro de retorno de envio do Lote ao Sefaz
                     )
    order by nf.id;
   --
   --| Erro ao obter o retorno do envio da Nota ao Sefaz
   cursor c_nfe_13 is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
        , (m.cd || ' - ' || m.descr) msg
     from nota_fiscal   nf
        , mod_fiscal    mf
        , msg_webserv   m
    where nf.dm_st_proc = 13
      and mf.id         = nf.modfiscal_id
      and m.id          = nf.msgwebserv_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id  = nf.id
                          and lg.obj_referencia = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 9 -- Erro de retorno do processamento da Nota Fiscal no Sefaz
                      )
     order by nf.id;
   --
   --| Erro ao enviar a Solicitação de Cancelamento ao Sefaz
   cursor c_nfe_15 is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
        , (m.cd || ' - ' || m.descr) msg
     from nota_fiscal       nf
        , nota_fiscal_canc  nfc
        , mod_fiscal        mf
        , msg_webserv       m
    where nf.dm_st_proc      = 15
      and mf.id              = nf.modfiscal_id
      and nfc.notafiscal_id  = nf.id
      and m.id               = nfc.msgwebserv_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id  = nf.id
                          and lg.obj_referencia = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 11 -- Erro de retorno do processo da Solicitação de Cancelamento da Nota Fiscal no Sefaz
                      )
    order by nf.id;
   --
   --| Registra o Log de Inutilização da Nota Fiscal
   cursor c_nfe_8 is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
        , 'Nota Fiscal Eletrônica foi Inutilizada' msg
     from nota_fiscal       nf
        , mod_fiscal        mf
    where nf.dm_st_proc      = 8
      and mf.id              = nf.modfiscal_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id  = nf.id
                          and lg.obj_referencia = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 14 -- Retorno do processo da Solicitação de Inutilização de Nota Fiscal no Sefaz
                      )
    order by nf.id;
   --
   cursor c_lote is
   select nf.id
        , nf.empresa_id
        , nf.nro_nf
        , nf.serie
        , mf.cod_mod
        , nf.dt_emiss
        , (l.cod_msg || ' - ' || l.motivo_ret) msg
     from lote           l
        , nota_fiscal    nf
        , mod_fiscal     mf
    where l.dm_situacao  = 3 -- Erro ao enviar Lote a SEFAZ
      and nf.lote_id     = l.id
      and mf.id          = nf.modfiscal_id
      and not exists ( select 1
                         from log_generico_nf lg
                            , csf_tipo_log tl
                        where lg.referencia_id   = nf.id
                          and lg.obj_referencia  = 'NOTA_FISCAL'
                          and tl.id             = lg.csftipolog_id
                          and tl.cd_compat      = 9 -- Erro de retorno do processamento da Nota Fiscal no Sefaz
                      )
    order by nf.id;
   --
BEGIN
   --
   vn_fase := 1;
   -- Processa o Log da NF-e "3-Aguardando Retorno"
   for rec in c_nfe_3 loop
      exit when c_nfe_3%notfound or (c_nfe_3%notfound) is null;
      --
      vn_fase := 1.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 1.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := 'NF-e aguardando retorno da Sefaz.';
      --
      vn_fase := 1.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa ( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 1.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 1.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 6 -- Retorno de envio do Lote ao Sefaz
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
   vn_fase := 2;
   -- Processsa o Log "4-Autorizada"
   for rec in c_nfe_4 loop
      exit when c_nfe_4%notfound or (c_nfe_4%notfound) is null;
      --
      vn_fase := 2.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 2.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := rec.msg;
      --
      vn_fase := 2.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 2.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 2.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 10 -- Retorno do processamento da Nota Fiscal no Sefaz
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
   vn_fase := 3;
   -- Processa o Log "5-Rejeitada"
   for rec in c_nfe_5 loop
      exit when c_nfe_5%notfound or (c_nfe_5%notfound) is null;
      --
      vn_fase := 3.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 3.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := rec.msg;
      --
      vn_fase := 3.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 3.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 3.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 9 -- Erro de retorno do processamento da Nota Fiscal no Sefaz
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
   vn_fase := 4;
   -- Processa o Log "6-Denegada"
   for rec in c_nfe_6 loop
      exit when c_nfe_6%notfound or (c_nfe_6%notfound) is null;
      --
      vn_fase := 4.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 4.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := rec.msg;
      --
      vn_fase := 4.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: ' || pk_csf.fkg_nome_empresa ( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 4.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 4.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 9 -- Erro de retorno do processamento da Nota Fiscal no Sefaz
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
   vn_fase := 5;
   -- Processa o Log "7-Cancelada"
   for rec in c_nfe_7 loop
      exit when c_nfe_7%notfound or (c_nfe_7%notfound) is null;
      --
      vn_fase := 5.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 5.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := rec.msg;
      --
      vn_fase := 5.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: ' || pk_csf.fkg_nome_empresa ( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 5.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 5.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 12 -- Retorno do processo da Solicitação de Cancelamento da Nota Fiscal no Sefaz
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
   vn_fase := 6;
   -- Processa Log "12-Erro ao enviar a Nota ao Sefaz"
   for rec in c_nfe_12 loop
      exit when c_nfe_12%notfound or (c_nfe_12%notfound) is null;
      --
      vn_fase := 6.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 6.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := rec.msg;
      --
      vn_fase := 6.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 6.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 6.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 5 -- Erro de retorno de envio do Lote ao Sefaz
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
   vn_fase := 7;
   -- Processa Log "13-Erro ao obter o retorno do envio da Nota ao Sefaz"
   for rec in c_nfe_13 loop
      exit when c_nfe_13%notfound or (c_nfe_13%notfound) is null;
      --
      vn_fase := 7.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 7.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := rec.msg;
      --
      vn_fase := 7.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 7.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 7.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 9 -- Erro de retorno do processamento da Nota Fiscal no Sefaz
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
   vn_fase := 8;
   -- Processa o Log "15-Erro ao enviar a Solicitação de Cancelamento ao Sefaz"
   for rec in c_nfe_15 loop
      exit when c_nfe_15%notfound or (c_nfe_15%notfound) is null;
      --
      vn_fase := 8.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 8.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := rec.msg;
      --
      vn_fase := 8.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 8.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 8.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 11 -- Erro de retorno do processo da Solicitação de Cancelamento da Nota Fiscal no Sefaz
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
   vn_fase := 9; -- c_lote
   --
   for rec in c_lote loop
      exit when c_lote%notfound or (c_lote%notfound) is null;
      --
      vn_fase := 9.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 9.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := rec.msg;
      --
      vn_fase := 9.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 9.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 9.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 9 -- Erro de retorno do processamento da Nota Fiscal no Sefaz
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
   vn_fase := 10;
   -- Processa o Log da NF-e "2-Aguardando Envio"
   for rec in c_nfe_2 loop
      exit when c_nfe_2%notfound or (c_nfe_2%notfound) is null;
      --
      vn_fase := 10.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 10.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := 'NF-e aguardando para a Sefaz.';
      --
      vn_fase := 10.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: ' || pk_csf.fkg_nome_empresa ( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 10.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 10.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 3 -- Geração do xml
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
   vn_fase := 11; -- c_nfe_8
   -- Processa o Log da NF-e "8-Inutilizada"
   for rec in c_nfe_8 loop
      exit when c_nfe_8%notfound or (c_nfe_8%notfound) is null;
      --
      vn_fase := 11.1;
      --
      vn_loggenerico_id := null;
      --
      vn_fase := 11.2;
      -- Monta a Mensagem do resumo do log
      gv_mensagem_log := rec.msg;
      --
      vn_fase := 11.3;
      -- Monta o Cabeçalho da NF-e
      gv_cabec_log := 'Empresa: '||pk_csf.fkg_nome_empresa( en_empresa_id => rec.empresa_id );
      --
      vn_fase := 11.4;
      --
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Número: '||rec.nro_nf;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Série: '||rec.serie;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Modelo: '||rec.cod_mod;
      gv_cabec_log := gv_cabec_log||chr(10);
      gv_cabec_log := gv_cabec_log||'Data de emissão: '||to_char(rec.dt_emiss, 'dd/mm/yyyy');
      --
      vn_fase := 11.5;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => 14 -- retorno de inutilização
                          , en_referencia_id    => rec.id
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_reg_log_proc_nfe fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , ev_obj_referencia   => 'NOTA_FISCAL' );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END PKB_REG_LOG_PROC_NFE;

--------------------------------------------------------
-- Re-envia lote que teve erro ao ser enviado a SEFAZ --
--------------------------------------------------------
PROCEDURE PKB_REENVIA_LOTE ( en_multorg_id  in mult_org.id%type )
IS
   --
   vn_fase number := 0;
   --
   cursor c_lote is
   select l.id
     from empresa e
        , lote  l
    where 1 = 1
      and e.multorg_id = en_multorg_id
      and l.empresa_id = e.id
      and l.dm_situacao = 3 -- Erro ao enviar Lote a SEFAZ
      and l.cod_msg     = 999
      and exists ( select 1 from nota_fiscal nf
                    where nf.lote_id = l.id
                      and nf.dm_st_proc = 5
                      and nvl(nf.msgwebserv_id,0) <= 0
                      and nf.motivo_resp is null );
   --
BEGIN
   --
   vn_fase := 1;
   --
   for rec in c_lote loop
      exit when c_lote%notfound or (c_lote%notfound) is null;
      --
      vn_fase := 2;
      --
      -- Variavel global usada em logs de triggers (carrega)
      gv_objeto := 'pk_csf_api.pkb_reenvia_lote';
      gn_fase   := vn_fase;
      --
      update nota_fiscal set dm_st_proc = 1
                           , dt_st_proc = sysdate
       where lote_id = rec.id;
      --
      -- Variavel global usada em logs de triggers (limpa)
      gv_objeto := 'pk_csf_api';
      gn_fase   := null;
      --
      vn_fase := 3;
      --
      update lote set dm_situacao = 0
       where id = rec.id;
      --
      vn_fase := 4;
      --
      commit;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_reenvia_lote fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , ev_obj_referencia   => 'LOTE' );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END PKB_REENVIA_LOTE;

-------------------------------------------------------------------------------------
-- Procedimento ajusta lotes que estão com a situação 2-concluído e suas notas não --
-------------------------------------------------------------------------------------
PROCEDURE PKB_AJUSTA_LOTE_NFE ( en_multorg_id  in mult_org.id%type )
IS
   --
   vn_fase number := 0;
   --
   cursor c_lote is
   select distinct nf.id
     from empresa     e
        , lote        l
        , nota_fiscal nf
    where 1 = 1
      and e.multorg_id  = en_multorg_id
      and l.empresa_id  = e.id
      and l.dm_situacao = 2 -- lote concluído
      and nf.lote_id    = l.id
      and nf.dm_st_proc in (0, 1, 2, 3)
      and not exists (select 1 from nota_fiscal_canc nfc where nfc.notafiscal_id = nf.id)
    order by 1;
   --
BEGIN
   --
   vn_fase := 1;
   --
   for rec in c_lote loop
      exit when c_lote%notfound or (c_lote%notfound) is null;
      --
      vn_fase := 2;
      --
      -- Variavel global usada em logs de triggers (carrega)
      gv_objeto := 'pk_csf_api.pkb_ajusta_lote_nfe'; 
      gn_fase   := vn_fase;
      --
      update nota_fiscal set dm_st_proc = 1
           , lote_id = null
       where id = rec.id;
      --
      -- Variavel global usada em logs de triggers (limpa)
      gv_objeto := 'pk_csf_api';
      gn_fase   := null;
      --
   end loop;
   --
   vn_fase := 3;
   --
   commit;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_ajusta_lote_nfe fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , ev_obj_referencia   => 'LOTE' );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END PKB_AJUSTA_LOTE_NFE;

---------------------------------------------------------------------------------------------------------------------
-- Procedimento de atualiar NF-e inutilizadas                                                                      --
-- Depois de Homologado a Inutilização, verifica se tem alguma NFe vinculada e                                     --
-- Altera o DM_ST_PROC para 8-Inutilizada e a Situação do Documento para "05-NF-e ou CT-e - Numeração inutilizada" --
---------------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_ATUAL_NFE_INUT ( en_multorg_id  in mult_org.id%type )
IS
   --
   vn_fase            number := 0;
   vn_seq_nro_nf      nota_fiscal.nro_nf%type;
   vn_notafiscal_id   nota_fiscal.id%type;
   vn_dm_st_integra   nota_fiscal.dm_st_integra%type := null;
   vn_dm_tipo_integr  empresa.dm_tipo_integr%type;
   vv_cod_mod         mod_fiscal.id%Type;
   --
   cursor c_inut2 is
   select i.*
     from empresa e
        , inutiliza_nota_fiscal i
    where 1 = 1
      and e.multorg_id    = en_multorg_id
      and i.empresa_id    = e.id
      and i.dm_situacao   = 2
      and i.dm_integr_nf  = 0 -- Sem nota Fiscal
    order by i.id;
   --
BEGIN
   --
   vn_fase := 1;
   --
   -- Inutlização sem Nota Fiscal
   for rec in c_inut2 loop
      exit when c_inut2%notfound or (c_inut2%notfound) is null;
      --
      vn_fase := 2;
      --
      vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => rec.modfiscal_id );
      --
      vn_seq_nro_nf := rec.nro_ini;
      --
      begin
         --
         select dm_tipo_integr
           into vn_dm_tipo_integr
           from empresa
          where id = rec.empresa_id;
         --
      exception
         when others then
            vn_dm_tipo_integr := 0;
      end;
      --
      if vn_dm_tipo_integr in (3, 4) then -- integração por table/view
         vn_dm_st_integra := 7;
      else
         vn_dm_st_integra := 5;
      end if;
      --
      vn_fase := 3;
      --
      while vn_seq_nro_nf <= rec.nro_fim loop
         --
         vn_fase := 3.1;
         --
         -- Recupera o ID da nota fiscal
         vn_notafiscal_id := pk_csf.fkg_busca_notafiscal_id ( en_multorg_id   => pk_csf.fkg_multorg_id_empresa ( en_empresa_id => rec.empresa_id )
                                                            , en_empresa_id   => rec.empresa_id
                                                            , ev_cod_mod      => vv_cod_mod
                                                            , ev_serie        => rec.serie
                                                            , en_nro_nf       => vn_seq_nro_nf
                                                            , en_dm_ind_oper  => null -- passa nulo para achar a nota
                                                            , en_dm_ind_emit  => 0 -- Emissão Própria
                                                            , ev_cod_part     => null 
                                                            );
         --
         vn_fase := 3.2;
         --
         if nvl(vn_notafiscal_id,0) <= 0 then
            --
            vn_fase := 3.3;
            --
            select notafiscal_seq.nextval
              into vn_notafiscal_id
              from dual;
            --
            vn_fase := 3.4;
            --
            -- Variavel global usada em logs de triggers (carrega)
            gv_objeto := 'pk_csf_api.pkb_atual_nfe_inut'; 
            gn_fase   := vn_fase;
            --
            insert into nota_fiscal ( ID
                                 , EMPRESA_ID
                                 , PESSOA_ID
                                 , SITDOCTO_ID
                                 , NATOPER_ID
                                 , LOTE_ID
                                 , INUTILIZANF_ID
                                 , VERSAO
                                 , ID_TAG_NFE
                                 , PK_NITEM
                                 , NAT_OPER
                                 , DM_IND_PAG
                                 , MODFISCAL_ID
                                 , DM_IND_EMIT
                                 , DM_IND_OPER
                                 , DT_SAI_ENT
                                 , DT_EMISS
                                 , NRO_NF
                                 , SERIE
                                 , UF_EMBARQ
                                 , LOCAL_EMBARQ
                                 , NF_EMPENHO
                                 , PEDIDO_COMPRA
                                 , CONTRATO_COMPRA
                                 , DM_ST_PROC
                                 , DT_ST_PROC
                                 , DM_FORMA_EMISS
                                 , DM_IMPRESSA
                                 , DM_TP_IMPR
                                 , DM_TP_AMB
                                 , DM_FIN_NFE
                                 , DM_PROC_EMISS
                                 , VERS_PROC
                                 , DT_AUT_SEFAZ
                                 , DM_AUT_SEFAZ
                                 , CIDADE_IBGE_EMIT
                                 , UF_IBGE_EMIT
                                 , DT_HR_ENT_SIST
                                 , NRO_CHAVE_NFE
                                 , CNF_NFE
                                 , DIG_VERIF_CHAVE
                                 , VERS_APL
                                 , DT_HR_RECBTO
                                 , NRO_PROTOCOLO
                                 , DIGEST_VALUE
                                 , MSGWEBSERV_ID
                                 , COD_MSG
                                 , MOTIVO_RESP
                                 , NFE_PROC_XML
                                 , DM_ST_EMAIL
                                 , ID_USUARIO_ERP
                                 , IMPRESSORA_ID
                                 , USUARIO_ID
                                 , DM_ST_INTEGRA
                                 , VIAS_DANFE_CUSTOM
                                 , NRO_CHAVE_NFE_ADIC
                                 , NRO_TENTATIVAS_IMPR
                                 , DT_ULT_TENTA_IMPR
                                 , SUB_SERIE
                                 , CODCONSITEMCONT_ID
                                 , INFORCOMPDCTOFISCAL_ID
                                 , COD_CTA
                                 , DM_TP_LIGACAO
                                 , DM_COD_GRUPO_TENSAO
                                 , DM_TP_ASSINANTE
                                 , SISTORIG_ID
                                 , UNIDORG_ID
                                 , SERIE_SCAN
                                 , NRO_NF_SCAN
                                 , HORA_SAI_ENT
                                 , NRO_CHAVE_CTE_REF
                                 , DT_CONT
                                 , JUST_CONT
                                 , DM_RET_NF_ERP
                                 , XML_WSSINAL_SUFRAMA
                                 , DM_ST_WSSINAL_SUFRAMA
                                 , DM_ARM_NFE_TERC
                                 , DM_REC_XML
                                 , DM_DANFE_REC
                                 , NRO_EMAIL_ENV_FORN
                                 , DM_FIN_EMAIL_FORN
                        ) values ( vn_notafiscal_id -- notafiscal_seq.nextval
                                 , rec.empresa_id
                                 , null
                                 , pk_csf.fkg_Sit_Docto_id ( '05' )
                                 , null
                                 , null
                                 , rec.id -- null
                                 , null
                                 , 'NFe'
                                 , null
                                 , null
                                 , 0 -- DM_IND_PAG
                                 , rec.modfiscal_id
                                 , 0 -- DM_IND_EMIT
                                 , 1 -- DM_IND_OPER
                                 , null -- DT_SAI_ENT
                                 , rec.dt_hr_recbto-- DT_EMISS --dt_inut 
                                 , vn_seq_nro_nf -- NRO_NF
                                 , rec.serie -- SERIE
                                 , null -- UF_EMBARQ
                                 , null -- LOCAL_EMBARQ
                                 , null -- NF_EMPENHO
                                 , null -- PEDIDO_COMPRA
                                 , null -- CONTRATO_COMPRA
                                 , 8 -- DM_ST_PROC
                                 , rec.dt_inut -- DT_ST_PROC
                                 , 1 -- DM_FORMA_EMISS
                                 , 3 -- DM_IMPRESSA -- 3-Não se aplica
                                 , 1 -- DM_TP_IMPR
                                 , 1 -- DM_TP_AMB
                                 , 1 -- DM_FIN_NFE
                                 , 0 -- DM_PROC_EMISS
                                 , '1' -- VERS_PROC
                                 , rec.DT_HR_RECBTO -- DT_AUT_SEFAZ
                                 , 1 -- DM_AUT_SEFAZ
                                 , 9999999 -- CIDADE_IBGE_EMIT
                                 , 99 -- UF_IBGE_EMIT
                                 , rec.dt_inut -- DT_HR_ENT_SIST
                                 , null -- NRO_CHAVE_NFE
                                 , null -- vn_cnf_nfe
                                 , null -- vn_dig_verif_chave
                                 , null -- VERS_APL
                                 , rec.DT_HR_RECBTO -- DT_HR_RECBTO
                                 , rec.NRO_PROTOCOLO -- NRO_PROTOCOLO
                                 , null --DIGEST_VALUE
                                 , null -- MSGWEBSERV_ID
                                 , '102' -- COD_MSG
                                 , 'Inutilização de número homologado' -- MOTIVO_RESP
                                 , null -- NFE_PROC_XML
                                 , 0 -- DM_ST_EMAIL
                                 , null -- ID_USUARIO_ERP
                                 , null -- IMPRESSORA_ID
                                 , null -- USUARIO_ID
                                 , vn_dm_st_integra -- DM_ST_INTEGRA
                                 , 0 -- VIAS_DANFE_CUSTOM
                                 , null -- NRO_CHAVE_NFE_ADIC
                                 , 0 -- NRO_TENTATIVAS_IMPR
                                 , null -- DT_ULT_TENTA_IMPR
                                 , null -- SUB_SERIE
                                 , null -- CODCONSITEMCONT_ID
                                 , null -- INFORCOMPDCTOFISCAL_ID
                                 , null -- COD_CTA
                                 , null -- DM_TP_LIGACAO
                                 , null -- DM_COD_GRUPO_TENSAO
                                 , null -- DM_TP_ASSINANTE
                                 , null -- SISTORIG_ID
                                 , null -- UNIDORG_ID
                                 , null -- SERIE_SCAN
                                 , null -- NRO_NF_SCAN
                                 , null -- HORA_SAI_ENT
                                 , null -- NRO_CHAVE_CTE_REF
                                 , null -- DT_CONT
                                 , null -- JUST_CONT
                                 , 0 -- DM_RET_NF_ERP
                                 , null -- XML_WSSINAL_SUFRAMA
                                 , 0 -- DM_ST_WSSINAL_SUFRAMA
                                 , 0 -- DM_ARM_NFE_TERC
                                 , 0 -- DM_REC_XML
                                 , 0 -- DM_DANFE_REC
                                 , 0 -- NRO_EMAIL_ENV_FORN
                                 , 0 -- DM_FIN_EMAIL_FORN
                                 );
            --
            -- Variavel global usada em logs de triggers (limpa)
            gv_objeto := 'pk_csf_api';
            gn_fase   := null;
            --
            vn_fase := 3.5;
            -- insere informações do emitente
            insert into nota_fiscal_emit ( ID
                                      , NOTAFISCAL_ID
                                      , NOME
                                      , LOGRAD
                                      , NRO
                                      , CIDADE_IBGE
                                      , UF
                                      , CNPJ
                                      , DM_REG_TRIB
                                      )
                               values ( notafiscalemit_seq.nextval
                                      , vn_notafiscal_id
                                      , 'Informar pelo XML'
                                      , 'SL'
                                      , 'SN'
                                      , 9999999
                                      , 'SN'
                                      , null -- CNPJ
                                      , 3 -- DM_REG_TRIB
                                      );
            --
            vn_fase := 3.6;
            --
            insert into nota_fiscal_dest ( ID
                             , NOTAFISCAL_ID
                             , CNPJ
                             , CPF
                             , NOME
                             , LOGRAD
                             , NRO
                             , COMPL
                             , BAIRRO
                             , CIDADE
                             , CIDADE_IBGE
                             , UF
                             , CEP
                             , COD_PAIS
                             , PAIS
                             , FONE
                             , IE
                             , SUFRAMA
                             , EMAIL
                             , USUARIO_ID
                             , DM_INTEGR_EDI
                             )
                      values ( notafiscaldest_seq.nextval
                             , vn_notafiscal_id -- NOTAFISCAL_ID
                             , null -- CNPJ
                             , null -- CPF
                             , 'Integrar pelo XML' -- NOME
                             , 'SL' -- LOGRAD
                             , 'SN' -- NRO
                             , null -- COMPL
                             , 'SB' -- BAIRRO
                             , 'SC' -- CIDADE
                             , 9999999 -- CIDADE_IBGE
                             , 'SN' -- UF
                             , null -- CEP
                             , null -- COD_PAIS
                             , null -- PAIS
                             , null -- FONE
                             , null -- IE
                             , null -- SUFRAMA
                             , null -- EMAIL
                             , null -- USUARIO_ID
                             , 2 -- DM_INTEGR_EDI
                             );
            --
            vn_fase := 3.7;
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
            pk_csf_api.gv_objeto := 'pk_csf_api.PKB_ATUAL_NFE_INUT';
            pk_csf_api.gn_fase   := vn_fase;
            --
            insert into nota_fiscal_total ( ID
                              , NOTAFISCAL_ID
                              , VL_BASE_CALC_ICMS
                              , VL_IMP_TRIB_ICMS
                              , VL_BASE_CALC_ST
                              , VL_IMP_TRIB_ST
                              , VL_TOTAL_ITEM
                              , VL_FRETE
                              , VL_SEGURO
                              , VL_DESCONTO
                              , VL_IMP_TRIB_II
                              , VL_IMP_TRIB_IPI
                              , VL_IMP_TRIB_PIS
                              , VL_IMP_TRIB_COFINS
                              , VL_OUTRA_DESPESAS
                              , VL_TOTAL_NF
                              , VL_SERV_NAO_TRIB
                              , VL_BASE_CALC_ISS
                              , VL_IMP_TRIB_ISS
                              , VL_PIS_ISS
                              , VL_COFINS_ISS
                              , VL_RET_PIS
                              , VL_RET_COFINS
                              , VL_RET_CSLL
                              , VL_BASE_CALC_IRRF
                              , VL_RET_IRRF
                              , VL_BASE_CALC_RET_PREV
                              , VL_RET_PREV
                              , VL_TOTAL_SERV
                              , VL_ABAT_NT
                              , VL_FORN
                              , VL_TERC
                              , VL_SERVICO
                              , VL_PIS_ST
                              , VL_COFINS_ST
                              )
                       values ( notafiscaltotal_seq.nextval
                              , vn_notafiscal_id -- NOTAFISCAL_ID
                              , 0 -- VL_BASE_CALC_ICMS
                              , 0 -- VL_IMP_TRIB_ICMS
                              , 0 -- VL_BASE_CALC_ST
                              , 0 -- VL_IMP_TRIB_ST
                              , 0 -- VL_TOTAL_ITEM
                              , 0 -- VL_FRETE
                              , 0 -- VL_SEGURO
                              , 0 -- VL_DESCONTO
                              , 0 -- VL_IMP_TRIB_II
                              , 0 -- VL_IMP_TRIB_IPI
                              , 0 -- VL_IMP_TRIB_PIS
                              , 0 -- VL_IMP_TRIB_COFINS
                              , 0 -- VL_OUTRA_DESPESAS
                              , 0 -- VL_TOTAL_NF
                              , 0 -- VL_SERV_NAO_TRIB
                              , 0 -- VL_BASE_CALC_ISS
                              , 0 -- VL_IMP_TRIB_ISS
                              , 0 -- VL_PIS_ISS
                              , 0 -- VL_COFINS_ISS
                              , 0 -- VL_RET_PIS
                              , 0 -- VL_RET_COFINS
                              , 0 -- VL_RET_CSLL
                              , 0 -- VL_BASE_CALC_IRRF
                              , 0 -- VL_RET_IRRF
                              , 0 -- VL_BASE_CALC_RET_PREV
                              , 0 -- VL_RET_PREV
                              , 0 -- VL_TOTAL_SERV
                              , 0 -- VL_ABAT_NT
                              , 0 -- VL_FORN
                              , 0 -- VL_TERC
                              , 0 -- VL_SERVICO
                              , 0 -- VL_PIS_ST
                              , 0 -- VL_COFINS_ST
                              );
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
            pk_csf_api.gv_objeto := 'pk_csf_api';
            pk_csf_api.gn_fase   := null;
            --
            vn_fase := 3.8;
            --
            insert into nota_fiscal_compl ( ID
                                          , NOTAFISCAL_ID
                                          , ID_ERP
                                          )
                                   values ( notafiscalcompl_seq.nextval --ID
                                          , vn_notafiscal_id -- NOTAFISCAL_ID
                                          , 0 -- ID_ERP
                                          );
            --
         else
            --
            vn_fase := 3.9;
            --
            -- Variavel global usada em logs de triggers (carrega)
            gv_objeto := 'pk_csf_api.pkb_atual_nfe_inut'; 
            gn_fase   := vn_fase;
            --
            -- relaciona a inutilização da NFe
            update nota_fiscal set dm_st_proc      = 8
                                 , dt_st_proc      = sysdate
                                 , sitdocto_id     = ( select id from sit_docto where cd = '05' )
                                 , inutilizanf_id  = rec.id
                                 , dm_st_integra   = vn_dm_st_integra
                                 , DT_AUT_SEFAZ    = rec.DT_HR_RECBTO -- DT_AUT_SEFAZ
                                 , DM_AUT_SEFAZ    = 1 -- DM_AUT_SEFAZ
                                 , DT_HR_RECBTO    = rec.DT_HR_RECBTO -- DT_HR_RECBTO
                                 , NRO_PROTOCOLO   = rec.NRO_PROTOCOLO -- NRO_PROTOCOLO
                                 , lote_id         = null
             where id = vn_notafiscal_id;
            --
            -- Variavel global usada em logs de triggers (limpa)
            gv_objeto := 'pk_csf_api';
            gn_fase   := null;
            --
         end if;
         --
         vn_seq_nro_nf := nvl(vn_seq_nro_nf,0) + 1;
         --
      end loop;
      --
      vn_fase := 4;
      -- atualiza domínio de relacionamento entre a Inutilização e a NFe
      update inutiliza_nota_fiscal set dm_integr_nf = 1 -- Com Nota Fiscal
       where id = rec.id;
      --
   end loop;
   --
   vn_fase := 5;
   --
   commit;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_atual_nfe_inut fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , ev_obj_referencia   => 'NOTA_FISCAL' );
      exception
         when others then
            null;
      end;
      --
END PKB_ATUAL_NFE_INUT;

---------------------------------------------------------------------------------------------------------------
-- Procedimento de atualização do campo NOTAFISCAL_ID da tabela CSF_CONS_SIT                                 --
-- Pega todos os registros que o campo NOTAFISCAL_ID estão nulos, verifica se sua chave de acesso existe     --
-- na tabela NOTA_FISCAL, se exitir relacionar o campo NOTA_FISCAL.ID com campo CSF_CONS_SIT.NOTAFISCCAL_ID --
---------------------------------------------------------------------------------------------------------------
PROCEDURE PKB_RELAC_NFE_CONS_SIT ( en_multorg_id  in mult_org.id%type )
IS
   --
   vn_csfconssit_id    csf_cons_sit.id%type;
   vn_fase             number := 0;
   vn_notafiscal_id    Nota_Fiscal.id%TYPE := null;
   vn_multorg_id       mult_org.id%type;
   vn_dm_st_proc       Nota_Fiscal.dm_st_proc%type := null;
   vn_loggenerico_id   number := null;
   vv_msg              varchar2(4000) := null;
   vv_ibge_estado      estado.ibge_estado%type;
   vd_dt_emiss         nota_fiscal.dt_emiss%type;
   vv_cnpj_emit        varchar2(14);
   vv_cod_mod          mod_fiscal.cod_mod%type;
   vv_serie            nota_fiscal.serie%type;
   vn_nro_nf           nota_fiscal.nro_nf%type;
   vn_dm_forma_emiss   nota_fiscal.dm_forma_emiss%type;
   vn_cnf_nfe          nota_fiscal.cnf_nfe%type;
   vn_dig_verif_chave  nota_fiscal.dig_verif_chave%type;
   vv_cod_part         pessoa.cod_part%type;
   vn_pessoa_id        pessoa.id%type;
   vn_dm_situacao      csf_cons_sit.dm_situacao%type;
   vv_tpevento         csf_cons_sit_evento.tpevento%type;
   vn_dm_ind_emit      nota_fiscal.dm_ind_emit%type;
   --
   vn_tipoeventosefaz_id  tipo_evento_sefaz.id%type;
   vn_qtde_ciencia_mde    number;
   vd_hr_evento           date;
   vn_dm_reg_co_mde_aut   empr_param_cons_mde.dm_reg_co_mde_aut%type;
   --
   cursor c_cons_sit is
   select cs.*
     from empresa e
        , csf_cons_sit cs
    where 1 = 1
      and e.multorg_id = en_multorg_id
      and cs.empresa_id = e.id
      and nvl(cs.notafiscal_id,0) <= 0
      and cs.dm_situacao          in (2, 3, 4)
      and length(cs.chnfe)         = 44
    order by cs.id;
   --
   -- NOta Fiscais com consulta e sem definição de situação
   cursor c_nf is
   select nf.id
     from empresa e
        , nota_fiscal nf
        , mod_fiscal  mf
    where 1 = 1
      and e.multorg_id = en_multorg_id
      and nf.empresa_id = e.id
      and nf.dm_arm_nfe_terc = 1
      and nf.dm_st_proc      = 0
      and mf.id              = nf.modfiscal_id
      and mf.cod_mod        <> '65'
    order by 1;
   --
BEGIN
   --
   vn_fase := 1;
   --
   for rec in c_cons_sit loop
      exit when c_cons_sit%notfound or (c_cons_sit%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_csfconssit_id := rec.id;
      --
      -- Verificar se exite NFe para a Chave de Acesso consultada
      -- vn_notafiscal_id := pk_csf.fkg_notafiscal_id_pela_chave ( en_nro_chave_nfe => rec.chnfe );
      --
      vv_ibge_estado := substr(rec.chnfe, 1, 2);
      --
      if rec.dhrecbto is not null then
         --
         vd_dt_emiss := rec.dhrecbto;
         --
      elsif pk_csf.fkg_data_valida('01/' || substr(rec.chnfe, 5, 2) || '/' || substr(rec.chnfe, 3, 2), 'dd/mm/yy') then
         --
         vd_dt_emiss := to_date('01/' || substr(rec.chnfe, 5, 2) || '/' || substr(rec.chnfe, 3, 2), 'dd/mm/yy');
         --
      else
         --
         vd_dt_emiss := sysdate;
         --
      end if;
      --
      vn_fase := 3;
      --
      vv_cnpj_emit := substr(rec.chnfe, 7, 14);
      vv_cod_mod   := substr(rec.chnfe, 21, 2);
      vv_serie     := to_number(substr(rec.chnfe, 23, 3));
      vn_nro_nf    := substr(rec.chnfe, 26, 9);
      --
      vn_fase := 4;
      --
      vn_dm_forma_emiss  := substr(rec.chnfe, 35, 1);
      vn_cnf_nfe         := substr(rec.chnfe, 36, 8);
      vn_dig_verif_chave := substr(rec.chnfe, 44, 1);
      -- Recupera o ID da nota fiscal
      vn_notafiscal_id := pk_csf.fkg_nf_id_terceiro_pela_chave ( en_nro_chave_nfe => rec.chnfe );
      vn_multorg_id    := pk_csf.fkg_multorg_id_empresa ( en_empresa_id => rec.empresa_id );
      -- busca a pessoa
      vn_pessoa_id := pk_csf.fkg_Pessoa_id_cpf_cnpj ( en_multorg_id => vn_multorg_id
                                                    , en_cpf_cnpj   => vv_cnpj_emit );
      --
      vv_cod_part := pk_csf.fkg_pessoa_cod_part ( en_pessoa_id => vn_pessoa_id );
      --
      if nvl(vn_notafiscal_id,0) <= 0 then
         --
         vn_notafiscal_id := pk_csf.fkg_busca_notafiscal_id ( en_multorg_id      => vn_multorg_id
                                                            , en_empresa_id      => rec.empresa_id
                                                            , ev_cod_mod         => vv_cod_mod
                                                            , ev_serie           => vv_serie
                                                            , en_nro_nf          => vn_nro_nf
                                                            , en_dm_ind_oper     => 0
                                                            , en_dm_ind_emit     => 1
                                                            , ev_cod_part        => null
							    , en_dm_arm_nfe_terc => 1 );
         --
      end if;
      --
      begin
         --
         select e.tpevento
           into vv_tpevento
           from csf_cons_sit_evento e
          where e.csfconssit_id = rec.id;
         --
      exception
         when others then
            vv_tpevento := null;
      end;
      --
      vn_fase := 5;
      --
      -- Se encontrou a NFe para a Chave de Acesso, relacionar o ID
      if nvl(vn_notafiscal_id,0) > 0 then
         --
         vn_fase := 6;
         --
         -- Chama rotina que atualiza a tabela csf_cons_sit
         pk_csf_api_cons_sit.gt_row_csf_cons_sit               := null;
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.empresa_id    := rec.empresa_id;
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.id            := rec.id;
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.notafiscal_id := vn_notafiscal_id;
         --
         pk_csf_api_cons_sit.pkb_ins_atu_csf_cons_sit ( est_row_csf_cons_sit => pk_csf_api_cons_sit.gt_row_csf_cons_sit
                                                      , ev_campo_atu         => 'notafiscal_id'
                                                      , en_tp_rotina         => 0 -- atualização
                                                      , ev_rotina_orig       => 'pk_csf_api.pkb_relac_nfe_cons_sit' 
                                                      );
         --
         if trim(vv_tpevento) = '110111' then -- Cancelamento registrado
            --
            vn_dm_st_proc := 7; -- Cancelado
            --
            vv_msg := 'Consulta da NFe na Sefaz, com a situação Cancelamento registrado';
            --
         else
            --
            vn_fase := 7;
            --
            vn_dm_st_proc := case
                                when rec.dm_situacao = 2 then 4 -- Autorizado o uso da NF-e (100)
                                when rec.dm_situacao = 3 then 7 -- Cancelamento da NF-e Homologado (101)
                                when rec.dm_situacao = 4 then 6 -- Uso denegado (110)
                                when rec.dm_situacao = 5 then 5 -- Rejeitada
                                when rec.dm_situacao = 6 then 5 -- Rejeitada
                             else 0
                             end;
            --
            vn_fase := 8;
            --
            vv_msg := 'Consulta da NFe na Sefaz, com a situação '||pk_csf.fkg_dominio( ev_dominio => 'CSF_CONS_SIT.DM_SITUACAO'
                                                                                     , ev_vl      => rec.dm_situacao );
            --
         end if;
         --
         vn_fase := 9;
         --
         if rec.dm_rec_fisico = 1 then -- Sim, recebimento fisico da DANFE
            --
            vv_msg := vv_msg||', havendo o recebimento físico da DANFE';
            --
         end if;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => 'Chave de acesso: ' || rec.chnfe
                             , ev_resumo           => vv_msg
                             , en_tipo_log         => CONS_SIT_NFE_SEFAZ
                             , en_referencia_id    => vn_notafiscal_id
                             , ev_obj_referencia   => 'NOTA_FISCAL' );
         --
         vn_fase := 10;
         --
         if nvl(trim(rec.CSTAT), '0') <> '526' then -- não é "Rejeição: Consulta a uma Chave de Acesso muito antiga"
            --
            -- Atualiza o status da NFe
            if rec.dm_rec_fisico = 1 then -- Sim, recebimento fisico da DANFE
               --
               -- Variavel global usada em logs de triggers (carrega)
               gv_objeto := 'pk_csf_api.pkb_relac_nfe_cons_sit'; 
               gn_fase   := vn_fase;
               --
               update nota_fiscal
                  set dm_st_proc    = vn_dm_st_proc
                    , dm_danfe_rec  = 1
                    , dm_ret_nf_erp = 0
                where id = vn_notafiscal_id
                  and dm_st_proc <> vn_dm_st_proc;
               --
               -- Variavel global usada em logs de triggers (limpa)
               gv_objeto := 'pk_csf_api';
               gn_fase   := null;
               --
            else
               --
               -- Variavel global usada em logs de triggers (carrega)
               gv_objeto := 'pk_csf_api.pkb_relac_nfe_cons_sit'; 
               gn_fase   := vn_fase;
               --
               update nota_fiscal
                  set dm_st_proc    = vn_dm_st_proc
                    , dm_ret_nf_erp = 0
                where id = vn_notafiscal_id
                  and dm_st_proc <> vn_dm_st_proc;
               --
               -- Variavel global usada em logs de triggers (limpa)
               gv_objeto := 'pk_csf_api';
               gn_fase   := null;
               --
            end if;
            --
         end if;
         --
      elsif rec.dm_rec_fisico = 1 then
         --
         vn_fase := 11;
         -- Cria o registro da Nota Fiscal, conforme chave de acesso
         -- quebra os dados da chave de acesso
         if vn_dm_forma_emiss not in (1, 2, 3, 4, 5, 6, 7, 8, 9) then
            vn_dm_forma_emiss := 1;
         end if;
         --
         vn_fase := 12;
         -- insere dados da nota
         vn_dm_st_proc := case
                             when rec.dm_situacao = 2 then 4 -- Autorizado o uso da NF-e (100)
                             when rec.dm_situacao = 3 then 7 -- Cancelamento da NF-e Homologado (101)
                             when rec.dm_situacao = 4 then 6 -- Uso denegado (110)
                             when rec.dm_situacao = 5 then 5 -- Rejeitada
                             when rec.dm_situacao = 6 then 5 -- Rejeitada
                          else 0
                          end;
         --
         vn_fase := 13;
         --
         select notafiscal_seq.nextval
           into vn_notafiscal_id
           from dual;
         --
         vn_fase := 14;
         --
         begin
            --
            -- Variavel global usada em logs de triggers (carrega)
            gv_objeto := 'pk_csf_api.pkb_relac_nfe_cons_sit'; 
            gn_fase   := vn_fase;
            --
            insert into nota_fiscal ( id
                                 , empresa_id
                                 , pessoa_id
                                 , sitdocto_id
                                 , natoper_id
                                 , lote_id
                                 , inutilizanf_id
                                 , versao
                                 , id_tag_nfe
                                 , pk_nitem
                                 , nat_oper
                                 , dm_ind_pag
                                 , modfiscal_id
                                 , dm_ind_emit
                                 , dm_ind_oper
                                 , dt_sai_ent
                                 , dt_emiss
                                 , nro_nf
                                 , serie
                                 , uf_embarq
                                 , local_embarq
                                 , nf_empenho
                                 , pedido_compra
                                 , contrato_compra
                                 , dm_st_proc
                                 , dt_st_proc
                                 , dm_forma_emiss
                                 , dm_impressa
                                 , dm_tp_impr
                                 , dm_tp_amb
                                 , dm_fin_nfe
                                 , dm_proc_emiss
                                 , vers_proc
                                 , dt_aut_sefaz
                                 , dm_aut_sefaz
                                 , cidade_ibge_emit
                                 , uf_ibge_emit
                                 , dt_hr_ent_sist
                                 , nro_chave_nfe
                                 , cnf_nfe
                                 , dig_verif_chave
                                 , vers_apl
                                 , dt_hr_recbto
                                 , nro_protocolo
                                 , digest_value
                                 , msgwebserv_id
                                 , cod_msg
                                 , motivo_resp
                                 , nfe_proc_xml
                                 , dm_st_email
                                 , id_usuario_erp
                                 , impressora_id
                                 , usuario_id
                                 , dm_st_integra
                                 , vias_danfe_custom
                                 , nro_chave_nfe_adic
                                 , nro_tentativas_impr
                                 , dt_ult_tenta_impr
                                 , sub_serie
                                 , codconsitemcont_id
                                 , inforcompdctofiscal_id
                                 , cod_cta
                                 , dm_tp_ligacao
                                 , dm_cod_grupo_tensao
                                 , dm_tp_assinante
                                 , sistorig_id
                                 , unidorg_id
                                 , serie_scan
                                 , nro_nf_scan
                                 , hora_sai_ent
                                 , nro_chave_cte_ref
                                 , dt_cont
                                 , just_cont
                                 , dm_ret_nf_erp
                                 , xml_wssinal_suframa
                                 , dm_st_wssinal_suframa
                                 , dm_arm_nfe_terc
                                 , dm_rec_xml
                                 , dm_danfe_rec
                                 , nro_email_env_forn
                                 , dm_fin_email_forn )
                          values ( vn_notafiscal_id
                                 , rec.empresa_id
                                 , vn_pessoa_id
                                 , pk_csf.fkg_Sit_Docto_id ( '00' )
                                 , null
                                 , null
                                 , null
                                 , null
                                 , 'NFe' || rec.chnfe
                                 , null
                                 , null
                                 , 0 -- DM_IND_PAG
                                 , pk_csf.fkg_mod_fiscal_id ( vv_cod_mod )
                                 , 1 -- dm_ind_emit
                                 , 0 -- dm_ind_oper
                                 , null -- dt_sai_ent
                                 , vd_dt_emiss -- dt_emiss
                                 , vn_nro_nf -- nro_nf
                                 , vv_serie -- serie
                                 , null -- uf_embarq
                                 , null -- local_embarq
                                 , null -- nf_empenho
                                 , null -- pedido_compra
                                 , null -- contrato_compra
                                 , vn_dm_st_proc -- dm_st_proc
                                 , sysdate -- dt_st_proc
                                 , vn_dm_forma_emiss -- dm_forma_emiss
                                 , 3 -- dm_impressa -- 3-Não se aplica
                                 , 1 -- dm_tp_impr
                                 , 1 -- dm_tp_amb
                                 , 1 -- dm_fin_nfe
                                 , 0 -- dm_proc_emiss
                                 , '1' -- vers_proc
                                 , rec.dhrecbto -- dt_aut_sefaz
                                 , 1 -- dm_aut_sefaz
                                 , 9999999 -- cidade_ibge_emit
                                 , vv_ibge_estado -- uf_ibge_emit
                                 , sysdate -- dt_hr_ent_sist
                                 , rec.chnfe -- nro_chave_nfe
                                 , vn_cnf_nfe
                                 , vn_dig_verif_chave
                                 , rec.versao -- vers_apl
                                 , rec.dhrecbto -- dt_hr_recbto
                                 , rec.nprot -- nro_protocolo
                                 , rec.digval --digest_value
                                 , null -- msgwebserv_id
                                 , rec.cstat -- cod_msg
                                 , rec.xmotivo -- motivo_resp
                                 , null -- nfe_proc_xml
                                 , 1 -- dm_st_email
                                 , null -- id_usuario_erp
                                 , null -- impressora_id
                                 , null -- usuario_id
                                 , 0 -- dm_st_integra
                                 , 0 -- vias_danfe_custom
                                 , null -- nro_chave_nfe_adic
                                 , 0 -- nro_tentativas_impr
                                 , null -- dt_ult_tenta_impr
                                 , null -- sub_serie
                                 , null -- codconsitemcont_id
                                 , null -- inforcompdctofiscal_id
                                 , null -- cod_cta
                                 , null -- dm_tp_ligacao
                                 , null -- dm_cod_grupo_tensao
                                 , null -- dm_tp_assinante
                                 , null -- sistorig_id
                                 , null -- unidorg_id
                                 , null -- serie_scan
                                 , null -- nro_nf_scan
                                 , null -- hora_sai_ent
                                 , null -- nro_chave_cte_ref
                                 , null -- dt_cont
                                 , null -- just_cont
                                 , 0 -- dm_ret_nf_erp -- Não
                                 , null -- xml_wssinal_suframa
                                 , 0 -- dm_st_wssinal_suframa
                                 , 1 -- dm_arm_nfe_terc
                                 , 0 -- dm_rec_xml
                                 , rec.dm_rec_fisico -- dm_danfe_rec
                                 , 0 -- nro_email_env_forn
                                 , 0 -- dm_fin_email_forn
                                 );
            --
            -- Variavel global usada em logs de triggers (limpa)
            gv_objeto := 'pk_csf_api';
            gn_fase   := null;
            --
            vn_fase := 15;
            -- insere informações do emitente
            insert into nota_fiscal_emit ( id
                                      , notafiscal_id
                                      , nome
                                      , lograd
                                      , nro
                                      , cidade_ibge
                                      , uf
                                      , cnpj
                                      , dm_reg_trib
                                      )
                               values ( notafiscalemit_seq.nextval
                                      , vn_notafiscal_id
                                      , 'Informar pelo XML'
                                      , 'SL'
                                      , 'SN'
                                      , 9999999
                                      , pk_csf.fkg_estado_id_sigla ( pk_csf.fkg_estado_ibge_id ( vv_ibge_estado ) )
                                      , vv_cnpj_emit -- cnpj
                                      , 3 -- dm_reg_trib
                                      );
            --
            vn_fase := 16;
            --
            insert into nota_fiscal_dest( id
                                     , notafiscal_id
                                     , cnpj
                                     , cpf
                                     , nome
                                     , lograd
                                     , nro
                                     , compl
                                     , bairro
                                     , cidade
                                     , cidade_ibge
                                     , uf
                                     , cep
                                     , cod_pais
                                     , pais
                                     , fone
                                     , ie
                                     , suframa
                                     , email
                                     , usuario_id
                                     , dm_integr_edi )
                               values( notafiscaldest_seq.nextval
                                     , vn_notafiscal_id -- notafiscal_id
                                     , null -- cnpj
                                     , null -- cpf
                                     , 'Integrar pelo XML' -- nome
                                     , 'SL' -- lograd
                                     , 'SN' -- nro
                                     , null -- compl
                                     , 'SB' -- bairro
                                     , 'SC' -- cidade
                                     , 9999999 -- cidade_ibge
                                     , pk_csf.fkg_estado_id_sigla ( pk_csf.fkg_estado_ibge_id ( vv_ibge_estado ) ) -- uf
                                     , null -- cep
                                     , null -- cod_pais
                                     , null -- pais
                                     , null -- fone
                                     , null -- ie
                                     , null -- suframa
                                     , null -- email
                                     , null -- usuario_id
                                     , 2 ); -- dm_integr_edi
            --
            vn_fase := 17;
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
            pk_csf_api.gv_objeto := 'pk_csf_api.PKB_RELAC_NFE_CONS_SIT';
            pk_csf_api.gn_fase   := vn_fase;
            --
            insert into nota_fiscal_total ( id
                              , notafiscal_id
                              , vl_base_calc_icms
                              , vl_imp_trib_icms
                              , vl_base_calc_st
                              , vl_imp_trib_st
                              , vl_total_item
                              , vl_frete
                              , vl_seguro
                              , vl_desconto
                              , vl_imp_trib_ii
                              , vl_imp_trib_ipi
                              , vl_imp_trib_pis
                              , vl_imp_trib_cofins
                              , vl_outra_despesas
                              , vl_total_nf
                              , vl_serv_nao_trib
                              , vl_base_calc_iss
                              , vl_imp_trib_iss
                              , vl_pis_iss
                              , vl_cofins_iss
                              , vl_ret_pis
                              , vl_ret_cofins
                              , vl_ret_csll
                              , vl_base_calc_irrf
                              , vl_ret_irrf
                              , vl_base_calc_ret_prev
                              , vl_ret_prev
                              , vl_total_serv
                              , vl_abat_nt
                              , vl_forn
                              , vl_terc
                              , vl_servico
                              , vl_pis_st
                              , vl_cofins_st
                              )
                       values ( notafiscaltotal_seq.nextval
                              , vn_notafiscal_id -- notafiscal_id
                              , 0 -- vl_base_calc_icms
                              , 0 -- vl_imp_trib_icms
                              , 0 -- vl_base_calc_st
                              , 0 -- vl_imp_trib_st
                              , 0 -- vl_total_item
                              , 0 -- vl_frete
                              , 0 -- vl_seguro
                              , 0 -- vl_desconto
                              , 0 -- vl_imp_trib_ii
                              , 0 -- vl_imp_trib_ipi
                              , 0 -- vl_imp_trib_pis
                              , 0 -- vl_imp_trib_cofins
                              , 0 -- vl_outra_despesas
                              , 0 -- vl_total_nf
                              , 0 -- vl_serv_nao_trib
                              , 0 -- vl_base_calc_iss
                              , 0 -- vl_imp_trib_iss
                              , 0 -- vl_pis_iss
                              , 0 -- vl_cofins_iss
                              , 0 -- vl_ret_pis
                              , 0 -- vl_ret_cofins
                              , 0 -- vl_ret_csll
                              , 0 -- vl_base_calc_irrf
                              , 0 -- vl_ret_irrf
                              , 0 -- vl_base_calc_ret_prev
                              , 0 -- vl_ret_prev
                              , 0 -- vl_total_serv
                              , 0 -- vl_abat_nt
                              , 0 -- vl_forn
                              , 0 -- vl_terc
                              , 0 -- vl_servico
                              , 0 -- vl_pis_st
                              , 0 -- vl_cofins_st
                              );
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
            pk_csf_api.gv_objeto := 'pk_csf_api';
            pk_csf_api.gn_fase   := null;
            --
            vn_fase := 18;
            -- registra o log
            vv_msg := 'NFe criada a partir da consulta da Situação na Sefaz';
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => 'Chave de acesso: ' || rec.chnfe
                             , ev_resumo           => vv_msg
                             , en_tipo_log         => CONS_SIT_NFE_SEFAZ
                             , en_referencia_id    => vn_notafiscal_id
                             , ev_obj_referencia   => 'NOTA_FISCAL' );
            --
            vn_fase := 19;
            --
            vv_msg := 'Consulta da NFe na Sefaz, com a situação '||pk_csf.fkg_dominio( ev_dominio => 'CSF_CONS_SIT.DM_SITUACAO'
                                                                                  , ev_vl      => rec.dm_situacao );
            --
            vn_fase := 20;
            --
            if rec.dm_rec_fisico = 1 then -- Sim, recebimento fisico da DANFE
               --
               vv_msg := vv_msg||', havendo o recebimento físico da DANFE';
               --
            end if;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => 'Chave de acesso: ' || rec.chnfe
                             , ev_resumo           => vv_msg
                             , en_tipo_log         => cons_sit_nfe_sefaz
                             , en_referencia_id    => vn_notafiscal_id
                             , ev_obj_referencia   => 'NOTA_FISCAL' );
            --
         exception
            when others then
               null;
         end;
         --
      end if;
      --
      vn_fase := 21;
      --
      vn_dm_reg_co_mde_aut := pk_csf.fkg_empresa_reg_co_mde_aut ( en_empresa_id => rec.empresa_id );
      --
      vd_hr_evento := NEW_TIME(systimestamp,'GMT', 'ADT');
      --
      if vd_hr_evento < rec.dhrecbto then
         --
         vd_hr_evento := rec.dhrecbto;
         --
      end if;
      --
      vn_fase := 21.1;
      --
      begin
         --
         select dm_ind_emit into vn_dm_ind_emit
           from nota_fiscal
          where id = vn_notafiscal_id;
         --
      exception
         when others then
            vn_dm_ind_emit := 0;
      end;
      --
      if nvl(vn_dm_reg_co_mde_aut,0) = 1 -- Sim regista a Ciencia da operação
         and vn_dm_ind_emit = 1 -- Terceiros
         then
         --
         vn_qtde_ciencia_mde   := 0;
         vn_tipoeventosefaz_id := pk_csf.fkg_tipoeventosefaz_id( '210210' );
         --
         begin
            --
            select count(1)
              into vn_qtde_ciencia_mde
              from nota_fiscal_mde
             where notafiscal_id       = vn_notafiscal_id
               and dm_situacao         in (0, 1, 2, 3)
               and tipoeventosefaz_id  = vn_tipoeventosefaz_id;
            --
         exception
            when others then
               vn_qtde_ciencia_mde := 0;
         end;
         --
         if nvl(vn_qtde_ciencia_mde,0) <= 0 then
            --
            begin
               --
               if not fkg_ck_nota_fiscal_mde_registr(vn_notafiscal_id, vn_tipoeventosefaz_id) then
                  --
               insert into nota_fiscal_mde ( ID
                                           , NOTAFISCAL_ID
                                           , DM_SITUACAO
                                           , DT_HR_EVENTO
                                           , TIPOEVENTOSEFAZ_ID
                                           , DM_TIPO_INTEGRA										   
                                           )
                                    values ( notafiscalmde_seq.nextval --ID
                                           , vn_notafiscal_id -- NOTAFISCAL_ID
                                           , 0 -- DM_SITUACAO
                                           , vd_hr_evento -- DT_HR_EVENTO
                                           , vn_tipoeventosefaz_id --TIPOEVENTOSEFAZ_ID
                                           , 0 -- Tipo de integração do evento. (0-Gerado automático pela aplicação/1-Manualmente no portal/2-Integração Webservice)										   
                                           );
               --
               end if;                               
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
         --
      end if;
      --
      commit;
      --
   end loop;
   --
   vn_fase := 22;
   --
   for rec in c_nf loop
      exit when c_nf%notfound or (c_nf%notfound) is null;
      --
      vn_fase := 22.1;
      --
      begin
         --
         select a.dm_situacao
           into vn_dm_situacao
           from csf_cons_sit a
          where a.id in ( select max(b.id)
                            from csf_cons_sit b
                           where b.notafiscal_id = rec.id
                             and b.dm_situacao <> 1 );
         --
      exception
         when others then
            vn_dm_situacao := 0;
      end;
      --
      vn_fase := 22.2;
      --
      if nvl(vn_dm_situacao,0) <> 0 then
         --
         vn_fase := 23;
         --
         vn_dm_st_proc := case
                             when vn_dm_situacao = 2 then 4 -- Autorizado o uso da NF-e (100)
                             when vn_dm_situacao = 3 then 7 -- Cancelamento da NF-e Homologado (101)
                             when vn_dm_situacao = 4 then 6 -- Uso denegado (110)
                             when vn_dm_situacao = 5 then 5 -- Rejeitada
                             when vn_dm_situacao = 6 then 5 -- Rejeitada
                          else 0
                          end;
         --
         vn_fase := 23.1;
         --
         -- Variavel global usada em logs de triggers (carrega)
         gv_objeto := 'pk_csf_api.pkb_relac_nfe_cons_sit'; 
         gn_fase   := vn_fase;
         --
         update nota_fiscal 
            set dm_st_proc     = vn_dm_st_proc
              , dm_ret_nf_erp  = 0
          where id = rec.id
            and dm_st_proc <> vn_dm_st_proc;
         --
         -- Variavel global usada em logs de triggers (limpa)
         gv_objeto := 'pk_csf_api';
         gn_fase   := null;
         --
      end if;
      --
      vn_fase := 24;
      --
      commit;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_relac_nfe_cons_sit fase('||vn_fase||') id ('||vn_csfconssit_id||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , ev_obj_referencia   => 'NOTA_FISCAL' );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END PKB_RELAC_NFE_CONS_SIT;

-------------------------------------------
-- Atualiza Situação do Documento Fiscal --
-------------------------------------------
PROCEDURE PKB_ATUAL_SIT_DOCTO ( en_multorg_id  in mult_org.id%type )
IS
   --
   vn_fase            number := 0;
   vn_sitdocto_id     sit_docto.id%type;
   vn_dm_canc_extemp  nota_fiscal_canc.dm_canc_extemp%type;
   --
   pragma          autonomous_transaction;
   --
   cursor c_nf is
   select nf.id          notafiscal_id
        , nf.dm_st_proc  dm_st_proc
     from empresa        e
        , nota_fiscal    nf
        , sit_docto      sd
    where 1 = 1
      and e.multorg_id   = en_multorg_id
      and nf.empresa_id  = e.id
      and nf.dm_st_proc  in ( 6, 7, 8 ) -- 6-Denegada, 7-Cancelado e 8-Inutilizado
      and sd.id          = nf.sitdocto_id
      and sd.cd          = '00';
   --
BEGIN
   --
   vn_fase := 1;
   --
   for rec in c_nf loop
      exit when c_nf%notfound or (c_nf%notfound) is null;
      --
      vn_fase := 2;
      --
      if rec.dm_st_proc = 6 then -- Denegada
         --
         vn_sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => '04' ); -- NF-e ou CT-e denegado
         --
      elsif rec.dm_st_proc = 7 then -- Cancelado
            --
            begin
               select dm_canc_extemp
                 into vn_dm_canc_extemp
                 from nota_fiscal_canc
                where notafiscal_id = rec.notafiscal_id;
            exception
               when others then
                  vn_dm_canc_extemp := 0;
            end;
            --
            if nvl(vn_dm_canc_extemp,0) = 0 then -- Não é extemporâneo
               vn_sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => '02' ); -- Documento cancelado
            else
               vn_sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => '03' ); -- Documento cancelado extemporâneo
            end if;
            --
      elsif rec.dm_st_proc = 8 then -- Inutilizado
            --
            vn_sitdocto_id := pk_csf.fkg_Sit_Docto_id ( ev_cd => '05' ); -- NF-e ou CT-e ¿ Numeração inutilizada
            --
      else
         --
         vn_sitdocto_id := null;
         --
      end if;
      --
      vn_fase := 3;
      --
      update nota_fiscal
         set sitdocto_id = vn_sitdocto_id
       where id = rec.notafiscal_id;
      --
   end loop;
   --
   vn_fase := 4;
   --
   commit;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_atual_sit_docto fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                            , ev_obj_referencia   => 'NOTA_FISCAL' );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END PKB_ATUAL_SIT_DOCTO;

--------------------------------------------------------------------------------------------------------
-- Metodo para consultar NFe de Terceiro, com "Data de Autorização" menor que sete dias da data atual --
-- serve para verificar se o emitente da NFe cancelou a mesma                                         --
--------------------------------------------------------------------------------------------------------
PROCEDURE PKB_CONS_NFE_TERC ( en_multorg_id  in mult_org.id%type )
IS
   --
   vn_fase      number := 0;
   vn_qtde_cons number := 0;
   --
   cursor c_nf is
   select nf.*
     from empresa e
        , nota_fiscal nf
        , mod_fiscal  mf
    where 1 = 1
      and e.multorg_id       = en_multorg_id
      and nf.empresa_id      = e.id
      and mf.id              = nf.modfiscal_id
      and nf.dm_arm_nfe_terc = 1
      and nf.dm_ind_emit     = 1
      and nf.dm_st_proc      = 4
      and mf.cod_mod         in ('55','65')
      and (trunc(sysdate) - trunc(nf.dt_hr_ent_sist)) <= 2
    order by nf.id;
   --
   -- NOta Fiscais de recebimento de XML sem consulta
   cursor c_nf_zero is
   select nf.id, nf.dm_tp_amb, nf.empresa_id, nf.nro_chave_nfe
     from empresa e
        , nota_fiscal nf
        , mod_fiscal    mf
    where 1 = 1
      and nf.empresa_id = e.id
      and mf.id              = nf.modfiscal_id
      and nf.dm_arm_nfe_terc = 1
      and nf.dm_st_proc not in (4, 6, 7, 8)
      and mf.cod_mod        in ('55','65')
      and (trunc(sysdate) - trunc(nf.dt_hr_ent_sist)) <= 2
      and e.multorg_id       = en_multorg_id
    order by 1;
   --
BEGIN
   --
   vn_fase := 1;
   --
   for rec in c_nf loop
      exit when c_nf%notfound or (c_nf%notfound) is null;
      --
      vn_fase := 2;
      --
      if FKG_CHECA_CHAVE_ENVIO_PENDENTE(rec.nro_chave_nfe) = 0 then 
         --
         -- Chama rotina que atualiza ou insere a tabela csf_cons_sit
         pk_csf_api_cons_sit.gt_row_csf_cons_sit                  := null;
	   --
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.id               :=  csfconssit_seq.nextval; -- id
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.empresa_id       :=  rec.empresa_id; -- empresa_id
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.notafiscal_id    :=  null; -- notafiscal_id
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.usuario_id       :=  null; -- usuario_id
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.referencia       :=  null; -- referencia
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.chnfe            :=  rec.nro_chave_nfe; --chnfe
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.codufibge        :=  substr(rec.nro_chave_nfe,1,2); --codufibge
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dm_tp_cons       :=  6; -- dm_tp_cons -- Automática através de integração table/view
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dm_situacao      :=  1; -- dm_situacao -- consulta pendente
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dt_hr_cons_sit   :=  sysdate; -- dt_hr_cons_sit
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.versao           :=  null; -- versao
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.tpamb            :=  rec.dm_tp_amb; -- tpamb
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.veraplic         :=  null; -- veraplic
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.cstat            :=  null; -- cstat
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.xmotivo          :=  null; -- xmotivo
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.cuf              :=  null; -- cuf
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dhrecbto         :=  null; -- dhrecbto
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.nprot            :=  null; -- nprot
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.digval           :=  null; -- digval
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.signature        :=  null; -- signature
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dm_rec_fisico    :=  0; -- dm_rec_fisico
         --
         pk_csf_api_cons_sit.pkb_ins_atu_csf_cons_sit ( est_row_csf_cons_sit => pk_csf_api_cons_sit.gt_row_csf_cons_sit
                                                      , ev_campo_atu         => null          
                                                      , en_tp_rotina         => 1 -- inserção
                                                      , ev_rotina_orig       => 'pk_csf_api.pkb_cons_nfe_terc' 
                                                      );
	   --
      end if;
      --
      vn_fase := 3;
      --
      commit;
      --
   end loop;
   --
   vn_fase := 4;
   -- pega as NFE de recebimento de XML com Situação 0-Não validado
   for rec in c_nf_zero loop
      exit when c_nf_zero%notfound or (c_nf_zero%notfound) is null;
      --
      vn_fase := 5;
      --
      if FKG_CHECA_CHAVE_ENVIO_PENDENTE(rec.nro_chave_nfe) = 0 then 
         --
         -- Chama rotina que atualiza ou insere a tabela csf_cons_sit
         pk_csf_api_cons_sit.gt_row_csf_cons_sit                  := null;
	 --
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.id	        :=	csfconssit_seq.nextval; -- id
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.empresa_id	:=	rec.empresa_id;
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.notafiscal_id	:=	rec.id; -- notafiscal_id
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.usuario_id	:=	null; -- usuario_id
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.referencia	:=	null; -- referencia
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.chnfe	        :=	rec.nro_chave_nfe; --chnfe
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.codufibge	:=	substr(rec.nro_chave_nfe, 1, 2); --codufibge
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dm_tp_cons	:=	6; -- dm_tp_cons -- Automática através de integração table/view
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dm_situacao	:=	1; -- dm_situacao -- consulta pendente
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dt_hr_cons_sit	:=	sysdate; -- dt_hr_cons_sit
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.versao	        :=	null; -- versao
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.tpamb	        :=	rec.dm_tp_amb; -- tpamb
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.veraplic	:=	null; -- veraplic
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.cstat	        :=	null; -- cstat
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.xmotivo	:=	null; -- xmotivo
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.cuf	        :=	null; -- cuf
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dhrecbto	:=	null; -- dhrecbto
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.nprot	        :=	null; -- nprot
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.digval	        :=	null; -- digval
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.signature	:=	null; -- signature
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dm_rec_fisico 	:=	0; -- dm_rec_fisico
         --
         pk_csf_api_cons_sit.pkb_ins_atu_csf_cons_sit ( est_row_csf_cons_sit => pk_csf_api_cons_sit.gt_row_csf_cons_sit
                                                      , ev_campo_atu         => null          
                                                      , en_tp_rotina         => 1 -- inserção
                                                      , ev_rotina_orig       => 'pk_csf_api.pkb_cons_nfe_terc'
                                                      );
	 --
      end if;
      --
      vn_fase := 6;
      --
      commit;
      --
   end loop;
   --
EXCEPTION
   when others then
      raise_application_error(-20101,'Erro na pk_csf_api.pkb_cons_nfe_terc fase('||vn_fase||'):'||sqlerrm);
END PKB_CONS_NFE_TERC;

-------------------------------------------------------------------------------
-- Função retorna a Valor Base de Cálculo do PIS/Cofins conforme o ITEMNF_ID --
-------------------------------------------------------------------------------
FUNCTION FKG_VL_BASE_CALC_PC_ITEMNF ( EN_ITEMNF_ID IN ITEM_NOTA_FISCAL.ID%TYPE )
         RETURN IMP_ITEMNF.VL_BASE_CALC%TYPE IS
   --
   vn_fase         number := null;
   vn_vl_base_calc imp_itemnf.vl_base_calc%type := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   if nvl(en_itemnf_id,0) > 0 then
      --
      vn_fase := 2;
      -- pega valores do item
      begin
         --
         select ( ( nvl(inf.vl_item_bruto,0) + nvl(inf.vl_frete,0) + nvl(inf.vl_seguro,0) + nvl(inf.vl_outro,0) ) 
                  - nvl(inf.vl_desc,0) )
           into vn_vl_base_calc
           from item_nota_fiscal inf
          where inf.id = en_itemnf_id;
         --
      exception
         when others then
            vn_vl_base_calc  := 0;
      end;
      --
      vn_fase := 3;
      --
   end if;
   --
   vn_fase := 4;
   --
   return vn_vl_base_calc;
   --
EXCEPTION
   when no_data_found then
      return 0;
   when others then
      raise_application_error(-20101, 'Erro na fkg_vl_base_calc_pc_itemnf fase('||vn_fase||'): '||sqlerrm);
END FKG_VL_BASE_CALC_PC_ITEMNF;

---------------------------------------------------
-- Procedimento de acerta pessoa emissão propria --
---------------------------------------------------
PROCEDURE PKB_ACERTA_PESSOA_EMISS_PROP ( EN_EMPRESA_ID IN EMPRESA.ID%TYPE
                                       , ED_DATA       IN DATE
                                       ) 
IS
   --
   vn_pessoa_id number;
   --
   cursor c_nf is
   select nfd.*
     from empresa          em
        , nota_fiscal      nf
        , nota_fiscal_dest nfd
    where em.id = EN_EMPRESA_ID
      and nf.empresa_id        = em.id
      and nf.dm_arm_nfe_terc   = 0
      and nvl(nf.pessoa_id,0) <= 0
      and nf.dm_ind_emit       = 0
      and ((nf.dm_ind_oper = 1 and to_char(nf.dt_emiss, 'rrrrmm') = to_char(nvl(ed_data, sysdate), 'rrrrmm'))
            or
           (nf.dm_ind_oper = 0 and em.dm_dt_escr_dfepoe = 0 and to_char(nf.dt_emiss, 'rrrrmm') = to_char(nvl(ed_data, sysdate), 'rrrrmm'))
            or
           (nf.dm_ind_oper = 0 and em.dm_dt_escr_dfepoe = 1 and to_char(nvl(nf.dt_sai_ent,nf.dt_emiss), 'rrrrmm') = to_char(nvl(ed_data, sysdate), 'rrrrmm')))
      and nfd.notafiscal_id    = nf.id
    order by 1;
   --
BEGIN
   --
   for rec in c_nf loop
      exit when c_nf%notfound or (c_nf%notfound) is null;
      --
      vn_pessoa_id := pk_csf.fkg_pessoa_id_cpf_cnpj_uf( en_multorg_id => pk_csf.fkg_multorg_id_empresa(en_empresa_id => pk_csf.fkg_busca_empresa_nf(en_notafiscal_id => rec.notafiscal_id))
                                                      , en_cpf_cnpj   => rec.cnpj
                                                      , ev_uf         => rec.uf );
      --
      if nvl(vn_pessoa_id,0) <= 0 then
         --
         vn_pessoa_id := pk_csf.fkg_pessoa_id_cpf_cnpj_uf( en_multorg_id => pk_csf.fkg_multorg_id_empresa(en_empresa_id => pk_csf.fkg_busca_empresa_nf(en_notafiscal_id => rec.notafiscal_id))
                                                         , en_cpf_cnpj   => rec.cpf
                                                         , ev_uf         => rec.uf );
         --
      end if;
      --
      if nvl(vn_pessoa_id,0) > 0 then
         --
         update nota_fiscal
            set pessoa_id = vn_pessoa_id
          where id = rec.notafiscal_id;
         --
         commit;
         --
      end if;
      --
   end loop;
   --
EXCEPTION
   when others then
      null;
END PKB_ACERTA_PESSOA_EMISS_PROP;

---------------------------------------------
-- Procedimento de acerta pessoa Terceiros --
---------------------------------------------
PROCEDURE PKB_ACERTA_PESSOA_TERCEIRO ( EN_EMPRESA_ID IN EMPRESA.ID%TYPE
                                     , ED_DATA       IN DATE
                                     )
IS
   --
   vn_pessoa_id number;
   --
   cursor c_nf is
   select nfd.*
     from nota_fiscal      nf
        , nota_fiscal_emit nfd
    where nf.empresa_id = EN_EMPRESA_ID
      and nf.dm_arm_nfe_terc   = 0
      and nvl(nf.pessoa_id,0) <= 0
      and nf.dm_ind_emit       = 1
      and to_char(nvl(nf.dt_sai_ent, nf.dt_emiss), 'rrrrmm') = to_char(nvl(ed_data, sysdate), 'rrrrmm')
      and nfd.notafiscal_id    = nf.id
    order by 1;
   --
BEGIN
   --
   for rec in c_nf loop
      exit when c_nf%notfound or (c_nf%notfound) is null;
      --
      vn_pessoa_id := pk_csf.fkg_pessoa_id_cpf_cnpj_uf( en_multorg_id => pk_csf.fkg_multorg_id_empresa(en_empresa_id => pk_csf.fkg_busca_empresa_nf(en_notafiscal_id => rec.notafiscal_id))
                                                      , en_cpf_cnpj   => rec.cnpj
                                                      , ev_uf         => rec.uf );
      --
      if nvl(vn_pessoa_id,0) <= 0 then
         --
         vn_pessoa_id := pk_csf.fkg_pessoa_id_cpf_cnpj_uf( en_multorg_id => pk_csf.fkg_multorg_id_empresa(en_empresa_id => pk_csf.fkg_busca_empresa_nf(en_notafiscal_id => rec.notafiscal_id))
                                                         , en_cpf_cnpj   => rec.cpf
                                                         , ev_uf         => rec.uf );
         --
      end if;
      --
      if nvl(vn_pessoa_id,0) > 0 then
         --
         update nota_fiscal
            set pessoa_id = vn_pessoa_id
          where id = rec.notafiscal_id;
         --
         commit;
         --
      end if;
      --
   end loop;
   --
EXCEPTION
   when others then
      null;
END PKB_ACERTA_PESSOA_TERCEIRO;

------------------------------------
-- Procedimento de acerto de item --
------------------------------------
PROCEDURE PKB_ACERTA_ITEM_NF ( EN_EMPRESA_ID IN EMPRESA.ID%TYPE
                             , ED_DATA       IN DATE
                             ) 
IS
   --
   vn_item_id number;
   --
   cursor c_nf is
   select nf.empresa_id
        , inf.*
     from empresa          em
        , nota_fiscal      nf
        , item_nota_fiscal inf
    where em.id = EN_EMPRESA_ID
      and nf.empresa_id      = em.id
      and ((nf.dm_ind_emit = 1 and to_char(nvl(nf.dt_sai_ent,nf.dt_emiss), 'rrrrmm') = to_char(nvl(ed_data, sysdate), 'rrrrmm'))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 1 and to_char(nf.dt_emiss, 'rrrrmm') = to_char(nvl(ed_data, sysdate), 'rrrrmm'))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and em.dm_dt_escr_dfepoe = 0 and to_char(nf.dt_emiss, 'rrrrmm') = to_char(nvl(ed_data, sysdate), 'rrrrmm'))
            or
           (nf.dm_ind_emit = 0 and nf.dm_ind_oper = 0 and em.dm_dt_escr_dfepoe = 1 and to_char(nvl(nf.dt_sai_ent,nf.dt_emiss), 'rrrrmm') = to_char(nvl(ed_data, sysdate), 'rrrrmm')))
      and nf.dm_arm_nfe_terc = 0
      and inf.notafiscal_id  = nf.id
      and nvl(inf.item_id,0) = 0
    order by inf.id;
   --
BEGIN
   --
   for rec in c_nf loop
      exit when c_nf%notfound or (c_nf%notfound) is null;
      --
      vn_item_id := pk_csf.fkg_Item_id_conf_empr ( en_empresa_id => rec.empresa_id
                                                 , ev_cod_item   => trim(rec.cod_item) );
      --
      if nvl(vn_item_id,0) > 0 then
         --
         update item_nota_fiscal set item_id = vn_item_id
          where id = rec.id;
         --
         commit;
         --
      end if;
      --
   end loop;
   --
   commit;
   --
EXCEPTION
   when others then
      null;
END PKB_ACERTA_ITEM_NF;

------------------------------------------------------------------------------------------
-- Procedimento acerta o vinculo de nota fiscal com os cadastros de Participante e Item --
------------------------------------------------------------------------------------------
PROCEDURE PKB_ACERTA_VINC_CADASTRO ( EN_EMPRESA_ID IN EMPRESA.ID%TYPE
                                   , ED_DATA       IN DATE
                                   ) 
IS
BEGIN
   --
   if ed_data is not null then
      -- comentado pois esta gerando problema de Partipante
      --pkb_acerta_pessoa_emiss_prop ( EN_EMPRESA_ID, ed_data );
      --
      --pkb_acerta_pessoa_terceiro ( EN_EMPRESA_ID, ed_data );
      --
      pkb_acerta_item_nf ( EN_EMPRESA_ID, ed_data );
      --
   end if;
   --
EXCEPTION
   when others then
      null;
END PKB_ACERTA_VINC_CADASTRO;

--------------------------------------------------------------------------------
-- Procedimento inclusão da ocorrência de alterações nos dados da nota fiscal --
--------------------------------------------------------------------------------
PROCEDURE PKB_INCLUI_LOG_NOTA_FISCAL( EN_NOTAFISCAL_ID IN NOTA_FISCAL.ID%TYPE
                                    , EV_RESUMO        IN LOG_NOTA_FISCAL.RESUMO%TYPE
                                    , EV_MENSAGEM      IN LOG_NOTA_FISCAL.MENSAGEM%TYPE
                                    , EN_USUARIO_ID    IN NEO_USUARIO.ID%TYPE
                                    , EV_MAQUINA       IN VARCHAR2 ) IS
   --
   pragma   autonomous_transaction;
   --
BEGIN
   --
   insert into log_nota_fiscal( id
                              , notafiscal_id
                              , dt_hr_log
                              , resumo
                              , mensagem
                              , usuario_id
                              , maquina )
                        values( lognotafiscal_seq.nextval
                              , en_notafiscal_id
                              , sysdate
                              , ev_resumo
                              , ev_mensagem
                              , en_usuario_id
                              , ev_maquina );
   --
   commit;
   --
EXCEPTION
   when others then
      raise_application_error (-20101, 'Problemas ao incluir log/alteração - pkb_inclui_log_nota_fiscal (notafiscal_id = '||en_notafiscal_id||
                                       '). Erro = '||sqlerrm);
END PKB_INCLUI_LOG_NOTA_FISCAL;

----------------------------------------------------------------------------------------------
-- Procedimento que retorna os valores fiscais (ICMS/ICMS-ST/IPI) de um item de nota fiscal --
----------------------------------------------------------------------------------------------
PROCEDURE PKB_VLR_FISCAL_ITEM_NF ( EN_ITEMNF_ID           IN   ITEM_NOTA_FISCAL.ID%TYPE
                                 , SN_CFOP                OUT  CFOP.CD%TYPE
                                 , SN_VL_OPERACAO         OUT  NUMBER
                                 , SV_COD_ST_ICMS         OUT  COD_ST.COD_ST%TYPE
                                 , SN_VL_BASE_CALC_ICMS   OUT  IMP_ITEMNF.VL_BASE_CALC%TYPE
                                 , SN_ALIQ_ICMS           OUT  IMP_ITEMNF.ALIQ_APLI%TYPE
                                 , SN_VL_IMP_TRIB_ICMS    OUT  IMP_ITEMNF.VL_IMP_TRIB%TYPE
                                 , SN_VL_BASE_CALC_ICMSST OUT  IMP_ITEMNF.VL_BASE_CALC%TYPE
                                 , SN_VL_IMP_TRIB_ICMSST  OUT  IMP_ITEMNF.VL_IMP_TRIB%TYPE
                                 , SN_VL_BC_ISENTA_ICMS   OUT  NUMBER
                                 , SN_VL_BC_OUTRA_ICMS    OUT  NUMBER
                                 , SV_COD_ST_IPI          OUT  COD_ST.COD_ST%TYPE
                                 , SN_VL_BASE_CALC_IPI    OUT  IMP_ITEMNF.VL_BASE_CALC%TYPE
                                 , SN_ALIQ_IPI            OUT  IMP_ITEMNF.ALIQ_APLI%TYPE
                                 , SN_VL_IMP_TRIB_IPI     OUT  IMP_ITEMNF.VL_IMP_TRIB%TYPE
                                 , SN_VL_BC_ISENTA_IPI    OUT  NUMBER
                                 , SN_VL_BC_OUTRA_IPI     OUT  NUMBER
                                 , SN_IPI_NAO_RECUP       OUT  NUMBER
                                 , SN_OUTRO_IPI           OUT  NUMBER
                                 , SN_VL_IMP_NAO_DEST_IPI OUT  NUMBER
                                 , SN_VL_FCP_ICMSST       OUT  NUMBER
                                 , SN_ALIQ_FCP_ICMS       OUT  NUMBER
                                 , SN_VL_FCP_ICMS         OUT  NUMBER
                                 ) IS
   --
   vn_fase                   number := 0;
   --
   vn_dm_ind_emit            nota_fiscal.dm_ind_emit%type;
   vn_dm_ind_oper            nota_fiscal.dm_ind_oper%type;
   vd_dt_emiss               nota_fiscal.dt_emiss%type;
   vn_vl_operacao            number(15,2) := 0;
   vn_vl_red_bc_icms         number(15,2) := 0;
   vn_vl_bc_isenta_icms      number(15,2) := 0;
   vn_vl_bc_outra_icms       number(15,2) := 0;
   vn_dif_vlr                number(15,2) := 0;
   --
   vn_cfop                   cfop.cd%type := null;
   vn_vl_item_bruto          item_nota_fiscal.vl_item_bruto%type := 0;
   vn_vl_frete               item_nota_fiscal.vl_frete%type := 0;
   vn_vl_seguro              item_nota_fiscal.vl_seguro%type := 0;
   vn_vl_desc                item_nota_fiscal.vl_desc%type := 0;
   vn_vl_outro               item_nota_fiscal.vl_outro%type := 0;
   vn_vl_ipi_devol           item_nota_fiscal.vl_ipi_devol%type := 0;
   --
   vv_cod_st_icms            cod_st.cod_st%type := null;
   vn_vl_base_calc_icms      imp_itemnf.vl_base_calc%type := null;
   vn_aliq_icms              imp_itemnf.aliq_apli%type := null;
   vn_vl_imp_trib_icms       imp_itemnf.vl_imp_trib%type := null;
   vn_perc_reduc_icms        imp_itemnf.perc_reduc%type := null;
   vn_vl_bc_isenta_icms_orig imp_itemnf.vl_base_isenta%type := null;
   vn_vl_bc_outra_icms_orig  imp_itemnf.vl_base_outro%type := null;   
   --
   vn_vl_base_calc_icmsst    imp_itemnf.vl_base_calc%type := null;
   vn_vl_imp_trib_icmsst     imp_itemnf.vl_imp_trib%type := null;
   vn_vl_fcp_icmsst          imp_itemnf.vl_fcp%type := null;
   vn_aliq_fcp_icms          imp_itemnf.aliq_fcp%type := null;
   vn_vl_fcp_icms            imp_itemnf.vl_fcp%type := null;
   --
   vv_cod_st_ipi             cod_st.cod_st%type := null;
   vn_vl_base_calc_ipi       imp_itemnf.vl_base_calc%type := null;
   vn_aliq_ipi               imp_itemnf.aliq_apli%type := null;
   vn_vl_imp_trib_ipi        imp_itemnf.vl_imp_trib%type := null;
   vn_vl_bc_isenta_ipi_orig  imp_itemnf.vl_base_isenta%type := null;
   vn_vl_bc_outra_ipi_orig   imp_itemnf.vl_base_outro%type := null;
   --
   vn_vl_bc_isenta_ipi       number(15,2) := 0;
   vn_vl_bc_outra_ipi        number(15,2) := 0;
   vn_ipi_nao_recup          number(15,2) := 0;
   vn_outro_ipi              number(15,2) := 0;
   vn_vl_imp_nao_dest_ipi    number(15,2) := 0;
   --
   vv_cod_st_sn              cod_st.cod_st%type := null;
   vn_vl_base_calc_sn        imp_itemnf.vl_base_calc%type := null;
   vn_aliq_sn                imp_itemnf.aliq_apli%type := null;
   vn_vl_imp_trib_sn         imp_itemnf.vl_imp_trib%type := null;
   vn_aliq_fcp_sn            imp_itemnf.aliq_fcp%type := null;
   vn_vl_fcp_sn              imp_itemnf.vl_fcp%type := null;
   --
   vn_vl_imp_trib_pis_cofins imp_itemnf.vl_imp_trib%type := null;
   vn_vl_imp_trib_ii         imp_itemnf.vl_imp_trib%type := null;
   --
   vn_empresa_id                  nota_fiscal.empresa_id%type;
   vn_dm_sm_vii_import_vloper     param_efd_icms_ipi.dm_sm_vii_import_vloper%type;
   vn_dm_sm_vicms_import_vloper   param_efd_icms_ipi.dm_sm_vicms_import_vloper%type;
   vn_dm_sm_vpiscof_import_vloper param_efd_icms_ipi.dm_sm_vpiscof_import_vloper%type;
   vn_dm_sm_vicms_export_vloper   param_efd_icms_ipi.dm_sm_vicms_export_vloper%type;
   vn_dm_sm_vpiscof_export_vloper param_efd_icms_ipi.dm_sm_vpiscof_export_vloper%type;
   vn_dm_subtr_vl_icms_deson      param_efd_icms_ipi.dm_subtr_vl_icms_deson%type;
   --
   vn_vl_icms_deson               nota_fiscal_total.vl_icms_deson%type := NULL;
   --
   vn_dm_utiliza_perc_red_nf      param_calc_base_icms.dm_utiliza_perc_red_nf%type;
   vn_item_id                     item.id%type;
   vn_perc_base_calc              param_calc_base_icms.perc_base_calc%type;
   vn_perc_base_isenta            param_calc_base_icms.perc_base_isenta%type;
   vn_perc_base_outra             param_calc_base_icms.perc_base_outra%type;
   vn_vl_dif_vc_bi                number(15,2) := 0;   /*valor de diferença entre valor contabil e base isenta*/
   --
   vn_item_id_param_bicms         item.id%type;
   vn_cfop_id                     cfop.id%type;
   vn_cod_st_id                   cod_st.id%type;
   --
   cursor c_param (en_empresa_id in param_efd_icms_ipi.empresa_id%type) is
      select pe.dm_sm_vicms_import_vloper
           , pe.dm_sm_vpiscof_import_vloper
           , pe.dm_sm_vicms_export_vloper
           , pe.dm_sm_vpiscof_export_vloper
           , pe.dm_sm_vii_import_vloper
           , pe.dm_subtr_vl_icms_deson
        from param_efd_icms_ipi pe
       where pe.empresa_id = en_empresa_id;
   --
   cursor c_param_icms (en_empresa_id         in  param_oper_fiscal_entr.empresa_id%type,
                        en_cfop_id_orig       in  param_oper_fiscal_entr.cfop_id_orig%type,
                        en_vitem_id           in  param_oper_fiscal_entr.item_id_orig%type,
                        en_codst_id_icms_orig in  param_oper_fiscal_entr.codst_id_icms_orig%type) is
       select distinct p.dm_rec_icms
       from param_oper_fiscal_entr p
       where p.empresa_id                = en_empresa_id
         and p.cfop_id_orig              = en_cfop_id_orig
         and nvl(p.item_id_orig,0)       = nvl(en_vitem_id,0)
         and nvl(p.codst_id_icms_orig,0) = nvl(en_codst_id_icms_orig,0)  ;
  
begin
   --
   vn_fase := 1;
   --
   if nvl(en_itemnf_id,0) > 0 then
      --
      vn_fase := 2;
      -- recupera os valores do item
      begin
         select nf.empresa_id
              , nf.dm_ind_emit
              , nf.dm_ind_oper
              , nf.dt_emiss
              , inf.cfop
              , inf.vl_item_bruto
              , inf.vl_frete
              , inf.vl_seguro
              , inf.vl_desc
              , inf.vl_outro
              , inf.vl_ipi_devol
              , inf.item_id
              , inf.cfop_id
           into vn_empresa_id
              , vn_dm_ind_emit
              , vn_dm_ind_oper
              , vd_dt_emiss
              , vn_cfop
              , vn_vl_item_bruto
              , vn_vl_frete
              , vn_vl_seguro
              , vn_vl_desc
              , vn_vl_outro
              , vn_vl_ipi_devol
              , vn_item_id
              , vn_cfop_id
           from item_nota_fiscal inf
              , nota_fiscal      nf
          where inf.id = en_itemnf_id
            and nf.id  = inf.notafiscal_id;
      exception
         when others then
            vn_empresa_id    := 0;
            vn_dm_ind_emit   := null;
            vn_dm_ind_oper   := null;
            vd_dt_emiss      := null;
            vn_cfop          := null;
            vn_vl_item_bruto := 0;
            vn_vl_frete      := 0;
            vn_vl_seguro     := 0;
            vn_vl_desc       := 0;
            vn_vl_outro      := 0;
            vn_vl_ipi_devol  := 0;
            vn_cfop_id       := null;
      end;
      --
      vn_fase := 3;
      --
      open c_param (en_empresa_id => vn_empresa_id);
      fetch c_param into vn_dm_sm_vicms_import_vloper
                       , vn_dm_sm_vpiscof_import_vloper
                       , vn_dm_sm_vicms_export_vloper
                       , vn_dm_sm_vpiscof_export_vloper
                       , vn_dm_sm_vii_import_vloper
                       , vn_dm_subtr_vl_icms_deson;
      close c_param;
      --
      vn_fase := 4;
      -- recupera o imposto de ICMS
      begin
         select cst.cod_st
              , imp.vl_base_calc
              , imp.aliq_apli
              , imp.vl_imp_trib
              , imp.perc_reduc
              , imp.codst_id
              , imp.vl_base_isenta
              , imp.vl_base_outro
              , imp.aliq_fcp
              , imp.vl_fcp
           into vv_cod_st_icms
              , vn_vl_base_calc_icms
              , vn_aliq_icms
              , vn_vl_imp_trib_icms
              , vn_perc_reduc_icms
              , vn_cod_st_id
              , vn_vl_bc_isenta_icms_orig
              , vn_vl_bc_outra_icms_orig
              , vn_aliq_fcp_icms
              , vn_vl_fcp_icms
           from imp_itemnf   imp
              , cod_st       cst
              , tipo_imposto ti
          where imp.itemnf_id = en_itemnf_id
            and imp.dm_tipo   = 0 -- Imposto
            and cst.id        = imp.codst_id
            and ti.id         = imp.tipoimp_id
            and ti.cd         = 1; -- ICMS
      exception
         when others then
            vv_cod_st_icms            := null;
            vn_vl_base_calc_icms      := null;
            vn_aliq_icms              := null;
            vn_vl_imp_trib_icms       := null;
            vn_perc_reduc_icms        := null;
            vn_cod_st_id              := null;
            vn_vl_bc_isenta_icms_orig := null;
            vn_vl_bc_outra_icms_orig  := null;
            vn_aliq_fcp_icms          := null;
            vn_vl_fcp_icms            := null;
      end;
      --
      vn_fase := 5;
      --
      if vn_dm_subtr_vl_icms_deson = 1 then
         --
         vn_fase := 6;
         -- Soma da desoneração do ICMS
         begin
            --
            select sum(nvl(vl_icms_deson,0))
              into vn_vl_icms_deson
              from imp_itemnf imp
                 , tipo_imposto ti
                 , cod_st cs
             where 1 = 1
               and imp.itemnf_id = en_itemnf_id
               and imp.dm_tipo = 0 -- 0-imposto
               and imp.tipoimp_id = ti.id
               and ti.cd = 1
               and imp.codst_id = cs.id
               and cs.cod_st in ('20', '30', '40', '41', '50', '70', '90'); -- ICMS
            --
         exception
            when others then
               --
               vn_vl_icms_deson := NULL;
               --
         end;
         --
         IF vn_vl_icms_deson = 0 THEN
            vn_vl_icms_deson := NULL;
         END IF;
         --
      end if;
      --
      vn_fase := 7;
      --
      if vv_cod_st_icms is null then
         --
         vn_fase := 7.1;
         -- recupera o imposto de Simples Nacional
         begin
            select cst.cod_st
                 , imp.vl_base_calc
                 , imp.aliq_apli
                 , imp.vl_imp_trib
                 , imp.aliq_fcp
                 , imp.vl_fcp
              into vv_cod_st_sn
                 , vn_vl_base_calc_sn
                 , vn_aliq_sn
                 , vn_vl_imp_trib_sn
                 , vn_aliq_fcp_sn
                 , vn_vl_fcp_sn
              from imp_itemnf   imp
                 , cod_st       cst
                 , tipo_imposto ti
             where imp.itemnf_id = en_itemnf_id
               and imp.dm_tipo   = 0 -- Imposto
               and cst.id        = imp.codst_id
               and ti.id         = imp.tipoimp_id
               and ti.cd         = 10; -- Simples Nacional
         exception
            when others then
               vv_cod_st_sn       := null;
               vn_vl_base_calc_sn := null;
               vn_aliq_sn         := null;
               vn_vl_imp_trib_sn  := null;
               vn_aliq_fcp_sn     := null;
               vn_vl_fcp_sn       := null;
         end;
         --
         vn_fase := 7.2;
         --
         if vv_cod_st_sn is null then
            --
            vn_fase := 7.3;
            -- nota não possui imposto ICMS e nem SN
            vv_cod_st_icms       := null;
            vn_vl_base_calc_icms := null;
            vn_aliq_icms         := null;
            vn_vl_imp_trib_icms  := null;
            vn_aliq_fcp_icms     := null;
            vn_vl_fcp_icms       := null;
            --
         else
            --
            vn_fase := 7.4;
            --
            vn_vl_base_calc_icms := nvl(vn_vl_base_calc_sn,0);
            vn_aliq_icms         := nvl(vn_aliq_sn,0);
            vn_vl_imp_trib_icms  := nvl(vn_vl_imp_trib_sn,0);
            vn_aliq_fcp_icms     := nvl(vn_aliq_fcp_sn,0);
            vn_vl_fcp_icms       := nvl(vn_vl_fcp_sn,0);
            --
            vn_fase := 7.5;
            --
            if vv_cod_st_sn = '101' then
               vv_cod_st_icms := '00';      -- Tributada integralmente
            elsif vv_cod_st_sn = '102' then
                  vv_cod_st_icms := '90';   -- Outros
            elsif vv_cod_st_sn = '103' then
                  vv_cod_st_icms := '40';   -- Isenta
            elsif vv_cod_st_sn = '201' then
                  vv_cod_st_icms := '90';   -- Outros
            elsif vv_cod_st_sn = '202' then
                  vv_cod_st_icms := '90';   -- Outros
            elsif vv_cod_st_sn = '203' then
                  vv_cod_st_icms := '90';   -- Outros
            elsif vv_cod_st_sn = '300' then
                  vv_cod_st_icms := '41';   -- Não tributada
            elsif vv_cod_st_sn = '400' then
                  vv_cod_st_icms := '41';   -- Não tributada
            elsif vv_cod_st_sn = '500' then
                  vv_cod_st_icms := '60';   -- ICMS cobrado anteriormente por substituição tributária
            elsif vv_cod_st_sn = '900' then
                  vv_cod_st_icms := '90';   -- Outros
            else
               vv_cod_st_icms := '90';      -- Outros
            end if;
            --
         end if;
         --
      end if;
      --
      vn_fase := 8;
      -- recupera o ICMS-ST do Item
      begin
         select imp.vl_base_calc
              , imp.vl_imp_trib
              , imp.vl_fcp
           into vn_vl_base_calc_icmsst
              , vn_vl_imp_trib_icmsst
              , vn_vl_fcp_icmsst
           from imp_itemnf   imp
              , tipo_imposto ti
          where imp.itemnf_id = en_itemnf_id
            and imp.dm_tipo   = 0 -- Imposto
            and ti.id         = imp.tipoimp_id
            and ti.cd         = 2 -- ICMS-ST
            and not exists ( select 1
                               from imp_itemnf   a
                                  , tipo_imposto b
                                  , cod_st c								  
                              where a.itemnf_id  = en_itemnf_id
                                and a.dm_tipo    = 0 -- Imposto
                                and b.id         = a.tipoimp_id
                                and b.cd         = 1 -- ICMS
                                and c.id         = a.codst_id
                                and c.tipoimp_id = a.tipoimp_id   
                                and c.cod_st     = '60' );  -- substitução tributária		
      exception
         when others then
            vn_vl_base_calc_icmsst := null;
            vn_vl_imp_trib_icmsst  := null;
            vn_vl_fcp_icmsst       := null;
      end;
      --
      vn_fase := 9;
      -- recupera o IPI do Item
      begin
         select cst.cod_st
              , imp.vl_base_calc
              , imp.aliq_apli
              , imp.vl_imp_trib
              , imp.vl_imp_nao_dest
              , imp.vl_base_isenta
              , imp.vl_base_outro
           into vv_cod_st_ipi
              , vn_vl_base_calc_ipi
              , vn_aliq_ipi
              , vn_vl_imp_trib_ipi
              , vn_vl_imp_nao_dest_ipi
              , vn_vl_bc_isenta_ipi_orig
              , vn_vl_bc_outra_ipi_orig
           from imp_itemnf   imp
              , cod_st       cst
              , tipo_imposto ti
          where imp.itemnf_id = en_itemnf_id
            and imp.dm_tipo   = 0 -- Imposto
            and cst.id        = imp.codst_id
            and ti.id         = imp.tipoimp_id
            and ti.cd         = 3; -- IPI
      exception
         when others then
            vv_cod_st_ipi          := null;
            vn_vl_base_calc_ipi    := null;
            vn_aliq_ipi            := null;
            vn_vl_imp_trib_ipi     := null;
            vn_vl_imp_nao_dest_ipi := null;
            vn_vl_bc_isenta_ipi_orig := null;
            vn_vl_bc_outra_ipi_orig  := null;
      end;
      --
      vn_fase := 10;
      --
      if trim(vv_cod_st_ipi) is null then
         --
         vn_fase := 11;
         --
         if vn_dm_ind_oper = 0 then -- Entrada
            vv_cod_st_ipi := '03';
         else
            vv_cod_st_ipi := '53';
         end if;
         --
      end if;
      --
      vn_fase := 12;
      -- Recupera o Imposto de Importação
      begin
         select imp.vl_imp_trib
           into vn_vl_imp_trib_ii
           from imp_itemnf   imp
              , tipo_imposto ti
          where imp.itemnf_id = en_itemnf_id
            and imp.dm_tipo   = 0 -- Imposto
            and ti.id         = imp.tipoimp_id
            and ti.cd         = 7; -- II
      exception
         when others then
            vn_vl_imp_trib_ii := null;
      end;
      --
      vn_fase := 13;
      -- calcula o valor da operação
      if vd_dt_emiss >= to_date('01/08/2018','dd/mm/rrrr') then
         --
         vn_vl_operacao := ( nvl(vn_vl_item_bruto,0) - nvl(vn_vl_desc,0) - nvl(vn_vl_icms_deson,0) )
                            + nvl(vn_vl_frete,0)
                            + nvl(vn_vl_seguro,0)
                            + nvl(vn_vl_outro,0)
                            + nvl(vn_vl_imp_trib_icmsst,0)
                            + nvl(vn_vl_imp_trib_ipi,0)
                            + nvl(vn_vl_fcp_icmsst,0)
                            + nvl(vn_vl_ipi_devol,0);
         --
      else
         --
         vn_vl_operacao := ( nvl(vn_vl_item_bruto,0) - nvl(vn_vl_desc,0) - nvl(vn_vl_icms_deson,0) )
                            + nvl(vn_vl_frete,0)
                            + nvl(vn_vl_seguro,0)
                            + nvl(vn_vl_outro,0)
                            + nvl(vn_vl_imp_trib_icmsst,0)
                            + nvl(vn_vl_imp_trib_ipi,0);
         -- Valores de FCP não devem ser utilizados
         vn_vl_fcp_icmsst := 0;
         vn_aliq_fcp_icms := 0;
         vn_vl_fcp_icms   := 0;
         --
      end if;
      --
      vn_fase := 14;
      -- Verificar se o item é de Importação ou Exportação e acrescentar os valores de ICMS, PIS e COFINS, de acordo com o parâmetro da empresa,
      -- no Valor da Operação/Contábil.
      if substr(vn_cfop, 1, 1) in ('3', '7') then
         --
         vn_fase := 15;
         --
         vn_vl_imp_trib_pis_cofins := 0;
         --
         if nvl(vn_dm_sm_vpiscof_import_vloper,0) = 1 or -- Soma Valor de ICMS para Importação (CFOP de início 3), no Valor da Operação/Contábil: 0-Não; 1-Sim
            nvl(vn_dm_sm_vpiscof_export_vloper,0) = 1 then -- Soma Valor de Pis/Cofins para Exportação (CFOP de início 7), no Valor da Operação/Contábil: 0-Não; 1-Sim
            --
            vn_fase := 15.1;
            --
            begin
               select nvl(sum(nvl(ii.vl_imp_trib,0)),0)
                 into vn_vl_imp_trib_pis_cofins
                 from imp_itemnf   ii
                    , tipo_imposto ti
                where ii.itemnf_id = en_itemnf_id
                  and ti.id        = ii.tipoimp_id
                  and ti.cd       in (4,5); -- 4-pis, 5-cofins
            exception
               when others then
                  vn_vl_imp_trib_pis_cofins := 0;
            end;
            --
         end if;
         --
         vn_fase := 15.2;
         --
         if substr(vn_cfop, 1, 1) = '3' and
            nvl(vn_dm_sm_vicms_import_vloper,0) = 1 then -- Soma Valor de ICMS para Importação (CFOP de início 3), no Valor da Operação/Contábil: 0-Não; 1-Sim
            vn_vl_operacao := nvl(vn_vl_operacao,0) + nvl(vn_vl_imp_trib_icms,0);
         end if;
         --
         if substr(vn_cfop, 1, 1) = '3' and
            nvl(vn_dm_sm_vpiscof_import_vloper,0) = 1 then -- Soma Valor de pis/cofins para Importação (CFOP de início 3), no Valor da Operação/Contábil: 0-Não; 1-Sim
            vn_vl_operacao := nvl(vn_vl_operacao,0) + nvl(vn_vl_imp_trib_pis_cofins,0);
         end if;
         --
         if substr(vn_cfop, 1, 1) = '3' and
            nvl(vn_dm_sm_vii_import_vloper,0) = 1 then -- Soma Valor do Imposto de Importação para Importação (CFOP de início 3), no Valor da Operação/Contábil: 0-Não; 1-Sim
            vn_vl_operacao := nvl(vn_vl_operacao,0) + nvl(vn_vl_imp_trib_ii,0);
         end if;
         --
         if substr(vn_cfop, 1, 1) = '7' and
            nvl(vn_dm_sm_vicms_export_vloper,0) = 1 then -- Soma Valor de ICMS para Exportação (CFOP de início 7), no Valor da Operação/Contábil: 0-Não; 1-Sim
            vn_vl_operacao := nvl(vn_vl_operacao,0) + nvl(vn_vl_imp_trib_icms,0);
         end if;
         --
         if substr(vn_cfop, 1, 1) = '7' and
            nvl(vn_dm_sm_vpiscof_export_vloper,0) = 1 then -- Soma Valor de Pis/Cofins para Exportação (CFOP de início 7), no Valor da Operação/Contábil: 0-Não; 1-Sim
            vn_vl_operacao := nvl(vn_vl_operacao,0) + nvl(vn_vl_imp_trib_pis_cofins,0);
         end if;
         --
      end if;
      --
      vn_fase := 16;
      ---
      /*busca de parametrização "Recupera ICMS" na tabela param_oper_fiscal_entr*/
      for rec_icms in c_param_icms (en_empresa_id         => vn_empresa_id,
                                    en_cfop_id_orig       => vn_cfop_id, 
                                    en_vitem_id           => vn_item_id,
                                    en_codst_id_icms_orig => vn_cod_st_id) loop
          -----
          if rec_icms.dm_rec_icms = 0 then
            --
            vn_fase:=16.1;
            --
            vn_vl_fcp_icms   := 0;
            vn_aliq_fcp_icms := 0;
            --
          end if;
          -----
      end loop;
      -----------------
      /*inicio -  parametros de DEPARA para calculo de bases  de ICMS:*/
      vn_dm_utiliza_perc_red_nf := null;
      vn_perc_base_calc         := 0;
      vn_perc_base_isenta       := 0;
      vn_perc_base_outra        := 0;
      ---
      vn_fase := 17;
      ---
      if pk_csf.fkg_empresa_dmformademb_icms ( en_empresa_id => vn_empresa_id ) = 0 then
         /*Possibilidade de busca por parametros:*/
         --
         vn_fase := 17.1;
         -----1a. possibilidade (buscar com os 3 parametros de busca preenchidos)
         begin
            select dm_utiliza_perc_red_nf
                 , perc_base_calc
                 , perc_base_isenta
                 , perc_base_outra
              into vn_dm_utiliza_perc_red_nf
                 , vn_perc_base_calc
                 , vn_perc_base_isenta
                 , vn_perc_base_outra
              from param_calc_base_icms
             where empresa_id  = vn_empresa_id
               and dm_situacao = '1'
               and cfop_id     = vn_cfop_id
               and cod_st_id   = vn_cod_st_id
               and item_id     = vn_item_id;
         exception
            when others then
               vn_dm_utiliza_perc_red_nf := null;
               vn_perc_base_calc         := 0;
               vn_perc_base_isenta       := 0;
               vn_perc_base_outra        := 0;
         end;
         --
         vn_fase := 17.2;
         -----2a. possibilidade (buscar por CFOP + COD_ITEM)
         if vn_dm_utiliza_perc_red_nf is null then
            --
            vn_fase := 17.3;
            --
            begin
               select dm_utiliza_perc_red_nf
                    , perc_base_calc
                    , perc_base_isenta
                    , perc_base_outra
                 into vn_dm_utiliza_perc_red_nf
                    , vn_perc_base_calc
                    , vn_perc_base_isenta
                    , vn_perc_base_outra
                 from param_calc_base_icms
                where empresa_id  = vn_empresa_id
                  and dm_situacao = '1'
                  and cfop_id     = vn_cfop_id
                  and cod_st_id  is null
                  and item_id     = vn_item_id;
            exception
               when others then
                  vn_dm_utiliza_perc_red_nf := null;
                  vn_perc_base_calc         := 0;
                  vn_perc_base_isenta       := 0;
                  vn_perc_base_outra        := 0;
            end;
            --
         end if;
         --
         vn_fase := 17.4;
         -----3a. possibilidade (buscar por CST + COD_ITEM)
         if vn_dm_utiliza_perc_red_nf is null then
            --
            vn_fase := 17.5;
            --
            begin
               select dm_utiliza_perc_red_nf
                    , perc_base_calc
                    , perc_base_isenta
                    , perc_base_outra
                 into vn_dm_utiliza_perc_red_nf
                    , vn_perc_base_calc
                    , vn_perc_base_isenta
                    , vn_perc_base_outra
                 from param_calc_base_icms
                where empresa_id  = vn_empresa_id
                  and dm_situacao = '1'
                  and cfop_id    is null
                  and cod_st_id   = vn_cod_st_id
                  and item_id     = vn_item_id;
            exception
               when others then
                  vn_dm_utiliza_perc_red_nf := null;
                  vn_perc_base_calc         := 0;
                  vn_perc_base_isenta       := 0;
                  vn_perc_base_outra        := 0;
            end;
            --
         end if;
         --
         vn_fase := 17.6;
         -----4a. possibilidade (buscar por COD_ITEM)
         if vn_dm_utiliza_perc_red_nf is null then
            --
            vn_fase := 17.7;
            --
            begin
               select dm_utiliza_perc_red_nf
                    , perc_base_calc
                    , perc_base_isenta
                    , perc_base_outra
                 into vn_dm_utiliza_perc_red_nf
                    , vn_perc_base_calc
                    , vn_perc_base_isenta
                    , vn_perc_base_outra
                 from param_calc_base_icms
                where empresa_id  = vn_empresa_id
                  and dm_situacao = '1'
                  and cfop_id    is null
                  and cod_st_id  is null
                  and item_id     = vn_item_id;
            exception
               when others then
                  vn_dm_utiliza_perc_red_nf := null;
                  vn_perc_base_calc         := 0;
                  vn_perc_base_isenta       := 0;
                  vn_perc_base_outra        := 0;
            end;
            --
         end if;
         --
         vn_fase := 17.8;
         -----5a. possibilidade (buscar por CFOP + CST)
         if vn_dm_utiliza_perc_red_nf is null then
            --
            vn_fase := 17.9;
            --
            begin
               select dm_utiliza_perc_red_nf
                    , perc_base_calc
                    , perc_base_isenta
                    , perc_base_outra
                 into vn_dm_utiliza_perc_red_nf
                    , vn_perc_base_calc
                    , vn_perc_base_isenta
                    , vn_perc_base_outra
                 from param_calc_base_icms
                where empresa_id  = vn_empresa_id
                  and dm_situacao = '1'
                  and cfop_id     = vn_cfop_id
                  and cod_st_id   = vn_cod_st_id
                  and item_id    is null;
            exception
               when others then
                  vn_dm_utiliza_perc_red_nf := null;
                  vn_perc_base_calc         := 0;
                  vn_perc_base_isenta       := 0;
                  vn_perc_base_outra        := 0;
            end;
            --
         end if;
         --
         vn_fase := 17.10;
         -----6a. possibilidade (buscar por CFOP)
         if vn_dm_utiliza_perc_red_nf is null then
            --
            vn_fase := 17.11;
            --
            begin
               select dm_utiliza_perc_red_nf
                    , perc_base_calc
                    , perc_base_isenta
                    , perc_base_outra
                 into vn_dm_utiliza_perc_red_nf
                    , vn_perc_base_calc
                    , vn_perc_base_isenta
                    , vn_perc_base_outra
                 from param_calc_base_icms
                where empresa_id  = vn_empresa_id
                  and dm_situacao = '1'
                  and cfop_id     = vn_cfop_id
                  and cod_st_id  is null
                  and item_id    is null;
            exception
               when others then
                  vn_dm_utiliza_perc_red_nf := null;
                  vn_perc_base_calc         := 0;
                  vn_perc_base_isenta       := 0;
                  vn_perc_base_outra        := 0;
            end;
            --
         end if;
         --
         vn_fase := 17.12;
         -----7a. possibilidade (buscar por CST)
         if vn_dm_utiliza_perc_red_nf is null then
            --
            vn_fase := 17.13;
            --
            begin
               select dm_utiliza_perc_red_nf
                    , perc_base_calc
                    , perc_base_isenta
                    , perc_base_outra
                 into vn_dm_utiliza_perc_red_nf
                    , vn_perc_base_calc
                    , vn_perc_base_isenta
                    , vn_perc_base_outra
                 from param_calc_base_icms
                where empresa_id  = vn_empresa_id
                  and dm_situacao = '1'
                  and cfop_id    is null
                  and cod_st_id   = vn_cod_st_id
                  and item_id    is null;
            exception
               when others then
                  vn_dm_utiliza_perc_red_nf := null;
                  vn_perc_base_calc         := 0;
                  vn_perc_base_isenta       := 0;
                  vn_perc_base_outra        := 0;
            end;
            --
         end if;
         ---
         vn_fase := 18;
         --
         if vn_dm_utiliza_perc_red_nf = 0 then
            --
            vn_fase := 18.1;
            vn_vl_bc_isenta_icms := nvl(vn_vl_operacao,0) * (vn_perc_base_isenta/100);
            vn_vl_base_calc_icms := nvl(vn_vl_operacao,0) * (vn_perc_base_calc/100);
            vn_vl_bc_outra_icms  := nvl(vn_vl_operacao,0) * (vn_perc_base_outra/100);
            --
         elsif vn_dm_utiliza_perc_red_nf = 1 then
               --
               vn_fase := 18.2;
               vn_vl_bc_isenta_icms := nvl(vn_vl_operacao,0) * (nvl(vn_perc_reduc_icms,0)/100);
               vn_vl_dif_vc_bi      := nvl(vn_vl_operacao,0) - vn_vl_bc_isenta_icms;
               vn_vl_base_calc_icms := nvl(vn_vl_dif_vc_bi,0) * (vn_perc_base_calc/100);
               vn_vl_bc_outra_icms  := nvl(vn_vl_dif_vc_bi,0) * (vn_perc_base_outra/100);
               --
         end if;
         /* fim -  parametros de DEPARA para calculo de bases  de ICMS*/
         -----------------
         -- cálculo da redução de base de ICMS
         vn_fase := 19;
         --
         vn_vl_red_bc_icms := nvl(vn_vl_operacao,0) - nvl(vn_vl_base_calc_icms,0) - nvl(vn_vl_imp_trib_icmsst,0) - nvl(vn_vl_imp_trib_ipi,0) - 
                                                      nvl(vn_vl_fcp_icmsst,0);
         --
         vn_fase := 20;
         --
         if nvl(vn_vl_red_bc_icms,0) < 0 then
            vn_vl_red_bc_icms := 0;
         end if;
         --
         vn_fase := 21;
         --
         if vn_dm_utiliza_perc_red_nf is null then /*será considerada somente se não houver parametrização na tabela param_calc_base_icms */
            -- trabalha o CFOP 1604, pois nele só pode ter o valor de imposto
            if vn_cfop = 1604 then
               --
               vn_vl_base_calc_icms := 0;
               vn_aliq_icms         := 0;
               --
            end if;
            --
         end if;
         --
         vn_fase := 22;
         -- monta a logica para definição dos valores fiscais de ICMS conforme Código de Situação Tributária
         if vn_dm_utiliza_perc_red_nf is null then /*será considerada somente se não houver parametrização na tabela param_calc_base_icms */
            ---
            if vv_cod_st_icms = '00' then -- Tributada integralmente
               --
               vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
               --
            elsif vv_cod_st_icms = '10' then -- Tributada e com cobrança do ICMS por substituição tributária
                  --
                  if nvl(vn_dm_ind_emit,0) = 0 then -- Emissão Própria
                     vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
                  else
                     vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
                  end if;
                  --
            elsif vv_cod_st_icms = '20' then -- Com redução de base de cálculo
                  --
                  vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
                  --
            elsif vv_cod_st_icms = '30' then -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
                  --
                  if nvl(vn_dm_ind_emit,0) = 0 then -- Emissão Própria
                     vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
                  else
                     vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
                  end if;
                  --
            elsif vv_cod_st_icms = '40' then -- Isenta
                  --
                  vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
                  --
            elsif vv_cod_st_icms = '41' then -- Não tributada
                  --
                  vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
                  --
            elsif vv_cod_st_icms = '50' then -- Suspensão
                  --
                  -- vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
                  vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
                  --
            elsif vv_cod_st_icms = '51' then -- Diferimento. A exigência do preenchimento das informações do ICMS diferido fica à critério de cada UF.
                  --
                  vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
                  --
            elsif vv_cod_st_icms = '60' then -- ICMS cobrado anteriormente por substituição tributária
                  --
                  vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
                  --
            elsif vv_cod_st_icms = '70' then -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
                  --
                  if nvl(vn_dm_ind_emit,0) = 0 then -- Emissão Própria
                     vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
                  else
                     vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
                  end if;
                  --
            elsif vv_cod_st_icms = '90' then -- Outros
                  --
                  if nvl(vn_perc_reduc_icms,0) > 0 then
                     vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
                  else -- nvl(vn_perc_reduc_icms,0) > 0 then
                     vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
                  end if;
                  --
            else
               --
               vn_vl_bc_isenta_icms := nvl(vn_vl_operacao,0);
               --
            end if;
            --
         end if;
         --
         vn_fase := 23;
         -- calcula da diferença
         vn_dif_vlr := nvl(vn_vl_operacao,0) - ( nvl(vn_vl_base_calc_icms,0) + nvl(vn_vl_bc_isenta_icms,0) + nvl(vn_vl_bc_outra_icms,0) + 
                                                 nvl(vn_vl_imp_trib_icmsst,0) + nvl(vn_vl_imp_trib_ipi,0) + nvl(vn_vl_fcp_icmsst,0) );
         --
         vn_fase := 24;
         --
         if vn_dm_utiliza_perc_red_nf is null then /*será considerada somente se não houver parametrização na tabela param_calc_base_icms */
            --
            if nvl(vn_dif_vlr,0) >= 0 then
               vn_vl_bc_outra_icms := nvl(vn_vl_bc_outra_icms,0) + nvl(vn_dif_vlr,0);
            end if;
            --
         end if;
         --
         vn_fase := 25;
         -- Trabalhar os valores IPI
         if vv_cod_st_ipi in ('02', '52', '03', '53') then
            -- Define o que é Base Isenta e Não Tributada de IPI
            vn_vl_bc_isenta_ipi := (nvl(vn_vl_item_bruto,0) - nvl(vn_vl_desc,0) - nvl(vn_vl_icms_deson,0));
            vn_vl_base_calc_ipi := 0;
            --
         elsif vv_cod_st_ipi in ('04', '54', '05', '55', '49', '99') then
               -- Define o que é Base Outras de IPI
               vn_vl_bc_outra_ipi := (nvl(vn_vl_item_bruto,0) - nvl(vn_vl_desc,0) - nvl(vn_vl_icms_deson,0));
               --
               if vv_cod_st_ipi in ('49') then -- Trata o 49 como IPI não recuperado
                  --
                  vn_ipi_nao_recup    := nvl(vn_vl_imp_trib_ipi,0);
                  vn_aliq_ipi         := 0;
                  vn_vl_imp_trib_ipi  := 0;
                  vn_vl_base_calc_ipi := 0;
                  --
               end if;
               --
               if vv_cod_st_ipi in ('99') then -- Trata o 99 como Outro IPI
                  --
                  vn_outro_ipi        := nvl(vn_vl_imp_trib_ipi,0);
                  vn_aliq_ipi         := 0;
                  vn_vl_imp_trib_ipi  := 0;
                  vn_vl_base_calc_ipi := 0;
                  --
               end if;
               --
         else
            --
            if nvl(vn_vl_base_calc_ipi,0) <= 0 then
               vn_vl_bc_outra_ipi := nvl(vn_vl_operacao,0);
            end if;
            --
         end if;
         --
         vn_fase := 26;
         -- calcula a diferença de Valor entre (Valor Contábil - Base de IPI - Base Outra IPI - Base Isenta IPI - Imp. Trib. IPI - FCP Imp.ICMSST)
         vn_dif_vlr := nvl(vn_vl_operacao,0) - nvl(vn_vl_base_calc_ipi,0) - nvl(vn_vl_bc_outra_ipi,0) - nvl(vn_vl_bc_isenta_ipi,0) - 
                                               nvl(vn_vl_imp_trib_ipi,0) - nvl(vn_vl_fcp_icmsst,0);
         --
         vn_fase := 27;
         --
         if nvl(vn_dif_vlr,0) > 0 then
            if vv_cod_st_ipi in ('00', '01', '04', '05', '49', '50', '51', '54', '55', '99') then
               vn_vl_bc_outra_ipi := nvl(vn_vl_bc_outra_ipi,0) + nvl(vn_dif_vlr,0);
            else
               vn_vl_bc_isenta_ipi := nvl(vn_vl_bc_isenta_ipi,0) + nvl(vn_dif_vlr,0);
            end if;
         end if;
         --
         vn_fase := 28;
         -- não retorna valores negativos
         if nvl(vn_vl_bc_isenta_icms,0) < 0 then
            vn_vl_bc_isenta_icms := 0;
         end if;
         --
         if nvl(vn_vl_bc_outra_icms,0) < 0 then
            vn_vl_bc_outra_icms := 0;
         end if;
         --
         if nvl(vn_vl_bc_isenta_ipi,0) < 0 then
            vn_vl_bc_isenta_ipi := 0;
         end if;
         --
         if nvl(vn_vl_bc_outra_ipi,0) < 0 then
            vn_vl_bc_outra_ipi := 0;
         end if;
         --
         vn_fase := 29;
         --
         if vn_cfop in (5602, 5605, 5929, 6602, 6929) then
            --
            vn_fase := 30;
            vn_vl_operacao := 0;
            --
            if vn_dm_utiliza_perc_red_nf is null then /*será considerada somente se não houver parametrização na tabela param_calc_base_icms */
               --
               vn_vl_bc_outra_icms  := 0;
               vn_vl_bc_isenta_icms := 0;
               vn_vl_base_calc_icms := 0;
               vn_aliq_icms         := 0;
               vn_vl_imp_trib_icms  := 0;
               --
            end if;
            --
            vn_vl_base_calc_icmsst := 0;
            vn_vl_imp_trib_icmsst  := 0;
            --
            vn_vl_base_calc_ipi    := 0;
            vn_aliq_ipi            := 0;
            vn_vl_imp_trib_ipi     := 0;
            vn_vl_bc_isenta_ipi    := 0;
            vn_vl_bc_outra_ipi     := 0;
            vn_ipi_nao_recup       := 0;
            vn_outro_ipi           := 0;
            vn_vl_imp_nao_dest_ipi := 0;
            --
         end if;
         --
         vn_fase := 31;
         --
         --if vn_cfop in (3556) then
         if vn_cfop in (3551, 3556) then
            --
            vn_vl_bc_isenta_ipi := 0;
            vn_vl_base_calc_ipi := 0;
            vn_aliq_ipi         := 0;
            vn_vl_imp_trib_ipi  := 0;
            vn_vl_bc_outra_ipi  := nvl(vn_vl_operacao,0);
            vn_ipi_nao_recup    := 0;
            vn_outro_ipi        := 0;
            --
            --
            vn_vl_bc_isenta_icms := 0;
            vn_vl_base_calc_icms := 0;
            vn_aliq_icms         := 0;
            vn_vl_imp_trib_icms  := 0;
            vn_vl_bc_outra_icms  := nvl(vn_vl_operacao,0);
            vv_cod_st_icms      := '90';
            --    
         end if;
         --
         vn_fase := 32;
         --
         if vn_dm_utiliza_perc_red_nf is null then /*será considerada somente se não houver parametrização na tabela param_calc_base_icms */
            --
            vn_fase := 33;
            -- Redmine #8395 - Correção na geração da GIA-SP. Registro CR-10.
            if vv_cod_st_icms = '51' and -- Diferimento. A exigência do preenchimento das informações do ICMS diferido fica à critério de cada UF.
               nvl(vn_vl_base_calc_icms,0) > 0 and
               nvl(vn_vl_imp_trib_icms,0) = 0 then -- valor da nota com percentual de diferimento 100%
               --
               vn_vl_bc_outra_icms  := nvl(vn_vl_base_calc_icms,0);
               vn_vl_base_calc_icms := 0;
               vn_aliq_icms         := 0;
               --
            end if;
            --
         else
            --
            vn_fase := 34;
            vn_vl_imp_trib_icms := vn_vl_base_calc_icms * (vn_aliq_icms / 100);
            --
         end if;
         --
      else -- pk_csf.fkg_empresa_dmformademb_icms ( en_empresa_id => vn_empresa_id ) = 1
         /*recuperar os valores da tabela de impostos, somente os que estão sendo recuperados dentro do "pk_csf.fkg_empresa_dmformademb_icms ( en_empresa_id => vn_empresa_id ) = 0"*/
         ---
         vn_fase := 35;
         -- recuperar os valores da tabela de impostos que estão antes do if, aproveitando os selects que estão antes do if retornar (out)
         vn_vl_bc_isenta_icms := nvl(vn_vl_bc_isenta_icms_orig,0);
         vn_vl_bc_outra_icms  := nvl(vn_vl_bc_outra_icms_orig,0);
         vn_vl_bc_isenta_ipi  := nvl(vn_vl_bc_isenta_ipi_orig,0);
         vn_vl_bc_outra_ipi   := nvl(vn_vl_bc_outra_ipi_orig,0);
         --
         if vv_cod_st_ipi in ('49') then -- Trata o 49 como IPI não recuperado
            vn_ipi_nao_recup := nvl(vn_vl_imp_trib_ipi,0);
         end if;
         --
         if vv_cod_st_ipi in ('99') then -- Trata o 99 como Outro IPI
            vn_outro_ipi := nvl(vn_vl_imp_trib_ipi,0);
         end if;
         ---
      end if; -- pk_csf.fkg_empresa_dmformademb_icms ( en_empresa_id => vn_empresa_id )
      --
   end if; -- o identificador do item da nota fiscal foi informado
   --
   vn_fase := 36;
   --
   sn_cfop                := vn_cfop;
   sn_vl_operacao         := nvl(vn_vl_operacao,0);
   sv_cod_st_icms         := nvl(vv_cod_st_sn,vv_cod_st_icms);
   sn_vl_base_calc_icms   := nvl(vn_vl_base_calc_icms,0);
   sn_aliq_icms           := nvl(vn_aliq_icms,0);
   sn_vl_imp_trib_icms    := nvl(vn_vl_imp_trib_icms,0);
   sn_vl_base_calc_icmsst := nvl(vn_vl_base_calc_icmsst,0);
   sn_vl_imp_trib_icmsst  := nvl(vn_vl_imp_trib_icmsst,0);
   sn_vl_bc_isenta_icms   := nvl(vn_vl_bc_isenta_icms,0);
   sn_vl_bc_outra_icms    := nvl(vn_vl_bc_outra_icms,0);
   sv_cod_st_ipi          := vv_cod_st_ipi;
   sn_vl_base_calc_ipi    := nvl(vn_vl_base_calc_ipi,0);
   sn_aliq_ipi            := nvl(vn_aliq_ipi,0);
   sn_vl_imp_trib_ipi     := nvl(vn_vl_imp_trib_ipi,0);
   sn_vl_bc_isenta_ipi    := nvl(vn_vl_bc_isenta_ipi,0);
   sn_vl_bc_outra_ipi     := nvl(vn_vl_bc_outra_ipi,0);
   sn_ipi_nao_recup       := nvl(vn_ipi_nao_recup,0);
   sn_outro_ipi           := nvl(vn_outro_ipi,0);
   sn_vl_imp_nao_dest_ipi := nvl(vn_vl_imp_nao_dest_ipi,0);
   sn_vl_fcp_icmsst       := nvl(vn_vl_fcp_icmsst,0);
   sn_aliq_fcp_icms       := nvl(vn_aliq_fcp_icms,0);
   sn_vl_fcp_icms         := nvl(vn_vl_fcp_icms,0);
   --
EXCEPTION
   when others then
      raise_application_error(-20101, 'Erro na pkb_vlr_fiscal_item_nf fase (' || vn_fase || '): ' || sqlerrm);
END PKB_VLR_FISCAL_ITEM_NF;

-----------------------------------------------------------------------------------------------------------
-- Procedimento que retorna os valores fiscais (ICMS/ICMS-ST/IPI) de uma nota fiscal de serviço continuo --
-----------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VLR_FISCAL_NFSC ( EN_NFREGISTANALIT_ID   IN  NFREGIST_ANALIT.ID%TYPE
                              , SV_COD_ST_ICMS         OUT COD_ST.COD_ST%TYPE
                              , SN_CFOP                OUT CFOP.CD%TYPE
                              , SN_ALIQ_ICMS           OUT NFREGIST_ANALIT.ALIQ_ICMS%TYPE
                              , SN_VL_OPERACAO         OUT NFREGIST_ANALIT.VL_OPERACAO%TYPE
                              , SN_VL_BC_ICMS          OUT NFREGIST_ANALIT.VL_BC_ICMS%TYPE
                              , SN_VL_ICMS             OUT NFREGIST_ANALIT.VL_ICMS%TYPE
                              , SN_VL_BC_ICMSST        OUT NFREGIST_ANALIT.VL_BC_ICMS%TYPE
                              , SN_VL_ICMS_ST          OUT NFREGIST_ANALIT.VL_ICMS_ST%TYPE
                              , SN_VL_IPI              OUT NFREGIST_ANALIT.VL_IPI%TYPE
                              , SN_VL_BC_ISENTA_ICMS   OUT NUMBER
                              , SN_VL_BC_OUTRA_ICMS    OUT NUMBER ) IS
   --
   vn_fase              number := 0;
   vn_dm_ind_emit       nota_fiscal.dm_ind_emit%type;
   vd_dt_emiss          nota_fiscal.dt_emiss%type;
   vv_cod_st_icms       cod_st.cod_st%type;
   vn_cfop              cfop.cd%type;
   vn_aliq_icms         nfregist_analit.aliq_icms%type;
   vn_vl_operacao       nfregist_analit.vl_operacao%type;
   vn_vl_bc_icms        nfregist_analit.vl_bc_icms%type;
   vn_vl_icms           nfregist_analit.vl_icms%type;
   vn_vl_bc_icms_st     nfregist_analit.vl_bc_icms_st%type;
   vn_vl_icms_st        nfregist_analit.vl_icms_st%type;
   vn_perc_red_bc_icms  nfregist_analit.vl_red_bc_icms%type;
   vn_vl_ipi            nfregist_analit.vl_ipi%type;
   vn_vl_red_bc_icms    nfregist_analit.vl_red_bc_icms%type;
   vn_vl_bc_isenta_icms number(15,2) := 0;
   vn_vl_bc_outra_icms  number(15,2) := 0;
   vn_dif_vlr           number(15,2) := 0;
   vn_vl_fcp            imp_itemnf.vl_fcp%type;
   vn_notafiscal_id     nota_fiscal.id%type;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_nfregistanalit_id,0) > 0 then
      --
      vn_fase := 2;
      -- recupera os valores de impostos
      begin
         --
         select nf.id
              , nf.dm_ind_emit
              , nf.dt_emiss
              , cst.cod_st
              , c.cd
              , r.aliq_icms
              , r.vl_operacao
              , r.vl_bc_icms
              , r.vl_icms
              , r.vl_bc_icms_st
              , r.vl_icms_st
              , r.vl_red_bc_icms
              , r.vl_ipi
           into vn_notafiscal_id
              , vn_dm_ind_emit
              , vd_dt_emiss
              , vv_cod_st_icms
              , vn_cfop
              , vn_aliq_icms
              , vn_vl_operacao
              , vn_vl_bc_icms
              , vn_vl_icms
              , vn_vl_bc_icms_st
              , vn_vl_icms_st
              , vn_perc_red_bc_icms
              , vn_vl_ipi
           from nfregist_analit  r
              , nota_fiscal      nf
              , cod_st           cst
              , cfop             c
          where r.id             = en_nfregistanalit_id
            and nf.id            = r.notafiscal_id
            and cst.id           = r.codst_id
            and c.id             = r.cfop_id;
         --
      exception
         when others then
            vn_notafiscal_id    := null;
            vn_dm_ind_emit      := null;
            vd_dt_emiss         := null;
            vv_cod_st_icms      := null;
            vn_cfop             := null;
            vn_aliq_icms        := null;
            vn_vl_operacao      := null;
            vn_vl_bc_icms       := null;
            vn_vl_icms          := null;
            vn_vl_bc_icms_st    := null;
            vn_vl_icms_st       := null;
            vn_perc_red_bc_icms := null;
            vn_vl_ipi           := null;
      end;
      --
      vn_fase := 2.1;
      --
      -- Se for maior que '01/08/2018' busca valor FCP
      -- NÃO ALTERE A REGRA DESSA ROTINA SEM CONVERSAR COM EQUIPE
      --
      if vd_dt_emiss >= to_date('01/08/2018','dd/mm/rrrr') then
         --
         -- Recuperar os valores de FCP do Imposto ICMS do Item da Nota Fiscal. Não foi utilizada o valor da tab nfregist_analit pq 
         -- não constava vlr p todas as notas, seguiu o cálculo feito na pk_apur_icms.fkg_modp9_cred_c190_c_d_590
         begin
            select nvl(sum(nvl(ii.vl_fcp,0)),0)
              into vn_vl_fcp
              from nota_fiscal      nf
                 , sit_docto        sd
                 , mod_fiscal       mf
                 , item_nota_fiscal it
                 , imp_itemnf       ii
                 , tipo_imposto     ti
             where nf.id              = vn_notafiscal_id
               and nf.dm_st_proc      = 4
               and nf.dm_arm_nfe_terc = 0 -- Não é nota de armazenamento fiscal
               and nf.dm_ind_oper     = 0 -- Entrada
               and sd.id              = nf.sitdocto_id
               and sd.cd              in ('00', '06', '08')
               and mf.id              = nf.modfiscal_id
               and mf.cod_mod         in ('01', '1B', '04', '55', '65', '06', '29', '28', '21', '22')
               and it.notafiscal_id   = nf.id
               and it.cfop            between 1000 and 3999
               and ii.itemnf_id       = it.id
               and ii.dm_tipo         = 0 -- imposto
               and ti.id              = ii.tipoimp_id
               and ti.cd              = 1; -- ICMS
            --
         exception
            when no_data_found then
                vn_vl_fcp := 0;
         end;
         --
      else
         --
         vn_vl_fcp := 0;
         --
      end if;
      --
      vn_fase := 3;
      --
      if nvl(vn_perc_red_bc_icms,0) <= 0 then
         vn_vl_red_bc_icms := nvl(vn_vl_operacao,0) - nvl(vn_vl_bc_icms,0);
      else
         vn_vl_red_bc_icms := nvl(vn_perc_red_bc_icms,0); -- não é o percentual, mas indica que houve percentual de redução de base
      end if;
      --
      if nvl(vn_vl_red_bc_icms,0) < 0 then
         vn_vl_red_bc_icms := 0;
      end if;
      --
      vn_fase := 4;
      --
      --| monta a logica para definição dos valores fiscais de ICMS conforme Código de Situação Tributária
      if vv_cod_st_icms = '00' then -- Tributada integralmente
         --
         vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
         --
      elsif vv_cod_st_icms = '10' then -- Tributada e com cobrança do ICMS por substituição tributária
         --
         if nvl(vn_dm_ind_emit,0) = 0 then -- Emissão Própria
            vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
         else
            vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
         end if;
         --
      elsif vv_cod_st_icms = '20' then -- Com redução de base de cálculo
         --
         vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
         --
      elsif vv_cod_st_icms = '30' then -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
         --
         if nvl(vn_dm_ind_emit,0) = 0 then -- Emissão Própria
            vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
         else
            vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
         end if;
         --
      elsif vv_cod_st_icms = '40' then -- Isenta
         --
         vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
         --
      elsif vv_cod_st_icms = '41' then -- Não tributada
         --
         vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
         --
      elsif vv_cod_st_icms = '50' then -- Suspensão
         --
         -- vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
         vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
         --
      elsif vv_cod_st_icms = '51' then -- Diferimento. A exigência do preenchimento das informações do ICMS diferido fica à critério de cada UF.
         --
         vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
         --
      elsif vv_cod_st_icms = '60' then -- ICMS cobrado anteriormente por substituição tributária
         --
         vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
         --
      elsif vv_cod_st_icms = '70' then -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
         --
         if nvl(vn_dm_ind_emit,0) = 0 then -- Emissão Própria
            vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
         else
            vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
         end if;
         --
      elsif vv_cod_st_icms = '90' then -- Outros
         --
         if nvl(vn_perc_red_bc_icms,0) > 0 then -- não é o percentual, mas indica que houve percentual de redução de base
            vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
         else -- nvl(vn_vl_red_bc_icms,0) > 0 then
            vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms,0);
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 5;
   --
   sv_cod_st_icms         := vv_cod_st_icms;
   sn_cfop                := vn_cfop;
   sn_aliq_icms           := vn_aliq_icms;
   sn_vl_operacao         := vn_vl_operacao;
   sn_vl_bc_icms          := vn_vl_bc_icms;
   sn_vl_icms             := vn_vl_icms + vn_vl_fcp;
   sn_vl_bc_icmsst        := vn_vl_bc_icms_st;
   sn_vl_icms_st          := vn_vl_icms_st;
   sn_vl_ipi              := vn_vl_ipi;
   sn_vl_bc_isenta_icms   := vn_vl_bc_isenta_icms;
   sn_vl_bc_outra_icms    := vn_vl_bc_outra_icms;
   --
EXCEPTION
   when others then
      raise_application_error(-20101, 'Erro na pkb_vlr_fiscal_nfsc fase (' || vn_fase || '): ' || sqlerrm);
END PKB_VLR_FISCAL_NFSC;

----------------------------------------------------------------------------------------------------------
-- Procedimento que retorna os valores fiscais (ICMS/ICMS-ST/IPI) de um item de cupom fiscal eletrônico --
----------------------------------------------------------------------------------------------------------
PROCEDURE PKB_VLR_FISCAL_ITEM_CFE(EN_ITEMCUPOMFISCAL_ID  IN ITEM_CUPOM_FISCAL.ID%TYPE,
                                  SN_CFOP                OUT CFOP.CD%TYPE,
                                  SN_VL_OPERACAO         OUT NUMBER,
                                  SV_COD_ST_ICMS         OUT COD_ST.COD_ST%TYPE,
                                  SN_VL_BASE_CALC_ICMS   OUT IMP_ITEMCF.VL_BASE_CALC%TYPE,
                                  SN_ALIQ_ICMS           OUT IMP_ITEMCF.ALIQ_APLI%TYPE,
                                  SN_VL_IMP_TRIB_ICMS    OUT IMP_ITEMCF.VL_IMP_TRIB%TYPE,
                                  SN_VL_BASE_CALC_ICMSST OUT IMP_ITEMCF.VL_BASE_CALC%TYPE,
                                  SN_VL_IMP_TRIB_ICMSST  OUT IMP_ITEMCF.VL_IMP_TRIB%TYPE,
                                  SN_VL_BC_ISENTA_ICMS   OUT NUMBER,
                                  SN_VL_BC_OUTRA_ICMS    OUT NUMBER,
                                  SV_COD_ST_IPI          OUT COD_ST.COD_ST%TYPE,
                                  SN_VL_BASE_CALC_IPI    OUT IMP_ITEMCF.VL_BASE_CALC%TYPE,
                                  SN_ALIQ_IPI            OUT IMP_ITEMCF.ALIQ_APLI%TYPE,
                                  SN_VL_IMP_TRIB_IPI     OUT IMP_ITEMCF.VL_IMP_TRIB%TYPE,
                                  SN_VL_BC_ISENTA_IPI    OUT NUMBER,
                                  SN_VL_BC_OUTRA_IPI     OUT NUMBER,
                                  SN_IPI_NAO_RECUP       OUT NUMBER,
                                  SN_OUTRO_IPI           OUT NUMBER) IS
  --
  vn_fase                    number := 0;
  --       
  vn_vl_operacao             number(15, 2) := 0;
  vn_vl_red_bc_icms          number(15, 2) := 0;
  vn_vl_bc_isenta_icms       number(15, 2) := 0;
  vn_vl_bc_outra_icms        number(15, 2) := 0;
  vn_dif_vlr                 number(15, 2) := 0;
  --       
  vn_cfop                    cfop.cd%type := null;
  vn_vl_prod                 item_cupom_fiscal.vl_prod%type := 0;
  vn_vl_desc                 item_cupom_fiscal.vl_desc%type := 0;
  vn_vl_outro                item_cupom_fiscal.vl_outro%type := 0;
  --       
  vv_cod_st_icms             cod_st.cod_st%type := null;
  vn_vl_base_calc_icms       imp_itemcf.vl_base_calc%type := null;
  vn_aliq_icms               imp_itemcf.aliq_apli%type := null;
  vn_vl_imp_trib_icms        imp_itemcf.vl_imp_trib%type := null;
  --       
  vn_vl_base_calc_icmsst     imp_itemcf.vl_base_calc%type := null;
  vn_vl_imp_trib_icmsst      imp_itemcf.vl_imp_trib%type := null;
  --       
  vv_cod_st_ipi              cod_st.cod_st%type := null;
  vn_vl_base_calc_ipi        imp_itemcf.vl_base_calc%type := null;
  vn_aliq_ipi                imp_itemcf.aliq_apli%type := null;
  vn_vl_imp_trib_ipi         imp_itemcf.vl_imp_trib%type := null;
  --       
  vn_vl_bc_isenta_ipi        number(15, 2) := 0;
  vn_vl_bc_outra_ipi         number(15, 2) := 0;
  vn_ipi_nao_recup           number(15, 2) := 0;
  vn_outro_ipi               number(15, 2) := 0;
  --
  vv_cod_st_sn               cod_st.cod_st%type := null;
  vn_vl_base_calc_sn         imp_itemcf.vl_base_calc%type := null;
  vn_aliq_sn                 imp_itemcf.aliq_apli%type := null;
  vn_vl_imp_trib_sn          imp_itemcf.vl_imp_trib%type := null;
  --
  vn_vl_imp_trib_pis_cofins  imp_itemcf.vl_imp_trib%type := null;
  --
  vn_empresa_id                  cupom_fiscal.empresa_id%type;
  vn_dm_sm_vicms_import_vloper   param_efd_icms_ipi.dm_sm_vicms_import_vloper%type;
  vn_dm_sm_vpiscof_import_vloper param_efd_icms_ipi.dm_sm_vpiscof_import_vloper%type;
  vn_dm_sm_vicms_export_vloper   param_efd_icms_ipi.dm_sm_vicms_export_vloper%type;
  vn_dm_sm_vpiscof_export_vloper param_efd_icms_ipi.dm_sm_vpiscof_export_vloper%type;
  --
  cursor c_param(en_empresa_id in param_efd_icms_ipi.empresa_id%type) is
    select pe.dm_sm_vicms_import_vloper,
           pe.dm_sm_vpiscof_import_vloper,
           pe.dm_sm_vicms_export_vloper,
           pe.dm_sm_vpiscof_export_vloper
      from param_efd_icms_ipi pe
     where pe.empresa_id = en_empresa_id;
  --
begin
  --
  vn_fase := 1;
  --
  if nvl(en_itemcupomfiscal_id, 0) > 0 then
    --
    vn_fase := 2;
    --
    -- Recupera os valores do item
    begin
      select ci.empresa_id,
             cf.cd cfop,
             /*case
               when nvl(ic.vl_rateio_descto, 0) > 0 or
                    nvl(ic.vl_desc, 0) > 0 then
                ic.vl_item_liq
               else
                ic.vl_prod
             end vl_prod,*/
             ((nvl(ic.vl_prod, 0) + 
               nvl(ic.vl_outro, 0) +
               nvl(ic.vl_rateio_acresc, 0)) -
              (nvl(ic.vl_rateio_descto, 0) +  
               nvl(ic.vl_desc, 0))) vl_prod,
             0 vl_desc, -- Recebe sempre zero pois se tiver desconto o valor contábil e os valores de outras/isento já estão sendo descontados no valor do prod, utlizando o valor liquido
             ic.vl_outro
        into vn_empresa_id, 
             vn_cfop, 
             vn_vl_prod, 
             vn_vl_desc, 
             vn_vl_outro
        from cupom_fiscal ci,
             item_cupom_fiscal ic, 
             cfop cf
       where ic.id = en_itemcupomfiscal_id
         and cf.id = ic.cfop_id
         and ci.id = ic.cupomfiscal_id;
    exception
      when others then
        vn_empresa_id := 0;
        vn_cfop       := null;
        vn_vl_prod    := 0;
        vn_vl_desc    := 0;
        vn_vl_outro   := 0;
    end;
    --
    vn_fase := 3;
    --
    -- Recupera o imposto de ICMS
    begin
      select cs.cod_st, 
             ii.vl_base_calc, 
             ii.aliq_apli, 
             ii.vl_imp_trib
        into vv_cod_st_icms,
             vn_vl_base_calc_icms,
             vn_aliq_icms,
             vn_vl_imp_trib_icms
        from imp_itemcf ii, 
             cod_st cs, 
             tipo_imposto ti
       where ii.itemcupomfiscal_id = en_itemcupomfiscal_id
         and cs.id                 = ii.codst_id
         and ti.id                 = ii.tipoimp_id
         and ti.cd                 = 1; -- ICMS
    exception
      when others then
        vv_cod_st_icms       := null;
        vn_vl_base_calc_icms := null;
        vn_aliq_icms         := null;
        vn_vl_imp_trib_icms  := null;
    end;
    --
    vn_fase := 4;
    --
    if vv_cod_st_icms is null then
      --
      vn_fase := 5;
      --
      -- Recupera o imposto de Simples Nacional
      begin
        select cs.cod_st, 
               ii.vl_base_calc, 
               ii.aliq_apli, 
               ii.vl_imp_trib
          into vv_cod_st_sn,
               vn_vl_base_calc_sn,
               vn_aliq_sn,
               vn_vl_imp_trib_sn
          from imp_itemcf ii, 
               cod_st cs, 
               tipo_imposto ti
         where ii.itemcupomfiscal_id = en_itemcupomfiscal_id
           and cs.id                 = ii.codst_id
           and ti.id                 = ii.tipoimp_id
           and ti.cd                 = 10; -- Simples Nacional
      exception
        when others then
          vv_cod_st_sn       := null;
          vn_vl_base_calc_sn := null;
          vn_aliq_sn         := null;
          vn_vl_imp_trib_sn  := null;
      end;
      --
      vn_fase := 6;
      --
      if vv_cod_st_sn is null then
        --
        vn_fase := 7;
        --
        -- Cupom não possui imposto ICMS e nem SN
        vv_cod_st_icms       := null;
        vn_vl_base_calc_icms := null;
        vn_aliq_icms         := null;
        vn_vl_imp_trib_icms  := null;
        --
      else
        --
        vn_fase := 8;
        --
        vn_vl_base_calc_icms := nvl(vn_vl_base_calc_sn, 0);
        vn_aliq_icms         := nvl(vn_aliq_sn, 0);
        vn_vl_imp_trib_icms  := nvl(vn_vl_imp_trib_sn, 0);
        --
        if vv_cod_st_sn = '101' then
          vv_cod_st_icms := '00'; -- Tributada integralmente
        elsif vv_cod_st_sn = '102' then
          vv_cod_st_icms := '90'; -- Outros
        elsif vv_cod_st_sn = '103' then
          vv_cod_st_icms := '40'; -- Isenta
        elsif vv_cod_st_sn = '201' then
          vv_cod_st_icms := '90'; -- Outros
        elsif vv_cod_st_sn = '202' then
          vv_cod_st_icms := '90'; -- Outros
        elsif vv_cod_st_sn = '203' then
          vv_cod_st_icms := '90'; -- Outros
        elsif vv_cod_st_sn = '300' then
          vv_cod_st_icms := '41'; -- Não tributada
        elsif vv_cod_st_sn = '400' then
          vv_cod_st_icms := '41'; -- Não tributada
        elsif vv_cod_st_sn = '500' then
          vv_cod_st_icms := '60'; -- ICMS cobrado anteriormente por substituição tributária
        elsif vv_cod_st_sn = '900' then
          vv_cod_st_icms := '90'; -- Outros
        else
          vv_cod_st_icms := '90'; -- Outros
        end if;
        --
      end if;
      --
    end if;
    --
    vn_fase := 9;
    --
    -- Recupera o ICMS-ST do Item
    begin
      select ii.vl_base_calc, 
             ii.vl_imp_trib
        into vn_vl_base_calc_icmsst, 
             vn_vl_imp_trib_icmsst
        from imp_itemcf ii, 
             tipo_imposto ti
       where ii.itemcupomfiscal_id = en_itemcupomfiscal_id
         and ti.id                 = ii.tipoimp_id
         and ti.cd                 = 2; -- ICMS-ST
    exception
      when others then
        vn_vl_base_calc_icmsst := null;
        vn_vl_imp_trib_icmsst  := null;
    end;
    --
    vn_fase := 10;
    --
    -- Recupera o IPI do Item
    begin
      select cs.cod_st, 
             ii.vl_base_calc, 
             ii.aliq_apli, 
             ii.vl_imp_trib
        into vv_cod_st_ipi,
             vn_vl_base_calc_ipi,
             vn_aliq_ipi,
             vn_vl_imp_trib_ipi
        from imp_itemcf ii, 
             cod_st cs, 
             tipo_imposto ti
       where ii.itemcupomfiscal_id = en_itemcupomfiscal_id
         and cs.id                 = ii.codst_id
         and ti.id                 = ii.tipoimp_id
         and ti.cd                 = 3; -- IPI
    exception
      when others then
        vv_cod_st_ipi       := null;
        vn_vl_base_calc_ipi := null;
        vn_aliq_ipi         := null;
        vn_vl_imp_trib_ipi  := null;
    end;
    --
    vn_fase := 11;
    --
    if trim(vv_cod_st_ipi) is null then
      --
      vn_fase := 12;
      --
      vv_cod_st_ipi := '53'; -- Cupom somente com operação de saída
      --
    end if;
    --
    vn_fase := 13;
    --
    -- Calcula o valor da operação
    vn_vl_operacao := (nvl(vn_vl_prod, 0) - 
                       nvl(vn_vl_desc, 0)) +
                       nvl(vn_vl_outro, 0) + 
                       nvl(vn_vl_imp_trib_icmsst, 0) +
                       nvl(vn_vl_imp_trib_ipi, 0);
    --
    vn_fase := 14;
    --
    -- Verificar se o item é de Importação ou Exportação e acrescentar os valores de ICMS, PIS e COFINS, de acordo com o parâmetro da empresa,
    -- no Valor da Operação/Contábil.
    if substr(vn_cfop, 1, 1) in ('3', '7') then
      --
      vn_fase := 14.1;
      --
      open c_param(en_empresa_id => vn_empresa_id);
      fetch c_param
        into vn_dm_sm_vicms_import_vloper,
             vn_dm_sm_vpiscof_import_vloper,
             vn_dm_sm_vicms_export_vloper,
             vn_dm_sm_vpiscof_export_vloper;
      close c_param;
      --
      vn_fase := 14.2;
      --
      vn_vl_imp_trib_pis_cofins := 0;
      --
      if nvl(vn_dm_sm_vpiscof_import_vloper, 0) = 1 or -- Soma Valor de ICMS para Importação (CFOP de início 3), no Valor da Operação/Contábil: 0-Não; 1-Sim
         nvl(vn_dm_sm_vpiscof_export_vloper, 0) = 1 then -- Soma Valor de Pis/Cofins para Exportação (CFOP de início 7), no Valor da Operação/Contábil: 0-Não; 1-Sim
        --
        vn_fase := 14.3;
        --
        begin
          select nvl(sum(nvl(ii.vl_imp_trib, 0)), 0)
            into vn_vl_imp_trib_pis_cofins
            from imp_itemcf ii, 
                 tipo_imposto ti
           where ii.itemcupomfiscal_id = en_itemcupomfiscal_id
             and ti.id                 = ii.tipoimp_id
             and ti.cd                 in (4, 5); -- 4-PIS / 5-Cofins
        exception
          when others then
            vn_vl_imp_trib_pis_cofins := 0;
        end;
        --
      end if;
      --
      vn_fase := 14.4;
      --
      -- Soma Valor de ICMS para Importação (CFOP de início 3) no Valor da Operação/Contábil: 0-Não / 1-Sim
      if substr(vn_cfop, 1, 1) = '3' and nvl(vn_dm_sm_vicms_import_vloper, 0) = 1 then
        --
        vn_vl_operacao := nvl(vn_vl_operacao, 0) + nvl(vn_vl_imp_trib_icms, 0);
        --
      end if;
      --
      -- Soma Valor de ICMS para Importação (CFOP de início 3), no Valor da Operação/Contábil: 0-Não / 1-Sim
      if substr(vn_cfop, 1, 1) = '3' and nvl(vn_dm_sm_vpiscof_import_vloper, 0) = 1 then
        --
        vn_vl_operacao := nvl(vn_vl_operacao, 0) + nvl(vn_vl_imp_trib_pis_cofins, 0);
        --
      end if;
      --
      -- Soma Valor de ICMS para Exportação (CFOP de início 7), no Valor da Operação/Contábil: 0-Não / 1-Sim
      if substr(vn_cfop, 1, 1) = '7' and nvl(vn_dm_sm_vicms_export_vloper, 0) = 1 then
        --
        vn_vl_operacao := nvl(vn_vl_operacao, 0) + nvl(vn_vl_imp_trib_icms, 0);
        --
      end if;
      --
      -- Soma Valor de Pis/Cofins para Exportação (CFOP de início 7), no Valor da Operação/Contábil: 0-Não / 1-Sim
      if substr(vn_cfop, 1, 1) = '7' and nvl(vn_dm_sm_vpiscof_export_vloper, 0) = 1 then
        --
        vn_vl_operacao := nvl(vn_vl_operacao, 0) + nvl(vn_vl_imp_trib_pis_cofins, 0);
        --
      end if;
      --
    end if;
    --
    vn_fase := 15;
    --
    -- Cálculo da redução de base de ICMS
    vn_vl_red_bc_icms := nvl(vn_vl_operacao, 0) -
                         nvl(vn_vl_base_calc_icms, 0) -
                         nvl(vn_vl_imp_trib_icmsst, 0) -
                         nvl(vn_vl_imp_trib_ipi, 0);
    --
    vn_fase := 16;
    --
    if nvl(vn_vl_red_bc_icms, 0) < 0 then
      vn_vl_red_bc_icms := 0;
    end if;
    --
    vn_fase := 17;
    --
    -- Trabalha o CFOP 1604, pois nele só pode ter o valor de imposto
    if vn_cfop = 1604 then
      --
      vn_vl_base_calc_icms := 0;
      vn_aliq_icms         := 0;
      --
    end if;
    --
    vn_fase := 18;
    --
    -- Monta a logica para definição dos valores fiscais de ICMS conforme Código de Situação Tributária
    if vv_cod_st_icms = '00' then -- Tributada integralmente
      --
      vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    elsif vv_cod_st_icms = '10' then -- Tributada e com cobrança do ICMS por substituição tributária
      --
      vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    elsif vv_cod_st_icms = '20' then -- Com redução de base de cálculo
      --
      vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    elsif vv_cod_st_icms = '30' then -- Isenta ou não tributada e com cobrança do ICMS por substituição tributária
      --
      vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    elsif vv_cod_st_icms = '40' then -- Isenta
      --
      vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    elsif vv_cod_st_icms = '41' then -- Não tributada
      --
      vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    elsif vv_cod_st_icms = '50' then -- Suspensão
      --
      -- vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms,0);
      vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    elsif vv_cod_st_icms = '51' then -- Diferimento. A exigência do preenchimento das informações do ICMS diferido fica à critério de cada UF.
      --
      vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    elsif vv_cod_st_icms = '60' then -- ICMS cobrado anteriormente por substituição tributária
      --
      vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    elsif vv_cod_st_icms = '70' then -- Com redução de base de cálculo e cobrança do ICMS por substituição tributária
      --
      vn_vl_bc_isenta_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    elsif vv_cod_st_icms = '90' then -- Outros
      --
      vn_vl_bc_outra_icms := nvl(vn_vl_red_bc_icms, 0);
      --
    else
      --
      vn_vl_bc_isenta_icms := nvl(vn_vl_operacao, 0);
      --
    end if;
    --
    vn_fase := 19;
    --
    -- Trabalhar os valores IPI
    if vv_cod_st_ipi in ('02', '52', '03', '53') then
      --
      vn_fase := 20;
      --
      -- Define o que é Base Isenta e Não Tributada de IPI
      vn_vl_bc_isenta_ipi := (nvl(vn_vl_prod, 0) - nvl(vn_vl_desc, 0));
      vn_vl_base_calc_ipi := 0;
      --
    elsif vv_cod_st_ipi in ('04', '54', '05', '55', '49', '99') then
      --
      vn_fase := 21;
      --
      -- Define o que é Base Outras de IPI
      vn_vl_bc_outra_ipi := (nvl(vn_vl_prod, 0) - nvl(vn_vl_desc, 0));
      --
      if vv_cod_st_ipi in ('49') then -- Trata o 49 como IPI não recuperado
        --
        vn_fase := 22;
        --
        vn_ipi_nao_recup    := nvl(vn_vl_imp_trib_ipi, 0);
        vn_aliq_ipi         := 0;
        vn_vl_imp_trib_ipi  := 0;
        vn_vl_base_calc_ipi := 0;
        --
      end if;
      --
      vn_fase := 23;
      --
      if vv_cod_st_ipi in ('99') then -- Trata o 99 como Outro IPI
        --
        vn_fase := 24;
        --
        vn_outro_ipi        := nvl(vn_vl_imp_trib_ipi, 0);
        vn_aliq_ipi         := 0;
        vn_vl_imp_trib_ipi  := 0;
        vn_vl_base_calc_ipi := 0;
        --
      end if;
      --
    else
      --
      vn_fase := 25;
      --
      if nvl(vn_vl_base_calc_ipi, 0) <= 0 then
        vn_vl_bc_outra_ipi := nvl(vn_vl_operacao, 0);
      end if;
      --
    end if;
    --
    vn_fase := 26;
    --
    -- Calcula a diferença de Valor entre (Valor Contábil - Base de IPI - Base Outra IPI - Base Isenta IPI - Imp. Trib. IPI)
    vn_dif_vlr := nvl(vn_vl_operacao, 0) - 
                  nvl(vn_vl_base_calc_ipi, 0) -
                  nvl(vn_vl_bc_outra_ipi, 0) - 
                  nvl(vn_vl_bc_isenta_ipi, 0) -
                  nvl(vn_vl_imp_trib_ipi, 0);
    --
    vn_fase := 27;
    --
    if nvl(vn_dif_vlr, 0) > 0 then
      vn_vl_bc_outra_ipi := nvl(vn_vl_bc_outra_ipi, 0) + nvl(vn_dif_vlr, 0);
    end if;
    --
    vn_fase := 28;
    --
    -- Não retorna valores negativos
    if nvl(vn_vl_bc_isenta_icms, 0) < 0 then
      vn_vl_bc_isenta_icms := 0;
    end if;
    --
    if nvl(vn_vl_bc_outra_icms, 0) < 0 then
      vn_vl_bc_outra_icms := 0;
    end if;
    --
    if nvl(vn_vl_bc_isenta_ipi, 0) < 0 then
      vn_vl_bc_isenta_ipi := 0;
    end if;
    --
    if nvl(vn_vl_bc_outra_ipi, 0) < 0 then
      vn_vl_bc_outra_ipi := 0;
    end if;
    --
    vn_fase := 29;
    --
    if vn_cfop in (5602, 5605, 5929, 6602, 6929) then
      --
      vn_fase := 30;
      --
      vn_vl_operacao         := 0;
      vn_vl_bc_outra_icms    := 0;
      vn_vl_bc_isenta_icms   := 0;
      vn_vl_base_calc_icms   := 0;
      vn_aliq_icms           := 0;
      vn_vl_imp_trib_icms    := 0;
      --
      vn_vl_base_calc_icmsst := 0;
      vn_vl_imp_trib_icmsst  := 0;
      --
      vn_vl_base_calc_ipi    := 0;
      vn_aliq_ipi            := 0;
      vn_vl_imp_trib_ipi     := 0;
      vn_vl_bc_isenta_ipi    := 0;
      vn_vl_bc_outra_ipi     := 0;
      vn_ipi_nao_recup       := 0;
      vn_outro_ipi           := 0;
      --
    -- Realiza o teste, pois esses CFOPS não devem ser tributados nos arquivos fiscais.
    elsif vn_cfop in (1551, 1556, 2556, 3551, 3949, 3556) and nvl(vn_vl_base_calc_icms, 0) > 0 then
      --
      vn_fase := 31;
      --
      vn_vl_bc_outra_icms  := nvl(vn_vl_base_calc_icms, 0);
      vn_vl_bc_isenta_icms := 0;
      vn_vl_base_calc_icms := 0;
      vn_aliq_icms         := 0;
      vn_vl_imp_trib_icms  := 0;
      --
    end if;
    --
    vn_fase := 32;
    --
    if vn_cfop in (3551, 3949, 3556) then
      --
      vn_fase := 33;
      --
      vn_vl_bc_isenta_ipi := 0;
      vn_vl_base_calc_ipi := 0;
      vn_aliq_ipi         := 0;
      vn_vl_imp_trib_ipi  := 0;
      vn_vl_bc_outra_ipi  := nvl(vn_vl_operacao, 0);
      vn_ipi_nao_recup    := 0;
      vn_outro_ipi        := 0;
      --
    end if;
    --
    vn_fase := 34;
    --
    -- Redmine #8395 - Correção na geração da GIA-SP. Registro CR-10.
    if vv_cod_st_icms = '51' and -- Diferimento. A exigência do preenchimento das informações do ICMS diferido fica à critério de cada UF.
       nvl(vn_vl_base_calc_icms, 0) > 0 and nvl(vn_vl_imp_trib_icms, 0) = 0 then -- valor da nota com percentual de diferimento 100%
      --
      vn_vl_bc_outra_icms  := nvl(vn_vl_base_calc_icms, 0);
      vn_vl_base_calc_icms := 0;
      vn_aliq_icms         := 0;
      --
    end if;
    --
  end if;
  --
  vn_fase := 35;
  --
  sn_cfop                := vn_cfop;
  sn_vl_operacao         := nvl(vn_vl_operacao, 0);
  sv_cod_st_icms         := vv_cod_st_icms;
  sn_vl_base_calc_icms   := nvl(vn_vl_base_calc_icms, 0);
  sn_aliq_icms           := nvl(vn_aliq_icms, 0);
  sn_vl_imp_trib_icms    := nvl(vn_vl_imp_trib_icms, 0);
  sn_vl_base_calc_icmsst := nvl(vn_vl_base_calc_icmsst, 0);
  sn_vl_imp_trib_icmsst  := nvl(vn_vl_imp_trib_icmsst, 0);
  sn_vl_bc_isenta_icms   := nvl(vn_vl_bc_isenta_icms, 0);
  sn_vl_bc_outra_icms    := nvl(vn_vl_bc_outra_icms, 0);
  sv_cod_st_ipi          := vv_cod_st_ipi;
  sn_vl_base_calc_ipi    := nvl(vn_vl_base_calc_ipi, 0);
  sn_aliq_ipi            := nvl(vn_aliq_ipi, 0);
  sn_vl_imp_trib_ipi     := nvl(vn_vl_imp_trib_ipi, 0);
  sn_vl_bc_isenta_ipi    := nvl(vn_vl_bc_isenta_ipi, 0);
  sn_vl_bc_outra_ipi     := nvl(vn_vl_bc_outra_ipi, 0);
  sn_ipi_nao_recup       := nvl(vn_ipi_nao_recup, 0);
  sn_outro_ipi           := nvl(vn_outro_ipi, 0);
  --
EXCEPTION
  when others then
    raise_application_error(-20101, 'Erro na pkb_vlr_fiscal_item_cfe fase (' || vn_fase || '): ' || sqlerrm);
END PKB_VLR_FISCAL_ITEM_CFE;

---------------------------------------------------------------------
-- Procedimento de integração dos dados do diferencial de alíquota --
---------------------------------------------------------------------
PROCEDURE PKB_INT_ITEMNF_DIF_ALIQ ( EST_LOG_GENERICO_NF       IN OUT NOCOPY  DBMS_SQL.NUMBER_TABLE
                                  , EST_ROW_ITEMNF_DIF_ALIQ   IN OUT NOCOPY  ITEMNF_DIF_ALIQ%ROWTYPE
                                  , EN_NOTAFISCAL_ID          IN             NOTA_FISCAL.ID%TYPE ) IS
  --
  vn_fase             number := 0;
  vn_loggenerico_id   log_generico_nf.id%type;
  --
begin
  --
  vn_fase := 1;
  --
  if nvl(est_row_itemnf_dif_aliq.itemnf_id,0) = 0 then
     --
     vn_fase := 1.2;
     --
     gv_mensagem_log := 'Não informado Item da Nota Fiscal para o Diferencial de Alíquota.';
     --
     vn_loggenerico_id := null;
     --
     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                         , ev_resumo           => gv_mensagem_log
                         , en_tipo_log         => erro_de_validacao
                         , en_referencia_id    => gn_referencia_id
                         , ev_obj_referencia   => gv_obj_referencia);
     -- Armazena o "loggenerico_id" na memória
     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                         , est_log_generico_nf => est_log_generico_nf );
     --
  end if;
  --
  vn_fase := 2;
  --
  est_row_itemnf_dif_aliq.aliq_orig := nvl(est_row_itemnf_dif_aliq.aliq_orig,0);
  --
  vn_fase := 2.1;
  --
  if nvl(est_row_itemnf_dif_aliq.aliq_orig,0) < 0 then
     --
     vn_fase := 2.2;
     --
     gv_mensagem_log := 'Alíquota do estado de origem do fornecedor não pode ser negativo.';
     --
     vn_loggenerico_id := null;
     --
     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                         , ev_resumo           => gv_mensagem_log
                         , en_tipo_log         => erro_de_validacao
                         , en_referencia_id    => gn_referencia_id
                         , ev_obj_referencia   => gv_obj_referencia);
     -- Armazena o "loggenerico_id" na memória
     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                         , est_log_generico_nf => est_log_generico_nf );
     --
  end if;
  --
  vn_fase := 3;
  --
  est_row_itemnf_dif_aliq.aliq_ie := nvl(est_row_itemnf_dif_aliq.aliq_ie,0);
  --
  vn_fase := 3.1;
  --
  if nvl(est_row_itemnf_dif_aliq.aliq_ie,0) < 0 then
     --
     vn_fase := 3.2;
     --
     gv_mensagem_log := 'Alíquota interestadual da empresa não pode ser negativo.';
     --
     vn_loggenerico_id := null;
     --
     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                         , ev_resumo           => gv_mensagem_log
                         , en_tipo_log         => erro_de_validacao
                         , en_referencia_id    => gn_referencia_id
                         , ev_obj_referencia   => gv_obj_referencia);
     -- Armazena o "loggenerico_id" na memória
     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                         , est_log_generico_nf => est_log_generico_nf );
     --
  end if;
  --
  vn_fase := 4;
  --
  est_row_itemnf_dif_aliq.vl_bc_icms := nvl(est_row_itemnf_dif_aliq.vl_bc_icms,0);
  --
  vn_fase := 4.1;
  --
  if nvl(est_row_itemnf_dif_aliq.vl_bc_icms,0) < 0 then
     --
     vn_fase := 4.2;
     --
     gv_mensagem_log := 'Base de cálculo do ICMS não pode ser negativo.';
     --
     vn_loggenerico_id := null;
     --
     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                         , ev_resumo           => gv_mensagem_log
                         , en_tipo_log         => erro_de_validacao
                         , en_referencia_id    => gn_referencia_id
                         , ev_obj_referencia   => gv_obj_referencia);
     -- Armazena o "loggenerico_id" na memória
     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                         , est_log_generico_nf => est_log_generico_nf );
     --
  end if;
  --
  vn_fase := 5;
  --
  est_row_itemnf_dif_aliq.vl_dif_aliq := nvl(est_row_itemnf_dif_aliq.vl_dif_aliq,0);
  --
  vn_fase := 5.1;
  --
  if nvl(est_row_itemnf_dif_aliq.vl_dif_aliq,0) < 0 then
     --
     vn_fase := 5.2;
     --
     gv_mensagem_log := 'Valor do diferencial de alíquota não pode ser negativo.';
     --
     vn_loggenerico_id := null;
     --
     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                         , ev_resumo           => gv_mensagem_log
                         , en_tipo_log         => erro_de_validacao
                         , en_referencia_id    => gn_referencia_id
                         , ev_obj_referencia   => gv_obj_referencia);
     -- Armazena o "loggenerico_id" na memória
     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                         , est_log_generico_nf => est_log_generico_nf );
     --
  end if;
  --
  vn_fase := 6;
  --
  if est_row_itemnf_dif_aliq.dm_tipo not in ('1', '2', '3', '4', '5') then
     --
     vn_fase := 6.1;
     --
     gv_mensagem_log := '"Tipo de diferencial de aliquota" deve ser: 1-Integrado, 2-Integrado/Alterado, 3-Calculado, 4-Calculado/Alterado e 5-Informado.';
     --
     vn_loggenerico_id := null;
     --
     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                         , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                         , ev_resumo           => gv_mensagem_log
                         , en_tipo_log         => erro_de_validacao
                         , en_referencia_id    => gn_referencia_id
                         , ev_obj_referencia   => gv_obj_referencia);
     -- Armazena o "loggenerico_id" na memória
     pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                         , est_log_generico_nf => est_log_generico_nf );
     --
  end if;
  --
  vn_fase := 7;
  --
  if nvl(est_log_generico_nf.count,0) > 0 then
     --
     update nota_fiscal set dm_st_proc = 10
      where id = en_notafiscal_id;
     --
  end if;
  --
  vn_fase := 8;
  --
  if nvl(est_row_itemnf_dif_aliq.itemnf_id,0) > 0 then
     --
     vn_fase := 8.1;
     --
     if nvl(gn_tipo_integr,0) = 1 then
        --
        vn_fase := 8.2;
        --
        insert into itemnf_dif_aliq ( itemnf_id
                                    , aliq_orig
                                    , aliq_ie
                                    , vl_bc_icms
                                    , vl_dif_aliq
                                    , dm_tipo
                                    )
                             values ( est_row_itemnf_dif_aliq.itemnf_id
                                    , est_row_itemnf_dif_aliq.aliq_orig
                                    , est_row_itemnf_dif_aliq.aliq_ie
                                    , est_row_itemnf_dif_aliq.vl_bc_icms
                                    , est_row_itemnf_dif_aliq.vl_dif_aliq
                                    , est_row_itemnf_dif_aliq.dm_tipo
                                    );
        --
     else
        --
        vn_fase := 8.3;
        --
        update itemnf_dif_aliq set itemnf_id     =  est_row_itemnf_dif_aliq.itemnf_id
                                 , aliq_orig     =  est_row_itemnf_dif_aliq.aliq_orig
                                 , aliq_ie       =  est_row_itemnf_dif_aliq.aliq_ie
                                 , vl_bc_icms    =  est_row_itemnf_dif_aliq.vl_bc_icms
                                 , vl_dif_aliq   =  est_row_itemnf_dif_aliq.vl_dif_aliq
                                 , dm_tipo       =  est_row_itemnf_dif_aliq.dm_tipo
          where itemnf_id = est_row_itemnf_dif_aliq.itemnf_id;
         --
     end if;
         --
  end if;
  --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_int_itemnf_dif_aliq fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log || gv_cabec_log_item
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia
                             );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
  --
END PKB_INT_ITEMNF_DIF_ALIQ;

----------------------------------------------
-- Procedimento cria o "item" de NFe legado --
----------------------------------------------
PROCEDURE PKB_CRIA_ITEM_NFE_LEGADO (en_multorg_id mult_org.id%type) IS
   --
   vn_fase number := 0;
   --
   vn_unidade_id         unidade.id%type;
   vn_ncm_id             ncm.id%type;
   vn_item_id            number;
   vn_empresa_id_matriz  empresa.id%type;
   vv_cpf_cnpj           varchar2(14);
   vn_tpservico_id       tipo_servico.id%type;
   vn_cest_id            cest.id%type;
   --
   cursor c_emp is
   select e.id empresa_id
        , e.multorg_id
     from empresa e
    where e.dm_situacao           = 1
      and e.dm_integr_item        = 1
      and e.dm_atu_item_nf_legado = 1
      and e.multorg_id            = en_multorg_id;
   --
   cursor c_item ( en_empresa_id in empresa.id%type ) is
   select distinct
          inf.cod_item
        , inf.descr_item
        , inf.cod_ncm
        , inf.unid_com
        , inf.orig
        , inf.cd_lista_serv
        , inf.cod_cest
        , inf.cean
     from nota_fiscal         nf
        , item_nota_fiscal    inf
    where inf.notafiscal_id   = nf.id
      and nf.empresa_id       = en_empresa_id
      and nf.dm_arm_nfe_terc  = 0     -- Não pegar notas armarenadas
      and nf.dm_st_integra    = 6     -- Integração de Legado
      and nf.dm_st_proc       = 4     -- NF Legado Integradas entram como Processadas
      and nf.dm_legado        = 1     -- Legado
      and inf.item_id         is null -- Notas que não geraram item
      and rownum              <= 100; -- Roda de 100 em 100 para não sobrecarrear
   --
begin
   --
   vn_fase := 1;
   --
   for rec1 in c_emp loop
      exit when c_emp%notfound or (c_emp%notfound) is null;
      --
      vn_fase := 1.1;
      --
      vn_empresa_id_matriz := pk_csf.fkg_empresa_id_matriz ( en_empresa_id => rec1.empresa_id );
      --
      vn_fase := 1.2;
      --
      vv_cpf_cnpj := pk_csf.fkg_cnpj_ou_cpf_empresa ( en_empresa_id => rec1.empresa_id );
      --
      vn_fase := 2;
      --
      for rec in c_item(rec1.empresa_id) loop
         exit when c_item%notfound or (c_item%notfound) is null;
         --
         vn_fase := 2.1;
         --
         vn_unidade_id := pk_csf.fkg_Unidade_id ( en_multorg_id => rec1.multorg_id
                                                , ev_sigla_unid => trim(upper(rec.unid_com)) );
         --
         if nvl(vn_unidade_id,0) <= 0 then
            --
            vn_fase := 2.2;
            --
            select unidade_seq.nextval
              into vn_unidade_id
              from dual;
            --
            insert into unidade ( ID
                                , SIGLA_UNID
                                , DESCR
                                , MULTORG_ID
                                )
                         values ( vn_unidade_id -- ID
                                , trim(upper(rec.unid_com)) -- SIGLA_UNID
                                , 'Unidade: ' || trim(upper(rec.unid_com)) -- DESCR
                                , rec1.multorg_id
                                );
            --
         end if;
         --
         vn_fase := 3;
         --
         vn_ncm_id := pk_csf.fkg_Ncm_id ( ev_cod_ncm => rec.cod_ncm );
         --
         vn_fase := 3.1;
         --
         vn_item_id := pk_csf.fkg_Item_id_conf_empr ( en_empresa_id => vn_empresa_id_matriz
                                                    , ev_cod_item   => trim(rec.cod_item) );
         --
         vn_fase := 3.2;
         --
         vn_tpservico_id := pk_csf.fkg_Tipo_Servico_id ( ev_cod_lst => rec.cd_lista_serv );
         --
         vn_fase := 3.3;
         --
         vn_cest_id := pk_csf.fkg_id_cest_cd ( ev_cest_cd => rec.cod_cest );
         --
         vn_fase := 4;
         --
         if (nvl(vn_item_id,0) > 0 and nvl(vn_cest_id,0) > 0) then
         --
              update item 
              set CEST_ID = vn_cest_id 
              where id = vn_item_id;
         --
         end if;
         --
         if (nvl(vn_item_id,0) > 0 and rec.cean is not null) then
         --
              update item 
              set cod_barra = rec.cean
              where id = vn_item_id;
         --
         end if;
         --   
         if nvl(vn_item_id,0) <= 0  then
            --
            begin
               --
               insert into item ( ID
                             , EMPRESA_ID
                             , COD_ITEM
                             , DESCR_ITEM
                             , UNIDADE_ID
                             , DM_ORIG_MERC
                             , TIPOITEM_ID
                             , NCM_ID
                             , TPSERVICO_ID
                             , CEST_ID
                             , cod_barra
                             )
                      values ( item_seq.nextval -- ID
                             , vn_empresa_id_matriz -- EMPRESA_ID
                             , upper(trim(rec.COD_ITEM))
                             , substr(rec.DESCR_ITEM, 1, 120)
                             , vn_unidade_id
                             , nvl(rec.orig,0) -- dm_orig_merc
                             , 1 -- tipoitem_id
                             , vn_ncm_id
                             , vn_tpservico_id
                             , vn_cest_id
                             , rec.cean
                             );
               --
            exception
               when others then
                  --
                  gv_mensagem_log := 'Erro na pkb_cria_item_nfe_legado fase('||vn_fase||'): '||sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico_nf.id%type;
                  begin
                     pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                         , ev_mensagem         => gv_mensagem_log
                                         , ev_resumo           => gv_mensagem_log
                                         , en_tipo_log         => erro_de_validacao
                                         , en_referencia_id    => null
                                         , ev_obj_referencia   => null );
                  exception
                     when others then
                        null;
                  end;
            end;
         end if;
         --
         pk_csf_api_cad.pkb_atual_dep_item ( en_multorg_id => rec1.multorg_id
                                           , ev_cpf_cnpj   => vv_cpf_cnpj
                                           , ev_cod_item   => rec.cod_item );
         --
         commit;
         --
      end loop;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_cria_item_nfe_legado fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => null
                             , ev_obj_referencia   => null );
      exception
         when others then
            null;
      end;
   --
END PKB_CRIA_ITEM_NFE_LEGADO;

----------------------------------------------
-- Procedimento cria a Pessoa de NFe legado --
----------------------------------------------
PROCEDURE PKB_CRIA_PESSOA_NFE_LEGADO ( en_multorg_id  in mult_org.id%type )
IS
   --
   vn_fase number := 0;
   vt_log_generico_nf       dbms_sql.number_table;
   vn_notafiscal_id         nota_fiscal.id%type;
   --
   cursor c_emp is
   select e.id empresa_id
        , e.multorg_id
     from empresa e
    where 1 = 1
      and e.multorg_id    = en_multorg_id
      and e.dm_situacao   = 1 -- 0-inativa, 1-ativa
      and e.dm_atual_part = 1; -- 0-não, 1-sim -- atualiza participante na integração
   --
   cursor c_dados (en_empresa_id empresa.id%type) is
   select nfd.*
     from nota_fiscal nf
        , nota_fiscal_dest nfd
    where nf.empresa_id        = en_empresa_id
      and nf.dm_ind_emit       = 0 -- Emissão Propria
      and nf.dm_st_integra     = 6 -- legado
      and nf.dm_arm_nfe_terc   = 0
      and nvl(nf.pessoa_id,0) <= 0
      and nfd.notafiscal_id    = nf.id
    order by 1;
   --
begin
   --
   vn_fase := 1;
   --
   for rec1 in c_emp loop
      exit when c_emp%notfound or (c_emp%notfound) is null;
      --
      vn_fase := 2;
      --
      for rec in c_dados(rec1.empresa_id) loop
         exit when c_dados%notfound or (c_dados%notfound) is null;
         --
         vt_log_generico_nf.delete;
         --
         vn_notafiscal_id := rec.notafiscal_id;
         --
         vn_fase := 3;
         -- informações de Pessoa
         pk_csf_api_cad.gt_row_pessoa := null;
         --
         if trim(rec.cnpj) is not null then
            pk_csf_api_cad.gt_row_pessoa.cod_part        := trim(rec.cnpj);
            pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa  := 1; -- juridica
         elsif trim(rec.cpf) is not null then
            pk_csf_api_cad.gt_row_pessoa.cod_part        := trim(rec.cpf);
            pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa  := 0; -- fisica
         else
            pk_csf_api_cad.gt_row_pessoa.cod_part        := rec.notafiscal_id;
            pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa  := 2; -- Juridica
         end if;
         --
         pk_csf_api_cad.gt_row_pessoa.nome            := substr(rec.nome, 1, 60);
         pk_csf_api_cad.gt_row_pessoa.fantasia        := null;
         pk_csf_api_cad.gt_row_pessoa.lograd          := substr(rec.lograd, 1, 60);
         pk_csf_api_cad.gt_row_pessoa.nro             := rec.nro;
         pk_csf_api_cad.gt_row_pessoa.cx_postal       := null;
         pk_csf_api_cad.gt_row_pessoa.compl           := rec.compl;
         pk_csf_api_cad.gt_row_pessoa.bairro          := rec.bairro;
         pk_csf_api_cad.gt_row_pessoa.cep             := rec.cep;
         pk_csf_api_cad.gt_row_pessoa.fone            := trim(rec.fone);  --trim(substr(rec.fone, 1, 10));
         pk_csf_api_cad.gt_row_pessoa.fax             := null;
         pk_csf_api_cad.gt_row_pessoa.email           := substr(rec.email, 1, 60);
         pk_csf_api_cad.gt_row_pessoa.multorg_id      := rec1.multorg_id;
         --
         vn_fase := 4;
         -- Valida se o participante não está cadastrado como empresa
         if pk_csf.fkg_valida_part_empresa ( en_multorg_id => pk_csf_api_cad.gt_row_pessoa.multorg_id
                                           , ev_cod_part   => pk_csf_api_cad.gt_row_pessoa.cod_part ) = FALSE then
            -- chama API de integração de pessoa
            pk_csf_api_cad.pkb_ins_atual_pessoa ( est_log_generico    => vt_log_generico_nf
                                                , est_pessoa          => pk_csf_api_cad.gt_row_pessoa
                                                , ev_ibge_cidade      => rec.cidade_ibge
                                                , en_cod_siscomex     => rec.cod_pais
                                                , en_empresa_id       => rec1.empresa_id
                                                );
            --
         else
            --
            pk_csf_api_cad.gt_row_pessoa.id := pk_csf.fkg_pessoa_id_cod_part ( en_multorg_id  => pk_csf_api_cad.gt_row_pessoa.multorg_id
                                                                             , ev_cod_part    => trim(pk_csf_api_cad.gt_row_pessoa.cod_part)
                                                                             );
            --
         end if;
         --
         vn_fase := 5;
         --
         if pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa = 0
            and nvl(pk_csf_api_cad.gt_row_pessoa.id,0) > 0
            and pk_csf.fkg_is_numerico(trim(rec.cpf))
            then -- Pessoa Física
            --
            vn_fase := 5.1;
            --
            pk_csf_api_cad.gt_row_fisica := null;
            --
            pk_csf_api_cad.gt_row_fisica.pessoa_id  := pk_csf_api_cad.gt_row_pessoa.id;
            pk_csf_api_cad.gt_row_fisica.num_cpf    := to_number(substr(lpad(rec.cpf, 11, '0'), 1, 9));
            pk_csf_api_cad.gt_row_fisica.dig_cpf    := to_number(substr(lpad(rec.cpf, 11, '0'), 10, 2));
            pk_csf_api_cad.gt_row_fisica.rg         := null;
            pk_csf_api_cad.gt_row_fisica.inscr_prod := rec.ie;
            --
            vn_fase := 5.2;
            --
            pk_csf_api_cad.pkb_ins_atual_fisica ( est_log_generico    => vt_log_generico_nf
                                                , est_fisica          => pk_csf_api_cad.gt_row_fisica 
                                                , en_empresa_id       => rec1.empresa_id
                                                );
            --
            --| Atualiza os dados de tabelas dependentes de Pessoa
            pk_csf_api_cad.pkb_atual_dep_pessoa( en_multorg_id => rec1.multorg_id
                                               , ev_cpf_cnpj   => lpad(rec.cpf, 11, '0')
                                               , en_empresa_id       => rec1.empresa_id
                                               );
            --
         elsif pk_csf_api_cad.gt_row_pessoa.dm_tipo_pessoa = 1
            and nvl(pk_csf_api_cad.gt_row_pessoa.id,0) > 0
            and pk_csf.fkg_is_numerico(trim(rec.cnpj))
            then -- Pessoa Jurídica
            --
            vn_fase := 6;
            --
            pk_csf_api_cad.gt_row_juridica := null;
            --
            pk_csf_api_cad.gt_row_juridica.pessoa_id   := pk_csf_api_cad.gt_row_pessoa.id;
            vn_fase := 6.1;
            pk_csf_api_cad.gt_row_juridica.num_cnpj    := to_number(substr(lpad(rec.cnpj, 14, '0'), 1, 8));
            vn_fase := 6.2;
            pk_csf_api_cad.gt_row_juridica.num_filial  := to_number(substr(lpad(rec.cnpj, 14, '0'), 9, 4));
            vn_fase := 6.3;
            pk_csf_api_cad.gt_row_juridica.dig_cnpj    := to_number(substr(lpad(rec.cnpj, 14, '0'), 13, 2));
            vn_fase := 6.4;
            pk_csf_api_cad.gt_row_juridica.ie          := rec.ie;
            pk_csf_api_cad.gt_row_juridica.iest        := null;
            pk_csf_api_cad.gt_row_juridica.im          := null;
            vn_fase := 6.5;
            pk_csf_api_cad.gt_row_juridica.suframa     := trim(rec.suframa);
            --
            pk_csf_api_cad.pkb_ins_atual_juridica ( est_log_generico => vt_log_generico_nf
                                                  , est_juridica     => pk_csf_api_cad.gt_row_juridica
                                                  , en_empresa_id       => rec1.empresa_id
                                                  );
            --
            vn_fase := 6.6;
            --| Atualiza os dados de tabelas dependentes de Pessoa
            pk_csf_api_cad.pkb_atual_dep_pessoa( en_multorg_id => rec1.multorg_id
                                               , ev_cpf_cnpj   => lpad(rec.cnpj, 14, '0')
                                               , en_empresa_id       => rec1.empresa_id
                                               );
            --
         end if;
         --
         vn_fase := 7;
         --
         begin
            --
            update nota_fiscal
               set pessoa_id = pk_csf_api_cad.gt_row_pessoa.id
             where id = rec.notafiscal_id;
            --
         exception
            when others then
               --
               gv_mensagem_log := 'Erro na pkb_cria_pessoa_nfe_legado fase('||vn_fase||'): '||sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico_nf.id%type;
               begin
                  pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                                      , ev_mensagem         => gv_mensagem_log
                                      , ev_resumo           => gv_mensagem_log
                                      , en_tipo_log         => erro_de_validacao
                                      , en_referencia_id    => vn_notafiscal_id
                                      , ev_obj_referencia   => 'NOTA_FISCAL'
                                      );
               exception
                  when others then
                     null;
               end;
         end;
         --
         vn_fase := 8;
         --
         commit;
         --
      end loop;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pkb_cria_pessoa_nfe_legado fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => vn_notafiscal_id
                             , ev_obj_referencia   => 'NOTA_FISCAL'
                             );
      exception
         when others then
            null;
      end;
  --
END PKB_CRIA_PESSOA_NFE_LEGADO;
   --
-----------------------------------------------------------------------------------------------
-- Processo de relacionamento de Consulta de NFe Destinadas - Novo processo melhoria técnica --
-----------------------------------------------------------------------------------------------
procedure pkb_rel_cons_nfe_dest(en_multorg_id in mult_org.id%type) is
  --
  vn_fase           number := 0;
  vn_loggenerico_id number := null;
  --
  vn_notafiscal_id      nota_fiscal.id%type := 0;
  vn_consnfedest_id     cons_nfe_dest.id%type;
  vn_dm_st_proc         Nota_Fiscal.dm_st_proc%type := null;
  vv_ibge_estado        estado.ibge_estado%type;
  vv_sigla_estado       estado.sigla_estado%type;
  vd_dt_emiss           nota_fiscal.dt_emiss%type;
  vv_cnpj_emit          varchar2(14);
  vv_cnpj_dest          varchar2(14);
  vv_serie              nota_fiscal.serie%type;
  vn_nro_nf             nota_fiscal.nro_nf%type;
  vn_dm_forma_emiss     nota_fiscal.dm_forma_emiss%type;
  vn_cnf_nfe            nota_fiscal.cnf_nfe%type;
  vn_dig_verif_chave    nota_fiscal.dig_verif_chave%type;
  vn_pessoa_id          pessoa.id%type;
  vn_dm_ind_emit        nota_fiscal.dm_ind_emit%type;
  vn_dm_arm_nfe_terc    nota_fiscal.dm_arm_nfe_terc%type;
  vn_tipoeventosefaz_id tipo_evento_sefaz.id%type;
  vn_qtde_ciencia_mde   number;
  vd_hr_evento          date;
  vn_dm_reg_co_mde_aut  empr_param_cons_mde.dm_reg_co_mde_aut%type;
  vn_dm_ind_emissor     empr_param_cons_mde.dm_ind_emi%type;
  vn_num_cnpj_empr      juridica.num_cnpj%type;
  vn_sitdocto_id        sit_docto.id%type;
  vn_modfiscal_id       mod_fiscal.id%type;
  --
  cursor c_lote_cons(en_multorg_id in mult_org.id%type) is
    select em.multorg_id,
           em.pessoa_id,
           lc.id loteconsnfedest_id,
           lc.empresa_id,
           lc.dm_tp_amb,
           lc.cod_msg,
           lc.motivo_ret
      from empresa em, lote_cons_nfe_dest lc
     where em.multorg_id  = en_multorg_id
       and lc.empresa_id  = em.id
       and lc.dm_situacao = 2 -- Processado
     order by lc.dt_lote;
  --
  cursor c_cons_nfe_dest(en_loteconsnfedest_id in lote_cons_nfe_dest.id%type) is
    select cn.id consnfedest_id,
           cn.nro_chave_nfe,
           cn.cnpj_emit,
           cn.dm_ind_oper,
           cn.nsu
      from cons_nfe_dest cn
     where cn.loteconsnfedest_id = en_loteconsnfedest_id
       and cn.cnpj_emit          = SUBSTR(cn.nro_chave_nfe,7,14) --#62316
       and cn.notafiscal_id      is null
     order by cn.id;
  --
  cursor c_nf(en_consnfedest_id in cons_nfe_dest.id%type) is
    select id,
           consnfedest_id,
           nome_emit,
           ie_emit,
           dt_emiss,
           vl_total_nf,
           dig_val,
           dt_hr_recto,
           dm_sit_nfe,
           dm_sit_conf,
           nro_protocolo
      from cons_nfe_dest_nf
     where consnfedest_id = en_consnfedest_id
    union all
    select r.id,
           r.consnfedest_id,
           'XXX', -- nome_emit
           '000', -- ie_emit
           r.dt_hr_recto, -- dt_emiss
           0, -- vl_total_nf
           'X', -- dig_val
           r.dt_hr_recto,
           case
             when tes.cd = '110111' then -- Evento de cancelamento
              3 -- NF-e cancelada
             else
              1 -- Uso autorizado no momento da consulta
           end, -- dm_sit_nfe
           0, -- dm_sit_conf
           r.nro_protocolo
      from cons_nfe_dest_cce r, 
           tipo_evento_sefaz tes
     where r.consnfedest_id = en_consnfedest_id
       and tes.id(+)        = r.tipoeventosefaz_id
     order by 1;
  --
  cursor c_evento(en_consnfedest_id in cons_nfe_dest.id%type) is
    select r.*
      from cons_nfe_dest_cce r
     where r.consnfedest_id = en_consnfedest_id
     order by 1;
  --
BEGIN
  --
  vn_fase := 1;
  --
  vn_sitdocto_id        := pk_csf.fkg_sit_docto_id('00');
  vn_modfiscal_id       := pk_csf.fkg_mod_fiscal_id('55');
  vn_tipoeventosefaz_id := pk_csf.fkg_tipoeventosefaz_id('210210');
  --
  vn_fase := 2;
  --
  for r_lote in c_lote_cons(en_multorg_id => en_multorg_id) loop
    --
    exit when c_lote_cons%notfound or(c_lote_cons%notfound) is null;
    --
    vn_fase := 3;
    --| Recuperar a raiz do CNPJ da empresa em questão
    begin
      select ju.num_cnpj
        into vn_num_cnpj_empr
        from juridica ju
       where ju.pessoa_id = r_lote.pessoa_id;
    exception
      when others then
        vn_num_cnpj_empr := null;
    end;
    --
    vn_fase := 4;
    --| Recuperar o indicador do emissor parametrizado para a empresa em questão
    begin
      select ep.dm_ind_emi, 
             ep.dm_reg_co_mde_aut
        into vn_dm_ind_emissor, 
             vn_dm_reg_co_mde_aut
        from empr_param_cons_mde ep
       where ep.empresa_id = r_lote.empresa_id;
    exception
      when others then
        vn_dm_ind_emissor    := null;
        vn_dm_reg_co_mde_aut := 0;
    end;
    --
    vn_fase := 5;
    --
    for rec in c_cons_nfe_dest(en_loteconsnfedest_id => r_lote.loteconsnfedest_id) loop
      --
      exit when c_cons_nfe_dest%notfound or(c_cons_nfe_dest%notfound) is null;
      --
      vn_fase := 6;
      --
      vn_consnfedest_id := rec.consnfedest_id;
      vd_hr_evento      := new_time(systimestamp, 'GMT', 'ADT');
      vv_cnpj_emit      := substr(rec.nro_chave_nfe, 7, 14);
      --
      vn_fase := 7;
      
      -- Função retorna ID da nota fiscal se existir, ou retorna NULL se não existir
      /*vn_notafiscal_id := pk_csf.fkg_notafiscal_id_chave_empr ( en_nro_chave_nfe => rec.nro_chave_nfe
                                                                  en_empresa_id    => r_lote.empresa_id,
      );*/
      
      -- Função retorna ID da nota fiscal para terceiros se existir, ou retorna NULL se não existir
      begin
        select max(nf.id)
          into vn_notafiscal_id
          from nota_fiscal nf
         where nf.nro_chave_nfe = rec.nro_chave_nfe
           and nf.empresa_id    = r_lote.empresa_id
           and nf.dm_ind_emit   = 1; -- Terceiros
      exception
        when others then
          vn_notafiscal_id := null;
      end;
      --
      vn_fase := 8;
      --
      if nvl(vn_notafiscal_id, 0) = 0 then
        --
        vn_fase            := 8.1;
        vn_dm_ind_emit     := null;
        vn_dm_arm_nfe_terc := null;
        --
      else
        --
        vn_fase := 8.2;
        --
        begin
          select nf.dm_ind_emit, 
                 nf.dm_arm_nfe_terc
            into vn_dm_ind_emit, 
                 vn_dm_arm_nfe_terc
            from nota_fiscal nf
           where nf.id = vn_notafiscal_id;
        exception
          when others then
            vn_dm_ind_emit     := null;
            vn_dm_arm_nfe_terc := null;
        end;
        --
      end if;
      --
      vn_fase := 9;
      --
      if nvl(vn_dm_ind_emit, -1) = 0 and nvl(vn_dm_arm_nfe_terc, -1) = 0 then
        --
        vn_fase := 10;
        goto sair;
        --
      elsif nvl(vn_dm_ind_emissor, 0) = 1 and -- Somente as NF-e emitidas por emissor/remetente que não tenham a mesma raiz do CNPJ do destinatário
            nvl(vn_num_cnpj_empr, 0) = substr(vv_cnpj_emit, 1, 8) then
        -- mesma raiz de CNPJ
        --
        vn_fase := 11;
        goto sair;
        --
      else
        --
        vn_fase := 12;
        --| Verificar se essa Nfe existe como Terceiro em qualquer outra empresa do MultOrg
        if substr(rec.nro_chave_nfe, 7, 14) = rec.cnpj_emit then
          --
          vn_fase := 12.1;
          -- Recupera as NFe de Armazenamento de terceiro, que existem nesse multorg
          -- Foi implementado para recupera o ID da NOTA_FISCAL de Armazenamento de Terceiro, de uma unica empresa, mesmo que o MDe do Governo Retorne para outra
          begin
            select min(nf.id)
              into vn_notafiscal_id
              from empresa em, 
                   nota_fiscal nf
             where em.multorg_id      = r_lote.multorg_id
               and em.id              = r_lote.empresa_id --#62316
               and nf.empresa_id      = em.id
               and nf.dm_arm_nfe_terc = 1 -- Armazenamento Terceiro
               and nf.nro_chave_nfe   = rec.nro_chave_nfe;
          exception
            when others then
              vn_notafiscal_id := null;
          end;
          --
          vn_fase := 12.2;
          --
          if nvl(vn_notafiscal_id, 0) <= 0 then
            --
            vn_fase := 12.3;
            --
            begin
              select min(nf.id)
                into vn_notafiscal_id
                from empresa em, 
                     nota_fiscal nf
               where em.multorg_id      = r_lote.multorg_id
                 and em.id              = r_lote.empresa_id --#62316
                 and nf.empresa_id      = em.id
                 and nf.dm_ind_emit     = 0 -- Emissão Própria
                 and nf.dm_arm_nfe_terc = 0 -- Não é Armazenamento Terceiro
                 and nf.nro_chave_nfe   = rec.nro_chave_nfe;
            exception
              when others then
                vn_notafiscal_id := null;
            end;
            --
            vn_fase := 12.4;
            --
            if nvl(vn_notafiscal_id, 0) > 0 then
              --
              vn_fase := 12.5;
              -- Recupera o destinatário da NFE de Emissão Propria
              begin
                select nvl(nf.cnpj, nf.cpf)
                  into vv_cnpj_dest
                  from nota_fiscal_dest nf
                 where nf.notafiscal_id = vn_notafiscal_id;
              exception
                when others then
                  vv_cnpj_dest := null;
              end;
              --
              vn_fase := 12.6;
              -- Verificar se o destinatário é uma Empresa da Organização
              if nvl(pk_csf.fkg_empresa_id_pelo_cpf_cnpj(en_multorg_id => r_lote.multorg_id,
                                                         ev_cpf_cnpj   => vv_cnpj_dest), 0) > 0 then
                --
                vn_fase          := 12.7;
                vn_notafiscal_id := null; -- Limpa a NFe para Criar o Terceiro
                --
              end if;
              --
            end if;
            --
          end if;
          --
        end if;
        --
      end if;
      --
      vn_fase := 13;
      --
      vn_dm_ind_emit     := null;
      vn_dm_arm_nfe_terc := null;
      --
      vn_fase := 14;
      --
      for rec_nf in c_nf(rec.consnfedest_id) loop
        --
        exit when c_nf%notfound or(c_nf%notfound) is null;
        --
        vn_fase       := 15;
        vn_dm_st_proc := 0;
        --
        if rec_nf.dm_sit_nfe = 1 then
          -- 1=Uso autorizado no momento da consulta;
          --
          vn_fase       := 16;
          vn_dm_st_proc := 4;
          --
        elsif rec_nf.dm_sit_nfe = 2 then
          -- 2=Uso denegado;
          --
          vn_fase       := 17;
          vn_dm_st_proc := 6;
          --
        elsif rec_nf.dm_sit_nfe = 3 then
          -- 3=NF-e cancelada;
          --
          vn_fase       := 18;
          vn_dm_st_proc := 7;
          -- realizar a consulta da situação da Nfe na Sefaz, para assim, garantir o retorno para a tabela VW_CSF_XML_NFE_TERC
          if FKG_CHECA_CHAVE_ENVIO_PENDENTE(rec.nro_chave_nfe) = 0 then
             --
             -- Chama rotina que atualiza ou insere a tabela csf_cons_sit
             pk_csf_api_cons_sit.gt_row_csf_cons_sit                  := null;
                --
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.id	        :=	csfconssit_seq.nextval; -- id
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.empresa_id	:=	r_lote.empresa_id;
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.notafiscal_id	:=	null; -- notafiscal_id
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.usuario_id	:=	null; -- usuario_id
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.referencia	:=	null; -- referencia
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.chnfe	        :=	rec.nro_chave_nfe; --chnfe
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.codufibge	        :=	substr(rec.nro_chave_nfe, 1, 2); --codufibge
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.dm_tp_cons	:=	6; -- dm_tp_cons -- Automática através de integração table/view
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.dm_situacao	:=	1; -- dm_situacao -- consulta pendente
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.dt_hr_cons_sit	:=	sysdate; -- dt_hr_cons_sit
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.versao	        :=	null; -- versao
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.tpamb	        :=	r_lote.dm_tp_amb; -- tpamb
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.veraplic	        :=	null; -- veraplic
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.cstat	        :=	null; -- cstat
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.xmotivo	        :=	null; -- xmotivo
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.cuf	        :=	null; -- cuf
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.dhrecbto	        :=	null; -- dhrecbto
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.nprot	        :=	null; -- nprot
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.digval	        :=	null; -- digval
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.signature	        :=	null; -- signature
              pk_csf_api_cons_sit.gt_row_csf_cons_sit.dm_rec_fisico 	:=	0; -- dm_rec_fisico
                --
              pk_csf_api_cons_sit.pkb_ins_atu_csf_cons_sit ( est_row_csf_cons_sit => pk_csf_api_cons_sit.gt_row_csf_cons_sit
                                                      , ev_campo_atu         => null          
                                                      , en_tp_rotina         => 1 -- inserção
                                                      , ev_rotina_orig       => 'pk_csf_api.pkb_rel_cons_nfe_dest'
                                                      );
	   --
             end if;   
          --
        else
          --
          vn_fase       := 19;
          vn_dm_st_proc := 4;
          --
        end if;
        --
        vn_fase := 20;
        --
        if nvl(vn_notafiscal_id, 0) <= 0 then
          --
          vn_fase := 21;
          --
          select notafiscal_seq.nextval into vn_notafiscal_id from dual;
          --
          vn_fase := 22;
          --
          vv_ibge_estado  := substr(rec.nro_chave_nfe, 1, 2);
          vv_sigla_estado := pk_csf.fkg_estado_id_sigla(pk_csf.fkg_estado_ibge_id(vv_ibge_estado));
          --
          vn_fase := 23;
          --
          if rec_nf.dt_emiss is not null then
            vd_dt_emiss := rec_nf.dt_emiss;
          else
            vd_dt_emiss := sysdate;
          end if;
          --
          vn_fase := 24;
          --
          vv_cnpj_emit := substr(rec.nro_chave_nfe, 7, 14);
          vv_serie     := to_number(substr(rec.nro_chave_nfe, 23, 3));
          vn_nro_nf    := substr(rec.nro_chave_nfe, 26, 9);
          --
          vn_fase := 25;
          --
          vn_dm_forma_emiss  := substr(rec.nro_chave_nfe, 35, 1);
          vn_cnf_nfe         := substr(rec.nro_chave_nfe, 36, 8);
          vn_dig_verif_chave := substr(rec.nro_chave_nfe, 44, 1);
          --
          vn_fase := 26;
          -- busca a pessoa
          vn_pessoa_id := pk_csf.fkg_pessoa_id_cpf_cnpj(en_multorg_id => r_lote.multorg_id, -- pk_csf.fkg_multorg_id_empresa(en_empresa_id => rec.empresa_id)
                                                        en_cpf_cnpj   => vv_cnpj_emit);
          --
          vn_fase := 27;
          --
          if vn_dm_forma_emiss not in (1, 2, 3, 4, 5, 6, 7, 8, 9) then
            vn_dm_forma_emiss := 1;
          end if;
          --
          vn_fase := 28;
          --
          begin
            --
            vn_fase := 28.1;
            --
            -- Variavel global usada em logs de triggers (carrega)
            gv_objeto := 'pk_csf_api.pkb_rel_cons_nfe_dest';
            gn_fase   := vn_fase;
            --
            insert into nota_fiscal
              (id,
               empresa_id,
               pessoa_id,
               sitdocto_id,
               natoper_id,
               lote_id,
               inutilizanf_id,
               versao,
               id_tag_nfe,
               pk_nitem,
               nat_oper,
               dm_ind_pag,
               modfiscal_id,
               dm_ind_emit,
               dm_ind_oper,
               dt_sai_ent,
               dt_emiss,
               nro_nf,
               serie,
               uf_embarq,
               local_embarq,
               nf_empenho,
               pedido_compra,
               contrato_compra,
               dm_st_proc,
               dt_st_proc,
               dm_forma_emiss,
               dm_impressa,
               dm_tp_impr,
               dm_tp_amb,
               dm_fin_nfe,
               dm_proc_emiss,
               vers_proc,
               dt_aut_sefaz,
               dm_aut_sefaz,
               cidade_ibge_emit,
               uf_ibge_emit,
               dt_hr_ent_sist,
               nro_chave_nfe,
               cnf_nfe,
               dig_verif_chave,
               vers_apl,
               dt_hr_recbto,
               nro_protocolo,
               digest_value,
               msgwebserv_id,
               cod_msg,
               motivo_resp,
               nfe_proc_xml,
               dm_st_email,
               id_usuario_erp,
               impressora_id,
               usuario_id,
               dm_st_integra,
               vias_danfe_custom,
               nro_chave_nfe_adic,
               nro_tentativas_impr,
               dt_ult_tenta_impr,
               sub_serie,
               codconsitemcont_id,
               inforcompdctofiscal_id,
               cod_cta,
               dm_tp_ligacao,
               dm_cod_grupo_tensao,
               dm_tp_assinante,
               sistorig_id,
               unidorg_id,
               serie_scan,
               nro_nf_scan,
               hora_sai_ent,
               nro_chave_cte_ref,
               dt_cont,
               just_cont,
               dm_ret_nf_erp,
               xml_wssinal_suframa,
               dm_st_wssinal_suframa,
               dm_arm_nfe_terc,
               dm_rec_xml,
               dm_danfe_rec,
               nro_email_env_forn,
               dm_fin_email_forn)
            values
              (vn_notafiscal_id,
               r_lote.empresa_id,
               vn_pessoa_id,
               vn_sitdocto_id, -- sitdocto_id
               null,
               null,
               null,
               null,
               'NFe' || rec.nro_chave_nfe,
               null,
               null,
               0, -- dm_ind_pag
               vn_modfiscal_id, -- modfiscal_id
               1, -- dm_ind_emit
               nvl(rec.dm_ind_oper, 0),
               null, -- dt_sai_ent
               vd_dt_emiss, -- dt_emiss
               vn_nro_nf, -- nro_nf
               vv_serie, -- serie
               null, -- uf_embarq
               null, -- local_embarq
               null, -- nf_empenho
               null, -- pedido_compra
               null, -- contrato_compra
               vn_dm_st_proc, -- dm_st_proc
               sysdate, -- dt_st_proc
               vn_dm_forma_emiss, -- dm_forma_emiss
               3, -- dm_impressa -- 3-Não se aplica
               1, -- dm_tp_impr
               r_lote.dm_tp_amb,
               1, -- dm_fin_nfe
               0, -- dm_proc_emiss
               '1', -- vers_proc
               rec_nf.dt_hr_recto, -- dt_aut_sefaz
               1, -- dm_aut_sefaz
               9999999, -- cidade_ibge_emit
               vv_ibge_estado, -- uf_ibge_emit
               sysdate, -- dt_hr_ent_sist
               rec.nro_chave_nfe, -- nro_chave_nfe
               vn_cnf_nfe,
               vn_dig_verif_chave,
               '1', -- vers_apl
               rec_nf.dt_hr_recto, -- dt_hr_recbto
               nvl(rec_nf.nro_protocolo, rec.nsu), -- nro_protocolo
               rec_nf.dig_val, --digest_value
               null, -- msgwebserv_id
               r_lote.cod_msg, -- cod_msg
               r_lote.motivo_ret, -- motivo_resp
               null, -- nfe_proc_xml
               1, -- dm_st_email
               null, -- id_usuario_erp
               null, -- impressora_id
               null, -- usuario_id
               0, -- dm_st_integra
               0, -- vias_danfe_custom
               null, -- nro_chave_nfe_adic
               0, -- nro_tentativas_impr
               null, -- dt_ult_tenta_impr
               null, -- sub_serie
               null, -- codconsitemcont_id
               null, -- inforcompdctofiscal_id
               null, -- cod_cta
               null, -- dm_tp_ligacao
               null, -- dm_cod_grupo_tensao
               null, -- dm_tp_assinante
               null, -- sistorig_id
               null, -- unidorg_id
               null, -- serie_scan
               null, -- nro_nf_scan
               null, -- hora_sai_ent
               null, -- nro_chave_cte_ref
               null, -- dt_cont
               null, -- just_cont
               0, -- dm_ret_nf_erp -- Não
               null, -- xml_wssinal_suframa
               0, -- dm_st_wssinal_suframa
               1, -- dm_arm_nfe_terc
               0, -- dm_rec_xml
               0, -- dm_danfe_rec
               0, -- nro_email_env_forn
               0 -- dm_fin_email_forn
               );
            --
            -- Variavel global usada em logs de triggers (limpa)
            gv_objeto := 'pk_csf_api';
            gn_fase   := null;
            --
            vn_fase := 28.2;
            -- insere informações do emitente
            insert into nota_fiscal_emit
              (id,
               notafiscal_id,
               nome,
               lograd,
               nro,
               cidade_ibge,
               uf,
               cnpj,
               ie,
               dm_reg_trib)
            values
              (notafiscalemit_seq.nextval,
               vn_notafiscal_id,
               rec_nf.nome_emit,
               'SL',
               'SN',
               9999999,
               vv_sigla_estado, -- uf
               vv_cnpj_emit, -- cnpj
               rec_nf.ie_emit,
               3 -- dm_reg_trib
               );
            --
            vn_fase := 28.3;
            --
            insert into nota_fiscal_dest
              (id,
               notafiscal_id,
               cnpj,
               cpf,
               nome,
               lograd,
               nro,
               compl,
               bairro,
               cidade,
               cidade_ibge,
               uf,
               cep,
               cod_pais,
               pais,
               fone,
               ie,
               suframa,
               email,
               usuario_id,
               dm_integr_edi)
            values
              (notafiscaldest_seq.nextval,
               vn_notafiscal_id, -- notafiscal_id
               null, -- cnpj
               null, -- cpf
               'Integrar pelo XML', -- nome
               'SL', -- lograd
               'SN', -- nro
               null, -- compl
               'SB', -- bairro
               'SC', -- cidade
               9999999, -- cidade_ibge
               vv_sigla_estado, -- uf
               null, -- cep
               null, -- cod_pais
               null, -- pais
               null, -- fone
               null, -- ie
               null, -- suframa
               null, -- email
               null, -- usuario_id
               2); -- dm_integr_edi
            --
            vn_fase := 28.4;
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (carrega)
            pk_csf_api.gv_objeto := 'pk_csf_api.pkb_rel_cons_nfe_dest';
            pk_csf_api.gn_fase   := vn_fase;
            --
            insert into nota_fiscal_total
              (id,
               notafiscal_id,
               vl_base_calc_icms,
               vl_imp_trib_icms,
               vl_base_calc_st,
               vl_imp_trib_st,
               vl_total_item,
               vl_frete,
               vl_seguro,
               vl_desconto,
               vl_imp_trib_ii,
               vl_imp_trib_ipi,
               vl_imp_trib_pis,
               vl_imp_trib_cofins,
               vl_outra_despesas,
               vl_total_nf,
               vl_serv_nao_trib,
               vl_base_calc_iss,
               vl_imp_trib_iss,
               vl_pis_iss,
               vl_cofins_iss,
               vl_ret_pis,
               vl_ret_cofins,
               vl_ret_csll,
               vl_base_calc_irrf,
               vl_ret_irrf,
               vl_base_calc_ret_prev,
               vl_ret_prev,
               vl_total_serv,
               vl_abat_nt,
               vl_forn,
               vl_terc,
               vl_servico)
            values
              (notafiscaltotal_seq.nextval,
               vn_notafiscal_id, -- notafiscal_id
               0, -- vl_base_calc_icms
               0, -- vl_imp_trib_icms
               0, -- vl_base_calc_st
               0, -- vl_imp_trib_st
               0, -- vl_total_item
               0, -- vl_frete
               0, -- vl_seguro
               0, -- vl_desconto
               0, -- vl_imp_trib_ii
               0, -- vl_imp_trib_ipi
               0, -- vl_imp_trib_pis
               0, -- vl_imp_trib_cofins
               0, -- vl_outra_despesas
               rec_nf.vl_total_nf, -- vl_total_nf
               0, -- vl_serv_nao_trib
               0, -- vl_base_calc_iss
               0, -- vl_imp_trib_iss
               0, -- vl_pis_iss
               0, -- vl_cofins_iss
               0, -- vl_ret_pis
               0, -- vl_ret_cofins
               0, -- vl_ret_csll
               0, -- vl_base_calc_irrf
               0, -- vl_ret_irrf
               0, -- vl_base_calc_ret_prev
               0, -- vl_ret_prev
               0, -- vl_total_serv
               0, -- vl_abat_nt
               0, -- vl_forn
               0, -- vl_terc
               0 -- vl_servico
               );
            --
            -- Variavel global usada no trigger T_A_I_U_Nota_Fiscal_Total_01 (limpa)
            pk_csf_api.gv_objeto := 'pk_csf_api';
            pk_csf_api.gn_fase   := null;
            --
            vn_fase := 28.5;
            -- registra o log
            pkb_log_generico_nf(sn_loggenericonf_id => vn_loggenerico_id,
                                ev_mensagem         => 'Chave de acesso: ' || rec.nro_chave_nfe,
                                ev_resumo           => 'NFe criada a partir da consulta de dados Destinados a empresa',
                                en_tipo_log         => cons_sit_nfe_sefaz,
                                en_referencia_id    => vn_notafiscal_id,
                                ev_obj_referencia   => 'NOTA_FISCAL',
                                en_empresa_id       => r_lote.empresa_id);
            --
          exception
            when others then
              --
              gv_mensagem_log := 'Erro na inclusão de nota fiscal referente ao processo de "Relacionamento de Consulta de NFe Destinadas", procedimento: ' ||
                                 'pk_csf_api.pkb_rel_cons_nfe_dest, fase(' || vn_fase || ') CONSNFEDEST_ID = ' ||
                                 rec.consnfedest_id || ': ' || sqlerrm;
              --
              declare
                vn_loggenerico_id log_generico_nf.id%type;
              begin
                pkb_log_generico_nf(sn_loggenericonf_id => vn_loggenerico_id,
                                    ev_mensagem         => gv_mensagem_log,
                                    ev_resumo           => gv_mensagem_log,
                                    en_tipo_log         => erro_de_validacao,
                                    en_referencia_id    => vn_consnfedest_id,
                                    ev_obj_referencia   => 'CONS_NFE_DEST');
              exception
                when others then
                  null;
              end;
              --
              vn_fase := 28.6;
              --
              begin
                select max(nf.id)
                  into vn_notafiscal_id
                  from nota_fiscal nf
                 where nf.empresa_id      = r_lote.empresa_id
                   and nf.dm_ind_emit     = 1
                   and nf.dm_ind_oper     = nvl(rec.dm_ind_oper, 0)
                   and nf.modfiscal_id    = vn_modfiscal_id
                   and nf.serie           = vv_serie
                   and nf.nro_nf          = vn_nro_nf
                   and nf.dm_arm_nfe_terc = 1;
              exception
                when others then
                  vn_notafiscal_id := 0;
              end;
              --
          end;
          --
        else
          --
          vn_fase := 29;
          --
          begin
            select nf.dm_arm_nfe_terc
              into vn_dm_arm_nfe_terc
              from nota_fiscal nf
             where nf.id = vn_notafiscal_id;
          exception
            when others then
              vn_dm_arm_nfe_terc := 0;
          end;
          --
          vn_fase := 30;
          --
          if nvl(vn_dm_arm_nfe_terc, 0) = 1 then
            --
            vn_fase := 30.1;
            --
            -- Variavel global usada em logs de triggers (carrega)
            gv_objeto := 'pk_csf_api.pkb_rel_cons_nfe_dest';
            gn_fase   := vn_fase;
            --
            update nota_fiscal nf
               set nf.dm_st_proc    = vn_dm_st_proc, 
                   nf.dm_ret_nf_erp = 0 -- não
             where nf.id            = vn_notafiscal_id
               and dm_st_proc <> vn_dm_st_proc;
            --
            -- Variavel global usada em logs de triggers (limpa)
            gv_objeto := 'pk_csf_api';
            gn_fase   := null;
            --
          end if;
          --
        end if;
        --
        vn_fase := 31;
        --
        if vd_hr_evento < rec_nf.dt_hr_recto then
          --
          vd_hr_evento := rec_nf.dt_hr_recto;
          --
        end if;
        --
      end loop; -- fim c_nf -- nota fiscal e eventos
      --
      vn_fase := 32;
      --
      --| Finalização
      --
      <<sair>>
    --
      vn_fase := 33;
      --
      if nvl(vn_notafiscal_id, 0) > 0 then
        --
        vn_fase := 33.1;
        --
        if substr(rec.nro_chave_nfe, 7, 14) = rec.cnpj_emit then
          --
          vn_fase        := 33.2;
          vn_dm_ind_emit := null;
          --
          begin
            select nf.dm_ind_emit
              into vn_dm_ind_emit
              from nota_fiscal nf
             where nf.id = vn_notafiscal_id;
          exception
            when others then
              vn_dm_ind_emit := 0;
          end;
          --
          vn_fase := 33.3;
          --
          if nvl(vn_dm_reg_co_mde_aut, 0) = 1 and -- Sim regista a Ciencia da operação
             vn_dm_ind_emit = 1 then
            -- Terceiro -- somente registra para terceiro
            --
            vn_fase             := 33.4;
            vn_qtde_ciencia_mde := 0;
            --
            begin
              select count(1)
                into vn_qtde_ciencia_mde
                from nota_fiscal_mde
               where notafiscal_id      = vn_notafiscal_id
                 and dm_situacao        in (0, 1, 2, 3)
                 and tipoeventosefaz_id = vn_tipoeventosefaz_id;
            exception
              when others then
                vn_qtde_ciencia_mde := 0;
            end;
            --
            vn_fase := 33.5;
            --
            if nvl(vn_qtde_ciencia_mde, 0) <= 0 then
              --
              vn_fase := 33.6;
              --
              begin
                 if not fkg_ck_nota_fiscal_mde_registr(vn_notafiscal_id, vn_tipoeventosefaz_id) then
                    --
                insert into nota_fiscal_mde
                  (id,
                   notafiscal_id,
                   dm_situacao,
                   dt_hr_evento,
                   tipoeventosefaz_id,
                   dm_tipo_integra)
                values
                  (notafiscalmde_seq.nextval, --id
                   vn_notafiscal_id, -- notafiscal_id
                   0, -- dm_situacao
                   vd_hr_evento, -- dt_hr_evento
                   vn_tipoeventosefaz_id, -- tipoeventosefaz_id
                   0 -- Tipo de integração do evento. (0-Gerado automático pela aplicação/1-Manualmente no portal/2-Integração Webservice)
                   );
                 end if;
                 --      
              exception
                when others then
                  --
                  vn_fase := 33.7;
                  -- registra o log
                  gv_mensagem_log := 'NFe criada a partir da consulta de dados Destinados a empresa - NÃO FOI GERADO MDE - Tabela NOTA_FISCAL_MDE. ' ||
                                     'Erro = ' || sqlerrm || '.';
                  --
                  pkb_log_generico_nf(sn_loggenericonf_id => vn_loggenerico_id,
                                      ev_mensagem         => 'Chave de acesso: ' || rec.nro_chave_nfe,
                                      ev_resumo           => gv_mensagem_log,
                                      en_tipo_log         => cons_sit_nfe_sefaz,
                                      en_referencia_id    => vn_notafiscal_id,
                                      ev_obj_referencia   => 'NOTA_FISCAL',
                                      en_empresa_id       => r_lote.empresa_id);
                  --
              end;
              --
            end if;
            --
          end if;
          --
        else
          --
          vn_fase := 33.7;
          -- Caso seja uma NFe emitida pela empresa mas em outra instancia do sistema, apenas registra o evento
          -- Apenas registra o evento da NFe de Emissão propria feito pelo destinatário
          for rec_evento in c_evento(rec.consnfedest_id) loop
            --
            exit when c_evento%notfound or(c_evento%notfound) is null;
            --
            vn_fase := 33.8;
            --
            if not fkg_ck_nota_fiscal_mde_registr(vn_notafiscal_id, rec_evento.tipoeventosefaz_id) then
               --
            insert into nota_fiscal_mde
              (id,
               notafiscal_id,
               dm_situacao,
               dt_hr_evento,
               tipoeventosefaz_id,
               just,
               lotemde_id,
               seq_evento,
               id_tag_chave,
               msgwebserv_id,
               cod_msg,
               motivo_ret,
               dt_hr_reg_evento,
               nro_prot,
               dm_tipo_integra)
            values
              (notafiscalmde_seq.nextval, --id
               vn_notafiscal_id, -- notafiscal_id
               3, -- dm_situacao -- processado
               rec_evento.dt_hr_evento, -- dt_hr_evento
               rec_evento.tipoeventosefaz_id,
               rec_evento.correcao, -- just
               null, -- lotemde_id
               rec_evento.seq_evento,
               null, -- id_tag_chave
               null, -- msgwebserv_id
               null, -- cod_msg
               null, -- motivo_ret
               rec_evento.dt_hr_recto, -- dt_hr_reg_evento
               rec_evento.nro_protocolo, -- nro_prot
               0 -- Tipo de integração do evento. (0-Gerado automático pela aplicação/1-Manualmente no portal/2-Integração Webservice)			   
               );
            --
            end if;      
            --
          end loop;
          --
        end if;
        --
        vn_fase := 34;
        --
        begin
          update cons_nfe_dest cn
             set cn.notafiscal_id = vn_notafiscal_id
           where cn.id            = rec.consnfedest_id;
        exception
          when others then
            null;
        end;
        --
      end if;
      --
    end loop; -- c_cons_nfe_dest
  --
  end loop; -- c_lote_cons
  --
  vn_fase := 35;
  --
  commit;
  --
exception
  when others then
    --
    gv_mensagem_log := 'Erro na pk_csf_api.pkb_rel_cons_nfe_dest fase(' || vn_fase || '): ' || sqlerrm;
    --
    declare
      vn_loggenerico_id log_generico_nf.id%type;
    begin
      pkb_log_generico_nf(sn_loggenericonf_id => vn_loggenerico_id,
                          ev_mensagem         => gv_mensagem_log,
                          ev_resumo           => gv_mensagem_log,
                          en_tipo_log         => erro_de_validacao,
                          en_referencia_id    => vn_consnfedest_id,
                          ev_obj_referencia   => 'CONS_NFE_DEST');
    exception
      when others then
        null;
    end;
    --
end pkb_rel_cons_nfe_dest;
--------------------------------------------------------------
-- Processo de relacionamento de Download de NFe --
--------------------------------------------------------------
PROCEDURE PKB_REL_DOWN_NFE ( EN_MULTORG_ID IN MULT_ORG.ID%TYPE )
IS
   --
   vn_fase              number := 0;
   vn_notafiscal_id     nota_fiscal.id%type := 0;
   vn_nfedownloadxml_id nfe_download_xml.id%type;
   vn_loggenerico_id    number;
   --
   /*
   cursor c_nfe_download_xml is
      select ndx.id
           , ndx.nro_chave_nfe
           , ndx.motivo_ret
        from nfe_download_xml  ndx
           , lote_download_xml ldx
       where ndx.notafiscal_id is null
         and ndx.lotedownloadxml_id = ldx.id
         and ldx.dm_situacao = 2; -- Processado
   */
   --
   cursor c_nfe_download_xml ( en_multorg_id in mult_org.id%type ) is
      select ndx.id
           , ndx.nro_chave_nfe
           , ndx.motivo_ret
        from empresa           em
           , lote_download_xml ldx
           , nfe_download_xml  ndx
       where em.multorg_id          = en_multorg_id
         and ldx.empresa_id         = em.id
         and ldx.dm_situacao        = 2 -- Processado
         and ndx.lotedownloadxml_id = ldx.id
         and ndx.notafiscal_id     is null;
   --
BEGIN
   --
   vn_fase := 1;
   --
   for rec in c_nfe_download_xml ( en_multorg_id => en_multorg_id )
   loop
      --
      exit when c_nfe_download_xml%notfound or (c_nfe_download_xml%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_nfedownloadxml_id := rec.id;
      --
      begin
         --
         select nf.id
           into vn_notafiscal_id
           from nota_fiscal nf
          where nf.nro_chave_nfe = rec.nro_chave_nfe
            and nf.dm_arm_nfe_terc = 1;
          --
      exception
         when others then
         --
         vn_fase := 3;
         vn_notafiscal_id := 0;
         --
      end;
      --
      vn_fase := 4;
      --
      if nvl(vn_notafiscal_id,0) > 0 then
         --
         vn_fase := 5;
         --
         update nfe_download_xml
            set notafiscal_id  = vn_notafiscal_id
          where id = rec.id;
         --
         -- registra o log
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => rec.motivo_ret
                             , ev_resumo           => rec.motivo_ret
                             , en_tipo_log         => 35
                             , en_referencia_id    => vn_notafiscal_id
                             , ev_obj_referencia   => 'NOTA_FISCAL'
                             );
         --
      end if;
      --
      vn_fase := 6;
      --
   end loop;
   --
   vn_fase := 7;
   --
   commit;
   --
EXCEPTION
   when others then
   --
   gv_mensagem_log := 'Erro na pk_csf_api.pkb_rel_down_nfe fase('||vn_fase||'): '||sqlerrm;
   --
   declare
      vn_loggenerico_id  log_generico_nf.id%type;
   begin
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => vn_nfedownloadxml_id
                          , ev_obj_referencia   => 'NFE_DOWNLOAD_XML' );
   exception
      when others then
         null;
   end;
   --
END PKB_REL_DOWN_NFE;

--------------------------------------------
-- Processo de registro automático do MDe --
--------------------------------------------

PROCEDURE PKB_REG_AUT_MDE ( EN_MULTORG_ID IN MULT_ORG.ID%TYPE )
IS
   --
   vn_fase                number := 0;
   vn_existe_nf_mde       number;
   vn_tipoeventosefaz_id  tipo_evento_sefaz.id%type;
   vn_notafiscalmde_id    nota_fiscal_mde.id%type;
   --
   vd_hr_evento           date;
   --
   cursor c_empr_param_cons_mde ( en_multorg_id in mult_org.id%type ) is
      select epcm.empresa_id
        from empresa             em
           , empr_param_cons_mde epcm
       where em.multorg_id       = en_multorg_id
         and epcm.empresa_id     = em.id
         and epcm.dm_reg_mde_aut = 1; -- Sim (Registra MDe automático para essa empresa)
   --
   cursor c_csf_cons_sit (en_empresa_id in empresa.id%type) is
      select ccs.notafiscal_id
           , ccs.id
           , ccs.dhrecbto
           , ccs.empresa_id
        from CSF_CONS_SIT ccs
       where ccs.empresa_id = en_empresa_id
         and ccs.DM_REC_FISICO = 1 -- Sim (Recebimento Físico)
         and nvl(ccs.notafiscal_id,0) > 0
         and ccs.dm_criar_mde = 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   vn_tipoeventosefaz_id := pk_csf.fkg_tipoeventosefaz_id( ev_cd =>  '210200' ); -- Confirmacao da Operacao
   --
   vn_fase := 1.1;
   --
   for rec in c_empr_param_cons_mde ( en_multorg_id => en_multorg_id )
   loop
      --
      exit when c_empr_param_cons_mde%notfound or (c_empr_param_cons_mde%notfound) is null;
      --
      vn_fase := 2;
      --
      for rec2 in c_csf_cons_sit(rec.empresa_id) loop
         exit when c_csf_cons_sit%notfound or (c_csf_cons_sit%notfound) is null;
         --
         vn_fase := 3;
         --
         begin
            --
            select count(1)
              into vn_existe_nf_mde
              from nota_fiscal_mde    mde
             where mde.notafiscal_id       = rec2.notafiscal_id
               and mde.dm_situacao         in (0, 1, 2, 3)
               and mde.tipoeventosefaz_id  = vn_tipoeventosefaz_id;
            --
         exception
            when no_data_found then
               vn_existe_nf_mde := 0;
            when others then
               raise_application_error(-20101, 'Erro na pk_csf_api.pkb_reg_aut_mde fase('||vn_fase||'): ' || sqlerrm );
         end;
         --
         vn_fase := 4;
         --
         if vn_existe_nf_mde = 0 then -- Caso ainda não existir o MDE, cria-se.
            --
            vd_hr_evento := NEW_TIME(systimestamp,'GMT', 'ADT');
            --
            if vd_hr_evento < rec2.dhrecbto then
               --
               vd_hr_evento := rec2.dhrecbto;
               --
            end if;
            --
            if not fkg_ck_nota_fiscal_mde_registr(rec2.notafiscal_id, vn_tipoeventosefaz_id) then
               --
            select notafiscalmde_seq.nextval
              into vn_notafiscalmde_id
              from dual;
            --
            insert into nota_fiscal_mde ( ID
                                        , NOTAFISCAL_ID
                                        , DM_SITUACAO
                                        , DT_HR_EVENTO
                                        , TIPOEVENTOSEFAZ_ID
                                        , JUST
                                        , LOTEMDE_ID
                                        , SEQ_EVENTO
                                        , ID_TAG_CHAVE
                                        , MSGWEBSERV_ID
                                        , COD_MSG
                                        , MOTIVO_RET
                                        , DT_HR_REG_EVENTO
                                        , NRO_PROT
                                        , DM_TIPO_INTEGRA										
                                        )
                                 VALUES ( vn_notafiscalmde_id -- ID
                                        , rec2.notafiscal_id -- NOTAFISCAL_ID
                                        , 0 -- DM_SITUACAO => Não Validado
                                        , vd_hr_evento -- DT_HR_EVENTO
                                        , vn_tipoeventosefaz_id -- TIPOEVENTOSEFAZ_ID => Confirmação da Operação
                                        , null -- JUST
                                        , null -- LOTEMDE_ID
                                        , null -- SEQ_EVENTO
                                        , null -- ID_TAG_CHAVE
                                        , null -- MSGWEBSERV_ID
                                        , null -- COD_MSG
                                        , null -- MOTIVO_RET
                                        , null -- DT_HR_REG_EVENTO
                                        , null -- NRO_PROT
                                        , 0 -- Tipo de integração do evento. (0-Gerado automático pela aplicação/1-Manualmente no portal/2-Integração Webservice)										
                                        );
            --
         end if;
         --
         end if;
         --
         vn_fase := 5;
         --
         -- Chama rotina que atualiza ou insere a tabela csf_cons_sit
         pk_csf_api_cons_sit.gt_row_csf_cons_sit               := null;
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.empresa_id    := rec2.empresa_id;
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.id            := rec2.id;
         pk_csf_api_cons_sit.gt_row_csf_cons_sit.dm_criar_mde  := 1;
         --
         pk_csf_api_cons_sit.pkb_ins_atu_csf_cons_sit ( est_row_csf_cons_sit => pk_csf_api_cons_sit.gt_row_csf_cons_sit
                                                      , ev_campo_atu         => 'dm_criar_mde'
                                                      , en_tp_rotina         => 0 -- atualização
                                                      , ev_rotina_orig       => 'pk_csf_api.pkb_reg_aut_mde'
                                                      );
         --
         commit;
         --
      end loop;
      --
   end loop;
   --
   commit;
   --
EXCEPTION
   when others then
   --
   gv_mensagem_log := 'Erro na pk_csf_api.pkb_reg_aut_mde fase('||vn_fase||'): '||sqlerrm;
   --
   declare
      vn_loggenerico_id  log_generico_nf.id%type;
   begin
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => erro_de_validacao
                          , en_referencia_id    => vn_notafiscalmde_id
                          , ev_obj_referencia   => 'NOTA_FISCAL_MDE' );
   exception
      when others then
         null;
   end;
   --
END PKB_REG_AUT_MDE;

-----------------------------------------------------------------------------------------------------

-- Procedimento de Indicar que a Nota Fiscal de Terceiro, informa que o DANFE foi recebido na NFE de Armazenamento de XML
/*--este processo não será mais utilizado canelado na ficha #70049
procedure pkb_reg_danfe_rec_armaz_terc ( en_multorg_id in mult_org.id%type )
is
   --
   vn_fase                number := 0;
   vn_loggenerico_id      log_generico_nf.id%type;
   vn_qtde                number := 0;
   vn_tipoeventosefaz_id  number;
   --
   cursor c_nf ( en_multorg_id in mult_org.id%type ) is
   select nf.*
     from empresa     em
        , nota_fiscal nf
        , mod_fiscal  mf
    where em.multorg_id      = en_multorg_id
      and nf.empresa_id      = em.id
      and nf.dm_arm_nfe_terc = 1
      and nf.dm_rec_xml      = 1
      and nf.dm_danfe_rec    = 0
      and mf.id              = nf.modfiscal_id
      and mf.cod_mod         = '55'
    order by nf.id;
   --
begin
   --
   vn_fase := 1;
   --
   for rec in c_nf ( en_multorg_id => en_multorg_id )
   loop
      --
      exit when c_nf%notfound or (c_nf%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_qtde := 0;
      -- Localiza as NFe de Terceiro pela chave de acesso
      begin 
         --
         select count(1)
           into vn_qtde
           from nota_fiscal nf
          where nf.dm_arm_nfe_terc  = 0
            and nf.dm_st_proc       = 4
            and nf.nro_chave_nfe    = rec.nro_chave_nfe;
         --
      exception
         when others then
            vn_qtde := 0;
      end;
      --
      vn_fase := 3;
      --
      if nvl(vn_qtde,0) > 0 then
         --
         if nvl(pk_csf.fkg_empresa_reg_mde_aut(rec.empresa_id),0) = 1 then
            --
            vn_fase := 4;
            --
            update nota_fiscal set dm_danfe_rec = 1
             where id = rec.id;
            --
            \*
            --| Não executa mais esse passo, pois deve ser feito somente se houver recebimento físico, isso já é tratado no processo "pkb_reg_aut_mde"
            vn_tipoeventosefaz_id := pk_csf.fkg_tipoeventosefaz_id( ev_cd =>  '210200' );
            --
            insert into nota_fiscal_mde ( ID
                                        , NOTAFISCAL_ID
                                        , DM_SITUACAO
                                        , DT_HR_EVENTO
                                        , TIPOEVENTOSEFAZ_ID
                                        , JUST
                                        , LOTEMDE_ID
                                        , SEQ_EVENTO
                                        , ID_TAG_CHAVE
                                        , MSGWEBSERV_ID
                                        , COD_MSG
                                        , MOTIVO_RET
                                        , DT_HR_REG_EVENTO
                                        , NRO_PROT
                                        , DM_TIPO_INTEGRA										
                                        )
                                 VALUES ( notafiscalmde_seq.nextval -- ID
                                        , rec.id -- NOTAFISCAL_ID
                                        , 0 -- DM_SITUACAO => Não Validado
                                        , new_time(systimestamp,'GMT', 'ADT') -- DT_HR_EVENTO
                                        , vn_tipoeventosefaz_id -- TIPOEVENTOSEFAZ_ID => Confirmação da Operação
                                        , null -- JUST
                                        , null -- LOTEMDE_ID
                                        , null -- SEQ_EVENTO
                                        , null -- ID_TAG_CHAVE
                                        , null -- MSGWEBSERV_ID
                                        , null -- COD_MSG
                                        , null -- MOTIVO_RET
                                        , null -- DT_HR_REG_EVENTO
                                        , null -- NRO_PROT
                                        , 0 -- Tipo de integração do evento. (0-Gerado automático pela aplicação/1-Manualmente no portal/2-Integração Webservice)										
                                        );
            *\
            --
         end if;
         --
         commit;
         --
      end if;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_reg_danfe_rec_armaz_terc fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => ERRO_DE_SISTEMA
                             , en_referencia_id    => null
                             , ev_obj_referencia   => 'NOTA_FISCAL'
                             );
      exception
         when others then
            null;
      end;
   --
end pkb_reg_danfe_rec_armaz_terc;
*/
-------------------------------------------------------------------------------------
-- Procedimento inclusão da ocorrência de alterações nos dados da apuração do ICMS --
-------------------------------------------------------------------------------------
PROCEDURE PKB_INCLUI_LOG_APURACAO_ICMS( EN_APURACAOICMS_ID IN APURACAO_ICMS.ID%TYPE
                                      , EV_RESUMO          IN LOG_APURACAO_ICMS.RESUMO%TYPE
                                      , EV_MENSAGEM        IN LOG_APURACAO_ICMS.MENSAGEM%TYPE
                                      , EN_USUARIO_ID      IN NEO_USUARIO.ID%TYPE
                                      , EV_MAQUINA         IN VARCHAR2 ) IS
   --
   pragma   autonomous_transaction;
   --
BEGIN
   --
   insert into log_apuracao_icms( id
                                , apuracaoicms_id
                                , dt_hr_log
                                , resumo
                                , mensagem
                                , usuario_id
                                , maquina )
                          values( logapuracaoicms_seq.nextval
                                , en_apuracaoicms_id
                                , sysdate
                                , ev_resumo
                                , ev_mensagem
                                , en_usuario_id
                                , ev_maquina );
   --
   commit;
   --
EXCEPTION
   when others then
      raise_application_error (-20101, 'Problemas ao incluir log/alteração - pkb_inclui_log_apuracao_icms (apuracaoicms_id = '||en_apuracaoicms_id||
                                       '). Erro = '||sqlerrm);
END PKB_INCLUI_LOG_APURACAO_ICMS;

-----------------------------------------------------------------------------------------------------
-- Função cria e retorna o ID do Lote de MDe
function fkg_integr_lote_mde ( est_log_generico_nf     in out nocopy  dbms_sql.number_table
                             , en_empresa_id        in             empresa.id%type
                             )
         return lote_mde.id%type
is
   --
   vn_fase            number := 0;
   vn_loggenerico_id  log_generico_nf.id%type;
   vn_lotemde_id      Lote_mde.id%TYPE;
   vn_dm_tp_amb       empresa.dm_tp_amb%type;
   --
BEGIN
   --
   -- Monta cabeçalho do Lote para informação na validação
   -- Empresa
   vn_fase := 1;
   --
   if nvl(en_empresa_id,0) > 0 then
      --
      gv_cabec_log := pk_csf.fkg_nome_empresa ( en_empresa_id => en_empresa_id );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida se a empresa é valida
   if pk_csf.fkg_empresa_id_valido ( en_empresa_id => en_empresa_id ) = false then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Empresa" ('||en_empresa_id||') está incorreta para a criação do lote de MDe.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   vn_dm_tp_amb := pk_csf.fkg_tp_amb_empresa ( en_empresa_id );
   --
   -- Se não houve erro na validação insere os dados
   vn_fase := 99;
   --
   if nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 99.1;
      --
      select lotemde_seq.nextval
        into vn_lotemde_id
        from dual;
      --
      vn_fase := 99.2;
      --
      insert into lote_mde ( id
                           , empresa_id
                           , dm_situacao
                           , dt_lote
                           , dm_tp_amb
                           )
                    values ( vn_lotemde_id -- id
                           , en_empresa_id -- empresa_id
                           , 0 -- dm_situacao
                           , sysdate -- dt_lote
                           , vn_dm_tp_amb -- dm_tp_amb
                           );
      --
   end if;
   --
   return vn_lotemde_id;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_integr_lote_mde fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END fkg_integr_lote_mde;

-----------------------------------------------------------------------------------------------------
-- Procedimento de criar o lote do MDE
procedure pkb_gera_lote_mde ( en_multorg_id in mult_org.id%type )
is
   --
   vn_fase              number := 0;
   vn_loggenerico_id    log_generico_nf.id%type;
   vn_lotemde_id        Lote_mde.id%TYPE := null;
   vn_qtde_mde          number := 0;
   vt_log_generico_nf   dbms_sql.number_table;
   --
   vn_notafiscal_id_old nota_fiscal.id%type;
   --
   cursor c_empresa ( en_multorg_id in mult_org.id%type ) is
   select e.id empresa_id
     from empresa e
    where e.multorg_id  = en_multorg_id
      and e.dm_situacao = 1 -- ativo
    order by 1;
   --
   cursor c_mde ( en_empresa_id Empresa.id%TYPE ) is
   select mde.*
     from nota_fiscal     nf
        , nota_fiscal_mde mde
    where nf.empresa_id     = en_empresa_id
      and mde.notafiscal_id = nf.id
      and mde.dm_situacao   = 1 -- Validacao
      and mde.lotemde_id   is null
      -- início armando 21/09/2020 -- verifica se já existe chave eletronica relaciona com a nota_fiscal_mde
      and not exists (select 1
                        from nota_fiscal     n1
                           , nota_fiscal_mde mde1
                       where 1=1
                         and mde1.tipoeventosefaz_id = mde.tipoeventosefaz_id --alteracao jon 28/10/2020
                         and mde1.dm_situacao        = 3 -- processado
                         and mde1.cod_msg            = 135 -- Evento registrado e vinculado a NF-e
                         and n1.dm_st_proc           = 4
                         and n1.id                   = mde1.notafiscal_id
                         and n1.nro_chave_nfe        = nf.nro_chave_nfe
                     )
    --fim armando 21/09/2020
    order by mde.notafiscal_id; 
   --
   cursor c_rej ( en_multorg_id in mult_org.id%type ) is
   /*select distinct l.id
     from empresa         em
        , lote_mde        l
        , nota_fiscal_mde m
    where em.multorg_id          = en_multorg_id
      and l.empresa_id           = em.id
      and l.dm_situacao         in (3, 4, 5)
      and m.lotemde_id           = l.id
      --and trunc(m.dt_hr_evento) >= trunc(sysdate - 1) 
      and m.dt_hr_evento <= sysdate --#62316
    order by 1;*/
    
    select distinct l.id
     from empresa         em
        , lote_mde        l
        , nota_fiscal_mde m
        , EMPR_PARAM_CONS_MDE mde
    where 1=1
      and em.multorg_id             = en_multorg_id
      and nvl(mde.nro_tentativas,0) > nvl(m.nro_tentativas,0) 
      and em.id                     = mde.empresa_id
      and l.empresa_id              = em.id
      and l.dm_situacao             in (3, 4, 5)
      and m.lotemde_id              = l.id
      --and trunc(m.dt_hr_evento) >= trunc(sysdate - 1) 
      and trunc(m.dt_hr_evento) >= trunc(sysdate)-30 --#62316
    order by 1;
    
   --
   cursor c_rej2 ( en_multorg_id in mult_org.id%type ) is
   select distinct l.id
     from empresa         em
        , lote_mde        l
        , nota_fiscal_mde m
        , EMPR_PARAM_CONS_MDE mde
    where em.multorg_id          = en_multorg_id
      and nvl(mde.nro_tentativas,0) > nvl(m.nro_tentativas,0)
      and em.id                     = mde.empresa_id 
      and l.empresa_id           = em.id
      and l.dm_situacao         in (2)
      and m.lotemde_id           = l.id
      --and trunc(m.dt_hr_evento) >= trunc(sysdate - 1)
      and m.dt_hr_evento >= sysdate-30 --#70049
      and m.cod_msg             in (577, 579, 999)
    order by 1;
   --
   cursor c_lmde (en_lotemde_id number) is
   select *
     from nota_fiscal_mde
    where lotemde_id = en_lotemde_id
      and dm_situacao in (4, 5)-- armando 08/09/2020
    order by notafiscal_id;
   --
begin
   --
   vn_fase := 1;
   --
   -- Inicia a criação de lote por empresa
   for rec_emp in c_empresa ( en_multorg_id => en_multorg_id )
   loop
      --
      exit when c_empresa%notfound or (c_empresa%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_lotemde_id  := 0;
      vn_qtde_mde    := 0;
      --
      vn_notafiscal_id_old := 0;
      --
      for rec_mde in c_mde( rec_emp.empresa_id ) loop
         exit when c_mde%notfound or (c_mde%notfound) is null;
         --
         vn_fase := 3;
         --
         if nvl(vn_notafiscal_id_old,0) <> nvl(rec_mde.notafiscal_id,0) then
            -- Verifica se não existe lote e o cria "OU" se o número de MDe for maior que 20, zera o lote para a criação de um novo lote
            if (nvl(vn_lotemde_id,0) <= 0 or nvl(vn_qtde_mde,0) > 10 ) then
               --
               vn_fase := 4;
               --
               vt_log_generico_nf.delete;
               --
               vn_fase := 5;
               --
               vn_lotemde_id := fkg_integr_lote_mde ( est_log_generico_nf     => vt_log_generico_nf
                                                    , en_empresa_id        => rec_emp.empresa_id
                                                    );
               --
               vn_fase := 6;
               --
               vn_qtde_mde := 1;
               -- Se houve erro ao criar o lote sai do processo de MDe
               if nvl(vt_log_generico_nf.count,0) > 0 then
                  --
                  exit;
                  --
               end if;
               --
            end if;
            --
            vn_fase := 7;
            -- Atualiza o MDe com o Id do Lote
            update Nota_Fiscal_mde
               set lotemde_id  = vn_lotemde_id
                 , dm_situacao = 2 -- Aguardando Envio
             where id = rec_mde.id;
            --
            vn_fase := 8;
            --
            vn_qtde_mde := nvl(vn_qtde_mde,0) + 1;
            --
         end if;
         --
         vn_notafiscal_id_old := rec_mde.notafiscal_id;
         --
      end loop;
      --
      vn_fase := 9;
      --
      commit;
      --
   end loop;
   --
   vn_fase := 10;
   --
   for rec_rej in c_rej ( en_multorg_id => en_multorg_id )
   loop
      --
      exit when c_rej%notfound or (c_rej%notfound) is null;
      --
      vn_notafiscal_id_old := 0;
      --
      vn_fase := 10.1;
      -- recupera os MDe do Lote
      for rec2 in c_lmde(rec_rej.id) loop
         exit when c_lmde%notfound or (c_lmde%notfound) is null;
         --
         vn_fase := 10.2;
         --
         if nvl(vn_notafiscal_id_old,0) <> nvl(rec2.notafiscal_id,0) then
            --
            update nota_fiscal_mde set dm_situacao = 1
                                     , lotemde_id = null
                                     , dt_hr_evento = sysdate
                                     , seq_evento = null
									 , nro_tentativas = NVL(nro_tentativas,0) + 1 --#62316
             where id = rec2.id;
            --
         else
            -- ja existindo o MDe no lote velho, rejeita a MDe da Nfe
            update nota_fiscal_mde set dm_situacao = 4 -- Erro de validação
                                     , lotemde_id = null
             where id = rec2.id;
            --
         end if;
         --
         vn_notafiscal_id_old := rec2.notafiscal_id;
         --
      end loop;
      --
      commit;
      --
   end loop;
   --
   vn_fase := 11;
   --
   for rec_rej in c_rej2 ( en_multorg_id => en_multorg_id )
   loop
      --
      exit when c_rej2%notfound or (c_rej2%notfound) is null;
      --
      vn_notafiscal_id_old := 0;
      --
      vn_fase := 11.1;
      -- recupera os MDe do Lote
      for rec2 in c_lmde(rec_rej.id) loop
         exit when c_lmde%notfound or (c_lmde%notfound) is null;
         --
         vn_fase := 11.2;
         --
         if nvl(vn_notafiscal_id_old,0) <> nvl(rec2.notafiscal_id,0) then
            --
            update nota_fiscal_mde set dm_situacao = 1
                                     , lotemde_id = null
                                     , dt_hr_evento = sysdate
                                     , seq_evento = null
                                     , nro_tentativas = NVL(nro_tentativas,0) + 1 --#62316
             where id = rec2.id;
            --
         else
            -- ja existindo o MDe no lote velho, rejeita a MDe da Nfe
            update nota_fiscal_mde set dm_situacao = 4 -- Erro de validação
                                     , lotemde_id = null
             where id = rec2.id;
            --
         end if;
         --
         vn_notafiscal_id_old := rec2.notafiscal_id;
         --
      end loop;
      --
      commit;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_gera_lote_mde fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_gera_lote_mde;

-----------------------------------------------------------------------------------------------------
-- Função cria e retorna o ID do Lote de Download de XML
function fkg_integr_lote_download_xml ( est_log_generico_nf     in out nocopy  dbms_sql.number_table
                                      , en_empresa_id        in             empresa.id%type
                                      )
         return lote_download_xml.id%type
is
   --
   vn_fase                    number := 0;
   vn_loggenerico_id          log_generico_nf.id%type;
   vn_lotedownloadxml_id      lote_download_xml.id%TYPE;
   vn_dm_tp_amb               empresa.dm_tp_amb%type;
   --
BEGIN
   --
   -- Monta cabeçalho do Lote para informação na validação
   -- Empresa
   vn_fase := 1;
   --
   if nvl(en_empresa_id,0) > 0 then
      --
      gv_cabec_log := pk_csf.fkg_nome_empresa ( en_empresa_id => en_empresa_id );
      --
   end if;
   --
   vn_fase := 2;
   --
   -- Valida se a empresa é valida
   if pk_csf.fkg_empresa_id_valido ( en_empresa_id => en_empresa_id ) = false then
      --
      vn_fase := 2.1;
      --
      gv_mensagem_log := '"Empresa" ('||en_empresa_id||') está incorreta para a criação do lote de Download de XML.';
      --
      vn_loggenerico_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenerico_id
                                , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   vn_dm_tp_amb := pk_csf.fkg_tp_amb_empresa ( en_empresa_id );
   --
   -- Se não houve erro na validação insere os dados
   vn_fase := 99;
   --
   if nvl(est_log_generico_nf.count,0) = 0 then
      --
      vn_fase := 99.1;
      --
      select lotedownloadxml_seq.nextval
        into vn_lotedownloadxml_id
        from dual;
      --
      vn_fase := 99.2;
      --
      insert into lote_download_xml ( id
                                    , empresa_id
                                    , dm_situacao
                                    , dt_lote
                                    , dm_tp_amb
                                    )
                             values ( vn_lotedownloadxml_id -- id
                                    , en_empresa_id -- empresa_id
                                    , 0 -- dm_situacao
                                    , sysdate -- dt_lote
                                    , vn_dm_tp_amb -- dm_tp_amb
                                    );
      --
   end if;
   --
   return vn_lotedownloadxml_id;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na fkg_integr_lote_download_xml fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
END fkg_integr_lote_download_xml;

-----------------------------------------------------------------------------------------------------
-- Procedimento de criar o lote de download do XML
procedure pkb_gera_lote_download_xml ( en_multorg_id in mult_org.id%type )
is
   --
   vn_fase                  number := 0;
   vn_loggenerico_id        log_generico_nf.id%type;
   vn_lotedownloadxml_id    lote_download_xml.id%TYPE;
   vn_qtde_nfe              number := 0;
   vn_qtde_nfe_xml          number := 0;
   vv_nro_chave_nfe_old     nota_fiscal.nro_chave_nfe%type := 0;
   vt_log_generico_nf          dbms_sql.number_table;
   --
   vn_tipoeventosefaz_id  tipo_evento_sefaz.id%type;
   vn_qtde_ciencia_mde    number;
   --
   cursor c_empresa ( en_multorg_id in mult_org.id%type ) is
   select e.id empresa_id
     from empresa e
    where e.multorg_id  = en_multorg_id
      and e.dm_situacao = 1 -- ativo
    order by 1;
   --
   cursor c_dxml ( en_empresa_id Empresa.id%TYPE ) is
   select nf.*
     from nfe_download_xml nf
    where nf.empresa_id          = en_empresa_id
      and nf.lotedownloadxml_id is null
    order by nf.notafiscal_id;
   --
   cursor c_drej ( en_multorg_id in mult_org.id%type ) is
   select d.id, d.cod_msg
     from empresa           em
        , lote_download_xml l
        , nfe_download_xml  d
    where em.multorg_id        = en_multorg_id
      and l.empresa_id         = em.id
      and l.dm_situacao       in (3, 4)
      and d.lotedownloadxml_id = l.id
    order by 1;
   --
   cursor c_drej2 ( en_multorg_id in mult_org.id%type ) is
   select d.id, d.cod_msg, d.notafiscal_id
     from empresa           em
        , lote_download_xml l
        , nfe_download_xml d
    where em.multorg_id        = en_multorg_id
      and l.empresa_id         = em.id
      and l.dm_situacao       in (2)
      and d.lotedownloadxml_id = l.id
      and d.cod_msg           in (217, 633, 999)
    order by 1;
   /*
  217 = Rejeicao: NF-e nao consta na base de dados da SEFAZ
  633 = Rejeicao: NF-e indisponivel para download devido a ausencia de Manifestacao do Destinatario
   */
   --
begin
   --
   vn_fase := 1;
   --
   -- Inicia a criação de lote por empresa
   for rec_emp in c_empresa ( en_multorg_id => en_multorg_id )
   loop
      --
      exit when c_empresa%notfound or (c_empresa%notfound) is null;
      --
      vn_fase := 2;
      --
      vn_lotedownloadxml_id  := 0;
      vn_qtde_nfe            := 0;
      vv_nro_chave_nfe_old   := ' ';
      --
      for rec_dxml in c_dxml( rec_emp.empresa_id ) loop
         exit when c_dxml%notfound or (c_dxml%notfound) is null;
         --
         vn_fase := 3;
         --
         if nvl(vv_nro_chave_nfe_old,0) <> nvl(rec_dxml.nro_chave_nfe,0) then
            --
            -- Verifica se já existe XML de Armazenamento de Terceiro para a Chave de Acesso
            vn_qtde_nfe_xml := 0;
            --
            begin
               --
               select count(1) 
                 into vn_qtde_nfe_xml
                 from nota_fiscal
                where nro_chave_nfe = rec_dxml.nro_chave_nfe
                  and dm_arm_nfe_terc = 1
                  and nfe_proc_xml is not null;
               --
            exception
               when others then
                  vn_qtde_nfe_xml := 0;
            end;
            --
            if nvl(vn_qtde_nfe_xml,0) <= 0 then
               --
               -- Verifica se não existe lote e o cria "OU" se o número de MDe for maior que 20, zera o lote para a criação de um novo lote
               if (nvl(vn_lotedownloadxml_id,0) <= 0 or nvl(vn_qtde_nfe,0) > 10 ) then
                  --
                  vn_fase := 4;
                  --
                  vt_log_generico_nf.delete;
                  --
                  vn_fase := 5;
                  --
                  vn_lotedownloadxml_id := fkg_integr_lote_download_xml ( est_log_generico_nf     => vt_log_generico_nf
                                                                        , en_empresa_id        => rec_emp.empresa_id
                                                                        );
                  --
                  vn_fase := 6;
                  --
                  vn_qtde_nfe := 1;
                  -- Se houve erro ao criar o lote sai do processo de MDe
                  if nvl(vt_log_generico_nf.count,0) > 0 then
                     --
                     exit;
                     --
                  end if;
                  --
               end if;
               --
               vn_fase := 7;
               -- Atualiza o MDe com o Id do Lote
               update NFE_DOWNLOAD_XML set lotedownloadxml_id = vn_lotedownloadxml_id
                where id = rec_dxml.id;
               --
               vn_fase := 8;
               --
               vn_qtde_nfe := nvl(vn_qtde_nfe,0) + 1;
               --
            /*
            else
               --
               delete from NFE_DOWNLOAD_XML
                where id = rec_dxml.id;
               --comentado pois esta desfazendo o vinculo 10/09/2020
			*/
            end if;
            --
         end if;
         --
         vv_nro_chave_nfe_old := rec_dxml.nro_chave_nfe;
         --
      end loop;
      --
      vn_fase := 9;
      --
      commit;
      --
   end loop;
   --
   vn_fase := 10;
   --
   for rec in c_drej ( en_multorg_id => en_multorg_id )
   loop
      --
      exit when c_drej%notfound or (c_drej%notfound) is null;
      --
      vn_fase := 10.1;
      --
      update nfe_download_xml set lotedownloadxml_id = null
                                , dt_cons = sysdate
       where id = rec.id;
      --
      commit;
      --
   end loop;
   --
   vn_fase := 11;
   --
   for rec in c_drej2 ( en_multorg_id => en_multorg_id )
   loop
      --
      exit when c_drej2%notfound or (c_drej2%notfound) is null;
      --
      vn_fase := 11.1;
      --
   /*
    217 = Rejeicao: NF-e nao consta na base de dados da SEFAZ
    633 = Rejeicao: NF-e indisponivel para download devido a ausencia de Manifestacao do Destinatario
   */
      if rec.cod_msg in (217, 999) then -- 217 = Rejeicao: NF-e nao consta na base de dados da SEFAZ
         --
         vn_fase := 11.2;
         update nfe_download_xml set lotedownloadxml_id = null
                                   , dt_cons = sysdate
          where id = rec.id;
         --
      elsif rec.cod_msg = 633 then -- 633 = Rejeicao: NF-e indisponivel para download devido a ausencia de Manifestacao do Destinatario
         --
         vn_fase := 11.3;
         update nfe_download_xml set lotedownloadxml_id = null
                                   , dm_situacao = 2 -- MDe com erro
                                   , cod_msg = null
          where id = rec.id;
         --
         vn_fase := 11.4;
         --
         vn_qtde_ciencia_mde   := 0;
         vn_tipoeventosefaz_id := pk_csf.fkg_tipoeventosefaz_id( '210210' );
         --
         begin
            --
            select count(1)
              into vn_qtde_ciencia_mde
              from nota_fiscal_mde
             where notafiscal_id       = rec.notafiscal_id
               and dm_situacao         in (0, 1, 2, 3)
               and tipoeventosefaz_id  = vn_tipoeventosefaz_id;
            --
         exception
            when others then
               vn_qtde_ciencia_mde := 0;
         end;
         --
         if nvl(vn_qtde_ciencia_mde,0) <= 0 then
            --
            begin
               --
               if not fkg_ck_nota_fiscal_mde_registr(rec.notafiscal_id, vn_tipoeventosefaz_id) then
                  --
               insert into nota_fiscal_mde ( ID
                                           , NOTAFISCAL_ID
                                           , DM_SITUACAO
                                           , DT_HR_EVENTO
                                           , TIPOEVENTOSEFAZ_ID
                                           , DM_TIPO_INTEGRA										   
                                           )
                                    values ( notafiscalmde_seq.nextval --ID
                                           , rec.notafiscal_id -- NOTAFISCAL_ID
                                           , 0 -- DM_SITUACAO
                                           , sysdate -- DT_HR_EVENTO
                                           , vn_tipoeventosefaz_id --TIPOEVENTOSEFAZ_ID
                                           , 0 -- Tipo de integração do evento. (0-Gerado automático pela aplicação/1-Manualmente no portal/2-Integração Webservice)										   
                                           );
               --
               end if;                               
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
         --
      end if;
      --
      commit;
      --
   end loop;
   --
EXCEPTION
   when others then
      --
      rollback;
      --
      gv_mensagem_log := 'Erro na pkb_gera_lote_download_xml fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             );
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, gv_mensagem_log);
      --
end pkb_gera_lote_download_xml;

-------------------------------------------------------------------------------------------------------

procedure pkb_ret_multorg_id( est_log_generico       in out nocopy  dbms_sql.number_table
                            , ev_cod_mult_org        in             mult_org.cd%type
                            , ev_hash_mult_org       in             mult_org.hash%type
                            , sn_multorg_id          in out nocopy  mult_org.id%type
                            , en_referencia_id       in             log_generico_nf.referencia_id%type
                            , ev_obj_referencia      in             log_generico_nf.obj_referencia%type
                            )
is
   vn_fase               number := 0;
   vv_multorg_hash       mult_org.hash%type;
   vn_multorg_id         mult_org.id%type;
   vn_loggenericonf_id  Log_Generico_nf.id%type;
   vn_dm_obrig_integr    mult_org.dm_obrig_integr%type;

begin
   --
   vn_fase := 1;
   --
   gn_referencia_id   := en_referencia_id;
   gv_obj_referencia  := ev_obj_referencia;
   --
   begin
      --
      select mo.dm_obrig_integr
        into vn_dm_obrig_integr
        from mult_org mo
       where mo.id = sn_multorg_id;
       --
       vn_fase := 1.1;
       --
   exception
      when no_data_found then
         --
         vn_dm_obrig_integr := 0; -- Não
         --
         vn_fase := 1.2;
         --
      when others then
         --
         vn_dm_obrig_integr := 0; -- Não
         --
         vn_fase := 1.3;
         --
         gv_mensagem_log := 'Problema ao tentar verificar a obrigatoriedade do Mult Org. Fase: '||vn_fase;
         gv_cabec_log :=  'Codigo do MultOrg: |' || ev_cod_mult_org || '| Hash do MultOrg: |'||ev_hash_mult_org||'|';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id  => vn_loggenericonf_id
                              , ev_mensagem           => gv_mensagem_log
                              , ev_resumo             => gv_cabec_log
                              , en_tipo_log           => ERRO_DE_VALIDACAO
                              , en_referencia_id      => gn_referencia_id
                              , ev_obj_referencia     => gv_obj_referencia
                              );
         --
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id    => vn_loggenericonf_id
                                 , est_log_generico_nf  => est_log_generico );
         --
   end;
   --
   begin
      --
      select mo.hash, mo.id
        into vv_multorg_hash, vn_multorg_id
        from mult_org mo
       where mo.cd = ev_cod_mult_org;
      --
      vn_fase := 2;
      --
   exception
      when no_data_found then
         --
         vn_fase := 3;
         --
         vv_multorg_hash := null;
         --
         vn_multorg_id := 0;
         --
      when others then
         --
         vn_fase := 4;
         --
         vv_multorg_hash := null;
         --
         vn_multorg_id := 0;
         --
         gv_mensagem_log := 'Problema ao tentar buscar o Mult Org. Fase: '||vn_fase;
         gv_cabec_log :=  'Codigo do MultOrg: |' || ev_cod_mult_org || '| Hash do MultOrg: |'||ev_hash_mult_org||'|';
         --
         vn_loggenericonf_id := null;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem           => gv_mensagem_log
                             , ev_resumo             => gv_cabec_log
                             , en_tipo_log           => ERRO_DE_VALIDACAO
                             , en_referencia_id      => gn_referencia_id
                             , ev_obj_referencia     => gv_obj_referencia
                             );
         --
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                    , est_log_generico_nf => est_log_generico );
   --
   end;
   --
   vn_fase := 5;
   --
   if nvl(vn_multorg_id, 0) = 0 then

      gv_mensagem_log := 'O Mult Org de codigo: |' || ev_cod_mult_org || '| não existe.';
      --
      vn_loggenericonf_id := null;
      --
      vn_fase := 5.1;
      --
      if vn_dm_obrig_integr = 0 then -- Não validar o multorg.
         --
         vn_fase := 5.2;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id  => vn_loggenericonf_id
                              , ev_mensagem           => gv_mensagem_log
                              , ev_resumo             => gv_mensagem_log
                              , en_tipo_log           => INFORMACAO
                              , en_referencia_id      => gn_referencia_id
                              , ev_obj_referencia     => gv_obj_referencia
                              );
         --
      elsif vn_dm_obrig_integr = 1 then -- Validar o multorg.
         --
         vn_fase := 5.3;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id  => vn_loggenericonf_id
                              , ev_mensagem           => gv_mensagem_log
                              , ev_resumo             => gv_mensagem_log
                              , en_tipo_log           => ERRO_DE_VALIDACAO
                              , en_referencia_id      => gn_referencia_id
                              , ev_obj_referencia     => gv_obj_referencia
                              );
         --
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id    => vn_loggenericonf_id
                                 , est_log_generico_nf  => est_log_generico );
         --
      end if;
      --
   elsif vv_multorg_hash != ev_hash_mult_org then
      --
      vn_fase := 6;
      --
      gv_mensagem_log := 'O valor do Hash ('|| ev_hash_mult_org ||') do Mult Org:'|| ev_cod_mult_org ||'esta incorreto.';
      --
      vn_loggenericonf_id := null;
      if vn_dm_obrig_integr = 0 then -- Não validar o multorg.
         --
         vn_fase := 6.1;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id  => vn_loggenericonf_id
                              , ev_mensagem           => gv_mensagem_log
                              , ev_resumo             => gv_mensagem_log
                              , en_tipo_log           => INFORMACAO
                              , en_referencia_id      => gn_referencia_id
                              , ev_obj_referencia     => gv_obj_referencia
                              );
         --
      elsif vn_dm_obrig_integr = 1 then -- Validar o multorg.
         --
         vn_fase := 6.2;
         --
         pkb_log_generico_nf ( sn_loggenericonf_id  => vn_loggenericonf_id
                              , ev_mensagem           => gv_mensagem_log
                              , ev_resumo             => gv_mensagem_log
                              , en_tipo_log           => ERRO_DE_VALIDACAO
                              , en_referencia_id      => gn_referencia_id
                              , ev_obj_referencia     => gv_obj_referencia
                              );
         --
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id    => vn_loggenericonf_id
                                 , est_log_generico_nf  => est_log_generico );
         --
      end if;
      --
   end if;
   --
   vn_fase := 7;
   --
   sn_multorg_id := vn_multorg_id;
   --
exception
   when others then
      raise_application_error (-20101, 'Problemas ao validar Mult Org - pk_csf_api.pkb_ret_multorg_id. Fase: '||vn_fase||' Erro = '||sqlerrm);
end pkb_ret_multorg_id;

-------------------------------------------------------------------------------------------------------

-- Procedimento valida o mult org de acordo com o COD e o HASH das tabelas Flex-Field

procedure pkb_val_atrib_multorg ( est_log_generico   in out nocopy  dbms_sql.number_table
                                , ev_obj_name        in             VARCHAR2
                                , ev_atributo        in             VARCHAR2
                                , ev_valor           in             VARCHAR2
                                , sv_cod_mult_org    out            VARCHAR2
                                , sv_hash_mult_org   out            VARCHAR2
                                , en_referencia_id   in             log_generico_nf.referencia_id%type
                                , ev_obj_referencia  in             log_generico_nf.obj_referencia%type
                                )


is
   --
   vn_fase                number := 0;
   vn_loggenericonf_id   log_generico_nf.id%type;
   vv_mensagem            varchar2(1000) := null;
   vn_dmtipocampo         ff_obj_util_integr.dm_tipo_campo%type;
   vv_hash_mult_org     mult_org.hash%type;
   vv_cod_mult_org      mult_org.cd%type;
  --
begin
 --
   vn_fase := 1;
   --
   gv_mensagem_log := null;
   --
   gn_referencia_id  := en_referencia_id;
   gv_obj_referencia := ev_obj_referencia;
   --
   --
   vn_fase := 2;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 3;
      --
      gv_mensagem_log := 'Código ou HASH da Mult-Organização (objeto: '|| ev_obj_name ||'):"VALOR" referente ao atributo deve ser informado.';  
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => INFORMACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico );
      --
   end if;
   --
   vn_fase := 4;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => ev_obj_name
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) );
   --
   vn_fase := 5;
   --
   if vv_mensagem is not null then
      --
      vn_fase := 6;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => INFORMACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico );
      --
   else
       --
      vn_fase := 7;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo( ev_obj_name => ev_obj_name
                                                         , ev_atributo => trim(ev_atributo) );
      --
      vn_fase := 8;
      --
      if trim(ev_valor) is not null then
         --
         vn_fase := 9;
         --
         if vn_dmtipocampo = 2 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
            --
            vn_fase := 10;
            --
            if trim(ev_atributo) = 'COD_MULT_ORG' then
                --
                vn_fase := 11;
                --
                begin
                   vv_cod_mult_org := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => ev_obj_name
                                                                    , ev_atributo => trim(ev_atributo)
                                                                    , ev_valor    => trim(ev_valor) );
                exception
                   when others then
                      vv_cod_mult_org := null;
                end;
                --
            elsif trim(ev_atributo) = 'HASH_MULT_ORG' then
               --
                vn_fase := 12;
                --
                begin
                   vv_hash_mult_org := pk_csf.fkg_ff_ret_vlr_caracter( ev_obj_name => ev_obj_name
                                                                     , ev_atributo => trim(ev_atributo)
                                                                     , ev_valor    => trim(ev_valor) );
                exception
                   when others then
                      vv_hash_mult_org := null;
                end;
                --
            end if;
            --
         else
            --
            vn_fase := 13;
            --
            gv_mensagem_log := 'Para o atributo '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser CARACTERE.';
            --
            vn_loggenericonf_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                , ev_mensagem       => gv_mensagem_log
                                , ev_resumo         => gv_cabec_log
                                , en_tipo_log       => INFORMACAO
                                , en_referencia_id  => gn_referencia_id
                                , ev_obj_referencia => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenericonf_id
                                   , est_log_generico_nf => est_log_generico );
            --
         end if;
         --
      end if;
      --
   end if;
   --
   vn_fase := 14;
   --
   sv_cod_mult_org := vv_cod_mult_org;
   --
   sv_hash_mult_org := vv_hash_mult_org;
--
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_val_atrib_multorg fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenericonf_id  log_generico.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_cabec_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                   , est_log_generico_nf => est_log_generico );
      exception
         when others then
            null;
      end;
end pkb_val_atrib_multorg;

-----------------------------------------------------------------------------------------------------
-- Retorna o DM_IND_LCTO da tabela AJUST_APUR_CPRB de acordo com o id da apuracao_cprb
function fkg_indlcto_cprb_apurcprbid (en_apuracaocprb_id in apuracao_cprb.id%type )
         return ajust_apur_cprb.dm_ind_lcto%type
is
   --
   vn_dmindlcto ajust_apur_cprb.dm_ind_lcto%type;
   --
BEGIN
   --
   select dm_ind_lcto
     into vn_dmindlcto
     from ajust_apur_cprb
    where apuracaocprb_id = en_apuracaocprb_id;
   --
   return vn_dmindlcto;
   --
exception
   when no_data_found then
      return null;
   when others then
      raise_application_error (-20101, 'Erro no processo pk_csf_api.fkg_indlcto_cprb_apurcprbid. Erro = '||sqlerrm);
end fkg_indlcto_cprb_apurcprbid;

-----------------------------------------------------------------------------------------------------
-- Retorna o DM_IND_LCTO da tabela APUR_CPRB_ESTAB de acordo com o id da apuracao_cprb
function fkg_indlcto_estab_apurcprbid (en_apuracaocprb_id in apuracao_cprb.id%type )
         return apur_cprb_estab.dm_ind_lcto%type
is
   --
   vn_dmindlcto apur_cprb_estab.dm_ind_lcto%type;
   --
BEGIN
   --
   select dm_ind_lcto
     into vn_dmindlcto
     from apur_cprb_estab
    where apuracaocprb_id = en_apuracaocprb_id;
   --
   return vn_dmindlcto;
   --
exception
   when no_data_found then
      return null;
   when others then
      raise_application_error (-20101, 'Erro no processo pk_csf_api.fkg_indlcto_estab_apurcprbid. Erro = '||sqlerrm);
end fkg_indlcto_estab_apurcprbid;

-----------------------------------------------------------------------------------------------------
-- Ler view VW_CSF_NOTA_FISCAL_CANC_FF por conta do atributo ID_ERP
procedure pkb_val_ler_nf_canc_ff ( est_log_generico_nf  in out nocopy dbms_sql.number_table
                                 , en_notafiscalcanc_id in number
                                 , ev_atributo          in varchar2
                                 , ev_valor             in varchar2
                                 )
is
   --
   vn_fase        number;
   vv_mensagem    varchar2(1000) := null;
   vn_dmtipocampo ff_obj_util_integr.dm_tipo_campo%type;
   vn_count       number;
   vn_id_erp      number;
   vn_loggenericonf_id number;
   --
begin
   --
   vn_fase := 1;
   --
   gn_referencia_id  := en_notafiscalcanc_id;
   gv_obj_referencia := 'NOTA_FISCAL_CANC';
   --
   vn_fase := 2;
   --
   if trim(ev_atributo) is null then
      --
      vn_fase := 3;
      --
      gv_mensagem_log := 'Valor no campo "ATRIBUTO" é nulo, o mesmo deve ser informado';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => INFORMACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 3;
   --
   if trim(ev_valor) is null then
      --
      vn_fase := 3;
      --
      gv_mensagem_log := 'Valor no campo "VALOR" é nulo, o mesmo deve ser informado';
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => INFORMACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                             , est_log_generico_nf => est_log_generico_nf );
      --
   end if;
   --
   vn_fase := 4;
   --
   vv_mensagem := pk_csf.fkg_ff_verif_campos( ev_obj_name => 'VW_CSF_NOTA_FISCAL_CANC_FF'
                                            , ev_atributo => trim(ev_atributo)
                                            , ev_valor    => trim(ev_valor) 
                                            );
   --
   if vv_mensagem is not null then
      --
      vn_fase := 6;
      --
      gv_mensagem_log := vv_mensagem;
      --
      vn_loggenericonf_id := null;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                          , ev_mensagem         => gv_mensagem_log
                          , ev_resumo           => gv_cabec_log
                          , en_tipo_log         => INFORMACAO
                          , en_referencia_id    => gn_referencia_id
                          , ev_obj_referencia   => gv_obj_referencia );
      -- Armazena o "loggenerico_id" na memória
      pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                , est_log_generico_nf => est_log_generico_nf );
      --
   else
       --
      vn_fase := 7;
      --
      vn_dmtipocampo := pk_csf.fkg_ff_retorna_dmtipocampo ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_CANC_FF'
                                                          , ev_atributo => trim(ev_atributo)
                                                          );
      --
      vn_fase := 8;
      --
      if trim(ev_valor) is not null then
         --
         vn_fase := 9;
         --
         if vn_dmtipocampo = 1 then -- tipo de campo = 0-data, 1-numérico, 2-caractere
            --
            vn_fase := 10;
            --
            if trim(ev_atributo) = 'ID_ERP' then
                --
                begin
                   --
                   select count(1)
                     into vn_count
                     from nota_fiscal_canc nfc
                    where nfc.id = en_notafiscalcanc_id;
                   --
                exception
                   when others then
                      --
                      vn_count := 0;
                      --
                end;
                --
                if nvl(vn_count, 0) > 0 then
                   --
                   vn_id_erp := pk_csf.fkg_ff_ret_vlr_number ( ev_obj_name => 'VW_CSF_NOTA_FISCAL_CANC_FF'
                                                             , ev_atributo => trim(ev_atributo)
                                                             , ev_valor    => trim(ev_valor)
                                                             );
                   --
                   if nvl(est_log_generico_nf.count, 0) = 0
                     and en_notafiscalcanc_id > 0 and vn_id_erp > 0 and vv_mensagem is null then
                        --
                        update nota_fiscal_canc nfc
                          set nfc.id_erp = vn_id_erp
                         where nfc.id = en_notafiscalcanc_id;
                        --
                   end if;
                   --
                end if;
                --
            end if;
            --
         else
            --
            vn_fase := 13;
            --
            gv_mensagem_log := 'Para o ATRIBUTO '||ev_atributo||', o VALOR informado não confere com o tipo de campo, deveria ser NUMÉRICO.';
            --
            vn_loggenericonf_id := null;
            --
            pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                                , ev_mensagem       => gv_mensagem_log
                                , ev_resumo         => gv_cabec_log
                                , en_tipo_log       => INFORMACAO
                                , en_referencia_id  => gn_referencia_id
                                , ev_obj_referencia => gv_obj_referencia );
            -- Armazena o "loggenerico_id" na memória
            pkb_gt_log_generico_nf ( en_loggenericonf_id   => vn_loggenericonf_id
                                   , est_log_generico_nf => est_log_generico_nf );
            --
         end if;
         --
      end if;
      --
   end if;
   --
   commit;
   --
exception
   when others then
      --
      gv_mensagem_log := 'Erro na pk_csf_api.pkb_val_ler_nf_canc_ff fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenericonf_id  log_generico.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenericonf_id
                             , ev_mensagem         => gv_mensagem_log
                             , ev_resumo           => gv_cabec_log
                             , en_tipo_log         => erro_de_validacao
                             , en_referencia_id    => gn_referencia_id
                             , ev_obj_referencia   => gv_obj_referencia );
         -- Armazena o "loggenerico_id" na memória
         pkb_gt_log_generico_nf ( en_loggenericonf_id => vn_loggenericonf_id
                                   , est_log_generico_nf => est_log_generico_nf );
      exception
         when others then
            null;
      end;
      --
end pkb_val_ler_nf_canc_ff;
--
--------------------------------------------------------
-- CRIA NOTA_FISCAL_MDE  --
--------------------------------------------------------
PROCEDURE PKB_GRAVA_MDE ( EN_NOTAFISCAL_ID       NOTA_FISCAL.ID%TYPE
                        , EA_TIPOEVENTOSEFAZ_ID  TIPO_EVENTO_SEFAZ.ID%TYPE
                        , EA_JUSTIFICATIVA       VARCHAR2 DEFAULT NULL)
IS
   --
   vn_fase number := 0;
   --
BEGIN
   --
   vn_fase := 1;
   --
   IF EA_TIPOEVENTOSEFAZ_ID IS NOT NULL THEN
      --
      if not fkg_ck_nota_fiscal_mde_registr(en_notafiscal_id, ea_tipoeventosefaz_id) then
         --
     insert into nota_fiscal_mde(id
                                ,notafiscal_id
                                ,dm_situacao
                                ,dt_hr_evento
                                ,tipoeventosefaz_id
                                ,just
                                ,dm_tipo_integra)
                          values(notafiscalmde_seq.nextval
                                ,EN_NOTAFISCAL_ID
                                ,0 -- NÃO VALIDADO
                                ,sysdate
                                ,EA_TIPOEVENTOSEFAZ_ID
                                ,EA_JUSTIFICATIVA
                                ,0 -- Tipo de integração do evento. (0-Gerado automático pela aplicação/1-Manualmente no portal/2-Integração Webservice)								
								);
            --                  
         end if;
         --                     
     COMMIT;
   END IF;
   --
EXCEPTION
   when others then
      --
      gv_mensagem_log := 'Erro na PKB_GRAVA_MDE fase('||vn_fase||'): '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_nf.id%type;
      begin
         pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                             , ev_mensagem         => gv_cabec_log
                             , ev_resumo           => gv_mensagem_log
                             , en_tipo_log         => erro_de_validacao
                             , ev_obj_referencia   => 'NOTA_FISCAL_MDE' );
      exception
         when others then
            null;
      end;
      --
END PKB_GRAVA_MDE;
--
-----------------------------------------------------------------------------------------------------
-- PROCEDURE PARA RETORNAR OS VALORES DE TRIBUTAÇÃO PROVENIENTES DO IBPT
procedure pkb_busca_vlr_aprox_ibpt ( ev_cod_mod         in mod_fiscal.cod_mod%type,
                                     ev_uf_empresa      in estado.sigla_estado%type,
                                    -- en_dm_id_dest      in number,--#73353
                                     en_orig_trib_fed   in number,  --#73353
                                     ev_codigo          in valor_aprox_tributo.codigo%type,
                                     en_dm_tipo         in valor_aprox_tributo.dm_tipo%type,
                                     ev_ex_tipi         in valor_aprox_tributo.ex_tipi%type default null,
                                     ed_dt_emiss        in date,
                                     sn_trib_federal   out valor_aprox_tributo.trib_fed_nacional%type,
                                     sn_trib_estadual  out valor_aprox_tributo.trib_estadual%type,
                                     sn_trib_municipal out valor_aprox_tributo.trib_municipal%type,
                                     sv_chave_ibpt     out valor_aprox_tributo.chave_ibpt%type,
                                     sn_fonte          out valor_aprox_tributo.fonte%type,
                                     sn_erro           out number)
is
   --
   vn_fase number := 0;
   ga_valor_aprox_tributo tb_valor_aprox_tributo := tb_valor_aprox_tributo();
   --

   --
   -- Simplificação de geração de log_gnerico para o processo
   procedure pb_gera_log_generico is
      --
      vn_loggenerico_id  log_generico_nf.id%type;
      --
   begin
      --
      sn_erro := nvl(sn_erro,0) + 1;
      --
      pkb_log_generico_nf ( sn_loggenericonf_id => vn_loggenerico_id
                          , ev_mensagem         => gv_cabec_log
                          , ev_resumo           => gv_mensagem_log
                          , en_tipo_log         => informacao
                          , ev_obj_referencia   => 'NOTA_FISCAL' );
      --
   exception
      when others then
         null;
   end pb_gera_log_generico;
   --
begin
   -- Pré-Checagem de Parãmetros
   begin
      --
      vn_fase := 1;
      --
      -- Checa Parâmetros Obrigatórios: ev_cod_mod
      if nvl(ev_cod_mod, 0) = 0 then
         --
         gv_mensagem_log := 'O Parâmetro obrigatório ev_cod_mod não foi informado'||chr(13)||
                            'Rotina: pk_csf_api.fkg_busca_vlr_aprox_ibpt:';
         pb_gera_log_generico;
         --
      end if;
      --
      vn_fase := 2;
      --
      -- Checa Parâmetros Obrigatórios: ev_uf_empresa
      if nvl(ev_uf_empresa, 'A') = 'A' then
         --
         gv_mensagem_log := 'O Parâmetro obrigatório ev_uf_empresa não foi informado'||chr(13)||
                            'Rotina: pk_csf_api.fkg_busca_vlr_aprox_ibpt:';
         pb_gera_log_generico;
         --
      end if;
      --
      vn_fase := 3;
      --
      -- #73353 retirada regra
      -- Checa Parâmetros Obrigatórios: en_dm_id_dest
    /*  if nvl(en_dm_id_dest, 0) = 0 then
         --
         gv_mensagem_log := 'O Parâmetro obrigatório en_dm_id_dest não foi informado'||chr(13)||
                            'Rotina: pk_csf_api.fkg_busca_vlr_aprox_ibpt:';
         pb_gera_log_generico;
         --
      end if;
    */  --
      vn_fase := 4;
      --
      -- Checa Parâmetros Obrigatórios: ev_codigo
      if nvl(ev_codigo, 0) = 0 then
         --
         gv_mensagem_log := 'O Parâmetro obrigatório ev_codigo não foi informado'||chr(13)||
                            'Rotina: pk_csf_api.fkg_busca_vlr_aprox_ibpt:';
         pb_gera_log_generico;
         --
      end if;
      --
      vn_fase := 5;
      --
      -- Checa Parâmetros Obrigatórios: ev_codigo
      if nvl(en_dm_tipo, -1) = -1 then
         --
         gv_mensagem_log := 'O Parâmetro obrigatório en_dm_tipo não foi informado'||chr(13)||
                            'Rotina: pk_csf_api.fkg_busca_vlr_aprox_ibpt:';
         pb_gera_log_generico;
         --
      end if;
      --
   end; -- Pré-Checagem de Parãmetros
   --
   --
   vn_fase := 6;
   --
   -- Popular o array para agilizar as operaçõse
   begin
      select tp_valor_aprox_tributo(id
                                  , uf
                                  , dm_tipo
                                  , codigo
                                  , ex_tipi
                                  , descricao
                                  , trib_fed_nacional
                                  , trib_fed_importado
                                  , trib_estadual
                                  , trib_municipal
                                  , dt_ini
                                  , dt_fim
                                  , chave_ibpt
                                  , versao
                                  , fonte
                                  , qtd_util) bulk collect into ga_valor_aprox_tributo
        from VALOR_APROX_TRIBUTO vat -- UK: UF, DM_TIPO, CODIGO, EX_TIPI, DT_INI
      where vat.uf      = ev_uf_empresa
        and vat.codigo  = ev_codigo
        and vat.dm_tipo = en_dm_tipo
        and ((ev_ex_tipi is null and vat.ex_tipi is null) or (vat.ex_tipi = ev_ex_tipi))
        and ed_dt_emiss between vat.dt_ini
                            and nvl(vat.dt_fim, sysdate)
        and (ev_cod_mod  = '99' and vat.dm_tipo in (1,2) or
             ev_cod_mod != '99' and vat.dm_tipo = 0);
   exception
      when others then
         null;
   end;
   --
   vn_fase := 7;
   --
   -- Checa se foi encontrato registros
   if ga_valor_aprox_tributo.count = 0 then
      --
      gv_mensagem_log := 'Não foi encontrado um valor aproximado do tributo para os parametros informados.'||chr(13)||
                         'Favor verificar o cadastro da tabela VALOR_APROX_TRIBUTO'                        ||chr(13)||
                         'Rotina: pk_csf_api.fkg_busca_vlr_aprox_ibpt:';
      pb_gera_log_generico;
      --
   elsif ga_valor_aprox_tributo.count = 1 then
      --
      begin
         select --decode(en_dm_id_dest, 3, vat.trib_fed_importado, vat.trib_fed_nacional) trib_federal,
                case 
                 when nvl(en_orig_trib_fed,0) in (0,3,4,5)   then vat.trib_fed_nacional
                 when nvl(en_orig_trib_fed,0) in (1,2,6,7,8) then vat.trib_fed_importado
                end trib_federal, --#73353
                vat.trib_estadual,
                vat.trib_municipal,
                vat.chave_ibpt,
                vat.fonte
           into sn_trib_federal,
                sn_trib_estadual,
                sn_trib_municipal,
                sv_chave_ibpt,
                sn_fonte
         from TABLE(ga_valor_aprox_tributo) vat;
         --
      exception
         when others then
            --
            gv_mensagem_log := 'Erro desconhecido, contactar o suporte e informar esta mensagem de erro'||chr(13)||
                               ' - '||sqlerrm                                                           ||chr(13)||
                               ' - Rotina: pk_csf_api.fkg_busca_vlr_aprox_ibpt:';
            pb_gera_log_generico;
            --
      end;
      --
   elsif ga_valor_aprox_tributo.count > 1 then
      --
      begin
         select --decode(en_dm_id_dest, 3, vat.trib_fed_importado, vat.trib_fed_nacional) trib_federal,
                case 
                 when nvl(en_orig_trib_fed,0) in (0,3,4,5)   then vat.trib_fed_nacional
                 when nvl(en_orig_trib_fed,0) in (1,2,6,7,8) then vat.trib_fed_importado
                end trib_federal, --#73353
                vat.trib_estadual,
                vat.trib_municipal,
                vat.chave_ibpt,
                vat.fonte
           into sn_trib_federal,
                sn_trib_estadual,
                sn_trib_municipal,
                sv_chave_ibpt,
                sn_fonte
         from TABLE(ga_valor_aprox_tributo) vat
         where vat.qtd_util = (select max(vat2.qtd_util)
                                 from TABLE(ga_valor_aprox_tributo) vat2);
         --
      exception
         when others then
            --
            gv_mensagem_log := 'Erro desconhecido, contactar o suporte e informar esta mensagem de erro'||chr(13)||
                               ' - '||sqlerrm                                                           ||chr(13)||
                               ' - Rotina: pk_csf_api.fkg_busca_vlr_aprox_ibpt:';
            pb_gera_log_generico;
            --
      end;
      --
   end if;
   --
exception
  when others then
     --
     sn_erro := nvl(sn_erro,0) + 1;
     --
end pkb_busca_vlr_aprox_ibpt;
--
-----------------------------------------------------------------------------------------------------
END pk_csf_api;
/
